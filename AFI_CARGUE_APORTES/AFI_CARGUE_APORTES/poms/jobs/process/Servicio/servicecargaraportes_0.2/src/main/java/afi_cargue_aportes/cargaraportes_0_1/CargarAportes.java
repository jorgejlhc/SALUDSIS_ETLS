// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for ESB
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


package afi_cargue_aportes.cargaraportes_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;
 




	//the import part of tJavaRow_2
	//import java.util.List;

	//the import part of tJavaRow_11
	//import java.util.List;

	//the import part of tJavaRow_5
	//import java.util.List;

	//the import part of tJavaRow_10
	//import java.util.List;

	//the import part of tJavaRow_12
	//import java.util.List;

	//the import part of tJavaRow_1
	//import java.util.List;

	//the import part of tJavaRow_13
	//import java.util.List;


@SuppressWarnings("unused")

/**
 * Job: CargarAportes Purpose: <br>
 * Description: Carga aportes de manera provicional mientras sale recaudo <br>
 * @author jorgejlhc@gmail.com
 * @version 8.8.8.20240722_1936-SNAPSHOT
 * @status 
 */
public class CargarAportes implements TalendJob {

protected static void logIgnoredError(String message, Throwable cause) {
       System.err.println(message);
       if (cause != null) {
               cause.printStackTrace();
       }

}


	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}
	
	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	
	private final static String utf8Charset = "UTF-8";
	

	//contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String,String> propertyTypes = new java.util.HashMap<>();
		
		public PropertiesWithType(java.util.Properties properties){
			super(properties);
		}
		public PropertiesWithType(){
			super();
		}
		
		public void setContextType(String key, String type) {
			propertyTypes.put(key,type);
		}
	
		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}	
	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();
		

	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties){
			super(properties);
		}
		public ContextProperties(){
			super();
		}

		public void synchronizeContext(){
			
			if(Host != null){
				
					this.setProperty("Host", Host.toString());
				
			}
			
			if(Port != null){
				
					this.setProperty("Port", Port.toString());
				
			}
			
			if(Sid != null){
				
					this.setProperty("Sid", Sid.toString());
				
			}
			
			if(User != null){
				
					this.setProperty("User", User.toString());
				
			}
			
			if(Password != null){
				
					this.setProperty("Password", Password.toString());
				
			}
			
			if(Contenido != null){
				
					this.setProperty("Contenido", Contenido.toString());
				
			}
			
			if(Fila != null){
				
					this.setProperty("Fila", Fila.toString());
				
			}
			
			if(TipoRegistro != null){
				
					this.setProperty("TipoRegistro", TipoRegistro.toString());
				
			}
			
			if(TipoRegistro2 != null){
				
					this.setProperty("TipoRegistro2", TipoRegistro2.toString());
				
			}
			
			if(ARCHIVOS_ID != null){
				
					this.setProperty("ARCHIVOS_ID", ARCHIVOS_ID.toString());
				
			}
			
			if(Errores != null){
				
					this.setProperty("Errores", Errores.toString());
				
			}
			
			if(ContadorRegistros != null){
				
					this.setProperty("ContadorRegistros", ContadorRegistros.toString());
				
			}
			
		}
		
		//if the stored or passed value is "<TALEND_NULL>" string, it mean null
		public String getStringValue(String key) {
			String origin_value = this.getProperty(key);
			if(NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY.equals(origin_value)) {
				return null;
			}
			return origin_value;
		}

public String Host;
public String getHost(){
	return this.Host;
}
public String Port;
public String getPort(){
	return this.Port;
}
public String Sid;
public String getSid(){
	return this.Sid;
}
public String User;
public String getUser(){
	return this.User;
}
public String Password;
public String getPassword(){
	return this.Password;
}
public Object Contenido;
public Object getContenido(){
	return this.Contenido;
}
public String Fila;
public String getFila(){
	return this.Fila;
}
public Character TipoRegistro;
public Character getTipoRegistro(){
	return this.TipoRegistro;
}
public Character TipoRegistro2;
public Character getTipoRegistro2(){
	return this.TipoRegistro2;
}
public BigDecimal ARCHIVOS_ID;
public BigDecimal getARCHIVOS_ID(){
	return this.ARCHIVOS_ID;
}
public String Errores;
public String getErrores(){
	return this.Errores;
}
public Integer ContadorRegistros;
public Integer getContadorRegistros(){
	return this.ContadorRegistros;
}
	}
			
	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.
	public ContextProperties getContext() {
		return this.context;
	}
	private final String jobVersion = "0.1";
	private final String jobName = "CargarAportes";
	private final String projectName = "AFI_CARGUE_APORTES";
	public Integer errorCode = null;
	private String currentComponent = "";
	
	private String cLabel =  null;
	
		private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
        private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();
	
		private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
		public  final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();
	

private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";
	
	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(), new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}
	
	public void setDataSourceReferences(List serviceReferences) throws Exception{
		
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		java.util.Map<String, javax.sql.DataSource> dataSources = new java.util.HashMap<String, javax.sql.DataSource>();
		
		for (java.util.Map.Entry<String, javax.sql.DataSource> entry : BundleUtils.getServices(serviceReferences,  javax.sql.DataSource.class).entrySet()) {
                    dataSources.put(entry.getKey(), entry.getValue());
                    talendDataSources.put(entry.getKey(), new routines.system.TalendDataSource(entry.getValue()));
		}

		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}

	LogCatcherUtils tLogCatcher_1 = new LogCatcherUtils();

private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

public String getExceptionStackTrace() {
	if ("failure".equals(this.getStatus())) {
		errorMessagePS.flush();
		return baos.toString();
	}
	return null;
}

private Exception exception;

public Exception getException() {
	if ("failure".equals(this.getStatus())) {
		return this.exception;
	}
	return null;
}

private class TalendException extends Exception {

	private static final long serialVersionUID = 1L;

	private java.util.Map<String, Object> globalMap = null;
	private Exception e = null;
	
	private String currentComponent = null;
	private String cLabel =  null;
	
	private String virtualComponentName = null;
	
	public void setVirtualComponentName (String virtualComponentName){
		this.virtualComponentName = virtualComponentName;
	}

	private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
		this.currentComponent= errorComponent;
		this.globalMap = globalMap;
		this.e = e;
	}
	
	private TalendException(Exception e, String errorComponent, String errorComponentLabel, final java.util.Map<String, Object> globalMap) {
		this(e, errorComponent, globalMap);
		this.cLabel = errorComponentLabel;
	}

	public Exception getException() {
		return this.e;
	}

	public String getCurrentComponent() {
		return this.currentComponent;
	}

	
    public String getExceptionCauseMessage(Exception e){
        Throwable cause = e;
        String message = null;
        int i = 10;
        while (null != cause && 0 < i--) {
            message = cause.getMessage();
            if (null == message) {
                cause = cause.getCause();
            } else {
                break;          
            }
        }
        if (null == message) {
            message = e.getClass().getName();
        }   
        return message;
    }

	@Override
	public void printStackTrace() {
		if (!(e instanceof TalendException || e instanceof TDieException)) {
			if(virtualComponentName!=null && currentComponent.indexOf(virtualComponentName+"_")==0){
				globalMap.put(virtualComponentName+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			}
			globalMap.put(currentComponent+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
		}
		if (!(e instanceof TDieException)) {
			if(e instanceof TalendException){
				e.printStackTrace();
			} else {
				e.printStackTrace();
				e.printStackTrace(errorMessagePS);
				CargarAportes.this.exception = e;
			}
		}
		if (!(e instanceof TalendException)) {
		try {
			for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
				if (m.getName().compareTo(currentComponent + "_error") == 0) {
					m.invoke(CargarAportes.this, new Object[] { e , currentComponent, globalMap});
					break;
				}
			}

			if(!(e instanceof TDieException)){
				tLogCatcher_1.addMessage("Java Exception", currentComponent, 6, e.getClass().getName() + ":" + e.getMessage(), 1);
				tLogCatcher_1Process(globalMap);
			}
			} catch (TalendException e) {
				// do nothing
			
		} catch (Exception e) {
			this.e.printStackTrace();
		}
		}
	}
}

			public void tOracleInput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaRow_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleOutput_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaRow_11_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleOutput_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleOutput_7_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleOutput_8_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleCommit_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputDelimited_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tExtractPositionalFields_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaRow_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleOutput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFixedFlowInput_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFixedFlowInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaRow_10_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFixedFlowInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleOutput_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFixedFlowInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleCommit_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFixedFlowInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaRow_12_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFixedFlowInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tBufferOutput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFixedFlowInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogRow_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFixedFlowInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputXML_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputXML_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaRow_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputXML_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleConnection_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleConnection_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogCatcher_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tLogCatcher_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaRow_13_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tLogCatcher_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tBufferOutput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tLogCatcher_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogRow_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tLogCatcher_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileInputDelimited_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFixedFlowInput_4_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileInputXML_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleConnection_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tLogCatcher_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
	









public static class row20Struct implements routines.system.IPersistableRow<row20Struct> {
    final static byte[] commonByteArrayLock_AFI_CARGUE_APORTES_CargarAportes = new byte[0];
    static byte[] commonByteArray_AFI_CARGUE_APORTES_CargarAportes = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public BigDecimal ARCHIVOS_ID;

				public BigDecimal getARCHIVOS_ID () {
					return this.ARCHIVOS_ID;
				}

				public Boolean ARCHIVOS_IDIsNullable(){
				    return true;
				}
				public Boolean ARCHIVOS_IDIsKey(){
				    return true;
				}
				public Integer ARCHIVOS_IDLength(){
				    return null;
				}
				public Integer ARCHIVOS_IDPrecision(){
				    return null;
				}
				public String ARCHIVOS_IDDefault(){
				
					return null;
				
				}
				public String ARCHIVOS_IDComment(){
				
				    return "";
				
				}
				public String ARCHIVOS_IDPattern(){
				
					return "";
				
				}
				public String ARCHIVOS_IDOriginalDbColumnName(){
				
					return "ARCHIVOS_ID";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.ARCHIVOS_ID == null) ? 0 : this.ARCHIVOS_ID.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row20Struct other = (row20Struct) obj;
		
						if (this.ARCHIVOS_ID == null) {
							if (other.ARCHIVOS_ID != null)
								return false;
						
						} else if (!this.ARCHIVOS_ID.equals(other.ARCHIVOS_ID))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row20Struct other) {

		other.ARCHIVOS_ID = this.ARCHIVOS_ID;
	            
	}

	public void copyKeysDataTo(row20Struct other) {

		other.ARCHIVOS_ID = this.ARCHIVOS_ID;
	            	
	}




    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_CARGUE_APORTES_CargarAportes) {

        	try {

        		int length = 0;
		
						this.ARCHIVOS_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_CARGUE_APORTES_CargarAportes) {

        	try {

        		int length = 0;
		
						this.ARCHIVOS_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.ARCHIVOS_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ARCHIVOS_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ARCHIVOS_ID="+String.valueOf(ARCHIVOS_ID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row20Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.ARCHIVOS_ID, other.ARCHIVOS_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row25Struct implements routines.system.IPersistableRow<row25Struct> {
    final static byte[] commonByteArrayLock_AFI_CARGUE_APORTES_CargarAportes = new byte[0];
    static byte[] commonByteArray_AFI_CARGUE_APORTES_CargarAportes = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public BigDecimal ARCHIVOS_ID;

				public BigDecimal getARCHIVOS_ID () {
					return this.ARCHIVOS_ID;
				}

				public Boolean ARCHIVOS_IDIsNullable(){
				    return true;
				}
				public Boolean ARCHIVOS_IDIsKey(){
				    return true;
				}
				public Integer ARCHIVOS_IDLength(){
				    return null;
				}
				public Integer ARCHIVOS_IDPrecision(){
				    return null;
				}
				public String ARCHIVOS_IDDefault(){
				
					return null;
				
				}
				public String ARCHIVOS_IDComment(){
				
				    return "";
				
				}
				public String ARCHIVOS_IDPattern(){
				
					return "";
				
				}
				public String ARCHIVOS_IDOriginalDbColumnName(){
				
					return "ARCHIVOS_ID";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.ARCHIVOS_ID == null) ? 0 : this.ARCHIVOS_ID.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row25Struct other = (row25Struct) obj;
		
						if (this.ARCHIVOS_ID == null) {
							if (other.ARCHIVOS_ID != null)
								return false;
						
						} else if (!this.ARCHIVOS_ID.equals(other.ARCHIVOS_ID))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row25Struct other) {

		other.ARCHIVOS_ID = this.ARCHIVOS_ID;
	            
	}

	public void copyKeysDataTo(row25Struct other) {

		other.ARCHIVOS_ID = this.ARCHIVOS_ID;
	            	
	}




    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_CARGUE_APORTES_CargarAportes) {

        	try {

        		int length = 0;
		
						this.ARCHIVOS_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_CARGUE_APORTES_CargarAportes) {

        	try {

        		int length = 0;
		
						this.ARCHIVOS_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.ARCHIVOS_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ARCHIVOS_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ARCHIVOS_ID="+String.valueOf(ARCHIVOS_ID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row25Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.ARCHIVOS_ID, other.ARCHIVOS_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row24Struct implements routines.system.IPersistableRow<row24Struct> {
    final static byte[] commonByteArrayLock_AFI_CARGUE_APORTES_CargarAportes = new byte[0];
    static byte[] commonByteArray_AFI_CARGUE_APORTES_CargarAportes = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public BigDecimal ARCHIVOS_ID;

				public BigDecimal getARCHIVOS_ID () {
					return this.ARCHIVOS_ID;
				}

				public Boolean ARCHIVOS_IDIsNullable(){
				    return true;
				}
				public Boolean ARCHIVOS_IDIsKey(){
				    return true;
				}
				public Integer ARCHIVOS_IDLength(){
				    return null;
				}
				public Integer ARCHIVOS_IDPrecision(){
				    return null;
				}
				public String ARCHIVOS_IDDefault(){
				
					return null;
				
				}
				public String ARCHIVOS_IDComment(){
				
				    return "";
				
				}
				public String ARCHIVOS_IDPattern(){
				
					return "";
				
				}
				public String ARCHIVOS_IDOriginalDbColumnName(){
				
					return "ARCHIVOS_ID";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.ARCHIVOS_ID == null) ? 0 : this.ARCHIVOS_ID.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row24Struct other = (row24Struct) obj;
		
						if (this.ARCHIVOS_ID == null) {
							if (other.ARCHIVOS_ID != null)
								return false;
						
						} else if (!this.ARCHIVOS_ID.equals(other.ARCHIVOS_ID))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row24Struct other) {

		other.ARCHIVOS_ID = this.ARCHIVOS_ID;
	            
	}

	public void copyKeysDataTo(row24Struct other) {

		other.ARCHIVOS_ID = this.ARCHIVOS_ID;
	            	
	}




    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_CARGUE_APORTES_CargarAportes) {

        	try {

        		int length = 0;
		
						this.ARCHIVOS_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_CARGUE_APORTES_CargarAportes) {

        	try {

        		int length = 0;
		
						this.ARCHIVOS_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.ARCHIVOS_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ARCHIVOS_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ARCHIVOS_ID="+String.valueOf(ARCHIVOS_ID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row24Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.ARCHIVOS_ID, other.ARCHIVOS_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row23Struct implements routines.system.IPersistableRow<row23Struct> {
    final static byte[] commonByteArrayLock_AFI_CARGUE_APORTES_CargarAportes = new byte[0];
    static byte[] commonByteArray_AFI_CARGUE_APORTES_CargarAportes = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public BigDecimal ID;

				public BigDecimal getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return false;
				}
				public Boolean IDIsKey(){
				    return true;
				}
				public Integer IDLength(){
				    return 0;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return "SALUDSIS\".\"ISEQ$$_158654\".nextval";
				
				}
				public String IDComment(){
				
				    return "Observaciones";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public BigDecimal ESTADO;

				public BigDecimal getESTADO () {
					return this.ESTADO;
				}

				public Boolean ESTADOIsNullable(){
				    return false;
				}
				public Boolean ESTADOIsKey(){
				    return false;
				}
				public Integer ESTADOLength(){
				    return 0;
				}
				public Integer ESTADOPrecision(){
				    return null;
				}
				public String ESTADODefault(){
				
					return "1";
				
				}
				public String ESTADOComment(){
				
				    return "PK - Llave primaria";
				
				}
				public String ESTADOPattern(){
				
					return "";
				
				}
				public String ESTADOOriginalDbColumnName(){
				
					return "ESTADO";
				
				}

				
			    public java.util.Date FECHA_INICIO;

				public java.util.Date getFECHA_INICIO () {
					return this.FECHA_INICIO;
				}

				public Boolean FECHA_INICIOIsNullable(){
				    return true;
				}
				public Boolean FECHA_INICIOIsKey(){
				    return false;
				}
				public Integer FECHA_INICIOLength(){
				    return 7;
				}
				public Integer FECHA_INICIOPrecision(){
				    return 0;
				}
				public String FECHA_INICIODefault(){
				
					return null;
				
				}
				public String FECHA_INICIOComment(){
				
				    return "Padre del archivo del cual se genero el archivo";
				
				}
				public String FECHA_INICIOPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String FECHA_INICIOOriginalDbColumnName(){
				
					return "FECHA_INICIO";
				
				}

				
			    public java.util.Date FECHA_FIN;

				public java.util.Date getFECHA_FIN () {
					return this.FECHA_FIN;
				}

				public Boolean FECHA_FINIsNullable(){
				    return true;
				}
				public Boolean FECHA_FINIsKey(){
				    return false;
				}
				public Integer FECHA_FINLength(){
				    return 7;
				}
				public Integer FECHA_FINPrecision(){
				    return 0;
				}
				public String FECHA_FINDefault(){
				
					return null;
				
				}
				public String FECHA_FINComment(){
				
				    return "Fecha inicial de programacion del archivo";
				
				}
				public String FECHA_FINPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String FECHA_FINOriginalDbColumnName(){
				
					return "FECHA_FIN";
				
				}

				
			    public BigDecimal ARCHIVOS_ID;

				public BigDecimal getARCHIVOS_ID () {
					return this.ARCHIVOS_ID;
				}

				public Boolean ARCHIVOS_IDIsNullable(){
				    return true;
				}
				public Boolean ARCHIVOS_IDIsKey(){
				    return true;
				}
				public Integer ARCHIVOS_IDLength(){
				    return null;
				}
				public Integer ARCHIVOS_IDPrecision(){
				    return null;
				}
				public String ARCHIVOS_IDDefault(){
				
					return null;
				
				}
				public String ARCHIVOS_IDComment(){
				
				    return "";
				
				}
				public String ARCHIVOS_IDPattern(){
				
					return "";
				
				}
				public String ARCHIVOS_IDOriginalDbColumnName(){
				
					return "ARCHIVOS_ID";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.ID == null) ? 0 : this.ID.hashCode());
					
						result = prime * result + ((this.ARCHIVOS_ID == null) ? 0 : this.ARCHIVOS_ID.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row23Struct other = (row23Struct) obj;
		
						if (this.ID == null) {
							if (other.ID != null)
								return false;
						
						} else if (!this.ID.equals(other.ID))
						
							return false;
					
						if (this.ARCHIVOS_ID == null) {
							if (other.ARCHIVOS_ID != null)
								return false;
						
						} else if (!this.ARCHIVOS_ID.equals(other.ARCHIVOS_ID))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row23Struct other) {

		other.ID = this.ID;
	            other.ESTADO = this.ESTADO;
	            other.FECHA_INICIO = this.FECHA_INICIO;
	            other.FECHA_FIN = this.FECHA_FIN;
	            other.ARCHIVOS_ID = this.ARCHIVOS_ID;
	            
	}

	public void copyKeysDataTo(row23Struct other) {

		other.ID = this.ID;
	            	other.ARCHIVOS_ID = this.ARCHIVOS_ID;
	            	
	}




	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_CARGUE_APORTES_CargarAportes) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
						this.ESTADO = (BigDecimal) dis.readObject();
					
					this.FECHA_INICIO = readDate(dis);
					
					this.FECHA_FIN = readDate(dis);
					
						this.ARCHIVOS_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_CARGUE_APORTES_CargarAportes) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
						this.ESTADO = (BigDecimal) dis.readObject();
					
					this.FECHA_INICIO = readDate(dis);
					
					this.FECHA_FIN = readDate(dis);
					
						this.ARCHIVOS_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ESTADO);
					
					// java.util.Date
				
						writeDate(this.FECHA_INICIO,dos);
					
					// java.util.Date
				
						writeDate(this.FECHA_FIN,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ARCHIVOS_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ESTADO);
					
					// java.util.Date
				
						writeDate(this.FECHA_INICIO,dos);
					
					// java.util.Date
				
						writeDate(this.FECHA_FIN,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ARCHIVOS_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",ESTADO="+String.valueOf(ESTADO));
		sb.append(",FECHA_INICIO="+String.valueOf(FECHA_INICIO));
		sb.append(",FECHA_FIN="+String.valueOf(FECHA_FIN));
		sb.append(",ARCHIVOS_ID="+String.valueOf(ARCHIVOS_ID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row23Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.ID, other.ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.ARCHIVOS_ID, other.ARCHIVOS_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row22Struct implements routines.system.IPersistableRow<row22Struct> {
    final static byte[] commonByteArrayLock_AFI_CARGUE_APORTES_CargarAportes = new byte[0];
    static byte[] commonByteArray_AFI_CARGUE_APORTES_CargarAportes = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public BigDecimal ID;

				public BigDecimal getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return false;
				}
				public Boolean IDIsKey(){
				    return true;
				}
				public Integer IDLength(){
				    return 0;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return "SALUDSIS\".\"ISEQ$$_158654\".nextval";
				
				}
				public String IDComment(){
				
				    return "Observaciones";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public BigDecimal ESTADO;

				public BigDecimal getESTADO () {
					return this.ESTADO;
				}

				public Boolean ESTADOIsNullable(){
				    return false;
				}
				public Boolean ESTADOIsKey(){
				    return false;
				}
				public Integer ESTADOLength(){
				    return 0;
				}
				public Integer ESTADOPrecision(){
				    return null;
				}
				public String ESTADODefault(){
				
					return "1";
				
				}
				public String ESTADOComment(){
				
				    return "PK - Llave primaria";
				
				}
				public String ESTADOPattern(){
				
					return "";
				
				}
				public String ESTADOOriginalDbColumnName(){
				
					return "ESTADO";
				
				}

				
			    public java.util.Date FECHA_INICIO;

				public java.util.Date getFECHA_INICIO () {
					return this.FECHA_INICIO;
				}

				public Boolean FECHA_INICIOIsNullable(){
				    return true;
				}
				public Boolean FECHA_INICIOIsKey(){
				    return false;
				}
				public Integer FECHA_INICIOLength(){
				    return 7;
				}
				public Integer FECHA_INICIOPrecision(){
				    return 0;
				}
				public String FECHA_INICIODefault(){
				
					return null;
				
				}
				public String FECHA_INICIOComment(){
				
				    return "Padre del archivo del cual se genero el archivo";
				
				}
				public String FECHA_INICIOPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String FECHA_INICIOOriginalDbColumnName(){
				
					return "FECHA_INICIO";
				
				}

				
			    public java.util.Date FECHA_FIN;

				public java.util.Date getFECHA_FIN () {
					return this.FECHA_FIN;
				}

				public Boolean FECHA_FINIsNullable(){
				    return true;
				}
				public Boolean FECHA_FINIsKey(){
				    return false;
				}
				public Integer FECHA_FINLength(){
				    return 7;
				}
				public Integer FECHA_FINPrecision(){
				    return 0;
				}
				public String FECHA_FINDefault(){
				
					return null;
				
				}
				public String FECHA_FINComment(){
				
				    return "Fecha inicial de programacion del archivo";
				
				}
				public String FECHA_FINPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String FECHA_FINOriginalDbColumnName(){
				
					return "FECHA_FIN";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.ID == null) ? 0 : this.ID.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row22Struct other = (row22Struct) obj;
		
						if (this.ID == null) {
							if (other.ID != null)
								return false;
						
						} else if (!this.ID.equals(other.ID))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row22Struct other) {

		other.ID = this.ID;
	            other.ESTADO = this.ESTADO;
	            other.FECHA_INICIO = this.FECHA_INICIO;
	            other.FECHA_FIN = this.FECHA_FIN;
	            
	}

	public void copyKeysDataTo(row22Struct other) {

		other.ID = this.ID;
	            	
	}




	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_CARGUE_APORTES_CargarAportes) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
						this.ESTADO = (BigDecimal) dis.readObject();
					
					this.FECHA_INICIO = readDate(dis);
					
					this.FECHA_FIN = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_CARGUE_APORTES_CargarAportes) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
						this.ESTADO = (BigDecimal) dis.readObject();
					
					this.FECHA_INICIO = readDate(dis);
					
					this.FECHA_FIN = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ESTADO);
					
					// java.util.Date
				
						writeDate(this.FECHA_INICIO,dos);
					
					// java.util.Date
				
						writeDate(this.FECHA_FIN,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ESTADO);
					
					// java.util.Date
				
						writeDate(this.FECHA_INICIO,dos);
					
					// java.util.Date
				
						writeDate(this.FECHA_FIN,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",ESTADO="+String.valueOf(ESTADO));
		sb.append(",FECHA_INICIO="+String.valueOf(FECHA_INICIO));
		sb.append(",FECHA_FIN="+String.valueOf(FECHA_FIN));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row22Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.ID, other.ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row21Struct implements routines.system.IPersistableRow<row21Struct> {
    final static byte[] commonByteArrayLock_AFI_CARGUE_APORTES_CargarAportes = new byte[0];
    static byte[] commonByteArray_AFI_CARGUE_APORTES_CargarAportes = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public BigDecimal ID;

				public BigDecimal getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return false;
				}
				public Boolean IDIsKey(){
				    return true;
				}
				public Integer IDLength(){
				    return 0;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return "SALUDSIS\".\"ISEQ$$_158654\".nextval";
				
				}
				public String IDComment(){
				
				    return "Observaciones";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public BigDecimal ESTADO;

				public BigDecimal getESTADO () {
					return this.ESTADO;
				}

				public Boolean ESTADOIsNullable(){
				    return false;
				}
				public Boolean ESTADOIsKey(){
				    return false;
				}
				public Integer ESTADOLength(){
				    return 0;
				}
				public Integer ESTADOPrecision(){
				    return null;
				}
				public String ESTADODefault(){
				
					return "1";
				
				}
				public String ESTADOComment(){
				
				    return "PK - Llave primaria";
				
				}
				public String ESTADOPattern(){
				
					return "";
				
				}
				public String ESTADOOriginalDbColumnName(){
				
					return "ESTADO";
				
				}

				
			    public java.util.Date FECHA_INICIO;

				public java.util.Date getFECHA_INICIO () {
					return this.FECHA_INICIO;
				}

				public Boolean FECHA_INICIOIsNullable(){
				    return true;
				}
				public Boolean FECHA_INICIOIsKey(){
				    return false;
				}
				public Integer FECHA_INICIOLength(){
				    return 7;
				}
				public Integer FECHA_INICIOPrecision(){
				    return 0;
				}
				public String FECHA_INICIODefault(){
				
					return null;
				
				}
				public String FECHA_INICIOComment(){
				
				    return "Padre del archivo del cual se genero el archivo";
				
				}
				public String FECHA_INICIOPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String FECHA_INICIOOriginalDbColumnName(){
				
					return "FECHA_INICIO";
				
				}

				
			    public java.util.Date FECHA_FIN;

				public java.util.Date getFECHA_FIN () {
					return this.FECHA_FIN;
				}

				public Boolean FECHA_FINIsNullable(){
				    return true;
				}
				public Boolean FECHA_FINIsKey(){
				    return false;
				}
				public Integer FECHA_FINLength(){
				    return 7;
				}
				public Integer FECHA_FINPrecision(){
				    return 0;
				}
				public String FECHA_FINDefault(){
				
					return null;
				
				}
				public String FECHA_FINComment(){
				
				    return "Fecha inicial de programacion del archivo";
				
				}
				public String FECHA_FINPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String FECHA_FINOriginalDbColumnName(){
				
					return "FECHA_FIN";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.ID == null) ? 0 : this.ID.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row21Struct other = (row21Struct) obj;
		
						if (this.ID == null) {
							if (other.ID != null)
								return false;
						
						} else if (!this.ID.equals(other.ID))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row21Struct other) {

		other.ID = this.ID;
	            other.ESTADO = this.ESTADO;
	            other.FECHA_INICIO = this.FECHA_INICIO;
	            other.FECHA_FIN = this.FECHA_FIN;
	            
	}

	public void copyKeysDataTo(row21Struct other) {

		other.ID = this.ID;
	            	
	}




	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_CARGUE_APORTES_CargarAportes) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
						this.ESTADO = (BigDecimal) dis.readObject();
					
					this.FECHA_INICIO = readDate(dis);
					
					this.FECHA_FIN = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_CARGUE_APORTES_CargarAportes) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
						this.ESTADO = (BigDecimal) dis.readObject();
					
					this.FECHA_INICIO = readDate(dis);
					
					this.FECHA_FIN = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ESTADO);
					
					// java.util.Date
				
						writeDate(this.FECHA_INICIO,dos);
					
					// java.util.Date
				
						writeDate(this.FECHA_FIN,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ESTADO);
					
					// java.util.Date
				
						writeDate(this.FECHA_INICIO,dos);
					
					// java.util.Date
				
						writeDate(this.FECHA_FIN,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",ESTADO="+String.valueOf(ESTADO));
		sb.append(",FECHA_INICIO="+String.valueOf(FECHA_INICIO));
		sb.append(",FECHA_FIN="+String.valueOf(FECHA_FIN));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row21Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.ID, other.ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row2Struct implements routines.system.IPersistableRow<row2Struct> {
    final static byte[] commonByteArrayLock_AFI_CARGUE_APORTES_CargarAportes = new byte[0];
    static byte[] commonByteArray_AFI_CARGUE_APORTES_CargarAportes = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public BigDecimal ID;

				public BigDecimal getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return false;
				}
				public Boolean IDIsKey(){
				    return true;
				}
				public Integer IDLength(){
				    return 0;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return "SALUDSIS\".\"ISEQ$$_158654\".nextval";
				
				}
				public String IDComment(){
				
				    return "Observaciones";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public BigDecimal ESTADO;

				public BigDecimal getESTADO () {
					return this.ESTADO;
				}

				public Boolean ESTADOIsNullable(){
				    return false;
				}
				public Boolean ESTADOIsKey(){
				    return false;
				}
				public Integer ESTADOLength(){
				    return 0;
				}
				public Integer ESTADOPrecision(){
				    return null;
				}
				public String ESTADODefault(){
				
					return "1";
				
				}
				public String ESTADOComment(){
				
				    return "PK - Llave primaria";
				
				}
				public String ESTADOPattern(){
				
					return "";
				
				}
				public String ESTADOOriginalDbColumnName(){
				
					return "ESTADO";
				
				}

				
			    public String ARCHIVO;

				public String getARCHIVO () {
					return this.ARCHIVO;
				}

				public Boolean ARCHIVOIsNullable(){
				    return false;
				}
				public Boolean ARCHIVOIsKey(){
				    return false;
				}
				public Integer ARCHIVOLength(){
				    return 100;
				}
				public Integer ARCHIVOPrecision(){
				    return 0;
				}
				public String ARCHIVODefault(){
				
					return null;
				
				}
				public String ARCHIVOComment(){
				
				    return "Estado del trabajo (1 Activo - 2 Realizado - 3 Fallido - 4 Cancelado)";
				
				}
				public String ARCHIVOPattern(){
				
					return "";
				
				}
				public String ARCHIVOOriginalDbColumnName(){
				
					return "ARCHIVO";
				
				}

				
			    public BigDecimal TARCHIVOS_ID;

				public BigDecimal getTARCHIVOS_ID () {
					return this.TARCHIVOS_ID;
				}

				public Boolean TARCHIVOS_IDIsNullable(){
				    return false;
				}
				public Boolean TARCHIVOS_IDIsKey(){
				    return false;
				}
				public Integer TARCHIVOS_IDLength(){
				    return 0;
				}
				public Integer TARCHIVOS_IDPrecision(){
				    return null;
				}
				public String TARCHIVOS_IDDefault(){
				
					return null;
				
				}
				public String TARCHIVOS_IDComment(){
				
				    return "Nombre del archivo";
				
				}
				public String TARCHIVOS_IDPattern(){
				
					return "";
				
				}
				public String TARCHIVOS_IDOriginalDbColumnName(){
				
					return "TARCHIVOS_ID";
				
				}

				
			    public BigDecimal USUARIOS_ID;

				public BigDecimal getUSUARIOS_ID () {
					return this.USUARIOS_ID;
				}

				public Boolean USUARIOS_IDIsNullable(){
				    return false;
				}
				public Boolean USUARIOS_IDIsKey(){
				    return false;
				}
				public Integer USUARIOS_IDLength(){
				    return 0;
				}
				public Integer USUARIOS_IDPrecision(){
				    return null;
				}
				public String USUARIOS_IDDefault(){
				
					return null;
				
				}
				public String USUARIOS_IDComment(){
				
				    return "FK - AFI_TARCHIVOS";
				
				}
				public String USUARIOS_IDPattern(){
				
					return "";
				
				}
				public String USUARIOS_IDOriginalDbColumnName(){
				
					return "USUARIOS_ID";
				
				}

				
			    public String CODIGO;

				public String getCODIGO () {
					return this.CODIGO;
				}

				public Boolean CODIGOIsNullable(){
				    return true;
				}
				public Boolean CODIGOIsKey(){
				    return false;
				}
				public Integer CODIGOLength(){
				    return 10;
				}
				public Integer CODIGOPrecision(){
				    return 0;
				}
				public String CODIGODefault(){
				
					return null;
				
				}
				public String CODIGOComment(){
				
				    return "FK - GEN_USUARIOS (Usuario que subio el archivo)";
				
				}
				public String CODIGOPattern(){
				
					return "";
				
				}
				public String CODIGOOriginalDbColumnName(){
				
					return "CODIGO";
				
				}

				
			    public String ARCHIVOFS;

				public String getARCHIVOFS () {
					return this.ARCHIVOFS;
				}

				public Boolean ARCHIVOFSIsNullable(){
				    return false;
				}
				public Boolean ARCHIVOFSIsKey(){
				    return false;
				}
				public Integer ARCHIVOFSLength(){
				    return 100;
				}
				public Integer ARCHIVOFSPrecision(){
				    return 0;
				}
				public String ARCHIVOFSDefault(){
				
					return null;
				
				}
				public String ARCHIVOFSComment(){
				
				    return "Codigo de identificacion del archivo";
				
				}
				public String ARCHIVOFSPattern(){
				
					return "";
				
				}
				public String ARCHIVOFSOriginalDbColumnName(){
				
					return "ARCHIVOFS";
				
				}

				
			    public java.util.Date FECHA;

				public java.util.Date getFECHA () {
					return this.FECHA;
				}

				public Boolean FECHAIsNullable(){
				    return false;
				}
				public Boolean FECHAIsKey(){
				    return false;
				}
				public Integer FECHALength(){
				    return 7;
				}
				public Integer FECHAPrecision(){
				    return 0;
				}
				public String FECHADefault(){
				
					return null;
				
				}
				public String FECHAComment(){
				
				    return "Nombre del archivo en el File System";
				
				}
				public String FECHAPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String FECHAOriginalDbColumnName(){
				
					return "FECHA";
				
				}

				
			    public BigDecimal ESTREGISTRO_ID;

				public BigDecimal getESTREGISTRO_ID () {
					return this.ESTREGISTRO_ID;
				}

				public Boolean ESTREGISTRO_IDIsNullable(){
				    return false;
				}
				public Boolean ESTREGISTRO_IDIsKey(){
				    return false;
				}
				public Integer ESTREGISTRO_IDLength(){
				    return 0;
				}
				public Integer ESTREGISTRO_IDPrecision(){
				    return null;
				}
				public String ESTREGISTRO_IDDefault(){
				
					return "1";
				
				}
				public String ESTREGISTRO_IDComment(){
				
				    return "Fecha y hora del registro";
				
				}
				public String ESTREGISTRO_IDPattern(){
				
					return "";
				
				}
				public String ESTREGISTRO_IDOriginalDbColumnName(){
				
					return "ESTREGISTRO_ID";
				
				}

				
			    public String EXTENSION;

				public String getEXTENSION () {
					return this.EXTENSION;
				}

				public Boolean EXTENSIONIsNullable(){
				    return true;
				}
				public Boolean EXTENSIONIsKey(){
				    return false;
				}
				public Integer EXTENSIONLength(){
				    return 5;
				}
				public Integer EXTENSIONPrecision(){
				    return 0;
				}
				public String EXTENSIONDefault(){
				
					return null;
				
				}
				public String EXTENSIONComment(){
				
				    return "FK - GEN_ESTREGISTRO (Estado del Registro)";
				
				}
				public String EXTENSIONPattern(){
				
					return "";
				
				}
				public String EXTENSIONOriginalDbColumnName(){
				
					return "EXTENSION";
				
				}

				
			    public Object CONTENIDO;

				public Object getCONTENIDO () {
					return this.CONTENIDO;
				}

				public Boolean CONTENIDOIsNullable(){
				    return true;
				}
				public Boolean CONTENIDOIsKey(){
				    return false;
				}
				public Integer CONTENIDOLength(){
				    return 4000;
				}
				public Integer CONTENIDOPrecision(){
				    return 0;
				}
				public String CONTENIDODefault(){
				
					return null;
				
				}
				public String CONTENIDOComment(){
				
				    return "Extension del archivo";
				
				}
				public String CONTENIDOPattern(){
				
					return "";
				
				}
				public String CONTENIDOOriginalDbColumnName(){
				
					return "CONTENIDO";
				
				}

				
			    public BigDecimal PADRE_ID;

				public BigDecimal getPADRE_ID () {
					return this.PADRE_ID;
				}

				public Boolean PADRE_IDIsNullable(){
				    return true;
				}
				public Boolean PADRE_IDIsKey(){
				    return false;
				}
				public Integer PADRE_IDLength(){
				    return 0;
				}
				public Integer PADRE_IDPrecision(){
				    return null;
				}
				public String PADRE_IDDefault(){
				
					return null;
				
				}
				public String PADRE_IDComment(){
				
				    return "Contenido del archivo";
				
				}
				public String PADRE_IDPattern(){
				
					return "";
				
				}
				public String PADRE_IDOriginalDbColumnName(){
				
					return "PADRE_ID";
				
				}

				
			    public java.util.Date FECHA_INICIO;

				public java.util.Date getFECHA_INICIO () {
					return this.FECHA_INICIO;
				}

				public Boolean FECHA_INICIOIsNullable(){
				    return true;
				}
				public Boolean FECHA_INICIOIsKey(){
				    return false;
				}
				public Integer FECHA_INICIOLength(){
				    return 7;
				}
				public Integer FECHA_INICIOPrecision(){
				    return 0;
				}
				public String FECHA_INICIODefault(){
				
					return null;
				
				}
				public String FECHA_INICIOComment(){
				
				    return "Padre del archivo del cual se genero el archivo";
				
				}
				public String FECHA_INICIOPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String FECHA_INICIOOriginalDbColumnName(){
				
					return "FECHA_INICIO";
				
				}

				
			    public java.util.Date FECHA_FIN;

				public java.util.Date getFECHA_FIN () {
					return this.FECHA_FIN;
				}

				public Boolean FECHA_FINIsNullable(){
				    return true;
				}
				public Boolean FECHA_FINIsKey(){
				    return false;
				}
				public Integer FECHA_FINLength(){
				    return 7;
				}
				public Integer FECHA_FINPrecision(){
				    return 0;
				}
				public String FECHA_FINDefault(){
				
					return null;
				
				}
				public String FECHA_FINComment(){
				
				    return "Fecha inicial de programacion del archivo";
				
				}
				public String FECHA_FINPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String FECHA_FINOriginalDbColumnName(){
				
					return "FECHA_FIN";
				
				}

				
			    public Object OBSERVACIONES;

				public Object getOBSERVACIONES () {
					return this.OBSERVACIONES;
				}

				public Boolean OBSERVACIONESIsNullable(){
				    return true;
				}
				public Boolean OBSERVACIONESIsKey(){
				    return false;
				}
				public Integer OBSERVACIONESLength(){
				    return 4000;
				}
				public Integer OBSERVACIONESPrecision(){
				    return 0;
				}
				public String OBSERVACIONESDefault(){
				
					return null;
				
				}
				public String OBSERVACIONESComment(){
				
				    return "Fecha final de programacion del archivo";
				
				}
				public String OBSERVACIONESPattern(){
				
					return "";
				
				}
				public String OBSERVACIONESOriginalDbColumnName(){
				
					return "OBSERVACIONES";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.ID == null) ? 0 : this.ID.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row2Struct other = (row2Struct) obj;
		
						if (this.ID == null) {
							if (other.ID != null)
								return false;
						
						} else if (!this.ID.equals(other.ID))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row2Struct other) {

		other.ID = this.ID;
	            other.ESTADO = this.ESTADO;
	            other.ARCHIVO = this.ARCHIVO;
	            other.TARCHIVOS_ID = this.TARCHIVOS_ID;
	            other.USUARIOS_ID = this.USUARIOS_ID;
	            other.CODIGO = this.CODIGO;
	            other.ARCHIVOFS = this.ARCHIVOFS;
	            other.FECHA = this.FECHA;
	            other.ESTREGISTRO_ID = this.ESTREGISTRO_ID;
	            other.EXTENSION = this.EXTENSION;
	            other.CONTENIDO = this.CONTENIDO;
	            other.PADRE_ID = this.PADRE_ID;
	            other.FECHA_INICIO = this.FECHA_INICIO;
	            other.FECHA_FIN = this.FECHA_FIN;
	            other.OBSERVACIONES = this.OBSERVACIONES;
	            
	}

	public void copyKeysDataTo(row2Struct other) {

		other.ID = this.ID;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_CARGUE_APORTES_CargarAportes.length) {
				if(length < 1024 && commonByteArray_AFI_CARGUE_APORTES_CargarAportes.length == 0) {
   					commonByteArray_AFI_CARGUE_APORTES_CargarAportes = new byte[1024];
				} else {
   					commonByteArray_AFI_CARGUE_APORTES_CargarAportes = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_CARGUE_APORTES_CargarAportes, 0, length);
			strReturn = new String(commonByteArray_AFI_CARGUE_APORTES_CargarAportes, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_CARGUE_APORTES_CargarAportes.length) {
				if(length < 1024 && commonByteArray_AFI_CARGUE_APORTES_CargarAportes.length == 0) {
   					commonByteArray_AFI_CARGUE_APORTES_CargarAportes = new byte[1024];
				} else {
   					commonByteArray_AFI_CARGUE_APORTES_CargarAportes = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_CARGUE_APORTES_CargarAportes, 0, length);
			strReturn = new String(commonByteArray_AFI_CARGUE_APORTES_CargarAportes, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_CARGUE_APORTES_CargarAportes) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
						this.ESTADO = (BigDecimal) dis.readObject();
					
					this.ARCHIVO = readString(dis);
					
						this.TARCHIVOS_ID = (BigDecimal) dis.readObject();
					
						this.USUARIOS_ID = (BigDecimal) dis.readObject();
					
					this.CODIGO = readString(dis);
					
					this.ARCHIVOFS = readString(dis);
					
					this.FECHA = readDate(dis);
					
						this.ESTREGISTRO_ID = (BigDecimal) dis.readObject();
					
					this.EXTENSION = readString(dis);
					
						this.CONTENIDO = (Object) dis.readObject();
					
						this.PADRE_ID = (BigDecimal) dis.readObject();
					
					this.FECHA_INICIO = readDate(dis);
					
					this.FECHA_FIN = readDate(dis);
					
						this.OBSERVACIONES = (Object) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_CARGUE_APORTES_CargarAportes) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
						this.ESTADO = (BigDecimal) dis.readObject();
					
					this.ARCHIVO = readString(dis);
					
						this.TARCHIVOS_ID = (BigDecimal) dis.readObject();
					
						this.USUARIOS_ID = (BigDecimal) dis.readObject();
					
					this.CODIGO = readString(dis);
					
					this.ARCHIVOFS = readString(dis);
					
					this.FECHA = readDate(dis);
					
						this.ESTREGISTRO_ID = (BigDecimal) dis.readObject();
					
					this.EXTENSION = readString(dis);
					
						this.CONTENIDO = (Object) dis.readObject();
					
						this.PADRE_ID = (BigDecimal) dis.readObject();
					
					this.FECHA_INICIO = readDate(dis);
					
					this.FECHA_FIN = readDate(dis);
					
						this.OBSERVACIONES = (Object) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ESTADO);
					
					// String
				
						writeString(this.ARCHIVO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TARCHIVOS_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.USUARIOS_ID);
					
					// String
				
						writeString(this.CODIGO,dos);
					
					// String
				
						writeString(this.ARCHIVOFS,dos);
					
					// java.util.Date
				
						writeDate(this.FECHA,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ESTREGISTRO_ID);
					
					// String
				
						writeString(this.EXTENSION,dos);
					
					// Object
				
       			    	dos.writeObject(this.CONTENIDO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PADRE_ID);
					
					// java.util.Date
				
						writeDate(this.FECHA_INICIO,dos);
					
					// java.util.Date
				
						writeDate(this.FECHA_FIN,dos);
					
					// Object
				
       			    	dos.writeObject(this.OBSERVACIONES);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ESTADO);
					
					// String
				
						writeString(this.ARCHIVO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TARCHIVOS_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.USUARIOS_ID);
					
					// String
				
						writeString(this.CODIGO,dos);
					
					// String
				
						writeString(this.ARCHIVOFS,dos);
					
					// java.util.Date
				
						writeDate(this.FECHA,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ESTREGISTRO_ID);
					
					// String
				
						writeString(this.EXTENSION,dos);
					
					// Object
				
						dos.clearInstanceCache();
						dos.writeObject(this.CONTENIDO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PADRE_ID);
					
					// java.util.Date
				
						writeDate(this.FECHA_INICIO,dos);
					
					// java.util.Date
				
						writeDate(this.FECHA_FIN,dos);
					
					// Object
				
						dos.clearInstanceCache();
						dos.writeObject(this.OBSERVACIONES);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",ESTADO="+String.valueOf(ESTADO));
		sb.append(",ARCHIVO="+ARCHIVO);
		sb.append(",TARCHIVOS_ID="+String.valueOf(TARCHIVOS_ID));
		sb.append(",USUARIOS_ID="+String.valueOf(USUARIOS_ID));
		sb.append(",CODIGO="+CODIGO);
		sb.append(",ARCHIVOFS="+ARCHIVOFS);
		sb.append(",FECHA="+String.valueOf(FECHA));
		sb.append(",ESTREGISTRO_ID="+String.valueOf(ESTREGISTRO_ID));
		sb.append(",EXTENSION="+EXTENSION);
		sb.append(",CONTENIDO="+String.valueOf(CONTENIDO));
		sb.append(",PADRE_ID="+String.valueOf(PADRE_ID));
		sb.append(",FECHA_INICIO="+String.valueOf(FECHA_INICIO));
		sb.append(",FECHA_FIN="+String.valueOf(FECHA_FIN));
		sb.append(",OBSERVACIONES="+String.valueOf(OBSERVACIONES));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row2Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.ID, other.ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row2Struct row2 = new row2Struct();
row21Struct row21 = new row21Struct();
row22Struct row22 = new row22Struct();
row23Struct row23 = new row23Struct();
row24Struct row24 = new row24Struct();
row25Struct row25 = new row25Struct();
row20Struct row20 = new row20Struct();










	
	/**
	 * [tOracleCommit_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleCommit_2", false);
		start_Hash.put("tOracleCommit_2", System.currentTimeMillis());
		
	
	currentComponent="tOracleCommit_2";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row20");
					}
				
		int tos_count_tOracleCommit_2 = 0;
		

 



/**
 * [tOracleCommit_2 begin ] stop
 */



	
	/**
	 * [tOracleOutput_8 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleOutput_8", false);
		start_Hash.put("tOracleOutput_8", System.currentTimeMillis());
		
	
	currentComponent="tOracleOutput_8";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row25");
					}
				
		int tos_count_tOracleOutput_8 = 0;
		






        int deleteKeyCount_tOracleOutput_8 = 1;
        if(deleteKeyCount_tOracleOutput_8 < 1) {
            throw new RuntimeException("For delete, Schema must have a key");
        }
    
    int nb_line_tOracleOutput_8 = 0;
    int nb_line_update_tOracleOutput_8 = 0;
    int nb_line_inserted_tOracleOutput_8 = 0;
    int nb_line_deleted_tOracleOutput_8 = 0;
    int nb_line_rejected_tOracleOutput_8 = 0;

    int tmp_batchUpdateCount_tOracleOutput_8 = 0;

    int deletedCount_tOracleOutput_8=0;
    int updatedCount_tOracleOutput_8=0;
    int insertedCount_tOracleOutput_8=0;
    int rowsToCommitCount_tOracleOutput_8=0;
    int rejectedCount_tOracleOutput_8=0;

    boolean whetherReject_tOracleOutput_8 = false;

    java.sql.Connection conn_tOracleOutput_8 = null;

    //optional table
    String dbschema_tOracleOutput_8 = null;
    String tableName_tOracleOutput_8 = null;
        dbschema_tOracleOutput_8 = (String)globalMap.get("dbschema_tOracleConnection_1");
		
        conn_tOracleOutput_8 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");
        int count_tOracleOutput_8=0;

        if(dbschema_tOracleOutput_8 == null || dbschema_tOracleOutput_8.trim().length() == 0) {
            tableName_tOracleOutput_8 = ("REC_REGTIPO3");
        } else {
            tableName_tOracleOutput_8 = dbschema_tOracleOutput_8 + "." + ("REC_REGTIPO3");
        }
                String delete_tOracleOutput_8 = "DELETE FROM " + tableName_tOracleOutput_8 + " WHERE ARCHIVOS_ID = ?";
                java.sql.PreparedStatement pstmt_tOracleOutput_8 = conn_tOracleOutput_8.prepareStatement(delete_tOracleOutput_8);
                resourceMap.put("pstmt_tOracleOutput_8", pstmt_tOracleOutput_8);





 



/**
 * [tOracleOutput_8 begin ] stop
 */



	
	/**
	 * [tOracleOutput_7 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleOutput_7", false);
		start_Hash.put("tOracleOutput_7", System.currentTimeMillis());
		
	
	currentComponent="tOracleOutput_7";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row24");
					}
				
		int tos_count_tOracleOutput_7 = 0;
		






        int deleteKeyCount_tOracleOutput_7 = 1;
        if(deleteKeyCount_tOracleOutput_7 < 1) {
            throw new RuntimeException("For delete, Schema must have a key");
        }
    
    int nb_line_tOracleOutput_7 = 0;
    int nb_line_update_tOracleOutput_7 = 0;
    int nb_line_inserted_tOracleOutput_7 = 0;
    int nb_line_deleted_tOracleOutput_7 = 0;
    int nb_line_rejected_tOracleOutput_7 = 0;

    int tmp_batchUpdateCount_tOracleOutput_7 = 0;

    int deletedCount_tOracleOutput_7=0;
    int updatedCount_tOracleOutput_7=0;
    int insertedCount_tOracleOutput_7=0;
    int rowsToCommitCount_tOracleOutput_7=0;
    int rejectedCount_tOracleOutput_7=0;

    boolean whetherReject_tOracleOutput_7 = false;

    java.sql.Connection conn_tOracleOutput_7 = null;

    //optional table
    String dbschema_tOracleOutput_7 = null;
    String tableName_tOracleOutput_7 = null;
        dbschema_tOracleOutput_7 = (String)globalMap.get("dbschema_tOracleConnection_1");
		
        conn_tOracleOutput_7 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");
        int count_tOracleOutput_7=0;

        if(dbschema_tOracleOutput_7 == null || dbschema_tOracleOutput_7.trim().length() == 0) {
            tableName_tOracleOutput_7 = ("REC_REGTIPO2");
        } else {
            tableName_tOracleOutput_7 = dbschema_tOracleOutput_7 + "." + ("REC_REGTIPO2");
        }
                String delete_tOracleOutput_7 = "DELETE FROM " + tableName_tOracleOutput_7 + " WHERE ARCHIVOS_ID = ?";
                java.sql.PreparedStatement pstmt_tOracleOutput_7 = conn_tOracleOutput_7.prepareStatement(delete_tOracleOutput_7);
                resourceMap.put("pstmt_tOracleOutput_7", pstmt_tOracleOutput_7);





 



/**
 * [tOracleOutput_7 begin ] stop
 */



	
	/**
	 * [tOracleOutput_6 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleOutput_6", false);
		start_Hash.put("tOracleOutput_6", System.currentTimeMillis());
		
	
	currentComponent="tOracleOutput_6";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row23");
					}
				
		int tos_count_tOracleOutput_6 = 0;
		






        int deleteKeyCount_tOracleOutput_6 = 1;
        if(deleteKeyCount_tOracleOutput_6 < 1) {
            throw new RuntimeException("For delete, Schema must have a key");
        }
    
    int nb_line_tOracleOutput_6 = 0;
    int nb_line_update_tOracleOutput_6 = 0;
    int nb_line_inserted_tOracleOutput_6 = 0;
    int nb_line_deleted_tOracleOutput_6 = 0;
    int nb_line_rejected_tOracleOutput_6 = 0;

    int tmp_batchUpdateCount_tOracleOutput_6 = 0;

    int deletedCount_tOracleOutput_6=0;
    int updatedCount_tOracleOutput_6=0;
    int insertedCount_tOracleOutput_6=0;
    int rowsToCommitCount_tOracleOutput_6=0;
    int rejectedCount_tOracleOutput_6=0;

    boolean whetherReject_tOracleOutput_6 = false;

    java.sql.Connection conn_tOracleOutput_6 = null;

    //optional table
    String dbschema_tOracleOutput_6 = null;
    String tableName_tOracleOutput_6 = null;
        dbschema_tOracleOutput_6 = (String)globalMap.get("dbschema_tOracleConnection_1");
		
        conn_tOracleOutput_6 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");
        int count_tOracleOutput_6=0;

        if(dbschema_tOracleOutput_6 == null || dbschema_tOracleOutput_6.trim().length() == 0) {
            tableName_tOracleOutput_6 = ("REC_REGTIPO1");
        } else {
            tableName_tOracleOutput_6 = dbschema_tOracleOutput_6 + "." + ("REC_REGTIPO1");
        }
                String delete_tOracleOutput_6 = "DELETE FROM " + tableName_tOracleOutput_6 + " WHERE ARCHIVOS_ID = ?";
                java.sql.PreparedStatement pstmt_tOracleOutput_6 = conn_tOracleOutput_6.prepareStatement(delete_tOracleOutput_6);
                resourceMap.put("pstmt_tOracleOutput_6", pstmt_tOracleOutput_6);





 



/**
 * [tOracleOutput_6 begin ] stop
 */



	
	/**
	 * [tJavaRow_11 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaRow_11", false);
		start_Hash.put("tJavaRow_11", System.currentTimeMillis());
		
	
	currentComponent="tJavaRow_11";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row22");
					}
				
		int tos_count_tJavaRow_11 = 0;
		

int nb_line_tJavaRow_11 = 0;

 



/**
 * [tJavaRow_11 begin ] stop
 */



	
	/**
	 * [tOracleOutput_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleOutput_5", false);
		start_Hash.put("tOracleOutput_5", System.currentTimeMillis());
		
	
	currentComponent="tOracleOutput_5";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row21");
					}
				
		int tos_count_tOracleOutput_5 = 0;
		






        int updateKeyCount_tOracleOutput_5 = 1;
        if(updateKeyCount_tOracleOutput_5 < 1) {
            throw new RuntimeException("For update, Schema must have a key");
        } else if (updateKeyCount_tOracleOutput_5 == 4 && true) {        
                throw new RuntimeException("For update, every Schema column can not be a key");
        }
    
    int nb_line_tOracleOutput_5 = 0;
    int nb_line_update_tOracleOutput_5 = 0;
    int nb_line_inserted_tOracleOutput_5 = 0;
    int nb_line_deleted_tOracleOutput_5 = 0;
    int nb_line_rejected_tOracleOutput_5 = 0;

    int tmp_batchUpdateCount_tOracleOutput_5 = 0;

    int deletedCount_tOracleOutput_5=0;
    int updatedCount_tOracleOutput_5=0;
    int insertedCount_tOracleOutput_5=0;
    int rowsToCommitCount_tOracleOutput_5=0;
    int rejectedCount_tOracleOutput_5=0;

    boolean whetherReject_tOracleOutput_5 = false;

    java.sql.Connection conn_tOracleOutput_5 = null;

    //optional table
    String dbschema_tOracleOutput_5 = null;
    String tableName_tOracleOutput_5 = null;
        dbschema_tOracleOutput_5 = (String)globalMap.get("dbschema_tOracleConnection_1");
		
        conn_tOracleOutput_5 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");
        int count_tOracleOutput_5=0;

        if(dbschema_tOracleOutput_5 == null || dbschema_tOracleOutput_5.trim().length() == 0) {
            tableName_tOracleOutput_5 = ("AFI_ARCHIVOS");
        } else {
            tableName_tOracleOutput_5 = dbschema_tOracleOutput_5 + "." + ("AFI_ARCHIVOS");
        }
                String update_tOracleOutput_5 = "UPDATE " + tableName_tOracleOutput_5 + " SET ESTADO = ?,FECHA_INICIO = ?,FECHA_FIN = ? WHERE ID = ?";
                java.sql.PreparedStatement pstmt_tOracleOutput_5 = conn_tOracleOutput_5.prepareStatement(update_tOracleOutput_5);
                resourceMap.put("pstmt_tOracleOutput_5", pstmt_tOracleOutput_5);





 



/**
 * [tOracleOutput_5 begin ] stop
 */



	
	/**
	 * [tJavaRow_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaRow_2", false);
		start_Hash.put("tJavaRow_2", System.currentTimeMillis());
		
	
	currentComponent="tJavaRow_2";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row2");
					}
				
		int tos_count_tJavaRow_2 = 0;
		

int nb_line_tJavaRow_2 = 0;

 



/**
 * [tJavaRow_2 begin ] stop
 */



	
	/**
	 * [tOracleInput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_1", false);
		start_Hash.put("tOracleInput_1", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_1";
	
	
		int tos_count_tOracleInput_1 = 0;
		
	


	
		    int nb_line_tOracleInput_1 = 0;
		    java.sql.Connection conn_tOracleInput_1 = null;
				conn_tOracleInput_1 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");
				
                boolean isTimeZoneNull_tOracleInput_1 = false;
				boolean isConnectionWrapped_tOracleInput_1 = !(conn_tOracleInput_1 instanceof oracle.jdbc.OracleConnection) && conn_tOracleInput_1.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tOracleInput_1 = null;
                if (isConnectionWrapped_tOracleInput_1) {
					unwrappedOraConn_tOracleInput_1 = conn_tOracleInput_1.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tOracleInput_1 != null) {
                        isTimeZoneNull_tOracleInput_1 = (unwrappedOraConn_tOracleInput_1.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tOracleInput_1 = (((oracle.jdbc.OracleConnection)conn_tOracleInput_1).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tOracleInput_1) {
					java.sql.Statement stmtGetTZ_tOracleInput_1 = conn_tOracleInput_1.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_1 = stmtGetTZ_tOracleInput_1.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_1 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tOracleInput_1.next()) {
						sessionTimezone_tOracleInput_1 = rsGetTZ_tOracleInput_1.getString(1);
					}
					if (isConnectionWrapped_tOracleInput_1 && unwrappedOraConn_tOracleInput_1 != null) {
                        unwrappedOraConn_tOracleInput_1.setSessionTimeZone(sessionTimezone_tOracleInput_1);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_1).setSessionTimeZone(sessionTimezone_tOracleInput_1);
                    }
				}
			
		    
			java.sql.Statement stmt_tOracleInput_1 = conn_tOracleInput_1.createStatement();

		    String dbquery_tOracleInput_1 = "SELECT \n  SALUDSIS.AFI_ARCHIVOS.\"ID\", \n  SALUDSIS.AFI_ARCHIVOS.ESTADO, \n  SALUDSIS.AFI_ARCHIVOS.ARCHIVO, \n  SALUDSIS."
+"AFI_ARCHIVOS.TARCHIVOS_ID, \n  SALUDSIS.AFI_ARCHIVOS.USUARIOS_ID, \n  SALUDSIS.AFI_ARCHIVOS.CODIGO, \n  SALUDSIS.AFI_ARCHIV"
+"OS.ARCHIVOFS, \n  SALUDSIS.AFI_ARCHIVOS.FECHA, \n  SALUDSIS.AFI_ARCHIVOS.ESTREGISTRO_ID, \n  SALUDSIS.AFI_ARCHIVOS.EXTENSIO"
+"N, \n  SALUDSIS.AFI_ARCHIVOS.CONTENIDO, \n  SALUDSIS.AFI_ARCHIVOS.PADRE_ID, \n  SALUDSIS.AFI_ARCHIVOS.FECHA_INICIO, \n  SALU"
+"DSIS.AFI_ARCHIVOS.FECHA_FIN\nFROM SALUDSIS.AFI_ARCHIVOS where SALUDSIS.AFI_ARCHIVOS.ESTREGISTRO_ID = 1 AND SALUDSIS.AFI_A"
+"RCHIVOS.ID =  " + context.ARCHIVOS_ID;
		    

		    globalMap.put("tOracleInput_1_QUERY",dbquery_tOracleInput_1);

		    java.sql.ResultSet rs_tOracleInput_1 = null;

		    try {
		    	rs_tOracleInput_1 = stmt_tOracleInput_1.executeQuery(dbquery_tOracleInput_1);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_1 = rs_tOracleInput_1.getMetaData();
		    	int colQtyInRs_tOracleInput_1 = rsmd_tOracleInput_1.getColumnCount();

		    String tmpContent_tOracleInput_1 = null;
		    
		    
		    while (rs_tOracleInput_1.next()) {
		        nb_line_tOracleInput_1++;
		        
							if(colQtyInRs_tOracleInput_1 < 1) {
								row2.ID = null;
							} else {
		                          
					if(rs_tOracleInput_1.getObject(1) != null) {
						row2.ID = rs_tOracleInput_1.getBigDecimal(1);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_1 < 2) {
								row2.ESTADO = null;
							} else {
		                          
					if(rs_tOracleInput_1.getObject(2) != null) {
						row2.ESTADO = rs_tOracleInput_1.getBigDecimal(2);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_1 < 3) {
								row2.ARCHIVO = null;
							} else {
	                         		
        	row2.ARCHIVO = routines.system.JDBCUtil.getString(rs_tOracleInput_1, 3, false);
		                    }
							if(colQtyInRs_tOracleInput_1 < 4) {
								row2.TARCHIVOS_ID = null;
							} else {
		                          
					if(rs_tOracleInput_1.getObject(4) != null) {
						row2.TARCHIVOS_ID = rs_tOracleInput_1.getBigDecimal(4);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_1 < 5) {
								row2.USUARIOS_ID = null;
							} else {
		                          
					if(rs_tOracleInput_1.getObject(5) != null) {
						row2.USUARIOS_ID = rs_tOracleInput_1.getBigDecimal(5);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_1 < 6) {
								row2.CODIGO = null;
							} else {
	                         		
        	row2.CODIGO = routines.system.JDBCUtil.getString(rs_tOracleInput_1, 6, false);
		                    }
							if(colQtyInRs_tOracleInput_1 < 7) {
								row2.ARCHIVOFS = null;
							} else {
	                         		
        	row2.ARCHIVOFS = routines.system.JDBCUtil.getString(rs_tOracleInput_1, 7, false);
		                    }
							if(colQtyInRs_tOracleInput_1 < 8) {
								row2.FECHA = null;
							} else {
										
			row2.FECHA = routines.system.JDBCUtil.getDate(rs_tOracleInput_1, 8);
		                    }
							if(colQtyInRs_tOracleInput_1 < 9) {
								row2.ESTREGISTRO_ID = null;
							} else {
		                          
					if(rs_tOracleInput_1.getObject(9) != null) {
						row2.ESTREGISTRO_ID = rs_tOracleInput_1.getBigDecimal(9);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_1 < 10) {
								row2.EXTENSION = null;
							} else {
	                         		
        	row2.EXTENSION = routines.system.JDBCUtil.getString(rs_tOracleInput_1, 10, false);
		                    }
							if(colQtyInRs_tOracleInput_1 < 11) {
								row2.CONTENIDO = null;
							} else {
		                          
				Object tmpObj_11_tOracleInput_1 = rs_tOracleInput_1.getObject(11);
				if(tmpObj_11_tOracleInput_1 != null) {
					row2.CONTENIDO = tmpObj_11_tOracleInput_1;
				} else {
						row2.CONTENIDO = null;
				}
		                    }
							if(colQtyInRs_tOracleInput_1 < 12) {
								row2.PADRE_ID = null;
							} else {
		                          
					if(rs_tOracleInput_1.getObject(12) != null) {
						row2.PADRE_ID = rs_tOracleInput_1.getBigDecimal(12);
					} else {
				
						row2.PADRE_ID = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_1 < 13) {
								row2.FECHA_INICIO = null;
							} else {
										
			row2.FECHA_INICIO = routines.system.JDBCUtil.getDate(rs_tOracleInput_1, 13);
		                    }
							if(colQtyInRs_tOracleInput_1 < 14) {
								row2.FECHA_FIN = null;
							} else {
										
			row2.FECHA_FIN = routines.system.JDBCUtil.getDate(rs_tOracleInput_1, 14);
		                    }
							if(colQtyInRs_tOracleInput_1 < 15) {
								row2.OBSERVACIONES = null;
							} else {
		                          
				Object tmpObj_15_tOracleInput_1 = rs_tOracleInput_1.getObject(15);
				if(tmpObj_15_tOracleInput_1 != null) {
					row2.OBSERVACIONES = tmpObj_15_tOracleInput_1;
				} else {
						row2.OBSERVACIONES = null;
				}
		                    }
					




 



/**
 * [tOracleInput_1 begin ] stop
 */
	
	/**
	 * [tOracleInput_1 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_1";
	
	

 


	tos_count_tOracleInput_1++;

/**
 * [tOracleInput_1 main ] stop
 */
	
	/**
	 * [tOracleInput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_1";
	
	

 



/**
 * [tOracleInput_1 process_data_begin ] stop
 */

	
	/**
	 * [tJavaRow_2 main ] start
	 */

	

	
	
	currentComponent="tJavaRow_2";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row2"
						
						);
					}
					

    context.Contenido =  ((java.sql.Blob)row2.CONTENIDO).getBinaryStream();
row21.FECHA_INICIO=  new Date();
row21.FECHA_FIN=  null;
row21.ID = context.ARCHIVOS_ID;
row21.ESTADO = new BigDecimal(5);
    nb_line_tJavaRow_2++;   

 


	tos_count_tJavaRow_2++;

/**
 * [tJavaRow_2 main ] stop
 */
	
	/**
	 * [tJavaRow_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJavaRow_2";
	
	

 



/**
 * [tJavaRow_2 process_data_begin ] stop
 */

	
	/**
	 * [tOracleOutput_5 main ] start
	 */

	

	
	
	currentComponent="tOracleOutput_5";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row21"
						
						);
					}
					



            row22 = null;
        whetherReject_tOracleOutput_5 = false;
                    pstmt_tOracleOutput_5.setBigDecimal(1, row21.ESTADO);

                    if(row21.FECHA_INICIO != null) {
pstmt_tOracleOutput_5.setObject(2, new java.sql.Timestamp(row21.FECHA_INICIO.getTime()),java.sql.Types.DATE);
} else {
pstmt_tOracleOutput_5.setNull(2, java.sql.Types.DATE);
}

                    if(row21.FECHA_FIN != null) {
pstmt_tOracleOutput_5.setObject(3, new java.sql.Timestamp(row21.FECHA_FIN.getTime()),java.sql.Types.DATE);
} else {
pstmt_tOracleOutput_5.setNull(3, java.sql.Types.DATE);
}


                    pstmt_tOracleOutput_5.setBigDecimal(4 + count_tOracleOutput_5, row21.ID);

                try {
                    nb_line_tOracleOutput_5++;
                    int processedCount_tOracleOutput_5 = pstmt_tOracleOutput_5.executeUpdate();
                    updatedCount_tOracleOutput_5 += processedCount_tOracleOutput_5;
                    rowsToCommitCount_tOracleOutput_5 += processedCount_tOracleOutput_5;
                } catch(java.lang.Exception e_tOracleOutput_5) {
globalMap.put("tOracleOutput_5_ERROR_MESSAGE",e_tOracleOutput_5.getMessage());
                    whetherReject_tOracleOutput_5 = true;
                            System.err.print(e_tOracleOutput_5.getMessage());
                }
            if(!whetherReject_tOracleOutput_5) {
                            row22 = new row22Struct();
                                row22.ID = row21.ID;
                                row22.ESTADO = row21.ESTADO;
                                row22.FECHA_INICIO = row21.FECHA_INICIO;
                                row22.FECHA_FIN = row21.FECHA_FIN;
            }

 


	tos_count_tOracleOutput_5++;

/**
 * [tOracleOutput_5 main ] stop
 */
	
	/**
	 * [tOracleOutput_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleOutput_5";
	
	

 



/**
 * [tOracleOutput_5 process_data_begin ] stop
 */
// Start of branch "row22"
if(row22 != null) { 



	
	/**
	 * [tJavaRow_11 main ] start
	 */

	

	
	
	currentComponent="tJavaRow_11";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row22"
						
						);
					}
					

    //Code generate according to input schema and output schema
row23.ARCHIVOS_ID = context.ARCHIVOS_ID;
context.ContadorRegistros = 0;

    nb_line_tJavaRow_11++;   

 


	tos_count_tJavaRow_11++;

/**
 * [tJavaRow_11 main ] stop
 */
	
	/**
	 * [tJavaRow_11 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJavaRow_11";
	
	

 



/**
 * [tJavaRow_11 process_data_begin ] stop
 */

	
	/**
	 * [tOracleOutput_6 main ] start
	 */

	

	
	
	currentComponent="tOracleOutput_6";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row23"
						
						);
					}
					



            row24 = null;
        whetherReject_tOracleOutput_6 = false;
                    pstmt_tOracleOutput_6.setBigDecimal(1, row23.ARCHIVOS_ID);

                try {
                    int processedCount_tOracleOutput_6 = pstmt_tOracleOutput_6.executeUpdate();
                    deletedCount_tOracleOutput_6 += processedCount_tOracleOutput_6;
                    rowsToCommitCount_tOracleOutput_6 += processedCount_tOracleOutput_6;
                    nb_line_tOracleOutput_6++;
                } catch(java.lang.Exception e_tOracleOutput_6) {
globalMap.put("tOracleOutput_6_ERROR_MESSAGE",e_tOracleOutput_6.getMessage());
                    whetherReject_tOracleOutput_6 = true;
                        nb_line_tOracleOutput_6++;
                            System.err.print(e_tOracleOutput_6.getMessage());
                }
            if(!whetherReject_tOracleOutput_6) {
                            row24 = new row24Struct();
                                row24.ARCHIVOS_ID = row23.ARCHIVOS_ID;
            }

 


	tos_count_tOracleOutput_6++;

/**
 * [tOracleOutput_6 main ] stop
 */
	
	/**
	 * [tOracleOutput_6 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleOutput_6";
	
	

 



/**
 * [tOracleOutput_6 process_data_begin ] stop
 */
// Start of branch "row24"
if(row24 != null) { 



	
	/**
	 * [tOracleOutput_7 main ] start
	 */

	

	
	
	currentComponent="tOracleOutput_7";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row24"
						
						);
					}
					



            row25 = null;
        whetherReject_tOracleOutput_7 = false;
                    pstmt_tOracleOutput_7.setBigDecimal(1, row24.ARCHIVOS_ID);

                try {
                    int processedCount_tOracleOutput_7 = pstmt_tOracleOutput_7.executeUpdate();
                    deletedCount_tOracleOutput_7 += processedCount_tOracleOutput_7;
                    rowsToCommitCount_tOracleOutput_7 += processedCount_tOracleOutput_7;
                    nb_line_tOracleOutput_7++;
                } catch(java.lang.Exception e_tOracleOutput_7) {
globalMap.put("tOracleOutput_7_ERROR_MESSAGE",e_tOracleOutput_7.getMessage());
                    whetherReject_tOracleOutput_7 = true;
                        nb_line_tOracleOutput_7++;
                            System.err.print(e_tOracleOutput_7.getMessage());
                }
            if(!whetherReject_tOracleOutput_7) {
                            row25 = new row25Struct();
                                row25.ARCHIVOS_ID = row24.ARCHIVOS_ID;
            }

 


	tos_count_tOracleOutput_7++;

/**
 * [tOracleOutput_7 main ] stop
 */
	
	/**
	 * [tOracleOutput_7 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleOutput_7";
	
	

 



/**
 * [tOracleOutput_7 process_data_begin ] stop
 */
// Start of branch "row25"
if(row25 != null) { 



	
	/**
	 * [tOracleOutput_8 main ] start
	 */

	

	
	
	currentComponent="tOracleOutput_8";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row25"
						
						);
					}
					



            row20 = null;
        whetherReject_tOracleOutput_8 = false;
                    pstmt_tOracleOutput_8.setBigDecimal(1, row25.ARCHIVOS_ID);

                try {
                    int processedCount_tOracleOutput_8 = pstmt_tOracleOutput_8.executeUpdate();
                    deletedCount_tOracleOutput_8 += processedCount_tOracleOutput_8;
                    rowsToCommitCount_tOracleOutput_8 += processedCount_tOracleOutput_8;
                    nb_line_tOracleOutput_8++;
                } catch(java.lang.Exception e_tOracleOutput_8) {
globalMap.put("tOracleOutput_8_ERROR_MESSAGE",e_tOracleOutput_8.getMessage());
                    whetherReject_tOracleOutput_8 = true;
                        nb_line_tOracleOutput_8++;
                            System.err.print(e_tOracleOutput_8.getMessage());
                }
            if(!whetherReject_tOracleOutput_8) {
                            row20 = new row20Struct();
                                row20.ARCHIVOS_ID = row25.ARCHIVOS_ID;
            }

 


	tos_count_tOracleOutput_8++;

/**
 * [tOracleOutput_8 main ] stop
 */
	
	/**
	 * [tOracleOutput_8 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleOutput_8";
	
	

 



/**
 * [tOracleOutput_8 process_data_begin ] stop
 */
// Start of branch "row20"
if(row20 != null) { 



	
	/**
	 * [tOracleCommit_2 main ] start
	 */

	

	
	
	currentComponent="tOracleCommit_2";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row20"
						
						);
					}
					

	java.sql.Connection conn_tOracleCommit_2 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");

if(conn_tOracleCommit_2 != null && !conn_tOracleCommit_2.isClosed()) {
	
			
			conn_tOracleCommit_2.commit();
			
	
}

 


	tos_count_tOracleCommit_2++;

/**
 * [tOracleCommit_2 main ] stop
 */
	
	/**
	 * [tOracleCommit_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleCommit_2";
	
	

 



/**
 * [tOracleCommit_2 process_data_begin ] stop
 */
	
	/**
	 * [tOracleCommit_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleCommit_2";
	
	

 



/**
 * [tOracleCommit_2 process_data_end ] stop
 */

} // End of branch "row20"




	
	/**
	 * [tOracleOutput_8 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_8";
	
	

 



/**
 * [tOracleOutput_8 process_data_end ] stop
 */

} // End of branch "row25"




	
	/**
	 * [tOracleOutput_7 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_7";
	
	

 



/**
 * [tOracleOutput_7 process_data_end ] stop
 */

} // End of branch "row24"




	
	/**
	 * [tOracleOutput_6 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_6";
	
	

 



/**
 * [tOracleOutput_6 process_data_end ] stop
 */



	
	/**
	 * [tJavaRow_11 process_data_end ] start
	 */

	

	
	
	currentComponent="tJavaRow_11";
	
	

 



/**
 * [tJavaRow_11 process_data_end ] stop
 */

} // End of branch "row22"




	
	/**
	 * [tOracleOutput_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_5";
	
	

 



/**
 * [tOracleOutput_5 process_data_end ] stop
 */



	
	/**
	 * [tJavaRow_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tJavaRow_2";
	
	

 



/**
 * [tJavaRow_2 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_1";
	
	

 



/**
 * [tOracleInput_1 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_1 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_1";
	
	

}
}finally{
	if (rs_tOracleInput_1 != null) {
		rs_tOracleInput_1.close();
	}
	if (stmt_tOracleInput_1 != null) {
		stmt_tOracleInput_1.close();
	}
}

globalMap.put("tOracleInput_1_NB_LINE",nb_line_tOracleInput_1);
 

ok_Hash.put("tOracleInput_1", true);
end_Hash.put("tOracleInput_1", System.currentTimeMillis());




/**
 * [tOracleInput_1 end ] stop
 */

	
	/**
	 * [tJavaRow_2 end ] start
	 */

	

	
	
	currentComponent="tJavaRow_2";
	
	

globalMap.put("tJavaRow_2_NB_LINE",nb_line_tJavaRow_2);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row2");
			  	}
			  	
 

ok_Hash.put("tJavaRow_2", true);
end_Hash.put("tJavaRow_2", System.currentTimeMillis());




/**
 * [tJavaRow_2 end ] stop
 */

	
	/**
	 * [tOracleOutput_5 end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_5";
	
	
	



	
        if(pstmt_tOracleOutput_5 != null) {
			
				pstmt_tOracleOutput_5.close();
				resourceMap.remove("pstmt_tOracleOutput_5");
			
        }
    resourceMap.put("statementClosed_tOracleOutput_5", true);

	
	nb_line_deleted_tOracleOutput_5=nb_line_deleted_tOracleOutput_5+ deletedCount_tOracleOutput_5;
	nb_line_update_tOracleOutput_5=nb_line_update_tOracleOutput_5 + updatedCount_tOracleOutput_5;
	nb_line_inserted_tOracleOutput_5=nb_line_inserted_tOracleOutput_5 + insertedCount_tOracleOutput_5;
	nb_line_rejected_tOracleOutput_5=nb_line_rejected_tOracleOutput_5 + rejectedCount_tOracleOutput_5;
	
        globalMap.put("tOracleOutput_5_NB_LINE",nb_line_tOracleOutput_5);
        globalMap.put("tOracleOutput_5_NB_LINE_UPDATED",nb_line_update_tOracleOutput_5);
        globalMap.put("tOracleOutput_5_NB_LINE_INSERTED",nb_line_inserted_tOracleOutput_5);
        globalMap.put("tOracleOutput_5_NB_LINE_DELETED",nb_line_deleted_tOracleOutput_5);
        globalMap.put("tOracleOutput_5_NB_LINE_REJECTED", nb_line_rejected_tOracleOutput_5);
    

	



				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row21");
			  	}
			  	
 

ok_Hash.put("tOracleOutput_5", true);
end_Hash.put("tOracleOutput_5", System.currentTimeMillis());




/**
 * [tOracleOutput_5 end ] stop
 */

	
	/**
	 * [tJavaRow_11 end ] start
	 */

	

	
	
	currentComponent="tJavaRow_11";
	
	

globalMap.put("tJavaRow_11_NB_LINE",nb_line_tJavaRow_11);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row22");
			  	}
			  	
 

ok_Hash.put("tJavaRow_11", true);
end_Hash.put("tJavaRow_11", System.currentTimeMillis());




/**
 * [tJavaRow_11 end ] stop
 */

	
	/**
	 * [tOracleOutput_6 end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_6";
	
	
	



	
        if(pstmt_tOracleOutput_6 != null) {
			
				pstmt_tOracleOutput_6.close();
				resourceMap.remove("pstmt_tOracleOutput_6");
			
        }
    resourceMap.put("statementClosed_tOracleOutput_6", true);

	
	nb_line_deleted_tOracleOutput_6=nb_line_deleted_tOracleOutput_6+ deletedCount_tOracleOutput_6;
	nb_line_update_tOracleOutput_6=nb_line_update_tOracleOutput_6 + updatedCount_tOracleOutput_6;
	nb_line_inserted_tOracleOutput_6=nb_line_inserted_tOracleOutput_6 + insertedCount_tOracleOutput_6;
	nb_line_rejected_tOracleOutput_6=nb_line_rejected_tOracleOutput_6 + rejectedCount_tOracleOutput_6;
	
        globalMap.put("tOracleOutput_6_NB_LINE",nb_line_tOracleOutput_6);
        globalMap.put("tOracleOutput_6_NB_LINE_UPDATED",nb_line_update_tOracleOutput_6);
        globalMap.put("tOracleOutput_6_NB_LINE_INSERTED",nb_line_inserted_tOracleOutput_6);
        globalMap.put("tOracleOutput_6_NB_LINE_DELETED",nb_line_deleted_tOracleOutput_6);
        globalMap.put("tOracleOutput_6_NB_LINE_REJECTED", nb_line_rejected_tOracleOutput_6);
    

	



				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row23");
			  	}
			  	
 

ok_Hash.put("tOracleOutput_6", true);
end_Hash.put("tOracleOutput_6", System.currentTimeMillis());




/**
 * [tOracleOutput_6 end ] stop
 */

	
	/**
	 * [tOracleOutput_7 end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_7";
	
	
	



	
        if(pstmt_tOracleOutput_7 != null) {
			
				pstmt_tOracleOutput_7.close();
				resourceMap.remove("pstmt_tOracleOutput_7");
			
        }
    resourceMap.put("statementClosed_tOracleOutput_7", true);

	
	nb_line_deleted_tOracleOutput_7=nb_line_deleted_tOracleOutput_7+ deletedCount_tOracleOutput_7;
	nb_line_update_tOracleOutput_7=nb_line_update_tOracleOutput_7 + updatedCount_tOracleOutput_7;
	nb_line_inserted_tOracleOutput_7=nb_line_inserted_tOracleOutput_7 + insertedCount_tOracleOutput_7;
	nb_line_rejected_tOracleOutput_7=nb_line_rejected_tOracleOutput_7 + rejectedCount_tOracleOutput_7;
	
        globalMap.put("tOracleOutput_7_NB_LINE",nb_line_tOracleOutput_7);
        globalMap.put("tOracleOutput_7_NB_LINE_UPDATED",nb_line_update_tOracleOutput_7);
        globalMap.put("tOracleOutput_7_NB_LINE_INSERTED",nb_line_inserted_tOracleOutput_7);
        globalMap.put("tOracleOutput_7_NB_LINE_DELETED",nb_line_deleted_tOracleOutput_7);
        globalMap.put("tOracleOutput_7_NB_LINE_REJECTED", nb_line_rejected_tOracleOutput_7);
    

	



				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row24");
			  	}
			  	
 

ok_Hash.put("tOracleOutput_7", true);
end_Hash.put("tOracleOutput_7", System.currentTimeMillis());




/**
 * [tOracleOutput_7 end ] stop
 */

	
	/**
	 * [tOracleOutput_8 end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_8";
	
	
	



	
        if(pstmt_tOracleOutput_8 != null) {
			
				pstmt_tOracleOutput_8.close();
				resourceMap.remove("pstmt_tOracleOutput_8");
			
        }
    resourceMap.put("statementClosed_tOracleOutput_8", true);

	
	nb_line_deleted_tOracleOutput_8=nb_line_deleted_tOracleOutput_8+ deletedCount_tOracleOutput_8;
	nb_line_update_tOracleOutput_8=nb_line_update_tOracleOutput_8 + updatedCount_tOracleOutput_8;
	nb_line_inserted_tOracleOutput_8=nb_line_inserted_tOracleOutput_8 + insertedCount_tOracleOutput_8;
	nb_line_rejected_tOracleOutput_8=nb_line_rejected_tOracleOutput_8 + rejectedCount_tOracleOutput_8;
	
        globalMap.put("tOracleOutput_8_NB_LINE",nb_line_tOracleOutput_8);
        globalMap.put("tOracleOutput_8_NB_LINE_UPDATED",nb_line_update_tOracleOutput_8);
        globalMap.put("tOracleOutput_8_NB_LINE_INSERTED",nb_line_inserted_tOracleOutput_8);
        globalMap.put("tOracleOutput_8_NB_LINE_DELETED",nb_line_deleted_tOracleOutput_8);
        globalMap.put("tOracleOutput_8_NB_LINE_REJECTED", nb_line_rejected_tOracleOutput_8);
    

	



				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row25");
			  	}
			  	
 

ok_Hash.put("tOracleOutput_8", true);
end_Hash.put("tOracleOutput_8", System.currentTimeMillis());




/**
 * [tOracleOutput_8 end ] stop
 */

	
	/**
	 * [tOracleCommit_2 end ] start
	 */

	

	
	
	currentComponent="tOracleCommit_2";
	
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row20");
			  	}
			  	
 

ok_Hash.put("tOracleCommit_2", true);
end_Hash.put("tOracleCommit_2", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk3", 0, "ok");
				}
				tFileInputDelimited_1Process(globalMap);



/**
 * [tOracleCommit_2 end ] stop
 */





















				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleInput_1 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_1";
	
	

 



/**
 * [tOracleInput_1 finally ] stop
 */

	
	/**
	 * [tJavaRow_2 finally ] start
	 */

	

	
	
	currentComponent="tJavaRow_2";
	
	

 



/**
 * [tJavaRow_2 finally ] stop
 */

	
	/**
	 * [tOracleOutput_5 finally ] start
	 */

	

	
	
	currentComponent="tOracleOutput_5";
	
	



    if (resourceMap.get("statementClosed_tOracleOutput_5") == null) {
                java.sql.PreparedStatement pstmtToClose_tOracleOutput_5 = null;
                if ((pstmtToClose_tOracleOutput_5 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tOracleOutput_5")) != null) {
                    pstmtToClose_tOracleOutput_5.close();
                }
    }
 



/**
 * [tOracleOutput_5 finally ] stop
 */

	
	/**
	 * [tJavaRow_11 finally ] start
	 */

	

	
	
	currentComponent="tJavaRow_11";
	
	

 



/**
 * [tJavaRow_11 finally ] stop
 */

	
	/**
	 * [tOracleOutput_6 finally ] start
	 */

	

	
	
	currentComponent="tOracleOutput_6";
	
	



    if (resourceMap.get("statementClosed_tOracleOutput_6") == null) {
                java.sql.PreparedStatement pstmtToClose_tOracleOutput_6 = null;
                if ((pstmtToClose_tOracleOutput_6 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tOracleOutput_6")) != null) {
                    pstmtToClose_tOracleOutput_6.close();
                }
    }
 



/**
 * [tOracleOutput_6 finally ] stop
 */

	
	/**
	 * [tOracleOutput_7 finally ] start
	 */

	

	
	
	currentComponent="tOracleOutput_7";
	
	



    if (resourceMap.get("statementClosed_tOracleOutput_7") == null) {
                java.sql.PreparedStatement pstmtToClose_tOracleOutput_7 = null;
                if ((pstmtToClose_tOracleOutput_7 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tOracleOutput_7")) != null) {
                    pstmtToClose_tOracleOutput_7.close();
                }
    }
 



/**
 * [tOracleOutput_7 finally ] stop
 */

	
	/**
	 * [tOracleOutput_8 finally ] start
	 */

	

	
	
	currentComponent="tOracleOutput_8";
	
	



    if (resourceMap.get("statementClosed_tOracleOutput_8") == null) {
                java.sql.PreparedStatement pstmtToClose_tOracleOutput_8 = null;
                if ((pstmtToClose_tOracleOutput_8 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tOracleOutput_8")) != null) {
                    pstmtToClose_tOracleOutput_8.close();
                }
    }
 



/**
 * [tOracleOutput_8 finally ] stop
 */

	
	/**
	 * [tOracleCommit_2 finally ] start
	 */

	

	
	
	currentComponent="tOracleCommit_2";
	
	

 



/**
 * [tOracleCommit_2 finally ] stop
 */





















				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_1_SUBPROCESS_STATE", 1);
	}
	


public static class row8Struct implements routines.system.IPersistableRow<row8Struct> {
    final static byte[] commonByteArrayLock_AFI_CARGUE_APORTES_CargarAportes = new byte[0];
    static byte[] commonByteArray_AFI_CARGUE_APORTES_CargarAportes = new byte[0];

	
			    public String SECUENCIA;

				public String getSECUENCIA () {
					return this.SECUENCIA;
				}

				public Boolean SECUENCIAIsNullable(){
				    return true;
				}
				public Boolean SECUENCIAIsKey(){
				    return false;
				}
				public Integer SECUENCIALength(){
				    return 6;
				}
				public Integer SECUENCIAPrecision(){
				    return 0;
				}
				public String SECUENCIADefault(){
				
					return null;
				
				}
				public String SECUENCIAComment(){
				
				    return "N\u00FAmero de secuencia";
				
				}
				public String SECUENCIAPattern(){
				
					return "";
				
				}
				public String SECUENCIAOriginalDbColumnName(){
				
					return "SECUENCIA";
				
				}

				
			    public String TREGISTRO;

				public String getTREGISTRO () {
					return this.TREGISTRO;
				}

				public Boolean TREGISTROIsNullable(){
				    return false;
				}
				public Boolean TREGISTROIsKey(){
				    return false;
				}
				public Integer TREGISTROLength(){
				    return 1;
				}
				public Integer TREGISTROPrecision(){
				    return 0;
				}
				public String TREGISTRODefault(){
				
					return "'2'";
				
				}
				public String TREGISTROComment(){
				
				    return "Tipo de registro";
				
				}
				public String TREGISTROPattern(){
				
					return "";
				
				}
				public String TREGISTROOriginalDbColumnName(){
				
					return "TREGISTRO";
				
				}

				
			    public String TDOCUMENTO;

				public String getTDOCUMENTO () {
					return this.TDOCUMENTO;
				}

				public Boolean TDOCUMENTOIsNullable(){
				    return false;
				}
				public Boolean TDOCUMENTOIsKey(){
				    return false;
				}
				public Integer TDOCUMENTOLength(){
				    return 1;
				}
				public Integer TDOCUMENTOPrecision(){
				    return 0;
				}
				public String TDOCUMENTODefault(){
				
					return null;
				
				}
				public String TDOCUMENTOComment(){
				
				    return "Tipo de documento del cotizante";
				
				}
				public String TDOCUMENTOPattern(){
				
					return "";
				
				}
				public String TDOCUMENTOOriginalDbColumnName(){
				
					return "TDOCUMENTO";
				
				}

				
			    public String DOCUMENTO;

				public String getDOCUMENTO () {
					return this.DOCUMENTO;
				}

				public Boolean DOCUMENTOIsNullable(){
				    return false;
				}
				public Boolean DOCUMENTOIsKey(){
				    return false;
				}
				public Integer DOCUMENTOLength(){
				    return 12;
				}
				public Integer DOCUMENTOPrecision(){
				    return 0;
				}
				public String DOCUMENTODefault(){
				
					return null;
				
				}
				public String DOCUMENTOComment(){
				
				    return "Documento del cotizante";
				
				}
				public String DOCUMENTOPattern(){
				
					return "";
				
				}
				public String DOCUMENTOOriginalDbColumnName(){
				
					return "DOCUMENTO";
				
				}

				
			    public String RESIDENTE;

				public String getRESIDENTE () {
					return this.RESIDENTE;
				}

				public Boolean RESIDENTEIsNullable(){
				    return true;
				}
				public Boolean RESIDENTEIsKey(){
				    return false;
				}
				public Integer RESIDENTELength(){
				    return 1;
				}
				public Integer RESIDENTEPrecision(){
				    return 0;
				}
				public String RESIDENTEDefault(){
				
					return null;
				
				}
				public String RESIDENTEComment(){
				
				    return "'X': Si el cotizante es residente temporal o permanente";
				
				}
				public String RESIDENTEPattern(){
				
					return "";
				
				}
				public String RESIDENTEOriginalDbColumnName(){
				
					return "RESIDENTE";
				
				}

				
			    public String CODUMILITAR;

				public String getCODUMILITAR () {
					return this.CODUMILITAR;
				}

				public Boolean CODUMILITARIsNullable(){
				    return false;
				}
				public Boolean CODUMILITARIsKey(){
				    return false;
				}
				public Integer CODUMILITARLength(){
				    return 50;
				}
				public Integer CODUMILITARPrecision(){
				    return 0;
				}
				public String CODUMILITARDefault(){
				
					return null;
				
				}
				public String CODUMILITARComment(){
				
				    return "C\u00F3digo de la unidad militar";
				
				}
				public String CODUMILITARPattern(){
				
					return "";
				
				}
				public String CODUMILITAROriginalDbColumnName(){
				
					return "CODUMILITAR";
				
				}

				
			    public String CODGRDMILITAR;

				public String getCODGRDMILITAR () {
					return this.CODGRDMILITAR;
				}

				public Boolean CODGRDMILITARIsNullable(){
				    return false;
				}
				public Boolean CODGRDMILITARIsKey(){
				    return false;
				}
				public Integer CODGRDMILITARLength(){
				    return 20;
				}
				public Integer CODGRDMILITARPrecision(){
				    return 0;
				}
				public String CODGRDMILITARDefault(){
				
					return null;
				
				}
				public String CODGRDMILITARComment(){
				
				    return "C\u00F3digo del grado militar";
				
				}
				public String CODGRDMILITARPattern(){
				
					return "";
				
				}
				public String CODGRDMILITAROriginalDbColumnName(){
				
					return "CODGRDMILITAR";
				
				}

				
			    public String SGRDMILITAR;

				public String getSGRDMILITAR () {
					return this.SGRDMILITAR;
				}

				public Boolean SGRDMILITARIsNullable(){
				    return false;
				}
				public Boolean SGRDMILITARIsKey(){
				    return false;
				}
				public Integer SGRDMILITARLength(){
				    return 10;
				}
				public Integer SGRDMILITARPrecision(){
				    return 0;
				}
				public String SGRDMILITARDefault(){
				
					return null;
				
				}
				public String SGRDMILITARComment(){
				
				    return "Sigla del grado militar";
				
				}
				public String SGRDMILITARPattern(){
				
					return "";
				
				}
				public String SGRDMILITAROriginalDbColumnName(){
				
					return "SGRDMILITAR";
				
				}

				
			    public String FINGRESO;

				public String getFINGRESO () {
					return this.FINGRESO;
				}

				public Boolean FINGRESOIsNullable(){
				    return false;
				}
				public Boolean FINGRESOIsKey(){
				    return false;
				}
				public Integer FINGRESOLength(){
				    return 10;
				}
				public Integer FINGRESOPrecision(){
				    return 0;
				}
				public String FINGRESODefault(){
				
					return null;
				
				}
				public String FINGRESOComment(){
				
				    return "Fecha de ingreso";
				
				}
				public String FINGRESOPattern(){
				
					return "";
				
				}
				public String FINGRESOOriginalDbColumnName(){
				
					return "FINGRESO";
				
				}

				
			    public String PRIMER_APELLIDO;

				public String getPRIMER_APELLIDO () {
					return this.PRIMER_APELLIDO;
				}

				public Boolean PRIMER_APELLIDOIsNullable(){
				    return false;
				}
				public Boolean PRIMER_APELLIDOIsKey(){
				    return false;
				}
				public Integer PRIMER_APELLIDOLength(){
				    return 100;
				}
				public Integer PRIMER_APELLIDOPrecision(){
				    return 0;
				}
				public String PRIMER_APELLIDODefault(){
				
					return null;
				
				}
				public String PRIMER_APELLIDOComment(){
				
				    return "Primer apellido del cotizante";
				
				}
				public String PRIMER_APELLIDOPattern(){
				
					return "";
				
				}
				public String PRIMER_APELLIDOOriginalDbColumnName(){
				
					return "PRIMER_APELLIDO";
				
				}

				
			    public String SEGUNDO_APELLIDO;

				public String getSEGUNDO_APELLIDO () {
					return this.SEGUNDO_APELLIDO;
				}

				public Boolean SEGUNDO_APELLIDOIsNullable(){
				    return true;
				}
				public Boolean SEGUNDO_APELLIDOIsKey(){
				    return false;
				}
				public Integer SEGUNDO_APELLIDOLength(){
				    return 100;
				}
				public Integer SEGUNDO_APELLIDOPrecision(){
				    return 0;
				}
				public String SEGUNDO_APELLIDODefault(){
				
					return null;
				
				}
				public String SEGUNDO_APELLIDOComment(){
				
				    return "Segundo apellido del cotizante";
				
				}
				public String SEGUNDO_APELLIDOPattern(){
				
					return "";
				
				}
				public String SEGUNDO_APELLIDOOriginalDbColumnName(){
				
					return "SEGUNDO_APELLIDO";
				
				}

				
			    public String PRIMER_NOMBRE;

				public String getPRIMER_NOMBRE () {
					return this.PRIMER_NOMBRE;
				}

				public Boolean PRIMER_NOMBREIsNullable(){
				    return false;
				}
				public Boolean PRIMER_NOMBREIsKey(){
				    return false;
				}
				public Integer PRIMER_NOMBRELength(){
				    return 100;
				}
				public Integer PRIMER_NOMBREPrecision(){
				    return 0;
				}
				public String PRIMER_NOMBREDefault(){
				
					return null;
				
				}
				public String PRIMER_NOMBREComment(){
				
				    return "Primer nombre del cotizante";
				
				}
				public String PRIMER_NOMBREPattern(){
				
					return "";
				
				}
				public String PRIMER_NOMBREOriginalDbColumnName(){
				
					return "PRIMER_NOMBRE";
				
				}

				
			    public String SEGUNDO_NOMBRE;

				public String getSEGUNDO_NOMBRE () {
					return this.SEGUNDO_NOMBRE;
				}

				public Boolean SEGUNDO_NOMBREIsNullable(){
				    return true;
				}
				public Boolean SEGUNDO_NOMBREIsKey(){
				    return false;
				}
				public Integer SEGUNDO_NOMBRELength(){
				    return 100;
				}
				public Integer SEGUNDO_NOMBREPrecision(){
				    return 0;
				}
				public String SEGUNDO_NOMBREDefault(){
				
					return null;
				
				}
				public String SEGUNDO_NOMBREComment(){
				
				    return "Segundo nombre del cotizante";
				
				}
				public String SEGUNDO_NOMBREPattern(){
				
					return "";
				
				}
				public String SEGUNDO_NOMBREOriginalDbColumnName(){
				
					return "SEGUNDO_NOMBRE";
				
				}

				
			    public String INGRESO;

				public String getINGRESO () {
					return this.INGRESO;
				}

				public Boolean INGRESOIsNullable(){
				    return true;
				}
				public Boolean INGRESOIsKey(){
				    return false;
				}
				public Integer INGRESOLength(){
				    return 1;
				}
				public Integer INGRESOPrecision(){
				    return 0;
				}
				public String INGRESODefault(){
				
					return null;
				
				}
				public String INGRESOComment(){
				
				    return "Ingreso (Nulo o 'X')";
				
				}
				public String INGRESOPattern(){
				
					return "";
				
				}
				public String INGRESOOriginalDbColumnName(){
				
					return "INGRESO";
				
				}

				
			    public String RETIRO;

				public String getRETIRO () {
					return this.RETIRO;
				}

				public Boolean RETIROIsNullable(){
				    return true;
				}
				public Boolean RETIROIsKey(){
				    return false;
				}
				public Integer RETIROLength(){
				    return 1;
				}
				public Integer RETIROPrecision(){
				    return 0;
				}
				public String RETIRODefault(){
				
					return null;
				
				}
				public String RETIROComment(){
				
				    return "Retiro del sistema (Nulo o 'X')";
				
				}
				public String RETIROPattern(){
				
					return "";
				
				}
				public String RETIROOriginalDbColumnName(){
				
					return "RETIRO";
				
				}

				
			    public String TDE;

				public String getTDE () {
					return this.TDE;
				}

				public Boolean TDEIsNullable(){
				    return true;
				}
				public Boolean TDEIsKey(){
				    return false;
				}
				public Integer TDELength(){
				    return 1;
				}
				public Integer TDEPrecision(){
				    return 0;
				}
				public String TDEDefault(){
				
					return null;
				
				}
				public String TDEComment(){
				
				    return "Traslado desde una EPS (Nulo o 'X')";
				
				}
				public String TDEPattern(){
				
					return "";
				
				}
				public String TDEOriginalDbColumnName(){
				
					return "TDE";
				
				}

				
			    public String TAE;

				public String getTAE () {
					return this.TAE;
				}

				public Boolean TAEIsNullable(){
				    return true;
				}
				public Boolean TAEIsKey(){
				    return false;
				}
				public Integer TAELength(){
				    return 1;
				}
				public Integer TAEPrecision(){
				    return 0;
				}
				public String TAEDefault(){
				
					return null;
				
				}
				public String TAEComment(){
				
				    return "Traslado a una EPS (Nulo o 'X')";
				
				}
				public String TAEPattern(){
				
					return "";
				
				}
				public String TAEOriginalDbColumnName(){
				
					return "TAE";
				
				}

				
			    public String VSP;

				public String getVSP () {
					return this.VSP;
				}

				public Boolean VSPIsNullable(){
				    return true;
				}
				public Boolean VSPIsKey(){
				    return false;
				}
				public Integer VSPLength(){
				    return 1;
				}
				public Integer VSPPrecision(){
				    return 0;
				}
				public String VSPDefault(){
				
					return null;
				
				}
				public String VSPComment(){
				
				    return "Variaci\u00F3n del salario permanente (Nulo o 'X')";
				
				}
				public String VSPPattern(){
				
					return "";
				
				}
				public String VSPOriginalDbColumnName(){
				
					return "VSP";
				
				}

				
			    public String VST;

				public String getVST () {
					return this.VST;
				}

				public Boolean VSTIsNullable(){
				    return true;
				}
				public Boolean VSTIsKey(){
				    return false;
				}
				public Integer VSTLength(){
				    return 1;
				}
				public Integer VSTPrecision(){
				    return 0;
				}
				public String VSTDefault(){
				
					return null;
				
				}
				public String VSTComment(){
				
				    return "Variaci\u00F3n del salario transitoria (Nula o 'X\u00B4)";
				
				}
				public String VSTPattern(){
				
					return "";
				
				}
				public String VSTOriginalDbColumnName(){
				
					return "VST";
				
				}

				
			    public String SLN;

				public String getSLN () {
					return this.SLN;
				}

				public Boolean SLNIsNullable(){
				    return true;
				}
				public Boolean SLNIsKey(){
				    return false;
				}
				public Integer SLNLength(){
				    return 1;
				}
				public Integer SLNPrecision(){
				    return 0;
				}
				public String SLNDefault(){
				
					return null;
				
				}
				public String SLNComment(){
				
				    return "Suspensi\u00F3n temportal del contrato de trabajo o licencias no renumerables o comisi\u00F3n del servicio. (Nulo o 'X')";
				
				}
				public String SLNPattern(){
				
					return "";
				
				}
				public String SLNOriginalDbColumnName(){
				
					return "SLN";
				
				}

				
			    public String IGE;

				public String getIGE () {
					return this.IGE;
				}

				public Boolean IGEIsNullable(){
				    return true;
				}
				public Boolean IGEIsKey(){
				    return false;
				}
				public Integer IGELength(){
				    return 1;
				}
				public Integer IGEPrecision(){
				    return 0;
				}
				public String IGEDefault(){
				
					return null;
				
				}
				public String IGEComment(){
				
				    return "Incapacidad temporal por enfermedad general (Nula o 'X')";
				
				}
				public String IGEPattern(){
				
					return "";
				
				}
				public String IGEOriginalDbColumnName(){
				
					return "IGE";
				
				}

				
			    public String LMA;

				public String getLMA () {
					return this.LMA;
				}

				public Boolean LMAIsNullable(){
				    return true;
				}
				public Boolean LMAIsKey(){
				    return false;
				}
				public Integer LMALength(){
				    return 1;
				}
				public Integer LMAPrecision(){
				    return 0;
				}
				public String LMADefault(){
				
					return null;
				
				}
				public String LMAComment(){
				
				    return "Licencia de maternidad o de paternidad (Nula o 'X')";
				
				}
				public String LMAPattern(){
				
					return "";
				
				}
				public String LMAOriginalDbColumnName(){
				
					return "LMA";
				
				}

				
			    public String VAC;

				public String getVAC () {
					return this.VAC;
				}

				public Boolean VACIsNullable(){
				    return true;
				}
				public Boolean VACIsKey(){
				    return false;
				}
				public Integer VACLength(){
				    return 1;
				}
				public Integer VACPrecision(){
				    return 0;
				}
				public String VACDefault(){
				
					return null;
				
				}
				public String VACComment(){
				
				    return "Vacaciones (Nula o 'X')";
				
				}
				public String VACPattern(){
				
					return "";
				
				}
				public String VACOriginalDbColumnName(){
				
					return "VAC";
				
				}

				
			    public String DIASIRP;

				public String getDIASIRP () {
					return this.DIASIRP;
				}

				public Boolean DIASIRPIsNullable(){
				    return true;
				}
				public Boolean DIASIRPIsKey(){
				    return false;
				}
				public Integer DIASIRPLength(){
				    return 2;
				}
				public Integer DIASIRPPrecision(){
				    return 0;
				}
				public String DIASIRPDefault(){
				
					return null;
				
				}
				public String DIASIRPComment(){
				
				    return "N\u00FAmero de d\u00EDas de incapacidad por accidente de trabajo o enfermedad profesional. (01 - 30)";
				
				}
				public String DIASIRPPattern(){
				
					return "";
				
				}
				public String DIASIRPOriginalDbColumnName(){
				
					return "DIASIRP";
				
				}

				
			    public String DIASCOTSALUD;

				public String getDIASCOTSALUD () {
					return this.DIASCOTSALUD;
				}

				public Boolean DIASCOTSALUDIsNullable(){
				    return false;
				}
				public Boolean DIASCOTSALUDIsKey(){
				    return false;
				}
				public Integer DIASCOTSALUDLength(){
				    return 2;
				}
				public Integer DIASCOTSALUDPrecision(){
				    return 0;
				}
				public String DIASCOTSALUDDefault(){
				
					return null;
				
				}
				public String DIASCOTSALUDComment(){
				
				    return "N\u00FAmero de d\u00EDas cotizados a salud. (01 - 30)";
				
				}
				public String DIASCOTSALUDPattern(){
				
					return "";
				
				}
				public String DIASCOTSALUDOriginalDbColumnName(){
				
					return "DIASCOTSALUD";
				
				}

				
			    public String DIASCOTARP;

				public String getDIASCOTARP () {
					return this.DIASCOTARP;
				}

				public Boolean DIASCOTARPIsNullable(){
				    return true;
				}
				public Boolean DIASCOTARPIsKey(){
				    return false;
				}
				public Integer DIASCOTARPLength(){
				    return 2;
				}
				public Integer DIASCOTARPPrecision(){
				    return 0;
				}
				public String DIASCOTARPDefault(){
				
					return null;
				
				}
				public String DIASCOTARPComment(){
				
				    return "N\u00FAmero de d\u00EDas cotizados a riesgos profesionales (01 - 30)";
				
				}
				public String DIASCOTARPPattern(){
				
					return "";
				
				}
				public String DIASCOTARPOriginalDbColumnName(){
				
					return "DIASCOTARP";
				
				}

				
			    public String SLRBASICO;

				public String getSLRBASICO () {
					return this.SLRBASICO;
				}

				public Boolean SLRBASICOIsNullable(){
				    return false;
				}
				public Boolean SLRBASICOIsKey(){
				    return false;
				}
				public Integer SLRBASICOLength(){
				    return 9;
				}
				public Integer SLRBASICOPrecision(){
				    return 0;
				}
				public String SLRBASICODefault(){
				
					return null;
				
				}
				public String SLRBASICOComment(){
				
				    return "Salario b\u00E1sico (sin centavos)";
				
				}
				public String SLRBASICOPattern(){
				
					return "";
				
				}
				public String SLRBASICOOriginalDbColumnName(){
				
					return "SLRBASICO";
				
				}

				
			    public String SUBFAMILIAR;

				public String getSUBFAMILIAR () {
					return this.SUBFAMILIAR;
				}

				public Boolean SUBFAMILIARIsNullable(){
				    return false;
				}
				public Boolean SUBFAMILIARIsKey(){
				    return false;
				}
				public Integer SUBFAMILIARLength(){
				    return 9;
				}
				public Integer SUBFAMILIARPrecision(){
				    return 0;
				}
				public String SUBFAMILIARDefault(){
				
					return null;
				
				}
				public String SUBFAMILIARComment(){
				
				    return "Subsidio familiar ";
				
				}
				public String SUBFAMILIARPattern(){
				
					return "";
				
				}
				public String SUBFAMILIAROriginalDbColumnName(){
				
					return "SUBFAMILIAR";
				
				}

				
			    public String IBC;

				public String getIBC () {
					return this.IBC;
				}

				public Boolean IBCIsNullable(){
				    return false;
				}
				public Boolean IBCIsKey(){
				    return false;
				}
				public Integer IBCLength(){
				    return 9;
				}
				public Integer IBCPrecision(){
				    return 0;
				}
				public String IBCDefault(){
				
					return null;
				
				}
				public String IBCComment(){
				
				    return "Ingreso base cotizaci\u00F3n";
				
				}
				public String IBCPattern(){
				
					return "";
				
				}
				public String IBCOriginalDbColumnName(){
				
					return "IBC";
				
				}

				
			    public String TARIFA_APORTES_EMPLEADOR;

				public String getTARIFA_APORTES_EMPLEADOR () {
					return this.TARIFA_APORTES_EMPLEADOR;
				}

				public Boolean TARIFA_APORTES_EMPLEADORIsNullable(){
				    return false;
				}
				public Boolean TARIFA_APORTES_EMPLEADORIsKey(){
				    return false;
				}
				public Integer TARIFA_APORTES_EMPLEADORLength(){
				    return 7;
				}
				public Integer TARIFA_APORTES_EMPLEADORPrecision(){
				    return 0;
				}
				public String TARIFA_APORTES_EMPLEADORDefault(){
				
					return null;
				
				}
				public String TARIFA_APORTES_EMPLEADORComment(){
				
				    return "Tarifa de aportes del empleador de acuerdo a la normatividad vigente.";
				
				}
				public String TARIFA_APORTES_EMPLEADORPattern(){
				
					return "";
				
				}
				public String TARIFA_APORTES_EMPLEADOROriginalDbColumnName(){
				
					return "TARIFA_APORTES_EMPLEADOR";
				
				}

				
			    public String COTOBLIGATORIA_EMPLEADOR;

				public String getCOTOBLIGATORIA_EMPLEADOR () {
					return this.COTOBLIGATORIA_EMPLEADOR;
				}

				public Boolean COTOBLIGATORIA_EMPLEADORIsNullable(){
				    return false;
				}
				public Boolean COTOBLIGATORIA_EMPLEADORIsKey(){
				    return false;
				}
				public Integer COTOBLIGATORIA_EMPLEADORLength(){
				    return 9;
				}
				public Integer COTOBLIGATORIA_EMPLEADORPrecision(){
				    return 0;
				}
				public String COTOBLIGATORIA_EMPLEADORDefault(){
				
					return null;
				
				}
				public String COTOBLIGATORIA_EMPLEADORComment(){
				
				    return "Cotizaci\u00F3n obligatoria del empleador";
				
				}
				public String COTOBLIGATORIA_EMPLEADORPattern(){
				
					return "";
				
				}
				public String COTOBLIGATORIA_EMPLEADOROriginalDbColumnName(){
				
					return "COTOBLIGATORIA_EMPLEADOR";
				
				}

				
			    public String TARIFA_APORTES_EMPLEADO;

				public String getTARIFA_APORTES_EMPLEADO () {
					return this.TARIFA_APORTES_EMPLEADO;
				}

				public Boolean TARIFA_APORTES_EMPLEADOIsNullable(){
				    return false;
				}
				public Boolean TARIFA_APORTES_EMPLEADOIsKey(){
				    return false;
				}
				public Integer TARIFA_APORTES_EMPLEADOLength(){
				    return 7;
				}
				public Integer TARIFA_APORTES_EMPLEADOPrecision(){
				    return 0;
				}
				public String TARIFA_APORTES_EMPLEADODefault(){
				
					return null;
				
				}
				public String TARIFA_APORTES_EMPLEADOComment(){
				
				    return "Tarifa de aportes del empleado de acuerdo a la normatividad vigente.";
				
				}
				public String TARIFA_APORTES_EMPLEADOPattern(){
				
					return "";
				
				}
				public String TARIFA_APORTES_EMPLEADOOriginalDbColumnName(){
				
					return "TARIFA_APORTES_EMPLEADO";
				
				}

				
			    public String COTOBLIGATORIA_EMPLEADO;

				public String getCOTOBLIGATORIA_EMPLEADO () {
					return this.COTOBLIGATORIA_EMPLEADO;
				}

				public Boolean COTOBLIGATORIA_EMPLEADOIsNullable(){
				    return false;
				}
				public Boolean COTOBLIGATORIA_EMPLEADOIsKey(){
				    return false;
				}
				public Integer COTOBLIGATORIA_EMPLEADOLength(){
				    return 9;
				}
				public Integer COTOBLIGATORIA_EMPLEADOPrecision(){
				    return 0;
				}
				public String COTOBLIGATORIA_EMPLEADODefault(){
				
					return null;
				
				}
				public String COTOBLIGATORIA_EMPLEADOComment(){
				
				    return "Cotizaci\u00F3n obligatoria del empleado";
				
				}
				public String COTOBLIGATORIA_EMPLEADOPattern(){
				
					return "";
				
				}
				public String COTOBLIGATORIA_EMPLEADOOriginalDbColumnName(){
				
					return "COTOBLIGATORIA_EMPLEADO";
				
				}

				
			    public String TOTAL_APORTE;

				public String getTOTAL_APORTE () {
					return this.TOTAL_APORTE;
				}

				public Boolean TOTAL_APORTEIsNullable(){
				    return false;
				}
				public Boolean TOTAL_APORTEIsKey(){
				    return false;
				}
				public Integer TOTAL_APORTELength(){
				    return 9;
				}
				public Integer TOTAL_APORTEPrecision(){
				    return 0;
				}
				public String TOTAL_APORTEDefault(){
				
					return null;
				
				}
				public String TOTAL_APORTEComment(){
				
				    return "Total aporte cotizaci\u00F3n obligatoria con redondeo";
				
				}
				public String TOTAL_APORTEPattern(){
				
					return "";
				
				}
				public String TOTAL_APORTEOriginalDbColumnName(){
				
					return "TOTAL_APORTE";
				
				}

				
			    public String VINCAPACIDAD;

				public String getVINCAPACIDAD () {
					return this.VINCAPACIDAD;
				}

				public Boolean VINCAPACIDADIsNullable(){
				    return true;
				}
				public Boolean VINCAPACIDADIsKey(){
				    return false;
				}
				public Integer VINCAPACIDADLength(){
				    return 9;
				}
				public Integer VINCAPACIDADPrecision(){
				    return 0;
				}
				public String VINCAPACIDADDefault(){
				
					return null;
				
				}
				public String VINCAPACIDADComment(){
				
				    return "Valor de la incapacidad por enfermedad general";
				
				}
				public String VINCAPACIDADPattern(){
				
					return "";
				
				}
				public String VINCAPACIDADOriginalDbColumnName(){
				
					return "VINCAPACIDAD";
				
				}

				
			    public String VLICMATERNIDAD;

				public String getVLICMATERNIDAD () {
					return this.VLICMATERNIDAD;
				}

				public Boolean VLICMATERNIDADIsNullable(){
				    return true;
				}
				public Boolean VLICMATERNIDADIsKey(){
				    return false;
				}
				public Integer VLICMATERNIDADLength(){
				    return 9;
				}
				public Integer VLICMATERNIDADPrecision(){
				    return 0;
				}
				public String VLICMATERNIDADDefault(){
				
					return null;
				
				}
				public String VLICMATERNIDADComment(){
				
				    return "Valor de la licencia de maternidad";
				
				}
				public String VLICMATERNIDADPattern(){
				
					return "";
				
				}
				public String VLICMATERNIDADOriginalDbColumnName(){
				
					return "VLICMATERNIDAD";
				
				}

				
			    public String CODFUERZA;

				public String getCODFUERZA () {
					return this.CODFUERZA;
				}

				public Boolean CODFUERZAIsNullable(){
				    return true;
				}
				public Boolean CODFUERZAIsKey(){
				    return false;
				}
				public Integer CODFUERZALength(){
				    return 1;
				}
				public Integer CODFUERZAPrecision(){
				    return 0;
				}
				public String CODFUERZADefault(){
				
					return null;
				
				}
				public String CODFUERZAComment(){
				
				    return "C\u00F3digo de la fuerza militar";
				
				}
				public String CODFUERZAPattern(){
				
					return "";
				
				}
				public String CODFUERZAOriginalDbColumnName(){
				
					return "CODFUERZA";
				
				}

				
			    public String STVINCULACION;

				public String getSTVINCULACION () {
					return this.STVINCULACION;
				}

				public Boolean STVINCULACIONIsNullable(){
				    return true;
				}
				public Boolean STVINCULACIONIsKey(){
				    return false;
				}
				public Integer STVINCULACIONLength(){
				    return 2;
				}
				public Integer STVINCULACIONPrecision(){
				    return 0;
				}
				public String STVINCULACIONDefault(){
				
					return null;
				
				}
				public String STVINCULACIONComment(){
				
				    return "Sigla del tipo de vinculaci\u00F3n";
				
				}
				public String STVINCULACIONPattern(){
				
					return "";
				
				}
				public String STVINCULACIONOriginalDbColumnName(){
				
					return "STVINCULACION";
				
				}

				
			    public BigDecimal ARCHIVOS_ID;

				public BigDecimal getARCHIVOS_ID () {
					return this.ARCHIVOS_ID;
				}

				public Boolean ARCHIVOS_IDIsNullable(){
				    return false;
				}
				public Boolean ARCHIVOS_IDIsKey(){
				    return false;
				}
				public Integer ARCHIVOS_IDLength(){
				    return 0;
				}
				public Integer ARCHIVOS_IDPrecision(){
				    return null;
				}
				public String ARCHIVOS_IDDefault(){
				
					return null;
				
				}
				public String ARCHIVOS_IDComment(){
				
				    return "FK - AFI_ARCHIVOS";
				
				}
				public String ARCHIVOS_IDPattern(){
				
					return "";
				
				}
				public String ARCHIVOS_IDOriginalDbColumnName(){
				
					return "ARCHIVOS_ID";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_CARGUE_APORTES_CargarAportes.length) {
				if(length < 1024 && commonByteArray_AFI_CARGUE_APORTES_CargarAportes.length == 0) {
   					commonByteArray_AFI_CARGUE_APORTES_CargarAportes = new byte[1024];
				} else {
   					commonByteArray_AFI_CARGUE_APORTES_CargarAportes = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_CARGUE_APORTES_CargarAportes, 0, length);
			strReturn = new String(commonByteArray_AFI_CARGUE_APORTES_CargarAportes, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_CARGUE_APORTES_CargarAportes.length) {
				if(length < 1024 && commonByteArray_AFI_CARGUE_APORTES_CargarAportes.length == 0) {
   					commonByteArray_AFI_CARGUE_APORTES_CargarAportes = new byte[1024];
				} else {
   					commonByteArray_AFI_CARGUE_APORTES_CargarAportes = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_CARGUE_APORTES_CargarAportes, 0, length);
			strReturn = new String(commonByteArray_AFI_CARGUE_APORTES_CargarAportes, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_CARGUE_APORTES_CargarAportes) {

        	try {

        		int length = 0;
		
					this.SECUENCIA = readString(dis);
					
					this.TREGISTRO = readString(dis);
					
					this.TDOCUMENTO = readString(dis);
					
					this.DOCUMENTO = readString(dis);
					
					this.RESIDENTE = readString(dis);
					
					this.CODUMILITAR = readString(dis);
					
					this.CODGRDMILITAR = readString(dis);
					
					this.SGRDMILITAR = readString(dis);
					
					this.FINGRESO = readString(dis);
					
					this.PRIMER_APELLIDO = readString(dis);
					
					this.SEGUNDO_APELLIDO = readString(dis);
					
					this.PRIMER_NOMBRE = readString(dis);
					
					this.SEGUNDO_NOMBRE = readString(dis);
					
					this.INGRESO = readString(dis);
					
					this.RETIRO = readString(dis);
					
					this.TDE = readString(dis);
					
					this.TAE = readString(dis);
					
					this.VSP = readString(dis);
					
					this.VST = readString(dis);
					
					this.SLN = readString(dis);
					
					this.IGE = readString(dis);
					
					this.LMA = readString(dis);
					
					this.VAC = readString(dis);
					
					this.DIASIRP = readString(dis);
					
					this.DIASCOTSALUD = readString(dis);
					
					this.DIASCOTARP = readString(dis);
					
					this.SLRBASICO = readString(dis);
					
					this.SUBFAMILIAR = readString(dis);
					
					this.IBC = readString(dis);
					
					this.TARIFA_APORTES_EMPLEADOR = readString(dis);
					
					this.COTOBLIGATORIA_EMPLEADOR = readString(dis);
					
					this.TARIFA_APORTES_EMPLEADO = readString(dis);
					
					this.COTOBLIGATORIA_EMPLEADO = readString(dis);
					
					this.TOTAL_APORTE = readString(dis);
					
					this.VINCAPACIDAD = readString(dis);
					
					this.VLICMATERNIDAD = readString(dis);
					
					this.CODFUERZA = readString(dis);
					
					this.STVINCULACION = readString(dis);
					
						this.ARCHIVOS_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_CARGUE_APORTES_CargarAportes) {

        	try {

        		int length = 0;
		
					this.SECUENCIA = readString(dis);
					
					this.TREGISTRO = readString(dis);
					
					this.TDOCUMENTO = readString(dis);
					
					this.DOCUMENTO = readString(dis);
					
					this.RESIDENTE = readString(dis);
					
					this.CODUMILITAR = readString(dis);
					
					this.CODGRDMILITAR = readString(dis);
					
					this.SGRDMILITAR = readString(dis);
					
					this.FINGRESO = readString(dis);
					
					this.PRIMER_APELLIDO = readString(dis);
					
					this.SEGUNDO_APELLIDO = readString(dis);
					
					this.PRIMER_NOMBRE = readString(dis);
					
					this.SEGUNDO_NOMBRE = readString(dis);
					
					this.INGRESO = readString(dis);
					
					this.RETIRO = readString(dis);
					
					this.TDE = readString(dis);
					
					this.TAE = readString(dis);
					
					this.VSP = readString(dis);
					
					this.VST = readString(dis);
					
					this.SLN = readString(dis);
					
					this.IGE = readString(dis);
					
					this.LMA = readString(dis);
					
					this.VAC = readString(dis);
					
					this.DIASIRP = readString(dis);
					
					this.DIASCOTSALUD = readString(dis);
					
					this.DIASCOTARP = readString(dis);
					
					this.SLRBASICO = readString(dis);
					
					this.SUBFAMILIAR = readString(dis);
					
					this.IBC = readString(dis);
					
					this.TARIFA_APORTES_EMPLEADOR = readString(dis);
					
					this.COTOBLIGATORIA_EMPLEADOR = readString(dis);
					
					this.TARIFA_APORTES_EMPLEADO = readString(dis);
					
					this.COTOBLIGATORIA_EMPLEADO = readString(dis);
					
					this.TOTAL_APORTE = readString(dis);
					
					this.VINCAPACIDAD = readString(dis);
					
					this.VLICMATERNIDAD = readString(dis);
					
					this.CODFUERZA = readString(dis);
					
					this.STVINCULACION = readString(dis);
					
						this.ARCHIVOS_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.SECUENCIA,dos);
					
					// String
				
						writeString(this.TREGISTRO,dos);
					
					// String
				
						writeString(this.TDOCUMENTO,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// String
				
						writeString(this.RESIDENTE,dos);
					
					// String
				
						writeString(this.CODUMILITAR,dos);
					
					// String
				
						writeString(this.CODGRDMILITAR,dos);
					
					// String
				
						writeString(this.SGRDMILITAR,dos);
					
					// String
				
						writeString(this.FINGRESO,dos);
					
					// String
				
						writeString(this.PRIMER_APELLIDO,dos);
					
					// String
				
						writeString(this.SEGUNDO_APELLIDO,dos);
					
					// String
				
						writeString(this.PRIMER_NOMBRE,dos);
					
					// String
				
						writeString(this.SEGUNDO_NOMBRE,dos);
					
					// String
				
						writeString(this.INGRESO,dos);
					
					// String
				
						writeString(this.RETIRO,dos);
					
					// String
				
						writeString(this.TDE,dos);
					
					// String
				
						writeString(this.TAE,dos);
					
					// String
				
						writeString(this.VSP,dos);
					
					// String
				
						writeString(this.VST,dos);
					
					// String
				
						writeString(this.SLN,dos);
					
					// String
				
						writeString(this.IGE,dos);
					
					// String
				
						writeString(this.LMA,dos);
					
					// String
				
						writeString(this.VAC,dos);
					
					// String
				
						writeString(this.DIASIRP,dos);
					
					// String
				
						writeString(this.DIASCOTSALUD,dos);
					
					// String
				
						writeString(this.DIASCOTARP,dos);
					
					// String
				
						writeString(this.SLRBASICO,dos);
					
					// String
				
						writeString(this.SUBFAMILIAR,dos);
					
					// String
				
						writeString(this.IBC,dos);
					
					// String
				
						writeString(this.TARIFA_APORTES_EMPLEADOR,dos);
					
					// String
				
						writeString(this.COTOBLIGATORIA_EMPLEADOR,dos);
					
					// String
				
						writeString(this.TARIFA_APORTES_EMPLEADO,dos);
					
					// String
				
						writeString(this.COTOBLIGATORIA_EMPLEADO,dos);
					
					// String
				
						writeString(this.TOTAL_APORTE,dos);
					
					// String
				
						writeString(this.VINCAPACIDAD,dos);
					
					// String
				
						writeString(this.VLICMATERNIDAD,dos);
					
					// String
				
						writeString(this.CODFUERZA,dos);
					
					// String
				
						writeString(this.STVINCULACION,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ARCHIVOS_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.SECUENCIA,dos);
					
					// String
				
						writeString(this.TREGISTRO,dos);
					
					// String
				
						writeString(this.TDOCUMENTO,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// String
				
						writeString(this.RESIDENTE,dos);
					
					// String
				
						writeString(this.CODUMILITAR,dos);
					
					// String
				
						writeString(this.CODGRDMILITAR,dos);
					
					// String
				
						writeString(this.SGRDMILITAR,dos);
					
					// String
				
						writeString(this.FINGRESO,dos);
					
					// String
				
						writeString(this.PRIMER_APELLIDO,dos);
					
					// String
				
						writeString(this.SEGUNDO_APELLIDO,dos);
					
					// String
				
						writeString(this.PRIMER_NOMBRE,dos);
					
					// String
				
						writeString(this.SEGUNDO_NOMBRE,dos);
					
					// String
				
						writeString(this.INGRESO,dos);
					
					// String
				
						writeString(this.RETIRO,dos);
					
					// String
				
						writeString(this.TDE,dos);
					
					// String
				
						writeString(this.TAE,dos);
					
					// String
				
						writeString(this.VSP,dos);
					
					// String
				
						writeString(this.VST,dos);
					
					// String
				
						writeString(this.SLN,dos);
					
					// String
				
						writeString(this.IGE,dos);
					
					// String
				
						writeString(this.LMA,dos);
					
					// String
				
						writeString(this.VAC,dos);
					
					// String
				
						writeString(this.DIASIRP,dos);
					
					// String
				
						writeString(this.DIASCOTSALUD,dos);
					
					// String
				
						writeString(this.DIASCOTARP,dos);
					
					// String
				
						writeString(this.SLRBASICO,dos);
					
					// String
				
						writeString(this.SUBFAMILIAR,dos);
					
					// String
				
						writeString(this.IBC,dos);
					
					// String
				
						writeString(this.TARIFA_APORTES_EMPLEADOR,dos);
					
					// String
				
						writeString(this.COTOBLIGATORIA_EMPLEADOR,dos);
					
					// String
				
						writeString(this.TARIFA_APORTES_EMPLEADO,dos);
					
					// String
				
						writeString(this.COTOBLIGATORIA_EMPLEADO,dos);
					
					// String
				
						writeString(this.TOTAL_APORTE,dos);
					
					// String
				
						writeString(this.VINCAPACIDAD,dos);
					
					// String
				
						writeString(this.VLICMATERNIDAD,dos);
					
					// String
				
						writeString(this.CODFUERZA,dos);
					
					// String
				
						writeString(this.STVINCULACION,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ARCHIVOS_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("SECUENCIA="+SECUENCIA);
		sb.append(",TREGISTRO="+TREGISTRO);
		sb.append(",TDOCUMENTO="+TDOCUMENTO);
		sb.append(",DOCUMENTO="+DOCUMENTO);
		sb.append(",RESIDENTE="+RESIDENTE);
		sb.append(",CODUMILITAR="+CODUMILITAR);
		sb.append(",CODGRDMILITAR="+CODGRDMILITAR);
		sb.append(",SGRDMILITAR="+SGRDMILITAR);
		sb.append(",FINGRESO="+FINGRESO);
		sb.append(",PRIMER_APELLIDO="+PRIMER_APELLIDO);
		sb.append(",SEGUNDO_APELLIDO="+SEGUNDO_APELLIDO);
		sb.append(",PRIMER_NOMBRE="+PRIMER_NOMBRE);
		sb.append(",SEGUNDO_NOMBRE="+SEGUNDO_NOMBRE);
		sb.append(",INGRESO="+INGRESO);
		sb.append(",RETIRO="+RETIRO);
		sb.append(",TDE="+TDE);
		sb.append(",TAE="+TAE);
		sb.append(",VSP="+VSP);
		sb.append(",VST="+VST);
		sb.append(",SLN="+SLN);
		sb.append(",IGE="+IGE);
		sb.append(",LMA="+LMA);
		sb.append(",VAC="+VAC);
		sb.append(",DIASIRP="+DIASIRP);
		sb.append(",DIASCOTSALUD="+DIASCOTSALUD);
		sb.append(",DIASCOTARP="+DIASCOTARP);
		sb.append(",SLRBASICO="+SLRBASICO);
		sb.append(",SUBFAMILIAR="+SUBFAMILIAR);
		sb.append(",IBC="+IBC);
		sb.append(",TARIFA_APORTES_EMPLEADOR="+TARIFA_APORTES_EMPLEADOR);
		sb.append(",COTOBLIGATORIA_EMPLEADOR="+COTOBLIGATORIA_EMPLEADOR);
		sb.append(",TARIFA_APORTES_EMPLEADO="+TARIFA_APORTES_EMPLEADO);
		sb.append(",COTOBLIGATORIA_EMPLEADO="+COTOBLIGATORIA_EMPLEADO);
		sb.append(",TOTAL_APORTE="+TOTAL_APORTE);
		sb.append(",VINCAPACIDAD="+VINCAPACIDAD);
		sb.append(",VLICMATERNIDAD="+VLICMATERNIDAD);
		sb.append(",CODFUERZA="+CODFUERZA);
		sb.append(",STVINCULACION="+STVINCULACION);
		sb.append(",ARCHIVOS_ID="+String.valueOf(ARCHIVOS_ID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row8Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row5Struct implements routines.system.IPersistableRow<row5Struct> {
    final static byte[] commonByteArrayLock_AFI_CARGUE_APORTES_CargarAportes = new byte[0];
    static byte[] commonByteArray_AFI_CARGUE_APORTES_CargarAportes = new byte[0];

	
			    public String SECUENCIA;

				public String getSECUENCIA () {
					return this.SECUENCIA;
				}

				public Boolean SECUENCIAIsNullable(){
				    return true;
				}
				public Boolean SECUENCIAIsKey(){
				    return false;
				}
				public Integer SECUENCIALength(){
				    return 6;
				}
				public Integer SECUENCIAPrecision(){
				    return 0;
				}
				public String SECUENCIADefault(){
				
					return null;
				
				}
				public String SECUENCIAComment(){
				
				    return "N\u00FAmero de secuencia";
				
				}
				public String SECUENCIAPattern(){
				
					return "";
				
				}
				public String SECUENCIAOriginalDbColumnName(){
				
					return "SECUENCIA";
				
				}

				
			    public String TREGISTRO;

				public String getTREGISTRO () {
					return this.TREGISTRO;
				}

				public Boolean TREGISTROIsNullable(){
				    return false;
				}
				public Boolean TREGISTROIsKey(){
				    return false;
				}
				public Integer TREGISTROLength(){
				    return 1;
				}
				public Integer TREGISTROPrecision(){
				    return 0;
				}
				public String TREGISTRODefault(){
				
					return "'2'";
				
				}
				public String TREGISTROComment(){
				
				    return "Tipo de registro";
				
				}
				public String TREGISTROPattern(){
				
					return "";
				
				}
				public String TREGISTROOriginalDbColumnName(){
				
					return "TREGISTRO";
				
				}

				
			    public String TDOCUMENTO;

				public String getTDOCUMENTO () {
					return this.TDOCUMENTO;
				}

				public Boolean TDOCUMENTOIsNullable(){
				    return false;
				}
				public Boolean TDOCUMENTOIsKey(){
				    return false;
				}
				public Integer TDOCUMENTOLength(){
				    return 1;
				}
				public Integer TDOCUMENTOPrecision(){
				    return 0;
				}
				public String TDOCUMENTODefault(){
				
					return null;
				
				}
				public String TDOCUMENTOComment(){
				
				    return "Tipo de documento del cotizante";
				
				}
				public String TDOCUMENTOPattern(){
				
					return "";
				
				}
				public String TDOCUMENTOOriginalDbColumnName(){
				
					return "TDOCUMENTO";
				
				}

				
			    public String DOCUMENTO;

				public String getDOCUMENTO () {
					return this.DOCUMENTO;
				}

				public Boolean DOCUMENTOIsNullable(){
				    return false;
				}
				public Boolean DOCUMENTOIsKey(){
				    return false;
				}
				public Integer DOCUMENTOLength(){
				    return 12;
				}
				public Integer DOCUMENTOPrecision(){
				    return 0;
				}
				public String DOCUMENTODefault(){
				
					return null;
				
				}
				public String DOCUMENTOComment(){
				
				    return "Documento del cotizante";
				
				}
				public String DOCUMENTOPattern(){
				
					return "";
				
				}
				public String DOCUMENTOOriginalDbColumnName(){
				
					return "DOCUMENTO";
				
				}

				
			    public String RESIDENTE;

				public String getRESIDENTE () {
					return this.RESIDENTE;
				}

				public Boolean RESIDENTEIsNullable(){
				    return true;
				}
				public Boolean RESIDENTEIsKey(){
				    return false;
				}
				public Integer RESIDENTELength(){
				    return 1;
				}
				public Integer RESIDENTEPrecision(){
				    return 0;
				}
				public String RESIDENTEDefault(){
				
					return null;
				
				}
				public String RESIDENTEComment(){
				
				    return "'X': Si el cotizante es residente temporal o permanente";
				
				}
				public String RESIDENTEPattern(){
				
					return "";
				
				}
				public String RESIDENTEOriginalDbColumnName(){
				
					return "RESIDENTE";
				
				}

				
			    public String CODUMILITAR;

				public String getCODUMILITAR () {
					return this.CODUMILITAR;
				}

				public Boolean CODUMILITARIsNullable(){
				    return false;
				}
				public Boolean CODUMILITARIsKey(){
				    return false;
				}
				public Integer CODUMILITARLength(){
				    return 50;
				}
				public Integer CODUMILITARPrecision(){
				    return 0;
				}
				public String CODUMILITARDefault(){
				
					return null;
				
				}
				public String CODUMILITARComment(){
				
				    return "C\u00F3digo de la unidad militar";
				
				}
				public String CODUMILITARPattern(){
				
					return "";
				
				}
				public String CODUMILITAROriginalDbColumnName(){
				
					return "CODUMILITAR";
				
				}

				
			    public String CODGRDMILITAR;

				public String getCODGRDMILITAR () {
					return this.CODGRDMILITAR;
				}

				public Boolean CODGRDMILITARIsNullable(){
				    return false;
				}
				public Boolean CODGRDMILITARIsKey(){
				    return false;
				}
				public Integer CODGRDMILITARLength(){
				    return 20;
				}
				public Integer CODGRDMILITARPrecision(){
				    return 0;
				}
				public String CODGRDMILITARDefault(){
				
					return null;
				
				}
				public String CODGRDMILITARComment(){
				
				    return "C\u00F3digo del grado militar";
				
				}
				public String CODGRDMILITARPattern(){
				
					return "";
				
				}
				public String CODGRDMILITAROriginalDbColumnName(){
				
					return "CODGRDMILITAR";
				
				}

				
			    public String SGRDMILITAR;

				public String getSGRDMILITAR () {
					return this.SGRDMILITAR;
				}

				public Boolean SGRDMILITARIsNullable(){
				    return false;
				}
				public Boolean SGRDMILITARIsKey(){
				    return false;
				}
				public Integer SGRDMILITARLength(){
				    return 10;
				}
				public Integer SGRDMILITARPrecision(){
				    return 0;
				}
				public String SGRDMILITARDefault(){
				
					return null;
				
				}
				public String SGRDMILITARComment(){
				
				    return "Sigla del grado militar";
				
				}
				public String SGRDMILITARPattern(){
				
					return "";
				
				}
				public String SGRDMILITAROriginalDbColumnName(){
				
					return "SGRDMILITAR";
				
				}

				
			    public String FINGRESO;

				public String getFINGRESO () {
					return this.FINGRESO;
				}

				public Boolean FINGRESOIsNullable(){
				    return false;
				}
				public Boolean FINGRESOIsKey(){
				    return false;
				}
				public Integer FINGRESOLength(){
				    return 10;
				}
				public Integer FINGRESOPrecision(){
				    return 0;
				}
				public String FINGRESODefault(){
				
					return null;
				
				}
				public String FINGRESOComment(){
				
				    return "Fecha de ingreso";
				
				}
				public String FINGRESOPattern(){
				
					return "";
				
				}
				public String FINGRESOOriginalDbColumnName(){
				
					return "FINGRESO";
				
				}

				
			    public String PRIMER_APELLIDO;

				public String getPRIMER_APELLIDO () {
					return this.PRIMER_APELLIDO;
				}

				public Boolean PRIMER_APELLIDOIsNullable(){
				    return false;
				}
				public Boolean PRIMER_APELLIDOIsKey(){
				    return false;
				}
				public Integer PRIMER_APELLIDOLength(){
				    return 100;
				}
				public Integer PRIMER_APELLIDOPrecision(){
				    return 0;
				}
				public String PRIMER_APELLIDODefault(){
				
					return null;
				
				}
				public String PRIMER_APELLIDOComment(){
				
				    return "Primer apellido del cotizante";
				
				}
				public String PRIMER_APELLIDOPattern(){
				
					return "";
				
				}
				public String PRIMER_APELLIDOOriginalDbColumnName(){
				
					return "PRIMER_APELLIDO";
				
				}

				
			    public String SEGUNDO_APELLIDO;

				public String getSEGUNDO_APELLIDO () {
					return this.SEGUNDO_APELLIDO;
				}

				public Boolean SEGUNDO_APELLIDOIsNullable(){
				    return true;
				}
				public Boolean SEGUNDO_APELLIDOIsKey(){
				    return false;
				}
				public Integer SEGUNDO_APELLIDOLength(){
				    return 100;
				}
				public Integer SEGUNDO_APELLIDOPrecision(){
				    return 0;
				}
				public String SEGUNDO_APELLIDODefault(){
				
					return null;
				
				}
				public String SEGUNDO_APELLIDOComment(){
				
				    return "Segundo apellido del cotizante";
				
				}
				public String SEGUNDO_APELLIDOPattern(){
				
					return "";
				
				}
				public String SEGUNDO_APELLIDOOriginalDbColumnName(){
				
					return "SEGUNDO_APELLIDO";
				
				}

				
			    public String PRIMER_NOMBRE;

				public String getPRIMER_NOMBRE () {
					return this.PRIMER_NOMBRE;
				}

				public Boolean PRIMER_NOMBREIsNullable(){
				    return false;
				}
				public Boolean PRIMER_NOMBREIsKey(){
				    return false;
				}
				public Integer PRIMER_NOMBRELength(){
				    return 100;
				}
				public Integer PRIMER_NOMBREPrecision(){
				    return 0;
				}
				public String PRIMER_NOMBREDefault(){
				
					return null;
				
				}
				public String PRIMER_NOMBREComment(){
				
				    return "Primer nombre del cotizante";
				
				}
				public String PRIMER_NOMBREPattern(){
				
					return "";
				
				}
				public String PRIMER_NOMBREOriginalDbColumnName(){
				
					return "PRIMER_NOMBRE";
				
				}

				
			    public String SEGUNDO_NOMBRE;

				public String getSEGUNDO_NOMBRE () {
					return this.SEGUNDO_NOMBRE;
				}

				public Boolean SEGUNDO_NOMBREIsNullable(){
				    return true;
				}
				public Boolean SEGUNDO_NOMBREIsKey(){
				    return false;
				}
				public Integer SEGUNDO_NOMBRELength(){
				    return 100;
				}
				public Integer SEGUNDO_NOMBREPrecision(){
				    return 0;
				}
				public String SEGUNDO_NOMBREDefault(){
				
					return null;
				
				}
				public String SEGUNDO_NOMBREComment(){
				
				    return "Segundo nombre del cotizante";
				
				}
				public String SEGUNDO_NOMBREPattern(){
				
					return "";
				
				}
				public String SEGUNDO_NOMBREOriginalDbColumnName(){
				
					return "SEGUNDO_NOMBRE";
				
				}

				
			    public String INGRESO;

				public String getINGRESO () {
					return this.INGRESO;
				}

				public Boolean INGRESOIsNullable(){
				    return true;
				}
				public Boolean INGRESOIsKey(){
				    return false;
				}
				public Integer INGRESOLength(){
				    return 1;
				}
				public Integer INGRESOPrecision(){
				    return 0;
				}
				public String INGRESODefault(){
				
					return null;
				
				}
				public String INGRESOComment(){
				
				    return "Ingreso (Nulo o 'X')";
				
				}
				public String INGRESOPattern(){
				
					return "";
				
				}
				public String INGRESOOriginalDbColumnName(){
				
					return "INGRESO";
				
				}

				
			    public String RETIRO;

				public String getRETIRO () {
					return this.RETIRO;
				}

				public Boolean RETIROIsNullable(){
				    return true;
				}
				public Boolean RETIROIsKey(){
				    return false;
				}
				public Integer RETIROLength(){
				    return 1;
				}
				public Integer RETIROPrecision(){
				    return 0;
				}
				public String RETIRODefault(){
				
					return null;
				
				}
				public String RETIROComment(){
				
				    return "Retiro del sistema (Nulo o 'X')";
				
				}
				public String RETIROPattern(){
				
					return "";
				
				}
				public String RETIROOriginalDbColumnName(){
				
					return "RETIRO";
				
				}

				
			    public String TDE;

				public String getTDE () {
					return this.TDE;
				}

				public Boolean TDEIsNullable(){
				    return true;
				}
				public Boolean TDEIsKey(){
				    return false;
				}
				public Integer TDELength(){
				    return 1;
				}
				public Integer TDEPrecision(){
				    return 0;
				}
				public String TDEDefault(){
				
					return null;
				
				}
				public String TDEComment(){
				
				    return "Traslado desde una EPS (Nulo o 'X')";
				
				}
				public String TDEPattern(){
				
					return "";
				
				}
				public String TDEOriginalDbColumnName(){
				
					return "TDE";
				
				}

				
			    public String TAE;

				public String getTAE () {
					return this.TAE;
				}

				public Boolean TAEIsNullable(){
				    return true;
				}
				public Boolean TAEIsKey(){
				    return false;
				}
				public Integer TAELength(){
				    return 1;
				}
				public Integer TAEPrecision(){
				    return 0;
				}
				public String TAEDefault(){
				
					return null;
				
				}
				public String TAEComment(){
				
				    return "Traslado a una EPS (Nulo o 'X')";
				
				}
				public String TAEPattern(){
				
					return "";
				
				}
				public String TAEOriginalDbColumnName(){
				
					return "TAE";
				
				}

				
			    public String VSP;

				public String getVSP () {
					return this.VSP;
				}

				public Boolean VSPIsNullable(){
				    return true;
				}
				public Boolean VSPIsKey(){
				    return false;
				}
				public Integer VSPLength(){
				    return 1;
				}
				public Integer VSPPrecision(){
				    return 0;
				}
				public String VSPDefault(){
				
					return null;
				
				}
				public String VSPComment(){
				
				    return "Variaci\u00F3n del salario permanente (Nulo o 'X')";
				
				}
				public String VSPPattern(){
				
					return "";
				
				}
				public String VSPOriginalDbColumnName(){
				
					return "VSP";
				
				}

				
			    public String VST;

				public String getVST () {
					return this.VST;
				}

				public Boolean VSTIsNullable(){
				    return true;
				}
				public Boolean VSTIsKey(){
				    return false;
				}
				public Integer VSTLength(){
				    return 1;
				}
				public Integer VSTPrecision(){
				    return 0;
				}
				public String VSTDefault(){
				
					return null;
				
				}
				public String VSTComment(){
				
				    return "Variaci\u00F3n del salario transitoria (Nula o 'X\u00B4)";
				
				}
				public String VSTPattern(){
				
					return "";
				
				}
				public String VSTOriginalDbColumnName(){
				
					return "VST";
				
				}

				
			    public String SLN;

				public String getSLN () {
					return this.SLN;
				}

				public Boolean SLNIsNullable(){
				    return true;
				}
				public Boolean SLNIsKey(){
				    return false;
				}
				public Integer SLNLength(){
				    return 1;
				}
				public Integer SLNPrecision(){
				    return 0;
				}
				public String SLNDefault(){
				
					return null;
				
				}
				public String SLNComment(){
				
				    return "Suspensi\u00F3n temportal del contrato de trabajo o licencias no renumerables o comisi\u00F3n del servicio. (Nulo o 'X')";
				
				}
				public String SLNPattern(){
				
					return "";
				
				}
				public String SLNOriginalDbColumnName(){
				
					return "SLN";
				
				}

				
			    public String IGE;

				public String getIGE () {
					return this.IGE;
				}

				public Boolean IGEIsNullable(){
				    return true;
				}
				public Boolean IGEIsKey(){
				    return false;
				}
				public Integer IGELength(){
				    return 1;
				}
				public Integer IGEPrecision(){
				    return 0;
				}
				public String IGEDefault(){
				
					return null;
				
				}
				public String IGEComment(){
				
				    return "Incapacidad temporal por enfermedad general (Nula o 'X')";
				
				}
				public String IGEPattern(){
				
					return "";
				
				}
				public String IGEOriginalDbColumnName(){
				
					return "IGE";
				
				}

				
			    public String LMA;

				public String getLMA () {
					return this.LMA;
				}

				public Boolean LMAIsNullable(){
				    return true;
				}
				public Boolean LMAIsKey(){
				    return false;
				}
				public Integer LMALength(){
				    return 1;
				}
				public Integer LMAPrecision(){
				    return 0;
				}
				public String LMADefault(){
				
					return null;
				
				}
				public String LMAComment(){
				
				    return "Licencia de maternidad o de paternidad (Nula o 'X')";
				
				}
				public String LMAPattern(){
				
					return "";
				
				}
				public String LMAOriginalDbColumnName(){
				
					return "LMA";
				
				}

				
			    public String VAC;

				public String getVAC () {
					return this.VAC;
				}

				public Boolean VACIsNullable(){
				    return true;
				}
				public Boolean VACIsKey(){
				    return false;
				}
				public Integer VACLength(){
				    return 1;
				}
				public Integer VACPrecision(){
				    return 0;
				}
				public String VACDefault(){
				
					return null;
				
				}
				public String VACComment(){
				
				    return "Vacaciones (Nula o 'X')";
				
				}
				public String VACPattern(){
				
					return "";
				
				}
				public String VACOriginalDbColumnName(){
				
					return "VAC";
				
				}

				
			    public String DIASIRP;

				public String getDIASIRP () {
					return this.DIASIRP;
				}

				public Boolean DIASIRPIsNullable(){
				    return true;
				}
				public Boolean DIASIRPIsKey(){
				    return false;
				}
				public Integer DIASIRPLength(){
				    return 2;
				}
				public Integer DIASIRPPrecision(){
				    return 0;
				}
				public String DIASIRPDefault(){
				
					return null;
				
				}
				public String DIASIRPComment(){
				
				    return "N\u00FAmero de d\u00EDas de incapacidad por accidente de trabajo o enfermedad profesional. (01 - 30)";
				
				}
				public String DIASIRPPattern(){
				
					return "";
				
				}
				public String DIASIRPOriginalDbColumnName(){
				
					return "DIASIRP";
				
				}

				
			    public String DIASCOTSALUD;

				public String getDIASCOTSALUD () {
					return this.DIASCOTSALUD;
				}

				public Boolean DIASCOTSALUDIsNullable(){
				    return false;
				}
				public Boolean DIASCOTSALUDIsKey(){
				    return false;
				}
				public Integer DIASCOTSALUDLength(){
				    return 2;
				}
				public Integer DIASCOTSALUDPrecision(){
				    return 0;
				}
				public String DIASCOTSALUDDefault(){
				
					return null;
				
				}
				public String DIASCOTSALUDComment(){
				
				    return "N\u00FAmero de d\u00EDas cotizados a salud. (01 - 30)";
				
				}
				public String DIASCOTSALUDPattern(){
				
					return "";
				
				}
				public String DIASCOTSALUDOriginalDbColumnName(){
				
					return "DIASCOTSALUD";
				
				}

				
			    public String DIASCOTARP;

				public String getDIASCOTARP () {
					return this.DIASCOTARP;
				}

				public Boolean DIASCOTARPIsNullable(){
				    return true;
				}
				public Boolean DIASCOTARPIsKey(){
				    return false;
				}
				public Integer DIASCOTARPLength(){
				    return 2;
				}
				public Integer DIASCOTARPPrecision(){
				    return 0;
				}
				public String DIASCOTARPDefault(){
				
					return null;
				
				}
				public String DIASCOTARPComment(){
				
				    return "N\u00FAmero de d\u00EDas cotizados a riesgos profesionales (01 - 30)";
				
				}
				public String DIASCOTARPPattern(){
				
					return "";
				
				}
				public String DIASCOTARPOriginalDbColumnName(){
				
					return "DIASCOTARP";
				
				}

				
			    public String SLRBASICO;

				public String getSLRBASICO () {
					return this.SLRBASICO;
				}

				public Boolean SLRBASICOIsNullable(){
				    return false;
				}
				public Boolean SLRBASICOIsKey(){
				    return false;
				}
				public Integer SLRBASICOLength(){
				    return 9;
				}
				public Integer SLRBASICOPrecision(){
				    return 0;
				}
				public String SLRBASICODefault(){
				
					return null;
				
				}
				public String SLRBASICOComment(){
				
				    return "Salario b\u00E1sico (sin centavos)";
				
				}
				public String SLRBASICOPattern(){
				
					return "";
				
				}
				public String SLRBASICOOriginalDbColumnName(){
				
					return "SLRBASICO";
				
				}

				
			    public String SUBFAMILIAR;

				public String getSUBFAMILIAR () {
					return this.SUBFAMILIAR;
				}

				public Boolean SUBFAMILIARIsNullable(){
				    return false;
				}
				public Boolean SUBFAMILIARIsKey(){
				    return false;
				}
				public Integer SUBFAMILIARLength(){
				    return 9;
				}
				public Integer SUBFAMILIARPrecision(){
				    return 0;
				}
				public String SUBFAMILIARDefault(){
				
					return null;
				
				}
				public String SUBFAMILIARComment(){
				
				    return "Subsidio familiar ";
				
				}
				public String SUBFAMILIARPattern(){
				
					return "";
				
				}
				public String SUBFAMILIAROriginalDbColumnName(){
				
					return "SUBFAMILIAR";
				
				}

				
			    public String IBC;

				public String getIBC () {
					return this.IBC;
				}

				public Boolean IBCIsNullable(){
				    return false;
				}
				public Boolean IBCIsKey(){
				    return false;
				}
				public Integer IBCLength(){
				    return 9;
				}
				public Integer IBCPrecision(){
				    return 0;
				}
				public String IBCDefault(){
				
					return null;
				
				}
				public String IBCComment(){
				
				    return "Ingreso base cotizaci\u00F3n";
				
				}
				public String IBCPattern(){
				
					return "";
				
				}
				public String IBCOriginalDbColumnName(){
				
					return "IBC";
				
				}

				
			    public String TARIFA_APORTES_EMPLEADOR;

				public String getTARIFA_APORTES_EMPLEADOR () {
					return this.TARIFA_APORTES_EMPLEADOR;
				}

				public Boolean TARIFA_APORTES_EMPLEADORIsNullable(){
				    return false;
				}
				public Boolean TARIFA_APORTES_EMPLEADORIsKey(){
				    return false;
				}
				public Integer TARIFA_APORTES_EMPLEADORLength(){
				    return 7;
				}
				public Integer TARIFA_APORTES_EMPLEADORPrecision(){
				    return 0;
				}
				public String TARIFA_APORTES_EMPLEADORDefault(){
				
					return null;
				
				}
				public String TARIFA_APORTES_EMPLEADORComment(){
				
				    return "Tarifa de aportes del empleador de acuerdo a la normatividad vigente.";
				
				}
				public String TARIFA_APORTES_EMPLEADORPattern(){
				
					return "";
				
				}
				public String TARIFA_APORTES_EMPLEADOROriginalDbColumnName(){
				
					return "TARIFA_APORTES_EMPLEADOR";
				
				}

				
			    public String COTOBLIGATORIA_EMPLEADOR;

				public String getCOTOBLIGATORIA_EMPLEADOR () {
					return this.COTOBLIGATORIA_EMPLEADOR;
				}

				public Boolean COTOBLIGATORIA_EMPLEADORIsNullable(){
				    return false;
				}
				public Boolean COTOBLIGATORIA_EMPLEADORIsKey(){
				    return false;
				}
				public Integer COTOBLIGATORIA_EMPLEADORLength(){
				    return 9;
				}
				public Integer COTOBLIGATORIA_EMPLEADORPrecision(){
				    return 0;
				}
				public String COTOBLIGATORIA_EMPLEADORDefault(){
				
					return null;
				
				}
				public String COTOBLIGATORIA_EMPLEADORComment(){
				
				    return "Cotizaci\u00F3n obligatoria del empleador";
				
				}
				public String COTOBLIGATORIA_EMPLEADORPattern(){
				
					return "";
				
				}
				public String COTOBLIGATORIA_EMPLEADOROriginalDbColumnName(){
				
					return "COTOBLIGATORIA_EMPLEADOR";
				
				}

				
			    public String TARIFA_APORTES_EMPLEADO;

				public String getTARIFA_APORTES_EMPLEADO () {
					return this.TARIFA_APORTES_EMPLEADO;
				}

				public Boolean TARIFA_APORTES_EMPLEADOIsNullable(){
				    return false;
				}
				public Boolean TARIFA_APORTES_EMPLEADOIsKey(){
				    return false;
				}
				public Integer TARIFA_APORTES_EMPLEADOLength(){
				    return 7;
				}
				public Integer TARIFA_APORTES_EMPLEADOPrecision(){
				    return 0;
				}
				public String TARIFA_APORTES_EMPLEADODefault(){
				
					return null;
				
				}
				public String TARIFA_APORTES_EMPLEADOComment(){
				
				    return "Tarifa de aportes del empleado de acuerdo a la normatividad vigente.";
				
				}
				public String TARIFA_APORTES_EMPLEADOPattern(){
				
					return "";
				
				}
				public String TARIFA_APORTES_EMPLEADOOriginalDbColumnName(){
				
					return "TARIFA_APORTES_EMPLEADO";
				
				}

				
			    public String COTOBLIGATORIA_EMPLEADO;

				public String getCOTOBLIGATORIA_EMPLEADO () {
					return this.COTOBLIGATORIA_EMPLEADO;
				}

				public Boolean COTOBLIGATORIA_EMPLEADOIsNullable(){
				    return false;
				}
				public Boolean COTOBLIGATORIA_EMPLEADOIsKey(){
				    return false;
				}
				public Integer COTOBLIGATORIA_EMPLEADOLength(){
				    return 9;
				}
				public Integer COTOBLIGATORIA_EMPLEADOPrecision(){
				    return 0;
				}
				public String COTOBLIGATORIA_EMPLEADODefault(){
				
					return null;
				
				}
				public String COTOBLIGATORIA_EMPLEADOComment(){
				
				    return "Cotizaci\u00F3n obligatoria del empleado";
				
				}
				public String COTOBLIGATORIA_EMPLEADOPattern(){
				
					return "";
				
				}
				public String COTOBLIGATORIA_EMPLEADOOriginalDbColumnName(){
				
					return "COTOBLIGATORIA_EMPLEADO";
				
				}

				
			    public String TOTAL_APORTE;

				public String getTOTAL_APORTE () {
					return this.TOTAL_APORTE;
				}

				public Boolean TOTAL_APORTEIsNullable(){
				    return false;
				}
				public Boolean TOTAL_APORTEIsKey(){
				    return false;
				}
				public Integer TOTAL_APORTELength(){
				    return 9;
				}
				public Integer TOTAL_APORTEPrecision(){
				    return 0;
				}
				public String TOTAL_APORTEDefault(){
				
					return null;
				
				}
				public String TOTAL_APORTEComment(){
				
				    return "Total aporte cotizaci\u00F3n obligatoria con redondeo";
				
				}
				public String TOTAL_APORTEPattern(){
				
					return "";
				
				}
				public String TOTAL_APORTEOriginalDbColumnName(){
				
					return "TOTAL_APORTE";
				
				}

				
			    public String VINCAPACIDAD;

				public String getVINCAPACIDAD () {
					return this.VINCAPACIDAD;
				}

				public Boolean VINCAPACIDADIsNullable(){
				    return true;
				}
				public Boolean VINCAPACIDADIsKey(){
				    return false;
				}
				public Integer VINCAPACIDADLength(){
				    return 9;
				}
				public Integer VINCAPACIDADPrecision(){
				    return 0;
				}
				public String VINCAPACIDADDefault(){
				
					return null;
				
				}
				public String VINCAPACIDADComment(){
				
				    return "Valor de la incapacidad por enfermedad general";
				
				}
				public String VINCAPACIDADPattern(){
				
					return "";
				
				}
				public String VINCAPACIDADOriginalDbColumnName(){
				
					return "VINCAPACIDAD";
				
				}

				
			    public String VLICMATERNIDAD;

				public String getVLICMATERNIDAD () {
					return this.VLICMATERNIDAD;
				}

				public Boolean VLICMATERNIDADIsNullable(){
				    return true;
				}
				public Boolean VLICMATERNIDADIsKey(){
				    return false;
				}
				public Integer VLICMATERNIDADLength(){
				    return 9;
				}
				public Integer VLICMATERNIDADPrecision(){
				    return 0;
				}
				public String VLICMATERNIDADDefault(){
				
					return null;
				
				}
				public String VLICMATERNIDADComment(){
				
				    return "Valor de la licencia de maternidad";
				
				}
				public String VLICMATERNIDADPattern(){
				
					return "";
				
				}
				public String VLICMATERNIDADOriginalDbColumnName(){
				
					return "VLICMATERNIDAD";
				
				}

				
			    public String CODFUERZA;

				public String getCODFUERZA () {
					return this.CODFUERZA;
				}

				public Boolean CODFUERZAIsNullable(){
				    return true;
				}
				public Boolean CODFUERZAIsKey(){
				    return false;
				}
				public Integer CODFUERZALength(){
				    return 1;
				}
				public Integer CODFUERZAPrecision(){
				    return 0;
				}
				public String CODFUERZADefault(){
				
					return null;
				
				}
				public String CODFUERZAComment(){
				
				    return "C\u00F3digo de la fuerza militar";
				
				}
				public String CODFUERZAPattern(){
				
					return "";
				
				}
				public String CODFUERZAOriginalDbColumnName(){
				
					return "CODFUERZA";
				
				}

				
			    public String STVINCULACION;

				public String getSTVINCULACION () {
					return this.STVINCULACION;
				}

				public Boolean STVINCULACIONIsNullable(){
				    return true;
				}
				public Boolean STVINCULACIONIsKey(){
				    return false;
				}
				public Integer STVINCULACIONLength(){
				    return 2;
				}
				public Integer STVINCULACIONPrecision(){
				    return 0;
				}
				public String STVINCULACIONDefault(){
				
					return null;
				
				}
				public String STVINCULACIONComment(){
				
				    return "Sigla del tipo de vinculaci\u00F3n";
				
				}
				public String STVINCULACIONPattern(){
				
					return "";
				
				}
				public String STVINCULACIONOriginalDbColumnName(){
				
					return "STVINCULACION";
				
				}

				
			    public BigDecimal ARCHIVOS_ID;

				public BigDecimal getARCHIVOS_ID () {
					return this.ARCHIVOS_ID;
				}

				public Boolean ARCHIVOS_IDIsNullable(){
				    return false;
				}
				public Boolean ARCHIVOS_IDIsKey(){
				    return false;
				}
				public Integer ARCHIVOS_IDLength(){
				    return 0;
				}
				public Integer ARCHIVOS_IDPrecision(){
				    return null;
				}
				public String ARCHIVOS_IDDefault(){
				
					return null;
				
				}
				public String ARCHIVOS_IDComment(){
				
				    return "FK - AFI_ARCHIVOS";
				
				}
				public String ARCHIVOS_IDPattern(){
				
					return "";
				
				}
				public String ARCHIVOS_IDOriginalDbColumnName(){
				
					return "ARCHIVOS_ID";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_CARGUE_APORTES_CargarAportes.length) {
				if(length < 1024 && commonByteArray_AFI_CARGUE_APORTES_CargarAportes.length == 0) {
   					commonByteArray_AFI_CARGUE_APORTES_CargarAportes = new byte[1024];
				} else {
   					commonByteArray_AFI_CARGUE_APORTES_CargarAportes = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_CARGUE_APORTES_CargarAportes, 0, length);
			strReturn = new String(commonByteArray_AFI_CARGUE_APORTES_CargarAportes, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_CARGUE_APORTES_CargarAportes.length) {
				if(length < 1024 && commonByteArray_AFI_CARGUE_APORTES_CargarAportes.length == 0) {
   					commonByteArray_AFI_CARGUE_APORTES_CargarAportes = new byte[1024];
				} else {
   					commonByteArray_AFI_CARGUE_APORTES_CargarAportes = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_CARGUE_APORTES_CargarAportes, 0, length);
			strReturn = new String(commonByteArray_AFI_CARGUE_APORTES_CargarAportes, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_CARGUE_APORTES_CargarAportes) {

        	try {

        		int length = 0;
		
					this.SECUENCIA = readString(dis);
					
					this.TREGISTRO = readString(dis);
					
					this.TDOCUMENTO = readString(dis);
					
					this.DOCUMENTO = readString(dis);
					
					this.RESIDENTE = readString(dis);
					
					this.CODUMILITAR = readString(dis);
					
					this.CODGRDMILITAR = readString(dis);
					
					this.SGRDMILITAR = readString(dis);
					
					this.FINGRESO = readString(dis);
					
					this.PRIMER_APELLIDO = readString(dis);
					
					this.SEGUNDO_APELLIDO = readString(dis);
					
					this.PRIMER_NOMBRE = readString(dis);
					
					this.SEGUNDO_NOMBRE = readString(dis);
					
					this.INGRESO = readString(dis);
					
					this.RETIRO = readString(dis);
					
					this.TDE = readString(dis);
					
					this.TAE = readString(dis);
					
					this.VSP = readString(dis);
					
					this.VST = readString(dis);
					
					this.SLN = readString(dis);
					
					this.IGE = readString(dis);
					
					this.LMA = readString(dis);
					
					this.VAC = readString(dis);
					
					this.DIASIRP = readString(dis);
					
					this.DIASCOTSALUD = readString(dis);
					
					this.DIASCOTARP = readString(dis);
					
					this.SLRBASICO = readString(dis);
					
					this.SUBFAMILIAR = readString(dis);
					
					this.IBC = readString(dis);
					
					this.TARIFA_APORTES_EMPLEADOR = readString(dis);
					
					this.COTOBLIGATORIA_EMPLEADOR = readString(dis);
					
					this.TARIFA_APORTES_EMPLEADO = readString(dis);
					
					this.COTOBLIGATORIA_EMPLEADO = readString(dis);
					
					this.TOTAL_APORTE = readString(dis);
					
					this.VINCAPACIDAD = readString(dis);
					
					this.VLICMATERNIDAD = readString(dis);
					
					this.CODFUERZA = readString(dis);
					
					this.STVINCULACION = readString(dis);
					
						this.ARCHIVOS_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_CARGUE_APORTES_CargarAportes) {

        	try {

        		int length = 0;
		
					this.SECUENCIA = readString(dis);
					
					this.TREGISTRO = readString(dis);
					
					this.TDOCUMENTO = readString(dis);
					
					this.DOCUMENTO = readString(dis);
					
					this.RESIDENTE = readString(dis);
					
					this.CODUMILITAR = readString(dis);
					
					this.CODGRDMILITAR = readString(dis);
					
					this.SGRDMILITAR = readString(dis);
					
					this.FINGRESO = readString(dis);
					
					this.PRIMER_APELLIDO = readString(dis);
					
					this.SEGUNDO_APELLIDO = readString(dis);
					
					this.PRIMER_NOMBRE = readString(dis);
					
					this.SEGUNDO_NOMBRE = readString(dis);
					
					this.INGRESO = readString(dis);
					
					this.RETIRO = readString(dis);
					
					this.TDE = readString(dis);
					
					this.TAE = readString(dis);
					
					this.VSP = readString(dis);
					
					this.VST = readString(dis);
					
					this.SLN = readString(dis);
					
					this.IGE = readString(dis);
					
					this.LMA = readString(dis);
					
					this.VAC = readString(dis);
					
					this.DIASIRP = readString(dis);
					
					this.DIASCOTSALUD = readString(dis);
					
					this.DIASCOTARP = readString(dis);
					
					this.SLRBASICO = readString(dis);
					
					this.SUBFAMILIAR = readString(dis);
					
					this.IBC = readString(dis);
					
					this.TARIFA_APORTES_EMPLEADOR = readString(dis);
					
					this.COTOBLIGATORIA_EMPLEADOR = readString(dis);
					
					this.TARIFA_APORTES_EMPLEADO = readString(dis);
					
					this.COTOBLIGATORIA_EMPLEADO = readString(dis);
					
					this.TOTAL_APORTE = readString(dis);
					
					this.VINCAPACIDAD = readString(dis);
					
					this.VLICMATERNIDAD = readString(dis);
					
					this.CODFUERZA = readString(dis);
					
					this.STVINCULACION = readString(dis);
					
						this.ARCHIVOS_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.SECUENCIA,dos);
					
					// String
				
						writeString(this.TREGISTRO,dos);
					
					// String
				
						writeString(this.TDOCUMENTO,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// String
				
						writeString(this.RESIDENTE,dos);
					
					// String
				
						writeString(this.CODUMILITAR,dos);
					
					// String
				
						writeString(this.CODGRDMILITAR,dos);
					
					// String
				
						writeString(this.SGRDMILITAR,dos);
					
					// String
				
						writeString(this.FINGRESO,dos);
					
					// String
				
						writeString(this.PRIMER_APELLIDO,dos);
					
					// String
				
						writeString(this.SEGUNDO_APELLIDO,dos);
					
					// String
				
						writeString(this.PRIMER_NOMBRE,dos);
					
					// String
				
						writeString(this.SEGUNDO_NOMBRE,dos);
					
					// String
				
						writeString(this.INGRESO,dos);
					
					// String
				
						writeString(this.RETIRO,dos);
					
					// String
				
						writeString(this.TDE,dos);
					
					// String
				
						writeString(this.TAE,dos);
					
					// String
				
						writeString(this.VSP,dos);
					
					// String
				
						writeString(this.VST,dos);
					
					// String
				
						writeString(this.SLN,dos);
					
					// String
				
						writeString(this.IGE,dos);
					
					// String
				
						writeString(this.LMA,dos);
					
					// String
				
						writeString(this.VAC,dos);
					
					// String
				
						writeString(this.DIASIRP,dos);
					
					// String
				
						writeString(this.DIASCOTSALUD,dos);
					
					// String
				
						writeString(this.DIASCOTARP,dos);
					
					// String
				
						writeString(this.SLRBASICO,dos);
					
					// String
				
						writeString(this.SUBFAMILIAR,dos);
					
					// String
				
						writeString(this.IBC,dos);
					
					// String
				
						writeString(this.TARIFA_APORTES_EMPLEADOR,dos);
					
					// String
				
						writeString(this.COTOBLIGATORIA_EMPLEADOR,dos);
					
					// String
				
						writeString(this.TARIFA_APORTES_EMPLEADO,dos);
					
					// String
				
						writeString(this.COTOBLIGATORIA_EMPLEADO,dos);
					
					// String
				
						writeString(this.TOTAL_APORTE,dos);
					
					// String
				
						writeString(this.VINCAPACIDAD,dos);
					
					// String
				
						writeString(this.VLICMATERNIDAD,dos);
					
					// String
				
						writeString(this.CODFUERZA,dos);
					
					// String
				
						writeString(this.STVINCULACION,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ARCHIVOS_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.SECUENCIA,dos);
					
					// String
				
						writeString(this.TREGISTRO,dos);
					
					// String
				
						writeString(this.TDOCUMENTO,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// String
				
						writeString(this.RESIDENTE,dos);
					
					// String
				
						writeString(this.CODUMILITAR,dos);
					
					// String
				
						writeString(this.CODGRDMILITAR,dos);
					
					// String
				
						writeString(this.SGRDMILITAR,dos);
					
					// String
				
						writeString(this.FINGRESO,dos);
					
					// String
				
						writeString(this.PRIMER_APELLIDO,dos);
					
					// String
				
						writeString(this.SEGUNDO_APELLIDO,dos);
					
					// String
				
						writeString(this.PRIMER_NOMBRE,dos);
					
					// String
				
						writeString(this.SEGUNDO_NOMBRE,dos);
					
					// String
				
						writeString(this.INGRESO,dos);
					
					// String
				
						writeString(this.RETIRO,dos);
					
					// String
				
						writeString(this.TDE,dos);
					
					// String
				
						writeString(this.TAE,dos);
					
					// String
				
						writeString(this.VSP,dos);
					
					// String
				
						writeString(this.VST,dos);
					
					// String
				
						writeString(this.SLN,dos);
					
					// String
				
						writeString(this.IGE,dos);
					
					// String
				
						writeString(this.LMA,dos);
					
					// String
				
						writeString(this.VAC,dos);
					
					// String
				
						writeString(this.DIASIRP,dos);
					
					// String
				
						writeString(this.DIASCOTSALUD,dos);
					
					// String
				
						writeString(this.DIASCOTARP,dos);
					
					// String
				
						writeString(this.SLRBASICO,dos);
					
					// String
				
						writeString(this.SUBFAMILIAR,dos);
					
					// String
				
						writeString(this.IBC,dos);
					
					// String
				
						writeString(this.TARIFA_APORTES_EMPLEADOR,dos);
					
					// String
				
						writeString(this.COTOBLIGATORIA_EMPLEADOR,dos);
					
					// String
				
						writeString(this.TARIFA_APORTES_EMPLEADO,dos);
					
					// String
				
						writeString(this.COTOBLIGATORIA_EMPLEADO,dos);
					
					// String
				
						writeString(this.TOTAL_APORTE,dos);
					
					// String
				
						writeString(this.VINCAPACIDAD,dos);
					
					// String
				
						writeString(this.VLICMATERNIDAD,dos);
					
					// String
				
						writeString(this.CODFUERZA,dos);
					
					// String
				
						writeString(this.STVINCULACION,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ARCHIVOS_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("SECUENCIA="+SECUENCIA);
		sb.append(",TREGISTRO="+TREGISTRO);
		sb.append(",TDOCUMENTO="+TDOCUMENTO);
		sb.append(",DOCUMENTO="+DOCUMENTO);
		sb.append(",RESIDENTE="+RESIDENTE);
		sb.append(",CODUMILITAR="+CODUMILITAR);
		sb.append(",CODGRDMILITAR="+CODGRDMILITAR);
		sb.append(",SGRDMILITAR="+SGRDMILITAR);
		sb.append(",FINGRESO="+FINGRESO);
		sb.append(",PRIMER_APELLIDO="+PRIMER_APELLIDO);
		sb.append(",SEGUNDO_APELLIDO="+SEGUNDO_APELLIDO);
		sb.append(",PRIMER_NOMBRE="+PRIMER_NOMBRE);
		sb.append(",SEGUNDO_NOMBRE="+SEGUNDO_NOMBRE);
		sb.append(",INGRESO="+INGRESO);
		sb.append(",RETIRO="+RETIRO);
		sb.append(",TDE="+TDE);
		sb.append(",TAE="+TAE);
		sb.append(",VSP="+VSP);
		sb.append(",VST="+VST);
		sb.append(",SLN="+SLN);
		sb.append(",IGE="+IGE);
		sb.append(",LMA="+LMA);
		sb.append(",VAC="+VAC);
		sb.append(",DIASIRP="+DIASIRP);
		sb.append(",DIASCOTSALUD="+DIASCOTSALUD);
		sb.append(",DIASCOTARP="+DIASCOTARP);
		sb.append(",SLRBASICO="+SLRBASICO);
		sb.append(",SUBFAMILIAR="+SUBFAMILIAR);
		sb.append(",IBC="+IBC);
		sb.append(",TARIFA_APORTES_EMPLEADOR="+TARIFA_APORTES_EMPLEADOR);
		sb.append(",COTOBLIGATORIA_EMPLEADOR="+COTOBLIGATORIA_EMPLEADOR);
		sb.append(",TARIFA_APORTES_EMPLEADO="+TARIFA_APORTES_EMPLEADO);
		sb.append(",COTOBLIGATORIA_EMPLEADO="+COTOBLIGATORIA_EMPLEADO);
		sb.append(",TOTAL_APORTE="+TOTAL_APORTE);
		sb.append(",VINCAPACIDAD="+VINCAPACIDAD);
		sb.append(",VLICMATERNIDAD="+VLICMATERNIDAD);
		sb.append(",CODFUERZA="+CODFUERZA);
		sb.append(",STVINCULACION="+STVINCULACION);
		sb.append(",ARCHIVOS_ID="+String.valueOf(ARCHIVOS_ID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row5Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row3Struct implements routines.system.IPersistableRow<row3Struct> {
    final static byte[] commonByteArrayLock_AFI_CARGUE_APORTES_CargarAportes = new byte[0];
    static byte[] commonByteArray_AFI_CARGUE_APORTES_CargarAportes = new byte[0];

	
			    public String fila;

				public String getFila () {
					return this.fila;
				}

				public Boolean filaIsNullable(){
				    return true;
				}
				public Boolean filaIsKey(){
				    return false;
				}
				public Integer filaLength(){
				    return null;
				}
				public Integer filaPrecision(){
				    return null;
				}
				public String filaDefault(){
				
					return null;
				
				}
				public String filaComment(){
				
				    return "";
				
				}
				public String filaPattern(){
				
					return "";
				
				}
				public String filaOriginalDbColumnName(){
				
					return "fila";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_CARGUE_APORTES_CargarAportes.length) {
				if(length < 1024 && commonByteArray_AFI_CARGUE_APORTES_CargarAportes.length == 0) {
   					commonByteArray_AFI_CARGUE_APORTES_CargarAportes = new byte[1024];
				} else {
   					commonByteArray_AFI_CARGUE_APORTES_CargarAportes = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_CARGUE_APORTES_CargarAportes, 0, length);
			strReturn = new String(commonByteArray_AFI_CARGUE_APORTES_CargarAportes, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_CARGUE_APORTES_CargarAportes.length) {
				if(length < 1024 && commonByteArray_AFI_CARGUE_APORTES_CargarAportes.length == 0) {
   					commonByteArray_AFI_CARGUE_APORTES_CargarAportes = new byte[1024];
				} else {
   					commonByteArray_AFI_CARGUE_APORTES_CargarAportes = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_CARGUE_APORTES_CargarAportes, 0, length);
			strReturn = new String(commonByteArray_AFI_CARGUE_APORTES_CargarAportes, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_CARGUE_APORTES_CargarAportes) {

        	try {

        		int length = 0;
		
					this.fila = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_CARGUE_APORTES_CargarAportes) {

        	try {

        		int length = 0;
		
					this.fila = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.fila,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.fila,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("fila="+fila);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row3Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tFileInputDelimited_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row3Struct row3 = new row3Struct();
row5Struct row5 = new row5Struct();
row8Struct row8 = new row8Struct();






	
	/**
	 * [tOracleOutput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleOutput_1", false);
		start_Hash.put("tOracleOutput_1", System.currentTimeMillis());
		
	
	currentComponent="tOracleOutput_1";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row8");
					}
				
		int tos_count_tOracleOutput_1 = 0;
		






    
    int nb_line_tOracleOutput_1 = 0;
    int nb_line_update_tOracleOutput_1 = 0;
    int nb_line_inserted_tOracleOutput_1 = 0;
    int nb_line_deleted_tOracleOutput_1 = 0;
    int nb_line_rejected_tOracleOutput_1 = 0;

    int tmp_batchUpdateCount_tOracleOutput_1 = 0;

    int deletedCount_tOracleOutput_1=0;
    int updatedCount_tOracleOutput_1=0;
    int insertedCount_tOracleOutput_1=0;
    int rowsToCommitCount_tOracleOutput_1=0;
    int rejectedCount_tOracleOutput_1=0;

    boolean whetherReject_tOracleOutput_1 = false;

    java.sql.Connection conn_tOracleOutput_1 = null;

    //optional table
    String dbschema_tOracleOutput_1 = null;
    String tableName_tOracleOutput_1 = null;
                    String driverClass_tOracleOutput_1 = "oracle.jdbc.OracleDriver";


                java.lang.Class.forName(driverClass_tOracleOutput_1);
                String url_tOracleOutput_1 = null;
                    url_tOracleOutput_1 = "jdbc:oracle:thin:@(description=(address=(protocol=tcp)(host=" + context.Host + ")(port=" + context.Port + "))(connect_data=(service_name=" + context.Sid + ")))";
                String dbUser_tOracleOutput_1 = context.User;

	final String decryptedPassword_tOracleOutput_1 = context.Password; 

                String dbPwd_tOracleOutput_1 = decryptedPassword_tOracleOutput_1;
                dbschema_tOracleOutput_1 = context.User;


                    conn_tOracleOutput_1 = java.sql.DriverManager.getConnection(url_tOracleOutput_1, dbUser_tOracleOutput_1, dbPwd_tOracleOutput_1);
        resourceMap.put("conn_tOracleOutput_1", conn_tOracleOutput_1);
            conn_tOracleOutput_1.setAutoCommit(false);
            int commitEvery_tOracleOutput_1 = 10000;
            int commitCounter_tOracleOutput_1 = 0;
        int batchSize_tOracleOutput_1 = 10000;
        int batchSizeCounter_tOracleOutput_1=0;
        int count_tOracleOutput_1=0;

        if(dbschema_tOracleOutput_1 == null || dbschema_tOracleOutput_1.trim().length() == 0) {
            tableName_tOracleOutput_1 = ("REC_REGTIPO2");
        } else {
            tableName_tOracleOutput_1 = dbschema_tOracleOutput_1 + "." + ("REC_REGTIPO2");
        }
                String insert_tOracleOutput_1 = "INSERT INTO " + tableName_tOracleOutput_1 + " (SECUENCIA,TREGISTRO,TDOCUMENTO,DOCUMENTO,RESIDENTE,CODUMILITAR,CODGRDMILITAR,SGRDMILITAR,FINGRESO,PRIMER_APELLIDO,SEGUNDO_APELLIDO,PRIMER_NOMBRE,SEGUNDO_NOMBRE,INGRESO,RETIRO,TDE,TAE,VSP,VST,SLN,IGE,LMA,VAC,DIASIRP,DIASCOTSALUD,DIASCOTARP,SLRBASICO,SUBFAMILIAR,IBC,TARIFA_APORTES_EMPLEADOR,COTOBLIGATORIA_EMPLEADOR,TARIFA_APORTES_EMPLEADO,COTOBLIGATORIA_EMPLEADO,TOTAL_APORTE,VINCAPACIDAD,VLICMATERNIDAD,CODFUERZA,STVINCULACION,ARCHIVOS_ID) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";    

                        java.sql.PreparedStatement pstmt_tOracleOutput_1 = conn_tOracleOutput_1.prepareStatement(insert_tOracleOutput_1);
                        resourceMap.put("pstmt_tOracleOutput_1", pstmt_tOracleOutput_1);





 



/**
 * [tOracleOutput_1 begin ] stop
 */



	
	/**
	 * [tJavaRow_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaRow_5", false);
		start_Hash.put("tJavaRow_5", System.currentTimeMillis());
		
	
	currentComponent="tJavaRow_5";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row5");
					}
				
		int tos_count_tJavaRow_5 = 0;
		

int nb_line_tJavaRow_5 = 0;

 



/**
 * [tJavaRow_5 begin ] stop
 */



	
	/**
	 * [tExtractPositionalFields_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tExtractPositionalFields_1", false);
		start_Hash.put("tExtractPositionalFields_1", System.currentTimeMillis());
		
	
	currentComponent="tExtractPositionalFields_1";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row3");
					}
				
		int tos_count_tExtractPositionalFields_1 = 0;
		

int nb_line_tExtractPositionalFields_1=0;
	String pattern_tExtractPositionalFields_1 = "6,1,1,12,1,11,7,5,10,20,20,20,20,1,1,1,1,1,1,1,1,1,1,2,2,2,9,9,9,7,9,7,9,9,9,9,1,2";
	String[] ptnSplit_tExtractPositionalFields_1 = pattern_tExtractPositionalFields_1.split(",");
	int[] sizes_tExtractPositionalFields_1 = new int[ptnSplit_tExtractPositionalFields_1.length];
	for(int i_tExtractPositionalFields_1=0;i_tExtractPositionalFields_1<ptnSplit_tExtractPositionalFields_1.length;i_tExtractPositionalFields_1++){
		if(("*").equals(ptnSplit_tExtractPositionalFields_1[i_tExtractPositionalFields_1])){
			 sizes_tExtractPositionalFields_1[i_tExtractPositionalFields_1]=-1;
	 	}else{
	 		 sizes_tExtractPositionalFields_1[i_tExtractPositionalFields_1]=Integer.valueOf(ptnSplit_tExtractPositionalFields_1[i_tExtractPositionalFields_1]);
	 	}
	}
int[] indexs_tExtractPositionalFields_1 = new int[sizes_tExtractPositionalFields_1.length];
for(int i_tExtractPositionalFields_1=0;i_tExtractPositionalFields_1<indexs_tExtractPositionalFields_1.length;i_tExtractPositionalFields_1++){
	if(sizes_tExtractPositionalFields_1[i_tExtractPositionalFields_1]==-1){
		indexs_tExtractPositionalFields_1[i_tExtractPositionalFields_1]=-1;
	}else{
		if(i_tExtractPositionalFields_1-1>=0){
			indexs_tExtractPositionalFields_1[i_tExtractPositionalFields_1]= indexs_tExtractPositionalFields_1[i_tExtractPositionalFields_1-1]+sizes_tExtractPositionalFields_1[i_tExtractPositionalFields_1];
		}else{
			indexs_tExtractPositionalFields_1[i_tExtractPositionalFields_1]= sizes_tExtractPositionalFields_1[i_tExtractPositionalFields_1];
		}
	}
}

 



/**
 * [tExtractPositionalFields_1 begin ] stop
 */



	
	/**
	 * [tFileInputDelimited_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputDelimited_1", false);
		start_Hash.put("tFileInputDelimited_1", System.currentTimeMillis());
		
	
	currentComponent="tFileInputDelimited_1";
	
	
		int tos_count_tFileInputDelimited_1 = 0;
		
	
	
	
 
	
	
	final routines.system.RowState rowstate_tFileInputDelimited_1 = new routines.system.RowState();
	
	
				int nb_line_tFileInputDelimited_1 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_1 = null;
				int limit_tFileInputDelimited_1 = -1;
				try{
					
						Object filename_tFileInputDelimited_1 = (java.io.InputStream)context.Contenido;
						if(filename_tFileInputDelimited_1 instanceof java.io.InputStream){
							
			int footer_value_tFileInputDelimited_1 = 0, random_value_tFileInputDelimited_1 = -1;
			if(footer_value_tFileInputDelimited_1 >0 || random_value_tFileInputDelimited_1 > 0){
				throw new java.lang.Exception("When the input source is a stream,footer and random shouldn't be bigger than 0.");				
			}
		
						}
						try {
							fid_tFileInputDelimited_1 = new org.talend.fileprocess.FileInputDelimited((java.io.InputStream)context.Contenido, "ISO-8859-15",";@?*#","\n",true,0,0,
									limit_tFileInputDelimited_1
								,-1, false);
						} catch(java.lang.Exception e) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",e.getMessage());
							
								
								System.err.println(e.getMessage());
							
						}
					
				    
					while (fid_tFileInputDelimited_1!=null && fid_tFileInputDelimited_1.nextRecord()) {
						rowstate_tFileInputDelimited_1.reset();
						
			    						row3 = null;			
												
									boolean whetherReject_tFileInputDelimited_1 = false;
									row3 = new row3Struct();
									try {
										
				int columnIndexWithD_tFileInputDelimited_1 = 0;
				
					columnIndexWithD_tFileInputDelimited_1 = 0;
					
							row3.fila = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
				
										
										if(rowstate_tFileInputDelimited_1.getException()!=null) {
											throw rowstate_tFileInputDelimited_1.getException();
										}
										
										
							
			    					} catch (java.lang.Exception e) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",e.getMessage());
			        					whetherReject_tFileInputDelimited_1 = true;
			        					
			                					System.err.println(e.getMessage());
			                					row3 = null;
			                				
										
			    					}
								

 



/**
 * [tFileInputDelimited_1 begin ] stop
 */
	
	/**
	 * [tFileInputDelimited_1 main ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_1";
	
	

 


	tos_count_tFileInputDelimited_1++;

/**
 * [tFileInputDelimited_1 main ] stop
 */
	
	/**
	 * [tFileInputDelimited_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_1";
	
	

 



/**
 * [tFileInputDelimited_1 process_data_begin ] stop
 */
// Start of branch "row3"
if(row3 != null) { 



	
	/**
	 * [tExtractPositionalFields_1 main ] start
	 */

	

	
	
	currentComponent="tExtractPositionalFields_1";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row3"
						
						);
					}
					


row5 = null;
	//String field_tExtractPositionalFields_1 = row3.fila.trim();
	String field_tExtractPositionalFields_1 = row3.fila;
	if(field_tExtractPositionalFields_1!=null){// C_01
try{
	row5 = new row5Struct();
	java.util.Map<String,String> newFields_tExtractPositionalFields_1 = new java.util.HashMap<String,String>();
	newFields_tExtractPositionalFields_1.put("SECUENCIA", field_tExtractPositionalFields_1.substring(0,
		indexs_tExtractPositionalFields_1[0]>field_tExtractPositionalFields_1.length()||indexs_tExtractPositionalFields_1[0]<0?field_tExtractPositionalFields_1.length():indexs_tExtractPositionalFields_1[0]).trim());
	if(1<indexs_tExtractPositionalFields_1.length && indexs_tExtractPositionalFields_1[0]>=0 && indexs_tExtractPositionalFields_1[0]<= field_tExtractPositionalFields_1.length()){
    	newFields_tExtractPositionalFields_1.put("TREGISTRO",field_tExtractPositionalFields_1.substring(indexs_tExtractPositionalFields_1[0],
     		indexs_tExtractPositionalFields_1[1]>field_tExtractPositionalFields_1.length()||indexs_tExtractPositionalFields_1[1]<0?field_tExtractPositionalFields_1.length():indexs_tExtractPositionalFields_1[1]).trim());
 	}
	if(2<indexs_tExtractPositionalFields_1.length && indexs_tExtractPositionalFields_1[1]>=0 && indexs_tExtractPositionalFields_1[1]<= field_tExtractPositionalFields_1.length()){
    	newFields_tExtractPositionalFields_1.put("TDOCUMENTO",field_tExtractPositionalFields_1.substring(indexs_tExtractPositionalFields_1[1],
     		indexs_tExtractPositionalFields_1[2]>field_tExtractPositionalFields_1.length()||indexs_tExtractPositionalFields_1[2]<0?field_tExtractPositionalFields_1.length():indexs_tExtractPositionalFields_1[2]).trim());
 	}
	if(3<indexs_tExtractPositionalFields_1.length && indexs_tExtractPositionalFields_1[2]>=0 && indexs_tExtractPositionalFields_1[2]<= field_tExtractPositionalFields_1.length()){
    	newFields_tExtractPositionalFields_1.put("DOCUMENTO",field_tExtractPositionalFields_1.substring(indexs_tExtractPositionalFields_1[2],
     		indexs_tExtractPositionalFields_1[3]>field_tExtractPositionalFields_1.length()||indexs_tExtractPositionalFields_1[3]<0?field_tExtractPositionalFields_1.length():indexs_tExtractPositionalFields_1[3]).trim());
 	}
	if(4<indexs_tExtractPositionalFields_1.length && indexs_tExtractPositionalFields_1[3]>=0 && indexs_tExtractPositionalFields_1[3]<= field_tExtractPositionalFields_1.length()){
    	newFields_tExtractPositionalFields_1.put("RESIDENTE",field_tExtractPositionalFields_1.substring(indexs_tExtractPositionalFields_1[3],
     		indexs_tExtractPositionalFields_1[4]>field_tExtractPositionalFields_1.length()||indexs_tExtractPositionalFields_1[4]<0?field_tExtractPositionalFields_1.length():indexs_tExtractPositionalFields_1[4]).trim());
 	}
	if(5<indexs_tExtractPositionalFields_1.length && indexs_tExtractPositionalFields_1[4]>=0 && indexs_tExtractPositionalFields_1[4]<= field_tExtractPositionalFields_1.length()){
    	newFields_tExtractPositionalFields_1.put("CODUMILITAR",field_tExtractPositionalFields_1.substring(indexs_tExtractPositionalFields_1[4],
     		indexs_tExtractPositionalFields_1[5]>field_tExtractPositionalFields_1.length()||indexs_tExtractPositionalFields_1[5]<0?field_tExtractPositionalFields_1.length():indexs_tExtractPositionalFields_1[5]).trim());
 	}
	if(6<indexs_tExtractPositionalFields_1.length && indexs_tExtractPositionalFields_1[5]>=0 && indexs_tExtractPositionalFields_1[5]<= field_tExtractPositionalFields_1.length()){
    	newFields_tExtractPositionalFields_1.put("CODGRDMILITAR",field_tExtractPositionalFields_1.substring(indexs_tExtractPositionalFields_1[5],
     		indexs_tExtractPositionalFields_1[6]>field_tExtractPositionalFields_1.length()||indexs_tExtractPositionalFields_1[6]<0?field_tExtractPositionalFields_1.length():indexs_tExtractPositionalFields_1[6]).trim());
 	}
	if(7<indexs_tExtractPositionalFields_1.length && indexs_tExtractPositionalFields_1[6]>=0 && indexs_tExtractPositionalFields_1[6]<= field_tExtractPositionalFields_1.length()){
    	newFields_tExtractPositionalFields_1.put("SGRDMILITAR",field_tExtractPositionalFields_1.substring(indexs_tExtractPositionalFields_1[6],
     		indexs_tExtractPositionalFields_1[7]>field_tExtractPositionalFields_1.length()||indexs_tExtractPositionalFields_1[7]<0?field_tExtractPositionalFields_1.length():indexs_tExtractPositionalFields_1[7]).trim());
 	}
	if(8<indexs_tExtractPositionalFields_1.length && indexs_tExtractPositionalFields_1[7]>=0 && indexs_tExtractPositionalFields_1[7]<= field_tExtractPositionalFields_1.length()){
    	newFields_tExtractPositionalFields_1.put("FINGRESO",field_tExtractPositionalFields_1.substring(indexs_tExtractPositionalFields_1[7],
     		indexs_tExtractPositionalFields_1[8]>field_tExtractPositionalFields_1.length()||indexs_tExtractPositionalFields_1[8]<0?field_tExtractPositionalFields_1.length():indexs_tExtractPositionalFields_1[8]).trim());
 	}
	if(9<indexs_tExtractPositionalFields_1.length && indexs_tExtractPositionalFields_1[8]>=0 && indexs_tExtractPositionalFields_1[8]<= field_tExtractPositionalFields_1.length()){
    	newFields_tExtractPositionalFields_1.put("PRIMER_APELLIDO",field_tExtractPositionalFields_1.substring(indexs_tExtractPositionalFields_1[8],
     		indexs_tExtractPositionalFields_1[9]>field_tExtractPositionalFields_1.length()||indexs_tExtractPositionalFields_1[9]<0?field_tExtractPositionalFields_1.length():indexs_tExtractPositionalFields_1[9]).trim());
 	}
	if(10<indexs_tExtractPositionalFields_1.length && indexs_tExtractPositionalFields_1[9]>=0 && indexs_tExtractPositionalFields_1[9]<= field_tExtractPositionalFields_1.length()){
    	newFields_tExtractPositionalFields_1.put("SEGUNDO_APELLIDO",field_tExtractPositionalFields_1.substring(indexs_tExtractPositionalFields_1[9],
     		indexs_tExtractPositionalFields_1[10]>field_tExtractPositionalFields_1.length()||indexs_tExtractPositionalFields_1[10]<0?field_tExtractPositionalFields_1.length():indexs_tExtractPositionalFields_1[10]).trim());
 	}
	if(11<indexs_tExtractPositionalFields_1.length && indexs_tExtractPositionalFields_1[10]>=0 && indexs_tExtractPositionalFields_1[10]<= field_tExtractPositionalFields_1.length()){
    	newFields_tExtractPositionalFields_1.put("PRIMER_NOMBRE",field_tExtractPositionalFields_1.substring(indexs_tExtractPositionalFields_1[10],
     		indexs_tExtractPositionalFields_1[11]>field_tExtractPositionalFields_1.length()||indexs_tExtractPositionalFields_1[11]<0?field_tExtractPositionalFields_1.length():indexs_tExtractPositionalFields_1[11]).trim());
 	}
	if(12<indexs_tExtractPositionalFields_1.length && indexs_tExtractPositionalFields_1[11]>=0 && indexs_tExtractPositionalFields_1[11]<= field_tExtractPositionalFields_1.length()){
    	newFields_tExtractPositionalFields_1.put("SEGUNDO_NOMBRE",field_tExtractPositionalFields_1.substring(indexs_tExtractPositionalFields_1[11],
     		indexs_tExtractPositionalFields_1[12]>field_tExtractPositionalFields_1.length()||indexs_tExtractPositionalFields_1[12]<0?field_tExtractPositionalFields_1.length():indexs_tExtractPositionalFields_1[12]).trim());
 	}
	if(13<indexs_tExtractPositionalFields_1.length && indexs_tExtractPositionalFields_1[12]>=0 && indexs_tExtractPositionalFields_1[12]<= field_tExtractPositionalFields_1.length()){
    	newFields_tExtractPositionalFields_1.put("INGRESO",field_tExtractPositionalFields_1.substring(indexs_tExtractPositionalFields_1[12],
     		indexs_tExtractPositionalFields_1[13]>field_tExtractPositionalFields_1.length()||indexs_tExtractPositionalFields_1[13]<0?field_tExtractPositionalFields_1.length():indexs_tExtractPositionalFields_1[13]).trim());
 	}
	if(14<indexs_tExtractPositionalFields_1.length && indexs_tExtractPositionalFields_1[13]>=0 && indexs_tExtractPositionalFields_1[13]<= field_tExtractPositionalFields_1.length()){
    	newFields_tExtractPositionalFields_1.put("RETIRO",field_tExtractPositionalFields_1.substring(indexs_tExtractPositionalFields_1[13],
     		indexs_tExtractPositionalFields_1[14]>field_tExtractPositionalFields_1.length()||indexs_tExtractPositionalFields_1[14]<0?field_tExtractPositionalFields_1.length():indexs_tExtractPositionalFields_1[14]).trim());
 	}
	if(15<indexs_tExtractPositionalFields_1.length && indexs_tExtractPositionalFields_1[14]>=0 && indexs_tExtractPositionalFields_1[14]<= field_tExtractPositionalFields_1.length()){
    	newFields_tExtractPositionalFields_1.put("TDE",field_tExtractPositionalFields_1.substring(indexs_tExtractPositionalFields_1[14],
     		indexs_tExtractPositionalFields_1[15]>field_tExtractPositionalFields_1.length()||indexs_tExtractPositionalFields_1[15]<0?field_tExtractPositionalFields_1.length():indexs_tExtractPositionalFields_1[15]).trim());
 	}
	if(16<indexs_tExtractPositionalFields_1.length && indexs_tExtractPositionalFields_1[15]>=0 && indexs_tExtractPositionalFields_1[15]<= field_tExtractPositionalFields_1.length()){
    	newFields_tExtractPositionalFields_1.put("TAE",field_tExtractPositionalFields_1.substring(indexs_tExtractPositionalFields_1[15],
     		indexs_tExtractPositionalFields_1[16]>field_tExtractPositionalFields_1.length()||indexs_tExtractPositionalFields_1[16]<0?field_tExtractPositionalFields_1.length():indexs_tExtractPositionalFields_1[16]).trim());
 	}
	if(17<indexs_tExtractPositionalFields_1.length && indexs_tExtractPositionalFields_1[16]>=0 && indexs_tExtractPositionalFields_1[16]<= field_tExtractPositionalFields_1.length()){
    	newFields_tExtractPositionalFields_1.put("VSP",field_tExtractPositionalFields_1.substring(indexs_tExtractPositionalFields_1[16],
     		indexs_tExtractPositionalFields_1[17]>field_tExtractPositionalFields_1.length()||indexs_tExtractPositionalFields_1[17]<0?field_tExtractPositionalFields_1.length():indexs_tExtractPositionalFields_1[17]).trim());
 	}
	if(18<indexs_tExtractPositionalFields_1.length && indexs_tExtractPositionalFields_1[17]>=0 && indexs_tExtractPositionalFields_1[17]<= field_tExtractPositionalFields_1.length()){
    	newFields_tExtractPositionalFields_1.put("VST",field_tExtractPositionalFields_1.substring(indexs_tExtractPositionalFields_1[17],
     		indexs_tExtractPositionalFields_1[18]>field_tExtractPositionalFields_1.length()||indexs_tExtractPositionalFields_1[18]<0?field_tExtractPositionalFields_1.length():indexs_tExtractPositionalFields_1[18]).trim());
 	}
	if(19<indexs_tExtractPositionalFields_1.length && indexs_tExtractPositionalFields_1[18]>=0 && indexs_tExtractPositionalFields_1[18]<= field_tExtractPositionalFields_1.length()){
    	newFields_tExtractPositionalFields_1.put("SLN",field_tExtractPositionalFields_1.substring(indexs_tExtractPositionalFields_1[18],
     		indexs_tExtractPositionalFields_1[19]>field_tExtractPositionalFields_1.length()||indexs_tExtractPositionalFields_1[19]<0?field_tExtractPositionalFields_1.length():indexs_tExtractPositionalFields_1[19]).trim());
 	}
	if(20<indexs_tExtractPositionalFields_1.length && indexs_tExtractPositionalFields_1[19]>=0 && indexs_tExtractPositionalFields_1[19]<= field_tExtractPositionalFields_1.length()){
    	newFields_tExtractPositionalFields_1.put("IGE",field_tExtractPositionalFields_1.substring(indexs_tExtractPositionalFields_1[19],
     		indexs_tExtractPositionalFields_1[20]>field_tExtractPositionalFields_1.length()||indexs_tExtractPositionalFields_1[20]<0?field_tExtractPositionalFields_1.length():indexs_tExtractPositionalFields_1[20]).trim());
 	}
	if(21<indexs_tExtractPositionalFields_1.length && indexs_tExtractPositionalFields_1[20]>=0 && indexs_tExtractPositionalFields_1[20]<= field_tExtractPositionalFields_1.length()){
    	newFields_tExtractPositionalFields_1.put("LMA",field_tExtractPositionalFields_1.substring(indexs_tExtractPositionalFields_1[20],
     		indexs_tExtractPositionalFields_1[21]>field_tExtractPositionalFields_1.length()||indexs_tExtractPositionalFields_1[21]<0?field_tExtractPositionalFields_1.length():indexs_tExtractPositionalFields_1[21]).trim());
 	}
	if(22<indexs_tExtractPositionalFields_1.length && indexs_tExtractPositionalFields_1[21]>=0 && indexs_tExtractPositionalFields_1[21]<= field_tExtractPositionalFields_1.length()){
    	newFields_tExtractPositionalFields_1.put("VAC",field_tExtractPositionalFields_1.substring(indexs_tExtractPositionalFields_1[21],
     		indexs_tExtractPositionalFields_1[22]>field_tExtractPositionalFields_1.length()||indexs_tExtractPositionalFields_1[22]<0?field_tExtractPositionalFields_1.length():indexs_tExtractPositionalFields_1[22]).trim());
 	}
	if(23<indexs_tExtractPositionalFields_1.length && indexs_tExtractPositionalFields_1[22]>=0 && indexs_tExtractPositionalFields_1[22]<= field_tExtractPositionalFields_1.length()){
    	newFields_tExtractPositionalFields_1.put("DIASIRP",field_tExtractPositionalFields_1.substring(indexs_tExtractPositionalFields_1[22],
     		indexs_tExtractPositionalFields_1[23]>field_tExtractPositionalFields_1.length()||indexs_tExtractPositionalFields_1[23]<0?field_tExtractPositionalFields_1.length():indexs_tExtractPositionalFields_1[23]).trim());
 	}
	if(24<indexs_tExtractPositionalFields_1.length && indexs_tExtractPositionalFields_1[23]>=0 && indexs_tExtractPositionalFields_1[23]<= field_tExtractPositionalFields_1.length()){
    	newFields_tExtractPositionalFields_1.put("DIASCOTSALUD",field_tExtractPositionalFields_1.substring(indexs_tExtractPositionalFields_1[23],
     		indexs_tExtractPositionalFields_1[24]>field_tExtractPositionalFields_1.length()||indexs_tExtractPositionalFields_1[24]<0?field_tExtractPositionalFields_1.length():indexs_tExtractPositionalFields_1[24]).trim());
 	}
	if(25<indexs_tExtractPositionalFields_1.length && indexs_tExtractPositionalFields_1[24]>=0 && indexs_tExtractPositionalFields_1[24]<= field_tExtractPositionalFields_1.length()){
    	newFields_tExtractPositionalFields_1.put("DIASCOTARP",field_tExtractPositionalFields_1.substring(indexs_tExtractPositionalFields_1[24],
     		indexs_tExtractPositionalFields_1[25]>field_tExtractPositionalFields_1.length()||indexs_tExtractPositionalFields_1[25]<0?field_tExtractPositionalFields_1.length():indexs_tExtractPositionalFields_1[25]).trim());
 	}
	if(26<indexs_tExtractPositionalFields_1.length && indexs_tExtractPositionalFields_1[25]>=0 && indexs_tExtractPositionalFields_1[25]<= field_tExtractPositionalFields_1.length()){
    	newFields_tExtractPositionalFields_1.put("SLRBASICO",field_tExtractPositionalFields_1.substring(indexs_tExtractPositionalFields_1[25],
     		indexs_tExtractPositionalFields_1[26]>field_tExtractPositionalFields_1.length()||indexs_tExtractPositionalFields_1[26]<0?field_tExtractPositionalFields_1.length():indexs_tExtractPositionalFields_1[26]).trim());
 	}
	if(27<indexs_tExtractPositionalFields_1.length && indexs_tExtractPositionalFields_1[26]>=0 && indexs_tExtractPositionalFields_1[26]<= field_tExtractPositionalFields_1.length()){
    	newFields_tExtractPositionalFields_1.put("SUBFAMILIAR",field_tExtractPositionalFields_1.substring(indexs_tExtractPositionalFields_1[26],
     		indexs_tExtractPositionalFields_1[27]>field_tExtractPositionalFields_1.length()||indexs_tExtractPositionalFields_1[27]<0?field_tExtractPositionalFields_1.length():indexs_tExtractPositionalFields_1[27]).trim());
 	}
	if(28<indexs_tExtractPositionalFields_1.length && indexs_tExtractPositionalFields_1[27]>=0 && indexs_tExtractPositionalFields_1[27]<= field_tExtractPositionalFields_1.length()){
    	newFields_tExtractPositionalFields_1.put("IBC",field_tExtractPositionalFields_1.substring(indexs_tExtractPositionalFields_1[27],
     		indexs_tExtractPositionalFields_1[28]>field_tExtractPositionalFields_1.length()||indexs_tExtractPositionalFields_1[28]<0?field_tExtractPositionalFields_1.length():indexs_tExtractPositionalFields_1[28]).trim());
 	}
	if(29<indexs_tExtractPositionalFields_1.length && indexs_tExtractPositionalFields_1[28]>=0 && indexs_tExtractPositionalFields_1[28]<= field_tExtractPositionalFields_1.length()){
    	newFields_tExtractPositionalFields_1.put("TARIFA_APORTES_EMPLEADOR",field_tExtractPositionalFields_1.substring(indexs_tExtractPositionalFields_1[28],
     		indexs_tExtractPositionalFields_1[29]>field_tExtractPositionalFields_1.length()||indexs_tExtractPositionalFields_1[29]<0?field_tExtractPositionalFields_1.length():indexs_tExtractPositionalFields_1[29]).trim());
 	}
	if(30<indexs_tExtractPositionalFields_1.length && indexs_tExtractPositionalFields_1[29]>=0 && indexs_tExtractPositionalFields_1[29]<= field_tExtractPositionalFields_1.length()){
    	newFields_tExtractPositionalFields_1.put("COTOBLIGATORIA_EMPLEADOR",field_tExtractPositionalFields_1.substring(indexs_tExtractPositionalFields_1[29],
     		indexs_tExtractPositionalFields_1[30]>field_tExtractPositionalFields_1.length()||indexs_tExtractPositionalFields_1[30]<0?field_tExtractPositionalFields_1.length():indexs_tExtractPositionalFields_1[30]).trim());
 	}
	if(31<indexs_tExtractPositionalFields_1.length && indexs_tExtractPositionalFields_1[30]>=0 && indexs_tExtractPositionalFields_1[30]<= field_tExtractPositionalFields_1.length()){
    	newFields_tExtractPositionalFields_1.put("TARIFA_APORTES_EMPLEADO",field_tExtractPositionalFields_1.substring(indexs_tExtractPositionalFields_1[30],
     		indexs_tExtractPositionalFields_1[31]>field_tExtractPositionalFields_1.length()||indexs_tExtractPositionalFields_1[31]<0?field_tExtractPositionalFields_1.length():indexs_tExtractPositionalFields_1[31]).trim());
 	}
	if(32<indexs_tExtractPositionalFields_1.length && indexs_tExtractPositionalFields_1[31]>=0 && indexs_tExtractPositionalFields_1[31]<= field_tExtractPositionalFields_1.length()){
    	newFields_tExtractPositionalFields_1.put("COTOBLIGATORIA_EMPLEADO",field_tExtractPositionalFields_1.substring(indexs_tExtractPositionalFields_1[31],
     		indexs_tExtractPositionalFields_1[32]>field_tExtractPositionalFields_1.length()||indexs_tExtractPositionalFields_1[32]<0?field_tExtractPositionalFields_1.length():indexs_tExtractPositionalFields_1[32]).trim());
 	}
	if(33<indexs_tExtractPositionalFields_1.length && indexs_tExtractPositionalFields_1[32]>=0 && indexs_tExtractPositionalFields_1[32]<= field_tExtractPositionalFields_1.length()){
    	newFields_tExtractPositionalFields_1.put("TOTAL_APORTE",field_tExtractPositionalFields_1.substring(indexs_tExtractPositionalFields_1[32],
     		indexs_tExtractPositionalFields_1[33]>field_tExtractPositionalFields_1.length()||indexs_tExtractPositionalFields_1[33]<0?field_tExtractPositionalFields_1.length():indexs_tExtractPositionalFields_1[33]).trim());
 	}
	if(34<indexs_tExtractPositionalFields_1.length && indexs_tExtractPositionalFields_1[33]>=0 && indexs_tExtractPositionalFields_1[33]<= field_tExtractPositionalFields_1.length()){
    	newFields_tExtractPositionalFields_1.put("VINCAPACIDAD",field_tExtractPositionalFields_1.substring(indexs_tExtractPositionalFields_1[33],
     		indexs_tExtractPositionalFields_1[34]>field_tExtractPositionalFields_1.length()||indexs_tExtractPositionalFields_1[34]<0?field_tExtractPositionalFields_1.length():indexs_tExtractPositionalFields_1[34]).trim());
 	}
	if(35<indexs_tExtractPositionalFields_1.length && indexs_tExtractPositionalFields_1[34]>=0 && indexs_tExtractPositionalFields_1[34]<= field_tExtractPositionalFields_1.length()){
    	newFields_tExtractPositionalFields_1.put("VLICMATERNIDAD",field_tExtractPositionalFields_1.substring(indexs_tExtractPositionalFields_1[34],
     		indexs_tExtractPositionalFields_1[35]>field_tExtractPositionalFields_1.length()||indexs_tExtractPositionalFields_1[35]<0?field_tExtractPositionalFields_1.length():indexs_tExtractPositionalFields_1[35]).trim());
 	}
	if(36<indexs_tExtractPositionalFields_1.length && indexs_tExtractPositionalFields_1[35]>=0 && indexs_tExtractPositionalFields_1[35]<= field_tExtractPositionalFields_1.length()){
    	newFields_tExtractPositionalFields_1.put("CODFUERZA",field_tExtractPositionalFields_1.substring(indexs_tExtractPositionalFields_1[35],
     		indexs_tExtractPositionalFields_1[36]>field_tExtractPositionalFields_1.length()||indexs_tExtractPositionalFields_1[36]<0?field_tExtractPositionalFields_1.length():indexs_tExtractPositionalFields_1[36]).trim());
 	}
	if(37<indexs_tExtractPositionalFields_1.length && indexs_tExtractPositionalFields_1[36]>=0 && indexs_tExtractPositionalFields_1[36]<= field_tExtractPositionalFields_1.length()){
    	newFields_tExtractPositionalFields_1.put("STVINCULACION",field_tExtractPositionalFields_1.substring(indexs_tExtractPositionalFields_1[36],
     		indexs_tExtractPositionalFields_1[37]>field_tExtractPositionalFields_1.length()||indexs_tExtractPositionalFields_1[37]<0?field_tExtractPositionalFields_1.length():indexs_tExtractPositionalFields_1[37]).trim());
 	}
	if(38<indexs_tExtractPositionalFields_1.length && indexs_tExtractPositionalFields_1[37]>=0 && indexs_tExtractPositionalFields_1[37]<= field_tExtractPositionalFields_1.length()){
    	newFields_tExtractPositionalFields_1.put("ARCHIVOS_ID",field_tExtractPositionalFields_1.substring(indexs_tExtractPositionalFields_1[37],
     		indexs_tExtractPositionalFields_1[38]>field_tExtractPositionalFields_1.length()||indexs_tExtractPositionalFields_1[38]<0?field_tExtractPositionalFields_1.length():indexs_tExtractPositionalFields_1[38]).trim());
 	}
	String temp_tExtractPositionalFields_1 = null;
	row5.SECUENCIA = newFields_tExtractPositionalFields_1.get("SECUENCIA");
	row5.TREGISTRO = newFields_tExtractPositionalFields_1.get("TREGISTRO");
	row5.TDOCUMENTO = newFields_tExtractPositionalFields_1.get("TDOCUMENTO");
	row5.DOCUMENTO = newFields_tExtractPositionalFields_1.get("DOCUMENTO");
	row5.RESIDENTE = newFields_tExtractPositionalFields_1.get("RESIDENTE");
	row5.CODUMILITAR = newFields_tExtractPositionalFields_1.get("CODUMILITAR");
	row5.CODGRDMILITAR = newFields_tExtractPositionalFields_1.get("CODGRDMILITAR");
	row5.SGRDMILITAR = newFields_tExtractPositionalFields_1.get("SGRDMILITAR");
	row5.FINGRESO = newFields_tExtractPositionalFields_1.get("FINGRESO");
	row5.PRIMER_APELLIDO = newFields_tExtractPositionalFields_1.get("PRIMER_APELLIDO");
	row5.SEGUNDO_APELLIDO = newFields_tExtractPositionalFields_1.get("SEGUNDO_APELLIDO");
	row5.PRIMER_NOMBRE = newFields_tExtractPositionalFields_1.get("PRIMER_NOMBRE");
	row5.SEGUNDO_NOMBRE = newFields_tExtractPositionalFields_1.get("SEGUNDO_NOMBRE");
	row5.INGRESO = newFields_tExtractPositionalFields_1.get("INGRESO");
	row5.RETIRO = newFields_tExtractPositionalFields_1.get("RETIRO");
	row5.TDE = newFields_tExtractPositionalFields_1.get("TDE");
	row5.TAE = newFields_tExtractPositionalFields_1.get("TAE");
	row5.VSP = newFields_tExtractPositionalFields_1.get("VSP");
	row5.VST = newFields_tExtractPositionalFields_1.get("VST");
	row5.SLN = newFields_tExtractPositionalFields_1.get("SLN");
	row5.IGE = newFields_tExtractPositionalFields_1.get("IGE");
	row5.LMA = newFields_tExtractPositionalFields_1.get("LMA");
	row5.VAC = newFields_tExtractPositionalFields_1.get("VAC");
	row5.DIASIRP = newFields_tExtractPositionalFields_1.get("DIASIRP");
	row5.DIASCOTSALUD = newFields_tExtractPositionalFields_1.get("DIASCOTSALUD");
	row5.DIASCOTARP = newFields_tExtractPositionalFields_1.get("DIASCOTARP");
	row5.SLRBASICO = newFields_tExtractPositionalFields_1.get("SLRBASICO");
	row5.SUBFAMILIAR = newFields_tExtractPositionalFields_1.get("SUBFAMILIAR");
	row5.IBC = newFields_tExtractPositionalFields_1.get("IBC");
	row5.TARIFA_APORTES_EMPLEADOR = newFields_tExtractPositionalFields_1.get("TARIFA_APORTES_EMPLEADOR");
	row5.COTOBLIGATORIA_EMPLEADOR = newFields_tExtractPositionalFields_1.get("COTOBLIGATORIA_EMPLEADOR");
	row5.TARIFA_APORTES_EMPLEADO = newFields_tExtractPositionalFields_1.get("TARIFA_APORTES_EMPLEADO");
	row5.COTOBLIGATORIA_EMPLEADO = newFields_tExtractPositionalFields_1.get("COTOBLIGATORIA_EMPLEADO");
	row5.TOTAL_APORTE = newFields_tExtractPositionalFields_1.get("TOTAL_APORTE");
	row5.VINCAPACIDAD = newFields_tExtractPositionalFields_1.get("VINCAPACIDAD");
	row5.VLICMATERNIDAD = newFields_tExtractPositionalFields_1.get("VLICMATERNIDAD");
	row5.CODFUERZA = newFields_tExtractPositionalFields_1.get("CODFUERZA");
	row5.STVINCULACION = newFields_tExtractPositionalFields_1.get("STVINCULACION");
	temp_tExtractPositionalFields_1 = newFields_tExtractPositionalFields_1.get("ARCHIVOS_ID");
	if(temp_tExtractPositionalFields_1!=null && temp_tExtractPositionalFields_1.length() > 0) {
		row5.ARCHIVOS_ID = ParserUtils.parseTo_BigDecimal(temp_tExtractPositionalFields_1);
	} else {						
		row5.ARCHIVOS_ID = null;
	}
	nb_line_tExtractPositionalFields_1++;
}catch(java.lang.Exception ex_tExtractPositionalFields_1){
globalMap.put("tExtractPositionalFields_1_ERROR_MESSAGE",ex_tExtractPositionalFields_1.getMessage());
    System.err.println(ex_tExtractPositionalFields_1.getMessage());
    row5 = null;
}

 


	tos_count_tExtractPositionalFields_1++;

/**
 * [tExtractPositionalFields_1 main ] stop
 */
	
	/**
	 * [tExtractPositionalFields_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tExtractPositionalFields_1";
	
	

 



/**
 * [tExtractPositionalFields_1 process_data_begin ] stop
 */
// Start of branch "row5"
if(row5 != null) { 



	
	/**
	 * [tJavaRow_5 main ] start
	 */

	

	
	
	currentComponent="tJavaRow_5";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row5"
						
						);
					}
					

    //Code generate according to input schema and output schema
row8.SECUENCIA = row5.SECUENCIA;
row8.TREGISTRO = row5.TREGISTRO;
row8.TDOCUMENTO = row5.TDOCUMENTO;
row8.DOCUMENTO = row5.DOCUMENTO.replaceAll("^0+(?!$)", "");
row8.RESIDENTE = row5.RESIDENTE;
row8.CODUMILITAR = row5.CODUMILITAR;
row8.CODGRDMILITAR = row5.CODGRDMILITAR;
row8.SGRDMILITAR = row5.SGRDMILITAR;
row8.FINGRESO = row5.FINGRESO;
row8.PRIMER_APELLIDO = row5.PRIMER_APELLIDO;
row8.SEGUNDO_APELLIDO = row5.SEGUNDO_APELLIDO;
row8.PRIMER_NOMBRE = row5.PRIMER_NOMBRE;
row8.SEGUNDO_NOMBRE = row5.SEGUNDO_NOMBRE;
row8.INGRESO = row5.INGRESO;
row8.RETIRO = row5.RETIRO;
row8.TDE = row5.TDE;
row8.TAE = row5.TAE;
row8.VSP = row5.VSP;
row8.VST = row5.VST;
row8.SLN = row5.SLN;
row8.IGE = row5.IGE;
row8.LMA = row5.LMA;
row8.VAC = row5.VAC;
row8.DIASIRP = row5.DIASIRP;
row8.DIASCOTSALUD = row5.DIASCOTSALUD;
row8.DIASCOTARP = row5.DIASCOTARP;
row8.SLRBASICO = row5.SLRBASICO;
row8.SUBFAMILIAR = row5.SUBFAMILIAR;
row8.IBC = row5.IBC;
row8.TARIFA_APORTES_EMPLEADOR = row5.TARIFA_APORTES_EMPLEADOR;
row8.COTOBLIGATORIA_EMPLEADOR = row5.COTOBLIGATORIA_EMPLEADOR;
row8.TARIFA_APORTES_EMPLEADO = row5.TARIFA_APORTES_EMPLEADO;
row8.COTOBLIGATORIA_EMPLEADO = row5.COTOBLIGATORIA_EMPLEADO;
row8.TOTAL_APORTE = row5.TOTAL_APORTE;
row8.VINCAPACIDAD = row5.VINCAPACIDAD;
row8.VLICMATERNIDAD = row5.VLICMATERNIDAD;
row8.CODFUERZA = row5.CODFUERZA;
row8.STVINCULACION = row5.STVINCULACION;
row8.ARCHIVOS_ID = context.ARCHIVOS_ID;
    nb_line_tJavaRow_5++;   

 


	tos_count_tJavaRow_5++;

/**
 * [tJavaRow_5 main ] stop
 */
	
	/**
	 * [tJavaRow_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJavaRow_5";
	
	

 



/**
 * [tJavaRow_5 process_data_begin ] stop
 */

	
	/**
	 * [tOracleOutput_1 main ] start
	 */

	

	
	
	currentComponent="tOracleOutput_1";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row8"
						
						);
					}
					



        whetherReject_tOracleOutput_1 = false;
                        if(row8.SECUENCIA == null) {
pstmt_tOracleOutput_1.setNull(1, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_1.setString(1, row8.SECUENCIA);
}

                        if(row8.TREGISTRO == null) {
pstmt_tOracleOutput_1.setNull(2, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_1.setString(2, row8.TREGISTRO);
}

                        if(row8.TDOCUMENTO == null) {
pstmt_tOracleOutput_1.setNull(3, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_1.setString(3, row8.TDOCUMENTO);
}

                        if(row8.DOCUMENTO == null) {
pstmt_tOracleOutput_1.setNull(4, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_1.setString(4, row8.DOCUMENTO);
}

                        if(row8.RESIDENTE == null) {
pstmt_tOracleOutput_1.setNull(5, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_1.setString(5, row8.RESIDENTE);
}

                        if(row8.CODUMILITAR == null) {
pstmt_tOracleOutput_1.setNull(6, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_1.setString(6, row8.CODUMILITAR);
}

                        if(row8.CODGRDMILITAR == null) {
pstmt_tOracleOutput_1.setNull(7, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_1.setString(7, row8.CODGRDMILITAR);
}

                        if(row8.SGRDMILITAR == null) {
pstmt_tOracleOutput_1.setNull(8, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_1.setString(8, row8.SGRDMILITAR);
}

                        if(row8.FINGRESO == null) {
pstmt_tOracleOutput_1.setNull(9, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_1.setString(9, row8.FINGRESO);
}

                        if(row8.PRIMER_APELLIDO == null) {
pstmt_tOracleOutput_1.setNull(10, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_1.setString(10, row8.PRIMER_APELLIDO);
}

                        if(row8.SEGUNDO_APELLIDO == null) {
pstmt_tOracleOutput_1.setNull(11, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_1.setString(11, row8.SEGUNDO_APELLIDO);
}

                        if(row8.PRIMER_NOMBRE == null) {
pstmt_tOracleOutput_1.setNull(12, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_1.setString(12, row8.PRIMER_NOMBRE);
}

                        if(row8.SEGUNDO_NOMBRE == null) {
pstmt_tOracleOutput_1.setNull(13, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_1.setString(13, row8.SEGUNDO_NOMBRE);
}

                        if(row8.INGRESO == null) {
pstmt_tOracleOutput_1.setNull(14, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_1.setString(14, row8.INGRESO);
}

                        if(row8.RETIRO == null) {
pstmt_tOracleOutput_1.setNull(15, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_1.setString(15, row8.RETIRO);
}

                        if(row8.TDE == null) {
pstmt_tOracleOutput_1.setNull(16, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_1.setString(16, row8.TDE);
}

                        if(row8.TAE == null) {
pstmt_tOracleOutput_1.setNull(17, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_1.setString(17, row8.TAE);
}

                        if(row8.VSP == null) {
pstmt_tOracleOutput_1.setNull(18, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_1.setString(18, row8.VSP);
}

                        if(row8.VST == null) {
pstmt_tOracleOutput_1.setNull(19, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_1.setString(19, row8.VST);
}

                        if(row8.SLN == null) {
pstmt_tOracleOutput_1.setNull(20, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_1.setString(20, row8.SLN);
}

                        if(row8.IGE == null) {
pstmt_tOracleOutput_1.setNull(21, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_1.setString(21, row8.IGE);
}

                        if(row8.LMA == null) {
pstmt_tOracleOutput_1.setNull(22, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_1.setString(22, row8.LMA);
}

                        if(row8.VAC == null) {
pstmt_tOracleOutput_1.setNull(23, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_1.setString(23, row8.VAC);
}

                        if(row8.DIASIRP == null) {
pstmt_tOracleOutput_1.setNull(24, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_1.setString(24, row8.DIASIRP);
}

                        if(row8.DIASCOTSALUD == null) {
pstmt_tOracleOutput_1.setNull(25, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_1.setString(25, row8.DIASCOTSALUD);
}

                        if(row8.DIASCOTARP == null) {
pstmt_tOracleOutput_1.setNull(26, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_1.setString(26, row8.DIASCOTARP);
}

                        if(row8.SLRBASICO == null) {
pstmt_tOracleOutput_1.setNull(27, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_1.setString(27, row8.SLRBASICO);
}

                        if(row8.SUBFAMILIAR == null) {
pstmt_tOracleOutput_1.setNull(28, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_1.setString(28, row8.SUBFAMILIAR);
}

                        if(row8.IBC == null) {
pstmt_tOracleOutput_1.setNull(29, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_1.setString(29, row8.IBC);
}

                        if(row8.TARIFA_APORTES_EMPLEADOR == null) {
pstmt_tOracleOutput_1.setNull(30, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_1.setString(30, row8.TARIFA_APORTES_EMPLEADOR);
}

                        if(row8.COTOBLIGATORIA_EMPLEADOR == null) {
pstmt_tOracleOutput_1.setNull(31, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_1.setString(31, row8.COTOBLIGATORIA_EMPLEADOR);
}

                        if(row8.TARIFA_APORTES_EMPLEADO == null) {
pstmt_tOracleOutput_1.setNull(32, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_1.setString(32, row8.TARIFA_APORTES_EMPLEADO);
}

                        if(row8.COTOBLIGATORIA_EMPLEADO == null) {
pstmt_tOracleOutput_1.setNull(33, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_1.setString(33, row8.COTOBLIGATORIA_EMPLEADO);
}

                        if(row8.TOTAL_APORTE == null) {
pstmt_tOracleOutput_1.setNull(34, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_1.setString(34, row8.TOTAL_APORTE);
}

                        if(row8.VINCAPACIDAD == null) {
pstmt_tOracleOutput_1.setNull(35, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_1.setString(35, row8.VINCAPACIDAD);
}

                        if(row8.VLICMATERNIDAD == null) {
pstmt_tOracleOutput_1.setNull(36, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_1.setString(36, row8.VLICMATERNIDAD);
}

                        if(row8.CODFUERZA == null) {
pstmt_tOracleOutput_1.setNull(37, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_1.setString(37, row8.CODFUERZA);
}

                        if(row8.STVINCULACION == null) {
pstmt_tOracleOutput_1.setNull(38, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_1.setString(38, row8.STVINCULACION);
}

                        pstmt_tOracleOutput_1.setBigDecimal(39, row8.ARCHIVOS_ID);

                pstmt_tOracleOutput_1.addBatch();
                nb_line_tOracleOutput_1++;
                batchSizeCounter_tOracleOutput_1++;
            if (batchSize_tOracleOutput_1 > 0 &&  batchSize_tOracleOutput_1 <= batchSizeCounter_tOracleOutput_1) {
                try {
                    pstmt_tOracleOutput_1.executeBatch();
                }catch (java.sql.BatchUpdateException e_tOracleOutput_1){
globalMap.put("tOracleOutput_1_ERROR_MESSAGE",e_tOracleOutput_1.getMessage());
			        java.sql.SQLException ne_tOracleOutput_1 = e_tOracleOutput_1.getNextException(),sqle_tOracleOutput_1=null;
			    	String errormessage_tOracleOutput_1;
					if (ne_tOracleOutput_1 != null) {
						// build new exception to provide the original cause
						sqle_tOracleOutput_1 = new java.sql.SQLException(e_tOracleOutput_1.getMessage() + "\ncaused by: " + ne_tOracleOutput_1.getMessage(), ne_tOracleOutput_1.getSQLState(), ne_tOracleOutput_1.getErrorCode(), ne_tOracleOutput_1);
						errormessage_tOracleOutput_1 = sqle_tOracleOutput_1.getMessage();
					}else{
						errormessage_tOracleOutput_1 = e_tOracleOutput_1.getMessage();
					}
	            	
	                	System.err.println(errormessage_tOracleOutput_1);
	            	
	        	}
                tmp_batchUpdateCount_tOracleOutput_1 = pstmt_tOracleOutput_1.getUpdateCount();
                    insertedCount_tOracleOutput_1
                += (tmp_batchUpdateCount_tOracleOutput_1!=-1?tmp_batchUpdateCount_tOracleOutput_1:0);
                rowsToCommitCount_tOracleOutput_1 += (tmp_batchUpdateCount_tOracleOutput_1!=-1?tmp_batchUpdateCount_tOracleOutput_1:0);
                batchSizeCounter_tOracleOutput_1 = 0;
            }
                commitCounter_tOracleOutput_1++;
                if(commitEvery_tOracleOutput_1 <= commitCounter_tOracleOutput_1) {
                    if(batchSizeCounter_tOracleOutput_1 > 0) {
                        try {
                            pstmt_tOracleOutput_1.executeBatch();
                        }catch (java.sql.BatchUpdateException e_tOracleOutput_1){
globalMap.put("tOracleOutput_1_ERROR_MESSAGE",e_tOracleOutput_1.getMessage());
					        java.sql.SQLException ne_tOracleOutput_1 = e_tOracleOutput_1.getNextException(),sqle_tOracleOutput_1=null;
					    	String errormessage_tOracleOutput_1;
							if (ne_tOracleOutput_1 != null) {
								// build new exception to provide the original cause
								sqle_tOracleOutput_1 = new java.sql.SQLException(e_tOracleOutput_1.getMessage() + "\ncaused by: " + ne_tOracleOutput_1.getMessage(), ne_tOracleOutput_1.getSQLState(), ne_tOracleOutput_1.getErrorCode(), ne_tOracleOutput_1);
								errormessage_tOracleOutput_1 = sqle_tOracleOutput_1.getMessage();
							}else{
								errormessage_tOracleOutput_1 = e_tOracleOutput_1.getMessage();
							}
			            	
			                	System.err.println(errormessage_tOracleOutput_1);
			            	
			        	}
                        tmp_batchUpdateCount_tOracleOutput_1 = pstmt_tOracleOutput_1.getUpdateCount();
                            insertedCount_tOracleOutput_1
                        += (tmp_batchUpdateCount_tOracleOutput_1!=-1?tmp_batchUpdateCount_tOracleOutput_1:0);
                        rowsToCommitCount_tOracleOutput_1 += (tmp_batchUpdateCount_tOracleOutput_1!=-1?tmp_batchUpdateCount_tOracleOutput_1:0);
                    }
                    if(rowsToCommitCount_tOracleOutput_1 != 0){
                    	
                    }
                    conn_tOracleOutput_1.commit();
                    if(rowsToCommitCount_tOracleOutput_1 != 0){
                    	
                    	rowsToCommitCount_tOracleOutput_1 = 0;
                    }
                    commitCounter_tOracleOutput_1=0;
                    	batchSizeCounter_tOracleOutput_1=0;
                }

 


	tos_count_tOracleOutput_1++;

/**
 * [tOracleOutput_1 main ] stop
 */
	
	/**
	 * [tOracleOutput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleOutput_1";
	
	

 



/**
 * [tOracleOutput_1 process_data_begin ] stop
 */
	
	/**
	 * [tOracleOutput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_1";
	
	

 



/**
 * [tOracleOutput_1 process_data_end ] stop
 */



	
	/**
	 * [tJavaRow_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tJavaRow_5";
	
	

 



/**
 * [tJavaRow_5 process_data_end ] stop
 */

} // End of branch "row5"



	
		} // C_01
	
	
	/**
	 * [tExtractPositionalFields_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tExtractPositionalFields_1";
	
	

 



/**
 * [tExtractPositionalFields_1 process_data_end ] stop
 */

} // End of branch "row3"




	
	/**
	 * [tFileInputDelimited_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_1";
	
	

 



/**
 * [tFileInputDelimited_1 process_data_end ] stop
 */
	
	/**
	 * [tFileInputDelimited_1 end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_1";
	
	



            }
            }finally{
                if(!((Object)((java.io.InputStream)context.Contenido) instanceof java.io.InputStream)){
                	if(fid_tFileInputDelimited_1!=null){
                		fid_tFileInputDelimited_1.close();
                	}
                }
                if(fid_tFileInputDelimited_1!=null){
                	globalMap.put("tFileInputDelimited_1_NB_LINE", fid_tFileInputDelimited_1.getRowNumber());
					
                }
			}
			  

 

ok_Hash.put("tFileInputDelimited_1", true);
end_Hash.put("tFileInputDelimited_1", System.currentTimeMillis());




/**
 * [tFileInputDelimited_1 end ] stop
 */

	
	/**
	 * [tExtractPositionalFields_1 end ] start
	 */

	

	
	
	currentComponent="tExtractPositionalFields_1";
	
	


globalMap.put("tExtractPositionalFields_1_NB_LINE",nb_line_tExtractPositionalFields_1);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row3");
			  	}
			  	
 

ok_Hash.put("tExtractPositionalFields_1", true);
end_Hash.put("tExtractPositionalFields_1", System.currentTimeMillis());




/**
 * [tExtractPositionalFields_1 end ] stop
 */

	
	/**
	 * [tJavaRow_5 end ] start
	 */

	

	
	
	currentComponent="tJavaRow_5";
	
	

globalMap.put("tJavaRow_5_NB_LINE",nb_line_tJavaRow_5);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row5");
			  	}
			  	
 

ok_Hash.put("tJavaRow_5", true);
end_Hash.put("tJavaRow_5", System.currentTimeMillis());




/**
 * [tJavaRow_5 end ] stop
 */

	
	/**
	 * [tOracleOutput_1 end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_1";
	
	
	



	
        if(batchSizeCounter_tOracleOutput_1 > 0) {
            try {
            	if (pstmt_tOracleOutput_1 != null) {
					
					pstmt_tOracleOutput_1.executeBatch();
					
        	    }
            }catch (java.sql.BatchUpdateException e_tOracleOutput_1){
globalMap.put("tOracleOutput_1_ERROR_MESSAGE",e_tOracleOutput_1.getMessage());
		        java.sql.SQLException ne_tOracleOutput_1 = e_tOracleOutput_1.getNextException(),sqle_tOracleOutput_1=null;
		    	String errormessage_tOracleOutput_1;
				if (ne_tOracleOutput_1 != null) {
					// build new exception to provide the original cause
					sqle_tOracleOutput_1 = new java.sql.SQLException(e_tOracleOutput_1.getMessage() + "\ncaused by: " + ne_tOracleOutput_1.getMessage(), ne_tOracleOutput_1.getSQLState(), ne_tOracleOutput_1.getErrorCode(), ne_tOracleOutput_1);
					errormessage_tOracleOutput_1 = sqle_tOracleOutput_1.getMessage();
				}else{
					errormessage_tOracleOutput_1 = e_tOracleOutput_1.getMessage();
				}
            	
                	System.err.println(errormessage_tOracleOutput_1);
            	
        	}
        	if (pstmt_tOracleOutput_1 != null) {
            	tmp_batchUpdateCount_tOracleOutput_1 = pstmt_tOracleOutput_1.getUpdateCount();
    	    	
    	    		insertedCount_tOracleOutput_1
    	    	
    	    	+= (tmp_batchUpdateCount_tOracleOutput_1!=-1?tmp_batchUpdateCount_tOracleOutput_1:0);
				rowsToCommitCount_tOracleOutput_1 += (tmp_batchUpdateCount_tOracleOutput_1!=-1?tmp_batchUpdateCount_tOracleOutput_1:0);
            }
        }
        if(pstmt_tOracleOutput_1 != null) {
			
				pstmt_tOracleOutput_1.close();
				resourceMap.remove("pstmt_tOracleOutput_1");
			
        }
    resourceMap.put("statementClosed_tOracleOutput_1", true);
		if(commitCounter_tOracleOutput_1 > 0 && rowsToCommitCount_tOracleOutput_1 != 0) {
			
		}
		conn_tOracleOutput_1.commit();
		if(commitCounter_tOracleOutput_1 > 0 && rowsToCommitCount_tOracleOutput_1 != 0) {
			
			rowsToCommitCount_tOracleOutput_1 = 0;
		}
		commitCounter_tOracleOutput_1 = 0;
		
		
		conn_tOracleOutput_1 .close();
		
		resourceMap.put("finish_tOracleOutput_1", true);
   	

	
	nb_line_deleted_tOracleOutput_1=nb_line_deleted_tOracleOutput_1+ deletedCount_tOracleOutput_1;
	nb_line_update_tOracleOutput_1=nb_line_update_tOracleOutput_1 + updatedCount_tOracleOutput_1;
	nb_line_inserted_tOracleOutput_1=nb_line_inserted_tOracleOutput_1 + insertedCount_tOracleOutput_1;
	nb_line_rejected_tOracleOutput_1=nb_line_rejected_tOracleOutput_1 + rejectedCount_tOracleOutput_1;
	
        globalMap.put("tOracleOutput_1_NB_LINE",nb_line_tOracleOutput_1);
        globalMap.put("tOracleOutput_1_NB_LINE_UPDATED",nb_line_update_tOracleOutput_1);
        globalMap.put("tOracleOutput_1_NB_LINE_INSERTED",nb_line_inserted_tOracleOutput_1);
        globalMap.put("tOracleOutput_1_NB_LINE_DELETED",nb_line_deleted_tOracleOutput_1);
        globalMap.put("tOracleOutput_1_NB_LINE_REJECTED", nb_line_rejected_tOracleOutput_1);
    

	



				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row8");
			  	}
			  	
 

ok_Hash.put("tOracleOutput_1", true);
end_Hash.put("tOracleOutput_1", System.currentTimeMillis());




/**
 * [tOracleOutput_1 end ] stop
 */









				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tFileInputDelimited_1:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk1", 0, "ok");
								} 
							
							tFixedFlowInput_4Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileInputDelimited_1 finally ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_1";
	
	

 



/**
 * [tFileInputDelimited_1 finally ] stop
 */

	
	/**
	 * [tExtractPositionalFields_1 finally ] start
	 */

	

	
	
	currentComponent="tExtractPositionalFields_1";
	
	

 



/**
 * [tExtractPositionalFields_1 finally ] stop
 */

	
	/**
	 * [tJavaRow_5 finally ] start
	 */

	

	
	
	currentComponent="tJavaRow_5";
	
	

 



/**
 * [tJavaRow_5 finally ] stop
 */

	
	/**
	 * [tOracleOutput_1 finally ] start
	 */

	

	
	
	currentComponent="tOracleOutput_1";
	
	



    try {
    if (resourceMap.get("statementClosed_tOracleOutput_1") == null) {
                java.sql.PreparedStatement pstmtToClose_tOracleOutput_1 = null;
                if ((pstmtToClose_tOracleOutput_1 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tOracleOutput_1")) != null) {
                    pstmtToClose_tOracleOutput_1.close();
                }
    }
    } finally {
        if(resourceMap.get("finish_tOracleOutput_1") == null){
            java.sql.Connection ctn_tOracleOutput_1 = null;
            if((ctn_tOracleOutput_1 = (java.sql.Connection)resourceMap.get("conn_tOracleOutput_1")) != null){
                try {
                    ctn_tOracleOutput_1.close();
                } catch (java.sql.SQLException sqlEx_tOracleOutput_1) {
                    String errorMessage_tOracleOutput_1 = "failed to close the connection in tOracleOutput_1 :" + sqlEx_tOracleOutput_1.getMessage();
                    System.err.println(errorMessage_tOracleOutput_1);
                }
            }
        }
    }
 



/**
 * [tOracleOutput_1 finally ] stop
 */









				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 1);
	}
	


public static class row32Struct implements routines.system.IPersistableRow<row32Struct> {
    final static byte[] commonByteArrayLock_AFI_CARGUE_APORTES_CargarAportes = new byte[0];
    static byte[] commonByteArray_AFI_CARGUE_APORTES_CargarAportes = new byte[0];

	
			    public String Message;

				public String getMessage () {
					return this.Message;
				}

				public Boolean MessageIsNullable(){
				    return true;
				}
				public Boolean MessageIsKey(){
				    return false;
				}
				public Integer MessageLength(){
				    return null;
				}
				public Integer MessagePrecision(){
				    return null;
				}
				public String MessageDefault(){
				
					return null;
				
				}
				public String MessageComment(){
				
				    return "";
				
				}
				public String MessagePattern(){
				
					return "";
				
				}
				public String MessageOriginalDbColumnName(){
				
					return "Message";
				
				}

				
			    public String Result;

				public String getResult () {
					return this.Result;
				}

				public Boolean ResultIsNullable(){
				    return true;
				}
				public Boolean ResultIsKey(){
				    return false;
				}
				public Integer ResultLength(){
				    return null;
				}
				public Integer ResultPrecision(){
				    return null;
				}
				public String ResultDefault(){
				
					return null;
				
				}
				public String ResultComment(){
				
				    return "";
				
				}
				public String ResultPattern(){
				
					return "";
				
				}
				public String ResultOriginalDbColumnName(){
				
					return "Result";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_CARGUE_APORTES_CargarAportes.length) {
				if(length < 1024 && commonByteArray_AFI_CARGUE_APORTES_CargarAportes.length == 0) {
   					commonByteArray_AFI_CARGUE_APORTES_CargarAportes = new byte[1024];
				} else {
   					commonByteArray_AFI_CARGUE_APORTES_CargarAportes = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_CARGUE_APORTES_CargarAportes, 0, length);
			strReturn = new String(commonByteArray_AFI_CARGUE_APORTES_CargarAportes, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_CARGUE_APORTES_CargarAportes.length) {
				if(length < 1024 && commonByteArray_AFI_CARGUE_APORTES_CargarAportes.length == 0) {
   					commonByteArray_AFI_CARGUE_APORTES_CargarAportes = new byte[1024];
				} else {
   					commonByteArray_AFI_CARGUE_APORTES_CargarAportes = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_CARGUE_APORTES_CargarAportes, 0, length);
			strReturn = new String(commonByteArray_AFI_CARGUE_APORTES_CargarAportes, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_CARGUE_APORTES_CargarAportes) {

        	try {

        		int length = 0;
		
					this.Message = readString(dis);
					
					this.Result = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_CARGUE_APORTES_CargarAportes) {

        	try {

        		int length = 0;
		
					this.Message = readString(dis);
					
					this.Result = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.Message,dos);
					
					// String
				
						writeString(this.Result,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.Message,dos);
					
					// String
				
						writeString(this.Result,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Message="+Message);
		sb.append(",Result="+Result);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row32Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row28Struct implements routines.system.IPersistableRow<row28Struct> {
    final static byte[] commonByteArrayLock_AFI_CARGUE_APORTES_CargarAportes = new byte[0];
    static byte[] commonByteArray_AFI_CARGUE_APORTES_CargarAportes = new byte[0];

	
			    public String Message;

				public String getMessage () {
					return this.Message;
				}

				public Boolean MessageIsNullable(){
				    return true;
				}
				public Boolean MessageIsKey(){
				    return false;
				}
				public Integer MessageLength(){
				    return null;
				}
				public Integer MessagePrecision(){
				    return null;
				}
				public String MessageDefault(){
				
					return null;
				
				}
				public String MessageComment(){
				
				    return "";
				
				}
				public String MessagePattern(){
				
					return "";
				
				}
				public String MessageOriginalDbColumnName(){
				
					return "Message";
				
				}

				
			    public String Result;

				public String getResult () {
					return this.Result;
				}

				public Boolean ResultIsNullable(){
				    return true;
				}
				public Boolean ResultIsKey(){
				    return false;
				}
				public Integer ResultLength(){
				    return null;
				}
				public Integer ResultPrecision(){
				    return null;
				}
				public String ResultDefault(){
				
					return null;
				
				}
				public String ResultComment(){
				
				    return "";
				
				}
				public String ResultPattern(){
				
					return "";
				
				}
				public String ResultOriginalDbColumnName(){
				
					return "Result";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_CARGUE_APORTES_CargarAportes.length) {
				if(length < 1024 && commonByteArray_AFI_CARGUE_APORTES_CargarAportes.length == 0) {
   					commonByteArray_AFI_CARGUE_APORTES_CargarAportes = new byte[1024];
				} else {
   					commonByteArray_AFI_CARGUE_APORTES_CargarAportes = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_CARGUE_APORTES_CargarAportes, 0, length);
			strReturn = new String(commonByteArray_AFI_CARGUE_APORTES_CargarAportes, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_CARGUE_APORTES_CargarAportes.length) {
				if(length < 1024 && commonByteArray_AFI_CARGUE_APORTES_CargarAportes.length == 0) {
   					commonByteArray_AFI_CARGUE_APORTES_CargarAportes = new byte[1024];
				} else {
   					commonByteArray_AFI_CARGUE_APORTES_CargarAportes = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_CARGUE_APORTES_CargarAportes, 0, length);
			strReturn = new String(commonByteArray_AFI_CARGUE_APORTES_CargarAportes, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_CARGUE_APORTES_CargarAportes) {

        	try {

        		int length = 0;
		
					this.Message = readString(dis);
					
					this.Result = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_CARGUE_APORTES_CargarAportes) {

        	try {

        		int length = 0;
		
					this.Message = readString(dis);
					
					this.Result = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.Message,dos);
					
					// String
				
						writeString(this.Result,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.Message,dos);
					
					// String
				
						writeString(this.Result,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Message="+Message);
		sb.append(",Result="+Result);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row28Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row26Struct implements routines.system.IPersistableRow<row26Struct> {
    final static byte[] commonByteArrayLock_AFI_CARGUE_APORTES_CargarAportes = new byte[0];
    static byte[] commonByteArray_AFI_CARGUE_APORTES_CargarAportes = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String OBSERVACIONES;

				public String getOBSERVACIONES () {
					return this.OBSERVACIONES;
				}

				public Boolean OBSERVACIONESIsNullable(){
				    return true;
				}
				public Boolean OBSERVACIONESIsKey(){
				    return false;
				}
				public Integer OBSERVACIONESLength(){
				    return null;
				}
				public Integer OBSERVACIONESPrecision(){
				    return null;
				}
				public String OBSERVACIONESDefault(){
				
					return null;
				
				}
				public String OBSERVACIONESComment(){
				
				    return "";
				
				}
				public String OBSERVACIONESPattern(){
				
					return "";
				
				}
				public String OBSERVACIONESOriginalDbColumnName(){
				
					return "OBSERVACIONES";
				
				}

				
			    public BigDecimal ID;

				public BigDecimal getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return true;
				}
				public Boolean IDIsKey(){
				    return true;
				}
				public Integer IDLength(){
				    return null;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return null;
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public java.util.Date FECHA_FIN;

				public java.util.Date getFECHA_FIN () {
					return this.FECHA_FIN;
				}

				public Boolean FECHA_FINIsNullable(){
				    return true;
				}
				public Boolean FECHA_FINIsKey(){
				    return false;
				}
				public Integer FECHA_FINLength(){
				    return null;
				}
				public Integer FECHA_FINPrecision(){
				    return null;
				}
				public String FECHA_FINDefault(){
				
					return null;
				
				}
				public String FECHA_FINComment(){
				
				    return "";
				
				}
				public String FECHA_FINPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String FECHA_FINOriginalDbColumnName(){
				
					return "FECHA_FIN";
				
				}

				
			    public BigDecimal ESTADO;

				public BigDecimal getESTADO () {
					return this.ESTADO;
				}

				public Boolean ESTADOIsNullable(){
				    return true;
				}
				public Boolean ESTADOIsKey(){
				    return false;
				}
				public Integer ESTADOLength(){
				    return null;
				}
				public Integer ESTADOPrecision(){
				    return null;
				}
				public String ESTADODefault(){
				
					return null;
				
				}
				public String ESTADOComment(){
				
				    return "";
				
				}
				public String ESTADOPattern(){
				
					return "";
				
				}
				public String ESTADOOriginalDbColumnName(){
				
					return "ESTADO";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.ID == null) ? 0 : this.ID.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row26Struct other = (row26Struct) obj;
		
						if (this.ID == null) {
							if (other.ID != null)
								return false;
						
						} else if (!this.ID.equals(other.ID))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row26Struct other) {

		other.OBSERVACIONES = this.OBSERVACIONES;
	            other.ID = this.ID;
	            other.FECHA_FIN = this.FECHA_FIN;
	            other.ESTADO = this.ESTADO;
	            
	}

	public void copyKeysDataTo(row26Struct other) {

		other.ID = this.ID;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_CARGUE_APORTES_CargarAportes.length) {
				if(length < 1024 && commonByteArray_AFI_CARGUE_APORTES_CargarAportes.length == 0) {
   					commonByteArray_AFI_CARGUE_APORTES_CargarAportes = new byte[1024];
				} else {
   					commonByteArray_AFI_CARGUE_APORTES_CargarAportes = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_CARGUE_APORTES_CargarAportes, 0, length);
			strReturn = new String(commonByteArray_AFI_CARGUE_APORTES_CargarAportes, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_CARGUE_APORTES_CargarAportes.length) {
				if(length < 1024 && commonByteArray_AFI_CARGUE_APORTES_CargarAportes.length == 0) {
   					commonByteArray_AFI_CARGUE_APORTES_CargarAportes = new byte[1024];
				} else {
   					commonByteArray_AFI_CARGUE_APORTES_CargarAportes = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_CARGUE_APORTES_CargarAportes, 0, length);
			strReturn = new String(commonByteArray_AFI_CARGUE_APORTES_CargarAportes, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_CARGUE_APORTES_CargarAportes) {

        	try {

        		int length = 0;
		
					this.OBSERVACIONES = readString(dis);
					
						this.ID = (BigDecimal) dis.readObject();
					
					this.FECHA_FIN = readDate(dis);
					
						this.ESTADO = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_CARGUE_APORTES_CargarAportes) {

        	try {

        		int length = 0;
		
					this.OBSERVACIONES = readString(dis);
					
						this.ID = (BigDecimal) dis.readObject();
					
					this.FECHA_FIN = readDate(dis);
					
						this.ESTADO = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.OBSERVACIONES,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ID);
					
					// java.util.Date
				
						writeDate(this.FECHA_FIN,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ESTADO);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.OBSERVACIONES,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ID);
					
					// java.util.Date
				
						writeDate(this.FECHA_FIN,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ESTADO);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("OBSERVACIONES="+OBSERVACIONES);
		sb.append(",ID="+String.valueOf(ID));
		sb.append(",FECHA_FIN="+String.valueOf(FECHA_FIN));
		sb.append(",ESTADO="+String.valueOf(ESTADO));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row26Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.ID, other.ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row18Struct implements routines.system.IPersistableRow<row18Struct> {
    final static byte[] commonByteArrayLock_AFI_CARGUE_APORTES_CargarAportes = new byte[0];
    static byte[] commonByteArray_AFI_CARGUE_APORTES_CargarAportes = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String OBSERVACIONES;

				public String getOBSERVACIONES () {
					return this.OBSERVACIONES;
				}

				public Boolean OBSERVACIONESIsNullable(){
				    return true;
				}
				public Boolean OBSERVACIONESIsKey(){
				    return false;
				}
				public Integer OBSERVACIONESLength(){
				    return null;
				}
				public Integer OBSERVACIONESPrecision(){
				    return null;
				}
				public String OBSERVACIONESDefault(){
				
					return null;
				
				}
				public String OBSERVACIONESComment(){
				
				    return "";
				
				}
				public String OBSERVACIONESPattern(){
				
					return "";
				
				}
				public String OBSERVACIONESOriginalDbColumnName(){
				
					return "OBSERVACIONES";
				
				}

				
			    public BigDecimal ID;

				public BigDecimal getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return true;
				}
				public Boolean IDIsKey(){
				    return true;
				}
				public Integer IDLength(){
				    return null;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return null;
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public java.util.Date FECHA_FIN;

				public java.util.Date getFECHA_FIN () {
					return this.FECHA_FIN;
				}

				public Boolean FECHA_FINIsNullable(){
				    return true;
				}
				public Boolean FECHA_FINIsKey(){
				    return false;
				}
				public Integer FECHA_FINLength(){
				    return null;
				}
				public Integer FECHA_FINPrecision(){
				    return null;
				}
				public String FECHA_FINDefault(){
				
					return null;
				
				}
				public String FECHA_FINComment(){
				
				    return "";
				
				}
				public String FECHA_FINPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String FECHA_FINOriginalDbColumnName(){
				
					return "FECHA_FIN";
				
				}

				
			    public BigDecimal ESTADO;

				public BigDecimal getESTADO () {
					return this.ESTADO;
				}

				public Boolean ESTADOIsNullable(){
				    return true;
				}
				public Boolean ESTADOIsKey(){
				    return false;
				}
				public Integer ESTADOLength(){
				    return null;
				}
				public Integer ESTADOPrecision(){
				    return null;
				}
				public String ESTADODefault(){
				
					return null;
				
				}
				public String ESTADOComment(){
				
				    return "";
				
				}
				public String ESTADOPattern(){
				
					return "";
				
				}
				public String ESTADOOriginalDbColumnName(){
				
					return "ESTADO";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.ID == null) ? 0 : this.ID.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row18Struct other = (row18Struct) obj;
		
						if (this.ID == null) {
							if (other.ID != null)
								return false;
						
						} else if (!this.ID.equals(other.ID))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row18Struct other) {

		other.OBSERVACIONES = this.OBSERVACIONES;
	            other.ID = this.ID;
	            other.FECHA_FIN = this.FECHA_FIN;
	            other.ESTADO = this.ESTADO;
	            
	}

	public void copyKeysDataTo(row18Struct other) {

		other.ID = this.ID;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_CARGUE_APORTES_CargarAportes.length) {
				if(length < 1024 && commonByteArray_AFI_CARGUE_APORTES_CargarAportes.length == 0) {
   					commonByteArray_AFI_CARGUE_APORTES_CargarAportes = new byte[1024];
				} else {
   					commonByteArray_AFI_CARGUE_APORTES_CargarAportes = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_CARGUE_APORTES_CargarAportes, 0, length);
			strReturn = new String(commonByteArray_AFI_CARGUE_APORTES_CargarAportes, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_CARGUE_APORTES_CargarAportes.length) {
				if(length < 1024 && commonByteArray_AFI_CARGUE_APORTES_CargarAportes.length == 0) {
   					commonByteArray_AFI_CARGUE_APORTES_CargarAportes = new byte[1024];
				} else {
   					commonByteArray_AFI_CARGUE_APORTES_CargarAportes = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_CARGUE_APORTES_CargarAportes, 0, length);
			strReturn = new String(commonByteArray_AFI_CARGUE_APORTES_CargarAportes, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_CARGUE_APORTES_CargarAportes) {

        	try {

        		int length = 0;
		
					this.OBSERVACIONES = readString(dis);
					
						this.ID = (BigDecimal) dis.readObject();
					
					this.FECHA_FIN = readDate(dis);
					
						this.ESTADO = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_CARGUE_APORTES_CargarAportes) {

        	try {

        		int length = 0;
		
					this.OBSERVACIONES = readString(dis);
					
						this.ID = (BigDecimal) dis.readObject();
					
					this.FECHA_FIN = readDate(dis);
					
						this.ESTADO = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.OBSERVACIONES,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ID);
					
					// java.util.Date
				
						writeDate(this.FECHA_FIN,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ESTADO);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.OBSERVACIONES,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ID);
					
					// java.util.Date
				
						writeDate(this.FECHA_FIN,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ESTADO);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("OBSERVACIONES="+OBSERVACIONES);
		sb.append(",ID="+String.valueOf(ID));
		sb.append(",FECHA_FIN="+String.valueOf(FECHA_FIN));
		sb.append(",ESTADO="+String.valueOf(ESTADO));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row18Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.ID, other.ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row6Struct implements routines.system.IPersistableRow<row6Struct> {
    final static byte[] commonByteArrayLock_AFI_CARGUE_APORTES_CargarAportes = new byte[0];
    static byte[] commonByteArray_AFI_CARGUE_APORTES_CargarAportes = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String OBSERVACIONES;

				public String getOBSERVACIONES () {
					return this.OBSERVACIONES;
				}

				public Boolean OBSERVACIONESIsNullable(){
				    return true;
				}
				public Boolean OBSERVACIONESIsKey(){
				    return false;
				}
				public Integer OBSERVACIONESLength(){
				    return null;
				}
				public Integer OBSERVACIONESPrecision(){
				    return null;
				}
				public String OBSERVACIONESDefault(){
				
					return null;
				
				}
				public String OBSERVACIONESComment(){
				
				    return "";
				
				}
				public String OBSERVACIONESPattern(){
				
					return "";
				
				}
				public String OBSERVACIONESOriginalDbColumnName(){
				
					return "OBSERVACIONES";
				
				}

				
			    public BigDecimal ID;

				public BigDecimal getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return true;
				}
				public Boolean IDIsKey(){
				    return true;
				}
				public Integer IDLength(){
				    return null;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return null;
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public java.util.Date FECHA_FIN;

				public java.util.Date getFECHA_FIN () {
					return this.FECHA_FIN;
				}

				public Boolean FECHA_FINIsNullable(){
				    return true;
				}
				public Boolean FECHA_FINIsKey(){
				    return false;
				}
				public Integer FECHA_FINLength(){
				    return null;
				}
				public Integer FECHA_FINPrecision(){
				    return null;
				}
				public String FECHA_FINDefault(){
				
					return null;
				
				}
				public String FECHA_FINComment(){
				
				    return "";
				
				}
				public String FECHA_FINPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String FECHA_FINOriginalDbColumnName(){
				
					return "FECHA_FIN";
				
				}

				
			    public BigDecimal ESTADO;

				public BigDecimal getESTADO () {
					return this.ESTADO;
				}

				public Boolean ESTADOIsNullable(){
				    return true;
				}
				public Boolean ESTADOIsKey(){
				    return false;
				}
				public Integer ESTADOLength(){
				    return null;
				}
				public Integer ESTADOPrecision(){
				    return null;
				}
				public String ESTADODefault(){
				
					return null;
				
				}
				public String ESTADOComment(){
				
				    return "";
				
				}
				public String ESTADOPattern(){
				
					return "";
				
				}
				public String ESTADOOriginalDbColumnName(){
				
					return "ESTADO";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.ID == null) ? 0 : this.ID.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row6Struct other = (row6Struct) obj;
		
						if (this.ID == null) {
							if (other.ID != null)
								return false;
						
						} else if (!this.ID.equals(other.ID))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row6Struct other) {

		other.OBSERVACIONES = this.OBSERVACIONES;
	            other.ID = this.ID;
	            other.FECHA_FIN = this.FECHA_FIN;
	            other.ESTADO = this.ESTADO;
	            
	}

	public void copyKeysDataTo(row6Struct other) {

		other.ID = this.ID;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_CARGUE_APORTES_CargarAportes.length) {
				if(length < 1024 && commonByteArray_AFI_CARGUE_APORTES_CargarAportes.length == 0) {
   					commonByteArray_AFI_CARGUE_APORTES_CargarAportes = new byte[1024];
				} else {
   					commonByteArray_AFI_CARGUE_APORTES_CargarAportes = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_CARGUE_APORTES_CargarAportes, 0, length);
			strReturn = new String(commonByteArray_AFI_CARGUE_APORTES_CargarAportes, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_CARGUE_APORTES_CargarAportes.length) {
				if(length < 1024 && commonByteArray_AFI_CARGUE_APORTES_CargarAportes.length == 0) {
   					commonByteArray_AFI_CARGUE_APORTES_CargarAportes = new byte[1024];
				} else {
   					commonByteArray_AFI_CARGUE_APORTES_CargarAportes = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_CARGUE_APORTES_CargarAportes, 0, length);
			strReturn = new String(commonByteArray_AFI_CARGUE_APORTES_CargarAportes, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_CARGUE_APORTES_CargarAportes) {

        	try {

        		int length = 0;
		
					this.OBSERVACIONES = readString(dis);
					
						this.ID = (BigDecimal) dis.readObject();
					
					this.FECHA_FIN = readDate(dis);
					
						this.ESTADO = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_CARGUE_APORTES_CargarAportes) {

        	try {

        		int length = 0;
		
					this.OBSERVACIONES = readString(dis);
					
						this.ID = (BigDecimal) dis.readObject();
					
					this.FECHA_FIN = readDate(dis);
					
						this.ESTADO = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.OBSERVACIONES,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ID);
					
					// java.util.Date
				
						writeDate(this.FECHA_FIN,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ESTADO);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.OBSERVACIONES,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ID);
					
					// java.util.Date
				
						writeDate(this.FECHA_FIN,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ESTADO);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("OBSERVACIONES="+OBSERVACIONES);
		sb.append(",ID="+String.valueOf(ID));
		sb.append(",FECHA_FIN="+String.valueOf(FECHA_FIN));
		sb.append(",ESTADO="+String.valueOf(ESTADO));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row6Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.ID, other.ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row19Struct implements routines.system.IPersistableRow<row19Struct> {
    final static byte[] commonByteArrayLock_AFI_CARGUE_APORTES_CargarAportes = new byte[0];
    static byte[] commonByteArray_AFI_CARGUE_APORTES_CargarAportes = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String OBSERVACIONES;

				public String getOBSERVACIONES () {
					return this.OBSERVACIONES;
				}

				public Boolean OBSERVACIONESIsNullable(){
				    return true;
				}
				public Boolean OBSERVACIONESIsKey(){
				    return false;
				}
				public Integer OBSERVACIONESLength(){
				    return null;
				}
				public Integer OBSERVACIONESPrecision(){
				    return null;
				}
				public String OBSERVACIONESDefault(){
				
					return null;
				
				}
				public String OBSERVACIONESComment(){
				
				    return "";
				
				}
				public String OBSERVACIONESPattern(){
				
					return "";
				
				}
				public String OBSERVACIONESOriginalDbColumnName(){
				
					return "OBSERVACIONES";
				
				}

				
			    public BigDecimal ID;

				public BigDecimal getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return true;
				}
				public Boolean IDIsKey(){
				    return true;
				}
				public Integer IDLength(){
				    return null;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return null;
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.ID == null) ? 0 : this.ID.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row19Struct other = (row19Struct) obj;
		
						if (this.ID == null) {
							if (other.ID != null)
								return false;
						
						} else if (!this.ID.equals(other.ID))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row19Struct other) {

		other.OBSERVACIONES = this.OBSERVACIONES;
	            other.ID = this.ID;
	            
	}

	public void copyKeysDataTo(row19Struct other) {

		other.ID = this.ID;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_CARGUE_APORTES_CargarAportes.length) {
				if(length < 1024 && commonByteArray_AFI_CARGUE_APORTES_CargarAportes.length == 0) {
   					commonByteArray_AFI_CARGUE_APORTES_CargarAportes = new byte[1024];
				} else {
   					commonByteArray_AFI_CARGUE_APORTES_CargarAportes = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_CARGUE_APORTES_CargarAportes, 0, length);
			strReturn = new String(commonByteArray_AFI_CARGUE_APORTES_CargarAportes, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_CARGUE_APORTES_CargarAportes.length) {
				if(length < 1024 && commonByteArray_AFI_CARGUE_APORTES_CargarAportes.length == 0) {
   					commonByteArray_AFI_CARGUE_APORTES_CargarAportes = new byte[1024];
				} else {
   					commonByteArray_AFI_CARGUE_APORTES_CargarAportes = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_CARGUE_APORTES_CargarAportes, 0, length);
			strReturn = new String(commonByteArray_AFI_CARGUE_APORTES_CargarAportes, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_CARGUE_APORTES_CargarAportes) {

        	try {

        		int length = 0;
		
					this.OBSERVACIONES = readString(dis);
					
						this.ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_CARGUE_APORTES_CargarAportes) {

        	try {

        		int length = 0;
		
					this.OBSERVACIONES = readString(dis);
					
						this.ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.OBSERVACIONES,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.OBSERVACIONES,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("OBSERVACIONES="+OBSERVACIONES);
		sb.append(",ID="+String.valueOf(ID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row19Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.ID, other.ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tFixedFlowInput_4Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFixedFlowInput_4_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row19Struct row19 = new row19Struct();
row6Struct row6 = new row6Struct();
row18Struct row18 = new row18Struct();
row18Struct row26 = row18;
row28Struct row28 = new row28Struct();
row28Struct row32 = row28;









	
	/**
	 * [tLogRow_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogRow_2", false);
		start_Hash.put("tLogRow_2", System.currentTimeMillis());
		
	
	currentComponent="tLogRow_2";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row32");
					}
				
		int tos_count_tLogRow_2 = 0;
		

	///////////////////////
	
		final String OUTPUT_FIELD_SEPARATOR_tLogRow_2 = "|";
		java.io.PrintStream consoleOut_tLogRow_2 = null;	

 		StringBuilder strBuffer_tLogRow_2 = null;
		int nb_line_tLogRow_2 = 0;
///////////////////////    			



 



/**
 * [tLogRow_2 begin ] stop
 */



	
	/**
	 * [tBufferOutput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tBufferOutput_1", false);
		start_Hash.put("tBufferOutput_1", System.currentTimeMillis());
		
	
	currentComponent="tBufferOutput_1";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row28");
					}
				
		int tos_count_tBufferOutput_1 = 0;
		

 



/**
 * [tBufferOutput_1 begin ] stop
 */



	
	/**
	 * [tJavaRow_12 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaRow_12", false);
		start_Hash.put("tJavaRow_12", System.currentTimeMillis());
		
	
	currentComponent="tJavaRow_12";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row26");
					}
				
		int tos_count_tJavaRow_12 = 0;
		

int nb_line_tJavaRow_12 = 0;

 



/**
 * [tJavaRow_12 begin ] stop
 */



	
	/**
	 * [tOracleCommit_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleCommit_1", false);
		start_Hash.put("tOracleCommit_1", System.currentTimeMillis());
		
	
	currentComponent="tOracleCommit_1";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row18");
					}
				
		int tos_count_tOracleCommit_1 = 0;
		

 



/**
 * [tOracleCommit_1 begin ] stop
 */



	
	/**
	 * [tOracleOutput_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleOutput_4", false);
		start_Hash.put("tOracleOutput_4", System.currentTimeMillis());
		
	
	currentComponent="tOracleOutput_4";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row6");
					}
				
		int tos_count_tOracleOutput_4 = 0;
		






        int updateKeyCount_tOracleOutput_4 = 1;
        if(updateKeyCount_tOracleOutput_4 < 1) {
            throw new RuntimeException("For update, Schema must have a key");
        } else if (updateKeyCount_tOracleOutput_4 == 4 && true) {        
                throw new RuntimeException("For update, every Schema column can not be a key");
        }
    
    int nb_line_tOracleOutput_4 = 0;
    int nb_line_update_tOracleOutput_4 = 0;
    int nb_line_inserted_tOracleOutput_4 = 0;
    int nb_line_deleted_tOracleOutput_4 = 0;
    int nb_line_rejected_tOracleOutput_4 = 0;

    int tmp_batchUpdateCount_tOracleOutput_4 = 0;

    int deletedCount_tOracleOutput_4=0;
    int updatedCount_tOracleOutput_4=0;
    int insertedCount_tOracleOutput_4=0;
    int rowsToCommitCount_tOracleOutput_4=0;
    int rejectedCount_tOracleOutput_4=0;

    boolean whetherReject_tOracleOutput_4 = false;

    java.sql.Connection conn_tOracleOutput_4 = null;

    //optional table
    String dbschema_tOracleOutput_4 = null;
    String tableName_tOracleOutput_4 = null;
        dbschema_tOracleOutput_4 = (String)globalMap.get("dbschema_tOracleConnection_1");
		
        conn_tOracleOutput_4 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");
        int count_tOracleOutput_4=0;

        if(dbschema_tOracleOutput_4 == null || dbschema_tOracleOutput_4.trim().length() == 0) {
            tableName_tOracleOutput_4 = ("AFI_ARCHIVOS");
        } else {
            tableName_tOracleOutput_4 = dbschema_tOracleOutput_4 + "." + ("AFI_ARCHIVOS");
        }
                String update_tOracleOutput_4 = "UPDATE " + tableName_tOracleOutput_4 + " SET OBSERVACIONES = ?,FECHA_FIN = ?,ESTADO = ? WHERE ID = ?";
                java.sql.PreparedStatement pstmt_tOracleOutput_4 = conn_tOracleOutput_4.prepareStatement(update_tOracleOutput_4);
                resourceMap.put("pstmt_tOracleOutput_4", pstmt_tOracleOutput_4);





 



/**
 * [tOracleOutput_4 begin ] stop
 */



	
	/**
	 * [tJavaRow_10 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaRow_10", false);
		start_Hash.put("tJavaRow_10", System.currentTimeMillis());
		
	
	currentComponent="tJavaRow_10";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row19");
					}
				
		int tos_count_tJavaRow_10 = 0;
		

int nb_line_tJavaRow_10 = 0;

 



/**
 * [tJavaRow_10 begin ] stop
 */



	
	/**
	 * [tFixedFlowInput_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tFixedFlowInput_4", false);
		start_Hash.put("tFixedFlowInput_4", System.currentTimeMillis());
		
	
	currentComponent="tFixedFlowInput_4";
	
	
		int tos_count_tFixedFlowInput_4 = 0;
		

	    for (int i_tFixedFlowInput_4 = 0 ; i_tFixedFlowInput_4 < 1 ; i_tFixedFlowInput_4++) {
	                	            	
    	            		row19.OBSERVACIONES = null;        	            	
    	            	        	            	
    	            		row19.ID = null;        	            	
    	            	

 



/**
 * [tFixedFlowInput_4 begin ] stop
 */
	
	/**
	 * [tFixedFlowInput_4 main ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_4";
	
	

 


	tos_count_tFixedFlowInput_4++;

/**
 * [tFixedFlowInput_4 main ] stop
 */
	
	/**
	 * [tFixedFlowInput_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_4";
	
	

 



/**
 * [tFixedFlowInput_4 process_data_begin ] stop
 */

	
	/**
	 * [tJavaRow_10 main ] start
	 */

	

	
	
	currentComponent="tJavaRow_10";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row19"
						
						);
					}
					

    //Code generate according to input schema and output schema
row6.OBSERVACIONES = ((String)context.Errores).replace("null", "").replace("NULL", "Vacio");
row6.ID = context.ARCHIVOS_ID;
row6.FECHA_FIN=  new Date();
row6.ESTADO=  new BigDecimal(6);

    nb_line_tJavaRow_10++;   

 


	tos_count_tJavaRow_10++;

/**
 * [tJavaRow_10 main ] stop
 */
	
	/**
	 * [tJavaRow_10 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJavaRow_10";
	
	

 



/**
 * [tJavaRow_10 process_data_begin ] stop
 */

	
	/**
	 * [tOracleOutput_4 main ] start
	 */

	

	
	
	currentComponent="tOracleOutput_4";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row6"
						
						);
					}
					



            row18 = null;
        whetherReject_tOracleOutput_4 = false;
                    if(row6.OBSERVACIONES == null) {
pstmt_tOracleOutput_4.setNull(1, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_4.setString(1, row6.OBSERVACIONES);
}

                    if(row6.FECHA_FIN != null) {
pstmt_tOracleOutput_4.setObject(2, new java.sql.Timestamp(row6.FECHA_FIN.getTime()),java.sql.Types.DATE);
} else {
pstmt_tOracleOutput_4.setNull(2, java.sql.Types.DATE);
}

                    pstmt_tOracleOutput_4.setBigDecimal(3, row6.ESTADO);


                    pstmt_tOracleOutput_4.setBigDecimal(4 + count_tOracleOutput_4, row6.ID);

                try {
                    nb_line_tOracleOutput_4++;
                    int processedCount_tOracleOutput_4 = pstmt_tOracleOutput_4.executeUpdate();
                    updatedCount_tOracleOutput_4 += processedCount_tOracleOutput_4;
                    rowsToCommitCount_tOracleOutput_4 += processedCount_tOracleOutput_4;
                } catch(java.lang.Exception e_tOracleOutput_4) {
globalMap.put("tOracleOutput_4_ERROR_MESSAGE",e_tOracleOutput_4.getMessage());
                    whetherReject_tOracleOutput_4 = true;
                            System.err.print(e_tOracleOutput_4.getMessage());
                }
            if(!whetherReject_tOracleOutput_4) {
                            row18 = new row18Struct();
                                row18.OBSERVACIONES = row6.OBSERVACIONES;
                                row18.ID = row6.ID;
                                row18.FECHA_FIN = row6.FECHA_FIN;
                                row18.ESTADO = row6.ESTADO;
            }

 


	tos_count_tOracleOutput_4++;

/**
 * [tOracleOutput_4 main ] stop
 */
	
	/**
	 * [tOracleOutput_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleOutput_4";
	
	

 



/**
 * [tOracleOutput_4 process_data_begin ] stop
 */
// Start of branch "row18"
if(row18 != null) { 



	
	/**
	 * [tOracleCommit_1 main ] start
	 */

	

	
	
	currentComponent="tOracleCommit_1";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row18"
						
						);
					}
					

	java.sql.Connection conn_tOracleCommit_1 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");

if(conn_tOracleCommit_1 != null && !conn_tOracleCommit_1.isClosed()) {
	
			
			conn_tOracleCommit_1.commit();
			
	
}

 
     row26 = row18;


	tos_count_tOracleCommit_1++;

/**
 * [tOracleCommit_1 main ] stop
 */
	
	/**
	 * [tOracleCommit_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleCommit_1";
	
	

 



/**
 * [tOracleCommit_1 process_data_begin ] stop
 */

	
	/**
	 * [tJavaRow_12 main ] start
	 */

	

	
	
	currentComponent="tJavaRow_12";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row26"
						
						);
					}
					

    row28.Message = "OK";
row28.Result = "Proceso finalizado correctamente";

    nb_line_tJavaRow_12++;   

 


	tos_count_tJavaRow_12++;

/**
 * [tJavaRow_12 main ] stop
 */
	
	/**
	 * [tJavaRow_12 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJavaRow_12";
	
	

 



/**
 * [tJavaRow_12 process_data_begin ] stop
 */

	
	/**
	 * [tBufferOutput_1 main ] start
	 */

	

	
	
	currentComponent="tBufferOutput_1";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row28"
						
						);
					}
					



String[] row_tBufferOutput_1=new String[]{"","",};		
	    if(row28.Message != null){
	        
	            row_tBufferOutput_1[0] = row28.Message;
	                        			    
	    }else{
	    	row_tBufferOutput_1[0] = null;
	    }
	    if(row28.Result != null){
	        
	            row_tBufferOutput_1[1] = row28.Result;
	                        			    
	    }else{
	    	row_tBufferOutput_1[1] = null;
	    }
	globalBuffer.add(row_tBufferOutput_1);	
	
 
     row32 = row28;


	tos_count_tBufferOutput_1++;

/**
 * [tBufferOutput_1 main ] stop
 */
	
	/**
	 * [tBufferOutput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tBufferOutput_1";
	
	

 



/**
 * [tBufferOutput_1 process_data_begin ] stop
 */

	
	/**
	 * [tLogRow_2 main ] start
	 */

	

	
	
	currentComponent="tLogRow_2";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row32"
						
						);
					}
					
///////////////////////		
						



				strBuffer_tLogRow_2 = new StringBuilder();




   				
	    		if(row32.Message != null) { //              
                    							
       
				strBuffer_tLogRow_2.append(
				                String.valueOf(row32.Message)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_2.append("|");
    			


   				
	    		if(row32.Result != null) { //              
                    							
       
				strBuffer_tLogRow_2.append(
				                String.valueOf(row32.Result)							
				);


							
	    		} //  			
 

                    if (globalMap.get("tLogRow_CONSOLE")!=null)
                    {
                    	consoleOut_tLogRow_2 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
                    }
                    else
                    {
                    	consoleOut_tLogRow_2 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
                    	globalMap.put("tLogRow_CONSOLE",consoleOut_tLogRow_2);
                    }
                    consoleOut_tLogRow_2.println(strBuffer_tLogRow_2.toString());
                    consoleOut_tLogRow_2.flush();
                    nb_line_tLogRow_2++;
//////

//////                    
                    
///////////////////////    			

 


	tos_count_tLogRow_2++;

/**
 * [tLogRow_2 main ] stop
 */
	
	/**
	 * [tLogRow_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogRow_2";
	
	

 



/**
 * [tLogRow_2 process_data_begin ] stop
 */
	
	/**
	 * [tLogRow_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogRow_2";
	
	

 



/**
 * [tLogRow_2 process_data_end ] stop
 */



	
	/**
	 * [tBufferOutput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tBufferOutput_1";
	
	

 



/**
 * [tBufferOutput_1 process_data_end ] stop
 */



	
	/**
	 * [tJavaRow_12 process_data_end ] start
	 */

	

	
	
	currentComponent="tJavaRow_12";
	
	

 



/**
 * [tJavaRow_12 process_data_end ] stop
 */



	
	/**
	 * [tOracleCommit_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleCommit_1";
	
	

 



/**
 * [tOracleCommit_1 process_data_end ] stop
 */

} // End of branch "row18"




	
	/**
	 * [tOracleOutput_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_4";
	
	

 



/**
 * [tOracleOutput_4 process_data_end ] stop
 */



	
	/**
	 * [tJavaRow_10 process_data_end ] start
	 */

	

	
	
	currentComponent="tJavaRow_10";
	
	

 



/**
 * [tJavaRow_10 process_data_end ] stop
 */



	
	/**
	 * [tFixedFlowInput_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_4";
	
	

 



/**
 * [tFixedFlowInput_4 process_data_end ] stop
 */
	
	/**
	 * [tFixedFlowInput_4 end ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_4";
	
	

        }
        globalMap.put("tFixedFlowInput_4_NB_LINE", 1);        

 

ok_Hash.put("tFixedFlowInput_4", true);
end_Hash.put("tFixedFlowInput_4", System.currentTimeMillis());




/**
 * [tFixedFlowInput_4 end ] stop
 */

	
	/**
	 * [tJavaRow_10 end ] start
	 */

	

	
	
	currentComponent="tJavaRow_10";
	
	

globalMap.put("tJavaRow_10_NB_LINE",nb_line_tJavaRow_10);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row19");
			  	}
			  	
 

ok_Hash.put("tJavaRow_10", true);
end_Hash.put("tJavaRow_10", System.currentTimeMillis());




/**
 * [tJavaRow_10 end ] stop
 */

	
	/**
	 * [tOracleOutput_4 end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_4";
	
	
	



	
        if(pstmt_tOracleOutput_4 != null) {
			
				pstmt_tOracleOutput_4.close();
				resourceMap.remove("pstmt_tOracleOutput_4");
			
        }
    resourceMap.put("statementClosed_tOracleOutput_4", true);

	
	nb_line_deleted_tOracleOutput_4=nb_line_deleted_tOracleOutput_4+ deletedCount_tOracleOutput_4;
	nb_line_update_tOracleOutput_4=nb_line_update_tOracleOutput_4 + updatedCount_tOracleOutput_4;
	nb_line_inserted_tOracleOutput_4=nb_line_inserted_tOracleOutput_4 + insertedCount_tOracleOutput_4;
	nb_line_rejected_tOracleOutput_4=nb_line_rejected_tOracleOutput_4 + rejectedCount_tOracleOutput_4;
	
        globalMap.put("tOracleOutput_4_NB_LINE",nb_line_tOracleOutput_4);
        globalMap.put("tOracleOutput_4_NB_LINE_UPDATED",nb_line_update_tOracleOutput_4);
        globalMap.put("tOracleOutput_4_NB_LINE_INSERTED",nb_line_inserted_tOracleOutput_4);
        globalMap.put("tOracleOutput_4_NB_LINE_DELETED",nb_line_deleted_tOracleOutput_4);
        globalMap.put("tOracleOutput_4_NB_LINE_REJECTED", nb_line_rejected_tOracleOutput_4);
    

	



				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row6");
			  	}
			  	
 

ok_Hash.put("tOracleOutput_4", true);
end_Hash.put("tOracleOutput_4", System.currentTimeMillis());




/**
 * [tOracleOutput_4 end ] stop
 */

	
	/**
	 * [tOracleCommit_1 end ] start
	 */

	

	
	
	currentComponent="tOracleCommit_1";
	
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row18");
			  	}
			  	
 

ok_Hash.put("tOracleCommit_1", true);
end_Hash.put("tOracleCommit_1", System.currentTimeMillis());




/**
 * [tOracleCommit_1 end ] stop
 */

	
	/**
	 * [tJavaRow_12 end ] start
	 */

	

	
	
	currentComponent="tJavaRow_12";
	
	

globalMap.put("tJavaRow_12_NB_LINE",nb_line_tJavaRow_12);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row26");
			  	}
			  	
 

ok_Hash.put("tJavaRow_12", true);
end_Hash.put("tJavaRow_12", System.currentTimeMillis());




/**
 * [tJavaRow_12 end ] stop
 */

	
	/**
	 * [tBufferOutput_1 end ] start
	 */

	

	
	
	currentComponent="tBufferOutput_1";
	
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row28");
			  	}
			  	
 

ok_Hash.put("tBufferOutput_1", true);
end_Hash.put("tBufferOutput_1", System.currentTimeMillis());




/**
 * [tBufferOutput_1 end ] stop
 */

	
	/**
	 * [tLogRow_2 end ] start
	 */

	

	
	
	currentComponent="tLogRow_2";
	
	


//////
//////
globalMap.put("tLogRow_2_NB_LINE",nb_line_tLogRow_2);

///////////////////////    			

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row32");
			  	}
			  	
 

ok_Hash.put("tLogRow_2", true);
end_Hash.put("tLogRow_2", System.currentTimeMillis());




/**
 * [tLogRow_2 end ] stop
 */


















				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFixedFlowInput_4 finally ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_4";
	
	

 



/**
 * [tFixedFlowInput_4 finally ] stop
 */

	
	/**
	 * [tJavaRow_10 finally ] start
	 */

	

	
	
	currentComponent="tJavaRow_10";
	
	

 



/**
 * [tJavaRow_10 finally ] stop
 */

	
	/**
	 * [tOracleOutput_4 finally ] start
	 */

	

	
	
	currentComponent="tOracleOutput_4";
	
	



    if (resourceMap.get("statementClosed_tOracleOutput_4") == null) {
                java.sql.PreparedStatement pstmtToClose_tOracleOutput_4 = null;
                if ((pstmtToClose_tOracleOutput_4 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tOracleOutput_4")) != null) {
                    pstmtToClose_tOracleOutput_4.close();
                }
    }
 



/**
 * [tOracleOutput_4 finally ] stop
 */

	
	/**
	 * [tOracleCommit_1 finally ] start
	 */

	

	
	
	currentComponent="tOracleCommit_1";
	
	

 



/**
 * [tOracleCommit_1 finally ] stop
 */

	
	/**
	 * [tJavaRow_12 finally ] start
	 */

	

	
	
	currentComponent="tJavaRow_12";
	
	

 



/**
 * [tJavaRow_12 finally ] stop
 */

	
	/**
	 * [tBufferOutput_1 finally ] start
	 */

	

	
	
	currentComponent="tBufferOutput_1";
	
	

 



/**
 * [tBufferOutput_1 finally ] stop
 */

	
	/**
	 * [tLogRow_2 finally ] start
	 */

	

	
	
	currentComponent="tLogRow_2";
	
	

 



/**
 * [tLogRow_2 finally ] stop
 */


















				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFixedFlowInput_4_SUBPROCESS_STATE", 1);
	}
	


public static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
    final static byte[] commonByteArrayLock_AFI_CARGUE_APORTES_CargarAportes = new byte[0];
    static byte[] commonByteArray_AFI_CARGUE_APORTES_CargarAportes = new byte[0];

	
			    public String Host;

				public String getHost () {
					return this.Host;
				}

				public Boolean HostIsNullable(){
				    return true;
				}
				public Boolean HostIsKey(){
				    return false;
				}
				public Integer HostLength(){
				    return 100;
				}
				public Integer HostPrecision(){
				    return 0;
				}
				public String HostDefault(){
				
					return null;
				
				}
				public String HostComment(){
				
				    return "";
				
				}
				public String HostPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String HostOriginalDbColumnName(){
				
					return "Host";
				
				}

				
			    public String Port;

				public String getPort () {
					return this.Port;
				}

				public Boolean PortIsNullable(){
				    return true;
				}
				public Boolean PortIsKey(){
				    return false;
				}
				public Integer PortLength(){
				    return 100;
				}
				public Integer PortPrecision(){
				    return 0;
				}
				public String PortDefault(){
				
					return null;
				
				}
				public String PortComment(){
				
				    return "";
				
				}
				public String PortPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String PortOriginalDbColumnName(){
				
					return "Port";
				
				}

				
			    public String Sid;

				public String getSid () {
					return this.Sid;
				}

				public Boolean SidIsNullable(){
				    return true;
				}
				public Boolean SidIsKey(){
				    return false;
				}
				public Integer SidLength(){
				    return 100;
				}
				public Integer SidPrecision(){
				    return 0;
				}
				public String SidDefault(){
				
					return null;
				
				}
				public String SidComment(){
				
				    return "";
				
				}
				public String SidPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String SidOriginalDbColumnName(){
				
					return "Sid";
				
				}

				
			    public String User;

				public String getUser () {
					return this.User;
				}

				public Boolean UserIsNullable(){
				    return true;
				}
				public Boolean UserIsKey(){
				    return false;
				}
				public Integer UserLength(){
				    return 100;
				}
				public Integer UserPrecision(){
				    return 0;
				}
				public String UserDefault(){
				
					return null;
				
				}
				public String UserComment(){
				
				    return "";
				
				}
				public String UserPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String UserOriginalDbColumnName(){
				
					return "User";
				
				}

				
			    public String Password;

				public String getPassword () {
					return this.Password;
				}

				public Boolean PasswordIsNullable(){
				    return true;
				}
				public Boolean PasswordIsKey(){
				    return false;
				}
				public Integer PasswordLength(){
				    return 100;
				}
				public Integer PasswordPrecision(){
				    return 0;
				}
				public String PasswordDefault(){
				
					return null;
				
				}
				public String PasswordComment(){
				
				    return "";
				
				}
				public String PasswordPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String PasswordOriginalDbColumnName(){
				
					return "Password";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_CARGUE_APORTES_CargarAportes.length) {
				if(length < 1024 && commonByteArray_AFI_CARGUE_APORTES_CargarAportes.length == 0) {
   					commonByteArray_AFI_CARGUE_APORTES_CargarAportes = new byte[1024];
				} else {
   					commonByteArray_AFI_CARGUE_APORTES_CargarAportes = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_CARGUE_APORTES_CargarAportes, 0, length);
			strReturn = new String(commonByteArray_AFI_CARGUE_APORTES_CargarAportes, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_CARGUE_APORTES_CargarAportes.length) {
				if(length < 1024 && commonByteArray_AFI_CARGUE_APORTES_CargarAportes.length == 0) {
   					commonByteArray_AFI_CARGUE_APORTES_CargarAportes = new byte[1024];
				} else {
   					commonByteArray_AFI_CARGUE_APORTES_CargarAportes = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_CARGUE_APORTES_CargarAportes, 0, length);
			strReturn = new String(commonByteArray_AFI_CARGUE_APORTES_CargarAportes, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_CARGUE_APORTES_CargarAportes) {

        	try {

        		int length = 0;
		
					this.Host = readString(dis);
					
					this.Port = readString(dis);
					
					this.Sid = readString(dis);
					
					this.User = readString(dis);
					
					this.Password = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_CARGUE_APORTES_CargarAportes) {

        	try {

        		int length = 0;
		
					this.Host = readString(dis);
					
					this.Port = readString(dis);
					
					this.Sid = readString(dis);
					
					this.User = readString(dis);
					
					this.Password = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.Host,dos);
					
					// String
				
						writeString(this.Port,dos);
					
					// String
				
						writeString(this.Sid,dos);
					
					// String
				
						writeString(this.User,dos);
					
					// String
				
						writeString(this.Password,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.Host,dos);
					
					// String
				
						writeString(this.Port,dos);
					
					// String
				
						writeString(this.Sid,dos);
					
					// String
				
						writeString(this.User,dos);
					
					// String
				
						writeString(this.Password,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Host="+Host);
		sb.append(",Port="+Port);
		sb.append(",Sid="+Sid);
		sb.append(",User="+User);
		sb.append(",Password="+Password);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tFileInputXML_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileInputXML_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row1Struct row1 = new row1Struct();




	
	/**
	 * [tJavaRow_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaRow_1", false);
		start_Hash.put("tJavaRow_1", System.currentTimeMillis());
		
	
	currentComponent="tJavaRow_1";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row1");
					}
				
		int tos_count_tJavaRow_1 = 0;
		

int nb_line_tJavaRow_1 = 0;

 



/**
 * [tJavaRow_1 begin ] stop
 */



	
	/**
	 * [tFileInputXML_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputXML_1", false);
		start_Hash.put("tFileInputXML_1", System.currentTimeMillis());
		
	
	currentComponent="tFileInputXML_1";
	
	
		int tos_count_tFileInputXML_1 = 0;
		

	

int nb_line_tFileInputXML_1 = 0;

	String os_tFileInputXML_1 = System.getProperty("os.name").toLowerCase();
	boolean isWindows_tFileInputXML_1=false;
	if(os_tFileInputXML_1.indexOf("windows") > -1 || os_tFileInputXML_1.indexOf("nt") > -1){
		isWindows_tFileInputXML_1=true;
	}
class NameSpaceTool_tFileInputXML_1 {

    public java.util.HashMap<String, String> xmlNameSpaceMap = new java.util.HashMap<String, String>();
    
	private java.util.List<String> defualtNSPath = new java.util.ArrayList<String>();

    public void countNSMap(org.dom4j.Element el) {
        for (org.dom4j.Namespace ns : (java.util.List<org.dom4j.Namespace>) el.declaredNamespaces()) {
            if (ns.getPrefix().trim().length() == 0) {
                xmlNameSpaceMap.put("pre"+defualtNSPath.size(), ns.getURI());
                String path = "";
                org.dom4j.Element elTmp = el;
                while (elTmp != null) {
                	if (elTmp.getNamespacePrefix() != null && elTmp.getNamespacePrefix().length() > 0) {
                        path = "/" + elTmp.getNamespacePrefix() + ":" + elTmp.getName() + path;
                    } else {
                        path = "/" + elTmp.getName() + path;
                    }
                    elTmp = elTmp.getParent();
                }
                defualtNSPath.add(path);
            } else {
                xmlNameSpaceMap.put(ns.getPrefix(), ns.getURI());
            }

        }
        for (org.dom4j.Element e : (java.util.List<org.dom4j.Element>) el.elements()) {
            countNSMap(e);
        }
    }
    
    private final org.talend.xpath.XPathUtil util = new  org.talend.xpath.XPathUtil();
    
    {
    	util.setDefaultNSPath(defualtNSPath);
    }
    
	public String addDefaultNSPrefix(String path) {
		return util.addDefaultNSPrefix(path);
	}
	
	public String addDefaultNSPrefix(String relativeXpression, String basePath) {
		return util.addDefaultNSPrefix(relativeXpression,basePath);
	}
    
}

class XML_API_tFileInputXML_1{
	public boolean isDefNull(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
        if (node != null && node instanceof org.dom4j.Element) {
        	org.dom4j.Attribute attri = ((org.dom4j.Element)node).attribute("nil");
        	if(attri != null && ("true").equals(attri.getText())){
            	return true;
            }
        }
        return false;
    }

    public boolean isMissing(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
        return node == null ? true : false;
    }

    public boolean isEmpty(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
        if (node != null) {
            return node.getStringValue().isEmpty();
        }
        return false;
    }
}


org.dom4j.io.SAXReader reader_tFileInputXML_1 = new org.dom4j.io.SAXReader();
Object filename_tFileInputXML_1 = null;
try {
	filename_tFileInputXML_1 = "C:/ETL/config/Connections.xml";
} catch(java.lang.Exception e) {
globalMap.put("tFileInputXML_1_ERROR_MESSAGE",e.getMessage());
	
	
	System.err.println(e.getMessage());
	
}
if(filename_tFileInputXML_1 != null && filename_tFileInputXML_1 instanceof String && filename_tFileInputXML_1.toString().startsWith("//")){
	if (!isWindows_tFileInputXML_1){
		filename_tFileInputXML_1 = filename_tFileInputXML_1.toString().replaceFirst("//","/");
	}
}

boolean isValidFile_tFileInputXML_1 = true;
org.dom4j.Document doc_tFileInputXML_1 = null;
java.io.Closeable toClose_tFileInputXML_1 = null;
try{
	if(filename_tFileInputXML_1 instanceof java.io.InputStream){
		java.io.InputStream inputStream_tFileInputXML_1 = (java.io.InputStream)filename_tFileInputXML_1;
		toClose_tFileInputXML_1 = inputStream_tFileInputXML_1;
		doc_tFileInputXML_1 = reader_tFileInputXML_1.read(inputStream_tFileInputXML_1);
	}else{
		java.io.Reader unicodeReader_tFileInputXML_1 = new UnicodeReader(new java.io.FileInputStream(String.valueOf(filename_tFileInputXML_1)),"ISO-8859-15");
		toClose_tFileInputXML_1 = unicodeReader_tFileInputXML_1;
		org.xml.sax.InputSource in_tFileInputXML_1= new org.xml.sax.InputSource(unicodeReader_tFileInputXML_1);
		doc_tFileInputXML_1 = reader_tFileInputXML_1.read(in_tFileInputXML_1);
	}
}catch(java.lang.Exception e){
globalMap.put("tFileInputXML_1_ERROR_MESSAGE",e.getMessage());
	
	System.err.println(e.getMessage());
	isValidFile_tFileInputXML_1 = false;
} finally {
	if(toClose_tFileInputXML_1!=null) {
		toClose_tFileInputXML_1.close();
	}
}
if(isValidFile_tFileInputXML_1){
NameSpaceTool_tFileInputXML_1 nsTool_tFileInputXML_1 = new NameSpaceTool_tFileInputXML_1();
nsTool_tFileInputXML_1.countNSMap(doc_tFileInputXML_1.getRootElement());
java.util.HashMap<String,String> xmlNameSpaceMap_tFileInputXML_1 = nsTool_tFileInputXML_1.xmlNameSpaceMap;  

org.dom4j.XPath x_tFileInputXML_1 = doc_tFileInputXML_1.createXPath(nsTool_tFileInputXML_1.addDefaultNSPrefix("/connectionStrings"));  
x_tFileInputXML_1.setNamespaceURIs(xmlNameSpaceMap_tFileInputXML_1); 

java.util.List<org.dom4j.Node> nodeList_tFileInputXML_1 = (java.util.List<org.dom4j.Node>)x_tFileInputXML_1.selectNodes(doc_tFileInputXML_1);	
XML_API_tFileInputXML_1 xml_api_tFileInputXML_1 = new XML_API_tFileInputXML_1();
String str_tFileInputXML_1 = "";
org.dom4j.Node node_tFileInputXML_1 = null;

//init all mapping xpaths
java.util.Map<Integer,org.dom4j.XPath> xpaths_tFileInputXML_1=new java.util.HashMap<Integer,org.dom4j.XPath>();
	class XPathUtil_tFileInputXML_1{
	
			   public void initXPaths_0(java.util.Map<Integer,org.dom4j.XPath> xpaths,NameSpaceTool_tFileInputXML_1 nsTool,
			       java.util.HashMap<String,String> xmlNameSpaceMap){
			
	org.dom4j.XPath xpath_0 = org.dom4j.DocumentHelper.createXPath(nsTool.addDefaultNSPrefix("Host","/connectionStrings"));
	xpath_0.setNamespaceURIs(xmlNameSpaceMap);
	
			xpaths.put(0,xpath_0);
			
	org.dom4j.XPath xpath_1 = org.dom4j.DocumentHelper.createXPath(nsTool.addDefaultNSPrefix("Port","/connectionStrings"));
	xpath_1.setNamespaceURIs(xmlNameSpaceMap);
	
			xpaths.put(1,xpath_1);
			
	org.dom4j.XPath xpath_2 = org.dom4j.DocumentHelper.createXPath(nsTool.addDefaultNSPrefix("Sid","/connectionStrings"));
	xpath_2.setNamespaceURIs(xmlNameSpaceMap);
	
			xpaths.put(2,xpath_2);
			
	org.dom4j.XPath xpath_3 = org.dom4j.DocumentHelper.createXPath(nsTool.addDefaultNSPrefix("User","/connectionStrings"));
	xpath_3.setNamespaceURIs(xmlNameSpaceMap);
	
			xpaths.put(3,xpath_3);
			
	org.dom4j.XPath xpath_4 = org.dom4j.DocumentHelper.createXPath(nsTool.addDefaultNSPrefix("Password","/connectionStrings"));
	xpath_4.setNamespaceURIs(xmlNameSpaceMap);
	
			xpaths.put(4,xpath_4);
			
	     }
	   
	      public void initXPaths(java.util.Map<Integer,org.dom4j.XPath> xpaths,NameSpaceTool_tFileInputXML_1 nsTool,
			    java.util.HashMap<String,String> xmlNameSpaceMap){
			    
			        initXPaths_0(xpaths,nsTool, xmlNameSpaceMap);
			    
		   }
	}
	XPathUtil_tFileInputXML_1 xPathUtil_tFileInputXML_1 = new XPathUtil_tFileInputXML_1();
	xPathUtil_tFileInputXML_1.initXPaths(xpaths_tFileInputXML_1, nsTool_tFileInputXML_1, xmlNameSpaceMap_tFileInputXML_1);
for (org.dom4j.Node temp_tFileInputXML_1: nodeList_tFileInputXML_1) {
	if (nb_line_tFileInputXML_1>=50) {
	
		break;
	}
		nb_line_tFileInputXML_1++;
		
	row1 = null;			
	boolean whetherReject_tFileInputXML_1 = false;
	row1 = new row1Struct();
	try{
    Object obj0_tFileInputXML_1 = xpaths_tFileInputXML_1.get(0).evaluate(temp_tFileInputXML_1);
    if(obj0_tFileInputXML_1 == null) {
    	node_tFileInputXML_1 = null;
    	str_tFileInputXML_1 = "";
    	
    } else if(obj0_tFileInputXML_1 instanceof org.dom4j.Node) {
    	node_tFileInputXML_1 = (org.dom4j.Node)obj0_tFileInputXML_1;
    	str_tFileInputXML_1 = org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
    } else if(obj0_tFileInputXML_1 instanceof String || obj0_tFileInputXML_1 instanceof Number){
    	node_tFileInputXML_1 = temp_tFileInputXML_1;
    	str_tFileInputXML_1 = String.valueOf(obj0_tFileInputXML_1);
    } else if(obj0_tFileInputXML_1 instanceof java.util.List){
    	java.util.List<org.dom4j.Node> nodes_tFileInputXML_1 = (java.util.List<org.dom4j.Node>)obj0_tFileInputXML_1;
    	node_tFileInputXML_1 = nodes_tFileInputXML_1.size()>0 ? nodes_tFileInputXML_1.get(0) : null;
    	str_tFileInputXML_1 = node_tFileInputXML_1==null?"":org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
	}
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row1.Host =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row1.Host ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row1.Host =null;
									}else{
		row1.Host = str_tFileInputXML_1;
	}
    Object obj1_tFileInputXML_1 = xpaths_tFileInputXML_1.get(1).evaluate(temp_tFileInputXML_1);
    if(obj1_tFileInputXML_1 == null) {
    	node_tFileInputXML_1 = null;
    	str_tFileInputXML_1 = "";
    	
    } else if(obj1_tFileInputXML_1 instanceof org.dom4j.Node) {
    	node_tFileInputXML_1 = (org.dom4j.Node)obj1_tFileInputXML_1;
    	str_tFileInputXML_1 = org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
    } else if(obj1_tFileInputXML_1 instanceof String || obj1_tFileInputXML_1 instanceof Number){
    	node_tFileInputXML_1 = temp_tFileInputXML_1;
    	str_tFileInputXML_1 = String.valueOf(obj1_tFileInputXML_1);
    } else if(obj1_tFileInputXML_1 instanceof java.util.List){
    	java.util.List<org.dom4j.Node> nodes_tFileInputXML_1 = (java.util.List<org.dom4j.Node>)obj1_tFileInputXML_1;
    	node_tFileInputXML_1 = nodes_tFileInputXML_1.size()>0 ? nodes_tFileInputXML_1.get(0) : null;
    	str_tFileInputXML_1 = node_tFileInputXML_1==null?"":org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
	}
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row1.Port =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row1.Port ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row1.Port =null;
									}else{
		row1.Port = str_tFileInputXML_1;
	}
    Object obj2_tFileInputXML_1 = xpaths_tFileInputXML_1.get(2).evaluate(temp_tFileInputXML_1);
    if(obj2_tFileInputXML_1 == null) {
    	node_tFileInputXML_1 = null;
    	str_tFileInputXML_1 = "";
    	
    } else if(obj2_tFileInputXML_1 instanceof org.dom4j.Node) {
    	node_tFileInputXML_1 = (org.dom4j.Node)obj2_tFileInputXML_1;
    	str_tFileInputXML_1 = org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
    } else if(obj2_tFileInputXML_1 instanceof String || obj2_tFileInputXML_1 instanceof Number){
    	node_tFileInputXML_1 = temp_tFileInputXML_1;
    	str_tFileInputXML_1 = String.valueOf(obj2_tFileInputXML_1);
    } else if(obj2_tFileInputXML_1 instanceof java.util.List){
    	java.util.List<org.dom4j.Node> nodes_tFileInputXML_1 = (java.util.List<org.dom4j.Node>)obj2_tFileInputXML_1;
    	node_tFileInputXML_1 = nodes_tFileInputXML_1.size()>0 ? nodes_tFileInputXML_1.get(0) : null;
    	str_tFileInputXML_1 = node_tFileInputXML_1==null?"":org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
	}
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row1.Sid =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row1.Sid ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row1.Sid =null;
									}else{
		row1.Sid = str_tFileInputXML_1;
	}
    Object obj3_tFileInputXML_1 = xpaths_tFileInputXML_1.get(3).evaluate(temp_tFileInputXML_1);
    if(obj3_tFileInputXML_1 == null) {
    	node_tFileInputXML_1 = null;
    	str_tFileInputXML_1 = "";
    	
    } else if(obj3_tFileInputXML_1 instanceof org.dom4j.Node) {
    	node_tFileInputXML_1 = (org.dom4j.Node)obj3_tFileInputXML_1;
    	str_tFileInputXML_1 = org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
    } else if(obj3_tFileInputXML_1 instanceof String || obj3_tFileInputXML_1 instanceof Number){
    	node_tFileInputXML_1 = temp_tFileInputXML_1;
    	str_tFileInputXML_1 = String.valueOf(obj3_tFileInputXML_1);
    } else if(obj3_tFileInputXML_1 instanceof java.util.List){
    	java.util.List<org.dom4j.Node> nodes_tFileInputXML_1 = (java.util.List<org.dom4j.Node>)obj3_tFileInputXML_1;
    	node_tFileInputXML_1 = nodes_tFileInputXML_1.size()>0 ? nodes_tFileInputXML_1.get(0) : null;
    	str_tFileInputXML_1 = node_tFileInputXML_1==null?"":org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
	}
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row1.User =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row1.User ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row1.User =null;
									}else{
		row1.User = str_tFileInputXML_1;
	}
    Object obj4_tFileInputXML_1 = xpaths_tFileInputXML_1.get(4).evaluate(temp_tFileInputXML_1);
    if(obj4_tFileInputXML_1 == null) {
    	node_tFileInputXML_1 = null;
    	str_tFileInputXML_1 = "";
    	
    } else if(obj4_tFileInputXML_1 instanceof org.dom4j.Node) {
    	node_tFileInputXML_1 = (org.dom4j.Node)obj4_tFileInputXML_1;
    	str_tFileInputXML_1 = org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
    } else if(obj4_tFileInputXML_1 instanceof String || obj4_tFileInputXML_1 instanceof Number){
    	node_tFileInputXML_1 = temp_tFileInputXML_1;
    	str_tFileInputXML_1 = String.valueOf(obj4_tFileInputXML_1);
    } else if(obj4_tFileInputXML_1 instanceof java.util.List){
    	java.util.List<org.dom4j.Node> nodes_tFileInputXML_1 = (java.util.List<org.dom4j.Node>)obj4_tFileInputXML_1;
    	node_tFileInputXML_1 = nodes_tFileInputXML_1.size()>0 ? nodes_tFileInputXML_1.get(0) : null;
    	str_tFileInputXML_1 = node_tFileInputXML_1==null?"":org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
	}
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row1.Password =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row1.Password ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row1.Password =null;
									}else{
		row1.Password = str_tFileInputXML_1;
	} 
			
    } catch (java.lang.Exception e) {
globalMap.put("tFileInputXML_1_ERROR_MESSAGE",e.getMessage());
        whetherReject_tFileInputXML_1 = true;
                System.err.println(e.getMessage());
                row1 = null;
    }
			
			

 



/**
 * [tFileInputXML_1 begin ] stop
 */
	
	/**
	 * [tFileInputXML_1 main ] start
	 */

	

	
	
	currentComponent="tFileInputXML_1";
	
	

 


	tos_count_tFileInputXML_1++;

/**
 * [tFileInputXML_1 main ] stop
 */
	
	/**
	 * [tFileInputXML_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileInputXML_1";
	
	

 



/**
 * [tFileInputXML_1 process_data_begin ] stop
 */
// Start of branch "row1"
if(row1 != null) { 



	
	/**
	 * [tJavaRow_1 main ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row1"
						
						);
					}
					

    
context.Host = row1.Host;
context.Port = row1.Port;
context.Sid = row1.Sid;
context.User = row1.User;
context.Password = row1.Password;
    nb_line_tJavaRow_1++;   

 


	tos_count_tJavaRow_1++;

/**
 * [tJavaRow_1 main ] stop
 */
	
	/**
	 * [tJavaRow_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";
	
	

 



/**
 * [tJavaRow_1 process_data_begin ] stop
 */
	
	/**
	 * [tJavaRow_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";
	
	

 



/**
 * [tJavaRow_1 process_data_end ] stop
 */

} // End of branch "row1"




	
	/**
	 * [tFileInputXML_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileInputXML_1";
	
	

 



/**
 * [tFileInputXML_1 process_data_end ] stop
 */
	
	/**
	 * [tFileInputXML_1 end ] start
	 */

	

	
	
	currentComponent="tFileInputXML_1";
	
	


}
	}
	globalMap.put("tFileInputXML_1_NB_LINE",nb_line_tFileInputXML_1);

	

 

ok_Hash.put("tFileInputXML_1", true);
end_Hash.put("tFileInputXML_1", System.currentTimeMillis());




/**
 * [tFileInputXML_1 end ] stop
 */

	
	/**
	 * [tJavaRow_1 end ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";
	
	

globalMap.put("tJavaRow_1_NB_LINE",nb_line_tJavaRow_1);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row1");
			  	}
			  	
 

ok_Hash.put("tJavaRow_1", true);
end_Hash.put("tJavaRow_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk1", 0, "ok");
				}
				tOracleConnection_1Process(globalMap);



/**
 * [tJavaRow_1 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileInputXML_1 finally ] start
	 */

	

	
	
	currentComponent="tFileInputXML_1";
	
	

 



/**
 * [tFileInputXML_1 finally ] stop
 */

	
	/**
	 * [tJavaRow_1 finally ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";
	
	

 



/**
 * [tJavaRow_1 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileInputXML_1_SUBPROCESS_STATE", 1);
	}
	


public void tOracleConnection_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleConnection_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tOracleConnection_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleConnection_1", false);
		start_Hash.put("tOracleConnection_1", System.currentTimeMillis());
		
	
	currentComponent="tOracleConnection_1";
	
	
		int tos_count_tOracleConnection_1 = 0;
		
	

	
        String url_tOracleConnection_1 = "jdbc:oracle:thin:@(description=(address=(protocol=tcp)(host=" + context.Host + ")(port=" + context.Port + "))(connect_data=(service_name=" + context.Sid + ")))";
    	globalMap.put("connectionType_" + "tOracleConnection_1", "ORACLE_SERVICE_NAME");
	String dbUser_tOracleConnection_1 = context.User;
	
	
		
	final String decryptedPassword_tOracleConnection_1 = context.Password; 
		String dbPwd_tOracleConnection_1 = decryptedPassword_tOracleConnection_1;
	
	
	java.sql.Connection conn_tOracleConnection_1 = null;
	
		
			String driverClass_tOracleConnection_1 = "oracle.jdbc.OracleDriver";
			java.lang.Class jdbcclazz_tOracleConnection_1 = java.lang.Class.forName(driverClass_tOracleConnection_1);
			globalMap.put("driverClass_tOracleConnection_1", driverClass_tOracleConnection_1);
		
			conn_tOracleConnection_1 = java.sql.DriverManager.getConnection(url_tOracleConnection_1,dbUser_tOracleConnection_1,dbPwd_tOracleConnection_1);

		globalMap.put("conn_tOracleConnection_1", conn_tOracleConnection_1);
	if (null != conn_tOracleConnection_1) {
		
			conn_tOracleConnection_1.setAutoCommit(false);
	}
        globalMap.put("host_" + "tOracleConnection_1",context.Host);
        globalMap.put("port_" + "tOracleConnection_1",context.Port);
        globalMap.put("dbname_" + "tOracleConnection_1",context.Sid);

	globalMap.put("dbschema_" + "tOracleConnection_1", context.User);
	globalMap.put("username_" + "tOracleConnection_1",context.User);
	globalMap.put("password_" + "tOracleConnection_1",dbPwd_tOracleConnection_1);

 



/**
 * [tOracleConnection_1 begin ] stop
 */
	
	/**
	 * [tOracleConnection_1 main ] start
	 */

	

	
	
	currentComponent="tOracleConnection_1";
	
	

 


	tos_count_tOracleConnection_1++;

/**
 * [tOracleConnection_1 main ] stop
 */
	
	/**
	 * [tOracleConnection_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleConnection_1";
	
	

 



/**
 * [tOracleConnection_1 process_data_begin ] stop
 */
	
	/**
	 * [tOracleConnection_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleConnection_1";
	
	

 



/**
 * [tOracleConnection_1 process_data_end ] stop
 */
	
	/**
	 * [tOracleConnection_1 end ] start
	 */

	

	
	
	currentComponent="tOracleConnection_1";
	
	

 

ok_Hash.put("tOracleConnection_1", true);
end_Hash.put("tOracleConnection_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk2", 0, "ok");
				}
				tOracleInput_1Process(globalMap);



/**
 * [tOracleConnection_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleConnection_1 finally ] start
	 */

	

	
	
	currentComponent="tOracleConnection_1";
	
	

 



/**
 * [tOracleConnection_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleConnection_1_SUBPROCESS_STATE", 1);
	}
	


public static class row30Struct implements routines.system.IPersistableRow<row30Struct> {
    final static byte[] commonByteArrayLock_AFI_CARGUE_APORTES_CargarAportes = new byte[0];
    static byte[] commonByteArray_AFI_CARGUE_APORTES_CargarAportes = new byte[0];

	
			    public String Result;

				public String getResult () {
					return this.Result;
				}

				public Boolean ResultIsNullable(){
				    return true;
				}
				public Boolean ResultIsKey(){
				    return false;
				}
				public Integer ResultLength(){
				    return null;
				}
				public Integer ResultPrecision(){
				    return null;
				}
				public String ResultDefault(){
				
					return null;
				
				}
				public String ResultComment(){
				
				    return "";
				
				}
				public String ResultPattern(){
				
					return "";
				
				}
				public String ResultOriginalDbColumnName(){
				
					return "Result";
				
				}

				
			    public String Message;

				public String getMessage () {
					return this.Message;
				}

				public Boolean MessageIsNullable(){
				    return true;
				}
				public Boolean MessageIsKey(){
				    return false;
				}
				public Integer MessageLength(){
				    return null;
				}
				public Integer MessagePrecision(){
				    return null;
				}
				public String MessageDefault(){
				
					return null;
				
				}
				public String MessageComment(){
				
				    return "";
				
				}
				public String MessagePattern(){
				
					return "";
				
				}
				public String MessageOriginalDbColumnName(){
				
					return "Message";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_CARGUE_APORTES_CargarAportes.length) {
				if(length < 1024 && commonByteArray_AFI_CARGUE_APORTES_CargarAportes.length == 0) {
   					commonByteArray_AFI_CARGUE_APORTES_CargarAportes = new byte[1024];
				} else {
   					commonByteArray_AFI_CARGUE_APORTES_CargarAportes = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_CARGUE_APORTES_CargarAportes, 0, length);
			strReturn = new String(commonByteArray_AFI_CARGUE_APORTES_CargarAportes, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_CARGUE_APORTES_CargarAportes.length) {
				if(length < 1024 && commonByteArray_AFI_CARGUE_APORTES_CargarAportes.length == 0) {
   					commonByteArray_AFI_CARGUE_APORTES_CargarAportes = new byte[1024];
				} else {
   					commonByteArray_AFI_CARGUE_APORTES_CargarAportes = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_CARGUE_APORTES_CargarAportes, 0, length);
			strReturn = new String(commonByteArray_AFI_CARGUE_APORTES_CargarAportes, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_CARGUE_APORTES_CargarAportes) {

        	try {

        		int length = 0;
		
					this.Result = readString(dis);
					
					this.Message = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_CARGUE_APORTES_CargarAportes) {

        	try {

        		int length = 0;
		
					this.Result = readString(dis);
					
					this.Message = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.Result,dos);
					
					// String
				
						writeString(this.Message,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.Result,dos);
					
					// String
				
						writeString(this.Message,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Result="+Result);
		sb.append(",Message="+Message);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row30Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row29Struct implements routines.system.IPersistableRow<row29Struct> {
    final static byte[] commonByteArrayLock_AFI_CARGUE_APORTES_CargarAportes = new byte[0];
    static byte[] commonByteArray_AFI_CARGUE_APORTES_CargarAportes = new byte[0];

	
			    public String Result;

				public String getResult () {
					return this.Result;
				}

				public Boolean ResultIsNullable(){
				    return true;
				}
				public Boolean ResultIsKey(){
				    return false;
				}
				public Integer ResultLength(){
				    return null;
				}
				public Integer ResultPrecision(){
				    return null;
				}
				public String ResultDefault(){
				
					return null;
				
				}
				public String ResultComment(){
				
				    return "";
				
				}
				public String ResultPattern(){
				
					return "";
				
				}
				public String ResultOriginalDbColumnName(){
				
					return "Result";
				
				}

				
			    public String Message;

				public String getMessage () {
					return this.Message;
				}

				public Boolean MessageIsNullable(){
				    return true;
				}
				public Boolean MessageIsKey(){
				    return false;
				}
				public Integer MessageLength(){
				    return null;
				}
				public Integer MessagePrecision(){
				    return null;
				}
				public String MessageDefault(){
				
					return null;
				
				}
				public String MessageComment(){
				
				    return "";
				
				}
				public String MessagePattern(){
				
					return "";
				
				}
				public String MessageOriginalDbColumnName(){
				
					return "Message";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_CARGUE_APORTES_CargarAportes.length) {
				if(length < 1024 && commonByteArray_AFI_CARGUE_APORTES_CargarAportes.length == 0) {
   					commonByteArray_AFI_CARGUE_APORTES_CargarAportes = new byte[1024];
				} else {
   					commonByteArray_AFI_CARGUE_APORTES_CargarAportes = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_CARGUE_APORTES_CargarAportes, 0, length);
			strReturn = new String(commonByteArray_AFI_CARGUE_APORTES_CargarAportes, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_CARGUE_APORTES_CargarAportes.length) {
				if(length < 1024 && commonByteArray_AFI_CARGUE_APORTES_CargarAportes.length == 0) {
   					commonByteArray_AFI_CARGUE_APORTES_CargarAportes = new byte[1024];
				} else {
   					commonByteArray_AFI_CARGUE_APORTES_CargarAportes = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_CARGUE_APORTES_CargarAportes, 0, length);
			strReturn = new String(commonByteArray_AFI_CARGUE_APORTES_CargarAportes, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_CARGUE_APORTES_CargarAportes) {

        	try {

        		int length = 0;
		
					this.Result = readString(dis);
					
					this.Message = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_CARGUE_APORTES_CargarAportes) {

        	try {

        		int length = 0;
		
					this.Result = readString(dis);
					
					this.Message = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.Result,dos);
					
					// String
				
						writeString(this.Message,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.Result,dos);
					
					// String
				
						writeString(this.Message,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Result="+Result);
		sb.append(",Message="+Message);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row29Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row27Struct implements routines.system.IPersistableRow<row27Struct> {
    final static byte[] commonByteArrayLock_AFI_CARGUE_APORTES_CargarAportes = new byte[0];
    static byte[] commonByteArray_AFI_CARGUE_APORTES_CargarAportes = new byte[0];

	
			    public java.util.Date moment;

				public java.util.Date getMoment () {
					return this.moment;
				}

				public Boolean momentIsNullable(){
				    return true;
				}
				public Boolean momentIsKey(){
				    return false;
				}
				public Integer momentLength(){
				    return 0;
				}
				public Integer momentPrecision(){
				    return 0;
				}
				public String momentDefault(){
				
					return "";
				
				}
				public String momentComment(){
				
				    return null;
				
				}
				public String momentPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String momentOriginalDbColumnName(){
				
					return "moment";
				
				}

				
			    public String pid;

				public String getPid () {
					return this.pid;
				}

				public Boolean pidIsNullable(){
				    return true;
				}
				public Boolean pidIsKey(){
				    return false;
				}
				public Integer pidLength(){
				    return 20;
				}
				public Integer pidPrecision(){
				    return 0;
				}
				public String pidDefault(){
				
					return "";
				
				}
				public String pidComment(){
				
				    return null;
				
				}
				public String pidPattern(){
				
				    return null;
				
				}
				public String pidOriginalDbColumnName(){
				
					return "pid";
				
				}

				
			    public String root_pid;

				public String getRoot_pid () {
					return this.root_pid;
				}

				public Boolean root_pidIsNullable(){
				    return true;
				}
				public Boolean root_pidIsKey(){
				    return false;
				}
				public Integer root_pidLength(){
				    return 20;
				}
				public Integer root_pidPrecision(){
				    return 0;
				}
				public String root_pidDefault(){
				
					return "";
				
				}
				public String root_pidComment(){
				
				    return null;
				
				}
				public String root_pidPattern(){
				
				    return null;
				
				}
				public String root_pidOriginalDbColumnName(){
				
					return "root_pid";
				
				}

				
			    public String father_pid;

				public String getFather_pid () {
					return this.father_pid;
				}

				public Boolean father_pidIsNullable(){
				    return true;
				}
				public Boolean father_pidIsKey(){
				    return false;
				}
				public Integer father_pidLength(){
				    return 20;
				}
				public Integer father_pidPrecision(){
				    return 0;
				}
				public String father_pidDefault(){
				
					return "";
				
				}
				public String father_pidComment(){
				
				    return null;
				
				}
				public String father_pidPattern(){
				
				    return null;
				
				}
				public String father_pidOriginalDbColumnName(){
				
					return "father_pid";
				
				}

				
			    public String project;

				public String getProject () {
					return this.project;
				}

				public Boolean projectIsNullable(){
				    return true;
				}
				public Boolean projectIsKey(){
				    return false;
				}
				public Integer projectLength(){
				    return 50;
				}
				public Integer projectPrecision(){
				    return 0;
				}
				public String projectDefault(){
				
					return "";
				
				}
				public String projectComment(){
				
				    return null;
				
				}
				public String projectPattern(){
				
				    return null;
				
				}
				public String projectOriginalDbColumnName(){
				
					return "project";
				
				}

				
			    public String job;

				public String getJob () {
					return this.job;
				}

				public Boolean jobIsNullable(){
				    return true;
				}
				public Boolean jobIsKey(){
				    return false;
				}
				public Integer jobLength(){
				    return 255;
				}
				public Integer jobPrecision(){
				    return 0;
				}
				public String jobDefault(){
				
					return "";
				
				}
				public String jobComment(){
				
				    return null;
				
				}
				public String jobPattern(){
				
				    return null;
				
				}
				public String jobOriginalDbColumnName(){
				
					return "job";
				
				}

				
			    public String context;

				public String getContext () {
					return this.context;
				}

				public Boolean contextIsNullable(){
				    return true;
				}
				public Boolean contextIsKey(){
				    return false;
				}
				public Integer contextLength(){
				    return 50;
				}
				public Integer contextPrecision(){
				    return 0;
				}
				public String contextDefault(){
				
					return "";
				
				}
				public String contextComment(){
				
				    return null;
				
				}
				public String contextPattern(){
				
				    return null;
				
				}
				public String contextOriginalDbColumnName(){
				
					return "context";
				
				}

				
			    public Integer priority;

				public Integer getPriority () {
					return this.priority;
				}

				public Boolean priorityIsNullable(){
				    return true;
				}
				public Boolean priorityIsKey(){
				    return false;
				}
				public Integer priorityLength(){
				    return 3;
				}
				public Integer priorityPrecision(){
				    return 0;
				}
				public String priorityDefault(){
				
					return "";
				
				}
				public String priorityComment(){
				
				    return null;
				
				}
				public String priorityPattern(){
				
				    return null;
				
				}
				public String priorityOriginalDbColumnName(){
				
					return "priority";
				
				}

				
			    public String type;

				public String getType () {
					return this.type;
				}

				public Boolean typeIsNullable(){
				    return true;
				}
				public Boolean typeIsKey(){
				    return false;
				}
				public Integer typeLength(){
				    return 255;
				}
				public Integer typePrecision(){
				    return 0;
				}
				public String typeDefault(){
				
					return "";
				
				}
				public String typeComment(){
				
				    return null;
				
				}
				public String typePattern(){
				
				    return null;
				
				}
				public String typeOriginalDbColumnName(){
				
					return "type";
				
				}

				
			    public String origin;

				public String getOrigin () {
					return this.origin;
				}

				public Boolean originIsNullable(){
				    return true;
				}
				public Boolean originIsKey(){
				    return false;
				}
				public Integer originLength(){
				    return 255;
				}
				public Integer originPrecision(){
				    return 0;
				}
				public String originDefault(){
				
					return "";
				
				}
				public String originComment(){
				
				    return null;
				
				}
				public String originPattern(){
				
				    return null;
				
				}
				public String originOriginalDbColumnName(){
				
					return "origin";
				
				}

				
			    public String message;

				public String getMessage () {
					return this.message;
				}

				public Boolean messageIsNullable(){
				    return true;
				}
				public Boolean messageIsKey(){
				    return false;
				}
				public Integer messageLength(){
				    return 255;
				}
				public Integer messagePrecision(){
				    return 0;
				}
				public String messageDefault(){
				
					return "";
				
				}
				public String messageComment(){
				
				    return null;
				
				}
				public String messagePattern(){
				
				    return null;
				
				}
				public String messageOriginalDbColumnName(){
				
					return "message";
				
				}

				
			    public Integer code;

				public Integer getCode () {
					return this.code;
				}

				public Boolean codeIsNullable(){
				    return true;
				}
				public Boolean codeIsKey(){
				    return false;
				}
				public Integer codeLength(){
				    return 3;
				}
				public Integer codePrecision(){
				    return 0;
				}
				public String codeDefault(){
				
					return "";
				
				}
				public String codeComment(){
				
				    return null;
				
				}
				public String codePattern(){
				
				    return null;
				
				}
				public String codeOriginalDbColumnName(){
				
					return "code";
				
				}

				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_CARGUE_APORTES_CargarAportes.length) {
				if(length < 1024 && commonByteArray_AFI_CARGUE_APORTES_CargarAportes.length == 0) {
   					commonByteArray_AFI_CARGUE_APORTES_CargarAportes = new byte[1024];
				} else {
   					commonByteArray_AFI_CARGUE_APORTES_CargarAportes = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_CARGUE_APORTES_CargarAportes, 0, length);
			strReturn = new String(commonByteArray_AFI_CARGUE_APORTES_CargarAportes, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_CARGUE_APORTES_CargarAportes.length) {
				if(length < 1024 && commonByteArray_AFI_CARGUE_APORTES_CargarAportes.length == 0) {
   					commonByteArray_AFI_CARGUE_APORTES_CargarAportes = new byte[1024];
				} else {
   					commonByteArray_AFI_CARGUE_APORTES_CargarAportes = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_CARGUE_APORTES_CargarAportes, 0, length);
			strReturn = new String(commonByteArray_AFI_CARGUE_APORTES_CargarAportes, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_CARGUE_APORTES_CargarAportes) {

        	try {

        		int length = 0;
		
					this.moment = readDate(dis);
					
					this.pid = readString(dis);
					
					this.root_pid = readString(dis);
					
					this.father_pid = readString(dis);
					
					this.project = readString(dis);
					
					this.job = readString(dis);
					
					this.context = readString(dis);
					
						this.priority = readInteger(dis);
					
					this.type = readString(dis);
					
					this.origin = readString(dis);
					
					this.message = readString(dis);
					
						this.code = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_CARGUE_APORTES_CargarAportes) {

        	try {

        		int length = 0;
		
					this.moment = readDate(dis);
					
					this.pid = readString(dis);
					
					this.root_pid = readString(dis);
					
					this.father_pid = readString(dis);
					
					this.project = readString(dis);
					
					this.job = readString(dis);
					
					this.context = readString(dis);
					
						this.priority = readInteger(dis);
					
					this.type = readString(dis);
					
					this.origin = readString(dis);
					
					this.message = readString(dis);
					
						this.code = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.pid,dos);
					
					// String
				
						writeString(this.root_pid,dos);
					
					// String
				
						writeString(this.father_pid,dos);
					
					// String
				
						writeString(this.project,dos);
					
					// String
				
						writeString(this.job,dos);
					
					// String
				
						writeString(this.context,dos);
					
					// Integer
				
						writeInteger(this.priority,dos);
					
					// String
				
						writeString(this.type,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.message,dos);
					
					// Integer
				
						writeInteger(this.code,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.pid,dos);
					
					// String
				
						writeString(this.root_pid,dos);
					
					// String
				
						writeString(this.father_pid,dos);
					
					// String
				
						writeString(this.project,dos);
					
					// String
				
						writeString(this.job,dos);
					
					// String
				
						writeString(this.context,dos);
					
					// Integer
				
						writeInteger(this.priority,dos);
					
					// String
				
						writeString(this.type,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.message,dos);
					
					// Integer
				
						writeInteger(this.code,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("moment="+String.valueOf(moment));
		sb.append(",pid="+pid);
		sb.append(",root_pid="+root_pid);
		sb.append(",father_pid="+father_pid);
		sb.append(",project="+project);
		sb.append(",job="+job);
		sb.append(",context="+context);
		sb.append(",priority="+String.valueOf(priority));
		sb.append(",type="+type);
		sb.append(",origin="+origin);
		sb.append(",message="+message);
		sb.append(",code="+String.valueOf(code));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row27Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tLogCatcher_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tLogCatcher_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row27Struct row27 = new row27Struct();
row29Struct row29 = new row29Struct();
row29Struct row30 = row29;






	
	/**
	 * [tLogRow_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogRow_1", false);
		start_Hash.put("tLogRow_1", System.currentTimeMillis());
		
	
	currentComponent="tLogRow_1";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row30");
					}
				
		int tos_count_tLogRow_1 = 0;
		

	///////////////////////
	
         class Util_tLogRow_1 {

        String[] des_top = { ".", ".", "-", "+" };

        String[] des_head = { "|=", "=|", "-", "+" };

        String[] des_bottom = { "'", "'", "-", "+" };

        String name="";

        java.util.List<String[]> list = new java.util.ArrayList<String[]>();

        int[] colLengths = new int[2];

        public void addRow(String[] row) {

            for (int i = 0; i < 2; i++) {
                if (row[i]!=null) {
                  colLengths[i] = Math.max(colLengths[i], row[i].length());
                }
            }
            list.add(row);
        }

        public void setTableName(String name) {

            this.name = name;
        }

            public StringBuilder format() {
            
                StringBuilder sb = new StringBuilder();
  
            
                    sb.append(print(des_top));
    
                    int totals = 0;
                    for (int i = 0; i < colLengths.length; i++) {
                        totals = totals + colLengths[i];
                    }
    
                    // name
                    sb.append("|");
                    int k = 0;
                    for (k = 0; k < (totals + 1 - name.length()) / 2; k++) {
                        sb.append(' ');
                    }
                    sb.append(name);
                    for (int i = 0; i < totals + 1 - name.length() - k; i++) {
                        sb.append(' ');
                    }
                    sb.append("|\n");

                    // head and rows
                    sb.append(print(des_head));
                    for (int i = 0; i < list.size(); i++) {
    
                        String[] row = list.get(i);
    
                        java.util.Formatter formatter = new java.util.Formatter(new StringBuilder());
                        
                        StringBuilder sbformat = new StringBuilder();                                             
        			        sbformat.append("|%1$-");
        			        sbformat.append(colLengths[0]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%2$-");
        			        sbformat.append(colLengths[1]);
        			        sbformat.append("s");
        			                      
                        sbformat.append("|\n");                    
       
                        formatter.format(sbformat.toString(), (Object[])row);	
                                
                        sb.append(formatter.toString());
                        if (i == 0)
                            sb.append(print(des_head)); // print the head
                    }
    
                    // end
                    sb.append(print(des_bottom));
                    return sb;
                }
            

            private StringBuilder print(String[] fillChars) {
                StringBuilder sb = new StringBuilder();
                //first column
                sb.append(fillChars[0]);                
                    for (int i = 0; i < colLengths[0] - fillChars[0].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);	                

                
                    //last column
                    for (int i = 0; i < colLengths[1] - fillChars[1].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }         
                sb.append(fillChars[1]);
                sb.append("\n");               
                return sb;
            }
            
            public boolean isTableEmpty(){
            	if (list.size() > 1)
            		return false;
            	return true;
            }
        }
        Util_tLogRow_1 util_tLogRow_1 = new Util_tLogRow_1();
        util_tLogRow_1.setTableName("tLogRow_1");
        util_tLogRow_1.addRow(new String[]{"Result","Message",});        
 		StringBuilder strBuffer_tLogRow_1 = null;
		int nb_line_tLogRow_1 = 0;
///////////////////////    			



 



/**
 * [tLogRow_1 begin ] stop
 */



	
	/**
	 * [tBufferOutput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tBufferOutput_2", false);
		start_Hash.put("tBufferOutput_2", System.currentTimeMillis());
		
	
	currentComponent="tBufferOutput_2";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row29");
					}
				
		int tos_count_tBufferOutput_2 = 0;
		

 



/**
 * [tBufferOutput_2 begin ] stop
 */



	
	/**
	 * [tJavaRow_13 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaRow_13", false);
		start_Hash.put("tJavaRow_13", System.currentTimeMillis());
		
	
	currentComponent="tJavaRow_13";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row27");
					}
				
		int tos_count_tJavaRow_13 = 0;
		

int nb_line_tJavaRow_13 = 0;

 



/**
 * [tJavaRow_13 begin ] stop
 */



	
	/**
	 * [tLogCatcher_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogCatcher_1", false);
		start_Hash.put("tLogCatcher_1", System.currentTimeMillis());
		
	
	currentComponent="tLogCatcher_1";
	
	
		int tos_count_tLogCatcher_1 = 0;
		

try {
	for (LogCatcherUtils.LogCatcherMessage lcm : tLogCatcher_1.getMessages()) {
		row27.type = lcm.getType();
		row27.origin = (lcm.getOrigin()==null || lcm.getOrigin().length()<1 ? null : lcm.getOrigin());
		row27.priority = lcm.getPriority();
		row27.message = lcm.getMessage();
		row27.code = lcm.getCode();
		
		row27.moment = java.util.Calendar.getInstance().getTime();
	
    	row27.pid = pid;
		row27.root_pid = rootPid;
		row27.father_pid = fatherPid;
	
    	row27.project = projectName;
    	row27.job = jobName;
    	row27.context = contextStr;
    		
 



/**
 * [tLogCatcher_1 begin ] stop
 */
	
	/**
	 * [tLogCatcher_1 main ] start
	 */

	

	
	
	currentComponent="tLogCatcher_1";
	
	

 


	tos_count_tLogCatcher_1++;

/**
 * [tLogCatcher_1 main ] stop
 */
	
	/**
	 * [tLogCatcher_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogCatcher_1";
	
	

 



/**
 * [tLogCatcher_1 process_data_begin ] stop
 */

	
	/**
	 * [tJavaRow_13 main ] start
	 */

	

	
	
	currentComponent="tJavaRow_13";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row27"
						
						);
					}
					

    //Code generate according to input schema and output schema
row29.Message = row27.message;
row29.Result = "Fail";

    nb_line_tJavaRow_13++;   

 


	tos_count_tJavaRow_13++;

/**
 * [tJavaRow_13 main ] stop
 */
	
	/**
	 * [tJavaRow_13 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJavaRow_13";
	
	

 



/**
 * [tJavaRow_13 process_data_begin ] stop
 */

	
	/**
	 * [tBufferOutput_2 main ] start
	 */

	

	
	
	currentComponent="tBufferOutput_2";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row29"
						
						);
					}
					



String[] row_tBufferOutput_2=new String[]{"","",};		
	    if(row29.Result != null){
	        
	            row_tBufferOutput_2[0] = row29.Result;
	                        			    
	    }else{
	    	row_tBufferOutput_2[0] = null;
	    }
	    if(row29.Message != null){
	        
	            row_tBufferOutput_2[1] = row29.Message;
	                        			    
	    }else{
	    	row_tBufferOutput_2[1] = null;
	    }
	globalBuffer.add(row_tBufferOutput_2);	
	
 
     row30 = row29;


	tos_count_tBufferOutput_2++;

/**
 * [tBufferOutput_2 main ] stop
 */
	
	/**
	 * [tBufferOutput_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tBufferOutput_2";
	
	

 



/**
 * [tBufferOutput_2 process_data_begin ] stop
 */

	
	/**
	 * [tLogRow_1 main ] start
	 */

	

	
	
	currentComponent="tLogRow_1";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row30"
						
						);
					}
					
///////////////////////		
						

				
				String[] row_tLogRow_1 = new String[2];
   				
	    		if(row30.Result != null) { //              
                 row_tLogRow_1[0]=    						    
				                String.valueOf(row30.Result)			
					          ;	
							
	    		} //			
    			   				
	    		if(row30.Message != null) { //              
                 row_tLogRow_1[1]=    						    
				                String.valueOf(row30.Message)			
					          ;	
							
	    		} //			
    			 

				util_tLogRow_1.addRow(row_tLogRow_1);	
				nb_line_tLogRow_1++;
//////

//////                    
                    
///////////////////////    			

 


	tos_count_tLogRow_1++;

/**
 * [tLogRow_1 main ] stop
 */
	
	/**
	 * [tLogRow_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogRow_1";
	
	

 



/**
 * [tLogRow_1 process_data_begin ] stop
 */
	
	/**
	 * [tLogRow_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogRow_1";
	
	

 



/**
 * [tLogRow_1 process_data_end ] stop
 */



	
	/**
	 * [tBufferOutput_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tBufferOutput_2";
	
	

 



/**
 * [tBufferOutput_2 process_data_end ] stop
 */



	
	/**
	 * [tJavaRow_13 process_data_end ] start
	 */

	

	
	
	currentComponent="tJavaRow_13";
	
	

 



/**
 * [tJavaRow_13 process_data_end ] stop
 */



	
	/**
	 * [tLogCatcher_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogCatcher_1";
	
	

 



/**
 * [tLogCatcher_1 process_data_end ] stop
 */
	
	/**
	 * [tLogCatcher_1 end ] start
	 */

	

	
	
	currentComponent="tLogCatcher_1";
	
	
	}
} catch (Exception e_tLogCatcher_1) {
globalMap.put("tLogCatcher_1_ERROR_MESSAGE",e_tLogCatcher_1.getMessage());
	logIgnoredError(String.format("tLogCatcher_1 - tLogCatcher failed to process log message(s) due to internal error: %s", e_tLogCatcher_1), e_tLogCatcher_1);
}

 

ok_Hash.put("tLogCatcher_1", true);
end_Hash.put("tLogCatcher_1", System.currentTimeMillis());




/**
 * [tLogCatcher_1 end ] stop
 */

	
	/**
	 * [tJavaRow_13 end ] start
	 */

	

	
	
	currentComponent="tJavaRow_13";
	
	

globalMap.put("tJavaRow_13_NB_LINE",nb_line_tJavaRow_13);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row27");
			  	}
			  	
 

ok_Hash.put("tJavaRow_13", true);
end_Hash.put("tJavaRow_13", System.currentTimeMillis());




/**
 * [tJavaRow_13 end ] stop
 */

	
	/**
	 * [tBufferOutput_2 end ] start
	 */

	

	
	
	currentComponent="tBufferOutput_2";
	
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row29");
			  	}
			  	
 

ok_Hash.put("tBufferOutput_2", true);
end_Hash.put("tBufferOutput_2", System.currentTimeMillis());




/**
 * [tBufferOutput_2 end ] stop
 */

	
	/**
	 * [tLogRow_1 end ] start
	 */

	

	
	
	currentComponent="tLogRow_1";
	
	


//////

                    
                    java.io.PrintStream consoleOut_tLogRow_1 = null;
                    if (globalMap.get("tLogRow_CONSOLE")!=null)
                    {
                    	consoleOut_tLogRow_1 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
                    }
                    else
                    {
                    	consoleOut_tLogRow_1 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
                    	globalMap.put("tLogRow_CONSOLE",consoleOut_tLogRow_1);
                    }
                    
                    consoleOut_tLogRow_1.println(util_tLogRow_1.format().toString());
                    consoleOut_tLogRow_1.flush();
//////
globalMap.put("tLogRow_1_NB_LINE",nb_line_tLogRow_1);

///////////////////////    			

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row30");
			  	}
			  	
 

ok_Hash.put("tLogRow_1", true);
end_Hash.put("tLogRow_1", System.currentTimeMillis());




/**
 * [tLogRow_1 end ] stop
 */









				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tLogCatcher_1 finally ] start
	 */

	

	
	
	currentComponent="tLogCatcher_1";
	
	

 



/**
 * [tLogCatcher_1 finally ] stop
 */

	
	/**
	 * [tJavaRow_13 finally ] start
	 */

	

	
	
	currentComponent="tJavaRow_13";
	
	

 



/**
 * [tJavaRow_13 finally ] stop
 */

	
	/**
	 * [tBufferOutput_2 finally ] start
	 */

	

	
	
	currentComponent="tBufferOutput_2";
	
	

 



/**
 * [tBufferOutput_2 finally ] stop
 */

	
	/**
	 * [tLogRow_1 finally ] start
	 */

	

	
	
	currentComponent="tLogRow_1";
	
	

 



/**
 * [tLogRow_1 finally ] stop
 */









				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tLogCatcher_1_SUBPROCESS_STATE", 1);
	}
	
    public String resuming_logs_dir_path = null;
    public String resuming_checkpoint_path = null;
    public String parent_part_launcher = null;
    private String resumeEntryMethodName = null;
    private boolean globalResumeTicket = false;

    public boolean watch = false;
    // portStats is null, it means don't execute the statistics
    public Integer portStats = null;
    public int portTraces = 4334;
    public String clientHost;
    public String defaultClientHost = "localhost";
    public String contextStr = "Default";
    public boolean isDefaultContext = true;
    public String pid = "0";
    public String rootPid = null;
    public String fatherPid = null;
    public String fatherNode = null;
    public long startTime = 0;
    public boolean isChildJob = false;
    public String log4jLevel = "";
    
    private boolean enableLogStash;

    private boolean execStat = true;

    private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
        protected java.util.Map<String, String> initialValue() {
            java.util.Map<String,String> threadRunResultMap = new java.util.HashMap<String, String>();
            threadRunResultMap.put("errorCode", null);
            threadRunResultMap.put("status", "");
            return threadRunResultMap;
        };
    };


    protected PropertiesWithType context_param = new PropertiesWithType();
    public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

    public String status= "";
    
    
    private final static java.util.Properties jobInfo = new java.util.Properties();
    private final static java.util.Map<String,String> mdcInfo = new java.util.HashMap<>();
    private final static java.util.concurrent.atomic.AtomicLong subJobPidCounter = new java.util.concurrent.atomic.AtomicLong();


    public static void main(String[] args){
        final CargarAportes CargarAportesClass = new CargarAportes();

        int exitCode = CargarAportesClass.runJobInTOS(args);

        System.exit(exitCode);
    }
	

	
	
	private void getjobInfo() {
		final String TEMPLATE_PATH = "src/main/templates/jobInfo_template.properties";
		final String BUILD_PATH = "../jobInfo.properties";
		final String path = this.getClass().getResource("").getPath();
		if(path.lastIndexOf("target") > 0) {
			final java.io.File templateFile = new java.io.File(
					path.substring(0, path.lastIndexOf("target")).concat(TEMPLATE_PATH));
			if (templateFile.exists()) {
				readJobInfo(templateFile);
				return;
			}
		}
			readJobInfo(new java.io.File(BUILD_PATH));
	}

    private void readJobInfo(java.io.File jobInfoFile){
	
        if(jobInfoFile.exists()) {
            try (java.io.InputStream is = new java.io.FileInputStream(jobInfoFile)) {
            	jobInfo.load(is);
            } catch (IOException e) {
            	 
                
            }
        }
    }


    public String[][] runJob(String[] args) {

        int exitCode = runJobInTOS(args);
        String[][] bufferValue = (String[][])globalBuffer.toArray(new String[globalBuffer.size()][]);

        return bufferValue;
    }

    public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;
    	
        		hastBufferOutput = true;
    	
        return hastBufferOutput;
    }

    public int runJobInTOS(String[] args) {
	   	// reset status
	   	status = "";
	   	
        String lastStr = "";
        for (String arg : args) {
            if (arg.equalsIgnoreCase("--context_param")) {
                lastStr = arg;
            } else if (lastStr.equals("")) {
                evalParam(arg);
            } else {
                evalParam(lastStr + " " + arg);
                lastStr = "";
            }
        }
        enableLogStash = "true".equalsIgnoreCase(System.getProperty("audit.enabled"));


		
		

        if(clientHost == null) {
            clientHost = defaultClientHost;
        }

        if(pid == null || "0".equals(pid)) {
            pid = TalendString.getAsciiRandomString(6);
        }


        if (rootPid==null) {
            rootPid = pid;
        }


        if (fatherPid==null) {
            fatherPid = pid;
        }else{
            isChildJob = true;
        }

        if (portStats != null) {
            // portStats = -1; //for testing
            if (portStats < 0 || portStats > 65535) {
                // issue:10869, the portStats is invalid, so this client socket can't open
                System.err.println("The statistics socket port " + portStats + " is invalid.");
                execStat = false;
            }
        } else {
            execStat = false;
        }
        boolean inOSGi = routines.system.BundleUtils.inOSGi();

        try {
            java.util.Dictionary<String, Object> jobProperties = null;
            if (inOSGi) {
                jobProperties = routines.system.BundleUtils.getJobProperties(jobName);
    
                if (jobProperties != null && jobProperties.get("context") != null) {
                    contextStr = (String)jobProperties.get("context");
                }
            }
            //call job/subjob with an existing context, like: --context=production. if without this parameter, there will use the default context instead.
            java.io.InputStream inContext = CargarAportes.class.getClassLoader().getResourceAsStream("afi_cargue_aportes/cargaraportes_0_1/contexts/" + contextStr + ".properties");
            if (inContext == null) {
                inContext = CargarAportes.class.getClassLoader().getResourceAsStream("config/contexts/" + contextStr + ".properties");
            }
            if (inContext != null) {
                try {
                    //defaultProps is in order to keep the original context value
                    if(context != null && context.isEmpty()) {
    	                defaultProps.load(inContext);
    	                if (inOSGi && jobProperties != null) {
                             java.util.Enumeration<String> keys = jobProperties.keys();
                             while (keys.hasMoreElements()) {
                                 String propKey = keys.nextElement();
                                 if (defaultProps.containsKey(propKey)) {
                                     defaultProps.put(propKey, (String) jobProperties.get(propKey));
                                 }
                             }
    	                }
    	                context = new ContextProperties(defaultProps);
                    }
                } finally {
                    inContext.close();
                }
            } else if (!isDefaultContext) {
                //print info and job continue to run, for case: context_param is not empty.
                System.err.println("Could not find the context " + contextStr);
            }
            
            if(!context_param.isEmpty()) {
                context.putAll(context_param);
				//set types for params from parentJobs
				for (Object key: context_param.keySet()){
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
            }
            class ContextProcessing {
                private void processContext_0() {
                        context.setContextType("Host", "id_String");
                        if(context.getStringValue("Host") == null) {
                            context.Host = null;
                        } else {
                            context.Host=(String) context.getProperty("Host");
                        }
                        context.setContextType("Port", "id_String");
                        if(context.getStringValue("Port") == null) {
                            context.Port = null;
                        } else {
                            context.Port=(String) context.getProperty("Port");
                        }
                        context.setContextType("Sid", "id_String");
                        if(context.getStringValue("Sid") == null) {
                            context.Sid = null;
                        } else {
                            context.Sid=(String) context.getProperty("Sid");
                        }
                        context.setContextType("User", "id_String");
                        if(context.getStringValue("User") == null) {
                            context.User = null;
                        } else {
                            context.User=(String) context.getProperty("User");
                        }
                        context.setContextType("Password", "id_String");
                        if(context.getStringValue("Password") == null) {
                            context.Password = null;
                        } else {
                            context.Password=(String) context.getProperty("Password");
                        }
                        context.setContextType("Contenido", "id_Object");
                        if(context.getStringValue("Contenido") == null) {
                            context.Contenido = null;
                        } else {
                            context.Contenido=(Object) context.getProperty("Contenido");
                        }
                        context.setContextType("Fila", "id_String");
                        if(context.getStringValue("Fila") == null) {
                            context.Fila = null;
                        } else {
                            context.Fila=(String) context.getProperty("Fila");
                        }
                        context.setContextType("TipoRegistro", "id_Character");
                        if(context.getStringValue("TipoRegistro") == null) {
                            context.TipoRegistro = null;
                        } else {
                            context.TipoRegistro= new java.text.StringCharacterIterator(context.getProperty("TipoRegistro")).first();
                        }
                        context.setContextType("TipoRegistro2", "id_Character");
                        if(context.getStringValue("TipoRegistro2") == null) {
                            context.TipoRegistro2 = null;
                        } else {
                            context.TipoRegistro2= new java.text.StringCharacterIterator(context.getProperty("TipoRegistro2")).first();
                        }
                        context.setContextType("ARCHIVOS_ID", "id_BigDecimal");
                        if(context.getStringValue("ARCHIVOS_ID") == null) {
                            context.ARCHIVOS_ID = null;
                        } else {
                            try{
                                context.ARCHIVOS_ID=routines.system.ParserUtils.parseTo_BigDecimal (context.getProperty("ARCHIVOS_ID"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "ARCHIVOS_ID", e.getMessage()));
                                context.ARCHIVOS_ID=null;
                            }
                        }
                        context.setContextType("Errores", "id_String");
                        if(context.getStringValue("Errores") == null) {
                            context.Errores = null;
                        } else {
                            context.Errores=(String) context.getProperty("Errores");
                        }
                        context.setContextType("ContadorRegistros", "id_Integer");
                        if(context.getStringValue("ContadorRegistros") == null) {
                            context.ContadorRegistros = null;
                        } else {
                            try{
                                context.ContadorRegistros=routines.system.ParserUtils.parseTo_Integer (context.getProperty("ContadorRegistros"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "ContadorRegistros", e.getMessage()));
                                context.ContadorRegistros=null;
                            }
                        }
                } 
                public void processAllContext() {
                        processContext_0();
                }
            }

            new ContextProcessing().processAllContext();
        } catch (java.io.IOException ie) {
            System.err.println("Could not load context "+contextStr);
            ie.printStackTrace();
        }

        // get context value from parent directly
        if (parentContextMap != null && !parentContextMap.isEmpty()) {if (parentContextMap.containsKey("Host")) {
                context.Host = (String) parentContextMap.get("Host");
            }if (parentContextMap.containsKey("Port")) {
                context.Port = (String) parentContextMap.get("Port");
            }if (parentContextMap.containsKey("Sid")) {
                context.Sid = (String) parentContextMap.get("Sid");
            }if (parentContextMap.containsKey("User")) {
                context.User = (String) parentContextMap.get("User");
            }if (parentContextMap.containsKey("Password")) {
                context.Password = (String) parentContextMap.get("Password");
            }if (parentContextMap.containsKey("Contenido")) {
                context.Contenido = (Object) parentContextMap.get("Contenido");
            }if (parentContextMap.containsKey("Fila")) {
                context.Fila = (String) parentContextMap.get("Fila");
            }if (parentContextMap.containsKey("TipoRegistro")) {
                context.TipoRegistro = (Character) parentContextMap.get("TipoRegistro");
            }if (parentContextMap.containsKey("TipoRegistro2")) {
                context.TipoRegistro2 = (Character) parentContextMap.get("TipoRegistro2");
            }if (parentContextMap.containsKey("ARCHIVOS_ID")) {
                context.ARCHIVOS_ID = (BigDecimal) parentContextMap.get("ARCHIVOS_ID");
            }if (parentContextMap.containsKey("Errores")) {
                context.Errores = (String) parentContextMap.get("Errores");
            }if (parentContextMap.containsKey("ContadorRegistros")) {
                context.ContadorRegistros = (Integer) parentContextMap.get("ContadorRegistros");
            }
        }

        //Resume: init the resumeUtil
        resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
        resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
        resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
        //Resume: jobStart
        resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","","","",resumeUtil.convertToJsonText(context,ContextProperties.class,parametersToEncrypt));


if(execStat) {
    try {
        runStat.openSocket(!isChildJob);
        runStat.setAllPID(rootPid, fatherPid, pid, jobName);
        runStat.startThreadStat(clientHost, portStats);
        runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
    } catch (java.io.IOException ioException) {
        ioException.printStackTrace();
    }
}



	
	    java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
	    globalMap.put("concurrentHashMap", concurrentHashMap);
	

    long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
    long endUsedMemory = 0;
    long end = 0;

    startTime = System.currentTimeMillis();


this.globalResumeTicket = true;//to run tPreJob





this.globalResumeTicket = false;//to run others jobs

try {
errorCode = null;tFileInputXML_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tFileInputXML_1) {
globalMap.put("tFileInputXML_1_SUBPROCESS_STATE", -1);

e_tFileInputXML_1.printStackTrace();

}

this.globalResumeTicket = true;//to run tPostJob




        end = System.currentTimeMillis();

        if (watch) {
            System.out.println((end-startTime)+" milliseconds");
        }

        endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
        if (false) {
            System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : CargarAportes");
        }



if (execStat) {
    runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
    runStat.stopThreadStat();
}
    int returnCode = 0;


    if(errorCode == null) {
         returnCode = status != null && status.equals("failure") ? 1 : 0;
    } else {
         returnCode = errorCode.intValue();
    }
    resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","" + returnCode,"","","");
    resumeUtil.flush();


    return returnCode;

  }

    // only for OSGi env
    public void destroy() {
    closeSqlDbConnections();


    }



    private void closeSqlDbConnections() {
        try {
            Object obj_conn;
            obj_conn = globalMap.remove("conn_tOracleConnection_1");
            if (null != obj_conn) {
                ((java.sql.Connection) obj_conn).close();
            }
        } catch (java.lang.Exception e) {
        }
    }











    private java.util.Map<String, Object> getSharedConnections4REST() {
        java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();
            connections.put("conn_tOracleConnection_1", globalMap.get("conn_tOracleConnection_1"));






        return connections;
    }

    private void evalParam(String arg) {
        if (arg.startsWith("--resuming_logs_dir_path")) {
            resuming_logs_dir_path = arg.substring(25);
        } else if (arg.startsWith("--resuming_checkpoint_path")) {
            resuming_checkpoint_path = arg.substring(27);
        } else if (arg.startsWith("--parent_part_launcher")) {
            parent_part_launcher = arg.substring(23);
        } else if (arg.startsWith("--watch")) {
            watch = true;
        } else if (arg.startsWith("--stat_port=")) {
            String portStatsStr = arg.substring(12);
            if (portStatsStr != null && !portStatsStr.equals("null")) {
                portStats = Integer.parseInt(portStatsStr);
            }
        } else if (arg.startsWith("--trace_port=")) {
            portTraces = Integer.parseInt(arg.substring(13));
        } else if (arg.startsWith("--client_host=")) {
            clientHost = arg.substring(14);
        } else if (arg.startsWith("--context=")) {
            contextStr = arg.substring(10);
            isDefaultContext = false;
        } else if (arg.startsWith("--father_pid=")) {
            fatherPid = arg.substring(13);
        } else if (arg.startsWith("--root_pid=")) {
            rootPid = arg.substring(11);
        } else if (arg.startsWith("--father_node=")) {
            fatherNode = arg.substring(14);
        } else if (arg.startsWith("--pid=")) {
            pid = arg.substring(6);
        } else if (arg.startsWith("--context_type")) {
            String keyValue = arg.substring(15);
			int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.setContextType(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }

            }

		} else if (arg.startsWith("--context_param")) {
            String keyValue = arg.substring(16);
            int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }
            }
        } else if (arg.startsWith("--context_file")) {
        	String keyValue = arg.substring(15);
        	String filePath = new String(java.util.Base64.getDecoder().decode(keyValue));
        	java.nio.file.Path contextFile = java.nio.file.Paths.get(filePath);
            try (java.io.BufferedReader reader = java.nio.file.Files.newBufferedReader(contextFile)) {
                String line;
                while ((line = reader.readLine()) != null) {
                    int index = -1;
                    if ( (index = line.indexOf('=')) > -1) {
							if (line.startsWith("--context_param")) {
								if ("id_Password".equals(context_param.getContextType(line.substring(16, index)))) {
									context_param.put(line.substring(16, index), routines.system.PasswordEncryptUtil.decryptPassword(
											line.substring(index + 1)));
								} else {
									context_param.put(line.substring(16, index), line.substring(index + 1));
								}
							}else {//--context_type
								context_param.setContextType(line.substring(15, index), line.substring(index + 1));
							}
                    }
                }
            } catch (java.io.IOException e) {
            	System.err.println("Could not load the context file: " + filePath);
                e.printStackTrace();
            }
        } else if (arg.startsWith("--log4jLevel=")) {
            log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--audit.enabled") && arg.contains("=")) {//for trunjob call
		    final int equal = arg.indexOf('=');
			final String key = arg.substring("--".length(), equal);
			System.setProperty(key, arg.substring(equal + 1));
		}
    }
    
    private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

    private final String[][] escapeChars = {
        {"\\\\","\\"},{"\\n","\n"},{"\\'","\'"},{"\\r","\r"},
        {"\\f","\f"},{"\\b","\b"},{"\\t","\t"}
        };
    private String replaceEscapeChars (String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0],currIndex);
				if (index>=0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0], strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
    }

    public Integer getErrorCode() {
        return errorCode;
    }


    public String getStatus() {
        return status;
    }

    ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 *     473402 characters generated by Talend Open Studio for ESB 
 *     on the October 28, 2024, 10:59:36 AM COT
 ************************************************************************************************/