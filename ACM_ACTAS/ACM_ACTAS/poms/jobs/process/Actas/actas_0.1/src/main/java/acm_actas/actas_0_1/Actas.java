// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for ESB
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


package acm_actas.actas_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.GenerarUUID;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;
 




	//the import part of tJavaRow_1
	//import java.util.List;
import java.text.NumberFormat;
import java.util.Locale;


	//the import part of tJava_2
	//import GenerarUUID;

	//the import part of tJava_3
	//import java.util.List;

	//the import part of tJavaRow_3
	//import java.util.List;

	//the import part of tJava_4
	//import java.util.List;

	//the import part of tJavaRow_4
	//import java.util.List;

	//the import part of tJavaRow_5
	//import java.util.List;

	//the import part of tJavaRow_2
	//import java.util.List;

	//the import part of tJava_1
	//import java.util.List;


@SuppressWarnings("unused")

/**
 * Job: Actas Purpose: <br>
 * Description:  <br>
 * @author jorgejlhc@gmail.com
 * @version 8.8.8.20240722_1936-SNAPSHOT
 * @status 
 */
public class Actas implements TalendJob {

protected static void logIgnoredError(String message, Throwable cause) {
       System.err.println(message);
       if (cause != null) {
               cause.printStackTrace();
       }

}


	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}
	
	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	
	private final static String utf8Charset = "UTF-8";
	

	//contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String,String> propertyTypes = new java.util.HashMap<>();
		
		public PropertiesWithType(java.util.Properties properties){
			super(properties);
		}
		public PropertiesWithType(){
			super();
		}
		
		public void setContextType(String key, String type) {
			propertyTypes.put(key,type);
		}
	
		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}	
	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();
		

	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties){
			super(properties);
		}
		public ContextProperties(){
			super();
		}

		public void synchronizeContext(){
			
			if(ACTA_ID != null){
				
					this.setProperty("ACTA_ID", ACTA_ID.toString());
				
			}
			
			if(CIUDAD != null){
				
					this.setProperty("CIUDAD", CIUDAD.toString());
				
			}
			
			if(CONTADOR != null){
				
					this.setProperty("CONTADOR", CONTADOR.toString());
				
			}
			
			if(DOCUMENTO != null){
				
					this.setProperty("DOCUMENTO", DOCUMENTO.toString());
				
			}
			
			if(ESTABLECIMIENTO != null){
				
					this.setProperty("ESTABLECIMIENTO", ESTABLECIMIENTO.toString());
				
			}
			
			if(FACTURA_ID != null){
				
					this.setProperty("FACTURA_ID", FACTURA_ID.toString());
				
			}
			
			if(FECHA_HORA_FIN_EJECUCION != null){
				
					String pattern_FECHA_HORA_FIN_EJECUCION = "yyyy-MM-dd HH:mm:ss";
					String value_FECHA_HORA_FIN_EJECUCION = "";
					String[] parts_FECHA_HORA_FIN_EJECUCION = value_FECHA_HORA_FIN_EJECUCION.split(";");
					if(parts_FECHA_HORA_FIN_EJECUCION.length > 1){
						pattern_FECHA_HORA_FIN_EJECUCION = parts_FECHA_HORA_FIN_EJECUCION[0];
						this.setProperty("FECHA_HORA_FIN_EJECUCION", pattern_FECHA_HORA_FIN_EJECUCION + ";" + FormatterUtils.format_Date(FECHA_HORA_FIN_EJECUCION, pattern_FECHA_HORA_FIN_EJECUCION));
					}else{
						this.setProperty("FECHA_HORA_FIN_EJECUCION", FormatterUtils.format_Date(FECHA_HORA_FIN_EJECUCION, pattern_FECHA_HORA_FIN_EJECUCION));
					}
				
			}
			
			if(FECHA_HORA_INICIO_EJECUCION != null){
				
					String pattern_FECHA_HORA_INICIO_EJECUCION = "yyyy-MM-dd HH:mm:ss";
					String value_FECHA_HORA_INICIO_EJECUCION = "";
					String[] parts_FECHA_HORA_INICIO_EJECUCION = value_FECHA_HORA_INICIO_EJECUCION.split(";");
					if(parts_FECHA_HORA_INICIO_EJECUCION.length > 1){
						pattern_FECHA_HORA_INICIO_EJECUCION = parts_FECHA_HORA_INICIO_EJECUCION[0];
						this.setProperty("FECHA_HORA_INICIO_EJECUCION", pattern_FECHA_HORA_INICIO_EJECUCION + ";" + FormatterUtils.format_Date(FECHA_HORA_INICIO_EJECUCION, pattern_FECHA_HORA_INICIO_EJECUCION));
					}else{
						this.setProperty("FECHA_HORA_INICIO_EJECUCION", FormatterUtils.format_Date(FECHA_HORA_INICIO_EJECUCION, pattern_FECHA_HORA_INICIO_EJECUCION));
					}
				
			}
			
			if(HAUDITORIA_ID != null){
				
					this.setProperty("HAUDITORIA_ID", HAUDITORIA_ID.toString());
				
			}
			
			if(ID != null){
				
					this.setProperty("ID", ID.toString());
				
			}
			
			if(NOMBRE_ACTA != null){
				
					this.setProperty("NOMBRE_ACTA", NOMBRE_ACTA.toString());
				
			}
			
			if(RECEPCION_ID != null){
				
					this.setProperty("RECEPCION_ID", RECEPCION_ID.toString());
				
			}
			
			if(SIGLA != null){
				
					this.setProperty("SIGLA", SIGLA.toString());
				
			}
			
			if(SUMADOR_NETO != null){
				
					this.setProperty("SUMADOR_NETO", SUMADOR_NETO.toString());
				
			}
			
			if(TACTA != null){
				
					this.setProperty("TACTA", TACTA.toString());
				
			}
			
			if(TDOCUMENTO != null){
				
					this.setProperty("TDOCUMENTO", TDOCUMENTO.toString());
				
			}
			
			if(USUARIO != null){
				
					this.setProperty("USUARIO", USUARIO.toString());
				
			}
			
			if(VACEPTADO != null){
				
					this.setProperty("VACEPTADO", VACEPTADO.toString());
				
			}
			
			if(VCOBRADO != null){
				
					this.setProperty("VCOBRADO", VCOBRADO.toString());
				
			}
			
			if(VFACTURADO != null){
				
					this.setProperty("VFACTURADO", VFACTURADO.toString());
				
			}
			
			if(VGLOSADO != null){
				
					this.setProperty("VGLOSADO", VGLOSADO.toString());
				
			}
			
			if(VNETO != null){
				
					this.setProperty("VNETO", VNETO.toString());
				
			}
			
			if(VRATIFICADA != null){
				
					this.setProperty("VRATIFICADA", VRATIFICADA.toString());
				
			}
			
			if(VSOPORTADO != null){
				
					this.setProperty("VSOPORTADO", VSOPORTADO.toString());
				
			}
			
			if(db_origen_AdditionalParams != null){
				
					this.setProperty("db_origen_AdditionalParams", db_origen_AdditionalParams.toString());
				
			}
			
			if(db_origen_Login != null){
				
					this.setProperty("db_origen_Login", db_origen_Login.toString());
				
			}
			
			if(db_origen_Password != null){
				
					this.setProperty("db_origen_Password", db_origen_Password.toString());
				
			}
			
			if(db_origen_Port != null){
				
					this.setProperty("db_origen_Port", db_origen_Port.toString());
				
			}
			
			if(db_origen_Schema != null){
				
					this.setProperty("db_origen_Schema", db_origen_Schema.toString());
				
			}
			
			if(db_origen_Server != null){
				
					this.setProperty("db_origen_Server", db_origen_Server.toString());
				
			}
			
			if(db_origen_ServiceName != null){
				
					this.setProperty("db_origen_ServiceName", db_origen_ServiceName.toString());
				
			}
			
			if(db_destino_AdditionalParams != null){
				
					this.setProperty("db_destino_AdditionalParams", db_destino_AdditionalParams.toString());
				
			}
			
			if(db_destino_Login != null){
				
					this.setProperty("db_destino_Login", db_destino_Login.toString());
				
			}
			
			if(db_destino_Password != null){
				
					this.setProperty("db_destino_Password", db_destino_Password.toString());
				
			}
			
			if(db_destino_Port != null){
				
					this.setProperty("db_destino_Port", db_destino_Port.toString());
				
			}
			
			if(db_destino_Schema != null){
				
					this.setProperty("db_destino_Schema", db_destino_Schema.toString());
				
			}
			
			if(db_destino_Server != null){
				
					this.setProperty("db_destino_Server", db_destino_Server.toString());
				
			}
			
			if(db_destino_ServiceName != null){
				
					this.setProperty("db_destino_ServiceName", db_destino_ServiceName.toString());
				
			}
			
			if(archivoSalida != null){
				
					this.setProperty("archivoSalida", archivoSalida.toString());
				
			}
			
			if(fileSystem_Area != null){
				
					this.setProperty("fileSystem_Area", fileSystem_Area.toString());
				
			}
			
			if(fileSystem_Path != null){
				
					this.setProperty("fileSystem_Path", fileSystem_Path.toString());
				
			}
			
			if(fileSystem_Report != null){
				
					this.setProperty("fileSystem_Report", fileSystem_Report.toString());
				
			}
			
			if(fileSystem_URL != null){
				
					this.setProperty("fileSystem_URL", fileSystem_URL.toString());
				
			}
			
			if(ACTUALIZACION_TOTAL != null){
				
					this.setProperty("ACTUALIZACION_TOTAL", ACTUALIZACION_TOTAL.toString());
				
			}
			
			if(BODEGA != null){
				
					this.setProperty("BODEGA", BODEGA.toString());
				
			}
			
			if(ERROR != null){
				
					this.setProperty("ERROR", ERROR.toString());
				
			}
			
			if(ESTADO != null){
				
					this.setProperty("ESTADO", ESTADO.toString());
				
			}
			
			if(ESTADO_EXEC != null){
				
					this.setProperty("ESTADO_EXEC", ESTADO_EXEC.toString());
				
			}
			
			if(FANTERIOR != null){
				
					this.setProperty("FANTERIOR", FANTERIOR.toString());
				
			}
			
			if(FECHA_EJECUCION != null){
				
					this.setProperty("FECHA_EJECUCION", FECHA_EJECUCION.toString());
				
			}
			
			if(FECHA_TERMINACION != null){
				
					this.setProperty("FECHA_TERMINACION", FECHA_TERMINACION.toString());
				
			}
			
			if(HORA != null){
				
					this.setProperty("HORA", HORA.toString());
				
			}
			
			if(HORA_FINAL != null){
				
					this.setProperty("HORA_FINAL", HORA_FINAL.toString());
				
			}
			
			if(HORA_INICIO != null){
				
					this.setProperty("HORA_INICIO", HORA_INICIO.toString());
				
			}
			
			if(ID_SOLICITUD != null){
				
					this.setProperty("ID_SOLICITUD", ID_SOLICITUD.toString());
				
			}
			
			if(JOB != null){
				
					this.setProperty("JOB", JOB.toString());
				
			}
			
			if(LAST_DAYS != null){
				
					this.setProperty("LAST_DAYS", LAST_DAYS.toString());
				
			}
			
			if(LOGS_ERROR != null){
				
					this.setProperty("LOGS_ERROR", LOGS_ERROR.toString());
				
			}
			
			if(LOGS_EXECUTION != null){
				
					this.setProperty("LOGS_EXECUTION", LOGS_EXECUTION.toString());
				
			}
			
			if(MINUTOS != null){
				
					this.setProperty("MINUTOS", MINUTOS.toString());
				
			}
			
			if(ORIGEN != null){
				
					this.setProperty("ORIGEN", ORIGEN.toString());
				
			}
			
			if(PATH != null){
				
					this.setProperty("PATH", PATH.toString());
				
			}
			
			if(JasperAmbiente != null){
				
					this.setProperty("JasperAmbiente", JasperAmbiente.toString());
				
			}
			
			if(JasperModulo != null){
				
					this.setProperty("JasperModulo", JasperModulo.toString());
				
			}
			
			if(JasperParameters != null){
				
					this.setProperty("JasperParameters", JasperParameters.toString());
				
			}
			
			if(JasperPassword != null){
				
					this.setProperty("JasperPassword", JasperPassword.toString());
				
			}
			
			if(JasperReporte != null){
				
					this.setProperty("JasperReporte", JasperReporte.toString());
				
			}
			
			if(JasperServer != null){
				
					this.setProperty("JasperServer", JasperServer.toString());
				
			}
			
			if(JasperURI != null){
				
					this.setProperty("JasperURI", JasperURI.toString());
				
			}
			
			if(JasperUser != null){
				
					this.setProperty("JasperUser", JasperUser.toString());
				
			}
			
			if(mail_Message != null){
				
					this.setProperty("mail_Message", mail_Message.toString());
				
			}
			
			if(mail_Password != null){
				
					this.setProperty("mail_Password", mail_Password.toString());
				
			}
			
			if(mail_Sendername != null){
				
					this.setProperty("mail_Sendername", mail_Sendername.toString());
				
			}
			
			if(mail_SMTP_Host != null){
				
					this.setProperty("mail_SMTP_Host", mail_SMTP_Host.toString());
				
			}
			
			if(mail_SMTP_Port != null){
				
					this.setProperty("mail_SMTP_Port", mail_SMTP_Port.toString());
				
			}
			
			if(mail_Subject != null){
				
					this.setProperty("mail_Subject", mail_Subject.toString());
				
			}
			
			if(mail_To != null){
				
					this.setProperty("mail_To", mail_To.toString());
				
			}
			
			if(mail_User != null){
				
					this.setProperty("mail_User", mail_User.toString());
				
			}
			
		}
		
		//if the stored or passed value is "<TALEND_NULL>" string, it mean null
		public String getStringValue(String key) {
			String origin_value = this.getProperty(key);
			if(NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY.equals(origin_value)) {
				return null;
			}
			return origin_value;
		}

public BigDecimal ACTA_ID;
public BigDecimal getACTA_ID(){
	return this.ACTA_ID;
}
public String CIUDAD;
public String getCIUDAD(){
	return this.CIUDAD;
}
public Integer CONTADOR;
public Integer getCONTADOR(){
	return this.CONTADOR;
}
public String DOCUMENTO;
public String getDOCUMENTO(){
	return this.DOCUMENTO;
}
public String ESTABLECIMIENTO;
public String getESTABLECIMIENTO(){
	return this.ESTABLECIMIENTO;
}
public BigDecimal FACTURA_ID;
public BigDecimal getFACTURA_ID(){
	return this.FACTURA_ID;
}
public java.util.Date FECHA_HORA_FIN_EJECUCION;
public java.util.Date getFECHA_HORA_FIN_EJECUCION(){
	return this.FECHA_HORA_FIN_EJECUCION;
}
public java.util.Date FECHA_HORA_INICIO_EJECUCION;
public java.util.Date getFECHA_HORA_INICIO_EJECUCION(){
	return this.FECHA_HORA_INICIO_EJECUCION;
}
public String HAUDITORIA_ID;
public String getHAUDITORIA_ID(){
	return this.HAUDITORIA_ID;
}
public BigDecimal ID;
public BigDecimal getID(){
	return this.ID;
}
public String NOMBRE_ACTA;
public String getNOMBRE_ACTA(){
	return this.NOMBRE_ACTA;
}
public String RECEPCION_ID;
public String getRECEPCION_ID(){
	return this.RECEPCION_ID;
}
public String SIGLA;
public String getSIGLA(){
	return this.SIGLA;
}
public BigDecimal SUMADOR_NETO;
public BigDecimal getSUMADOR_NETO(){
	return this.SUMADOR_NETO;
}
public String TACTA;
public String getTACTA(){
	return this.TACTA;
}
public BigDecimal TDOCUMENTO;
public BigDecimal getTDOCUMENTO(){
	return this.TDOCUMENTO;
}
public String USUARIO;
public String getUSUARIO(){
	return this.USUARIO;
}
public BigDecimal VACEPTADO;
public BigDecimal getVACEPTADO(){
	return this.VACEPTADO;
}
public BigDecimal VCOBRADO;
public BigDecimal getVCOBRADO(){
	return this.VCOBRADO;
}
public BigDecimal VFACTURADO;
public BigDecimal getVFACTURADO(){
	return this.VFACTURADO;
}
public BigDecimal VGLOSADO;
public BigDecimal getVGLOSADO(){
	return this.VGLOSADO;
}
public BigDecimal VNETO;
public BigDecimal getVNETO(){
	return this.VNETO;
}
public BigDecimal VRATIFICADA;
public BigDecimal getVRATIFICADA(){
	return this.VRATIFICADA;
}
public BigDecimal VSOPORTADO;
public BigDecimal getVSOPORTADO(){
	return this.VSOPORTADO;
}
public String db_origen_AdditionalParams;
public String getDb_origen_AdditionalParams(){
	return this.db_origen_AdditionalParams;
}
public String db_origen_Login;
public String getDb_origen_Login(){
	return this.db_origen_Login;
}
public java.lang.String db_origen_Password;
public java.lang.String getDb_origen_Password(){
	return this.db_origen_Password;
}
public String db_origen_Port;
public String getDb_origen_Port(){
	return this.db_origen_Port;
}
public String db_origen_Schema;
public String getDb_origen_Schema(){
	return this.db_origen_Schema;
}
public String db_origen_Server;
public String getDb_origen_Server(){
	return this.db_origen_Server;
}
public String db_origen_ServiceName;
public String getDb_origen_ServiceName(){
	return this.db_origen_ServiceName;
}
public String db_destino_AdditionalParams;
public String getDb_destino_AdditionalParams(){
	return this.db_destino_AdditionalParams;
}
public String db_destino_Login;
public String getDb_destino_Login(){
	return this.db_destino_Login;
}
public java.lang.String db_destino_Password;
public java.lang.String getDb_destino_Password(){
	return this.db_destino_Password;
}
public String db_destino_Port;
public String getDb_destino_Port(){
	return this.db_destino_Port;
}
public String db_destino_Schema;
public String getDb_destino_Schema(){
	return this.db_destino_Schema;
}
public String db_destino_Server;
public String getDb_destino_Server(){
	return this.db_destino_Server;
}
public String db_destino_ServiceName;
public String getDb_destino_ServiceName(){
	return this.db_destino_ServiceName;
}
public String archivoSalida;
public String getArchivoSalida(){
	return this.archivoSalida;
}
public String fileSystem_Area;
public String getFileSystem_Area(){
	return this.fileSystem_Area;
}
public String fileSystem_Path;
public String getFileSystem_Path(){
	return this.fileSystem_Path;
}
public String fileSystem_Report;
public String getFileSystem_Report(){
	return this.fileSystem_Report;
}
public String fileSystem_URL;
public String getFileSystem_URL(){
	return this.fileSystem_URL;
}
public Boolean ACTUALIZACION_TOTAL;
public Boolean getACTUALIZACION_TOTAL(){
	return this.ACTUALIZACION_TOTAL;
}
public String BODEGA;
public String getBODEGA(){
	return this.BODEGA;
}
public String ERROR;
public String getERROR(){
	return this.ERROR;
}
public String ESTADO;
public String getESTADO(){
	return this.ESTADO;
}
public String ESTADO_EXEC;
public String getESTADO_EXEC(){
	return this.ESTADO_EXEC;
}
public String FANTERIOR;
public String getFANTERIOR(){
	return this.FANTERIOR;
}
public String FECHA_EJECUCION;
public String getFECHA_EJECUCION(){
	return this.FECHA_EJECUCION;
}
public String FECHA_TERMINACION;
public String getFECHA_TERMINACION(){
	return this.FECHA_TERMINACION;
}
public Integer HORA;
public Integer getHORA(){
	return this.HORA;
}
public String HORA_FINAL;
public String getHORA_FINAL(){
	return this.HORA_FINAL;
}
public String HORA_INICIO;
public String getHORA_INICIO(){
	return this.HORA_INICIO;
}
public Integer ID_SOLICITUD;
public Integer getID_SOLICITUD(){
	return this.ID_SOLICITUD;
}
public String JOB;
public String getJOB(){
	return this.JOB;
}
public Integer LAST_DAYS;
public Integer getLAST_DAYS(){
	return this.LAST_DAYS;
}
public String LOGS_ERROR;
public String getLOGS_ERROR(){
	return this.LOGS_ERROR;
}
public String LOGS_EXECUTION;
public String getLOGS_EXECUTION(){
	return this.LOGS_EXECUTION;
}
public Integer MINUTOS;
public Integer getMINUTOS(){
	return this.MINUTOS;
}
public String ORIGEN;
public String getORIGEN(){
	return this.ORIGEN;
}
public String PATH;
public String getPATH(){
	return this.PATH;
}
public String JasperAmbiente;
public String getJasperAmbiente(){
	return this.JasperAmbiente;
}
public String JasperModulo;
public String getJasperModulo(){
	return this.JasperModulo;
}
public String JasperParameters;
public String getJasperParameters(){
	return this.JasperParameters;
}
public String JasperPassword;
public String getJasperPassword(){
	return this.JasperPassword;
}
public String JasperReporte;
public String getJasperReporte(){
	return this.JasperReporte;
}
public String JasperServer;
public String getJasperServer(){
	return this.JasperServer;
}
public String JasperURI;
public String getJasperURI(){
	return this.JasperURI;
}
public String JasperUser;
public String getJasperUser(){
	return this.JasperUser;
}
public String mail_Message;
public String getMail_Message(){
	return this.mail_Message;
}
public java.lang.String mail_Password;
public java.lang.String getMail_Password(){
	return this.mail_Password;
}
public String mail_Sendername;
public String getMail_Sendername(){
	return this.mail_Sendername;
}
public String mail_SMTP_Host;
public String getMail_SMTP_Host(){
	return this.mail_SMTP_Host;
}
public String mail_SMTP_Port;
public String getMail_SMTP_Port(){
	return this.mail_SMTP_Port;
}
public String mail_Subject;
public String getMail_Subject(){
	return this.mail_Subject;
}
public String mail_To;
public String getMail_To(){
	return this.mail_To;
}
public String mail_User;
public String getMail_User(){
	return this.mail_User;
}
	}
			
	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.
	public ContextProperties getContext() {
		return this.context;
	}
	private final String jobVersion = "0.1";
	private final String jobName = "Actas";
	private final String projectName = "ACM_ACTAS";
	public Integer errorCode = null;
	private String currentComponent = "";
	
	private String cLabel =  null;
	
		private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
        private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();
	
		private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
		public  final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();
	

private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";
	
	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(), new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}
	
	public void setDataSourceReferences(List serviceReferences) throws Exception{
		
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		java.util.Map<String, javax.sql.DataSource> dataSources = new java.util.HashMap<String, javax.sql.DataSource>();
		
		for (java.util.Map.Entry<String, javax.sql.DataSource> entry : BundleUtils.getServices(serviceReferences,  javax.sql.DataSource.class).entrySet()) {
                    dataSources.put(entry.getKey(), entry.getValue());
                    talendDataSources.put(entry.getKey(), new routines.system.TalendDataSource(entry.getValue()));
		}

		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}

	LogCatcherUtils tLogCatcher_1 = new LogCatcherUtils();

private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

public String getExceptionStackTrace() {
	if ("failure".equals(this.getStatus())) {
		errorMessagePS.flush();
		return baos.toString();
	}
	return null;
}

private Exception exception;

public Exception getException() {
	if ("failure".equals(this.getStatus())) {
		return this.exception;
	}
	return null;
}

private class TalendException extends Exception {

	private static final long serialVersionUID = 1L;

	private java.util.Map<String, Object> globalMap = null;
	private Exception e = null;
	
	private String currentComponent = null;
	private String cLabel =  null;
	
	private String virtualComponentName = null;
	
	public void setVirtualComponentName (String virtualComponentName){
		this.virtualComponentName = virtualComponentName;
	}

	private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
		this.currentComponent= errorComponent;
		this.globalMap = globalMap;
		this.e = e;
	}
	
	private TalendException(Exception e, String errorComponent, String errorComponentLabel, final java.util.Map<String, Object> globalMap) {
		this(e, errorComponent, globalMap);
		this.cLabel = errorComponentLabel;
	}

	public Exception getException() {
		return this.e;
	}

	public String getCurrentComponent() {
		return this.currentComponent;
	}

	
    public String getExceptionCauseMessage(Exception e){
        Throwable cause = e;
        String message = null;
        int i = 10;
        while (null != cause && 0 < i--) {
            message = cause.getMessage();
            if (null == message) {
                cause = cause.getCause();
            } else {
                break;          
            }
        }
        if (null == message) {
            message = e.getClass().getName();
        }   
        return message;
    }

	@Override
	public void printStackTrace() {
		if (!(e instanceof TalendException || e instanceof TDieException)) {
			if(virtualComponentName!=null && currentComponent.indexOf(virtualComponentName+"_")==0){
				globalMap.put(virtualComponentName+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			}
			globalMap.put(currentComponent+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
		}
		if (!(e instanceof TDieException)) {
			if(e instanceof TalendException){
				e.printStackTrace();
			} else {
				e.printStackTrace();
				e.printStackTrace(errorMessagePS);
				Actas.this.exception = e;
			}
		}
		if (!(e instanceof TalendException)) {
		try {
			for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
				if (m.getName().compareTo(currentComponent + "_error") == 0) {
					m.invoke(Actas.this, new Object[] { e , currentComponent, globalMap});
					break;
				}
			}

			if(!(e instanceof TDieException)){
				tLogCatcher_1.addMessage("Java Exception", currentComponent, 6, e.getClass().getName() + ":" + e.getMessage(), 1);
				tLogCatcher_1Process(globalMap);
			}
			} catch (TalendException e) {
				// do nothing
			
		} catch (Exception e) {
			this.e.printStackTrace();
		}
		}
	}
}

			public void tPrejob_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPrejob_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputXML_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputXML_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaRow_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputXML_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleConnection_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
						try {
							
								if(this.execStat){
									runStat.updateStatOnConnection("OnComponentError2", 0, "error");
								}
							
							
								errorCode = null;
								tDie_1Process(globalMap);
								if (!"failure".equals(status)) {
									status = "end";
								}
								

						} catch (Exception e) {
							e.printStackTrace();
						}
						
					tOracleConnection_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDie_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDie_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFlowToIterate_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHttpRequest_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHttpRequest_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tJava_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tUnite_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaRow_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputExcel_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFixedFlowInput_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFixedFlowInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputExcel_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFixedFlowInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tJava_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFixedFlowInput_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFixedFlowInput_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleOutput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFixedFlowInput_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFixedFlowInput_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFixedFlowInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleOutput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFixedFlowInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaRow_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputExcel_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFixedFlowInput_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFixedFlowInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputExcel_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFixedFlowInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputExcel_7_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_7_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_7_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaRow_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_7_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tUnite_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaRow_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputExcel_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFixedFlowInput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFixedFlowInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputExcel_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFixedFlowInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_8_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogCatcher_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tLogCatcher_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputDelimited_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tLogCatcher_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRunJob_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tLogCatcher_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostjob_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostjob_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tJava_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleClose_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleClose_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFixedFlowInput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFixedFlowInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputDelimited_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFixedFlowInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tSortRow_1_SortOut_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
							tSortRow_1_SortIn_error(exception, errorComponent, globalMap);
						
						}
					
			public void tSortRow_1_SortIn_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPrejob_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileInputXML_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleConnection_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDie_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleInput_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tHttpRequest_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_3_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleInput_4_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFixedFlowInput_3_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_4_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFixedFlowInput_6_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFixedFlowInput_5_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleInput_5_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFixedFlowInput_4_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleInput_6_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleInput_7_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleInput_3_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFixedFlowInput_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tLogCatcher_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tPostjob_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleClose_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFixedFlowInput_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
	









public void tPrejob_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPrejob_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tPrejob_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tPrejob_1", false);
		start_Hash.put("tPrejob_1", System.currentTimeMillis());
		
	
	currentComponent="tPrejob_1";
	
	
		int tos_count_tPrejob_1 = 0;
		

 



/**
 * [tPrejob_1 begin ] stop
 */
	
	/**
	 * [tPrejob_1 main ] start
	 */

	

	
	
	currentComponent="tPrejob_1";
	
	

 


	tos_count_tPrejob_1++;

/**
 * [tPrejob_1 main ] stop
 */
	
	/**
	 * [tPrejob_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tPrejob_1";
	
	

 



/**
 * [tPrejob_1 process_data_begin ] stop
 */
	
	/**
	 * [tPrejob_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tPrejob_1";
	
	

 



/**
 * [tPrejob_1 process_data_end ] stop
 */
	
	/**
	 * [tPrejob_1 end ] start
	 */

	

	
	
	currentComponent="tPrejob_1";
	
	

 

ok_Hash.put("tPrejob_1", true);
end_Hash.put("tPrejob_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk3", 0, "ok");
				}
				tFileInputXML_1Process(globalMap);



/**
 * [tPrejob_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPrejob_1 finally ] start
	 */

	

	
	
	currentComponent="tPrejob_1";
	
	

 



/**
 * [tPrejob_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPrejob_1_SUBPROCESS_STATE", 1);
	}
	


public static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
    final static byte[] commonByteArrayLock_ACM_ACTAS_Actas = new byte[0];
    static byte[] commonByteArray_ACM_ACTAS_Actas = new byte[0];

	
			    public String Host;

				public String getHost () {
					return this.Host;
				}

				public Boolean HostIsNullable(){
				    return true;
				}
				public Boolean HostIsKey(){
				    return false;
				}
				public Integer HostLength(){
				    return 13;
				}
				public Integer HostPrecision(){
				    return 0;
				}
				public String HostDefault(){
				
					return null;
				
				}
				public String HostComment(){
				
				    return "";
				
				}
				public String HostPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String HostOriginalDbColumnName(){
				
					return "Host";
				
				}

				
			    public String Port;

				public String getPort () {
					return this.Port;
				}

				public Boolean PortIsNullable(){
				    return true;
				}
				public Boolean PortIsKey(){
				    return false;
				}
				public Integer PortLength(){
				    return 4;
				}
				public Integer PortPrecision(){
				    return 0;
				}
				public String PortDefault(){
				
					return null;
				
				}
				public String PortComment(){
				
				    return "";
				
				}
				public String PortPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String PortOriginalDbColumnName(){
				
					return "Port";
				
				}

				
			    public String Sid;

				public String getSid () {
					return this.Sid;
				}

				public Boolean SidIsNullable(){
				    return true;
				}
				public Boolean SidIsKey(){
				    return false;
				}
				public Integer SidLength(){
				    return 4;
				}
				public Integer SidPrecision(){
				    return 0;
				}
				public String SidDefault(){
				
					return null;
				
				}
				public String SidComment(){
				
				    return "";
				
				}
				public String SidPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String SidOriginalDbColumnName(){
				
					return "Sid";
				
				}

				
			    public String ServiceName;

				public String getServiceName () {
					return this.ServiceName;
				}

				public Boolean ServiceNameIsNullable(){
				    return true;
				}
				public Boolean ServiceNameIsKey(){
				    return false;
				}
				public Integer ServiceNameLength(){
				    return 9;
				}
				public Integer ServiceNamePrecision(){
				    return 0;
				}
				public String ServiceNameDefault(){
				
					return null;
				
				}
				public String ServiceNameComment(){
				
				    return "";
				
				}
				public String ServiceNamePattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String ServiceNameOriginalDbColumnName(){
				
					return "ServiceName";
				
				}

				
			    public String Schema;

				public String getSchema () {
					return this.Schema;
				}

				public Boolean SchemaIsNullable(){
				    return true;
				}
				public Boolean SchemaIsKey(){
				    return false;
				}
				public Integer SchemaLength(){
				    return 8;
				}
				public Integer SchemaPrecision(){
				    return 0;
				}
				public String SchemaDefault(){
				
					return null;
				
				}
				public String SchemaComment(){
				
				    return "";
				
				}
				public String SchemaPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String SchemaOriginalDbColumnName(){
				
					return "Schema";
				
				}

				
			    public String User;

				public String getUser () {
					return this.User;
				}

				public Boolean UserIsNullable(){
				    return true;
				}
				public Boolean UserIsKey(){
				    return false;
				}
				public Integer UserLength(){
				    return 8;
				}
				public Integer UserPrecision(){
				    return 0;
				}
				public String UserDefault(){
				
					return null;
				
				}
				public String UserComment(){
				
				    return "";
				
				}
				public String UserPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String UserOriginalDbColumnName(){
				
					return "User";
				
				}

				
			    public String Password;

				public String getPassword () {
					return this.Password;
				}

				public Boolean PasswordIsNullable(){
				    return true;
				}
				public Boolean PasswordIsKey(){
				    return false;
				}
				public Integer PasswordLength(){
				    return 11;
				}
				public Integer PasswordPrecision(){
				    return 0;
				}
				public String PasswordDefault(){
				
					return null;
				
				}
				public String PasswordComment(){
				
				    return "";
				
				}
				public String PasswordPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String PasswordOriginalDbColumnName(){
				
					return "Password";
				
				}

				
			    public String PathStorage;

				public String getPathStorage () {
					return this.PathStorage;
				}

				public Boolean PathStorageIsNullable(){
				    return true;
				}
				public Boolean PathStorageIsKey(){
				    return false;
				}
				public Integer PathStorageLength(){
				    return 44;
				}
				public Integer PathStoragePrecision(){
				    return 0;
				}
				public String PathStorageDefault(){
				
					return null;
				
				}
				public String PathStorageComment(){
				
				    return "";
				
				}
				public String PathStoragePattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String PathStorageOriginalDbColumnName(){
				
					return "PathStorage";
				
				}

				
			    public String SMTPHost;

				public String getSMTPHost () {
					return this.SMTPHost;
				}

				public Boolean SMTPHostIsNullable(){
				    return true;
				}
				public Boolean SMTPHostIsKey(){
				    return false;
				}
				public Integer SMTPHostLength(){
				    return 14;
				}
				public Integer SMTPHostPrecision(){
				    return 0;
				}
				public String SMTPHostDefault(){
				
					return null;
				
				}
				public String SMTPHostComment(){
				
				    return "";
				
				}
				public String SMTPHostPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String SMTPHostOriginalDbColumnName(){
				
					return "SMTPHost";
				
				}

				
			    public String SMTPPort;

				public String getSMTPPort () {
					return this.SMTPPort;
				}

				public Boolean SMTPPortIsNullable(){
				    return true;
				}
				public Boolean SMTPPortIsKey(){
				    return false;
				}
				public Integer SMTPPortLength(){
				    return 3;
				}
				public Integer SMTPPortPrecision(){
				    return 0;
				}
				public String SMTPPortDefault(){
				
					return null;
				
				}
				public String SMTPPortComment(){
				
				    return "";
				
				}
				public String SMTPPortPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String SMTPPortOriginalDbColumnName(){
				
					return "SMTPPort";
				
				}

				
			    public String UsernameMail;

				public String getUsernameMail () {
					return this.UsernameMail;
				}

				public Boolean UsernameMailIsNullable(){
				    return true;
				}
				public Boolean UsernameMailIsKey(){
				    return false;
				}
				public Integer UsernameMailLength(){
				    return 34;
				}
				public Integer UsernameMailPrecision(){
				    return 0;
				}
				public String UsernameMailDefault(){
				
					return null;
				
				}
				public String UsernameMailComment(){
				
				    return "";
				
				}
				public String UsernameMailPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String UsernameMailOriginalDbColumnName(){
				
					return "UsernameMail";
				
				}

				
			    public String PasswordMail;

				public String getPasswordMail () {
					return this.PasswordMail;
				}

				public Boolean PasswordMailIsNullable(){
				    return true;
				}
				public Boolean PasswordMailIsKey(){
				    return false;
				}
				public Integer PasswordMailLength(){
				    return 13;
				}
				public Integer PasswordMailPrecision(){
				    return 0;
				}
				public String PasswordMailDefault(){
				
					return null;
				
				}
				public String PasswordMailComment(){
				
				    return "";
				
				}
				public String PasswordMailPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String PasswordMailOriginalDbColumnName(){
				
					return "PasswordMail";
				
				}

				
			    public String JasperServer;

				public String getJasperServer () {
					return this.JasperServer;
				}

				public Boolean JasperServerIsNullable(){
				    return true;
				}
				public Boolean JasperServerIsKey(){
				    return false;
				}
				public Integer JasperServerLength(){
				    return 15;
				}
				public Integer JasperServerPrecision(){
				    return 0;
				}
				public String JasperServerDefault(){
				
					return null;
				
				}
				public String JasperServerComment(){
				
				    return "";
				
				}
				public String JasperServerPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String JasperServerOriginalDbColumnName(){
				
					return "JasperServer";
				
				}

				
			    public String JasperUser;

				public String getJasperUser () {
					return this.JasperUser;
				}

				public Boolean JasperUserIsNullable(){
				    return true;
				}
				public Boolean JasperUserIsKey(){
				    return false;
				}
				public Integer JasperUserLength(){
				    return 9;
				}
				public Integer JasperUserPrecision(){
				    return 0;
				}
				public String JasperUserDefault(){
				
					return null;
				
				}
				public String JasperUserComment(){
				
				    return "";
				
				}
				public String JasperUserPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String JasperUserOriginalDbColumnName(){
				
					return "JasperUser";
				
				}

				
			    public String JasperPassword;

				public String getJasperPassword () {
					return this.JasperPassword;
				}

				public Boolean JasperPasswordIsNullable(){
				    return true;
				}
				public Boolean JasperPasswordIsKey(){
				    return false;
				}
				public Integer JasperPasswordLength(){
				    return 9;
				}
				public Integer JasperPasswordPrecision(){
				    return 0;
				}
				public String JasperPasswordDefault(){
				
					return null;
				
				}
				public String JasperPasswordComment(){
				
				    return "";
				
				}
				public String JasperPasswordPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String JasperPasswordOriginalDbColumnName(){
				
					return "JasperPassword";
				
				}

				
			    public String JasperAmbiente;

				public String getJasperAmbiente () {
					return this.JasperAmbiente;
				}

				public Boolean JasperAmbienteIsNullable(){
				    return true;
				}
				public Boolean JasperAmbienteIsKey(){
				    return false;
				}
				public Integer JasperAmbienteLength(){
				    return 8;
				}
				public Integer JasperAmbientePrecision(){
				    return 0;
				}
				public String JasperAmbienteDefault(){
				
					return null;
				
				}
				public String JasperAmbienteComment(){
				
				    return "";
				
				}
				public String JasperAmbientePattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String JasperAmbienteOriginalDbColumnName(){
				
					return "JasperAmbiente";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_ACTAS_Actas.length) {
				if(length < 1024 && commonByteArray_ACM_ACTAS_Actas.length == 0) {
   					commonByteArray_ACM_ACTAS_Actas = new byte[1024];
				} else {
   					commonByteArray_ACM_ACTAS_Actas = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ACM_ACTAS_Actas, 0, length);
			strReturn = new String(commonByteArray_ACM_ACTAS_Actas, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_ACTAS_Actas.length) {
				if(length < 1024 && commonByteArray_ACM_ACTAS_Actas.length == 0) {
   					commonByteArray_ACM_ACTAS_Actas = new byte[1024];
				} else {
   					commonByteArray_ACM_ACTAS_Actas = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_ACM_ACTAS_Actas, 0, length);
			strReturn = new String(commonByteArray_ACM_ACTAS_Actas, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ACM_ACTAS_Actas) {

        	try {

        		int length = 0;
		
					this.Host = readString(dis);
					
					this.Port = readString(dis);
					
					this.Sid = readString(dis);
					
					this.ServiceName = readString(dis);
					
					this.Schema = readString(dis);
					
					this.User = readString(dis);
					
					this.Password = readString(dis);
					
					this.PathStorage = readString(dis);
					
					this.SMTPHost = readString(dis);
					
					this.SMTPPort = readString(dis);
					
					this.UsernameMail = readString(dis);
					
					this.PasswordMail = readString(dis);
					
					this.JasperServer = readString(dis);
					
					this.JasperUser = readString(dis);
					
					this.JasperPassword = readString(dis);
					
					this.JasperAmbiente = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ACM_ACTAS_Actas) {

        	try {

        		int length = 0;
		
					this.Host = readString(dis);
					
					this.Port = readString(dis);
					
					this.Sid = readString(dis);
					
					this.ServiceName = readString(dis);
					
					this.Schema = readString(dis);
					
					this.User = readString(dis);
					
					this.Password = readString(dis);
					
					this.PathStorage = readString(dis);
					
					this.SMTPHost = readString(dis);
					
					this.SMTPPort = readString(dis);
					
					this.UsernameMail = readString(dis);
					
					this.PasswordMail = readString(dis);
					
					this.JasperServer = readString(dis);
					
					this.JasperUser = readString(dis);
					
					this.JasperPassword = readString(dis);
					
					this.JasperAmbiente = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.Host,dos);
					
					// String
				
						writeString(this.Port,dos);
					
					// String
				
						writeString(this.Sid,dos);
					
					// String
				
						writeString(this.ServiceName,dos);
					
					// String
				
						writeString(this.Schema,dos);
					
					// String
				
						writeString(this.User,dos);
					
					// String
				
						writeString(this.Password,dos);
					
					// String
				
						writeString(this.PathStorage,dos);
					
					// String
				
						writeString(this.SMTPHost,dos);
					
					// String
				
						writeString(this.SMTPPort,dos);
					
					// String
				
						writeString(this.UsernameMail,dos);
					
					// String
				
						writeString(this.PasswordMail,dos);
					
					// String
				
						writeString(this.JasperServer,dos);
					
					// String
				
						writeString(this.JasperUser,dos);
					
					// String
				
						writeString(this.JasperPassword,dos);
					
					// String
				
						writeString(this.JasperAmbiente,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.Host,dos);
					
					// String
				
						writeString(this.Port,dos);
					
					// String
				
						writeString(this.Sid,dos);
					
					// String
				
						writeString(this.ServiceName,dos);
					
					// String
				
						writeString(this.Schema,dos);
					
					// String
				
						writeString(this.User,dos);
					
					// String
				
						writeString(this.Password,dos);
					
					// String
				
						writeString(this.PathStorage,dos);
					
					// String
				
						writeString(this.SMTPHost,dos);
					
					// String
				
						writeString(this.SMTPPort,dos);
					
					// String
				
						writeString(this.UsernameMail,dos);
					
					// String
				
						writeString(this.PasswordMail,dos);
					
					// String
				
						writeString(this.JasperServer,dos);
					
					// String
				
						writeString(this.JasperUser,dos);
					
					// String
				
						writeString(this.JasperPassword,dos);
					
					// String
				
						writeString(this.JasperAmbiente,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Host="+Host);
		sb.append(",Port="+Port);
		sb.append(",Sid="+Sid);
		sb.append(",ServiceName="+ServiceName);
		sb.append(",Schema="+Schema);
		sb.append(",User="+User);
		sb.append(",Password="+Password);
		sb.append(",PathStorage="+PathStorage);
		sb.append(",SMTPHost="+SMTPHost);
		sb.append(",SMTPPort="+SMTPPort);
		sb.append(",UsernameMail="+UsernameMail);
		sb.append(",PasswordMail="+PasswordMail);
		sb.append(",JasperServer="+JasperServer);
		sb.append(",JasperUser="+JasperUser);
		sb.append(",JasperPassword="+JasperPassword);
		sb.append(",JasperAmbiente="+JasperAmbiente);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tFileInputXML_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileInputXML_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row1Struct row1 = new row1Struct();




	
	/**
	 * [tJavaRow_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaRow_1", false);
		start_Hash.put("tJavaRow_1", System.currentTimeMillis());
		
	
	currentComponent="tJavaRow_1";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row1");
					}
				
		int tos_count_tJavaRow_1 = 0;
		

int nb_line_tJavaRow_1 = 0;

 



/**
 * [tJavaRow_1 begin ] stop
 */



	
	/**
	 * [tFileInputXML_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputXML_1", false);
		start_Hash.put("tFileInputXML_1", System.currentTimeMillis());
		
	
	currentComponent="tFileInputXML_1";
	
	
		int tos_count_tFileInputXML_1 = 0;
		

	

int nb_line_tFileInputXML_1 = 0;

	String os_tFileInputXML_1 = System.getProperty("os.name").toLowerCase();
	boolean isWindows_tFileInputXML_1=false;
	if(os_tFileInputXML_1.indexOf("windows") > -1 || os_tFileInputXML_1.indexOf("nt") > -1){
		isWindows_tFileInputXML_1=true;
	}
class XML_API_tFileInputXML_1{
	public boolean isDefNull(String[] node) throws javax.xml.transform.TransformerException {
        if(node[0] != null && node[1]!=null && ("true").equals(node[1])){
        	return true;
        }
        return false;
    }

    public boolean isMissing(String[] node) throws javax.xml.transform.TransformerException {
        return node[0] == null ? true : false;
    }

    public boolean isEmpty(String[] node) throws javax.xml.transform.TransformerException {
        if(node[0]!=null ){
        	return node[0].length() == 0;
        }
        return false;
    }
}
XML_API_tFileInputXML_1 xml_api_tFileInputXML_1 = new XML_API_tFileInputXML_1();

String[] queryPaths_tFileInputXML_1 = new String[]{	
	"Host"		
	,"Host"+"/@xsi:nil"	
	,"Port"		
	,"Port"+"/@xsi:nil"	
	,"Sid"		
	,"Sid"+"/@xsi:nil"	
	,"ServiceName"		
	,"ServiceName"+"/@xsi:nil"	
	,"Schema"		
	,"Schema"+"/@xsi:nil"	
	,"User"		
	,"User"+"/@xsi:nil"	
	,"Password"		
	,"Password"+"/@xsi:nil"	
	,"PathStorage"		
	,"PathStorage"+"/@xsi:nil"	
	,"SMTPHost"		
	,"SMTPHost"+"/@xsi:nil"	
	,"SMTPPort"		
	,"SMTPPort"+"/@xsi:nil"	
	,"UsernameMail"		
	,"UsernameMail"+"/@xsi:nil"	
	,"PasswordMail"		
	,"PasswordMail"+"/@xsi:nil"	
	,"JasperServer"		
	,"JasperServer"+"/@xsi:nil"	
	,"JasperUser"		
	,"JasperUser"+"/@xsi:nil"	
	,"JasperPassword"		
	,"JasperPassword"+"/@xsi:nil"	
	,"JasperAmbiente"		
	,"JasperAmbiente"+"/@xsi:nil"
};

boolean[] asXMLs_tFileInputXML_1 = new boolean[]{	
	false		
	,false	
	,false		
	,false	
	,false		
	,false	
	,false		
	,false	
	,false		
	,false	
	,false		
	,false	
	,false		
	,false	
	,false		
	,false	
	,false		
	,false	
	,false		
	,false	
	,false		
	,false	
	,false		
	,false	
	,false		
	,false	
	,false		
	,false	
	,false		
	,false	
	,false		
	,false
};

String str_tFileInputXML_1 = "";
String[] node_tFileInputXML_1 = null;
org.talend.xml.sax.SAXLooper looper_tFileInputXML_1 = new org.talend.xml.sax.SAXLooper("/connectionStrings",queryPaths_tFileInputXML_1,asXMLs_tFileInputXML_1);
looper_tFileInputXML_1.setEncoding("UTF-8");
Object filename_tFileInputXML_1 = null;
try {
	filename_tFileInputXML_1 = context.ORIGEN;
} catch(java.lang.Exception e) {
globalMap.put("tFileInputXML_1_ERROR_MESSAGE",e.getMessage());
	
	System.err.println(e.getMessage());
	
}
if(filename_tFileInputXML_1 != null && filename_tFileInputXML_1 instanceof String && filename_tFileInputXML_1.toString().startsWith("//")){
	if (!isWindows_tFileInputXML_1){
		filename_tFileInputXML_1 = filename_tFileInputXML_1.toString().replaceFirst("//","/");
	}
}
if(filename_tFileInputXML_1 instanceof java.io.InputStream){
	looper_tFileInputXML_1.parse((java.io.InputStream)filename_tFileInputXML_1);
}else{
	looper_tFileInputXML_1.parse(String.valueOf(filename_tFileInputXML_1));
}
java.util.Iterator<java.util.Map<String, String>> it_tFileInputXML_1  = looper_tFileInputXML_1.iterator();
while (it_tFileInputXML_1.hasNext()) {
	java.util.Map<String, String> row_tFileInputXML_1 = it_tFileInputXML_1.next();
	if (nb_line_tFileInputXML_1>=50) {
	
			looper_tFileInputXML_1.stopRead();
	
		break;
	}
		nb_line_tFileInputXML_1++;
		
	row1 = null;			
	boolean whetherReject_tFileInputXML_1 = false;
	row1 = new row1Struct();
	try{
	str_tFileInputXML_1 = row_tFileInputXML_1.get("Host");
	node_tFileInputXML_1 = new String[]{str_tFileInputXML_1,row_tFileInputXML_1.get("Host"+"/@xsi:nil")};
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row1.Host =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row1.Host ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row1.Host =null;
									}else{
		row1.Host = str_tFileInputXML_1;
	}
	str_tFileInputXML_1 = row_tFileInputXML_1.get("Port");
	node_tFileInputXML_1 = new String[]{str_tFileInputXML_1,row_tFileInputXML_1.get("Port"+"/@xsi:nil")};
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row1.Port =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row1.Port ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row1.Port =null;
									}else{
		row1.Port = str_tFileInputXML_1;
	}
	str_tFileInputXML_1 = row_tFileInputXML_1.get("Sid");
	node_tFileInputXML_1 = new String[]{str_tFileInputXML_1,row_tFileInputXML_1.get("Sid"+"/@xsi:nil")};
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row1.Sid =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row1.Sid ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row1.Sid =null;
									}else{
		row1.Sid = str_tFileInputXML_1;
	}
	str_tFileInputXML_1 = row_tFileInputXML_1.get("ServiceName");
	node_tFileInputXML_1 = new String[]{str_tFileInputXML_1,row_tFileInputXML_1.get("ServiceName"+"/@xsi:nil")};
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row1.ServiceName =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row1.ServiceName ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row1.ServiceName =null;
									}else{
		row1.ServiceName = str_tFileInputXML_1;
	}
	str_tFileInputXML_1 = row_tFileInputXML_1.get("Schema");
	node_tFileInputXML_1 = new String[]{str_tFileInputXML_1,row_tFileInputXML_1.get("Schema"+"/@xsi:nil")};
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row1.Schema =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row1.Schema ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row1.Schema =null;
									}else{
		row1.Schema = str_tFileInputXML_1;
	}
	str_tFileInputXML_1 = row_tFileInputXML_1.get("User");
	node_tFileInputXML_1 = new String[]{str_tFileInputXML_1,row_tFileInputXML_1.get("User"+"/@xsi:nil")};
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row1.User =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row1.User ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row1.User =null;
									}else{
		row1.User = str_tFileInputXML_1;
	}
	str_tFileInputXML_1 = row_tFileInputXML_1.get("Password");
	node_tFileInputXML_1 = new String[]{str_tFileInputXML_1,row_tFileInputXML_1.get("Password"+"/@xsi:nil")};
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row1.Password =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row1.Password ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row1.Password =null;
									}else{
		row1.Password = str_tFileInputXML_1;
	}
	str_tFileInputXML_1 = row_tFileInputXML_1.get("PathStorage");
	node_tFileInputXML_1 = new String[]{str_tFileInputXML_1,row_tFileInputXML_1.get("PathStorage"+"/@xsi:nil")};
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row1.PathStorage =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row1.PathStorage ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row1.PathStorage =null;
									}else{
		row1.PathStorage = str_tFileInputXML_1;
	}
	str_tFileInputXML_1 = row_tFileInputXML_1.get("SMTPHost");
	node_tFileInputXML_1 = new String[]{str_tFileInputXML_1,row_tFileInputXML_1.get("SMTPHost"+"/@xsi:nil")};
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row1.SMTPHost =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row1.SMTPHost ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row1.SMTPHost =null;
									}else{
		row1.SMTPHost = str_tFileInputXML_1;
	}
	str_tFileInputXML_1 = row_tFileInputXML_1.get("SMTPPort");
	node_tFileInputXML_1 = new String[]{str_tFileInputXML_1,row_tFileInputXML_1.get("SMTPPort"+"/@xsi:nil")};
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row1.SMTPPort =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row1.SMTPPort ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row1.SMTPPort =null;
									}else{
		row1.SMTPPort = str_tFileInputXML_1;
	}
	str_tFileInputXML_1 = row_tFileInputXML_1.get("UsernameMail");
	node_tFileInputXML_1 = new String[]{str_tFileInputXML_1,row_tFileInputXML_1.get("UsernameMail"+"/@xsi:nil")};
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row1.UsernameMail =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row1.UsernameMail ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row1.UsernameMail =null;
									}else{
		row1.UsernameMail = str_tFileInputXML_1;
	}
	str_tFileInputXML_1 = row_tFileInputXML_1.get("PasswordMail");
	node_tFileInputXML_1 = new String[]{str_tFileInputXML_1,row_tFileInputXML_1.get("PasswordMail"+"/@xsi:nil")};
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row1.PasswordMail =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row1.PasswordMail ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row1.PasswordMail =null;
									}else{
		row1.PasswordMail = str_tFileInputXML_1;
	}
	str_tFileInputXML_1 = row_tFileInputXML_1.get("JasperServer");
	node_tFileInputXML_1 = new String[]{str_tFileInputXML_1,row_tFileInputXML_1.get("JasperServer"+"/@xsi:nil")};
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row1.JasperServer =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row1.JasperServer ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row1.JasperServer =null;
									}else{
		row1.JasperServer = str_tFileInputXML_1;
	}
	str_tFileInputXML_1 = row_tFileInputXML_1.get("JasperUser");
	node_tFileInputXML_1 = new String[]{str_tFileInputXML_1,row_tFileInputXML_1.get("JasperUser"+"/@xsi:nil")};
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row1.JasperUser =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row1.JasperUser ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row1.JasperUser =null;
									}else{
		row1.JasperUser = str_tFileInputXML_1;
	}
	str_tFileInputXML_1 = row_tFileInputXML_1.get("JasperPassword");
	node_tFileInputXML_1 = new String[]{str_tFileInputXML_1,row_tFileInputXML_1.get("JasperPassword"+"/@xsi:nil")};
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row1.JasperPassword =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row1.JasperPassword ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row1.JasperPassword =null;
									}else{
		row1.JasperPassword = str_tFileInputXML_1;
	}
	str_tFileInputXML_1 = row_tFileInputXML_1.get("JasperAmbiente");
	node_tFileInputXML_1 = new String[]{str_tFileInputXML_1,row_tFileInputXML_1.get("JasperAmbiente"+"/@xsi:nil")};
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row1.JasperAmbiente =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row1.JasperAmbiente ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row1.JasperAmbiente =null;
									}else{
		row1.JasperAmbiente = str_tFileInputXML_1;
	} 
			
    } catch (java.lang.Exception e) {
globalMap.put("tFileInputXML_1_ERROR_MESSAGE",e.getMessage());
        whetherReject_tFileInputXML_1 = true;
                System.err.println(e.getMessage());
                row1 = null;
    }
			
			

 



/**
 * [tFileInputXML_1 begin ] stop
 */
	
	/**
	 * [tFileInputXML_1 main ] start
	 */

	

	
	
	currentComponent="tFileInputXML_1";
	
	

 


	tos_count_tFileInputXML_1++;

/**
 * [tFileInputXML_1 main ] stop
 */
	
	/**
	 * [tFileInputXML_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileInputXML_1";
	
	

 



/**
 * [tFileInputXML_1 process_data_begin ] stop
 */
// Start of branch "row1"
if(row1 != null) { 



	
	/**
	 * [tJavaRow_1 main ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row1"
						
						);
					}
					

    //Guarda en variables de contexto los parametros de conexión a la bd saludsis
context.db_origen_Server = row1.Host;
context.db_origen_Port = row1.Port;
context.db_origen_ServiceName = row1.ServiceName;
context.db_origen_Schema = row1.Schema;
context.db_origen_Login = row1.User;
context.db_origen_Password = row1.Password;

System.out.println("Server: " + context.db_origen_Server);
System.out.println("Port:  " + context.db_origen_Port);
System.out.println("Service Nanme: " + context.db_origen_ServiceName);
System.out.println("Schema: " + context.db_origen_Schema);
System.out.println("Login: " + context.db_origen_Login );
System.out.println("Password: " + context.db_origen_Password);

//Guarda en variables de contexto la fecha de ejecución y la hora de inicio
context.FECHA_HORA_INICIO_EJECUCION = new Date();
context.ESTADO_EXEC = "Fail" ;
context.FECHA_EJECUCION = TalendDate.getDate("DD/MM/YYYY");
context.HORA_INICIO = TalendDate.getDate("HH:mm:ss");
context.JOB = "Inicial";

//Imprime en consola el job, la fecha de ejecución y la hora de inicio
System.out.println(context.JOB+" :-Start: "+context.FECHA_EJECUCION+" "+context.HORA_INICIO);
//context.FECHA_EJECUCION = " a los " + TalendDate.getDate("DD") + " días del mes de " + TalendDate.getDate("MM") + " de " + TalendDate.getDate("YYYY");

// ALMACENAMIENTO EN VARIBALE DE CONTEXTO LA CONFIGURACIÓN DEL SERVIDOR DE JASPERSOFT

context.JasperServer = row1.JasperServer;
context.JasperUser = row1.JasperUser;
context.JasperModulo = "ACM";
context.JasperPassword = row1.JasperPassword;
context.JasperAmbiente = row1.JasperAmbiente;


//ALMACENAMIENTO EN VARIABLES DE CONTEXTO DE LA CONFIGURACIÓN DEL FILE SYSTEM
context.fileSystem_Path=row1.PathStorage;

System.out.println(context.fileSystem_Path);

// ALMACENAMIENTO EN VARIABLES DE CONTEXTO DE LA CONFIGURACIÓN DEL EMAIL
//context.mail_SMTP_Host=row1.SMTPHost;
//context.mail_SMTP_Port=row1.SMTPPort;
//context.mail_User=row1.UsernameMail;
//context.mail_Password=row1.PasswordMail;

context.VFACTURADO = new BigDecimal(0);
context.VGLOSADO   = new BigDecimal(0);
context.VCOBRADO   = new BigDecimal(0);
context.VNETO = new BigDecimal(0);
context.SUMADOR_NETO = new BigDecimal(0);
    nb_line_tJavaRow_1++;   

 


	tos_count_tJavaRow_1++;

/**
 * [tJavaRow_1 main ] stop
 */
	
	/**
	 * [tJavaRow_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";
	
	

 



/**
 * [tJavaRow_1 process_data_begin ] stop
 */
	
	/**
	 * [tJavaRow_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";
	
	

 



/**
 * [tJavaRow_1 process_data_end ] stop
 */

} // End of branch "row1"




	
	/**
	 * [tFileInputXML_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileInputXML_1";
	
	

 



/**
 * [tFileInputXML_1 process_data_end ] stop
 */
	
	/**
	 * [tFileInputXML_1 end ] start
	 */

	

	
	
	currentComponent="tFileInputXML_1";
	
	


	}
	try {
		looper_tFileInputXML_1.handleTaskResponse();
	} catch(java.lang.Exception e) {
globalMap.put("tFileInputXML_1_ERROR_MESSAGE",e.getMessage());
		if(!(e.getCause() instanceof org.talend.xml.sax.exception.EnoughDataException))
	
		
		System.err.println(e.getMessage());	
	
	}
	globalMap.put("tFileInputXML_1_NB_LINE",nb_line_tFileInputXML_1);

	

 

ok_Hash.put("tFileInputXML_1", true);
end_Hash.put("tFileInputXML_1", System.currentTimeMillis());




/**
 * [tFileInputXML_1 end ] stop
 */

	
	/**
	 * [tJavaRow_1 end ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";
	
	

globalMap.put("tJavaRow_1_NB_LINE",nb_line_tJavaRow_1);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row1");
			  	}
			  	
 

ok_Hash.put("tJavaRow_1", true);
end_Hash.put("tJavaRow_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk4", 0, "ok");
				}
				tOracleConnection_1Process(globalMap);



/**
 * [tJavaRow_1 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileInputXML_1 finally ] start
	 */

	

	
	
	currentComponent="tFileInputXML_1";
	
	

 



/**
 * [tFileInputXML_1 finally ] stop
 */

	
	/**
	 * [tJavaRow_1 finally ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";
	
	

 



/**
 * [tJavaRow_1 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileInputXML_1_SUBPROCESS_STATE", 1);
	}
	


public void tOracleConnection_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleConnection_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tOracleConnection_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleConnection_1", false);
		start_Hash.put("tOracleConnection_1", System.currentTimeMillis());
		
	
	currentComponent="tOracleConnection_1";
	
	
		int tos_count_tOracleConnection_1 = 0;
		
	

	
        String url_tOracleConnection_1 = "jdbc:oracle:thin:@(description=(address=(protocol=tcp)(host=" + context.db_origen_Server + ")(port=" + context.db_origen_Port + "))(connect_data=(service_name=" + context.db_origen_ServiceName + ")))";
    	globalMap.put("connectionType_" + "tOracleConnection_1", "ORACLE_SERVICE_NAME");
	String dbUser_tOracleConnection_1 = context.db_origen_Login;
	
	
		
	final String decryptedPassword_tOracleConnection_1 = context.db_origen_Password; 
		String dbPwd_tOracleConnection_1 = decryptedPassword_tOracleConnection_1;
	
	
	java.sql.Connection conn_tOracleConnection_1 = null;
	
		
			String driverClass_tOracleConnection_1 = "oracle.jdbc.OracleDriver";
			java.lang.Class jdbcclazz_tOracleConnection_1 = java.lang.Class.forName(driverClass_tOracleConnection_1);
			globalMap.put("driverClass_tOracleConnection_1", driverClass_tOracleConnection_1);
		
			java.util.Properties atnParamsPrope_tOracleConnection_1 = new java.util.Properties();
			    atnParamsPrope_tOracleConnection_1.put("user",dbUser_tOracleConnection_1);
			    atnParamsPrope_tOracleConnection_1.put("password",dbPwd_tOracleConnection_1);
			if(context.db_origen_AdditionalParams != null && !"\"\"".equals(context.db_origen_AdditionalParams) && !"".equals(context.db_origen_AdditionalParams)){
                atnParamsPrope_tOracleConnection_1.load(new java.io.ByteArrayInputStream(context.db_origen_AdditionalParams.replace("&", "\n").getBytes()));
            }
         
			conn_tOracleConnection_1 = java.sql.DriverManager.getConnection(url_tOracleConnection_1, atnParamsPrope_tOracleConnection_1);

		globalMap.put("conn_tOracleConnection_1", conn_tOracleConnection_1);
	if (null != conn_tOracleConnection_1) {
		
			conn_tOracleConnection_1.setAutoCommit(false);
	}
        globalMap.put("host_" + "tOracleConnection_1",context.db_origen_Server);
        globalMap.put("port_" + "tOracleConnection_1",context.db_origen_Port);
        globalMap.put("dbname_" + "tOracleConnection_1",context.db_origen_ServiceName);

	globalMap.put("dbschema_" + "tOracleConnection_1", context.db_origen_Schema);
	globalMap.put("username_" + "tOracleConnection_1",context.db_origen_Login);
	globalMap.put("password_" + "tOracleConnection_1",dbPwd_tOracleConnection_1);

 



/**
 * [tOracleConnection_1 begin ] stop
 */
	
	/**
	 * [tOracleConnection_1 main ] start
	 */

	

	
	
	currentComponent="tOracleConnection_1";
	
	

 


	tos_count_tOracleConnection_1++;

/**
 * [tOracleConnection_1 main ] stop
 */
	
	/**
	 * [tOracleConnection_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleConnection_1";
	
	

 



/**
 * [tOracleConnection_1 process_data_begin ] stop
 */
	
	/**
	 * [tOracleConnection_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleConnection_1";
	
	

 



/**
 * [tOracleConnection_1 process_data_end ] stop
 */
	
	/**
	 * [tOracleConnection_1 end ] start
	 */

	

	
	
	currentComponent="tOracleConnection_1";
	
	

 

ok_Hash.put("tOracleConnection_1", true);
end_Hash.put("tOracleConnection_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk5", 0, "ok");
				}
				tOracleInput_1Process(globalMap);



/**
 * [tOracleConnection_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleConnection_1 finally ] start
	 */

	

	
	
	currentComponent="tOracleConnection_1";
	
	

 



/**
 * [tOracleConnection_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleConnection_1_SUBPROCESS_STATE", 1);
	}
	


public void tDie_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDie_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tDie_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDie_1", false);
		start_Hash.put("tDie_1", System.currentTimeMillis());
		
	
	currentComponent="tDie_1";
	
	
		int tos_count_tDie_1 = 0;
		

 



/**
 * [tDie_1 begin ] stop
 */
	
	/**
	 * [tDie_1 main ] start
	 */

	

	
	
	currentComponent="tDie_1";
	
	

	try {
				tLogCatcher_1.addMessage("tDie", "tDie_1", 5, "the end is near", 4);
				tLogCatcher_1Process(globalMap);
				
	globalMap.put("tDie_1_DIE_PRIORITY", 5);
	System.err.println("the end is near");
	
	globalMap.put("tDie_1_DIE_MESSAGE", "the end is near");
	globalMap.put("tDie_1_DIE_MESSAGES", "the end is near");
	
	} catch (Exception | Error e_tDie_1) {
	    globalMap.put("tDie_1_ERROR_MESSAGE",e_tDie_1.getMessage());
		logIgnoredError(String.format("tDie_1 - tDie failed to log message due to internal error: %s", e_tDie_1), e_tDie_1);
	}
	
	currentComponent = "tDie_1";
	status = "failure";
        errorCode = new Integer(4);
        globalMap.put("tDie_1_DIE_CODE", errorCode);        

    
	if(true){	
		TDieException e_tDie_1 = new TDieException();

		

		throw e_tDie_1;
	}

 


	tos_count_tDie_1++;

/**
 * [tDie_1 main ] stop
 */
	
	/**
	 * [tDie_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDie_1";
	
	

 



/**
 * [tDie_1 process_data_begin ] stop
 */
	
	/**
	 * [tDie_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDie_1";
	
	

 



/**
 * [tDie_1 process_data_end ] stop
 */
	
	/**
	 * [tDie_1 end ] start
	 */

	

	
	
	currentComponent="tDie_1";
	
	

 

ok_Hash.put("tDie_1", true);
end_Hash.put("tDie_1", System.currentTimeMillis());




/**
 * [tDie_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDie_1 finally ] start
	 */

	

	
	
	currentComponent="tDie_1";
	
	

 



/**
 * [tDie_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDie_1_SUBPROCESS_STATE", 1);
	}
	


public static class row2Struct implements routines.system.IPersistableRow<row2Struct> {
    final static byte[] commonByteArrayLock_ACM_ACTAS_Actas = new byte[0];
    static byte[] commonByteArray_ACM_ACTAS_Actas = new byte[0];

	
			    public BigDecimal ID;

				public BigDecimal getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return false;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return null;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return "";
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public BigDecimal ACTA_ID;

				public BigDecimal getACTA_ID () {
					return this.ACTA_ID;
				}

				public Boolean ACTA_IDIsNullable(){
				    return false;
				}
				public Boolean ACTA_IDIsKey(){
				    return false;
				}
				public Integer ACTA_IDLength(){
				    return null;
				}
				public Integer ACTA_IDPrecision(){
				    return null;
				}
				public String ACTA_IDDefault(){
				
					return "";
				
				}
				public String ACTA_IDComment(){
				
				    return "";
				
				}
				public String ACTA_IDPattern(){
				
					return "";
				
				}
				public String ACTA_IDOriginalDbColumnName(){
				
					return "ACTA_ID";
				
				}

				
			    public String AUDITOR;

				public String getAUDITOR () {
					return this.AUDITOR;
				}

				public Boolean AUDITORIsNullable(){
				    return true;
				}
				public Boolean AUDITORIsKey(){
				    return false;
				}
				public Integer AUDITORLength(){
				    return null;
				}
				public Integer AUDITORPrecision(){
				    return null;
				}
				public String AUDITORDefault(){
				
					return null;
				
				}
				public String AUDITORComment(){
				
				    return "";
				
				}
				public String AUDITORPattern(){
				
					return "";
				
				}
				public String AUDITOROriginalDbColumnName(){
				
					return "AUDITOR";
				
				}

				
			    public String ESM;

				public String getESM () {
					return this.ESM;
				}

				public Boolean ESMIsNullable(){
				    return false;
				}
				public Boolean ESMIsKey(){
				    return false;
				}
				public Integer ESMLength(){
				    return null;
				}
				public Integer ESMPrecision(){
				    return null;
				}
				public String ESMDefault(){
				
					return null;
				
				}
				public String ESMComment(){
				
				    return "";
				
				}
				public String ESMPattern(){
				
					return "";
				
				}
				public String ESMOriginalDbColumnName(){
				
					return "ESM";
				
				}

				
			    public String CIUDAD;

				public String getCIUDAD () {
					return this.CIUDAD;
				}

				public Boolean CIUDADIsNullable(){
				    return true;
				}
				public Boolean CIUDADIsKey(){
				    return false;
				}
				public Integer CIUDADLength(){
				    return null;
				}
				public Integer CIUDADPrecision(){
				    return null;
				}
				public String CIUDADDefault(){
				
					return null;
				
				}
				public String CIUDADComment(){
				
				    return "";
				
				}
				public String CIUDADPattern(){
				
					return "";
				
				}
				public String CIUDADOriginalDbColumnName(){
				
					return "CIUDAD";
				
				}

				
			    public String PARAMETTROS;

				public String getPARAMETTROS () {
					return this.PARAMETTROS;
				}

				public Boolean PARAMETTROSIsNullable(){
				    return true;
				}
				public Boolean PARAMETTROSIsKey(){
				    return false;
				}
				public Integer PARAMETTROSLength(){
				    return null;
				}
				public Integer PARAMETTROSPrecision(){
				    return null;
				}
				public String PARAMETTROSDefault(){
				
					return null;
				
				}
				public String PARAMETTROSComment(){
				
				    return "";
				
				}
				public String PARAMETTROSPattern(){
				
					return "";
				
				}
				public String PARAMETTROSOriginalDbColumnName(){
				
					return "PARAMETTROS";
				
				}

				
			    public String ESTADO;

				public String getESTADO () {
					return this.ESTADO;
				}

				public Boolean ESTADOIsNullable(){
				    return true;
				}
				public Boolean ESTADOIsKey(){
				    return false;
				}
				public Integer ESTADOLength(){
				    return null;
				}
				public Integer ESTADOPrecision(){
				    return null;
				}
				public String ESTADODefault(){
				
					return null;
				
				}
				public String ESTADOComment(){
				
				    return "";
				
				}
				public String ESTADOPattern(){
				
					return "";
				
				}
				public String ESTADOOriginalDbColumnName(){
				
					return "ESTADO";
				
				}

				
			    public String TARCHIVO;

				public String getTARCHIVO () {
					return this.TARCHIVO;
				}

				public Boolean TARCHIVOIsNullable(){
				    return true;
				}
				public Boolean TARCHIVOIsKey(){
				    return false;
				}
				public Integer TARCHIVOLength(){
				    return null;
				}
				public Integer TARCHIVOPrecision(){
				    return null;
				}
				public String TARCHIVODefault(){
				
					return null;
				
				}
				public String TARCHIVOComment(){
				
				    return "";
				
				}
				public String TARCHIVOPattern(){
				
					return "";
				
				}
				public String TARCHIVOOriginalDbColumnName(){
				
					return "TARCHIVO";
				
				}

				
			    public String SIGLA;

				public String getSIGLA () {
					return this.SIGLA;
				}

				public Boolean SIGLAIsNullable(){
				    return true;
				}
				public Boolean SIGLAIsKey(){
				    return false;
				}
				public Integer SIGLALength(){
				    return null;
				}
				public Integer SIGLAPrecision(){
				    return null;
				}
				public String SIGLADefault(){
				
					return null;
				
				}
				public String SIGLAComment(){
				
				    return "";
				
				}
				public String SIGLAPattern(){
				
					return "";
				
				}
				public String SIGLAOriginalDbColumnName(){
				
					return "SIGLA";
				
				}

				
			    public String FECHA;

				public String getFECHA () {
					return this.FECHA;
				}

				public Boolean FECHAIsNullable(){
				    return true;
				}
				public Boolean FECHAIsKey(){
				    return false;
				}
				public Integer FECHALength(){
				    return null;
				}
				public Integer FECHAPrecision(){
				    return null;
				}
				public String FECHADefault(){
				
					return null;
				
				}
				public String FECHAComment(){
				
				    return "";
				
				}
				public String FECHAPattern(){
				
					return "";
				
				}
				public String FECHAOriginalDbColumnName(){
				
					return "FECHA";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_ACTAS_Actas.length) {
				if(length < 1024 && commonByteArray_ACM_ACTAS_Actas.length == 0) {
   					commonByteArray_ACM_ACTAS_Actas = new byte[1024];
				} else {
   					commonByteArray_ACM_ACTAS_Actas = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ACM_ACTAS_Actas, 0, length);
			strReturn = new String(commonByteArray_ACM_ACTAS_Actas, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_ACTAS_Actas.length) {
				if(length < 1024 && commonByteArray_ACM_ACTAS_Actas.length == 0) {
   					commonByteArray_ACM_ACTAS_Actas = new byte[1024];
				} else {
   					commonByteArray_ACM_ACTAS_Actas = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_ACM_ACTAS_Actas, 0, length);
			strReturn = new String(commonByteArray_ACM_ACTAS_Actas, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ACM_ACTAS_Actas) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
						this.ACTA_ID = (BigDecimal) dis.readObject();
					
					this.AUDITOR = readString(dis);
					
					this.ESM = readString(dis);
					
					this.CIUDAD = readString(dis);
					
					this.PARAMETTROS = readString(dis);
					
					this.ESTADO = readString(dis);
					
					this.TARCHIVO = readString(dis);
					
					this.SIGLA = readString(dis);
					
					this.FECHA = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ACM_ACTAS_Actas) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
						this.ACTA_ID = (BigDecimal) dis.readObject();
					
					this.AUDITOR = readString(dis);
					
					this.ESM = readString(dis);
					
					this.CIUDAD = readString(dis);
					
					this.PARAMETTROS = readString(dis);
					
					this.ESTADO = readString(dis);
					
					this.TARCHIVO = readString(dis);
					
					this.SIGLA = readString(dis);
					
					this.FECHA = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ACTA_ID);
					
					// String
				
						writeString(this.AUDITOR,dos);
					
					// String
				
						writeString(this.ESM,dos);
					
					// String
				
						writeString(this.CIUDAD,dos);
					
					// String
				
						writeString(this.PARAMETTROS,dos);
					
					// String
				
						writeString(this.ESTADO,dos);
					
					// String
				
						writeString(this.TARCHIVO,dos);
					
					// String
				
						writeString(this.SIGLA,dos);
					
					// String
				
						writeString(this.FECHA,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ACTA_ID);
					
					// String
				
						writeString(this.AUDITOR,dos);
					
					// String
				
						writeString(this.ESM,dos);
					
					// String
				
						writeString(this.CIUDAD,dos);
					
					// String
				
						writeString(this.PARAMETTROS,dos);
					
					// String
				
						writeString(this.ESTADO,dos);
					
					// String
				
						writeString(this.TARCHIVO,dos);
					
					// String
				
						writeString(this.SIGLA,dos);
					
					// String
				
						writeString(this.FECHA,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",ACTA_ID="+String.valueOf(ACTA_ID));
		sb.append(",AUDITOR="+AUDITOR);
		sb.append(",ESM="+ESM);
		sb.append(",CIUDAD="+CIUDAD);
		sb.append(",PARAMETTROS="+PARAMETTROS);
		sb.append(",ESTADO="+ESTADO);
		sb.append(",TARCHIVO="+TARCHIVO);
		sb.append(",SIGLA="+SIGLA);
		sb.append(",FECHA="+FECHA);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row2Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row2Struct row2 = new row2Struct();




	
	/**
	 * [tFlowToIterate_1 begin ] start
	 */

				
			int NB_ITERATE_tJava_2 = 0; //for statistics
			

	
		
		ok_Hash.put("tFlowToIterate_1", false);
		start_Hash.put("tFlowToIterate_1", System.currentTimeMillis());
		
	
	currentComponent="tFlowToIterate_1";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row2");
					}
				
		int tos_count_tFlowToIterate_1 = 0;
		

int nb_line_tFlowToIterate_1 = 0;
int counter_tFlowToIterate_1 = 0;

 



/**
 * [tFlowToIterate_1 begin ] stop
 */



	
	/**
	 * [tOracleInput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_1", false);
		start_Hash.put("tOracleInput_1", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_1";
	
	
		int tos_count_tOracleInput_1 = 0;
		
	


	
		    int nb_line_tOracleInput_1 = 0;
		    java.sql.Connection conn_tOracleInput_1 = null;
				conn_tOracleInput_1 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");
				
                boolean isTimeZoneNull_tOracleInput_1 = false;
				boolean isConnectionWrapped_tOracleInput_1 = !(conn_tOracleInput_1 instanceof oracle.jdbc.OracleConnection) && conn_tOracleInput_1.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tOracleInput_1 = null;
                if (isConnectionWrapped_tOracleInput_1) {
					unwrappedOraConn_tOracleInput_1 = conn_tOracleInput_1.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tOracleInput_1 != null) {
                        isTimeZoneNull_tOracleInput_1 = (unwrappedOraConn_tOracleInput_1.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tOracleInput_1 = (((oracle.jdbc.OracleConnection)conn_tOracleInput_1).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tOracleInput_1) {
					java.sql.Statement stmtGetTZ_tOracleInput_1 = conn_tOracleInput_1.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_1 = stmtGetTZ_tOracleInput_1.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_1 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tOracleInput_1.next()) {
						sessionTimezone_tOracleInput_1 = rsGetTZ_tOracleInput_1.getString(1);
					}
					if (isConnectionWrapped_tOracleInput_1 && unwrappedOraConn_tOracleInput_1 != null) {
                        unwrappedOraConn_tOracleInput_1.setSessionTimeZone(sessionTimezone_tOracleInput_1);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_1).setSessionTimeZone(sessionTimezone_tOracleInput_1);
                    }
				}
			
		    
			java.sql.Statement stmt_tOracleInput_1 = conn_tOracleInput_1.createStatement();

		    String dbquery_tOracleInput_1 = "SELECT \n    RS.ID,\n	AC.ID AS ACTA_ID,\n    TRIM(GP.PRIMER_NOMBRE)||' '|| COALESCE(TRIM(GP.SEGUNDO_NOMBRE) ||' ', '') "
+"||  TRIM(GP.PRIMER_APELLIDO)||' '|| COALESCE(TRIM(GP.SEGUNDO_APELLIDO),'')AS AUDITOR,\n    GU.NOMBRE AS ESM,\n	INITCAP(D"
+"V.CCPP) AS CIUDAD,\n    RS.PARAMETTROS,\n    RS.ESTADO,\n    RT.NOMBRE AS TARCHIVO,\n    RT.SIGLA,\n	TO_CHAR(TO_DATE(SYS"
+"DATE, 'DD-MM-YYYY'), 'month') AS FECHA\nFROM ACM_ACTAS AC\nINNER JOIN REP_SARCHIVO  RS ON RS.ID = AC.SARCHIVO_ID\nINNER "
+"JOIN REP_TSARCHIVO RT ON RT.ID = RS.TSARCHIVO_ID\nINNER JOIN GEN_UORG      GU ON GU.ID = RS.UORG_ID\nINNER JOIN GEN_DIVI"
+"POLA  DV ON DV.ID = GU.DIVIPOLA_ID\nINNER JOIN GEN_USUARIOS  GS ON GS.ID = RS.USUARIO_ID\nINNER JOIN GEN_PERSONAS  GP ON"
+" GP.ID = GS.PERSONAS_ID\nWHERE RS.ESTADO = 'Sin procesar'\nAND AC.ESTADO = 'Activo' \nAND AC.ESTREGISTRO_ID = 1\nAND RS."
+"ESTREGISTRO_ID = 1";
		    

		    globalMap.put("tOracleInput_1_QUERY",dbquery_tOracleInput_1);

		    java.sql.ResultSet rs_tOracleInput_1 = null;

		    try {
		    	rs_tOracleInput_1 = stmt_tOracleInput_1.executeQuery(dbquery_tOracleInput_1);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_1 = rs_tOracleInput_1.getMetaData();
		    	int colQtyInRs_tOracleInput_1 = rsmd_tOracleInput_1.getColumnCount();

		    String tmpContent_tOracleInput_1 = null;
		    
		    
		    while (rs_tOracleInput_1.next()) {
		        nb_line_tOracleInput_1++;
		        
							if(colQtyInRs_tOracleInput_1 < 1) {
								row2.ID = null;
							} else {
		                          
					if(rs_tOracleInput_1.getObject(1) != null) {
						row2.ID = rs_tOracleInput_1.getBigDecimal(1);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_1 < 2) {
								row2.ACTA_ID = null;
							} else {
		                          
					if(rs_tOracleInput_1.getObject(2) != null) {
						row2.ACTA_ID = rs_tOracleInput_1.getBigDecimal(2);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_1 < 3) {
								row2.AUDITOR = null;
							} else {
	                         		
        	row2.AUDITOR = routines.system.JDBCUtil.getString(rs_tOracleInput_1, 3, false);
		                    }
							if(colQtyInRs_tOracleInput_1 < 4) {
								row2.ESM = null;
							} else {
	                         		
        	row2.ESM = routines.system.JDBCUtil.getString(rs_tOracleInput_1, 4, false);
		                    }
							if(colQtyInRs_tOracleInput_1 < 5) {
								row2.CIUDAD = null;
							} else {
	                         		
        	row2.CIUDAD = routines.system.JDBCUtil.getString(rs_tOracleInput_1, 5, false);
		                    }
							if(colQtyInRs_tOracleInput_1 < 6) {
								row2.PARAMETTROS = null;
							} else {
	                         		
        	row2.PARAMETTROS = routines.system.JDBCUtil.getString(rs_tOracleInput_1, 6, false);
		                    }
							if(colQtyInRs_tOracleInput_1 < 7) {
								row2.ESTADO = null;
							} else {
	                         		
        	row2.ESTADO = routines.system.JDBCUtil.getString(rs_tOracleInput_1, 7, false);
		                    }
							if(colQtyInRs_tOracleInput_1 < 8) {
								row2.TARCHIVO = null;
							} else {
	                         		
        	row2.TARCHIVO = routines.system.JDBCUtil.getString(rs_tOracleInput_1, 8, false);
		                    }
							if(colQtyInRs_tOracleInput_1 < 9) {
								row2.SIGLA = null;
							} else {
	                         		
        	row2.SIGLA = routines.system.JDBCUtil.getString(rs_tOracleInput_1, 9, false);
		                    }
							if(colQtyInRs_tOracleInput_1 < 10) {
								row2.FECHA = null;
							} else {
	                         		
        	row2.FECHA = routines.system.JDBCUtil.getString(rs_tOracleInput_1, 10, false);
		                    }
					




 



/**
 * [tOracleInput_1 begin ] stop
 */
	
	/**
	 * [tOracleInput_1 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_1";
	
	

 


	tos_count_tOracleInput_1++;

/**
 * [tOracleInput_1 main ] stop
 */
	
	/**
	 * [tOracleInput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_1";
	
	

 



/**
 * [tOracleInput_1 process_data_begin ] stop
 */

	
	/**
	 * [tFlowToIterate_1 main ] start
	 */

	

	
	
	currentComponent="tFlowToIterate_1";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row2"
						
						);
					}
					


    	            
            globalMap.put("row2.ID", row2.ID);
    	            
            globalMap.put("row2.ACTA_ID", row2.ACTA_ID);
    	            
            globalMap.put("row2.AUDITOR", row2.AUDITOR);
    	            
            globalMap.put("row2.ESM", row2.ESM);
    	            
            globalMap.put("row2.CIUDAD", row2.CIUDAD);
    	            
            globalMap.put("row2.PARAMETTROS", row2.PARAMETTROS);
    	            
            globalMap.put("row2.ESTADO", row2.ESTADO);
    	            
            globalMap.put("row2.TARCHIVO", row2.TARCHIVO);
    	            
            globalMap.put("row2.SIGLA", row2.SIGLA);
    	            
            globalMap.put("row2.FECHA", row2.FECHA);
    	
 
	   nb_line_tFlowToIterate_1++;  
       counter_tFlowToIterate_1++;
       globalMap.put("tFlowToIterate_1_CURRENT_ITERATION", counter_tFlowToIterate_1);
 


	tos_count_tFlowToIterate_1++;

/**
 * [tFlowToIterate_1 main ] stop
 */
	
	/**
	 * [tFlowToIterate_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFlowToIterate_1";
	
	

 



/**
 * [tFlowToIterate_1 process_data_begin ] stop
 */
	NB_ITERATE_tJava_2++;
	
	
					if(execStat){				
	       				runStat.updateStatOnConnection("OnSubjobOk4", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row18", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("OnComponentOk15", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("out4", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("If5", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row11", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row22", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("OnComponentOk12", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row6", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("out1", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("out2", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("OnSubjobOk3", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("OnComponentOk10", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row9", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row12", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("OnSubjobOk2", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("OnComponentOk9", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row7", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("OnComponentOk14", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("If2", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("OnComponentOk13", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("If3", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row15", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row16", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row8", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("out3", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row10", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("If1", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row14", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("If4", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row17", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row23", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("OnComponentOk11", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row19", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("OnRowsEnd", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("OnSubjobOk1", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("OnSubjobOk5", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row20", 3, 0);
					}           			
				
				if(execStat){
					runStat.updateStatOnConnection("iterate1", 1, "exec" + NB_ITERATE_tJava_2);
					//Thread.sleep(1000);
				}				
			

	
	/**
	 * [tJava_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_2", false);
		start_Hash.put("tJava_2", System.currentTimeMillis());
		
	
	currentComponent="tJava_2";
	
	
		int tos_count_tJava_2 = 0;
		


//////////////Obtiene los parametros de los consolidados en un objeto JSON /////////////////////
JSONObject data = new JSONObject(row2.PARAMETTROS);


///////////////////////Variables generales del consolidado ////////////////////////
context.ID = row2.ID;  
context.ACTA_ID = row2.ACTA_ID;
context.SIGLA = row2.SIGLA; 
context.NOMBRE_ACTA = row2.TARCHIVO;
context.USUARIO = row2.AUDITOR;
context.ESTABLECIMIENTO = row2.ESM;
context.CIUDAD = row2.CIUDAD;
context.FECHA_EJECUCION = " a los " + TalendDate.getDate("DD") + " días del mes de " + row2.FECHA + " de " + TalendDate.getDate("YYYY");

///////////////////////Variables espefificas del consolidado ///////////////////////
try 
{
	context.HAUDITORIA_ID = data.getString("HAUDITORIA_ID");
	context.RECEPCION_ID = data.getString("RECEPCION_ID"); 
} 
catch (Exception e)
{
	System.err.println("Error parámetro no encontrado: "+e.getMessage()+ context.NOMBRE_ACTA);
}


// SE GENERA EL NOMBRE DEL ARCHIVO
context.archivoSalida = GenerarUUID.createUUID() + ".xlsx";


// SE ACTUALIZA EL CAMPO DEL REPORTE A LLAMAR
switch(context.SIGLA)
{
	case "AAI":
	context.JasperReporte = "ActaAuditoriaInicial";
	context.fileSystem_Report = "ActaAuditoriaInicial";
	
	context.JasperParameters = "&RECEPCION_ID=" + context.RECEPCION_ID  + "&HAUDITORIA_ID=" + context.HAUDITORIA_ID;	
	break;
	
	case "ARA":
	context.JasperReporte = "ActaRespuestaGlosa";
	context.fileSystem_Report = "ActaRespuestaGlosa";
	
	context.JasperParameters = "&RECEPCION_ID=" + context.RECEPCION_ID  + "&HAUDITORIA_ID=" + context.HAUDITORIA_ID;
	break;
	
	case "ACD":
	context.JasperReporte = "ActaConciliacion";
	context.fileSystem_Report = "ActaConciliacion";
	
	context.JasperParameters = "&RECEPCION_ID=" + context.RECEPCION_ID  + "&HAUDITORIA_ID=" + context.HAUDITORIA_ID;
	break;
	
	case "RCS":
	context.JasperReporte = "ActaCalidad";
	context.fileSystem_Report = "ActaCalidad";
	context.USUARIO = context.USUARIO.replace(" ","%20");
	
	context.JasperParameters = "&RECEPCION_ID=" + context.RECEPCION_ID  + "&HAUDITORIA_ID=" + context.HAUDITORIA_ID + 	"&USUARIOS_ID=" + context.USUARIO;
	break;
	
	case "AFACM":
	context.JasperReporte = "ActaAuditoriaFinal";
	context.fileSystem_Report = "ActaFinal";
	context.USUARIO = context.USUARIO.replace(" ","%20");
	context.ESTABLECIMIENTO = context.ESTABLECIMIENTO.replace(" ","%20");
	context.CIUDAD = context.CIUDAD.replace(" ","%20");
	
	context.JasperParameters = "&RECEPCION_ID=" + context.RECEPCION_ID  + "&USUARIO_ID=" + context.USUARIO + "&UORG_ID=" + 	context.CIUDAD;
	break;
}



// SE GENERA EL URL AL CUAL SE LE HARA LA PETICIÓN DE TRAER EL REPORTE

context.JasperURI = context.JasperServer + "/jasperserver-pro/flow.html?_flowId=viewReportFlow&standAlone=true&_flowId=viewReportFlow&ParentFolderUri=%2F"+ 					context.JasperAmbiente + "%2F" + context.JasperModulo + "&reportUnit=%2F" + context.JasperAmbiente + "%2F" + context.JasperModulo + "%2F" + 					context.JasperReporte + "&j_username=" + context.JasperUser + "&j_password=" + context.JasperPassword + context.JasperParameters + "&output=xlsx";



// SE GENERA LA UBICACIÓN
context.fileSystem_URL = context.fileSystem_Path+"/"+context.fileSystem_Area +"/"+ context.archivoSalida;

// Inicializa por defecto el valor de la variable de contexto 
context.FACTURA_ID = new BigDecimal(0);
context.DOCUMENTO = "";

 



/**
 * [tJava_2 begin ] stop
 */
	
	/**
	 * [tJava_2 main ] start
	 */

	

	
	
	currentComponent="tJava_2";
	
	

 


	tos_count_tJava_2++;

/**
 * [tJava_2 main ] stop
 */
	
	/**
	 * [tJava_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_2";
	
	

 



/**
 * [tJava_2 process_data_begin ] stop
 */
	
	/**
	 * [tJava_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_2";
	
	

 



/**
 * [tJava_2 process_data_end ] stop
 */
	
	/**
	 * [tJava_2 end ] start
	 */

	

	
	
	currentComponent="tJava_2";
	
	

 

ok_Hash.put("tJava_2", true);
end_Hash.put("tJava_2", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk9", 0, "ok");
				}
				tHttpRequest_1Process(globalMap);



/**
 * [tJava_2 end ] stop
 */
						if(execStat){
							runStat.updateStatOnConnection("iterate1", 2, "exec" + NB_ITERATE_tJava_2);
						}				
					




	
	/**
	 * [tFlowToIterate_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFlowToIterate_1";
	
	

 



/**
 * [tFlowToIterate_1 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_1";
	
	

 



/**
 * [tOracleInput_1 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_1 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_1";
	
	

}
}finally{
	if (rs_tOracleInput_1 != null) {
		rs_tOracleInput_1.close();
	}
	if (stmt_tOracleInput_1 != null) {
		stmt_tOracleInput_1.close();
	}
}

globalMap.put("tOracleInput_1_NB_LINE",nb_line_tOracleInput_1);
 

ok_Hash.put("tOracleInput_1", true);
end_Hash.put("tOracleInput_1", System.currentTimeMillis());




/**
 * [tOracleInput_1 end ] stop
 */

	
	/**
	 * [tFlowToIterate_1 end ] start
	 */

	

	
	
	currentComponent="tFlowToIterate_1";
	
	

globalMap.put("tFlowToIterate_1_NB_LINE",nb_line_tFlowToIterate_1);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row2");
			  	}
			  	
 

ok_Hash.put("tFlowToIterate_1", true);
end_Hash.put("tFlowToIterate_1", System.currentTimeMillis());




/**
 * [tFlowToIterate_1 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleInput_1 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_1";
	
	

 



/**
 * [tOracleInput_1 finally ] stop
 */

	
	/**
	 * [tFlowToIterate_1 finally ] start
	 */

	

	
	
	currentComponent="tFlowToIterate_1";
	
	

 



/**
 * [tFlowToIterate_1 finally ] stop
 */

	
	/**
	 * [tJava_2 finally ] start
	 */

	

	
	
	currentComponent="tJava_2";
	
	

 



/**
 * [tJava_2 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_1_SUBPROCESS_STATE", 1);
	}
	


public void tHttpRequest_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tHttpRequest_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tHttpRequest_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tHttpRequest_1", false);
		start_Hash.put("tHttpRequest_1", System.currentTimeMillis());
		
	
	currentComponent="tHttpRequest_1";
	
	
		int tos_count_tHttpRequest_1 = 0;
		

 



/**
 * [tHttpRequest_1 begin ] stop
 */
	
	/**
	 * [tHttpRequest_1 main ] start
	 */

	

	
	
	currentComponent="tHttpRequest_1";
	
	


int connectTimeOut_tHttpRequest_1 = Integer.valueOf(30)*1000;
int readTimeOut_tHttpRequest_1 = Integer.valueOf(0)*1000;

java.net.URL url_tHttpRequest_1 = new java.net.URL(context.JasperURI);

java.net.HttpURLConnection urlConn_tHttpRequest_1 = null;

if ("local".equals(System.getProperty("http.proxySet"))) {
    java.net.Proxy proxyToUse = org.talend.proxy.TalendProxySelector.getInstance().getProxyForUriString(context.JasperURI);
    urlConn_tHttpRequest_1 = (java.net.HttpURLConnection) url_tHttpRequest_1.openConnection(proxyToUse); 
} else {
    urlConn_tHttpRequest_1 = (java.net.HttpURLConnection) url_tHttpRequest_1.openConnection();
}
urlConn_tHttpRequest_1.setRequestMethod("GET");
urlConn_tHttpRequest_1.setDoOutput(true);
urlConn_tHttpRequest_1.setDoInput(true);
urlConn_tHttpRequest_1.setUseCaches(false);

boolean connected_tHttpRequest_1 = false;
int responseCode_tHttpRequest_1 = 0;
globalMap.put("tHttpRequest_1_CONNECTED", false);
try{
    urlConn_tHttpRequest_1.connect();
    connected_tHttpRequest_1 = true;
    globalMap.put("tHttpRequest_1_CONNECTED", true);

    byte[] buffer_tHttpRequest_1 = new byte[1024];
    int bos_buffer_tHttpRequest_1 = 0;

    responseCode_tHttpRequest_1 = urlConn_tHttpRequest_1.getResponseCode();
    globalMap.put("tHttpRequest_1_RESPONSE_CODE", responseCode_tHttpRequest_1);

    if ( responseCode_tHttpRequest_1 >= 200 && responseCode_tHttpRequest_1 < 300) { //Status code 2XX indicates success
        java.io.InputStream bis_tHttpRequest_1 = new java.io.BufferedInputStream(urlConn_tHttpRequest_1.getInputStream());
                java.io.File bosParent_tHttpRequest_1 = new java.io.File(context.fileSystem_URL).getParentFile();
                if (bosParent_tHttpRequest_1 != null && bosParent_tHttpRequest_1.exists() == false){
                    bosParent_tHttpRequest_1.mkdirs();
                }
            java.io.OutputStream bosContent_tHttpRequest_1 = new java.io.BufferedOutputStream(new java.io.FileOutputStream(context.fileSystem_URL));
        while ((bos_buffer_tHttpRequest_1 = bis_tHttpRequest_1.read(buffer_tHttpRequest_1)) != -1) {bosContent_tHttpRequest_1.write(buffer_tHttpRequest_1,0,bos_buffer_tHttpRequest_1); 
        }
            bosContent_tHttpRequest_1.flush();
            bosContent_tHttpRequest_1.close();
        bis_tHttpRequest_1.close();
    } else {
    	String responseMessage_tHttpRequest_1 = urlConn_tHttpRequest_1.getResponseMessage();
    
        //get details response information which will be used when error appear
        java.io.InputStream err_stream_tHttpRequest_1 = urlConn_tHttpRequest_1.getErrorStream();
        if(err_stream_tHttpRequest_1!=null) {
            java.io.InputStream es_tHttpRequest_1 = new java.io.BufferedInputStream(err_stream_tHttpRequest_1);
        	java.io.ByteArrayOutputStream baos_tHttpRequest_1 = new java.io.ByteArrayOutputStream();
        	
        	byte[] buf_tHttpRequest_1 = new byte[1024];
            int read_tHttpRequest_1 = -1;
        	try {
            	while ((read_tHttpRequest_1 = es_tHttpRequest_1.read(buf_tHttpRequest_1)) > 0) {
            		baos_tHttpRequest_1.write(buf_tHttpRequest_1, 0, read_tHttpRequest_1);
            	}
        	} finally {
        		es_tHttpRequest_1.close();
        	}
        
        	responseMessage_tHttpRequest_1 += ("\n" + new String(baos_tHttpRequest_1.toByteArray()));
        }
    	
            throw new RuntimeException("Request failed:" + responseCode_tHttpRequest_1 + " " + responseMessage_tHttpRequest_1);
    }

    urlConn_tHttpRequest_1.disconnect();
}catch(Exception e){
globalMap.put("tHttpRequest_1_ERROR_MESSAGE",e.getMessage());
        throw e;
}

 


	tos_count_tHttpRequest_1++;

/**
 * [tHttpRequest_1 main ] stop
 */
	
	/**
	 * [tHttpRequest_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHttpRequest_1";
	
	

 



/**
 * [tHttpRequest_1 process_data_begin ] stop
 */
	
	/**
	 * [tHttpRequest_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tHttpRequest_1";
	
	

 



/**
 * [tHttpRequest_1 process_data_end ] stop
 */
	
	/**
	 * [tHttpRequest_1 end ] start
	 */

	

	
	
	currentComponent="tHttpRequest_1";
	
	

 

ok_Hash.put("tHttpRequest_1", true);
end_Hash.put("tHttpRequest_1", System.currentTimeMillis());




/**
 * [tHttpRequest_1 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tHttpRequest_1:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk1", 0, "ok");
								} 
							
							tJava_3Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tHttpRequest_1 finally ] start
	 */

	

	
	
	currentComponent="tHttpRequest_1";
	
	

 



/**
 * [tHttpRequest_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tHttpRequest_1_SUBPROCESS_STATE", 1);
	}
	


public void tJava_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_3_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tJava_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_3", false);
		start_Hash.put("tJava_3", System.currentTimeMillis());
		
	
	currentComponent="tJava_3";
	
	
		int tos_count_tJava_3 = 0;
		


System.out.println(context.NOMBRE_ACTA);
System.out.println("Recepcion: ");
System.out.println(context.RECEPCION_ID);
System.out.println("Hauditoria: ");
System.out.println(context.HAUDITORIA_ID);
System.out.println("=====================================");
 



/**
 * [tJava_3 begin ] stop
 */
	
	/**
	 * [tJava_3 main ] start
	 */

	

	
	
	currentComponent="tJava_3";
	
	

 


	tos_count_tJava_3++;

/**
 * [tJava_3 main ] stop
 */
	
	/**
	 * [tJava_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_3";
	
	

 



/**
 * [tJava_3 process_data_begin ] stop
 */
	
	/**
	 * [tJava_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_3";
	
	

 



/**
 * [tJava_3 process_data_end ] stop
 */
	
	/**
	 * [tJava_3 end ] start
	 */

	

	
	
	currentComponent="tJava_3";
	
	

 

ok_Hash.put("tJava_3", true);
end_Hash.put("tJava_3", System.currentTimeMillis());

   			if (context.SIGLA.equals("ARA")) {
   				
					if(execStat){
   	 					runStat.updateStatOnConnection("If2", 0, "true");
					}
				tOracleInput_4Process(globalMap);
			}

			   
   				else{
					if(execStat){   
   	 					runStat.updateStatOnConnection("If2", 0, "false");
					}   	 
   				}
   			if (context.SIGLA.equals("ACD")) {
   				
					if(execStat){
   	 					runStat.updateStatOnConnection("If3", 0, "true");
					}
				tOracleInput_5Process(globalMap);
			}

			   
   				else{
					if(execStat){   
   	 					runStat.updateStatOnConnection("If3", 0, "false");
					}   	 
   				}
   			if (context.SIGLA.equals("RCS")) {
   				
					if(execStat){
   	 					runStat.updateStatOnConnection("If4", 0, "true");
					}
				tOracleInput_6Process(globalMap);
			}

			   
   				else{
					if(execStat){   
   	 					runStat.updateStatOnConnection("If4", 0, "false");
					}   	 
   				}
   			if (context.SIGLA.equals("AFACM")) {
   				
					if(execStat){
   	 					runStat.updateStatOnConnection("If5", 0, "true");
					}
				tOracleInput_7Process(globalMap);
			}

			   
   				else{
					if(execStat){   
   	 					runStat.updateStatOnConnection("If5", 0, "false");
					}   	 
   				}
   			if (context.SIGLA.equals("AAI")) {
   				
					if(execStat){
   	 					runStat.updateStatOnConnection("If1", 0, "true");
					}
				tOracleInput_3Process(globalMap);
			}

			   
   				else{
					if(execStat){   
   	 					runStat.updateStatOnConnection("If1", 0, "false");
					}   	 
   				}



/**
 * [tJava_3 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_3 finally ] start
	 */

	

	
	
	currentComponent="tJava_3";
	
	

 



/**
 * [tJava_3 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_3_SUBPROCESS_STATE", 1);
	}
	


public static class out3Struct implements routines.system.IPersistableRow<out3Struct> {
    final static byte[] commonByteArrayLock_ACM_ACTAS_Actas = new byte[0];
    static byte[] commonByteArray_ACM_ACTAS_Actas = new byte[0];

	
			    public String NUMERO_FACTURA;

				public String getNUMERO_FACTURA () {
					return this.NUMERO_FACTURA;
				}

				public Boolean NUMERO_FACTURAIsNullable(){
				    return true;
				}
				public Boolean NUMERO_FACTURAIsKey(){
				    return false;
				}
				public Integer NUMERO_FACTURALength(){
				    return null;
				}
				public Integer NUMERO_FACTURAPrecision(){
				    return null;
				}
				public String NUMERO_FACTURADefault(){
				
					return null;
				
				}
				public String NUMERO_FACTURAComment(){
				
				    return "";
				
				}
				public String NUMERO_FACTURAPattern(){
				
					return "";
				
				}
				public String NUMERO_FACTURAOriginalDbColumnName(){
				
					return "NUMERO_FACTURA";
				
				}

				
			    public String DOCUMENTO;

				public String getDOCUMENTO () {
					return this.DOCUMENTO;
				}

				public Boolean DOCUMENTOIsNullable(){
				    return true;
				}
				public Boolean DOCUMENTOIsKey(){
				    return false;
				}
				public Integer DOCUMENTOLength(){
				    return null;
				}
				public Integer DOCUMENTOPrecision(){
				    return null;
				}
				public String DOCUMENTODefault(){
				
					return null;
				
				}
				public String DOCUMENTOComment(){
				
				    return "";
				
				}
				public String DOCUMENTOPattern(){
				
					return "";
				
				}
				public String DOCUMENTOOriginalDbColumnName(){
				
					return "DOCUMENTO";
				
				}

				
			    public String PACIENTE;

				public String getPACIENTE () {
					return this.PACIENTE;
				}

				public Boolean PACIENTEIsNullable(){
				    return true;
				}
				public Boolean PACIENTEIsKey(){
				    return false;
				}
				public Integer PACIENTELength(){
				    return null;
				}
				public Integer PACIENTEPrecision(){
				    return null;
				}
				public String PACIENTEDefault(){
				
					return null;
				
				}
				public String PACIENTEComment(){
				
				    return "";
				
				}
				public String PACIENTEPattern(){
				
					return "";
				
				}
				public String PACIENTEOriginalDbColumnName(){
				
					return "PACIENTE";
				
				}

				
			    public String CODIGO;

				public String getCODIGO () {
					return this.CODIGO;
				}

				public Boolean CODIGOIsNullable(){
				    return true;
				}
				public Boolean CODIGOIsKey(){
				    return false;
				}
				public Integer CODIGOLength(){
				    return null;
				}
				public Integer CODIGOPrecision(){
				    return null;
				}
				public String CODIGODefault(){
				
					return null;
				
				}
				public String CODIGOComment(){
				
				    return "";
				
				}
				public String CODIGOPattern(){
				
					return "";
				
				}
				public String CODIGOOriginalDbColumnName(){
				
					return "CODIGO";
				
				}

				
			    public String CONCEPTO_GLOSA;

				public String getCONCEPTO_GLOSA () {
					return this.CONCEPTO_GLOSA;
				}

				public Boolean CONCEPTO_GLOSAIsNullable(){
				    return false;
				}
				public Boolean CONCEPTO_GLOSAIsKey(){
				    return false;
				}
				public Integer CONCEPTO_GLOSALength(){
				    return null;
				}
				public Integer CONCEPTO_GLOSAPrecision(){
				    return null;
				}
				public String CONCEPTO_GLOSADefault(){
				
					return null;
				
				}
				public String CONCEPTO_GLOSAComment(){
				
				    return "";
				
				}
				public String CONCEPTO_GLOSAPattern(){
				
					return "";
				
				}
				public String CONCEPTO_GLOSAOriginalDbColumnName(){
				
					return "CONCEPTO_GLOSA";
				
				}

				
			    public String DESCRIPCION_GLOSA;

				public String getDESCRIPCION_GLOSA () {
					return this.DESCRIPCION_GLOSA;
				}

				public Boolean DESCRIPCION_GLOSAIsNullable(){
				    return true;
				}
				public Boolean DESCRIPCION_GLOSAIsKey(){
				    return false;
				}
				public Integer DESCRIPCION_GLOSALength(){
				    return null;
				}
				public Integer DESCRIPCION_GLOSAPrecision(){
				    return null;
				}
				public String DESCRIPCION_GLOSADefault(){
				
					return null;
				
				}
				public String DESCRIPCION_GLOSAComment(){
				
				    return "";
				
				}
				public String DESCRIPCION_GLOSAPattern(){
				
					return "";
				
				}
				public String DESCRIPCION_GLOSAOriginalDbColumnName(){
				
					return "DESCRIPCION_GLOSA";
				
				}

				
			    public String RESPUESTA;

				public String getRESPUESTA () {
					return this.RESPUESTA;
				}

				public Boolean RESPUESTAIsNullable(){
				    return true;
				}
				public Boolean RESPUESTAIsKey(){
				    return false;
				}
				public Integer RESPUESTALength(){
				    return null;
				}
				public Integer RESPUESTAPrecision(){
				    return null;
				}
				public String RESPUESTADefault(){
				
					return null;
				
				}
				public String RESPUESTAComment(){
				
				    return "";
				
				}
				public String RESPUESTAPattern(){
				
					return "";
				
				}
				public String RESPUESTAOriginalDbColumnName(){
				
					return "RESPUESTA";
				
				}

				
			    public String REVISION_RESPUESTA;

				public String getREVISION_RESPUESTA () {
					return this.REVISION_RESPUESTA;
				}

				public Boolean REVISION_RESPUESTAIsNullable(){
				    return true;
				}
				public Boolean REVISION_RESPUESTAIsKey(){
				    return false;
				}
				public Integer REVISION_RESPUESTALength(){
				    return null;
				}
				public Integer REVISION_RESPUESTAPrecision(){
				    return null;
				}
				public String REVISION_RESPUESTADefault(){
				
					return null;
				
				}
				public String REVISION_RESPUESTAComment(){
				
				    return "";
				
				}
				public String REVISION_RESPUESTAPattern(){
				
					return "";
				
				}
				public String REVISION_RESPUESTAOriginalDbColumnName(){
				
					return "REVISION_RESPUESTA";
				
				}

				
			    public String VALOR_GLOSADO;

				public String getVALOR_GLOSADO () {
					return this.VALOR_GLOSADO;
				}

				public Boolean VALOR_GLOSADOIsNullable(){
				    return true;
				}
				public Boolean VALOR_GLOSADOIsKey(){
				    return false;
				}
				public Integer VALOR_GLOSADOLength(){
				    return null;
				}
				public Integer VALOR_GLOSADOPrecision(){
				    return null;
				}
				public String VALOR_GLOSADODefault(){
				
					return null;
				
				}
				public String VALOR_GLOSADOComment(){
				
				    return "";
				
				}
				public String VALOR_GLOSADOPattern(){
				
					return "";
				
				}
				public String VALOR_GLOSADOOriginalDbColumnName(){
				
					return "VALOR_GLOSADO";
				
				}

				
			    public String VALOR_ACEPTADO;

				public String getVALOR_ACEPTADO () {
					return this.VALOR_ACEPTADO;
				}

				public Boolean VALOR_ACEPTADOIsNullable(){
				    return true;
				}
				public Boolean VALOR_ACEPTADOIsKey(){
				    return false;
				}
				public Integer VALOR_ACEPTADOLength(){
				    return null;
				}
				public Integer VALOR_ACEPTADOPrecision(){
				    return null;
				}
				public String VALOR_ACEPTADODefault(){
				
					return null;
				
				}
				public String VALOR_ACEPTADOComment(){
				
				    return "";
				
				}
				public String VALOR_ACEPTADOPattern(){
				
					return "";
				
				}
				public String VALOR_ACEPTADOOriginalDbColumnName(){
				
					return "VALOR_ACEPTADO";
				
				}

				
			    public String VALOR_SOPORTADO;

				public String getVALOR_SOPORTADO () {
					return this.VALOR_SOPORTADO;
				}

				public Boolean VALOR_SOPORTADOIsNullable(){
				    return true;
				}
				public Boolean VALOR_SOPORTADOIsKey(){
				    return false;
				}
				public Integer VALOR_SOPORTADOLength(){
				    return null;
				}
				public Integer VALOR_SOPORTADOPrecision(){
				    return null;
				}
				public String VALOR_SOPORTADODefault(){
				
					return null;
				
				}
				public String VALOR_SOPORTADOComment(){
				
				    return "";
				
				}
				public String VALOR_SOPORTADOPattern(){
				
					return "";
				
				}
				public String VALOR_SOPORTADOOriginalDbColumnName(){
				
					return "VALOR_SOPORTADO";
				
				}

				
			    public String VALOR_RATIFICADO;

				public String getVALOR_RATIFICADO () {
					return this.VALOR_RATIFICADO;
				}

				public Boolean VALOR_RATIFICADOIsNullable(){
				    return true;
				}
				public Boolean VALOR_RATIFICADOIsKey(){
				    return false;
				}
				public Integer VALOR_RATIFICADOLength(){
				    return null;
				}
				public Integer VALOR_RATIFICADOPrecision(){
				    return null;
				}
				public String VALOR_RATIFICADODefault(){
				
					return null;
				
				}
				public String VALOR_RATIFICADOComment(){
				
				    return "";
				
				}
				public String VALOR_RATIFICADOPattern(){
				
					return "";
				
				}
				public String VALOR_RATIFICADOOriginalDbColumnName(){
				
					return "VALOR_RATIFICADO";
				
				}

				
			    public String VNETO;

				public String getVNETO () {
					return this.VNETO;
				}

				public Boolean VNETOIsNullable(){
				    return true;
				}
				public Boolean VNETOIsKey(){
				    return false;
				}
				public Integer VNETOLength(){
				    return null;
				}
				public Integer VNETOPrecision(){
				    return null;
				}
				public String VNETODefault(){
				
					return null;
				
				}
				public String VNETOComment(){
				
				    return "";
				
				}
				public String VNETOPattern(){
				
					return "";
				
				}
				public String VNETOOriginalDbColumnName(){
				
					return "VNETO";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_ACTAS_Actas.length) {
				if(length < 1024 && commonByteArray_ACM_ACTAS_Actas.length == 0) {
   					commonByteArray_ACM_ACTAS_Actas = new byte[1024];
				} else {
   					commonByteArray_ACM_ACTAS_Actas = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ACM_ACTAS_Actas, 0, length);
			strReturn = new String(commonByteArray_ACM_ACTAS_Actas, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_ACTAS_Actas.length) {
				if(length < 1024 && commonByteArray_ACM_ACTAS_Actas.length == 0) {
   					commonByteArray_ACM_ACTAS_Actas = new byte[1024];
				} else {
   					commonByteArray_ACM_ACTAS_Actas = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_ACM_ACTAS_Actas, 0, length);
			strReturn = new String(commonByteArray_ACM_ACTAS_Actas, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ACM_ACTAS_Actas) {

        	try {

        		int length = 0;
		
					this.NUMERO_FACTURA = readString(dis);
					
					this.DOCUMENTO = readString(dis);
					
					this.PACIENTE = readString(dis);
					
					this.CODIGO = readString(dis);
					
					this.CONCEPTO_GLOSA = readString(dis);
					
					this.DESCRIPCION_GLOSA = readString(dis);
					
					this.RESPUESTA = readString(dis);
					
					this.REVISION_RESPUESTA = readString(dis);
					
					this.VALOR_GLOSADO = readString(dis);
					
					this.VALOR_ACEPTADO = readString(dis);
					
					this.VALOR_SOPORTADO = readString(dis);
					
					this.VALOR_RATIFICADO = readString(dis);
					
					this.VNETO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ACM_ACTAS_Actas) {

        	try {

        		int length = 0;
		
					this.NUMERO_FACTURA = readString(dis);
					
					this.DOCUMENTO = readString(dis);
					
					this.PACIENTE = readString(dis);
					
					this.CODIGO = readString(dis);
					
					this.CONCEPTO_GLOSA = readString(dis);
					
					this.DESCRIPCION_GLOSA = readString(dis);
					
					this.RESPUESTA = readString(dis);
					
					this.REVISION_RESPUESTA = readString(dis);
					
					this.VALOR_GLOSADO = readString(dis);
					
					this.VALOR_ACEPTADO = readString(dis);
					
					this.VALOR_SOPORTADO = readString(dis);
					
					this.VALOR_RATIFICADO = readString(dis);
					
					this.VNETO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.NUMERO_FACTURA,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// String
				
						writeString(this.PACIENTE,dos);
					
					// String
				
						writeString(this.CODIGO,dos);
					
					// String
				
						writeString(this.CONCEPTO_GLOSA,dos);
					
					// String
				
						writeString(this.DESCRIPCION_GLOSA,dos);
					
					// String
				
						writeString(this.RESPUESTA,dos);
					
					// String
				
						writeString(this.REVISION_RESPUESTA,dos);
					
					// String
				
						writeString(this.VALOR_GLOSADO,dos);
					
					// String
				
						writeString(this.VALOR_ACEPTADO,dos);
					
					// String
				
						writeString(this.VALOR_SOPORTADO,dos);
					
					// String
				
						writeString(this.VALOR_RATIFICADO,dos);
					
					// String
				
						writeString(this.VNETO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.NUMERO_FACTURA,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// String
				
						writeString(this.PACIENTE,dos);
					
					// String
				
						writeString(this.CODIGO,dos);
					
					// String
				
						writeString(this.CONCEPTO_GLOSA,dos);
					
					// String
				
						writeString(this.DESCRIPCION_GLOSA,dos);
					
					// String
				
						writeString(this.RESPUESTA,dos);
					
					// String
				
						writeString(this.REVISION_RESPUESTA,dos);
					
					// String
				
						writeString(this.VALOR_GLOSADO,dos);
					
					// String
				
						writeString(this.VALOR_ACEPTADO,dos);
					
					// String
				
						writeString(this.VALOR_SOPORTADO,dos);
					
					// String
				
						writeString(this.VALOR_RATIFICADO,dos);
					
					// String
				
						writeString(this.VNETO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("NUMERO_FACTURA="+NUMERO_FACTURA);
		sb.append(",DOCUMENTO="+DOCUMENTO);
		sb.append(",PACIENTE="+PACIENTE);
		sb.append(",CODIGO="+CODIGO);
		sb.append(",CONCEPTO_GLOSA="+CONCEPTO_GLOSA);
		sb.append(",DESCRIPCION_GLOSA="+DESCRIPCION_GLOSA);
		sb.append(",RESPUESTA="+RESPUESTA);
		sb.append(",REVISION_RESPUESTA="+REVISION_RESPUESTA);
		sb.append(",VALOR_GLOSADO="+VALOR_GLOSADO);
		sb.append(",VALOR_ACEPTADO="+VALOR_ACEPTADO);
		sb.append(",VALOR_SOPORTADO="+VALOR_SOPORTADO);
		sb.append(",VALOR_RATIFICADO="+VALOR_RATIFICADO);
		sb.append(",VNETO="+VNETO);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(out3Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row11Struct implements routines.system.IPersistableRow<row11Struct> {
    final static byte[] commonByteArrayLock_ACM_ACTAS_Actas = new byte[0];
    static byte[] commonByteArray_ACM_ACTAS_Actas = new byte[0];

	
			    public String NUMERO_FACTURA;

				public String getNUMERO_FACTURA () {
					return this.NUMERO_FACTURA;
				}

				public Boolean NUMERO_FACTURAIsNullable(){
				    return true;
				}
				public Boolean NUMERO_FACTURAIsKey(){
				    return false;
				}
				public Integer NUMERO_FACTURALength(){
				    return null;
				}
				public Integer NUMERO_FACTURAPrecision(){
				    return null;
				}
				public String NUMERO_FACTURADefault(){
				
					return null;
				
				}
				public String NUMERO_FACTURAComment(){
				
				    return "";
				
				}
				public String NUMERO_FACTURAPattern(){
				
					return "";
				
				}
				public String NUMERO_FACTURAOriginalDbColumnName(){
				
					return "NUMERO_FACTURA";
				
				}

				
			    public String DOCUMENTO;

				public String getDOCUMENTO () {
					return this.DOCUMENTO;
				}

				public Boolean DOCUMENTOIsNullable(){
				    return true;
				}
				public Boolean DOCUMENTOIsKey(){
				    return false;
				}
				public Integer DOCUMENTOLength(){
				    return null;
				}
				public Integer DOCUMENTOPrecision(){
				    return null;
				}
				public String DOCUMENTODefault(){
				
					return null;
				
				}
				public String DOCUMENTOComment(){
				
				    return "";
				
				}
				public String DOCUMENTOPattern(){
				
					return "";
				
				}
				public String DOCUMENTOOriginalDbColumnName(){
				
					return "DOCUMENTO";
				
				}

				
			    public String PACIENTE;

				public String getPACIENTE () {
					return this.PACIENTE;
				}

				public Boolean PACIENTEIsNullable(){
				    return true;
				}
				public Boolean PACIENTEIsKey(){
				    return false;
				}
				public Integer PACIENTELength(){
				    return null;
				}
				public Integer PACIENTEPrecision(){
				    return null;
				}
				public String PACIENTEDefault(){
				
					return null;
				
				}
				public String PACIENTEComment(){
				
				    return "";
				
				}
				public String PACIENTEPattern(){
				
					return "";
				
				}
				public String PACIENTEOriginalDbColumnName(){
				
					return "PACIENTE";
				
				}

				
			    public String CODIGO;

				public String getCODIGO () {
					return this.CODIGO;
				}

				public Boolean CODIGOIsNullable(){
				    return true;
				}
				public Boolean CODIGOIsKey(){
				    return false;
				}
				public Integer CODIGOLength(){
				    return null;
				}
				public Integer CODIGOPrecision(){
				    return null;
				}
				public String CODIGODefault(){
				
					return null;
				
				}
				public String CODIGOComment(){
				
				    return "";
				
				}
				public String CODIGOPattern(){
				
					return "";
				
				}
				public String CODIGOOriginalDbColumnName(){
				
					return "CODIGO";
				
				}

				
			    public String CONCEPTO_GLOSA;

				public String getCONCEPTO_GLOSA () {
					return this.CONCEPTO_GLOSA;
				}

				public Boolean CONCEPTO_GLOSAIsNullable(){
				    return false;
				}
				public Boolean CONCEPTO_GLOSAIsKey(){
				    return false;
				}
				public Integer CONCEPTO_GLOSALength(){
				    return null;
				}
				public Integer CONCEPTO_GLOSAPrecision(){
				    return null;
				}
				public String CONCEPTO_GLOSADefault(){
				
					return null;
				
				}
				public String CONCEPTO_GLOSAComment(){
				
				    return "";
				
				}
				public String CONCEPTO_GLOSAPattern(){
				
					return "";
				
				}
				public String CONCEPTO_GLOSAOriginalDbColumnName(){
				
					return "CONCEPTO_GLOSA";
				
				}

				
			    public String DESCRIPCION_GLOSA;

				public String getDESCRIPCION_GLOSA () {
					return this.DESCRIPCION_GLOSA;
				}

				public Boolean DESCRIPCION_GLOSAIsNullable(){
				    return true;
				}
				public Boolean DESCRIPCION_GLOSAIsKey(){
				    return false;
				}
				public Integer DESCRIPCION_GLOSALength(){
				    return null;
				}
				public Integer DESCRIPCION_GLOSAPrecision(){
				    return null;
				}
				public String DESCRIPCION_GLOSADefault(){
				
					return null;
				
				}
				public String DESCRIPCION_GLOSAComment(){
				
				    return "";
				
				}
				public String DESCRIPCION_GLOSAPattern(){
				
					return "";
				
				}
				public String DESCRIPCION_GLOSAOriginalDbColumnName(){
				
					return "DESCRIPCION_GLOSA";
				
				}

				
			    public String RESPUESTA;

				public String getRESPUESTA () {
					return this.RESPUESTA;
				}

				public Boolean RESPUESTAIsNullable(){
				    return true;
				}
				public Boolean RESPUESTAIsKey(){
				    return false;
				}
				public Integer RESPUESTALength(){
				    return null;
				}
				public Integer RESPUESTAPrecision(){
				    return null;
				}
				public String RESPUESTADefault(){
				
					return null;
				
				}
				public String RESPUESTAComment(){
				
				    return "";
				
				}
				public String RESPUESTAPattern(){
				
					return "";
				
				}
				public String RESPUESTAOriginalDbColumnName(){
				
					return "RESPUESTA";
				
				}

				
			    public String REVISION_RESPUESTA;

				public String getREVISION_RESPUESTA () {
					return this.REVISION_RESPUESTA;
				}

				public Boolean REVISION_RESPUESTAIsNullable(){
				    return true;
				}
				public Boolean REVISION_RESPUESTAIsKey(){
				    return false;
				}
				public Integer REVISION_RESPUESTALength(){
				    return null;
				}
				public Integer REVISION_RESPUESTAPrecision(){
				    return null;
				}
				public String REVISION_RESPUESTADefault(){
				
					return null;
				
				}
				public String REVISION_RESPUESTAComment(){
				
				    return "";
				
				}
				public String REVISION_RESPUESTAPattern(){
				
					return "";
				
				}
				public String REVISION_RESPUESTAOriginalDbColumnName(){
				
					return "REVISION_RESPUESTA";
				
				}

				
			    public BigDecimal VALOR_GLOSADO;

				public BigDecimal getVALOR_GLOSADO () {
					return this.VALOR_GLOSADO;
				}

				public Boolean VALOR_GLOSADOIsNullable(){
				    return true;
				}
				public Boolean VALOR_GLOSADOIsKey(){
				    return false;
				}
				public Integer VALOR_GLOSADOLength(){
				    return null;
				}
				public Integer VALOR_GLOSADOPrecision(){
				    return null;
				}
				public String VALOR_GLOSADODefault(){
				
					return "";
				
				}
				public String VALOR_GLOSADOComment(){
				
				    return "";
				
				}
				public String VALOR_GLOSADOPattern(){
				
					return "";
				
				}
				public String VALOR_GLOSADOOriginalDbColumnName(){
				
					return "VALOR_GLOSADO";
				
				}

				
			    public BigDecimal VALOR_ACEPTADO;

				public BigDecimal getVALOR_ACEPTADO () {
					return this.VALOR_ACEPTADO;
				}

				public Boolean VALOR_ACEPTADOIsNullable(){
				    return true;
				}
				public Boolean VALOR_ACEPTADOIsKey(){
				    return false;
				}
				public Integer VALOR_ACEPTADOLength(){
				    return null;
				}
				public Integer VALOR_ACEPTADOPrecision(){
				    return null;
				}
				public String VALOR_ACEPTADODefault(){
				
					return "";
				
				}
				public String VALOR_ACEPTADOComment(){
				
				    return "";
				
				}
				public String VALOR_ACEPTADOPattern(){
				
					return "";
				
				}
				public String VALOR_ACEPTADOOriginalDbColumnName(){
				
					return "VALOR_ACEPTADO";
				
				}

				
			    public BigDecimal VALOR_SOPORTADO;

				public BigDecimal getVALOR_SOPORTADO () {
					return this.VALOR_SOPORTADO;
				}

				public Boolean VALOR_SOPORTADOIsNullable(){
				    return true;
				}
				public Boolean VALOR_SOPORTADOIsKey(){
				    return false;
				}
				public Integer VALOR_SOPORTADOLength(){
				    return null;
				}
				public Integer VALOR_SOPORTADOPrecision(){
				    return null;
				}
				public String VALOR_SOPORTADODefault(){
				
					return "";
				
				}
				public String VALOR_SOPORTADOComment(){
				
				    return "";
				
				}
				public String VALOR_SOPORTADOPattern(){
				
					return "";
				
				}
				public String VALOR_SOPORTADOOriginalDbColumnName(){
				
					return "VALOR_SOPORTADO";
				
				}

				
			    public BigDecimal VALOR_RATIFICADO;

				public BigDecimal getVALOR_RATIFICADO () {
					return this.VALOR_RATIFICADO;
				}

				public Boolean VALOR_RATIFICADOIsNullable(){
				    return true;
				}
				public Boolean VALOR_RATIFICADOIsKey(){
				    return false;
				}
				public Integer VALOR_RATIFICADOLength(){
				    return null;
				}
				public Integer VALOR_RATIFICADOPrecision(){
				    return null;
				}
				public String VALOR_RATIFICADODefault(){
				
					return "";
				
				}
				public String VALOR_RATIFICADOComment(){
				
				    return "";
				
				}
				public String VALOR_RATIFICADOPattern(){
				
					return "";
				
				}
				public String VALOR_RATIFICADOOriginalDbColumnName(){
				
					return "VALOR_RATIFICADO";
				
				}

				
			    public BigDecimal VNETO;

				public BigDecimal getVNETO () {
					return this.VNETO;
				}

				public Boolean VNETOIsNullable(){
				    return true;
				}
				public Boolean VNETOIsKey(){
				    return false;
				}
				public Integer VNETOLength(){
				    return null;
				}
				public Integer VNETOPrecision(){
				    return null;
				}
				public String VNETODefault(){
				
					return "";
				
				}
				public String VNETOComment(){
				
				    return "";
				
				}
				public String VNETOPattern(){
				
					return "";
				
				}
				public String VNETOOriginalDbColumnName(){
				
					return "VNETO";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_ACTAS_Actas.length) {
				if(length < 1024 && commonByteArray_ACM_ACTAS_Actas.length == 0) {
   					commonByteArray_ACM_ACTAS_Actas = new byte[1024];
				} else {
   					commonByteArray_ACM_ACTAS_Actas = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ACM_ACTAS_Actas, 0, length);
			strReturn = new String(commonByteArray_ACM_ACTAS_Actas, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_ACTAS_Actas.length) {
				if(length < 1024 && commonByteArray_ACM_ACTAS_Actas.length == 0) {
   					commonByteArray_ACM_ACTAS_Actas = new byte[1024];
				} else {
   					commonByteArray_ACM_ACTAS_Actas = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_ACM_ACTAS_Actas, 0, length);
			strReturn = new String(commonByteArray_ACM_ACTAS_Actas, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ACM_ACTAS_Actas) {

        	try {

        		int length = 0;
		
					this.NUMERO_FACTURA = readString(dis);
					
					this.DOCUMENTO = readString(dis);
					
					this.PACIENTE = readString(dis);
					
					this.CODIGO = readString(dis);
					
					this.CONCEPTO_GLOSA = readString(dis);
					
					this.DESCRIPCION_GLOSA = readString(dis);
					
					this.RESPUESTA = readString(dis);
					
					this.REVISION_RESPUESTA = readString(dis);
					
						this.VALOR_GLOSADO = (BigDecimal) dis.readObject();
					
						this.VALOR_ACEPTADO = (BigDecimal) dis.readObject();
					
						this.VALOR_SOPORTADO = (BigDecimal) dis.readObject();
					
						this.VALOR_RATIFICADO = (BigDecimal) dis.readObject();
					
						this.VNETO = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ACM_ACTAS_Actas) {

        	try {

        		int length = 0;
		
					this.NUMERO_FACTURA = readString(dis);
					
					this.DOCUMENTO = readString(dis);
					
					this.PACIENTE = readString(dis);
					
					this.CODIGO = readString(dis);
					
					this.CONCEPTO_GLOSA = readString(dis);
					
					this.DESCRIPCION_GLOSA = readString(dis);
					
					this.RESPUESTA = readString(dis);
					
					this.REVISION_RESPUESTA = readString(dis);
					
						this.VALOR_GLOSADO = (BigDecimal) dis.readObject();
					
						this.VALOR_ACEPTADO = (BigDecimal) dis.readObject();
					
						this.VALOR_SOPORTADO = (BigDecimal) dis.readObject();
					
						this.VALOR_RATIFICADO = (BigDecimal) dis.readObject();
					
						this.VNETO = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.NUMERO_FACTURA,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// String
				
						writeString(this.PACIENTE,dos);
					
					// String
				
						writeString(this.CODIGO,dos);
					
					// String
				
						writeString(this.CONCEPTO_GLOSA,dos);
					
					// String
				
						writeString(this.DESCRIPCION_GLOSA,dos);
					
					// String
				
						writeString(this.RESPUESTA,dos);
					
					// String
				
						writeString(this.REVISION_RESPUESTA,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VALOR_GLOSADO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VALOR_ACEPTADO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VALOR_SOPORTADO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VALOR_RATIFICADO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VNETO);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.NUMERO_FACTURA,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// String
				
						writeString(this.PACIENTE,dos);
					
					// String
				
						writeString(this.CODIGO,dos);
					
					// String
				
						writeString(this.CONCEPTO_GLOSA,dos);
					
					// String
				
						writeString(this.DESCRIPCION_GLOSA,dos);
					
					// String
				
						writeString(this.RESPUESTA,dos);
					
					// String
				
						writeString(this.REVISION_RESPUESTA,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VALOR_GLOSADO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VALOR_ACEPTADO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VALOR_SOPORTADO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VALOR_RATIFICADO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VNETO);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("NUMERO_FACTURA="+NUMERO_FACTURA);
		sb.append(",DOCUMENTO="+DOCUMENTO);
		sb.append(",PACIENTE="+PACIENTE);
		sb.append(",CODIGO="+CODIGO);
		sb.append(",CONCEPTO_GLOSA="+CONCEPTO_GLOSA);
		sb.append(",DESCRIPCION_GLOSA="+DESCRIPCION_GLOSA);
		sb.append(",RESPUESTA="+RESPUESTA);
		sb.append(",REVISION_RESPUESTA="+REVISION_RESPUESTA);
		sb.append(",VALOR_GLOSADO="+String.valueOf(VALOR_GLOSADO));
		sb.append(",VALOR_ACEPTADO="+String.valueOf(VALOR_ACEPTADO));
		sb.append(",VALOR_SOPORTADO="+String.valueOf(VALOR_SOPORTADO));
		sb.append(",VALOR_RATIFICADO="+String.valueOf(VALOR_RATIFICADO));
		sb.append(",VNETO="+String.valueOf(VNETO));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row11Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row9Struct implements routines.system.IPersistableRow<row9Struct> {
    final static byte[] commonByteArrayLock_ACM_ACTAS_Actas = new byte[0];
    static byte[] commonByteArray_ACM_ACTAS_Actas = new byte[0];

	
			    public BigDecimal FACTURA_ID;

				public BigDecimal getFACTURA_ID () {
					return this.FACTURA_ID;
				}

				public Boolean FACTURA_IDIsNullable(){
				    return false;
				}
				public Boolean FACTURA_IDIsKey(){
				    return false;
				}
				public Integer FACTURA_IDLength(){
				    return null;
				}
				public Integer FACTURA_IDPrecision(){
				    return null;
				}
				public String FACTURA_IDDefault(){
				
					return "";
				
				}
				public String FACTURA_IDComment(){
				
				    return "";
				
				}
				public String FACTURA_IDPattern(){
				
					return "";
				
				}
				public String FACTURA_IDOriginalDbColumnName(){
				
					return "FACTURA_ID";
				
				}

				
			    public String NUMERO_FACTURA;

				public String getNUMERO_FACTURA () {
					return this.NUMERO_FACTURA;
				}

				public Boolean NUMERO_FACTURAIsNullable(){
				    return true;
				}
				public Boolean NUMERO_FACTURAIsKey(){
				    return false;
				}
				public Integer NUMERO_FACTURALength(){
				    return null;
				}
				public Integer NUMERO_FACTURAPrecision(){
				    return null;
				}
				public String NUMERO_FACTURADefault(){
				
					return null;
				
				}
				public String NUMERO_FACTURAComment(){
				
				    return "";
				
				}
				public String NUMERO_FACTURAPattern(){
				
					return "";
				
				}
				public String NUMERO_FACTURAOriginalDbColumnName(){
				
					return "NUMERO_FACTURA";
				
				}

				
			    public String DOCUMENTO;

				public String getDOCUMENTO () {
					return this.DOCUMENTO;
				}

				public Boolean DOCUMENTOIsNullable(){
				    return true;
				}
				public Boolean DOCUMENTOIsKey(){
				    return false;
				}
				public Integer DOCUMENTOLength(){
				    return null;
				}
				public Integer DOCUMENTOPrecision(){
				    return null;
				}
				public String DOCUMENTODefault(){
				
					return null;
				
				}
				public String DOCUMENTOComment(){
				
				    return "";
				
				}
				public String DOCUMENTOPattern(){
				
					return "";
				
				}
				public String DOCUMENTOOriginalDbColumnName(){
				
					return "DOCUMENTO";
				
				}

				
			    public String PACIENTE;

				public String getPACIENTE () {
					return this.PACIENTE;
				}

				public Boolean PACIENTEIsNullable(){
				    return true;
				}
				public Boolean PACIENTEIsKey(){
				    return false;
				}
				public Integer PACIENTELength(){
				    return null;
				}
				public Integer PACIENTEPrecision(){
				    return null;
				}
				public String PACIENTEDefault(){
				
					return null;
				
				}
				public String PACIENTEComment(){
				
				    return "";
				
				}
				public String PACIENTEPattern(){
				
					return "";
				
				}
				public String PACIENTEOriginalDbColumnName(){
				
					return "PACIENTE";
				
				}

				
			    public String CODIGO;

				public String getCODIGO () {
					return this.CODIGO;
				}

				public Boolean CODIGOIsNullable(){
				    return true;
				}
				public Boolean CODIGOIsKey(){
				    return false;
				}
				public Integer CODIGOLength(){
				    return null;
				}
				public Integer CODIGOPrecision(){
				    return null;
				}
				public String CODIGODefault(){
				
					return null;
				
				}
				public String CODIGOComment(){
				
				    return "";
				
				}
				public String CODIGOPattern(){
				
					return "";
				
				}
				public String CODIGOOriginalDbColumnName(){
				
					return "CODIGO";
				
				}

				
			    public String CONCEPTO_GLOSA;

				public String getCONCEPTO_GLOSA () {
					return this.CONCEPTO_GLOSA;
				}

				public Boolean CONCEPTO_GLOSAIsNullable(){
				    return false;
				}
				public Boolean CONCEPTO_GLOSAIsKey(){
				    return false;
				}
				public Integer CONCEPTO_GLOSALength(){
				    return null;
				}
				public Integer CONCEPTO_GLOSAPrecision(){
				    return null;
				}
				public String CONCEPTO_GLOSADefault(){
				
					return null;
				
				}
				public String CONCEPTO_GLOSAComment(){
				
				    return "";
				
				}
				public String CONCEPTO_GLOSAPattern(){
				
					return "";
				
				}
				public String CONCEPTO_GLOSAOriginalDbColumnName(){
				
					return "CONCEPTO_GLOSA";
				
				}

				
			    public String DESCRIPCION_GLOSA;

				public String getDESCRIPCION_GLOSA () {
					return this.DESCRIPCION_GLOSA;
				}

				public Boolean DESCRIPCION_GLOSAIsNullable(){
				    return true;
				}
				public Boolean DESCRIPCION_GLOSAIsKey(){
				    return false;
				}
				public Integer DESCRIPCION_GLOSALength(){
				    return null;
				}
				public Integer DESCRIPCION_GLOSAPrecision(){
				    return null;
				}
				public String DESCRIPCION_GLOSADefault(){
				
					return null;
				
				}
				public String DESCRIPCION_GLOSAComment(){
				
				    return "";
				
				}
				public String DESCRIPCION_GLOSAPattern(){
				
					return "";
				
				}
				public String DESCRIPCION_GLOSAOriginalDbColumnName(){
				
					return "DESCRIPCION_GLOSA";
				
				}

				
			    public String RESPUESTA;

				public String getRESPUESTA () {
					return this.RESPUESTA;
				}

				public Boolean RESPUESTAIsNullable(){
				    return true;
				}
				public Boolean RESPUESTAIsKey(){
				    return false;
				}
				public Integer RESPUESTALength(){
				    return null;
				}
				public Integer RESPUESTAPrecision(){
				    return null;
				}
				public String RESPUESTADefault(){
				
					return null;
				
				}
				public String RESPUESTAComment(){
				
				    return "";
				
				}
				public String RESPUESTAPattern(){
				
					return "";
				
				}
				public String RESPUESTAOriginalDbColumnName(){
				
					return "RESPUESTA";
				
				}

				
			    public String REVISION_RESPUESTA;

				public String getREVISION_RESPUESTA () {
					return this.REVISION_RESPUESTA;
				}

				public Boolean REVISION_RESPUESTAIsNullable(){
				    return true;
				}
				public Boolean REVISION_RESPUESTAIsKey(){
				    return false;
				}
				public Integer REVISION_RESPUESTALength(){
				    return null;
				}
				public Integer REVISION_RESPUESTAPrecision(){
				    return null;
				}
				public String REVISION_RESPUESTADefault(){
				
					return null;
				
				}
				public String REVISION_RESPUESTAComment(){
				
				    return "";
				
				}
				public String REVISION_RESPUESTAPattern(){
				
					return "";
				
				}
				public String REVISION_RESPUESTAOriginalDbColumnName(){
				
					return "REVISION_RESPUESTA";
				
				}

				
			    public BigDecimal VALOR_GLOSADO;

				public BigDecimal getVALOR_GLOSADO () {
					return this.VALOR_GLOSADO;
				}

				public Boolean VALOR_GLOSADOIsNullable(){
				    return true;
				}
				public Boolean VALOR_GLOSADOIsKey(){
				    return false;
				}
				public Integer VALOR_GLOSADOLength(){
				    return null;
				}
				public Integer VALOR_GLOSADOPrecision(){
				    return null;
				}
				public String VALOR_GLOSADODefault(){
				
					return "";
				
				}
				public String VALOR_GLOSADOComment(){
				
				    return "";
				
				}
				public String VALOR_GLOSADOPattern(){
				
					return "";
				
				}
				public String VALOR_GLOSADOOriginalDbColumnName(){
				
					return "VALOR_GLOSADO";
				
				}

				
			    public BigDecimal VALOR_ACEPTADO;

				public BigDecimal getVALOR_ACEPTADO () {
					return this.VALOR_ACEPTADO;
				}

				public Boolean VALOR_ACEPTADOIsNullable(){
				    return true;
				}
				public Boolean VALOR_ACEPTADOIsKey(){
				    return false;
				}
				public Integer VALOR_ACEPTADOLength(){
				    return null;
				}
				public Integer VALOR_ACEPTADOPrecision(){
				    return null;
				}
				public String VALOR_ACEPTADODefault(){
				
					return "";
				
				}
				public String VALOR_ACEPTADOComment(){
				
				    return "";
				
				}
				public String VALOR_ACEPTADOPattern(){
				
					return "";
				
				}
				public String VALOR_ACEPTADOOriginalDbColumnName(){
				
					return "VALOR_ACEPTADO";
				
				}

				
			    public BigDecimal VALOR_SOPORTADO;

				public BigDecimal getVALOR_SOPORTADO () {
					return this.VALOR_SOPORTADO;
				}

				public Boolean VALOR_SOPORTADOIsNullable(){
				    return true;
				}
				public Boolean VALOR_SOPORTADOIsKey(){
				    return false;
				}
				public Integer VALOR_SOPORTADOLength(){
				    return null;
				}
				public Integer VALOR_SOPORTADOPrecision(){
				    return null;
				}
				public String VALOR_SOPORTADODefault(){
				
					return "";
				
				}
				public String VALOR_SOPORTADOComment(){
				
				    return "";
				
				}
				public String VALOR_SOPORTADOPattern(){
				
					return "";
				
				}
				public String VALOR_SOPORTADOOriginalDbColumnName(){
				
					return "VALOR_SOPORTADO";
				
				}

				
			    public BigDecimal VALOR_RATIFICADO;

				public BigDecimal getVALOR_RATIFICADO () {
					return this.VALOR_RATIFICADO;
				}

				public Boolean VALOR_RATIFICADOIsNullable(){
				    return true;
				}
				public Boolean VALOR_RATIFICADOIsKey(){
				    return false;
				}
				public Integer VALOR_RATIFICADOLength(){
				    return null;
				}
				public Integer VALOR_RATIFICADOPrecision(){
				    return null;
				}
				public String VALOR_RATIFICADODefault(){
				
					return "";
				
				}
				public String VALOR_RATIFICADOComment(){
				
				    return "";
				
				}
				public String VALOR_RATIFICADOPattern(){
				
					return "";
				
				}
				public String VALOR_RATIFICADOOriginalDbColumnName(){
				
					return "VALOR_RATIFICADO";
				
				}

				
			    public BigDecimal VNETO;

				public BigDecimal getVNETO () {
					return this.VNETO;
				}

				public Boolean VNETOIsNullable(){
				    return true;
				}
				public Boolean VNETOIsKey(){
				    return false;
				}
				public Integer VNETOLength(){
				    return null;
				}
				public Integer VNETOPrecision(){
				    return null;
				}
				public String VNETODefault(){
				
					return "";
				
				}
				public String VNETOComment(){
				
				    return "";
				
				}
				public String VNETOPattern(){
				
					return "";
				
				}
				public String VNETOOriginalDbColumnName(){
				
					return "VNETO";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_ACTAS_Actas.length) {
				if(length < 1024 && commonByteArray_ACM_ACTAS_Actas.length == 0) {
   					commonByteArray_ACM_ACTAS_Actas = new byte[1024];
				} else {
   					commonByteArray_ACM_ACTAS_Actas = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ACM_ACTAS_Actas, 0, length);
			strReturn = new String(commonByteArray_ACM_ACTAS_Actas, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_ACTAS_Actas.length) {
				if(length < 1024 && commonByteArray_ACM_ACTAS_Actas.length == 0) {
   					commonByteArray_ACM_ACTAS_Actas = new byte[1024];
				} else {
   					commonByteArray_ACM_ACTAS_Actas = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_ACM_ACTAS_Actas, 0, length);
			strReturn = new String(commonByteArray_ACM_ACTAS_Actas, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ACM_ACTAS_Actas) {

        	try {

        		int length = 0;
		
						this.FACTURA_ID = (BigDecimal) dis.readObject();
					
					this.NUMERO_FACTURA = readString(dis);
					
					this.DOCUMENTO = readString(dis);
					
					this.PACIENTE = readString(dis);
					
					this.CODIGO = readString(dis);
					
					this.CONCEPTO_GLOSA = readString(dis);
					
					this.DESCRIPCION_GLOSA = readString(dis);
					
					this.RESPUESTA = readString(dis);
					
					this.REVISION_RESPUESTA = readString(dis);
					
						this.VALOR_GLOSADO = (BigDecimal) dis.readObject();
					
						this.VALOR_ACEPTADO = (BigDecimal) dis.readObject();
					
						this.VALOR_SOPORTADO = (BigDecimal) dis.readObject();
					
						this.VALOR_RATIFICADO = (BigDecimal) dis.readObject();
					
						this.VNETO = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ACM_ACTAS_Actas) {

        	try {

        		int length = 0;
		
						this.FACTURA_ID = (BigDecimal) dis.readObject();
					
					this.NUMERO_FACTURA = readString(dis);
					
					this.DOCUMENTO = readString(dis);
					
					this.PACIENTE = readString(dis);
					
					this.CODIGO = readString(dis);
					
					this.CONCEPTO_GLOSA = readString(dis);
					
					this.DESCRIPCION_GLOSA = readString(dis);
					
					this.RESPUESTA = readString(dis);
					
					this.REVISION_RESPUESTA = readString(dis);
					
						this.VALOR_GLOSADO = (BigDecimal) dis.readObject();
					
						this.VALOR_ACEPTADO = (BigDecimal) dis.readObject();
					
						this.VALOR_SOPORTADO = (BigDecimal) dis.readObject();
					
						this.VALOR_RATIFICADO = (BigDecimal) dis.readObject();
					
						this.VNETO = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.FACTURA_ID);
					
					// String
				
						writeString(this.NUMERO_FACTURA,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// String
				
						writeString(this.PACIENTE,dos);
					
					// String
				
						writeString(this.CODIGO,dos);
					
					// String
				
						writeString(this.CONCEPTO_GLOSA,dos);
					
					// String
				
						writeString(this.DESCRIPCION_GLOSA,dos);
					
					// String
				
						writeString(this.RESPUESTA,dos);
					
					// String
				
						writeString(this.REVISION_RESPUESTA,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VALOR_GLOSADO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VALOR_ACEPTADO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VALOR_SOPORTADO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VALOR_RATIFICADO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VNETO);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.FACTURA_ID);
					
					// String
				
						writeString(this.NUMERO_FACTURA,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// String
				
						writeString(this.PACIENTE,dos);
					
					// String
				
						writeString(this.CODIGO,dos);
					
					// String
				
						writeString(this.CONCEPTO_GLOSA,dos);
					
					// String
				
						writeString(this.DESCRIPCION_GLOSA,dos);
					
					// String
				
						writeString(this.RESPUESTA,dos);
					
					// String
				
						writeString(this.REVISION_RESPUESTA,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VALOR_GLOSADO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VALOR_ACEPTADO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VALOR_SOPORTADO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VALOR_RATIFICADO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VNETO);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("FACTURA_ID="+String.valueOf(FACTURA_ID));
		sb.append(",NUMERO_FACTURA="+NUMERO_FACTURA);
		sb.append(",DOCUMENTO="+DOCUMENTO);
		sb.append(",PACIENTE="+PACIENTE);
		sb.append(",CODIGO="+CODIGO);
		sb.append(",CONCEPTO_GLOSA="+CONCEPTO_GLOSA);
		sb.append(",DESCRIPCION_GLOSA="+DESCRIPCION_GLOSA);
		sb.append(",RESPUESTA="+RESPUESTA);
		sb.append(",REVISION_RESPUESTA="+REVISION_RESPUESTA);
		sb.append(",VALOR_GLOSADO="+String.valueOf(VALOR_GLOSADO));
		sb.append(",VALOR_ACEPTADO="+String.valueOf(VALOR_ACEPTADO));
		sb.append(",VALOR_SOPORTADO="+String.valueOf(VALOR_SOPORTADO));
		sb.append(",VALOR_RATIFICADO="+String.valueOf(VALOR_RATIFICADO));
		sb.append(",VNETO="+String.valueOf(VNETO));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row9Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row8Struct implements routines.system.IPersistableRow<row8Struct> {
    final static byte[] commonByteArrayLock_ACM_ACTAS_Actas = new byte[0];
    static byte[] commonByteArray_ACM_ACTAS_Actas = new byte[0];

	
			    public BigDecimal FACTURA_ID;

				public BigDecimal getFACTURA_ID () {
					return this.FACTURA_ID;
				}

				public Boolean FACTURA_IDIsNullable(){
				    return false;
				}
				public Boolean FACTURA_IDIsKey(){
				    return false;
				}
				public Integer FACTURA_IDLength(){
				    return null;
				}
				public Integer FACTURA_IDPrecision(){
				    return null;
				}
				public String FACTURA_IDDefault(){
				
					return "";
				
				}
				public String FACTURA_IDComment(){
				
				    return "";
				
				}
				public String FACTURA_IDPattern(){
				
					return "";
				
				}
				public String FACTURA_IDOriginalDbColumnName(){
				
					return "FACTURA_ID";
				
				}

				
			    public String NUMERO_FACTURA;

				public String getNUMERO_FACTURA () {
					return this.NUMERO_FACTURA;
				}

				public Boolean NUMERO_FACTURAIsNullable(){
				    return true;
				}
				public Boolean NUMERO_FACTURAIsKey(){
				    return false;
				}
				public Integer NUMERO_FACTURALength(){
				    return null;
				}
				public Integer NUMERO_FACTURAPrecision(){
				    return null;
				}
				public String NUMERO_FACTURADefault(){
				
					return null;
				
				}
				public String NUMERO_FACTURAComment(){
				
				    return "";
				
				}
				public String NUMERO_FACTURAPattern(){
				
					return "";
				
				}
				public String NUMERO_FACTURAOriginalDbColumnName(){
				
					return "NUMERO_FACTURA";
				
				}

				
			    public String DOCUMENTO;

				public String getDOCUMENTO () {
					return this.DOCUMENTO;
				}

				public Boolean DOCUMENTOIsNullable(){
				    return true;
				}
				public Boolean DOCUMENTOIsKey(){
				    return false;
				}
				public Integer DOCUMENTOLength(){
				    return null;
				}
				public Integer DOCUMENTOPrecision(){
				    return null;
				}
				public String DOCUMENTODefault(){
				
					return null;
				
				}
				public String DOCUMENTOComment(){
				
				    return "";
				
				}
				public String DOCUMENTOPattern(){
				
					return "";
				
				}
				public String DOCUMENTOOriginalDbColumnName(){
				
					return "DOCUMENTO";
				
				}

				
			    public String PACIENTE;

				public String getPACIENTE () {
					return this.PACIENTE;
				}

				public Boolean PACIENTEIsNullable(){
				    return true;
				}
				public Boolean PACIENTEIsKey(){
				    return false;
				}
				public Integer PACIENTELength(){
				    return null;
				}
				public Integer PACIENTEPrecision(){
				    return null;
				}
				public String PACIENTEDefault(){
				
					return null;
				
				}
				public String PACIENTEComment(){
				
				    return "";
				
				}
				public String PACIENTEPattern(){
				
					return "";
				
				}
				public String PACIENTEOriginalDbColumnName(){
				
					return "PACIENTE";
				
				}

				
			    public String CODIGO;

				public String getCODIGO () {
					return this.CODIGO;
				}

				public Boolean CODIGOIsNullable(){
				    return true;
				}
				public Boolean CODIGOIsKey(){
				    return false;
				}
				public Integer CODIGOLength(){
				    return null;
				}
				public Integer CODIGOPrecision(){
				    return null;
				}
				public String CODIGODefault(){
				
					return null;
				
				}
				public String CODIGOComment(){
				
				    return "";
				
				}
				public String CODIGOPattern(){
				
					return "";
				
				}
				public String CODIGOOriginalDbColumnName(){
				
					return "CODIGO";
				
				}

				
			    public String CONCEPTO_GLOSA;

				public String getCONCEPTO_GLOSA () {
					return this.CONCEPTO_GLOSA;
				}

				public Boolean CONCEPTO_GLOSAIsNullable(){
				    return false;
				}
				public Boolean CONCEPTO_GLOSAIsKey(){
				    return false;
				}
				public Integer CONCEPTO_GLOSALength(){
				    return null;
				}
				public Integer CONCEPTO_GLOSAPrecision(){
				    return null;
				}
				public String CONCEPTO_GLOSADefault(){
				
					return null;
				
				}
				public String CONCEPTO_GLOSAComment(){
				
				    return "";
				
				}
				public String CONCEPTO_GLOSAPattern(){
				
					return "";
				
				}
				public String CONCEPTO_GLOSAOriginalDbColumnName(){
				
					return "CONCEPTO_GLOSA";
				
				}

				
			    public String DESCRIPCION_GLOSA;

				public String getDESCRIPCION_GLOSA () {
					return this.DESCRIPCION_GLOSA;
				}

				public Boolean DESCRIPCION_GLOSAIsNullable(){
				    return true;
				}
				public Boolean DESCRIPCION_GLOSAIsKey(){
				    return false;
				}
				public Integer DESCRIPCION_GLOSALength(){
				    return null;
				}
				public Integer DESCRIPCION_GLOSAPrecision(){
				    return null;
				}
				public String DESCRIPCION_GLOSADefault(){
				
					return null;
				
				}
				public String DESCRIPCION_GLOSAComment(){
				
				    return "";
				
				}
				public String DESCRIPCION_GLOSAPattern(){
				
					return "";
				
				}
				public String DESCRIPCION_GLOSAOriginalDbColumnName(){
				
					return "DESCRIPCION_GLOSA";
				
				}

				
			    public String RESPUESTA;

				public String getRESPUESTA () {
					return this.RESPUESTA;
				}

				public Boolean RESPUESTAIsNullable(){
				    return true;
				}
				public Boolean RESPUESTAIsKey(){
				    return false;
				}
				public Integer RESPUESTALength(){
				    return null;
				}
				public Integer RESPUESTAPrecision(){
				    return null;
				}
				public String RESPUESTADefault(){
				
					return null;
				
				}
				public String RESPUESTAComment(){
				
				    return "";
				
				}
				public String RESPUESTAPattern(){
				
					return "";
				
				}
				public String RESPUESTAOriginalDbColumnName(){
				
					return "RESPUESTA";
				
				}

				
			    public String REVISION_RESPUESTA;

				public String getREVISION_RESPUESTA () {
					return this.REVISION_RESPUESTA;
				}

				public Boolean REVISION_RESPUESTAIsNullable(){
				    return true;
				}
				public Boolean REVISION_RESPUESTAIsKey(){
				    return false;
				}
				public Integer REVISION_RESPUESTALength(){
				    return null;
				}
				public Integer REVISION_RESPUESTAPrecision(){
				    return null;
				}
				public String REVISION_RESPUESTADefault(){
				
					return null;
				
				}
				public String REVISION_RESPUESTAComment(){
				
				    return "";
				
				}
				public String REVISION_RESPUESTAPattern(){
				
					return "";
				
				}
				public String REVISION_RESPUESTAOriginalDbColumnName(){
				
					return "REVISION_RESPUESTA";
				
				}

				
			    public BigDecimal VALOR_GLOSADO;

				public BigDecimal getVALOR_GLOSADO () {
					return this.VALOR_GLOSADO;
				}

				public Boolean VALOR_GLOSADOIsNullable(){
				    return true;
				}
				public Boolean VALOR_GLOSADOIsKey(){
				    return false;
				}
				public Integer VALOR_GLOSADOLength(){
				    return null;
				}
				public Integer VALOR_GLOSADOPrecision(){
				    return null;
				}
				public String VALOR_GLOSADODefault(){
				
					return "";
				
				}
				public String VALOR_GLOSADOComment(){
				
				    return "";
				
				}
				public String VALOR_GLOSADOPattern(){
				
					return "";
				
				}
				public String VALOR_GLOSADOOriginalDbColumnName(){
				
					return "VALOR_GLOSADO";
				
				}

				
			    public BigDecimal VALOR_ACEPTADO;

				public BigDecimal getVALOR_ACEPTADO () {
					return this.VALOR_ACEPTADO;
				}

				public Boolean VALOR_ACEPTADOIsNullable(){
				    return true;
				}
				public Boolean VALOR_ACEPTADOIsKey(){
				    return false;
				}
				public Integer VALOR_ACEPTADOLength(){
				    return null;
				}
				public Integer VALOR_ACEPTADOPrecision(){
				    return null;
				}
				public String VALOR_ACEPTADODefault(){
				
					return "";
				
				}
				public String VALOR_ACEPTADOComment(){
				
				    return "";
				
				}
				public String VALOR_ACEPTADOPattern(){
				
					return "";
				
				}
				public String VALOR_ACEPTADOOriginalDbColumnName(){
				
					return "VALOR_ACEPTADO";
				
				}

				
			    public BigDecimal VALOR_SOPORTADO;

				public BigDecimal getVALOR_SOPORTADO () {
					return this.VALOR_SOPORTADO;
				}

				public Boolean VALOR_SOPORTADOIsNullable(){
				    return true;
				}
				public Boolean VALOR_SOPORTADOIsKey(){
				    return false;
				}
				public Integer VALOR_SOPORTADOLength(){
				    return null;
				}
				public Integer VALOR_SOPORTADOPrecision(){
				    return null;
				}
				public String VALOR_SOPORTADODefault(){
				
					return "";
				
				}
				public String VALOR_SOPORTADOComment(){
				
				    return "";
				
				}
				public String VALOR_SOPORTADOPattern(){
				
					return "";
				
				}
				public String VALOR_SOPORTADOOriginalDbColumnName(){
				
					return "VALOR_SOPORTADO";
				
				}

				
			    public BigDecimal VALOR_RATIFICADO;

				public BigDecimal getVALOR_RATIFICADO () {
					return this.VALOR_RATIFICADO;
				}

				public Boolean VALOR_RATIFICADOIsNullable(){
				    return true;
				}
				public Boolean VALOR_RATIFICADOIsKey(){
				    return false;
				}
				public Integer VALOR_RATIFICADOLength(){
				    return null;
				}
				public Integer VALOR_RATIFICADOPrecision(){
				    return null;
				}
				public String VALOR_RATIFICADODefault(){
				
					return "";
				
				}
				public String VALOR_RATIFICADOComment(){
				
				    return "";
				
				}
				public String VALOR_RATIFICADOPattern(){
				
					return "";
				
				}
				public String VALOR_RATIFICADOOriginalDbColumnName(){
				
					return "VALOR_RATIFICADO";
				
				}

				
			    public BigDecimal VNETO;

				public BigDecimal getVNETO () {
					return this.VNETO;
				}

				public Boolean VNETOIsNullable(){
				    return true;
				}
				public Boolean VNETOIsKey(){
				    return false;
				}
				public Integer VNETOLength(){
				    return null;
				}
				public Integer VNETOPrecision(){
				    return null;
				}
				public String VNETODefault(){
				
					return "";
				
				}
				public String VNETOComment(){
				
				    return "";
				
				}
				public String VNETOPattern(){
				
					return "";
				
				}
				public String VNETOOriginalDbColumnName(){
				
					return "VNETO";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_ACTAS_Actas.length) {
				if(length < 1024 && commonByteArray_ACM_ACTAS_Actas.length == 0) {
   					commonByteArray_ACM_ACTAS_Actas = new byte[1024];
				} else {
   					commonByteArray_ACM_ACTAS_Actas = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ACM_ACTAS_Actas, 0, length);
			strReturn = new String(commonByteArray_ACM_ACTAS_Actas, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_ACTAS_Actas.length) {
				if(length < 1024 && commonByteArray_ACM_ACTAS_Actas.length == 0) {
   					commonByteArray_ACM_ACTAS_Actas = new byte[1024];
				} else {
   					commonByteArray_ACM_ACTAS_Actas = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_ACM_ACTAS_Actas, 0, length);
			strReturn = new String(commonByteArray_ACM_ACTAS_Actas, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ACM_ACTAS_Actas) {

        	try {

        		int length = 0;
		
						this.FACTURA_ID = (BigDecimal) dis.readObject();
					
					this.NUMERO_FACTURA = readString(dis);
					
					this.DOCUMENTO = readString(dis);
					
					this.PACIENTE = readString(dis);
					
					this.CODIGO = readString(dis);
					
					this.CONCEPTO_GLOSA = readString(dis);
					
					this.DESCRIPCION_GLOSA = readString(dis);
					
					this.RESPUESTA = readString(dis);
					
					this.REVISION_RESPUESTA = readString(dis);
					
						this.VALOR_GLOSADO = (BigDecimal) dis.readObject();
					
						this.VALOR_ACEPTADO = (BigDecimal) dis.readObject();
					
						this.VALOR_SOPORTADO = (BigDecimal) dis.readObject();
					
						this.VALOR_RATIFICADO = (BigDecimal) dis.readObject();
					
						this.VNETO = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ACM_ACTAS_Actas) {

        	try {

        		int length = 0;
		
						this.FACTURA_ID = (BigDecimal) dis.readObject();
					
					this.NUMERO_FACTURA = readString(dis);
					
					this.DOCUMENTO = readString(dis);
					
					this.PACIENTE = readString(dis);
					
					this.CODIGO = readString(dis);
					
					this.CONCEPTO_GLOSA = readString(dis);
					
					this.DESCRIPCION_GLOSA = readString(dis);
					
					this.RESPUESTA = readString(dis);
					
					this.REVISION_RESPUESTA = readString(dis);
					
						this.VALOR_GLOSADO = (BigDecimal) dis.readObject();
					
						this.VALOR_ACEPTADO = (BigDecimal) dis.readObject();
					
						this.VALOR_SOPORTADO = (BigDecimal) dis.readObject();
					
						this.VALOR_RATIFICADO = (BigDecimal) dis.readObject();
					
						this.VNETO = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.FACTURA_ID);
					
					// String
				
						writeString(this.NUMERO_FACTURA,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// String
				
						writeString(this.PACIENTE,dos);
					
					// String
				
						writeString(this.CODIGO,dos);
					
					// String
				
						writeString(this.CONCEPTO_GLOSA,dos);
					
					// String
				
						writeString(this.DESCRIPCION_GLOSA,dos);
					
					// String
				
						writeString(this.RESPUESTA,dos);
					
					// String
				
						writeString(this.REVISION_RESPUESTA,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VALOR_GLOSADO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VALOR_ACEPTADO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VALOR_SOPORTADO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VALOR_RATIFICADO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VNETO);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.FACTURA_ID);
					
					// String
				
						writeString(this.NUMERO_FACTURA,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// String
				
						writeString(this.PACIENTE,dos);
					
					// String
				
						writeString(this.CODIGO,dos);
					
					// String
				
						writeString(this.CONCEPTO_GLOSA,dos);
					
					// String
				
						writeString(this.DESCRIPCION_GLOSA,dos);
					
					// String
				
						writeString(this.RESPUESTA,dos);
					
					// String
				
						writeString(this.REVISION_RESPUESTA,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VALOR_GLOSADO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VALOR_ACEPTADO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VALOR_SOPORTADO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VALOR_RATIFICADO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VNETO);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("FACTURA_ID="+String.valueOf(FACTURA_ID));
		sb.append(",NUMERO_FACTURA="+NUMERO_FACTURA);
		sb.append(",DOCUMENTO="+DOCUMENTO);
		sb.append(",PACIENTE="+PACIENTE);
		sb.append(",CODIGO="+CODIGO);
		sb.append(",CONCEPTO_GLOSA="+CONCEPTO_GLOSA);
		sb.append(",DESCRIPCION_GLOSA="+DESCRIPCION_GLOSA);
		sb.append(",RESPUESTA="+RESPUESTA);
		sb.append(",REVISION_RESPUESTA="+REVISION_RESPUESTA);
		sb.append(",VALOR_GLOSADO="+String.valueOf(VALOR_GLOSADO));
		sb.append(",VALOR_ACEPTADO="+String.valueOf(VALOR_ACEPTADO));
		sb.append(",VALOR_SOPORTADO="+String.valueOf(VALOR_SOPORTADO));
		sb.append(",VALOR_RATIFICADO="+String.valueOf(VALOR_RATIFICADO));
		sb.append(",VNETO="+String.valueOf(VNETO));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row8Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row13Struct implements routines.system.IPersistableRow<row13Struct> {
    final static byte[] commonByteArrayLock_ACM_ACTAS_Actas = new byte[0];
    static byte[] commonByteArray_ACM_ACTAS_Actas = new byte[0];

	
			    public BigDecimal FACTURA_ID;

				public BigDecimal getFACTURA_ID () {
					return this.FACTURA_ID;
				}

				public Boolean FACTURA_IDIsNullable(){
				    return false;
				}
				public Boolean FACTURA_IDIsKey(){
				    return false;
				}
				public Integer FACTURA_IDLength(){
				    return null;
				}
				public Integer FACTURA_IDPrecision(){
				    return null;
				}
				public String FACTURA_IDDefault(){
				
					return "";
				
				}
				public String FACTURA_IDComment(){
				
				    return "";
				
				}
				public String FACTURA_IDPattern(){
				
					return "";
				
				}
				public String FACTURA_IDOriginalDbColumnName(){
				
					return "FACTURA_ID";
				
				}

				
			    public String NUMERO_FACTURA;

				public String getNUMERO_FACTURA () {
					return this.NUMERO_FACTURA;
				}

				public Boolean NUMERO_FACTURAIsNullable(){
				    return true;
				}
				public Boolean NUMERO_FACTURAIsKey(){
				    return false;
				}
				public Integer NUMERO_FACTURALength(){
				    return null;
				}
				public Integer NUMERO_FACTURAPrecision(){
				    return null;
				}
				public String NUMERO_FACTURADefault(){
				
					return null;
				
				}
				public String NUMERO_FACTURAComment(){
				
				    return "";
				
				}
				public String NUMERO_FACTURAPattern(){
				
					return "";
				
				}
				public String NUMERO_FACTURAOriginalDbColumnName(){
				
					return "NUMERO_FACTURA";
				
				}

				
			    public String DOCUMENTO;

				public String getDOCUMENTO () {
					return this.DOCUMENTO;
				}

				public Boolean DOCUMENTOIsNullable(){
				    return true;
				}
				public Boolean DOCUMENTOIsKey(){
				    return false;
				}
				public Integer DOCUMENTOLength(){
				    return null;
				}
				public Integer DOCUMENTOPrecision(){
				    return null;
				}
				public String DOCUMENTODefault(){
				
					return null;
				
				}
				public String DOCUMENTOComment(){
				
				    return "";
				
				}
				public String DOCUMENTOPattern(){
				
					return "";
				
				}
				public String DOCUMENTOOriginalDbColumnName(){
				
					return "DOCUMENTO";
				
				}

				
			    public String PACIENTE;

				public String getPACIENTE () {
					return this.PACIENTE;
				}

				public Boolean PACIENTEIsNullable(){
				    return true;
				}
				public Boolean PACIENTEIsKey(){
				    return false;
				}
				public Integer PACIENTELength(){
				    return null;
				}
				public Integer PACIENTEPrecision(){
				    return null;
				}
				public String PACIENTEDefault(){
				
					return null;
				
				}
				public String PACIENTEComment(){
				
				    return "";
				
				}
				public String PACIENTEPattern(){
				
					return "";
				
				}
				public String PACIENTEOriginalDbColumnName(){
				
					return "PACIENTE";
				
				}

				
			    public String CODIGO;

				public String getCODIGO () {
					return this.CODIGO;
				}

				public Boolean CODIGOIsNullable(){
				    return true;
				}
				public Boolean CODIGOIsKey(){
				    return false;
				}
				public Integer CODIGOLength(){
				    return null;
				}
				public Integer CODIGOPrecision(){
				    return null;
				}
				public String CODIGODefault(){
				
					return null;
				
				}
				public String CODIGOComment(){
				
				    return "";
				
				}
				public String CODIGOPattern(){
				
					return "";
				
				}
				public String CODIGOOriginalDbColumnName(){
				
					return "CODIGO";
				
				}

				
			    public String CONCEPTO_GLOSA;

				public String getCONCEPTO_GLOSA () {
					return this.CONCEPTO_GLOSA;
				}

				public Boolean CONCEPTO_GLOSAIsNullable(){
				    return false;
				}
				public Boolean CONCEPTO_GLOSAIsKey(){
				    return false;
				}
				public Integer CONCEPTO_GLOSALength(){
				    return null;
				}
				public Integer CONCEPTO_GLOSAPrecision(){
				    return null;
				}
				public String CONCEPTO_GLOSADefault(){
				
					return null;
				
				}
				public String CONCEPTO_GLOSAComment(){
				
				    return "";
				
				}
				public String CONCEPTO_GLOSAPattern(){
				
					return "";
				
				}
				public String CONCEPTO_GLOSAOriginalDbColumnName(){
				
					return "CONCEPTO_GLOSA";
				
				}

				
			    public String DESCRIPCION_GLOSA;

				public String getDESCRIPCION_GLOSA () {
					return this.DESCRIPCION_GLOSA;
				}

				public Boolean DESCRIPCION_GLOSAIsNullable(){
				    return true;
				}
				public Boolean DESCRIPCION_GLOSAIsKey(){
				    return false;
				}
				public Integer DESCRIPCION_GLOSALength(){
				    return null;
				}
				public Integer DESCRIPCION_GLOSAPrecision(){
				    return null;
				}
				public String DESCRIPCION_GLOSADefault(){
				
					return null;
				
				}
				public String DESCRIPCION_GLOSAComment(){
				
				    return "";
				
				}
				public String DESCRIPCION_GLOSAPattern(){
				
					return "";
				
				}
				public String DESCRIPCION_GLOSAOriginalDbColumnName(){
				
					return "DESCRIPCION_GLOSA";
				
				}

				
			    public String RESPUESTA;

				public String getRESPUESTA () {
					return this.RESPUESTA;
				}

				public Boolean RESPUESTAIsNullable(){
				    return true;
				}
				public Boolean RESPUESTAIsKey(){
				    return false;
				}
				public Integer RESPUESTALength(){
				    return null;
				}
				public Integer RESPUESTAPrecision(){
				    return null;
				}
				public String RESPUESTADefault(){
				
					return null;
				
				}
				public String RESPUESTAComment(){
				
				    return "";
				
				}
				public String RESPUESTAPattern(){
				
					return "";
				
				}
				public String RESPUESTAOriginalDbColumnName(){
				
					return "RESPUESTA";
				
				}

				
			    public String REVISION_RESPUESTA;

				public String getREVISION_RESPUESTA () {
					return this.REVISION_RESPUESTA;
				}

				public Boolean REVISION_RESPUESTAIsNullable(){
				    return true;
				}
				public Boolean REVISION_RESPUESTAIsKey(){
				    return false;
				}
				public Integer REVISION_RESPUESTALength(){
				    return null;
				}
				public Integer REVISION_RESPUESTAPrecision(){
				    return null;
				}
				public String REVISION_RESPUESTADefault(){
				
					return null;
				
				}
				public String REVISION_RESPUESTAComment(){
				
				    return "";
				
				}
				public String REVISION_RESPUESTAPattern(){
				
					return "";
				
				}
				public String REVISION_RESPUESTAOriginalDbColumnName(){
				
					return "REVISION_RESPUESTA";
				
				}

				
			    public BigDecimal VALOR_GLOSADO;

				public BigDecimal getVALOR_GLOSADO () {
					return this.VALOR_GLOSADO;
				}

				public Boolean VALOR_GLOSADOIsNullable(){
				    return true;
				}
				public Boolean VALOR_GLOSADOIsKey(){
				    return false;
				}
				public Integer VALOR_GLOSADOLength(){
				    return null;
				}
				public Integer VALOR_GLOSADOPrecision(){
				    return null;
				}
				public String VALOR_GLOSADODefault(){
				
					return "";
				
				}
				public String VALOR_GLOSADOComment(){
				
				    return "";
				
				}
				public String VALOR_GLOSADOPattern(){
				
					return "";
				
				}
				public String VALOR_GLOSADOOriginalDbColumnName(){
				
					return "VALOR_GLOSADO";
				
				}

				
			    public BigDecimal VALOR_ACEPTADO;

				public BigDecimal getVALOR_ACEPTADO () {
					return this.VALOR_ACEPTADO;
				}

				public Boolean VALOR_ACEPTADOIsNullable(){
				    return true;
				}
				public Boolean VALOR_ACEPTADOIsKey(){
				    return false;
				}
				public Integer VALOR_ACEPTADOLength(){
				    return null;
				}
				public Integer VALOR_ACEPTADOPrecision(){
				    return null;
				}
				public String VALOR_ACEPTADODefault(){
				
					return "";
				
				}
				public String VALOR_ACEPTADOComment(){
				
				    return "";
				
				}
				public String VALOR_ACEPTADOPattern(){
				
					return "";
				
				}
				public String VALOR_ACEPTADOOriginalDbColumnName(){
				
					return "VALOR_ACEPTADO";
				
				}

				
			    public BigDecimal VALOR_SOPORTADO;

				public BigDecimal getVALOR_SOPORTADO () {
					return this.VALOR_SOPORTADO;
				}

				public Boolean VALOR_SOPORTADOIsNullable(){
				    return true;
				}
				public Boolean VALOR_SOPORTADOIsKey(){
				    return false;
				}
				public Integer VALOR_SOPORTADOLength(){
				    return null;
				}
				public Integer VALOR_SOPORTADOPrecision(){
				    return null;
				}
				public String VALOR_SOPORTADODefault(){
				
					return "";
				
				}
				public String VALOR_SOPORTADOComment(){
				
				    return "";
				
				}
				public String VALOR_SOPORTADOPattern(){
				
					return "";
				
				}
				public String VALOR_SOPORTADOOriginalDbColumnName(){
				
					return "VALOR_SOPORTADO";
				
				}

				
			    public BigDecimal VALOR_RATIFICADO;

				public BigDecimal getVALOR_RATIFICADO () {
					return this.VALOR_RATIFICADO;
				}

				public Boolean VALOR_RATIFICADOIsNullable(){
				    return true;
				}
				public Boolean VALOR_RATIFICADOIsKey(){
				    return false;
				}
				public Integer VALOR_RATIFICADOLength(){
				    return null;
				}
				public Integer VALOR_RATIFICADOPrecision(){
				    return null;
				}
				public String VALOR_RATIFICADODefault(){
				
					return "";
				
				}
				public String VALOR_RATIFICADOComment(){
				
				    return "";
				
				}
				public String VALOR_RATIFICADOPattern(){
				
					return "";
				
				}
				public String VALOR_RATIFICADOOriginalDbColumnName(){
				
					return "VALOR_RATIFICADO";
				
				}

				
			    public BigDecimal VNETO;

				public BigDecimal getVNETO () {
					return this.VNETO;
				}

				public Boolean VNETOIsNullable(){
				    return true;
				}
				public Boolean VNETOIsKey(){
				    return false;
				}
				public Integer VNETOLength(){
				    return null;
				}
				public Integer VNETOPrecision(){
				    return null;
				}
				public String VNETODefault(){
				
					return "";
				
				}
				public String VNETOComment(){
				
				    return "";
				
				}
				public String VNETOPattern(){
				
					return "";
				
				}
				public String VNETOOriginalDbColumnName(){
				
					return "VNETO";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_ACTAS_Actas.length) {
				if(length < 1024 && commonByteArray_ACM_ACTAS_Actas.length == 0) {
   					commonByteArray_ACM_ACTAS_Actas = new byte[1024];
				} else {
   					commonByteArray_ACM_ACTAS_Actas = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ACM_ACTAS_Actas, 0, length);
			strReturn = new String(commonByteArray_ACM_ACTAS_Actas, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_ACTAS_Actas.length) {
				if(length < 1024 && commonByteArray_ACM_ACTAS_Actas.length == 0) {
   					commonByteArray_ACM_ACTAS_Actas = new byte[1024];
				} else {
   					commonByteArray_ACM_ACTAS_Actas = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_ACM_ACTAS_Actas, 0, length);
			strReturn = new String(commonByteArray_ACM_ACTAS_Actas, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ACM_ACTAS_Actas) {

        	try {

        		int length = 0;
		
						this.FACTURA_ID = (BigDecimal) dis.readObject();
					
					this.NUMERO_FACTURA = readString(dis);
					
					this.DOCUMENTO = readString(dis);
					
					this.PACIENTE = readString(dis);
					
					this.CODIGO = readString(dis);
					
					this.CONCEPTO_GLOSA = readString(dis);
					
					this.DESCRIPCION_GLOSA = readString(dis);
					
					this.RESPUESTA = readString(dis);
					
					this.REVISION_RESPUESTA = readString(dis);
					
						this.VALOR_GLOSADO = (BigDecimal) dis.readObject();
					
						this.VALOR_ACEPTADO = (BigDecimal) dis.readObject();
					
						this.VALOR_SOPORTADO = (BigDecimal) dis.readObject();
					
						this.VALOR_RATIFICADO = (BigDecimal) dis.readObject();
					
						this.VNETO = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ACM_ACTAS_Actas) {

        	try {

        		int length = 0;
		
						this.FACTURA_ID = (BigDecimal) dis.readObject();
					
					this.NUMERO_FACTURA = readString(dis);
					
					this.DOCUMENTO = readString(dis);
					
					this.PACIENTE = readString(dis);
					
					this.CODIGO = readString(dis);
					
					this.CONCEPTO_GLOSA = readString(dis);
					
					this.DESCRIPCION_GLOSA = readString(dis);
					
					this.RESPUESTA = readString(dis);
					
					this.REVISION_RESPUESTA = readString(dis);
					
						this.VALOR_GLOSADO = (BigDecimal) dis.readObject();
					
						this.VALOR_ACEPTADO = (BigDecimal) dis.readObject();
					
						this.VALOR_SOPORTADO = (BigDecimal) dis.readObject();
					
						this.VALOR_RATIFICADO = (BigDecimal) dis.readObject();
					
						this.VNETO = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.FACTURA_ID);
					
					// String
				
						writeString(this.NUMERO_FACTURA,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// String
				
						writeString(this.PACIENTE,dos);
					
					// String
				
						writeString(this.CODIGO,dos);
					
					// String
				
						writeString(this.CONCEPTO_GLOSA,dos);
					
					// String
				
						writeString(this.DESCRIPCION_GLOSA,dos);
					
					// String
				
						writeString(this.RESPUESTA,dos);
					
					// String
				
						writeString(this.REVISION_RESPUESTA,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VALOR_GLOSADO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VALOR_ACEPTADO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VALOR_SOPORTADO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VALOR_RATIFICADO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VNETO);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.FACTURA_ID);
					
					// String
				
						writeString(this.NUMERO_FACTURA,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// String
				
						writeString(this.PACIENTE,dos);
					
					// String
				
						writeString(this.CODIGO,dos);
					
					// String
				
						writeString(this.CONCEPTO_GLOSA,dos);
					
					// String
				
						writeString(this.DESCRIPCION_GLOSA,dos);
					
					// String
				
						writeString(this.RESPUESTA,dos);
					
					// String
				
						writeString(this.REVISION_RESPUESTA,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VALOR_GLOSADO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VALOR_ACEPTADO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VALOR_SOPORTADO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VALOR_RATIFICADO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VNETO);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("FACTURA_ID="+String.valueOf(FACTURA_ID));
		sb.append(",NUMERO_FACTURA="+NUMERO_FACTURA);
		sb.append(",DOCUMENTO="+DOCUMENTO);
		sb.append(",PACIENTE="+PACIENTE);
		sb.append(",CODIGO="+CODIGO);
		sb.append(",CONCEPTO_GLOSA="+CONCEPTO_GLOSA);
		sb.append(",DESCRIPCION_GLOSA="+DESCRIPCION_GLOSA);
		sb.append(",RESPUESTA="+RESPUESTA);
		sb.append(",REVISION_RESPUESTA="+REVISION_RESPUESTA);
		sb.append(",VALOR_GLOSADO="+String.valueOf(VALOR_GLOSADO));
		sb.append(",VALOR_ACEPTADO="+String.valueOf(VALOR_ACEPTADO));
		sb.append(",VALOR_SOPORTADO="+String.valueOf(VALOR_SOPORTADO));
		sb.append(",VALOR_RATIFICADO="+String.valueOf(VALOR_RATIFICADO));
		sb.append(",VNETO="+String.valueOf(VNETO));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row13Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_4Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_4_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row8Struct row8 = new row8Struct();

		row13Struct row13 = new row13Struct();

			row9Struct row9 = new row9Struct();
row11Struct row11 = new row11Struct();
out3Struct out3 = new out3Struct();






	
	/**
	 * [tFileOutputExcel_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputExcel_3", false);
		start_Hash.put("tFileOutputExcel_3", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputExcel_3";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"out3");
					}
				
		int tos_count_tFileOutputExcel_3 = 0;
		


		
		int columnIndex_tFileOutputExcel_3 = 0;
		boolean headerIsInserted_tFileOutputExcel_3 = false;
		
		
		String fileName_tFileOutputExcel_3=context.fileSystem_URL;
		int nb_line_tFileOutputExcel_3 = 0;
		org.talend.ExcelTool xlsxTool_tFileOutputExcel_3 = new org.talend.ExcelTool();
		xlsxTool_tFileOutputExcel_3.setUseSharedStringTable(false);
		
    xlsxTool_tFileOutputExcel_3.setTruncateExceedingCharacters(false);
		xlsxTool_tFileOutputExcel_3.setSheet("main");
		xlsxTool_tFileOutputExcel_3.setAppend(true,true, false);
		xlsxTool_tFileOutputExcel_3.setRecalculateFormula(false);
		xlsxTool_tFileOutputExcel_3.setXY(false,0,0,false);
		
		java.util.concurrent.ConcurrentHashMap<java.lang.Object, java.lang.Object> chm_tFileOutputExcel_3 = (java.util.concurrent.ConcurrentHashMap<java.lang.Object, java.lang.Object>) globalMap.get("concurrentHashMap");
		java.lang.Object lockObj_tFileOutputExcel_3 = chm_tFileOutputExcel_3.computeIfAbsent("EXCEL_OUTPUT_LOCK_OBJ_tFileOutputExcel_3", k -> new Object());
		synchronized (lockObj_tFileOutputExcel_3) {
			
				xlsxTool_tFileOutputExcel_3.prepareXlsxFile(fileName_tFileOutputExcel_3);
			
		}
		
		xlsxTool_tFileOutputExcel_3.setFont("ARIAL");
		

 



/**
 * [tFileOutputExcel_3 begin ] stop
 */



	
	/**
	 * [tMap_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_3", false);
		start_Hash.put("tMap_3", System.currentTimeMillis());
		
	
	currentComponent="tMap_3";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row11");
					}
				
		int tos_count_tMap_3 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_3__Struct  {
}
Var__tMap_3__Struct Var__tMap_3 = new Var__tMap_3__Struct();
// ###############################

// ###############################
// # Outputs initialization
out3Struct out3_tmp = new out3Struct();
// ###############################

        
        



        









 



/**
 * [tMap_3 begin ] stop
 */



	
	/**
	 * [tJavaRow_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaRow_3", false);
		start_Hash.put("tJavaRow_3", System.currentTimeMillis());
		
	
	currentComponent="tJavaRow_3";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row9");
					}
				
		int tos_count_tJavaRow_3 = 0;
		

int nb_line_tJavaRow_3 = 0;

 



/**
 * [tJavaRow_3 begin ] stop
 */



	
	/**
	 * [tUnite_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tUnite_1", false);
		start_Hash.put("tUnite_1", System.currentTimeMillis());
		
	
	currentComponent="tUnite_1";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row8","row13");
					}
				
		int tos_count_tUnite_1 = 0;
		

int nb_line_tUnite_1 = 0;

 



/**
 * [tUnite_1 begin ] stop
 */
	
	/**
	 * [tOracleInput_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_4", false);
		start_Hash.put("tOracleInput_4", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_4";
	
	
		int tos_count_tOracleInput_4 = 0;
		
	


	
		    int nb_line_tOracleInput_4 = 0;
		    java.sql.Connection conn_tOracleInput_4 = null;
				conn_tOracleInput_4 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");
				
                boolean isTimeZoneNull_tOracleInput_4 = false;
				boolean isConnectionWrapped_tOracleInput_4 = !(conn_tOracleInput_4 instanceof oracle.jdbc.OracleConnection) && conn_tOracleInput_4.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tOracleInput_4 = null;
                if (isConnectionWrapped_tOracleInput_4) {
					unwrappedOraConn_tOracleInput_4 = conn_tOracleInput_4.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tOracleInput_4 != null) {
                        isTimeZoneNull_tOracleInput_4 = (unwrappedOraConn_tOracleInput_4.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tOracleInput_4 = (((oracle.jdbc.OracleConnection)conn_tOracleInput_4).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tOracleInput_4) {
					java.sql.Statement stmtGetTZ_tOracleInput_4 = conn_tOracleInput_4.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_4 = stmtGetTZ_tOracleInput_4.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_4 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tOracleInput_4.next()) {
						sessionTimezone_tOracleInput_4 = rsGetTZ_tOracleInput_4.getString(1);
					}
					if (isConnectionWrapped_tOracleInput_4 && unwrappedOraConn_tOracleInput_4 != null) {
                        unwrappedOraConn_tOracleInput_4.setSessionTimeZone(sessionTimezone_tOracleInput_4);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_4).setSessionTimeZone(sessionTimezone_tOracleInput_4);
                    }
				}
			
		    
			java.sql.Statement stmt_tOracleInput_4 = conn_tOracleInput_4.createStatement();

		    String dbquery_tOracleInput_4 = "\nSELECT  \n		AF.ID AS FACTURA_ID,\n        NVL(AF.PREFIJO,' ') || AF.NUMERO AS NUMERO_FACTURA,\n        GT.SIGLA || ' "
+"' || DS.DOCUMENTO AS DOCUMENTO,\n        TRIM(GP.PRIMER_NOMBRE)||COALESCE(TRIM(GP.SEGUNDO_NOMBRE),' ')||TRIM(GP.PRIMER_A"
+"PELLIDO)||TRIM(GP.SEGUNDO_APELLIDO) AS PACIENTE,\n        ACG.CODIGO || ACE.CODIGO AS CODIGO,\n        ACE.NOMBRE AS CON"
+"CEPTO_GLOSA,\n        AG.OBSERVACION AS DESCRIPCION_GLOSA,\n        NVL(HN.OBSERVACIONES, 'No registra') AS RESPUESTA, "
+"\n        NVL(HG.OBSERVACIONES, 'No registra') AS REVISION_RESPUESTA,\n        HG.VGLOSADO AS VALOR_GLOSADO,\n        HG."
+"VACEPTADO AS VALOR_ACEPTADO,\n        HG.VSOPORTADO AS VALOR_SOPORTADO,\n        HG.VRATIFICADO AS VALOR_RATIFICADO,\n  "
+"      HG.VSOPORTADO  AS VNETO     \n    FROM\n        ACM_DFACTURASERVICIO DS\n        INNER JOIN ACM_FACTURA    	  AF  "
+" ON  AF.ID = DS.FACTURA_ID \n        INNER JOIN GEN_PERSONAS       GP   ON  GP.DOCUMENTO = DS.DOCUMENTO AND GP.TDOCUMENT"
+"OS_ID = DS.TDOCUMENTOS_ID\n        INNER JOIN GEN_TDOCUMENTOS    GT   ON  GT.ID = DS.TDOCUMENTOS_ID\n        INNER JOIN "
+"ACM_GLOSASCAUSADAS AG   ON  AG.RECEPCION_ID = DS.RECEPCION_ID AND AG.DFACTURASERVICIO_ID = DS.ID\n        INNER JOIN ACM"
+"_CAUSALGLOSAS   AC   ON  AC.ID =  AG.CAUSALGLOSAS_ID\n        INNER JOIN ACM_CONCEPTOS      ACG  ON  ACG.ID = AC.CONCEPT"
+"OGENERAL_ID     AND  ACG.TCONCEPTO = 'GENERAL'    AND  ACG.ESTADO = 'Activo'\n        INNER JOIN ACM_CONCEPTOS      ACE "
+" ON  ACE.ID = AC.CONCEPTOESPECIFICO_ID  AND  ACE.TCONCEPTO = 'ESPECIFICO' AND  ACE.ESTADO = 'Activo'     \n        INNER"
+" JOIN ACM_HGLOSASCAUSADAS HG  ON  HG.GLOSASCAUSADAS_ID = AG.ID   \n        INNER JOIN ACM_HAUDITORIAS     HA  ON  HA.ID "
+"= HG.HAUDITORIAS_ID              \n        INNER JOIN ACM_ETAPASNORMATIVIDAD  EN   ON  EN.ID = HG.ETAPASNORMATIVIDAD_ID "
+"  AND EN.ESTREGISTRO_ID = 1 \n        INNER JOIN  \n        (\n            SELECT HGL.OBSERVACIONES, AGS.DFACTURASERVICI"
+"O_ID, ETP.CODIGO, AGS.ID\n            FROM ACM_GLOSASCAUSADAS AGS\n            INNER JOIN ACM_HGLOSASCAUSADAS    HGL ON "
+"HGL.GLOSASCAUSADAS_ID = AGS.ID\n            INNER JOIN ACM_ETAPASNORMATIVIDAD ETP ON ETP.ID = HGL.ETAPASNORMATIVIDAD_ID "
+"\n            WHERE AGS.RECEPCION_ID =  '" + context.RECEPCION_ID + "' \n            AND AGS.ESTREGISTRO_ID = 1\n            AND HGL.ESTREGISTRO_ID = 1\n            AND HGL.ESTADO = 'Revis"
+"ada'\n        )  HN ON  HN.ID = AG.ID AND HN.DFACTURASERVICIO_ID = DS.ID  AND HN.CODIGO = (EN.CODIGO - 1)\n    WHERE  DS"
+".RECEPCION_ID =  '" + context.RECEPCION_ID + "' \n    AND  HG.HAUDITORIAS_ID =  '" + context.HAUDITORIA_ID + "'\n    AND  HG.ESTADO = 'Revisada'\n    AND  HG.ESTREGISTRO_ID = 1\n    AND AF.ESTREGISTRO_ID = 1\n	ORDER BY NUMERO_FAC"
+"TURA, DOCUMENTO ";
		    

		    globalMap.put("tOracleInput_4_QUERY",dbquery_tOracleInput_4);

		    java.sql.ResultSet rs_tOracleInput_4 = null;

		    try {
		    	rs_tOracleInput_4 = stmt_tOracleInput_4.executeQuery(dbquery_tOracleInput_4);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_4 = rs_tOracleInput_4.getMetaData();
		    	int colQtyInRs_tOracleInput_4 = rsmd_tOracleInput_4.getColumnCount();

		    String tmpContent_tOracleInput_4 = null;
		    
		    
		    while (rs_tOracleInput_4.next()) {
		        nb_line_tOracleInput_4++;
		        
							if(colQtyInRs_tOracleInput_4 < 1) {
								row8.FACTURA_ID = null;
							} else {
		                          
					if(rs_tOracleInput_4.getObject(1) != null) {
						row8.FACTURA_ID = rs_tOracleInput_4.getBigDecimal(1);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_4 < 2) {
								row8.NUMERO_FACTURA = null;
							} else {
	                         		
        	row8.NUMERO_FACTURA = routines.system.JDBCUtil.getString(rs_tOracleInput_4, 2, false);
		                    }
							if(colQtyInRs_tOracleInput_4 < 3) {
								row8.DOCUMENTO = null;
							} else {
	                         		
        	row8.DOCUMENTO = routines.system.JDBCUtil.getString(rs_tOracleInput_4, 3, false);
		                    }
							if(colQtyInRs_tOracleInput_4 < 4) {
								row8.PACIENTE = null;
							} else {
	                         		
        	row8.PACIENTE = routines.system.JDBCUtil.getString(rs_tOracleInput_4, 4, false);
		                    }
							if(colQtyInRs_tOracleInput_4 < 5) {
								row8.CODIGO = null;
							} else {
	                         		
        	row8.CODIGO = routines.system.JDBCUtil.getString(rs_tOracleInput_4, 5, false);
		                    }
							if(colQtyInRs_tOracleInput_4 < 6) {
								row8.CONCEPTO_GLOSA = null;
							} else {
	                         		
        	row8.CONCEPTO_GLOSA = routines.system.JDBCUtil.getString(rs_tOracleInput_4, 6, false);
		                    }
							if(colQtyInRs_tOracleInput_4 < 7) {
								row8.DESCRIPCION_GLOSA = null;
							} else {
	                         		
        	row8.DESCRIPCION_GLOSA = routines.system.JDBCUtil.getString(rs_tOracleInput_4, 7, false);
		                    }
							if(colQtyInRs_tOracleInput_4 < 8) {
								row8.RESPUESTA = null;
							} else {
	                         		
        	row8.RESPUESTA = routines.system.JDBCUtil.getString(rs_tOracleInput_4, 8, false);
		                    }
							if(colQtyInRs_tOracleInput_4 < 9) {
								row8.REVISION_RESPUESTA = null;
							} else {
	                         		
        	row8.REVISION_RESPUESTA = routines.system.JDBCUtil.getString(rs_tOracleInput_4, 9, false);
		                    }
							if(colQtyInRs_tOracleInput_4 < 10) {
								row8.VALOR_GLOSADO = null;
							} else {
		                          
					if(rs_tOracleInput_4.getObject(10) != null) {
						row8.VALOR_GLOSADO = rs_tOracleInput_4.getBigDecimal(10);
					} else {
				
						row8.VALOR_GLOSADO = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_4 < 11) {
								row8.VALOR_ACEPTADO = null;
							} else {
		                          
					if(rs_tOracleInput_4.getObject(11) != null) {
						row8.VALOR_ACEPTADO = rs_tOracleInput_4.getBigDecimal(11);
					} else {
				
						row8.VALOR_ACEPTADO = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_4 < 12) {
								row8.VALOR_SOPORTADO = null;
							} else {
		                          
					if(rs_tOracleInput_4.getObject(12) != null) {
						row8.VALOR_SOPORTADO = rs_tOracleInput_4.getBigDecimal(12);
					} else {
				
						row8.VALOR_SOPORTADO = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_4 < 13) {
								row8.VALOR_RATIFICADO = null;
							} else {
		                          
					if(rs_tOracleInput_4.getObject(13) != null) {
						row8.VALOR_RATIFICADO = rs_tOracleInput_4.getBigDecimal(13);
					} else {
				
						row8.VALOR_RATIFICADO = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_4 < 14) {
								row8.VNETO = null;
							} else {
		                          
					if(rs_tOracleInput_4.getObject(14) != null) {
						row8.VNETO = rs_tOracleInput_4.getBigDecimal(14);
					} else {
				
						row8.VNETO = null;
					}
		                    }
					




 



/**
 * [tOracleInput_4 begin ] stop
 */
	
	/**
	 * [tOracleInput_4 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_4";
	
	

 


	tos_count_tOracleInput_4++;

/**
 * [tOracleInput_4 main ] stop
 */
	
	/**
	 * [tOracleInput_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_4";
	
	

 



/**
 * [tOracleInput_4 process_data_begin ] stop
 */

	
	/**
	 * [tUnite_1 main ] start
	 */

	

	
	
	currentComponent="tUnite_1";
	
	
						if(execStat){
							runStat.updateStatOnConnection(iterateId,1,1
								
									,"row8"
									
							);
						}
						
//////////
 

// for output
			row9 = new row9Struct();
								
			row9.FACTURA_ID = row8.FACTURA_ID;								
			row9.NUMERO_FACTURA = row8.NUMERO_FACTURA;								
			row9.DOCUMENTO = row8.DOCUMENTO;								
			row9.PACIENTE = row8.PACIENTE;								
			row9.CODIGO = row8.CODIGO;								
			row9.CONCEPTO_GLOSA = row8.CONCEPTO_GLOSA;								
			row9.DESCRIPCION_GLOSA = row8.DESCRIPCION_GLOSA;								
			row9.RESPUESTA = row8.RESPUESTA;								
			row9.REVISION_RESPUESTA = row8.REVISION_RESPUESTA;								
			row9.VALOR_GLOSADO = row8.VALOR_GLOSADO;								
			row9.VALOR_ACEPTADO = row8.VALOR_ACEPTADO;								
			row9.VALOR_SOPORTADO = row8.VALOR_SOPORTADO;								
			row9.VALOR_RATIFICADO = row8.VALOR_RATIFICADO;								
			row9.VNETO = row8.VNETO;			

			nb_line_tUnite_1++;

//////////
 


	tos_count_tUnite_1++;

/**
 * [tUnite_1 main ] stop
 */
	
	/**
	 * [tUnite_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tUnite_1";
	
	

 



/**
 * [tUnite_1 process_data_begin ] stop
 */

	
	/**
	 * [tJavaRow_3 main ] start
	 */

	

	
	
	currentComponent="tJavaRow_3";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row9"
						
						);
					}
					

    //Code generate according to input schema and output schema
row11.NUMERO_FACTURA = row9.NUMERO_FACTURA;
row11.DOCUMENTO = row9.DOCUMENTO;
row11.PACIENTE = row9.PACIENTE;
row11.CODIGO = row9.CODIGO;
row11.CONCEPTO_GLOSA = row9.CONCEPTO_GLOSA;
row11.DESCRIPCION_GLOSA = row9.DESCRIPCION_GLOSA;
row11.RESPUESTA = row9.RESPUESTA;
row11.REVISION_RESPUESTA = row9.REVISION_RESPUESTA;
row11.VALOR_GLOSADO = row9.VALOR_GLOSADO;
row11.VALOR_ACEPTADO = row9.VALOR_ACEPTADO;
row11.VALOR_SOPORTADO = row9.VALOR_SOPORTADO;
row11.VALOR_RATIFICADO = row9.VALOR_RATIFICADO;
row11.VNETO = row9.VNETO;

// SE OBTIENE LOS TOTALES
context.VGLOSADO   = context.VGLOSADO.add(row11.VALOR_GLOSADO);
context.VACEPTADO  = context.VACEPTADO.add(row11.VALOR_ACEPTADO);
context.VSOPORTADO = context.VSOPORTADO.add(row11.VALOR_SOPORTADO);
context.VRATIFICADA = context.VRATIFICADA.add(row11.VALOR_RATIFICADO);
context.VNETO = context.VNETO.add(row11.VNETO);

    nb_line_tJavaRow_3++;   

 


	tos_count_tJavaRow_3++;

/**
 * [tJavaRow_3 main ] stop
 */
	
	/**
	 * [tJavaRow_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJavaRow_3";
	
	

 



/**
 * [tJavaRow_3 process_data_begin ] stop
 */

	
	/**
	 * [tMap_3 main ] start
	 */

	

	
	
	currentComponent="tMap_3";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row11"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_3 = false;
		
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_3 = false;
		boolean mainRowRejected_tMap_3 = false;
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_3__Struct Var = Var__tMap_3;// ###############################
        // ###############################
        // # Output tables

out3 = null;


// # Output table : 'out3'
out3_tmp.NUMERO_FACTURA = row11.NUMERO_FACTURA ;
out3_tmp.DOCUMENTO = row11.DOCUMENTO ;
out3_tmp.PACIENTE = row11.PACIENTE ;
out3_tmp.CODIGO = row11.CODIGO ;
out3_tmp.CONCEPTO_GLOSA = row11.CONCEPTO_GLOSA ;
out3_tmp.DESCRIPCION_GLOSA = row11.DESCRIPCION_GLOSA ;
out3_tmp.RESPUESTA = row11.RESPUESTA ;
out3_tmp.REVISION_RESPUESTA = row11.REVISION_RESPUESTA ;
out3_tmp.VALOR_GLOSADO = NumberFormat.getCurrencyInstance(Locale.US).format(row11.VALOR_GLOSADO ) ;
out3_tmp.VALOR_ACEPTADO = NumberFormat.getCurrencyInstance(Locale.US).format(row11.VALOR_ACEPTADO ) ;
out3_tmp.VALOR_SOPORTADO = NumberFormat.getCurrencyInstance(Locale.US).format(row11.VALOR_SOPORTADO ) ;
out3_tmp.VALOR_RATIFICADO = NumberFormat.getCurrencyInstance(Locale.US).format(row11.VALOR_RATIFICADO ) ;
out3_tmp.VNETO = NumberFormat.getCurrencyInstance(Locale.US).format(row11.VNETO) ;
out3 = out3_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_3 = false;










 


	tos_count_tMap_3++;

/**
 * [tMap_3 main ] stop
 */
	
	/**
	 * [tMap_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_3";
	
	

 



/**
 * [tMap_3 process_data_begin ] stop
 */
// Start of branch "out3"
if(out3 != null) { 



	
	/**
	 * [tFileOutputExcel_3 main ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_3";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"out3"
						
						);
					}
					

				xlsxTool_tFileOutputExcel_3.addRow();
									   				
	    				if(out3.NUMERO_FACTURA != null) {
    				
							xlsxTool_tFileOutputExcel_3.addCellValue(String.valueOf(out3.NUMERO_FACTURA));
	    				} else {
	    					xlsxTool_tFileOutputExcel_3.addCellNullValue();
	    				}
					
									   				
	    				if(out3.DOCUMENTO != null) {
    				
							xlsxTool_tFileOutputExcel_3.addCellValue(String.valueOf(out3.DOCUMENTO));
	    				} else {
	    					xlsxTool_tFileOutputExcel_3.addCellNullValue();
	    				}
					
									   				
	    				if(out3.PACIENTE != null) {
    				
							xlsxTool_tFileOutputExcel_3.addCellValue(String.valueOf(out3.PACIENTE));
	    				} else {
	    					xlsxTool_tFileOutputExcel_3.addCellNullValue();
	    				}
					
									   				
	    				if(out3.CODIGO != null) {
    				
							xlsxTool_tFileOutputExcel_3.addCellValue(String.valueOf(out3.CODIGO));
	    				} else {
	    					xlsxTool_tFileOutputExcel_3.addCellNullValue();
	    				}
					
									   				
	    				if(out3.CONCEPTO_GLOSA != null) {
    				
							xlsxTool_tFileOutputExcel_3.addCellValue(String.valueOf(out3.CONCEPTO_GLOSA));
	    				} else {
	    					xlsxTool_tFileOutputExcel_3.addCellNullValue();
	    				}
					
									   				
	    				if(out3.DESCRIPCION_GLOSA != null) {
    				
							xlsxTool_tFileOutputExcel_3.addCellValue(String.valueOf(out3.DESCRIPCION_GLOSA));
	    				} else {
	    					xlsxTool_tFileOutputExcel_3.addCellNullValue();
	    				}
					
									   				
	    				if(out3.RESPUESTA != null) {
    				
							xlsxTool_tFileOutputExcel_3.addCellValue(String.valueOf(out3.RESPUESTA));
	    				} else {
	    					xlsxTool_tFileOutputExcel_3.addCellNullValue();
	    				}
					
									   				
	    				if(out3.REVISION_RESPUESTA != null) {
    				
							xlsxTool_tFileOutputExcel_3.addCellValue(String.valueOf(out3.REVISION_RESPUESTA));
	    				} else {
	    					xlsxTool_tFileOutputExcel_3.addCellNullValue();
	    				}
					
									   				
	    				if(out3.VALOR_GLOSADO != null) {
    				
							xlsxTool_tFileOutputExcel_3.addCellValue(String.valueOf(out3.VALOR_GLOSADO));
	    				} else {
	    					xlsxTool_tFileOutputExcel_3.addCellNullValue();
	    				}
					
									   				
	    				if(out3.VALOR_ACEPTADO != null) {
    				
							xlsxTool_tFileOutputExcel_3.addCellValue(String.valueOf(out3.VALOR_ACEPTADO));
	    				} else {
	    					xlsxTool_tFileOutputExcel_3.addCellNullValue();
	    				}
					
									   				
	    				if(out3.VALOR_SOPORTADO != null) {
    				
							xlsxTool_tFileOutputExcel_3.addCellValue(String.valueOf(out3.VALOR_SOPORTADO));
	    				} else {
	    					xlsxTool_tFileOutputExcel_3.addCellNullValue();
	    				}
					
									   				
	    				if(out3.VALOR_RATIFICADO != null) {
    				
							xlsxTool_tFileOutputExcel_3.addCellValue(String.valueOf(out3.VALOR_RATIFICADO));
	    				} else {
	    					xlsxTool_tFileOutputExcel_3.addCellNullValue();
	    				}
					
									   				
	    				if(out3.VNETO != null) {
    				
							xlsxTool_tFileOutputExcel_3.addCellValue(String.valueOf(out3.VNETO));
	    				} else {
	    					xlsxTool_tFileOutputExcel_3.addCellNullValue();
	    				}
					
    			nb_line_tFileOutputExcel_3++;
				
 


	tos_count_tFileOutputExcel_3++;

/**
 * [tFileOutputExcel_3 main ] stop
 */
	
	/**
	 * [tFileOutputExcel_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_3";
	
	

 



/**
 * [tFileOutputExcel_3 process_data_begin ] stop
 */
	
	/**
	 * [tFileOutputExcel_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_3";
	
	

 



/**
 * [tFileOutputExcel_3 process_data_end ] stop
 */

} // End of branch "out3"




	
	/**
	 * [tMap_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_3";
	
	

 



/**
 * [tMap_3 process_data_end ] stop
 */



	
	/**
	 * [tJavaRow_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tJavaRow_3";
	
	

 



/**
 * [tJavaRow_3 process_data_end ] stop
 */



	
	/**
	 * [tUnite_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tUnite_1";
	
	

 



/**
 * [tUnite_1 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_4";
	
	

 



/**
 * [tOracleInput_4 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_4 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_4";
	
	

}
}finally{
	if (rs_tOracleInput_4 != null) {
		rs_tOracleInput_4.close();
	}
	if (stmt_tOracleInput_4 != null) {
		stmt_tOracleInput_4.close();
	}
}

globalMap.put("tOracleInput_4_NB_LINE",nb_line_tOracleInput_4);
 

ok_Hash.put("tOracleInput_4", true);
end_Hash.put("tOracleInput_4", System.currentTimeMillis());




/**
 * [tOracleInput_4 end ] stop
 */
	
	/**
	 * [tOracleInput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_2", false);
		start_Hash.put("tOracleInput_2", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_2";
	
	
		int tos_count_tOracleInput_2 = 0;
		
	


	
		    int nb_line_tOracleInput_2 = 0;
		    java.sql.Connection conn_tOracleInput_2 = null;
				conn_tOracleInput_2 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");
				
                boolean isTimeZoneNull_tOracleInput_2 = false;
				boolean isConnectionWrapped_tOracleInput_2 = !(conn_tOracleInput_2 instanceof oracle.jdbc.OracleConnection) && conn_tOracleInput_2.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tOracleInput_2 = null;
                if (isConnectionWrapped_tOracleInput_2) {
					unwrappedOraConn_tOracleInput_2 = conn_tOracleInput_2.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tOracleInput_2 != null) {
                        isTimeZoneNull_tOracleInput_2 = (unwrappedOraConn_tOracleInput_2.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tOracleInput_2 = (((oracle.jdbc.OracleConnection)conn_tOracleInput_2).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tOracleInput_2) {
					java.sql.Statement stmtGetTZ_tOracleInput_2 = conn_tOracleInput_2.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_2 = stmtGetTZ_tOracleInput_2.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_2 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tOracleInput_2.next()) {
						sessionTimezone_tOracleInput_2 = rsGetTZ_tOracleInput_2.getString(1);
					}
					if (isConnectionWrapped_tOracleInput_2 && unwrappedOraConn_tOracleInput_2 != null) {
                        unwrappedOraConn_tOracleInput_2.setSessionTimeZone(sessionTimezone_tOracleInput_2);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_2).setSessionTimeZone(sessionTimezone_tOracleInput_2);
                    }
				}
			
		    
			java.sql.Statement stmt_tOracleInput_2 = conn_tOracleInput_2.createStatement();

		    String dbquery_tOracleInput_2 = "SELECT  \n		AF.ID AS FACTURA_ID,\n	 	NVL(AF.PREFIJO,' ') || AF.NUMERO AS NUMERO_FACTURA,  \n        GT.SIGLA || ' ' || "
+"DS.DOCUMENTO AS DOCUMENTO,\n        TRIM(GP.PRIMER_NOMBRE)||COALESCE(TRIM(GP.SEGUNDO_NOMBRE),' ')||TRIM(GP.PRIMER_APELLI"
+"DO)||TRIM(GP.SEGUNDO_APELLIDO) AS PACIENTE,\n        ACG.CODIGO || ACE.CODIGO AS CODIGO,\n        ACE.NOMBRE AS CONCEPTO"
+"_GLOSA,\n        AG.OBSERVACION AS DESCRIPCION_GLOSA,\n        NVL(HN.OBSERVACIONES, 'No registra') AS RESPUESTA, \n    "
+"    NVL(HG.OBSERVACIONES, 'No registra') AS REVISION_RESPUESTA,\n        HG.VGLOSADO AS VALOR_GLOSADO,\n        HG.VACEP"
+"TADO AS VALOR_ACEPTADO,\n        HG.VSOPORTADO AS VALOR_SOPORTADO,\n        HG.VRATIFICADO AS VALOR_RATIFICADO,\n       "
+" HG.VSOPORTADO  AS VNETO     \n    FROM\n        ACM_DFACTURAFORMULACION DS\n        INNER JOIN ACM_FACTURA    	  AF   O"
+"N  AF.ID = DS.FACTURA_ID \n        INNER JOIN GEN_PERSONAS       GP   ON  GP.DOCUMENTO = DS.DOCUMENTO AND GP.TDOCUMENTOS"
+"_ID = DS.TDOCUMENTOS_ID\n        INNER JOIN GEN_TDOCUMENTOS    GT   ON  GT.ID = DS.TDOCUMENTOS_ID\n        INNER JOIN AC"
+"M_GLOSASCAUSADAS AG   ON  AG.RECEPCION_ID = DS.RECEPCION_ID AND AG.DFACTURAFORMULACION_ID = DS.ID\n        INNER JOIN AC"
+"M_CAUSALGLOSAS   AC   ON  AC.ID =  AG.CAUSALGLOSAS_ID\n        INNER JOIN ACM_CONCEPTOS      ACG  ON  ACG.ID = AC.CONCEP"
+"TOGENERAL_ID     AND  ACG.TCONCEPTO = 'GENERAL'    AND  ACG.ESTADO = 'Activo'\n        INNER JOIN ACM_CONCEPTOS      ACE"
+"  ON  ACE.ID = AC.CONCEPTOESPECIFICO_ID  AND  ACE.TCONCEPTO = 'ESPECIFICO' AND  ACE.ESTADO = 'Activo'     \n        INNE"
+"R JOIN ACM_HGLOSASCAUSADAS HG  ON  HG.GLOSASCAUSADAS_ID = AG.ID   \n        INNER JOIN ACM_HAUDITORIAS     HA  ON  HA.ID"
+" = HG.HAUDITORIAS_ID              \n        INNER JOIN ACM_ETAPASNORMATIVIDAD  EN   ON  EN.ID = HG.ETAPASNORMATIVIDAD_ID"
+"   AND EN.ESTREGISTRO_ID = 1 \n        INNER JOIN  \n        (\n            SELECT HGL.OBSERVACIONES, AGS.DFACTURAFORMUL"
+"ACION_ID, ETP.CODIGO,  AGS.ID\n            FROM ACM_GLOSASCAUSADAS AGS\n            INNER JOIN ACM_HGLOSASCAUSADAS    HG"
+"L ON HGL.GLOSASCAUSADAS_ID = AGS.ID\n            INNER JOIN ACM_ETAPASNORMATIVIDAD ETP ON ETP.ID = HGL.ETAPASNORMATIVIDA"
+"D_ID \n            WHERE AGS.RECEPCION_ID = '" + context.RECEPCION_ID + "' \n            AND AGS.ESTREGISTRO_ID = 1\n            AND HGL.ESTREGISTRO_ID = 1\n            AND HGL.ESTADO = 'Revis"
+"ada'          \n\n        )  HN ON HN.ID = AG.ID AND HN.DFACTURAFORMULACION_ID = DS.ID  AND HN.CODIGO = (EN.CODIGO - 1)"
+"\n    WHERE  DS.RECEPCION_ID =  '" + context.RECEPCION_ID + "' \n    AND  HG.HAUDITORIAS_ID =  '" + context.HAUDITORIA_ID + "'\n    AND  HG.ESTADO = 'Revisada'\n    AND  HG.ESTREGISTRO_ID = 1\n    AND AF.ESTREGISTRO_ID = 1\n	ORDER BY NUMERO_FAC"
+"TURA, DOCUMENTO ";
		    

		    globalMap.put("tOracleInput_2_QUERY",dbquery_tOracleInput_2);

		    java.sql.ResultSet rs_tOracleInput_2 = null;

		    try {
		    	rs_tOracleInput_2 = stmt_tOracleInput_2.executeQuery(dbquery_tOracleInput_2);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_2 = rs_tOracleInput_2.getMetaData();
		    	int colQtyInRs_tOracleInput_2 = rsmd_tOracleInput_2.getColumnCount();

		    String tmpContent_tOracleInput_2 = null;
		    
		    
		    while (rs_tOracleInput_2.next()) {
		        nb_line_tOracleInput_2++;
		        
							if(colQtyInRs_tOracleInput_2 < 1) {
								row13.FACTURA_ID = null;
							} else {
		                          
					if(rs_tOracleInput_2.getObject(1) != null) {
						row13.FACTURA_ID = rs_tOracleInput_2.getBigDecimal(1);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_2 < 2) {
								row13.NUMERO_FACTURA = null;
							} else {
	                         		
        	row13.NUMERO_FACTURA = routines.system.JDBCUtil.getString(rs_tOracleInput_2, 2, false);
		                    }
							if(colQtyInRs_tOracleInput_2 < 3) {
								row13.DOCUMENTO = null;
							} else {
	                         		
        	row13.DOCUMENTO = routines.system.JDBCUtil.getString(rs_tOracleInput_2, 3, false);
		                    }
							if(colQtyInRs_tOracleInput_2 < 4) {
								row13.PACIENTE = null;
							} else {
	                         		
        	row13.PACIENTE = routines.system.JDBCUtil.getString(rs_tOracleInput_2, 4, false);
		                    }
							if(colQtyInRs_tOracleInput_2 < 5) {
								row13.CODIGO = null;
							} else {
	                         		
        	row13.CODIGO = routines.system.JDBCUtil.getString(rs_tOracleInput_2, 5, false);
		                    }
							if(colQtyInRs_tOracleInput_2 < 6) {
								row13.CONCEPTO_GLOSA = null;
							} else {
	                         		
        	row13.CONCEPTO_GLOSA = routines.system.JDBCUtil.getString(rs_tOracleInput_2, 6, false);
		                    }
							if(colQtyInRs_tOracleInput_2 < 7) {
								row13.DESCRIPCION_GLOSA = null;
							} else {
	                         		
        	row13.DESCRIPCION_GLOSA = routines.system.JDBCUtil.getString(rs_tOracleInput_2, 7, false);
		                    }
							if(colQtyInRs_tOracleInput_2 < 8) {
								row13.RESPUESTA = null;
							} else {
	                         		
        	row13.RESPUESTA = routines.system.JDBCUtil.getString(rs_tOracleInput_2, 8, false);
		                    }
							if(colQtyInRs_tOracleInput_2 < 9) {
								row13.REVISION_RESPUESTA = null;
							} else {
	                         		
        	row13.REVISION_RESPUESTA = routines.system.JDBCUtil.getString(rs_tOracleInput_2, 9, false);
		                    }
							if(colQtyInRs_tOracleInput_2 < 10) {
								row13.VALOR_GLOSADO = null;
							} else {
		                          
					if(rs_tOracleInput_2.getObject(10) != null) {
						row13.VALOR_GLOSADO = rs_tOracleInput_2.getBigDecimal(10);
					} else {
				
						row13.VALOR_GLOSADO = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_2 < 11) {
								row13.VALOR_ACEPTADO = null;
							} else {
		                          
					if(rs_tOracleInput_2.getObject(11) != null) {
						row13.VALOR_ACEPTADO = rs_tOracleInput_2.getBigDecimal(11);
					} else {
				
						row13.VALOR_ACEPTADO = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_2 < 12) {
								row13.VALOR_SOPORTADO = null;
							} else {
		                          
					if(rs_tOracleInput_2.getObject(12) != null) {
						row13.VALOR_SOPORTADO = rs_tOracleInput_2.getBigDecimal(12);
					} else {
				
						row13.VALOR_SOPORTADO = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_2 < 13) {
								row13.VALOR_RATIFICADO = null;
							} else {
		                          
					if(rs_tOracleInput_2.getObject(13) != null) {
						row13.VALOR_RATIFICADO = rs_tOracleInput_2.getBigDecimal(13);
					} else {
				
						row13.VALOR_RATIFICADO = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_2 < 14) {
								row13.VNETO = null;
							} else {
		                          
					if(rs_tOracleInput_2.getObject(14) != null) {
						row13.VNETO = rs_tOracleInput_2.getBigDecimal(14);
					} else {
				
						row13.VNETO = null;
					}
		                    }
					




 



/**
 * [tOracleInput_2 begin ] stop
 */
	
	/**
	 * [tOracleInput_2 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_2";
	
	

 


	tos_count_tOracleInput_2++;

/**
 * [tOracleInput_2 main ] stop
 */
	
	/**
	 * [tOracleInput_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_2";
	
	

 



/**
 * [tOracleInput_2 process_data_begin ] stop
 */

	
	/**
	 * [tUnite_1 main ] start
	 */

	

	
	
	currentComponent="tUnite_1";
	
	
						if(execStat){
							runStat.updateStatOnConnection(iterateId,1,1
								
									,"row13"
									
							);
						}
						
//////////
 

// for output
			row9 = new row9Struct();
								
			row9.FACTURA_ID = row13.FACTURA_ID;								
			row9.NUMERO_FACTURA = row13.NUMERO_FACTURA;								
			row9.DOCUMENTO = row13.DOCUMENTO;								
			row9.PACIENTE = row13.PACIENTE;								
			row9.CODIGO = row13.CODIGO;								
			row9.CONCEPTO_GLOSA = row13.CONCEPTO_GLOSA;								
			row9.DESCRIPCION_GLOSA = row13.DESCRIPCION_GLOSA;								
			row9.RESPUESTA = row13.RESPUESTA;								
			row9.REVISION_RESPUESTA = row13.REVISION_RESPUESTA;								
			row9.VALOR_GLOSADO = row13.VALOR_GLOSADO;								
			row9.VALOR_ACEPTADO = row13.VALOR_ACEPTADO;								
			row9.VALOR_SOPORTADO = row13.VALOR_SOPORTADO;								
			row9.VALOR_RATIFICADO = row13.VALOR_RATIFICADO;								
			row9.VNETO = row13.VNETO;			

			nb_line_tUnite_1++;

//////////
 


	tos_count_tUnite_1++;

/**
 * [tUnite_1 main ] stop
 */
	
	/**
	 * [tUnite_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tUnite_1";
	
	

 



/**
 * [tUnite_1 process_data_begin ] stop
 */

	
	/**
	 * [tJavaRow_3 main ] start
	 */

	

	
	
	currentComponent="tJavaRow_3";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row9"
						
						);
					}
					

    //Code generate according to input schema and output schema
row11.NUMERO_FACTURA = row9.NUMERO_FACTURA;
row11.DOCUMENTO = row9.DOCUMENTO;
row11.PACIENTE = row9.PACIENTE;
row11.CODIGO = row9.CODIGO;
row11.CONCEPTO_GLOSA = row9.CONCEPTO_GLOSA;
row11.DESCRIPCION_GLOSA = row9.DESCRIPCION_GLOSA;
row11.RESPUESTA = row9.RESPUESTA;
row11.REVISION_RESPUESTA = row9.REVISION_RESPUESTA;
row11.VALOR_GLOSADO = row9.VALOR_GLOSADO;
row11.VALOR_ACEPTADO = row9.VALOR_ACEPTADO;
row11.VALOR_SOPORTADO = row9.VALOR_SOPORTADO;
row11.VALOR_RATIFICADO = row9.VALOR_RATIFICADO;
row11.VNETO = row9.VNETO;

// SE OBTIENE LOS TOTALES
context.VGLOSADO   = context.VGLOSADO.add(row11.VALOR_GLOSADO);
context.VACEPTADO  = context.VACEPTADO.add(row11.VALOR_ACEPTADO);
context.VSOPORTADO = context.VSOPORTADO.add(row11.VALOR_SOPORTADO);
context.VRATIFICADA = context.VRATIFICADA.add(row11.VALOR_RATIFICADO);
context.VNETO = context.VNETO.add(row11.VNETO);

    nb_line_tJavaRow_3++;   

 


	tos_count_tJavaRow_3++;

/**
 * [tJavaRow_3 main ] stop
 */
	
	/**
	 * [tJavaRow_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJavaRow_3";
	
	

 



/**
 * [tJavaRow_3 process_data_begin ] stop
 */

	
	/**
	 * [tMap_3 main ] start
	 */

	

	
	
	currentComponent="tMap_3";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row11"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_3 = false;
		
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_3 = false;
		boolean mainRowRejected_tMap_3 = false;
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_3__Struct Var = Var__tMap_3;// ###############################
        // ###############################
        // # Output tables

out3 = null;


// # Output table : 'out3'
out3_tmp.NUMERO_FACTURA = row11.NUMERO_FACTURA ;
out3_tmp.DOCUMENTO = row11.DOCUMENTO ;
out3_tmp.PACIENTE = row11.PACIENTE ;
out3_tmp.CODIGO = row11.CODIGO ;
out3_tmp.CONCEPTO_GLOSA = row11.CONCEPTO_GLOSA ;
out3_tmp.DESCRIPCION_GLOSA = row11.DESCRIPCION_GLOSA ;
out3_tmp.RESPUESTA = row11.RESPUESTA ;
out3_tmp.REVISION_RESPUESTA = row11.REVISION_RESPUESTA ;
out3_tmp.VALOR_GLOSADO = NumberFormat.getCurrencyInstance(Locale.US).format(row11.VALOR_GLOSADO ) ;
out3_tmp.VALOR_ACEPTADO = NumberFormat.getCurrencyInstance(Locale.US).format(row11.VALOR_ACEPTADO ) ;
out3_tmp.VALOR_SOPORTADO = NumberFormat.getCurrencyInstance(Locale.US).format(row11.VALOR_SOPORTADO ) ;
out3_tmp.VALOR_RATIFICADO = NumberFormat.getCurrencyInstance(Locale.US).format(row11.VALOR_RATIFICADO ) ;
out3_tmp.VNETO = NumberFormat.getCurrencyInstance(Locale.US).format(row11.VNETO) ;
out3 = out3_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_3 = false;










 


	tos_count_tMap_3++;

/**
 * [tMap_3 main ] stop
 */
	
	/**
	 * [tMap_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_3";
	
	

 



/**
 * [tMap_3 process_data_begin ] stop
 */
// Start of branch "out3"
if(out3 != null) { 



	
	/**
	 * [tFileOutputExcel_3 main ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_3";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"out3"
						
						);
					}
					

				xlsxTool_tFileOutputExcel_3.addRow();
									   				
	    				if(out3.NUMERO_FACTURA != null) {
    				
							xlsxTool_tFileOutputExcel_3.addCellValue(String.valueOf(out3.NUMERO_FACTURA));
	    				} else {
	    					xlsxTool_tFileOutputExcel_3.addCellNullValue();
	    				}
					
									   				
	    				if(out3.DOCUMENTO != null) {
    				
							xlsxTool_tFileOutputExcel_3.addCellValue(String.valueOf(out3.DOCUMENTO));
	    				} else {
	    					xlsxTool_tFileOutputExcel_3.addCellNullValue();
	    				}
					
									   				
	    				if(out3.PACIENTE != null) {
    				
							xlsxTool_tFileOutputExcel_3.addCellValue(String.valueOf(out3.PACIENTE));
	    				} else {
	    					xlsxTool_tFileOutputExcel_3.addCellNullValue();
	    				}
					
									   				
	    				if(out3.CODIGO != null) {
    				
							xlsxTool_tFileOutputExcel_3.addCellValue(String.valueOf(out3.CODIGO));
	    				} else {
	    					xlsxTool_tFileOutputExcel_3.addCellNullValue();
	    				}
					
									   				
	    				if(out3.CONCEPTO_GLOSA != null) {
    				
							xlsxTool_tFileOutputExcel_3.addCellValue(String.valueOf(out3.CONCEPTO_GLOSA));
	    				} else {
	    					xlsxTool_tFileOutputExcel_3.addCellNullValue();
	    				}
					
									   				
	    				if(out3.DESCRIPCION_GLOSA != null) {
    				
							xlsxTool_tFileOutputExcel_3.addCellValue(String.valueOf(out3.DESCRIPCION_GLOSA));
	    				} else {
	    					xlsxTool_tFileOutputExcel_3.addCellNullValue();
	    				}
					
									   				
	    				if(out3.RESPUESTA != null) {
    				
							xlsxTool_tFileOutputExcel_3.addCellValue(String.valueOf(out3.RESPUESTA));
	    				} else {
	    					xlsxTool_tFileOutputExcel_3.addCellNullValue();
	    				}
					
									   				
	    				if(out3.REVISION_RESPUESTA != null) {
    				
							xlsxTool_tFileOutputExcel_3.addCellValue(String.valueOf(out3.REVISION_RESPUESTA));
	    				} else {
	    					xlsxTool_tFileOutputExcel_3.addCellNullValue();
	    				}
					
									   				
	    				if(out3.VALOR_GLOSADO != null) {
    				
							xlsxTool_tFileOutputExcel_3.addCellValue(String.valueOf(out3.VALOR_GLOSADO));
	    				} else {
	    					xlsxTool_tFileOutputExcel_3.addCellNullValue();
	    				}
					
									   				
	    				if(out3.VALOR_ACEPTADO != null) {
    				
							xlsxTool_tFileOutputExcel_3.addCellValue(String.valueOf(out3.VALOR_ACEPTADO));
	    				} else {
	    					xlsxTool_tFileOutputExcel_3.addCellNullValue();
	    				}
					
									   				
	    				if(out3.VALOR_SOPORTADO != null) {
    				
							xlsxTool_tFileOutputExcel_3.addCellValue(String.valueOf(out3.VALOR_SOPORTADO));
	    				} else {
	    					xlsxTool_tFileOutputExcel_3.addCellNullValue();
	    				}
					
									   				
	    				if(out3.VALOR_RATIFICADO != null) {
    				
							xlsxTool_tFileOutputExcel_3.addCellValue(String.valueOf(out3.VALOR_RATIFICADO));
	    				} else {
	    					xlsxTool_tFileOutputExcel_3.addCellNullValue();
	    				}
					
									   				
	    				if(out3.VNETO != null) {
    				
							xlsxTool_tFileOutputExcel_3.addCellValue(String.valueOf(out3.VNETO));
	    				} else {
	    					xlsxTool_tFileOutputExcel_3.addCellNullValue();
	    				}
					
    			nb_line_tFileOutputExcel_3++;
				
 


	tos_count_tFileOutputExcel_3++;

/**
 * [tFileOutputExcel_3 main ] stop
 */
	
	/**
	 * [tFileOutputExcel_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_3";
	
	

 



/**
 * [tFileOutputExcel_3 process_data_begin ] stop
 */
	
	/**
	 * [tFileOutputExcel_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_3";
	
	

 



/**
 * [tFileOutputExcel_3 process_data_end ] stop
 */

} // End of branch "out3"




	
	/**
	 * [tMap_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_3";
	
	

 



/**
 * [tMap_3 process_data_end ] stop
 */



	
	/**
	 * [tJavaRow_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tJavaRow_3";
	
	

 



/**
 * [tJavaRow_3 process_data_end ] stop
 */



	
	/**
	 * [tUnite_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tUnite_1";
	
	

 



/**
 * [tUnite_1 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_2";
	
	

 



/**
 * [tOracleInput_2 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_2 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_2";
	
	

}
}finally{
	if (rs_tOracleInput_2 != null) {
		rs_tOracleInput_2.close();
	}
	if (stmt_tOracleInput_2 != null) {
		stmt_tOracleInput_2.close();
	}
}

globalMap.put("tOracleInput_2_NB_LINE",nb_line_tOracleInput_2);
 

ok_Hash.put("tOracleInput_2", true);
end_Hash.put("tOracleInput_2", System.currentTimeMillis());




/**
 * [tOracleInput_2 end ] stop
 */
	
	/**
	 * [tUnite_1 end ] start
	 */

	

	
	
	currentComponent="tUnite_1";
	
	

globalMap.put("tUnite_1_NB_LINE", nb_line_tUnite_1);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row8","row13");
			  	}
			  	
 

ok_Hash.put("tUnite_1", true);
end_Hash.put("tUnite_1", System.currentTimeMillis());




/**
 * [tUnite_1 end ] stop
 */

	
	/**
	 * [tJavaRow_3 end ] start
	 */

	

	
	
	currentComponent="tJavaRow_3";
	
	

globalMap.put("tJavaRow_3_NB_LINE",nb_line_tJavaRow_3);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row9");
			  	}
			  	
 

ok_Hash.put("tJavaRow_3", true);
end_Hash.put("tJavaRow_3", System.currentTimeMillis());




/**
 * [tJavaRow_3 end ] stop
 */

	
	/**
	 * [tMap_3 end ] start
	 */

	

	
	
	currentComponent="tMap_3";
	
	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row11");
			  	}
			  	
 

ok_Hash.put("tMap_3", true);
end_Hash.put("tMap_3", System.currentTimeMillis());




/**
 * [tMap_3 end ] stop
 */

	
	/**
	 * [tFileOutputExcel_3 end ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_3";
	
	

	
	
	
			xlsxTool_tFileOutputExcel_3.writeExcel(fileName_tFileOutputExcel_3,true);
	
		if(headerIsInserted_tFileOutputExcel_3 && nb_line_tFileOutputExcel_3 > 0){
			nb_line_tFileOutputExcel_3 = nb_line_tFileOutputExcel_3 -1;
		}
		globalMap.put("tFileOutputExcel_3_NB_LINE",nb_line_tFileOutputExcel_3);
		
		

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"out3");
			  	}
			  	
 

ok_Hash.put("tFileOutputExcel_3", true);
end_Hash.put("tFileOutputExcel_3", System.currentTimeMillis());




/**
 * [tFileOutputExcel_3 end ] stop
 */









				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tOracleInput_4:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk3", 0, "ok");
								} 
							
							tFixedFlowInput_3Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleInput_4 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_4";
	
	

 



/**
 * [tOracleInput_4 finally ] stop
 */
	
	/**
	 * [tOracleInput_2 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_2";
	
	

 



/**
 * [tOracleInput_2 finally ] stop
 */
	
	/**
	 * [tUnite_1 finally ] start
	 */

	

	
	
	currentComponent="tUnite_1";
	
	

 



/**
 * [tUnite_1 finally ] stop
 */

	
	/**
	 * [tJavaRow_3 finally ] start
	 */

	

	
	
	currentComponent="tJavaRow_3";
	
	

 



/**
 * [tJavaRow_3 finally ] stop
 */

	
	/**
	 * [tMap_3 finally ] start
	 */

	

	
	
	currentComponent="tMap_3";
	
	

 



/**
 * [tMap_3 finally ] stop
 */

	
	/**
	 * [tFileOutputExcel_3 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_3";
	
	

 



/**
 * [tFileOutputExcel_3 finally ] stop
 */









				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_4_SUBPROCESS_STATE", 1);
	}
	


public static class row12Struct implements routines.system.IPersistableRow<row12Struct> {
    final static byte[] commonByteArrayLock_ACM_ACTAS_Actas = new byte[0];
    static byte[] commonByteArray_ACM_ACTAS_Actas = new byte[0];

	
			    public String Column_A;

				public String getColumn_A () {
					return this.Column_A;
				}

				public Boolean Column_AIsNullable(){
				    return true;
				}
				public Boolean Column_AIsKey(){
				    return false;
				}
				public Integer Column_ALength(){
				    return null;
				}
				public Integer Column_APrecision(){
				    return null;
				}
				public String Column_ADefault(){
				
					return null;
				
				}
				public String Column_AComment(){
				
				    return "";
				
				}
				public String Column_APattern(){
				
					return "";
				
				}
				public String Column_AOriginalDbColumnName(){
				
					return "Column_A";
				
				}

				
			    public String Column_B;

				public String getColumn_B () {
					return this.Column_B;
				}

				public Boolean Column_BIsNullable(){
				    return true;
				}
				public Boolean Column_BIsKey(){
				    return false;
				}
				public Integer Column_BLength(){
				    return null;
				}
				public Integer Column_BPrecision(){
				    return null;
				}
				public String Column_BDefault(){
				
					return null;
				
				}
				public String Column_BComment(){
				
				    return "";
				
				}
				public String Column_BPattern(){
				
					return "";
				
				}
				public String Column_BOriginalDbColumnName(){
				
					return "Column_B";
				
				}

				
			    public String Column_C;

				public String getColumn_C () {
					return this.Column_C;
				}

				public Boolean Column_CIsNullable(){
				    return true;
				}
				public Boolean Column_CIsKey(){
				    return false;
				}
				public Integer Column_CLength(){
				    return null;
				}
				public Integer Column_CPrecision(){
				    return null;
				}
				public String Column_CDefault(){
				
					return null;
				
				}
				public String Column_CComment(){
				
				    return "";
				
				}
				public String Column_CPattern(){
				
					return "";
				
				}
				public String Column_COriginalDbColumnName(){
				
					return "Column_C";
				
				}

				
			    public String Column_D;

				public String getColumn_D () {
					return this.Column_D;
				}

				public Boolean Column_DIsNullable(){
				    return true;
				}
				public Boolean Column_DIsKey(){
				    return false;
				}
				public Integer Column_DLength(){
				    return null;
				}
				public Integer Column_DPrecision(){
				    return null;
				}
				public String Column_DDefault(){
				
					return null;
				
				}
				public String Column_DComment(){
				
				    return "";
				
				}
				public String Column_DPattern(){
				
					return "";
				
				}
				public String Column_DOriginalDbColumnName(){
				
					return "Column_D";
				
				}

				
			    public String Column_E;

				public String getColumn_E () {
					return this.Column_E;
				}

				public Boolean Column_EIsNullable(){
				    return true;
				}
				public Boolean Column_EIsKey(){
				    return false;
				}
				public Integer Column_ELength(){
				    return null;
				}
				public Integer Column_EPrecision(){
				    return null;
				}
				public String Column_EDefault(){
				
					return null;
				
				}
				public String Column_EComment(){
				
				    return "";
				
				}
				public String Column_EPattern(){
				
					return "";
				
				}
				public String Column_EOriginalDbColumnName(){
				
					return "Column_E";
				
				}

				
			    public String Column_F;

				public String getColumn_F () {
					return this.Column_F;
				}

				public Boolean Column_FIsNullable(){
				    return true;
				}
				public Boolean Column_FIsKey(){
				    return false;
				}
				public Integer Column_FLength(){
				    return null;
				}
				public Integer Column_FPrecision(){
				    return null;
				}
				public String Column_FDefault(){
				
					return null;
				
				}
				public String Column_FComment(){
				
				    return "";
				
				}
				public String Column_FPattern(){
				
					return "";
				
				}
				public String Column_FOriginalDbColumnName(){
				
					return "Column_F";
				
				}

				
			    public String RESPUESTA;

				public String getRESPUESTA () {
					return this.RESPUESTA;
				}

				public Boolean RESPUESTAIsNullable(){
				    return true;
				}
				public Boolean RESPUESTAIsKey(){
				    return false;
				}
				public Integer RESPUESTALength(){
				    return null;
				}
				public Integer RESPUESTAPrecision(){
				    return null;
				}
				public String RESPUESTADefault(){
				
					return null;
				
				}
				public String RESPUESTAComment(){
				
				    return "";
				
				}
				public String RESPUESTAPattern(){
				
					return "";
				
				}
				public String RESPUESTAOriginalDbColumnName(){
				
					return "RESPUESTA";
				
				}

				
			    public String REVISION;

				public String getREVISION () {
					return this.REVISION;
				}

				public Boolean REVISIONIsNullable(){
				    return true;
				}
				public Boolean REVISIONIsKey(){
				    return false;
				}
				public Integer REVISIONLength(){
				    return null;
				}
				public Integer REVISIONPrecision(){
				    return null;
				}
				public String REVISIONDefault(){
				
					return null;
				
				}
				public String REVISIONComment(){
				
				    return "";
				
				}
				public String REVISIONPattern(){
				
					return "";
				
				}
				public String REVISIONOriginalDbColumnName(){
				
					return "REVISION";
				
				}

				
			    public String VALOR_GLOSA;

				public String getVALOR_GLOSA () {
					return this.VALOR_GLOSA;
				}

				public Boolean VALOR_GLOSAIsNullable(){
				    return true;
				}
				public Boolean VALOR_GLOSAIsKey(){
				    return false;
				}
				public Integer VALOR_GLOSALength(){
				    return null;
				}
				public Integer VALOR_GLOSAPrecision(){
				    return null;
				}
				public String VALOR_GLOSADefault(){
				
					return null;
				
				}
				public String VALOR_GLOSAComment(){
				
				    return "";
				
				}
				public String VALOR_GLOSAPattern(){
				
					return "";
				
				}
				public String VALOR_GLOSAOriginalDbColumnName(){
				
					return "VALOR_GLOSA";
				
				}

				
			    public String VALOR_ACEPTADO;

				public String getVALOR_ACEPTADO () {
					return this.VALOR_ACEPTADO;
				}

				public Boolean VALOR_ACEPTADOIsNullable(){
				    return true;
				}
				public Boolean VALOR_ACEPTADOIsKey(){
				    return false;
				}
				public Integer VALOR_ACEPTADOLength(){
				    return null;
				}
				public Integer VALOR_ACEPTADOPrecision(){
				    return null;
				}
				public String VALOR_ACEPTADODefault(){
				
					return null;
				
				}
				public String VALOR_ACEPTADOComment(){
				
				    return "";
				
				}
				public String VALOR_ACEPTADOPattern(){
				
					return "";
				
				}
				public String VALOR_ACEPTADOOriginalDbColumnName(){
				
					return "VALOR_ACEPTADO";
				
				}

				
			    public String VALOR_SOPORTADO;

				public String getVALOR_SOPORTADO () {
					return this.VALOR_SOPORTADO;
				}

				public Boolean VALOR_SOPORTADOIsNullable(){
				    return true;
				}
				public Boolean VALOR_SOPORTADOIsKey(){
				    return false;
				}
				public Integer VALOR_SOPORTADOLength(){
				    return null;
				}
				public Integer VALOR_SOPORTADOPrecision(){
				    return null;
				}
				public String VALOR_SOPORTADODefault(){
				
					return null;
				
				}
				public String VALOR_SOPORTADOComment(){
				
				    return "";
				
				}
				public String VALOR_SOPORTADOPattern(){
				
					return "";
				
				}
				public String VALOR_SOPORTADOOriginalDbColumnName(){
				
					return "VALOR_SOPORTADO";
				
				}

				
			    public String VALOR_RATIFICADA;

				public String getVALOR_RATIFICADA () {
					return this.VALOR_RATIFICADA;
				}

				public Boolean VALOR_RATIFICADAIsNullable(){
				    return true;
				}
				public Boolean VALOR_RATIFICADAIsKey(){
				    return false;
				}
				public Integer VALOR_RATIFICADALength(){
				    return null;
				}
				public Integer VALOR_RATIFICADAPrecision(){
				    return null;
				}
				public String VALOR_RATIFICADADefault(){
				
					return null;
				
				}
				public String VALOR_RATIFICADAComment(){
				
				    return "";
				
				}
				public String VALOR_RATIFICADAPattern(){
				
					return "";
				
				}
				public String VALOR_RATIFICADAOriginalDbColumnName(){
				
					return "VALOR_RATIFICADA";
				
				}

				
			    public String VALOR_NETO;

				public String getVALOR_NETO () {
					return this.VALOR_NETO;
				}

				public Boolean VALOR_NETOIsNullable(){
				    return true;
				}
				public Boolean VALOR_NETOIsKey(){
				    return false;
				}
				public Integer VALOR_NETOLength(){
				    return null;
				}
				public Integer VALOR_NETOPrecision(){
				    return null;
				}
				public String VALOR_NETODefault(){
				
					return null;
				
				}
				public String VALOR_NETOComment(){
				
				    return "";
				
				}
				public String VALOR_NETOPattern(){
				
					return "";
				
				}
				public String VALOR_NETOOriginalDbColumnName(){
				
					return "VALOR_NETO";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_ACTAS_Actas.length) {
				if(length < 1024 && commonByteArray_ACM_ACTAS_Actas.length == 0) {
   					commonByteArray_ACM_ACTAS_Actas = new byte[1024];
				} else {
   					commonByteArray_ACM_ACTAS_Actas = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ACM_ACTAS_Actas, 0, length);
			strReturn = new String(commonByteArray_ACM_ACTAS_Actas, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_ACTAS_Actas.length) {
				if(length < 1024 && commonByteArray_ACM_ACTAS_Actas.length == 0) {
   					commonByteArray_ACM_ACTAS_Actas = new byte[1024];
				} else {
   					commonByteArray_ACM_ACTAS_Actas = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_ACM_ACTAS_Actas, 0, length);
			strReturn = new String(commonByteArray_ACM_ACTAS_Actas, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ACM_ACTAS_Actas) {

        	try {

        		int length = 0;
		
					this.Column_A = readString(dis);
					
					this.Column_B = readString(dis);
					
					this.Column_C = readString(dis);
					
					this.Column_D = readString(dis);
					
					this.Column_E = readString(dis);
					
					this.Column_F = readString(dis);
					
					this.RESPUESTA = readString(dis);
					
					this.REVISION = readString(dis);
					
					this.VALOR_GLOSA = readString(dis);
					
					this.VALOR_ACEPTADO = readString(dis);
					
					this.VALOR_SOPORTADO = readString(dis);
					
					this.VALOR_RATIFICADA = readString(dis);
					
					this.VALOR_NETO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ACM_ACTAS_Actas) {

        	try {

        		int length = 0;
		
					this.Column_A = readString(dis);
					
					this.Column_B = readString(dis);
					
					this.Column_C = readString(dis);
					
					this.Column_D = readString(dis);
					
					this.Column_E = readString(dis);
					
					this.Column_F = readString(dis);
					
					this.RESPUESTA = readString(dis);
					
					this.REVISION = readString(dis);
					
					this.VALOR_GLOSA = readString(dis);
					
					this.VALOR_ACEPTADO = readString(dis);
					
					this.VALOR_SOPORTADO = readString(dis);
					
					this.VALOR_RATIFICADA = readString(dis);
					
					this.VALOR_NETO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.Column_A,dos);
					
					// String
				
						writeString(this.Column_B,dos);
					
					// String
				
						writeString(this.Column_C,dos);
					
					// String
				
						writeString(this.Column_D,dos);
					
					// String
				
						writeString(this.Column_E,dos);
					
					// String
				
						writeString(this.Column_F,dos);
					
					// String
				
						writeString(this.RESPUESTA,dos);
					
					// String
				
						writeString(this.REVISION,dos);
					
					// String
				
						writeString(this.VALOR_GLOSA,dos);
					
					// String
				
						writeString(this.VALOR_ACEPTADO,dos);
					
					// String
				
						writeString(this.VALOR_SOPORTADO,dos);
					
					// String
				
						writeString(this.VALOR_RATIFICADA,dos);
					
					// String
				
						writeString(this.VALOR_NETO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.Column_A,dos);
					
					// String
				
						writeString(this.Column_B,dos);
					
					// String
				
						writeString(this.Column_C,dos);
					
					// String
				
						writeString(this.Column_D,dos);
					
					// String
				
						writeString(this.Column_E,dos);
					
					// String
				
						writeString(this.Column_F,dos);
					
					// String
				
						writeString(this.RESPUESTA,dos);
					
					// String
				
						writeString(this.REVISION,dos);
					
					// String
				
						writeString(this.VALOR_GLOSA,dos);
					
					// String
				
						writeString(this.VALOR_ACEPTADO,dos);
					
					// String
				
						writeString(this.VALOR_SOPORTADO,dos);
					
					// String
				
						writeString(this.VALOR_RATIFICADA,dos);
					
					// String
				
						writeString(this.VALOR_NETO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Column_A="+Column_A);
		sb.append(",Column_B="+Column_B);
		sb.append(",Column_C="+Column_C);
		sb.append(",Column_D="+Column_D);
		sb.append(",Column_E="+Column_E);
		sb.append(",Column_F="+Column_F);
		sb.append(",RESPUESTA="+RESPUESTA);
		sb.append(",REVISION="+REVISION);
		sb.append(",VALOR_GLOSA="+VALOR_GLOSA);
		sb.append(",VALOR_ACEPTADO="+VALOR_ACEPTADO);
		sb.append(",VALOR_SOPORTADO="+VALOR_SOPORTADO);
		sb.append(",VALOR_RATIFICADA="+VALOR_RATIFICADA);
		sb.append(",VALOR_NETO="+VALOR_NETO);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row12Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tFixedFlowInput_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFixedFlowInput_3_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row12Struct row12 = new row12Struct();




	
	/**
	 * [tFileOutputExcel_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputExcel_4", false);
		start_Hash.put("tFileOutputExcel_4", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputExcel_4";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row12");
					}
				
		int tos_count_tFileOutputExcel_4 = 0;
		


		
		int columnIndex_tFileOutputExcel_4 = 0;
		boolean headerIsInserted_tFileOutputExcel_4 = false;
		
		
		String fileName_tFileOutputExcel_4=context.fileSystem_URL;
		int nb_line_tFileOutputExcel_4 = 0;
		org.talend.ExcelTool xlsxTool_tFileOutputExcel_4 = new org.talend.ExcelTool();
		xlsxTool_tFileOutputExcel_4.setUseSharedStringTable(false);
		
    xlsxTool_tFileOutputExcel_4.setTruncateExceedingCharacters(false);
		xlsxTool_tFileOutputExcel_4.setSheet("main");
		xlsxTool_tFileOutputExcel_4.setAppend(true,true, false);
		xlsxTool_tFileOutputExcel_4.setRecalculateFormula(false);
		xlsxTool_tFileOutputExcel_4.setXY(false,0,0,false);
		
		java.util.concurrent.ConcurrentHashMap<java.lang.Object, java.lang.Object> chm_tFileOutputExcel_4 = (java.util.concurrent.ConcurrentHashMap<java.lang.Object, java.lang.Object>) globalMap.get("concurrentHashMap");
		java.lang.Object lockObj_tFileOutputExcel_4 = chm_tFileOutputExcel_4.computeIfAbsent("EXCEL_OUTPUT_LOCK_OBJ_tFileOutputExcel_4", k -> new Object());
		synchronized (lockObj_tFileOutputExcel_4) {
			
				xlsxTool_tFileOutputExcel_4.prepareXlsxFile(fileName_tFileOutputExcel_4);
			
		}
		
		xlsxTool_tFileOutputExcel_4.setFont("ARIAL");
		

 



/**
 * [tFileOutputExcel_4 begin ] stop
 */



	
	/**
	 * [tFixedFlowInput_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tFixedFlowInput_3", false);
		start_Hash.put("tFixedFlowInput_3", System.currentTimeMillis());
		
	
	currentComponent="tFixedFlowInput_3";
	
	
		int tos_count_tFixedFlowInput_3 = 0;
		

	int nb_line_tFixedFlowInput_3 = 0;
	List<row12Struct> cacheList_tFixedFlowInput_3 = new java.util.ArrayList<row12Struct>();
	row12 = new row12Struct();        	            	
    row12.Column_A = null;        	            	        	            	
    row12.Column_B = null;        	            	        	            	
    row12.Column_C = null;        	            	        	            	
    row12.Column_D = null;        	            	        	            	
    row12.Column_E = null;        	            	        	            	
    row12.Column_F = null;        	            	        	            	
    row12.RESPUESTA = null;        	            	        	            	
	row12.REVISION = "TOTALES";        	            	
	row12.VALOR_GLOSA = NumberFormat.getCurrencyInstance(Locale.US).format(context.VGLOSADO);        	            	
	row12.VALOR_ACEPTADO = NumberFormat.getCurrencyInstance(Locale.US).format(context.VACEPTADO);        	            	
	row12.VALOR_SOPORTADO = NumberFormat.getCurrencyInstance(Locale.US).format(context.VSOPORTADO);        	            	
	row12.VALOR_RATIFICADA = NumberFormat.getCurrencyInstance(Locale.US).format(context.VRATIFICADA);        	            	
	row12.VALOR_NETO = NumberFormat.getCurrencyInstance(Locale.US).format(context.VNETO);
	cacheList_tFixedFlowInput_3.add(row12);
	row12 = new row12Struct();        	            	
	row12.Column_A = "VALOR TOTAL DE LA GLOSA EN LA ETAPA ACTUAL";        	            	
	row12.Column_B = NumberFormat.getCurrencyInstance(Locale.US).format(context.VGLOSADO);        	            	
    row12.Column_C = null;        	            	        	            	
    row12.Column_D = null;        	            	        	            	
    row12.Column_E = null;        	            	        	            	
    row12.Column_F = null;        	            	        	            	
    row12.RESPUESTA = null;        	            	        	            	
    row12.REVISION = null;        	            	        	            	
    row12.VALOR_GLOSA = null;        	            	        	            	
    row12.VALOR_ACEPTADO = null;        	            	        	            	
    row12.VALOR_SOPORTADO = null;        	            	        	            	
    row12.VALOR_RATIFICADA = null;        	            	        	            	
    row12.VALOR_NETO = null;        	            	
	cacheList_tFixedFlowInput_3.add(row12);
	row12 = new row12Struct();        	            	
	row12.Column_A = "VALOR TOTAL ACPETADO POR LA IPS";        	            	
	row12.Column_B = NumberFormat.getCurrencyInstance(Locale.US).format(context.VACEPTADO);        	            	
    row12.Column_C = null;        	            	        	            	
    row12.Column_D = null;        	            	        	            	
    row12.Column_E = null;        	            	        	            	
    row12.Column_F = null;        	            	        	            	
    row12.RESPUESTA = null;        	            	        	            	
    row12.REVISION = null;        	            	        	            	
    row12.VALOR_GLOSA = null;        	            	        	            	
    row12.VALOR_ACEPTADO = null;        	            	        	            	
    row12.VALOR_SOPORTADO = null;        	            	        	            	
    row12.VALOR_RATIFICADA = null;        	            	        	            	
    row12.VALOR_NETO = null;        	            	
	cacheList_tFixedFlowInput_3.add(row12);
	row12 = new row12Struct();        	            	
	row12.Column_A = "VALOR TOTAL SOPORTADO POR LA IPS";        	            	
	row12.Column_B = NumberFormat.getCurrencyInstance(Locale.US).format(context.VSOPORTADO);        	            	
    row12.Column_C = null;        	            	        	            	
    row12.Column_D = null;        	            	        	            	
    row12.Column_E = null;        	            	        	            	
    row12.Column_F = null;        	            	        	            	
    row12.RESPUESTA = null;        	            	        	            	
    row12.REVISION = null;        	            	        	            	
    row12.VALOR_GLOSA = null;        	            	        	            	
    row12.VALOR_ACEPTADO = null;        	            	        	            	
    row12.VALOR_SOPORTADO = null;        	            	        	            	
    row12.VALOR_RATIFICADA = null;        	            	        	            	
    row12.VALOR_NETO = null;        	            	
	cacheList_tFixedFlowInput_3.add(row12);
	row12 = new row12Struct();        	            	
	row12.Column_A = "VALOR TOTAL DE GLOSA RATIFICADA";        	            	
	row12.Column_B = NumberFormat.getCurrencyInstance(Locale.US).format(context.VRATIFICADA);        	            	
    row12.Column_C = null;        	            	        	            	
    row12.Column_D = null;        	            	        	            	
    row12.Column_E = null;        	            	        	            	
    row12.Column_F = null;        	            	        	            	
    row12.RESPUESTA = null;        	            	        	            	
    row12.REVISION = null;        	            	        	            	
    row12.VALOR_GLOSA = null;        	            	        	            	
    row12.VALOR_ACEPTADO = null;        	            	        	            	
    row12.VALOR_SOPORTADO = null;        	            	        	            	
    row12.VALOR_RATIFICADA = null;        	            	        	            	
    row12.VALOR_NETO = null;        	            	
	cacheList_tFixedFlowInput_3.add(row12);
	row12 = new row12Struct();        	            	
	row12.Column_A = "TOTAL NETO A PAGAR";        	            	
	row12.Column_B = NumberFormat.getCurrencyInstance(Locale.US).format(context.VNETO);        	            	
    row12.Column_C = null;        	            	        	            	
    row12.Column_D = null;        	            	        	            	
    row12.Column_E = null;        	            	        	            	
    row12.Column_F = null;        	            	        	            	
    row12.RESPUESTA = null;        	            	        	            	
    row12.REVISION = null;        	            	        	            	
    row12.VALOR_GLOSA = null;        	            	        	            	
    row12.VALOR_ACEPTADO = null;        	            	        	            	
    row12.VALOR_SOPORTADO = null;        	            	        	            	
    row12.VALOR_RATIFICADA = null;        	            	        	            	
    row12.VALOR_NETO = null;        	            	
	cacheList_tFixedFlowInput_3.add(row12);
	row12 = new row12Struct();        	            	
    row12.Column_A = null;        	            	        	            	
    row12.Column_B = null;        	            	        	            	
    row12.Column_C = null;        	            	        	            	
    row12.Column_D = null;        	            	        	            	
    row12.Column_E = null;        	            	        	            	
    row12.Column_F = null;        	            	        	            	
    row12.RESPUESTA = null;        	            	        	            	
    row12.REVISION = null;        	            	        	            	
    row12.VALOR_GLOSA = null;        	            	        	            	
    row12.VALOR_ACEPTADO = null;        	            	        	            	
    row12.VALOR_SOPORTADO = null;        	            	        	            	
    row12.VALOR_RATIFICADA = null;        	            	        	            	
    row12.VALOR_NETO = null;        	            	
	cacheList_tFixedFlowInput_3.add(row12);
	row12 = new row12Struct();        	            	
	row12.Column_A = "Firma: ______________________________";        	            	
    row12.Column_B = null;        	            	        	            	
    row12.Column_C = null;        	            	        	            	
    row12.Column_D = null;        	            	        	            	
    row12.Column_E = null;        	            	        	            	
    row12.Column_F = null;        	            	        	            	
    row12.RESPUESTA = null;        	            	        	            	
    row12.REVISION = null;        	            	        	            	
    row12.VALOR_GLOSA = null;        	            	        	            	
    row12.VALOR_ACEPTADO = null;        	            	        	            	
    row12.VALOR_SOPORTADO = null;        	            	        	            	
    row12.VALOR_RATIFICADA = null;        	            	        	            	
    row12.VALOR_NETO = null;        	            	
	cacheList_tFixedFlowInput_3.add(row12);
	row12 = new row12Struct();        	            	
	row12.Column_A = context.USUARIO;        	            	
    row12.Column_B = null;        	            	        	            	
    row12.Column_C = null;        	            	        	            	
    row12.Column_D = null;        	            	        	            	
    row12.Column_E = null;        	            	        	            	
    row12.Column_F = null;        	            	        	            	
    row12.RESPUESTA = null;        	            	        	            	
    row12.REVISION = null;        	            	        	            	
    row12.VALOR_GLOSA = null;        	            	        	            	
    row12.VALOR_ACEPTADO = null;        	            	        	            	
    row12.VALOR_SOPORTADO = null;        	            	        	            	
    row12.VALOR_RATIFICADA = null;        	            	        	            	
    row12.VALOR_NETO = null;        	            	
	cacheList_tFixedFlowInput_3.add(row12);
	row12 = new row12Struct();        	            	
	row12.Column_A = "Auditor de la entidad responsable de pago";        	            	
    row12.Column_B = null;        	            	        	            	
    row12.Column_C = null;        	            	        	            	
    row12.Column_D = null;        	            	        	            	
    row12.Column_E = null;        	            	        	            	
    row12.Column_F = null;        	            	        	            	
    row12.RESPUESTA = null;        	            	        	            	
    row12.REVISION = null;        	            	        	            	
    row12.VALOR_GLOSA = null;        	            	        	            	
    row12.VALOR_ACEPTADO = null;        	            	        	            	
    row12.VALOR_SOPORTADO = null;        	            	        	            	
    row12.VALOR_RATIFICADA = null;        	            	        	            	
    row12.VALOR_NETO = null;        	            	
	cacheList_tFixedFlowInput_3.add(row12);
	row12 = new row12Struct();        	            	
    row12.Column_A = null;        	            	        	            	
    row12.Column_B = null;        	            	        	            	
	row12.Column_C = "Dada en la ciudad de " + context.CIUDAD  + context.FECHA_EJECUCION;        	            	
    row12.Column_D = null;        	            	        	            	
    row12.Column_E = null;        	            	        	            	
    row12.Column_F = null;        	            	        	            	
    row12.RESPUESTA = null;        	            	        	            	
    row12.REVISION = null;        	            	        	            	
    row12.VALOR_GLOSA = null;        	            	        	            	
    row12.VALOR_ACEPTADO = null;        	            	        	            	
    row12.VALOR_SOPORTADO = null;        	            	        	            	
    row12.VALOR_RATIFICADA = null;        	            	        	            	
    row12.VALOR_NETO = null;        	            	
	cacheList_tFixedFlowInput_3.add(row12);
	for (int i_tFixedFlowInput_3 = 0 ; i_tFixedFlowInput_3 < 1 ; i_tFixedFlowInput_3++) {	
		for(row12Struct tmpRow_tFixedFlowInput_3 : cacheList_tFixedFlowInput_3){
			nb_line_tFixedFlowInput_3 ++;		
			row12 = tmpRow_tFixedFlowInput_3;

 



/**
 * [tFixedFlowInput_3 begin ] stop
 */
	
	/**
	 * [tFixedFlowInput_3 main ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_3";
	
	

 


	tos_count_tFixedFlowInput_3++;

/**
 * [tFixedFlowInput_3 main ] stop
 */
	
	/**
	 * [tFixedFlowInput_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_3";
	
	

 



/**
 * [tFixedFlowInput_3 process_data_begin ] stop
 */

	
	/**
	 * [tFileOutputExcel_4 main ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_4";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row12"
						
						);
					}
					

				xlsxTool_tFileOutputExcel_4.addRow();
									   				
	    				if(row12.Column_A != null) {
    				
							xlsxTool_tFileOutputExcel_4.addCellValue(String.valueOf(row12.Column_A));
	    				} else {
	    					xlsxTool_tFileOutputExcel_4.addCellNullValue();
	    				}
					
									   				
	    				if(row12.Column_B != null) {
    				
							xlsxTool_tFileOutputExcel_4.addCellValue(String.valueOf(row12.Column_B));
	    				} else {
	    					xlsxTool_tFileOutputExcel_4.addCellNullValue();
	    				}
					
									   				
	    				if(row12.Column_C != null) {
    				
							xlsxTool_tFileOutputExcel_4.addCellValue(String.valueOf(row12.Column_C));
	    				} else {
	    					xlsxTool_tFileOutputExcel_4.addCellNullValue();
	    				}
					
									   				
	    				if(row12.Column_D != null) {
    				
							xlsxTool_tFileOutputExcel_4.addCellValue(String.valueOf(row12.Column_D));
	    				} else {
	    					xlsxTool_tFileOutputExcel_4.addCellNullValue();
	    				}
					
									   				
	    				if(row12.Column_E != null) {
    				
							xlsxTool_tFileOutputExcel_4.addCellValue(String.valueOf(row12.Column_E));
	    				} else {
	    					xlsxTool_tFileOutputExcel_4.addCellNullValue();
	    				}
					
									   				
	    				if(row12.Column_F != null) {
    				
							xlsxTool_tFileOutputExcel_4.addCellValue(String.valueOf(row12.Column_F));
	    				} else {
	    					xlsxTool_tFileOutputExcel_4.addCellNullValue();
	    				}
					
									   				
	    				if(row12.RESPUESTA != null) {
    				
							xlsxTool_tFileOutputExcel_4.addCellValue(String.valueOf(row12.RESPUESTA));
	    				} else {
	    					xlsxTool_tFileOutputExcel_4.addCellNullValue();
	    				}
					
									   				
	    				if(row12.REVISION != null) {
    				
							xlsxTool_tFileOutputExcel_4.addCellValue(String.valueOf(row12.REVISION));
	    				} else {
	    					xlsxTool_tFileOutputExcel_4.addCellNullValue();
	    				}
					
									   				
	    				if(row12.VALOR_GLOSA != null) {
    				
							xlsxTool_tFileOutputExcel_4.addCellValue(String.valueOf(row12.VALOR_GLOSA));
	    				} else {
	    					xlsxTool_tFileOutputExcel_4.addCellNullValue();
	    				}
					
									   				
	    				if(row12.VALOR_ACEPTADO != null) {
    				
							xlsxTool_tFileOutputExcel_4.addCellValue(String.valueOf(row12.VALOR_ACEPTADO));
	    				} else {
	    					xlsxTool_tFileOutputExcel_4.addCellNullValue();
	    				}
					
									   				
	    				if(row12.VALOR_SOPORTADO != null) {
    				
							xlsxTool_tFileOutputExcel_4.addCellValue(String.valueOf(row12.VALOR_SOPORTADO));
	    				} else {
	    					xlsxTool_tFileOutputExcel_4.addCellNullValue();
	    				}
					
									   				
	    				if(row12.VALOR_RATIFICADA != null) {
    				
							xlsxTool_tFileOutputExcel_4.addCellValue(String.valueOf(row12.VALOR_RATIFICADA));
	    				} else {
	    					xlsxTool_tFileOutputExcel_4.addCellNullValue();
	    				}
					
									   				
	    				if(row12.VALOR_NETO != null) {
    				
							xlsxTool_tFileOutputExcel_4.addCellValue(String.valueOf(row12.VALOR_NETO));
	    				} else {
	    					xlsxTool_tFileOutputExcel_4.addCellNullValue();
	    				}
					
    			nb_line_tFileOutputExcel_4++;
				
 


	tos_count_tFileOutputExcel_4++;

/**
 * [tFileOutputExcel_4 main ] stop
 */
	
	/**
	 * [tFileOutputExcel_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_4";
	
	

 



/**
 * [tFileOutputExcel_4 process_data_begin ] stop
 */
	
	/**
	 * [tFileOutputExcel_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_4";
	
	

 



/**
 * [tFileOutputExcel_4 process_data_end ] stop
 */



	
	/**
	 * [tFixedFlowInput_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_3";
	
	

 



/**
 * [tFixedFlowInput_3 process_data_end ] stop
 */
	
	/**
	 * [tFixedFlowInput_3 end ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_3";
	
	

		}
	}
	cacheList_tFixedFlowInput_3.clear();
	globalMap.put("tFixedFlowInput_3_NB_LINE", nb_line_tFixedFlowInput_3);

 

ok_Hash.put("tFixedFlowInput_3", true);
end_Hash.put("tFixedFlowInput_3", System.currentTimeMillis());




/**
 * [tFixedFlowInput_3 end ] stop
 */

	
	/**
	 * [tFileOutputExcel_4 end ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_4";
	
	

	
	
	
			xlsxTool_tFileOutputExcel_4.writeExcel(fileName_tFileOutputExcel_4,true);
	
		if(headerIsInserted_tFileOutputExcel_4 && nb_line_tFileOutputExcel_4 > 0){
			nb_line_tFileOutputExcel_4 = nb_line_tFileOutputExcel_4 -1;
		}
		globalMap.put("tFileOutputExcel_4_NB_LINE",nb_line_tFileOutputExcel_4);
		
		

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row12");
			  	}
			  	
 

ok_Hash.put("tFileOutputExcel_4", true);
end_Hash.put("tFileOutputExcel_4", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk11", 0, "ok");
				}
				tJava_4Process(globalMap);



/**
 * [tFileOutputExcel_4 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFixedFlowInput_3 finally ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_3";
	
	

 



/**
 * [tFixedFlowInput_3 finally ] stop
 */

	
	/**
	 * [tFileOutputExcel_4 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_4";
	
	

 



/**
 * [tFileOutputExcel_4 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFixedFlowInput_3_SUBPROCESS_STATE", 1);
	}
	


public void tJava_4Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_4_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tJava_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_4", false);
		start_Hash.put("tJava_4", System.currentTimeMillis());
		
	
	currentComponent="tJava_4";
	
	
		int tos_count_tJava_4 = 0;
		


context.FECHA_HORA_FIN_EJECUCION = new Date();
context.VFACTURADO = new BigDecimal(0);
context.VGLOSADO   = new BigDecimal(0);
context.VCOBRADO   = new BigDecimal(0);
context.VNETO = new BigDecimal(0);
context.SUMADOR_NETO = new BigDecimal(0);
 



/**
 * [tJava_4 begin ] stop
 */
	
	/**
	 * [tJava_4 main ] start
	 */

	

	
	
	currentComponent="tJava_4";
	
	

 


	tos_count_tJava_4++;

/**
 * [tJava_4 main ] stop
 */
	
	/**
	 * [tJava_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_4";
	
	

 



/**
 * [tJava_4 process_data_begin ] stop
 */
	
	/**
	 * [tJava_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_4";
	
	

 



/**
 * [tJava_4 process_data_end ] stop
 */
	
	/**
	 * [tJava_4 end ] start
	 */

	

	
	
	currentComponent="tJava_4";
	
	

 

ok_Hash.put("tJava_4", true);
end_Hash.put("tJava_4", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk10", 0, "ok");
				}
				tFixedFlowInput_6Process(globalMap);



/**
 * [tJava_4 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_4 finally ] start
	 */

	

	
	
	currentComponent="tJava_4";
	
	

 



/**
 * [tJava_4 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_4_SUBPROCESS_STATE", 1);
	}
	


public static class row18Struct implements routines.system.IPersistableRow<row18Struct> {
    final static byte[] commonByteArrayLock_ACM_ACTAS_Actas = new byte[0];
    static byte[] commonByteArray_ACM_ACTAS_Actas = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public BigDecimal ID;

				public BigDecimal getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return true;
				}
				public Boolean IDIsKey(){
				    return true;
				}
				public Integer IDLength(){
				    return 0;
				}
				public Integer IDPrecision(){
				    return 0;
				}
				public String IDDefault(){
				
					return null;
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public String ESTADO;

				public String getESTADO () {
					return this.ESTADO;
				}

				public Boolean ESTADOIsNullable(){
				    return true;
				}
				public Boolean ESTADOIsKey(){
				    return false;
				}
				public Integer ESTADOLength(){
				    return null;
				}
				public Integer ESTADOPrecision(){
				    return null;
				}
				public String ESTADODefault(){
				
					return null;
				
				}
				public String ESTADOComment(){
				
				    return "";
				
				}
				public String ESTADOPattern(){
				
					return "";
				
				}
				public String ESTADOOriginalDbColumnName(){
				
					return "ESTADO";
				
				}

				
			    public java.util.Date FINICIAL;

				public java.util.Date getFINICIAL () {
					return this.FINICIAL;
				}

				public Boolean FINICIALIsNullable(){
				    return true;
				}
				public Boolean FINICIALIsKey(){
				    return false;
				}
				public Integer FINICIALLength(){
				    return 0;
				}
				public Integer FINICIALPrecision(){
				    return 0;
				}
				public String FINICIALDefault(){
				
					return null;
				
				}
				public String FINICIALComment(){
				
				    return "";
				
				}
				public String FINICIALPattern(){
				
					return "dd//MM//yyyy";
				
				}
				public String FINICIALOriginalDbColumnName(){
				
					return "FINICIAL";
				
				}

				
			    public java.util.Date FFINAL;

				public java.util.Date getFFINAL () {
					return this.FFINAL;
				}

				public Boolean FFINALIsNullable(){
				    return true;
				}
				public Boolean FFINALIsKey(){
				    return false;
				}
				public Integer FFINALLength(){
				    return 0;
				}
				public Integer FFINALPrecision(){
				    return 0;
				}
				public String FFINALDefault(){
				
					return null;
				
				}
				public String FFINALComment(){
				
				    return "";
				
				}
				public String FFINALPattern(){
				
					return "dd//MM//yyyy";
				
				}
				public String FFINALOriginalDbColumnName(){
				
					return "FFINAL";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.ID == null) ? 0 : this.ID.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row18Struct other = (row18Struct) obj;
		
						if (this.ID == null) {
							if (other.ID != null)
								return false;
						
						} else if (!this.ID.equals(other.ID))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row18Struct other) {

		other.ID = this.ID;
	            other.ESTADO = this.ESTADO;
	            other.FINICIAL = this.FINICIAL;
	            other.FFINAL = this.FFINAL;
	            
	}

	public void copyKeysDataTo(row18Struct other) {

		other.ID = this.ID;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_ACTAS_Actas.length) {
				if(length < 1024 && commonByteArray_ACM_ACTAS_Actas.length == 0) {
   					commonByteArray_ACM_ACTAS_Actas = new byte[1024];
				} else {
   					commonByteArray_ACM_ACTAS_Actas = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ACM_ACTAS_Actas, 0, length);
			strReturn = new String(commonByteArray_ACM_ACTAS_Actas, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_ACTAS_Actas.length) {
				if(length < 1024 && commonByteArray_ACM_ACTAS_Actas.length == 0) {
   					commonByteArray_ACM_ACTAS_Actas = new byte[1024];
				} else {
   					commonByteArray_ACM_ACTAS_Actas = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_ACM_ACTAS_Actas, 0, length);
			strReturn = new String(commonByteArray_ACM_ACTAS_Actas, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ACM_ACTAS_Actas) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
					this.ESTADO = readString(dis);
					
					this.FINICIAL = readDate(dis);
					
					this.FFINAL = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ACM_ACTAS_Actas) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
					this.ESTADO = readString(dis);
					
					this.FINICIAL = readDate(dis);
					
					this.FFINAL = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.ID);
					
					// String
				
						writeString(this.ESTADO,dos);
					
					// java.util.Date
				
						writeDate(this.FINICIAL,dos);
					
					// java.util.Date
				
						writeDate(this.FFINAL,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ID);
					
					// String
				
						writeString(this.ESTADO,dos);
					
					// java.util.Date
				
						writeDate(this.FINICIAL,dos);
					
					// java.util.Date
				
						writeDate(this.FFINAL,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",ESTADO="+ESTADO);
		sb.append(",FINICIAL="+String.valueOf(FINICIAL));
		sb.append(",FFINAL="+String.valueOf(FFINAL));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row18Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.ID, other.ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tFixedFlowInput_6Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFixedFlowInput_6_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row18Struct row18 = new row18Struct();




	
	/**
	 * [tOracleOutput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleOutput_1", false);
		start_Hash.put("tOracleOutput_1", System.currentTimeMillis());
		
	
	currentComponent="tOracleOutput_1";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row18");
					}
				
		int tos_count_tOracleOutput_1 = 0;
		






        int updateKeyCount_tOracleOutput_1 = 1;
        if(updateKeyCount_tOracleOutput_1 < 1) {
            throw new RuntimeException("For update, Schema must have a key");
        } else if (updateKeyCount_tOracleOutput_1 == 4 && true) {        
                throw new RuntimeException("For update, every Schema column can not be a key");
        }
    
    int nb_line_tOracleOutput_1 = 0;
    int nb_line_update_tOracleOutput_1 = 0;
    int nb_line_inserted_tOracleOutput_1 = 0;
    int nb_line_deleted_tOracleOutput_1 = 0;
    int nb_line_rejected_tOracleOutput_1 = 0;

    int tmp_batchUpdateCount_tOracleOutput_1 = 0;

    int deletedCount_tOracleOutput_1=0;
    int updatedCount_tOracleOutput_1=0;
    int insertedCount_tOracleOutput_1=0;
    int rowsToCommitCount_tOracleOutput_1=0;
    int rejectedCount_tOracleOutput_1=0;

    boolean whetherReject_tOracleOutput_1 = false;

    java.sql.Connection conn_tOracleOutput_1 = null;

    //optional table
    String dbschema_tOracleOutput_1 = null;
    String tableName_tOracleOutput_1 = null;
        dbschema_tOracleOutput_1 = (String)globalMap.get("dbschema_tOracleConnection_1");
		
        conn_tOracleOutput_1 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");
        int count_tOracleOutput_1=0;

        if(dbschema_tOracleOutput_1 == null || dbschema_tOracleOutput_1.trim().length() == 0) {
            tableName_tOracleOutput_1 = ("REP_SARCHIVO");
        } else {
            tableName_tOracleOutput_1 = dbschema_tOracleOutput_1 + "." + ("REP_SARCHIVO");
        }
                String update_tOracleOutput_1 = "UPDATE " + tableName_tOracleOutput_1 + " SET ESTADO = ?,FINICIAL = ?,FFINAL = ? WHERE ID = ?";
                java.sql.PreparedStatement pstmt_tOracleOutput_1 = conn_tOracleOutput_1.prepareStatement(update_tOracleOutput_1);
                resourceMap.put("pstmt_tOracleOutput_1", pstmt_tOracleOutput_1);





 



/**
 * [tOracleOutput_1 begin ] stop
 */



	
	/**
	 * [tFixedFlowInput_6 begin ] start
	 */

	

	
		
		ok_Hash.put("tFixedFlowInput_6", false);
		start_Hash.put("tFixedFlowInput_6", System.currentTimeMillis());
		
	
	currentComponent="tFixedFlowInput_6";
	
	
		int tos_count_tFixedFlowInput_6 = 0;
		

	    for (int i_tFixedFlowInput_6 = 0 ; i_tFixedFlowInput_6 < 1 ; i_tFixedFlowInput_6++) {
	                	            	
    	            		row18.ID = context.ID;
    	            	        	            	
    	            		row18.ESTADO = "Procesado";
    	            	        	            	
    	            		row18.FINICIAL = context.FECHA_HORA_INICIO_EJECUCION;
    	            	        	            	
    	            		row18.FFINAL = context.FECHA_HORA_FIN_EJECUCION;
    	            	

 



/**
 * [tFixedFlowInput_6 begin ] stop
 */
	
	/**
	 * [tFixedFlowInput_6 main ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_6";
	
	

 


	tos_count_tFixedFlowInput_6++;

/**
 * [tFixedFlowInput_6 main ] stop
 */
	
	/**
	 * [tFixedFlowInput_6 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_6";
	
	

 



/**
 * [tFixedFlowInput_6 process_data_begin ] stop
 */

	
	/**
	 * [tOracleOutput_1 main ] start
	 */

	

	
	
	currentComponent="tOracleOutput_1";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row18"
						
						);
					}
					



        whetherReject_tOracleOutput_1 = false;
                    if(row18.ESTADO == null) {
pstmt_tOracleOutput_1.setNull(1, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_1.setString(1, row18.ESTADO);
}

                    if(row18.FINICIAL != null) {
pstmt_tOracleOutput_1.setObject(2, new java.sql.Timestamp(row18.FINICIAL.getTime()),java.sql.Types.DATE);
} else {
pstmt_tOracleOutput_1.setNull(2, java.sql.Types.DATE);
}

                    if(row18.FFINAL != null) {
pstmt_tOracleOutput_1.setObject(3, new java.sql.Timestamp(row18.FFINAL.getTime()),java.sql.Types.DATE);
} else {
pstmt_tOracleOutput_1.setNull(3, java.sql.Types.DATE);
}


                    pstmt_tOracleOutput_1.setBigDecimal(4 + count_tOracleOutput_1, row18.ID);

                try {
                    nb_line_tOracleOutput_1++;
                    int processedCount_tOracleOutput_1 = pstmt_tOracleOutput_1.executeUpdate();
                    updatedCount_tOracleOutput_1 += processedCount_tOracleOutput_1;
                    rowsToCommitCount_tOracleOutput_1 += processedCount_tOracleOutput_1;
                } catch(java.lang.Exception e_tOracleOutput_1) {
globalMap.put("tOracleOutput_1_ERROR_MESSAGE",e_tOracleOutput_1.getMessage());
                    whetherReject_tOracleOutput_1 = true;
                        throw(e_tOracleOutput_1);
                }

 


	tos_count_tOracleOutput_1++;

/**
 * [tOracleOutput_1 main ] stop
 */
	
	/**
	 * [tOracleOutput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleOutput_1";
	
	

 



/**
 * [tOracleOutput_1 process_data_begin ] stop
 */
	
	/**
	 * [tOracleOutput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_1";
	
	

 



/**
 * [tOracleOutput_1 process_data_end ] stop
 */



	
	/**
	 * [tFixedFlowInput_6 process_data_end ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_6";
	
	

 



/**
 * [tFixedFlowInput_6 process_data_end ] stop
 */
	
	/**
	 * [tFixedFlowInput_6 end ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_6";
	
	

        }
        globalMap.put("tFixedFlowInput_6_NB_LINE", 1);        

 

ok_Hash.put("tFixedFlowInput_6", true);
end_Hash.put("tFixedFlowInput_6", System.currentTimeMillis());




/**
 * [tFixedFlowInput_6 end ] stop
 */

	
	/**
	 * [tOracleOutput_1 end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_1";
	
	
	



	
        if(pstmt_tOracleOutput_1 != null) {
			
				pstmt_tOracleOutput_1.close();
				resourceMap.remove("pstmt_tOracleOutput_1");
			
        }
    resourceMap.put("statementClosed_tOracleOutput_1", true);

	
	nb_line_deleted_tOracleOutput_1=nb_line_deleted_tOracleOutput_1+ deletedCount_tOracleOutput_1;
	nb_line_update_tOracleOutput_1=nb_line_update_tOracleOutput_1 + updatedCount_tOracleOutput_1;
	nb_line_inserted_tOracleOutput_1=nb_line_inserted_tOracleOutput_1 + insertedCount_tOracleOutput_1;
	nb_line_rejected_tOracleOutput_1=nb_line_rejected_tOracleOutput_1 + rejectedCount_tOracleOutput_1;
	
        globalMap.put("tOracleOutput_1_NB_LINE",nb_line_tOracleOutput_1);
        globalMap.put("tOracleOutput_1_NB_LINE_UPDATED",nb_line_update_tOracleOutput_1);
        globalMap.put("tOracleOutput_1_NB_LINE_INSERTED",nb_line_inserted_tOracleOutput_1);
        globalMap.put("tOracleOutput_1_NB_LINE_DELETED",nb_line_deleted_tOracleOutput_1);
        globalMap.put("tOracleOutput_1_NB_LINE_REJECTED", nb_line_rejected_tOracleOutput_1);
    

	



				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row18");
			  	}
			  	
 

ok_Hash.put("tOracleOutput_1", true);
end_Hash.put("tOracleOutput_1", System.currentTimeMillis());




/**
 * [tOracleOutput_1 end ] stop
 */



				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tFixedFlowInput_6:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk5", 0, "ok");
								} 
							
							tFixedFlowInput_5Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFixedFlowInput_6 finally ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_6";
	
	

 



/**
 * [tFixedFlowInput_6 finally ] stop
 */

	
	/**
	 * [tOracleOutput_1 finally ] start
	 */

	

	
	
	currentComponent="tOracleOutput_1";
	
	



    if (resourceMap.get("statementClosed_tOracleOutput_1") == null) {
                java.sql.PreparedStatement pstmtToClose_tOracleOutput_1 = null;
                if ((pstmtToClose_tOracleOutput_1 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tOracleOutput_1")) != null) {
                    pstmtToClose_tOracleOutput_1.close();
                }
    }
 



/**
 * [tOracleOutput_1 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFixedFlowInput_6_SUBPROCESS_STATE", 1);
	}
	


public static class row19Struct implements routines.system.IPersistableRow<row19Struct> {
    final static byte[] commonByteArrayLock_ACM_ACTAS_Actas = new byte[0];
    static byte[] commonByteArray_ACM_ACTAS_Actas = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public BigDecimal ID;

				public BigDecimal getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return true;
				}
				public Boolean IDIsKey(){
				    return true;
				}
				public Integer IDLength(){
				    return null;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return null;
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public String ARCHIVO;

				public String getARCHIVO () {
					return this.ARCHIVO;
				}

				public Boolean ARCHIVOIsNullable(){
				    return true;
				}
				public Boolean ARCHIVOIsKey(){
				    return false;
				}
				public Integer ARCHIVOLength(){
				    return null;
				}
				public Integer ARCHIVOPrecision(){
				    return null;
				}
				public String ARCHIVODefault(){
				
					return null;
				
				}
				public String ARCHIVOComment(){
				
				    return "";
				
				}
				public String ARCHIVOPattern(){
				
					return "";
				
				}
				public String ARCHIVOOriginalDbColumnName(){
				
					return "ARCHIVO";
				
				}

				
			    public String GUID;

				public String getGUID () {
					return this.GUID;
				}

				public Boolean GUIDIsNullable(){
				    return true;
				}
				public Boolean GUIDIsKey(){
				    return false;
				}
				public Integer GUIDLength(){
				    return null;
				}
				public Integer GUIDPrecision(){
				    return null;
				}
				public String GUIDDefault(){
				
					return null;
				
				}
				public String GUIDComment(){
				
				    return "";
				
				}
				public String GUIDPattern(){
				
					return "";
				
				}
				public String GUIDOriginalDbColumnName(){
				
					return "GUID";
				
				}

				
			    public String TCONTENIDO;

				public String getTCONTENIDO () {
					return this.TCONTENIDO;
				}

				public Boolean TCONTENIDOIsNullable(){
				    return true;
				}
				public Boolean TCONTENIDOIsKey(){
				    return false;
				}
				public Integer TCONTENIDOLength(){
				    return null;
				}
				public Integer TCONTENIDOPrecision(){
				    return null;
				}
				public String TCONTENIDODefault(){
				
					return null;
				
				}
				public String TCONTENIDOComment(){
				
				    return "";
				
				}
				public String TCONTENIDOPattern(){
				
					return "";
				
				}
				public String TCONTENIDOOriginalDbColumnName(){
				
					return "TCONTENIDO";
				
				}

				
			    public String ESTADO;

				public String getESTADO () {
					return this.ESTADO;
				}

				public Boolean ESTADOIsNullable(){
				    return true;
				}
				public Boolean ESTADOIsKey(){
				    return false;
				}
				public Integer ESTADOLength(){
				    return null;
				}
				public Integer ESTADOPrecision(){
				    return null;
				}
				public String ESTADODefault(){
				
					return null;
				
				}
				public String ESTADOComment(){
				
				    return "";
				
				}
				public String ESTADOPattern(){
				
					return "";
				
				}
				public String ESTADOOriginalDbColumnName(){
				
					return "ESTADO";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.ID == null) ? 0 : this.ID.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row19Struct other = (row19Struct) obj;
		
						if (this.ID == null) {
							if (other.ID != null)
								return false;
						
						} else if (!this.ID.equals(other.ID))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row19Struct other) {

		other.ID = this.ID;
	            other.ARCHIVO = this.ARCHIVO;
	            other.GUID = this.GUID;
	            other.TCONTENIDO = this.TCONTENIDO;
	            other.ESTADO = this.ESTADO;
	            
	}

	public void copyKeysDataTo(row19Struct other) {

		other.ID = this.ID;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_ACTAS_Actas.length) {
				if(length < 1024 && commonByteArray_ACM_ACTAS_Actas.length == 0) {
   					commonByteArray_ACM_ACTAS_Actas = new byte[1024];
				} else {
   					commonByteArray_ACM_ACTAS_Actas = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ACM_ACTAS_Actas, 0, length);
			strReturn = new String(commonByteArray_ACM_ACTAS_Actas, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_ACTAS_Actas.length) {
				if(length < 1024 && commonByteArray_ACM_ACTAS_Actas.length == 0) {
   					commonByteArray_ACM_ACTAS_Actas = new byte[1024];
				} else {
   					commonByteArray_ACM_ACTAS_Actas = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_ACM_ACTAS_Actas, 0, length);
			strReturn = new String(commonByteArray_ACM_ACTAS_Actas, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ACM_ACTAS_Actas) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
					this.ARCHIVO = readString(dis);
					
					this.GUID = readString(dis);
					
					this.TCONTENIDO = readString(dis);
					
					this.ESTADO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ACM_ACTAS_Actas) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
					this.ARCHIVO = readString(dis);
					
					this.GUID = readString(dis);
					
					this.TCONTENIDO = readString(dis);
					
					this.ESTADO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.ID);
					
					// String
				
						writeString(this.ARCHIVO,dos);
					
					// String
				
						writeString(this.GUID,dos);
					
					// String
				
						writeString(this.TCONTENIDO,dos);
					
					// String
				
						writeString(this.ESTADO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ID);
					
					// String
				
						writeString(this.ARCHIVO,dos);
					
					// String
				
						writeString(this.GUID,dos);
					
					// String
				
						writeString(this.TCONTENIDO,dos);
					
					// String
				
						writeString(this.ESTADO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",ARCHIVO="+ARCHIVO);
		sb.append(",GUID="+GUID);
		sb.append(",TCONTENIDO="+TCONTENIDO);
		sb.append(",ESTADO="+ESTADO);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row19Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.ID, other.ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tFixedFlowInput_5Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFixedFlowInput_5_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row19Struct row19 = new row19Struct();




	
	/**
	 * [tOracleOutput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleOutput_2", false);
		start_Hash.put("tOracleOutput_2", System.currentTimeMillis());
		
	
	currentComponent="tOracleOutput_2";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row19");
					}
				
		int tos_count_tOracleOutput_2 = 0;
		






        int updateKeyCount_tOracleOutput_2 = 1;
        if(updateKeyCount_tOracleOutput_2 < 1) {
            throw new RuntimeException("For update, Schema must have a key");
        } else if (updateKeyCount_tOracleOutput_2 == 5 && true) {        
                throw new RuntimeException("For update, every Schema column can not be a key");
        }
    
    int nb_line_tOracleOutput_2 = 0;
    int nb_line_update_tOracleOutput_2 = 0;
    int nb_line_inserted_tOracleOutput_2 = 0;
    int nb_line_deleted_tOracleOutput_2 = 0;
    int nb_line_rejected_tOracleOutput_2 = 0;

    int tmp_batchUpdateCount_tOracleOutput_2 = 0;

    int deletedCount_tOracleOutput_2=0;
    int updatedCount_tOracleOutput_2=0;
    int insertedCount_tOracleOutput_2=0;
    int rowsToCommitCount_tOracleOutput_2=0;
    int rejectedCount_tOracleOutput_2=0;

    boolean whetherReject_tOracleOutput_2 = false;

    java.sql.Connection conn_tOracleOutput_2 = null;

    //optional table
    String dbschema_tOracleOutput_2 = null;
    String tableName_tOracleOutput_2 = null;
        dbschema_tOracleOutput_2 = (String)globalMap.get("dbschema_tOracleConnection_1");
		
        conn_tOracleOutput_2 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");
        int count_tOracleOutput_2=0;

        if(dbschema_tOracleOutput_2 == null || dbschema_tOracleOutput_2.trim().length() == 0) {
            tableName_tOracleOutput_2 = ("ACM_ACTAS");
        } else {
            tableName_tOracleOutput_2 = dbschema_tOracleOutput_2 + "." + ("ACM_ACTAS");
        }
                String update_tOracleOutput_2 = "UPDATE " + tableName_tOracleOutput_2 + " SET ARCHIVO = ?,GUID = ?,TCONTENIDO = ?,ESTADO = ? WHERE ID = ?";
                java.sql.PreparedStatement pstmt_tOracleOutput_2 = conn_tOracleOutput_2.prepareStatement(update_tOracleOutput_2);
                resourceMap.put("pstmt_tOracleOutput_2", pstmt_tOracleOutput_2);





 



/**
 * [tOracleOutput_2 begin ] stop
 */



	
	/**
	 * [tFixedFlowInput_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tFixedFlowInput_5", false);
		start_Hash.put("tFixedFlowInput_5", System.currentTimeMillis());
		
	
	currentComponent="tFixedFlowInput_5";
	
	
		int tos_count_tFixedFlowInput_5 = 0;
		

	    for (int i_tFixedFlowInput_5 = 0 ; i_tFixedFlowInput_5 < 1 ; i_tFixedFlowInput_5++) {
	                	            	
    	            		row19.ID = context.ACTA_ID;
    	            	        	            	
    	            		row19.ARCHIVO = context.fileSystem_Report + ".xlsx";
    	            	        	            	
    	            		row19.GUID = context.archivoSalida;
    	            	        	            	
    	            		row19.TCONTENIDO = "application/xlsx";
    	            	        	            	
    	            		row19.ESTADO = "Generada";
    	            	

 



/**
 * [tFixedFlowInput_5 begin ] stop
 */
	
	/**
	 * [tFixedFlowInput_5 main ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_5";
	
	

 


	tos_count_tFixedFlowInput_5++;

/**
 * [tFixedFlowInput_5 main ] stop
 */
	
	/**
	 * [tFixedFlowInput_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_5";
	
	

 



/**
 * [tFixedFlowInput_5 process_data_begin ] stop
 */

	
	/**
	 * [tOracleOutput_2 main ] start
	 */

	

	
	
	currentComponent="tOracleOutput_2";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row19"
						
						);
					}
					



        whetherReject_tOracleOutput_2 = false;
                    if(row19.ARCHIVO == null) {
pstmt_tOracleOutput_2.setNull(1, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_2.setString(1, row19.ARCHIVO);
}

                    if(row19.GUID == null) {
pstmt_tOracleOutput_2.setNull(2, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_2.setString(2, row19.GUID);
}

                    if(row19.TCONTENIDO == null) {
pstmt_tOracleOutput_2.setNull(3, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_2.setString(3, row19.TCONTENIDO);
}

                    if(row19.ESTADO == null) {
pstmt_tOracleOutput_2.setNull(4, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_2.setString(4, row19.ESTADO);
}


                    pstmt_tOracleOutput_2.setBigDecimal(5 + count_tOracleOutput_2, row19.ID);

                try {
                    nb_line_tOracleOutput_2++;
                    int processedCount_tOracleOutput_2 = pstmt_tOracleOutput_2.executeUpdate();
                    updatedCount_tOracleOutput_2 += processedCount_tOracleOutput_2;
                    rowsToCommitCount_tOracleOutput_2 += processedCount_tOracleOutput_2;
                } catch(java.lang.Exception e_tOracleOutput_2) {
globalMap.put("tOracleOutput_2_ERROR_MESSAGE",e_tOracleOutput_2.getMessage());
                    whetherReject_tOracleOutput_2 = true;
                            System.err.print(e_tOracleOutput_2.getMessage());
                }

 


	tos_count_tOracleOutput_2++;

/**
 * [tOracleOutput_2 main ] stop
 */
	
	/**
	 * [tOracleOutput_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleOutput_2";
	
	

 



/**
 * [tOracleOutput_2 process_data_begin ] stop
 */
	
	/**
	 * [tOracleOutput_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_2";
	
	

 



/**
 * [tOracleOutput_2 process_data_end ] stop
 */



	
	/**
	 * [tFixedFlowInput_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_5";
	
	

 



/**
 * [tFixedFlowInput_5 process_data_end ] stop
 */
	
	/**
	 * [tFixedFlowInput_5 end ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_5";
	
	

        }
        globalMap.put("tFixedFlowInput_5_NB_LINE", 1);        

 

ok_Hash.put("tFixedFlowInput_5", true);
end_Hash.put("tFixedFlowInput_5", System.currentTimeMillis());




/**
 * [tFixedFlowInput_5 end ] stop
 */

	
	/**
	 * [tOracleOutput_2 end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_2";
	
	
	



	
        if(pstmt_tOracleOutput_2 != null) {
			
				pstmt_tOracleOutput_2.close();
				resourceMap.remove("pstmt_tOracleOutput_2");
			
        }
    resourceMap.put("statementClosed_tOracleOutput_2", true);

	
	nb_line_deleted_tOracleOutput_2=nb_line_deleted_tOracleOutput_2+ deletedCount_tOracleOutput_2;
	nb_line_update_tOracleOutput_2=nb_line_update_tOracleOutput_2 + updatedCount_tOracleOutput_2;
	nb_line_inserted_tOracleOutput_2=nb_line_inserted_tOracleOutput_2 + insertedCount_tOracleOutput_2;
	nb_line_rejected_tOracleOutput_2=nb_line_rejected_tOracleOutput_2 + rejectedCount_tOracleOutput_2;
	
        globalMap.put("tOracleOutput_2_NB_LINE",nb_line_tOracleOutput_2);
        globalMap.put("tOracleOutput_2_NB_LINE_UPDATED",nb_line_update_tOracleOutput_2);
        globalMap.put("tOracleOutput_2_NB_LINE_INSERTED",nb_line_inserted_tOracleOutput_2);
        globalMap.put("tOracleOutput_2_NB_LINE_DELETED",nb_line_deleted_tOracleOutput_2);
        globalMap.put("tOracleOutput_2_NB_LINE_REJECTED", nb_line_rejected_tOracleOutput_2);
    

	



				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row19");
			  	}
			  	
 

ok_Hash.put("tOracleOutput_2", true);
end_Hash.put("tOracleOutput_2", System.currentTimeMillis());




/**
 * [tOracleOutput_2 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFixedFlowInput_5 finally ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_5";
	
	

 



/**
 * [tFixedFlowInput_5 finally ] stop
 */

	
	/**
	 * [tOracleOutput_2 finally ] start
	 */

	

	
	
	currentComponent="tOracleOutput_2";
	
	



    if (resourceMap.get("statementClosed_tOracleOutput_2") == null) {
                java.sql.PreparedStatement pstmtToClose_tOracleOutput_2 = null;
                if ((pstmtToClose_tOracleOutput_2 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tOracleOutput_2")) != null) {
                    pstmtToClose_tOracleOutput_2.close();
                }
    }
 



/**
 * [tOracleOutput_2 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFixedFlowInput_5_SUBPROCESS_STATE", 1);
	}
	


public static class out4Struct implements routines.system.IPersistableRow<out4Struct> {
    final static byte[] commonByteArrayLock_ACM_ACTAS_Actas = new byte[0];
    static byte[] commonByteArray_ACM_ACTAS_Actas = new byte[0];

	
			    public String NUMERO_FACTURA;

				public String getNUMERO_FACTURA () {
					return this.NUMERO_FACTURA;
				}

				public Boolean NUMERO_FACTURAIsNullable(){
				    return true;
				}
				public Boolean NUMERO_FACTURAIsKey(){
				    return false;
				}
				public Integer NUMERO_FACTURALength(){
				    return 101;
				}
				public Integer NUMERO_FACTURAPrecision(){
				    return 0;
				}
				public String NUMERO_FACTURADefault(){
				
					return null;
				
				}
				public String NUMERO_FACTURAComment(){
				
				    return "";
				
				}
				public String NUMERO_FACTURAPattern(){
				
					return "";
				
				}
				public String NUMERO_FACTURAOriginalDbColumnName(){
				
					return "NUMERO_FACTURA";
				
				}

				
			    public String DOCUMENTO;

				public String getDOCUMENTO () {
					return this.DOCUMENTO;
				}

				public Boolean DOCUMENTOIsNullable(){
				    return true;
				}
				public Boolean DOCUMENTOIsKey(){
				    return false;
				}
				public Integer DOCUMENTOLength(){
				    return 50;
				}
				public Integer DOCUMENTOPrecision(){
				    return 0;
				}
				public String DOCUMENTODefault(){
				
					return null;
				
				}
				public String DOCUMENTOComment(){
				
				    return "";
				
				}
				public String DOCUMENTOPattern(){
				
					return "";
				
				}
				public String DOCUMENTOOriginalDbColumnName(){
				
					return "DOCUMENTO";
				
				}

				
			    public String PACIENTE;

				public String getPACIENTE () {
					return this.PACIENTE;
				}

				public Boolean PACIENTEIsNullable(){
				    return true;
				}
				public Boolean PACIENTEIsKey(){
				    return false;
				}
				public Integer PACIENTELength(){
				    return 400;
				}
				public Integer PACIENTEPrecision(){
				    return 0;
				}
				public String PACIENTEDefault(){
				
					return null;
				
				}
				public String PACIENTEComment(){
				
				    return "";
				
				}
				public String PACIENTEPattern(){
				
					return "";
				
				}
				public String PACIENTEOriginalDbColumnName(){
				
					return "PACIENTE";
				
				}

				
			    public String CODIGO;

				public String getCODIGO () {
					return this.CODIGO;
				}

				public Boolean CODIGOIsNullable(){
				    return true;
				}
				public Boolean CODIGOIsKey(){
				    return false;
				}
				public Integer CODIGOLength(){
				    return 400;
				}
				public Integer CODIGOPrecision(){
				    return 0;
				}
				public String CODIGODefault(){
				
					return null;
				
				}
				public String CODIGOComment(){
				
				    return "";
				
				}
				public String CODIGOPattern(){
				
					return "";
				
				}
				public String CODIGOOriginalDbColumnName(){
				
					return "CODIGO";
				
				}

				
			    public String CONCEPTO_GLOSA;

				public String getCONCEPTO_GLOSA () {
					return this.CONCEPTO_GLOSA;
				}

				public Boolean CONCEPTO_GLOSAIsNullable(){
				    return false;
				}
				public Boolean CONCEPTO_GLOSAIsKey(){
				    return false;
				}
				public Integer CONCEPTO_GLOSALength(){
				    return 2000;
				}
				public Integer CONCEPTO_GLOSAPrecision(){
				    return 0;
				}
				public String CONCEPTO_GLOSADefault(){
				
					return null;
				
				}
				public String CONCEPTO_GLOSAComment(){
				
				    return "";
				
				}
				public String CONCEPTO_GLOSAPattern(){
				
					return "";
				
				}
				public String CONCEPTO_GLOSAOriginalDbColumnName(){
				
					return "CONCEPTO_GLOSA";
				
				}

				
			    public String DESCRIPCION_GLOSA;

				public String getDESCRIPCION_GLOSA () {
					return this.DESCRIPCION_GLOSA;
				}

				public Boolean DESCRIPCION_GLOSAIsNullable(){
				    return false;
				}
				public Boolean DESCRIPCION_GLOSAIsKey(){
				    return false;
				}
				public Integer DESCRIPCION_GLOSALength(){
				    return 4000;
				}
				public Integer DESCRIPCION_GLOSAPrecision(){
				    return 0;
				}
				public String DESCRIPCION_GLOSADefault(){
				
					return null;
				
				}
				public String DESCRIPCION_GLOSAComment(){
				
				    return "";
				
				}
				public String DESCRIPCION_GLOSAPattern(){
				
					return "";
				
				}
				public String DESCRIPCION_GLOSAOriginalDbColumnName(){
				
					return "DESCRIPCION_GLOSA";
				
				}

				
			    public String OBCONCILIACION;

				public String getOBCONCILIACION () {
					return this.OBCONCILIACION;
				}

				public Boolean OBCONCILIACIONIsNullable(){
				    return true;
				}
				public Boolean OBCONCILIACIONIsKey(){
				    return false;
				}
				public Integer OBCONCILIACIONLength(){
				    return 4000;
				}
				public Integer OBCONCILIACIONPrecision(){
				    return 0;
				}
				public String OBCONCILIACIONDefault(){
				
					return null;
				
				}
				public String OBCONCILIACIONComment(){
				
				    return "";
				
				}
				public String OBCONCILIACIONPattern(){
				
					return "";
				
				}
				public String OBCONCILIACIONOriginalDbColumnName(){
				
					return "OBCONCILIACION";
				
				}

				
			    public String VGLOSADO;

				public String getVGLOSADO () {
					return this.VGLOSADO;
				}

				public Boolean VGLOSADOIsNullable(){
				    return true;
				}
				public Boolean VGLOSADOIsKey(){
				    return false;
				}
				public Integer VGLOSADOLength(){
				    return null;
				}
				public Integer VGLOSADOPrecision(){
				    return null;
				}
				public String VGLOSADODefault(){
				
					return null;
				
				}
				public String VGLOSADOComment(){
				
				    return "";
				
				}
				public String VGLOSADOPattern(){
				
					return "";
				
				}
				public String VGLOSADOOriginalDbColumnName(){
				
					return "VGLOSADO";
				
				}

				
			    public String VACEPTADO;

				public String getVACEPTADO () {
					return this.VACEPTADO;
				}

				public Boolean VACEPTADOIsNullable(){
				    return true;
				}
				public Boolean VACEPTADOIsKey(){
				    return false;
				}
				public Integer VACEPTADOLength(){
				    return null;
				}
				public Integer VACEPTADOPrecision(){
				    return null;
				}
				public String VACEPTADODefault(){
				
					return null;
				
				}
				public String VACEPTADOComment(){
				
				    return "";
				
				}
				public String VACEPTADOPattern(){
				
					return "";
				
				}
				public String VACEPTADOOriginalDbColumnName(){
				
					return "VACEPTADO";
				
				}

				
			    public String VSOPORTADO;

				public String getVSOPORTADO () {
					return this.VSOPORTADO;
				}

				public Boolean VSOPORTADOIsNullable(){
				    return true;
				}
				public Boolean VSOPORTADOIsKey(){
				    return false;
				}
				public Integer VSOPORTADOLength(){
				    return null;
				}
				public Integer VSOPORTADOPrecision(){
				    return null;
				}
				public String VSOPORTADODefault(){
				
					return null;
				
				}
				public String VSOPORTADOComment(){
				
				    return "";
				
				}
				public String VSOPORTADOPattern(){
				
					return "";
				
				}
				public String VSOPORTADOOriginalDbColumnName(){
				
					return "VSOPORTADO";
				
				}

				
			    public String VNETO;

				public String getVNETO () {
					return this.VNETO;
				}

				public Boolean VNETOIsNullable(){
				    return true;
				}
				public Boolean VNETOIsKey(){
				    return false;
				}
				public Integer VNETOLength(){
				    return null;
				}
				public Integer VNETOPrecision(){
				    return null;
				}
				public String VNETODefault(){
				
					return null;
				
				}
				public String VNETOComment(){
				
				    return "";
				
				}
				public String VNETOPattern(){
				
					return "";
				
				}
				public String VNETOOriginalDbColumnName(){
				
					return "VNETO";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_ACTAS_Actas.length) {
				if(length < 1024 && commonByteArray_ACM_ACTAS_Actas.length == 0) {
   					commonByteArray_ACM_ACTAS_Actas = new byte[1024];
				} else {
   					commonByteArray_ACM_ACTAS_Actas = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ACM_ACTAS_Actas, 0, length);
			strReturn = new String(commonByteArray_ACM_ACTAS_Actas, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_ACTAS_Actas.length) {
				if(length < 1024 && commonByteArray_ACM_ACTAS_Actas.length == 0) {
   					commonByteArray_ACM_ACTAS_Actas = new byte[1024];
				} else {
   					commonByteArray_ACM_ACTAS_Actas = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_ACM_ACTAS_Actas, 0, length);
			strReturn = new String(commonByteArray_ACM_ACTAS_Actas, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ACM_ACTAS_Actas) {

        	try {

        		int length = 0;
		
					this.NUMERO_FACTURA = readString(dis);
					
					this.DOCUMENTO = readString(dis);
					
					this.PACIENTE = readString(dis);
					
					this.CODIGO = readString(dis);
					
					this.CONCEPTO_GLOSA = readString(dis);
					
					this.DESCRIPCION_GLOSA = readString(dis);
					
					this.OBCONCILIACION = readString(dis);
					
					this.VGLOSADO = readString(dis);
					
					this.VACEPTADO = readString(dis);
					
					this.VSOPORTADO = readString(dis);
					
					this.VNETO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ACM_ACTAS_Actas) {

        	try {

        		int length = 0;
		
					this.NUMERO_FACTURA = readString(dis);
					
					this.DOCUMENTO = readString(dis);
					
					this.PACIENTE = readString(dis);
					
					this.CODIGO = readString(dis);
					
					this.CONCEPTO_GLOSA = readString(dis);
					
					this.DESCRIPCION_GLOSA = readString(dis);
					
					this.OBCONCILIACION = readString(dis);
					
					this.VGLOSADO = readString(dis);
					
					this.VACEPTADO = readString(dis);
					
					this.VSOPORTADO = readString(dis);
					
					this.VNETO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.NUMERO_FACTURA,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// String
				
						writeString(this.PACIENTE,dos);
					
					// String
				
						writeString(this.CODIGO,dos);
					
					// String
				
						writeString(this.CONCEPTO_GLOSA,dos);
					
					// String
				
						writeString(this.DESCRIPCION_GLOSA,dos);
					
					// String
				
						writeString(this.OBCONCILIACION,dos);
					
					// String
				
						writeString(this.VGLOSADO,dos);
					
					// String
				
						writeString(this.VACEPTADO,dos);
					
					// String
				
						writeString(this.VSOPORTADO,dos);
					
					// String
				
						writeString(this.VNETO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.NUMERO_FACTURA,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// String
				
						writeString(this.PACIENTE,dos);
					
					// String
				
						writeString(this.CODIGO,dos);
					
					// String
				
						writeString(this.CONCEPTO_GLOSA,dos);
					
					// String
				
						writeString(this.DESCRIPCION_GLOSA,dos);
					
					// String
				
						writeString(this.OBCONCILIACION,dos);
					
					// String
				
						writeString(this.VGLOSADO,dos);
					
					// String
				
						writeString(this.VACEPTADO,dos);
					
					// String
				
						writeString(this.VSOPORTADO,dos);
					
					// String
				
						writeString(this.VNETO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("NUMERO_FACTURA="+NUMERO_FACTURA);
		sb.append(",DOCUMENTO="+DOCUMENTO);
		sb.append(",PACIENTE="+PACIENTE);
		sb.append(",CODIGO="+CODIGO);
		sb.append(",CONCEPTO_GLOSA="+CONCEPTO_GLOSA);
		sb.append(",DESCRIPCION_GLOSA="+DESCRIPCION_GLOSA);
		sb.append(",OBCONCILIACION="+OBCONCILIACION);
		sb.append(",VGLOSADO="+VGLOSADO);
		sb.append(",VACEPTADO="+VACEPTADO);
		sb.append(",VSOPORTADO="+VSOPORTADO);
		sb.append(",VNETO="+VNETO);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(out4Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row15Struct implements routines.system.IPersistableRow<row15Struct> {
    final static byte[] commonByteArrayLock_ACM_ACTAS_Actas = new byte[0];
    static byte[] commonByteArray_ACM_ACTAS_Actas = new byte[0];

	
			    public String NUMERO_FACTURA;

				public String getNUMERO_FACTURA () {
					return this.NUMERO_FACTURA;
				}

				public Boolean NUMERO_FACTURAIsNullable(){
				    return true;
				}
				public Boolean NUMERO_FACTURAIsKey(){
				    return false;
				}
				public Integer NUMERO_FACTURALength(){
				    return 101;
				}
				public Integer NUMERO_FACTURAPrecision(){
				    return 0;
				}
				public String NUMERO_FACTURADefault(){
				
					return null;
				
				}
				public String NUMERO_FACTURAComment(){
				
				    return "";
				
				}
				public String NUMERO_FACTURAPattern(){
				
					return "";
				
				}
				public String NUMERO_FACTURAOriginalDbColumnName(){
				
					return "NUMERO_FACTURA";
				
				}

				
			    public String DOCUMENTO;

				public String getDOCUMENTO () {
					return this.DOCUMENTO;
				}

				public Boolean DOCUMENTOIsNullable(){
				    return true;
				}
				public Boolean DOCUMENTOIsKey(){
				    return false;
				}
				public Integer DOCUMENTOLength(){
				    return 50;
				}
				public Integer DOCUMENTOPrecision(){
				    return 0;
				}
				public String DOCUMENTODefault(){
				
					return null;
				
				}
				public String DOCUMENTOComment(){
				
				    return "";
				
				}
				public String DOCUMENTOPattern(){
				
					return "";
				
				}
				public String DOCUMENTOOriginalDbColumnName(){
				
					return "DOCUMENTO";
				
				}

				
			    public String PACIENTE;

				public String getPACIENTE () {
					return this.PACIENTE;
				}

				public Boolean PACIENTEIsNullable(){
				    return true;
				}
				public Boolean PACIENTEIsKey(){
				    return false;
				}
				public Integer PACIENTELength(){
				    return 400;
				}
				public Integer PACIENTEPrecision(){
				    return 0;
				}
				public String PACIENTEDefault(){
				
					return null;
				
				}
				public String PACIENTEComment(){
				
				    return "";
				
				}
				public String PACIENTEPattern(){
				
					return "";
				
				}
				public String PACIENTEOriginalDbColumnName(){
				
					return "PACIENTE";
				
				}

				
			    public String CODIGO;

				public String getCODIGO () {
					return this.CODIGO;
				}

				public Boolean CODIGOIsNullable(){
				    return true;
				}
				public Boolean CODIGOIsKey(){
				    return false;
				}
				public Integer CODIGOLength(){
				    return 400;
				}
				public Integer CODIGOPrecision(){
				    return 0;
				}
				public String CODIGODefault(){
				
					return null;
				
				}
				public String CODIGOComment(){
				
				    return "";
				
				}
				public String CODIGOPattern(){
				
					return "";
				
				}
				public String CODIGOOriginalDbColumnName(){
				
					return "CODIGO";
				
				}

				
			    public String CONCEPTO_GLOSA;

				public String getCONCEPTO_GLOSA () {
					return this.CONCEPTO_GLOSA;
				}

				public Boolean CONCEPTO_GLOSAIsNullable(){
				    return false;
				}
				public Boolean CONCEPTO_GLOSAIsKey(){
				    return false;
				}
				public Integer CONCEPTO_GLOSALength(){
				    return 2000;
				}
				public Integer CONCEPTO_GLOSAPrecision(){
				    return 0;
				}
				public String CONCEPTO_GLOSADefault(){
				
					return null;
				
				}
				public String CONCEPTO_GLOSAComment(){
				
				    return "";
				
				}
				public String CONCEPTO_GLOSAPattern(){
				
					return "";
				
				}
				public String CONCEPTO_GLOSAOriginalDbColumnName(){
				
					return "CONCEPTO_GLOSA";
				
				}

				
			    public String DESCRIPCION_GLOSA;

				public String getDESCRIPCION_GLOSA () {
					return this.DESCRIPCION_GLOSA;
				}

				public Boolean DESCRIPCION_GLOSAIsNullable(){
				    return false;
				}
				public Boolean DESCRIPCION_GLOSAIsKey(){
				    return false;
				}
				public Integer DESCRIPCION_GLOSALength(){
				    return 4000;
				}
				public Integer DESCRIPCION_GLOSAPrecision(){
				    return 0;
				}
				public String DESCRIPCION_GLOSADefault(){
				
					return null;
				
				}
				public String DESCRIPCION_GLOSAComment(){
				
				    return "";
				
				}
				public String DESCRIPCION_GLOSAPattern(){
				
					return "";
				
				}
				public String DESCRIPCION_GLOSAOriginalDbColumnName(){
				
					return "DESCRIPCION_GLOSA";
				
				}

				
			    public String OBCONCILIACION;

				public String getOBCONCILIACION () {
					return this.OBCONCILIACION;
				}

				public Boolean OBCONCILIACIONIsNullable(){
				    return true;
				}
				public Boolean OBCONCILIACIONIsKey(){
				    return false;
				}
				public Integer OBCONCILIACIONLength(){
				    return 4000;
				}
				public Integer OBCONCILIACIONPrecision(){
				    return 0;
				}
				public String OBCONCILIACIONDefault(){
				
					return null;
				
				}
				public String OBCONCILIACIONComment(){
				
				    return "";
				
				}
				public String OBCONCILIACIONPattern(){
				
					return "";
				
				}
				public String OBCONCILIACIONOriginalDbColumnName(){
				
					return "OBCONCILIACION";
				
				}

				
			    public BigDecimal VGLOSADO;

				public BigDecimal getVGLOSADO () {
					return this.VGLOSADO;
				}

				public Boolean VGLOSADOIsNullable(){
				    return true;
				}
				public Boolean VGLOSADOIsKey(){
				    return false;
				}
				public Integer VGLOSADOLength(){
				    return 0;
				}
				public Integer VGLOSADOPrecision(){
				    return 0;
				}
				public String VGLOSADODefault(){
				
					return "";
				
				}
				public String VGLOSADOComment(){
				
				    return "";
				
				}
				public String VGLOSADOPattern(){
				
					return "";
				
				}
				public String VGLOSADOOriginalDbColumnName(){
				
					return "VGLOSADO";
				
				}

				
			    public BigDecimal VACEPTADO;

				public BigDecimal getVACEPTADO () {
					return this.VACEPTADO;
				}

				public Boolean VACEPTADOIsNullable(){
				    return true;
				}
				public Boolean VACEPTADOIsKey(){
				    return false;
				}
				public Integer VACEPTADOLength(){
				    return 0;
				}
				public Integer VACEPTADOPrecision(){
				    return 0;
				}
				public String VACEPTADODefault(){
				
					return "";
				
				}
				public String VACEPTADOComment(){
				
				    return "";
				
				}
				public String VACEPTADOPattern(){
				
					return "";
				
				}
				public String VACEPTADOOriginalDbColumnName(){
				
					return "VACEPTADO";
				
				}

				
			    public BigDecimal VSOPORTADO;

				public BigDecimal getVSOPORTADO () {
					return this.VSOPORTADO;
				}

				public Boolean VSOPORTADOIsNullable(){
				    return true;
				}
				public Boolean VSOPORTADOIsKey(){
				    return false;
				}
				public Integer VSOPORTADOLength(){
				    return 0;
				}
				public Integer VSOPORTADOPrecision(){
				    return 0;
				}
				public String VSOPORTADODefault(){
				
					return "";
				
				}
				public String VSOPORTADOComment(){
				
				    return "";
				
				}
				public String VSOPORTADOPattern(){
				
					return "";
				
				}
				public String VSOPORTADOOriginalDbColumnName(){
				
					return "VSOPORTADO";
				
				}

				
			    public BigDecimal VNETO;

				public BigDecimal getVNETO () {
					return this.VNETO;
				}

				public Boolean VNETOIsNullable(){
				    return true;
				}
				public Boolean VNETOIsKey(){
				    return false;
				}
				public Integer VNETOLength(){
				    return 0;
				}
				public Integer VNETOPrecision(){
				    return 0;
				}
				public String VNETODefault(){
				
					return "";
				
				}
				public String VNETOComment(){
				
				    return "";
				
				}
				public String VNETOPattern(){
				
					return "";
				
				}
				public String VNETOOriginalDbColumnName(){
				
					return "VNETO";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_ACTAS_Actas.length) {
				if(length < 1024 && commonByteArray_ACM_ACTAS_Actas.length == 0) {
   					commonByteArray_ACM_ACTAS_Actas = new byte[1024];
				} else {
   					commonByteArray_ACM_ACTAS_Actas = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ACM_ACTAS_Actas, 0, length);
			strReturn = new String(commonByteArray_ACM_ACTAS_Actas, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_ACTAS_Actas.length) {
				if(length < 1024 && commonByteArray_ACM_ACTAS_Actas.length == 0) {
   					commonByteArray_ACM_ACTAS_Actas = new byte[1024];
				} else {
   					commonByteArray_ACM_ACTAS_Actas = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_ACM_ACTAS_Actas, 0, length);
			strReturn = new String(commonByteArray_ACM_ACTAS_Actas, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ACM_ACTAS_Actas) {

        	try {

        		int length = 0;
		
					this.NUMERO_FACTURA = readString(dis);
					
					this.DOCUMENTO = readString(dis);
					
					this.PACIENTE = readString(dis);
					
					this.CODIGO = readString(dis);
					
					this.CONCEPTO_GLOSA = readString(dis);
					
					this.DESCRIPCION_GLOSA = readString(dis);
					
					this.OBCONCILIACION = readString(dis);
					
						this.VGLOSADO = (BigDecimal) dis.readObject();
					
						this.VACEPTADO = (BigDecimal) dis.readObject();
					
						this.VSOPORTADO = (BigDecimal) dis.readObject();
					
						this.VNETO = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ACM_ACTAS_Actas) {

        	try {

        		int length = 0;
		
					this.NUMERO_FACTURA = readString(dis);
					
					this.DOCUMENTO = readString(dis);
					
					this.PACIENTE = readString(dis);
					
					this.CODIGO = readString(dis);
					
					this.CONCEPTO_GLOSA = readString(dis);
					
					this.DESCRIPCION_GLOSA = readString(dis);
					
					this.OBCONCILIACION = readString(dis);
					
						this.VGLOSADO = (BigDecimal) dis.readObject();
					
						this.VACEPTADO = (BigDecimal) dis.readObject();
					
						this.VSOPORTADO = (BigDecimal) dis.readObject();
					
						this.VNETO = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.NUMERO_FACTURA,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// String
				
						writeString(this.PACIENTE,dos);
					
					// String
				
						writeString(this.CODIGO,dos);
					
					// String
				
						writeString(this.CONCEPTO_GLOSA,dos);
					
					// String
				
						writeString(this.DESCRIPCION_GLOSA,dos);
					
					// String
				
						writeString(this.OBCONCILIACION,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VGLOSADO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VACEPTADO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VSOPORTADO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VNETO);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.NUMERO_FACTURA,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// String
				
						writeString(this.PACIENTE,dos);
					
					// String
				
						writeString(this.CODIGO,dos);
					
					// String
				
						writeString(this.CONCEPTO_GLOSA,dos);
					
					// String
				
						writeString(this.DESCRIPCION_GLOSA,dos);
					
					// String
				
						writeString(this.OBCONCILIACION,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VGLOSADO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VACEPTADO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VSOPORTADO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VNETO);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("NUMERO_FACTURA="+NUMERO_FACTURA);
		sb.append(",DOCUMENTO="+DOCUMENTO);
		sb.append(",PACIENTE="+PACIENTE);
		sb.append(",CODIGO="+CODIGO);
		sb.append(",CONCEPTO_GLOSA="+CONCEPTO_GLOSA);
		sb.append(",DESCRIPCION_GLOSA="+DESCRIPCION_GLOSA);
		sb.append(",OBCONCILIACION="+OBCONCILIACION);
		sb.append(",VGLOSADO="+String.valueOf(VGLOSADO));
		sb.append(",VACEPTADO="+String.valueOf(VACEPTADO));
		sb.append(",VSOPORTADO="+String.valueOf(VSOPORTADO));
		sb.append(",VNETO="+String.valueOf(VNETO));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row15Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row14Struct implements routines.system.IPersistableRow<row14Struct> {
    final static byte[] commonByteArrayLock_ACM_ACTAS_Actas = new byte[0];
    static byte[] commonByteArray_ACM_ACTAS_Actas = new byte[0];

	
			    public BigDecimal ID;

				public BigDecimal getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return false;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return 0;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return "";
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public String NUMERO_FACTURA;

				public String getNUMERO_FACTURA () {
					return this.NUMERO_FACTURA;
				}

				public Boolean NUMERO_FACTURAIsNullable(){
				    return true;
				}
				public Boolean NUMERO_FACTURAIsKey(){
				    return false;
				}
				public Integer NUMERO_FACTURALength(){
				    return 101;
				}
				public Integer NUMERO_FACTURAPrecision(){
				    return 0;
				}
				public String NUMERO_FACTURADefault(){
				
					return null;
				
				}
				public String NUMERO_FACTURAComment(){
				
				    return "";
				
				}
				public String NUMERO_FACTURAPattern(){
				
					return "";
				
				}
				public String NUMERO_FACTURAOriginalDbColumnName(){
				
					return "NUMERO_FACTURA";
				
				}

				
			    public String DOCUMENTO;

				public String getDOCUMENTO () {
					return this.DOCUMENTO;
				}

				public Boolean DOCUMENTOIsNullable(){
				    return true;
				}
				public Boolean DOCUMENTOIsKey(){
				    return false;
				}
				public Integer DOCUMENTOLength(){
				    return 50;
				}
				public Integer DOCUMENTOPrecision(){
				    return 0;
				}
				public String DOCUMENTODefault(){
				
					return null;
				
				}
				public String DOCUMENTOComment(){
				
				    return "";
				
				}
				public String DOCUMENTOPattern(){
				
					return "";
				
				}
				public String DOCUMENTOOriginalDbColumnName(){
				
					return "DOCUMENTO";
				
				}

				
			    public BigDecimal TDOCUMENTO;

				public BigDecimal getTDOCUMENTO () {
					return this.TDOCUMENTO;
				}

				public Boolean TDOCUMENTOIsNullable(){
				    return true;
				}
				public Boolean TDOCUMENTOIsKey(){
				    return false;
				}
				public Integer TDOCUMENTOLength(){
				    return 0;
				}
				public Integer TDOCUMENTOPrecision(){
				    return 0;
				}
				public String TDOCUMENTODefault(){
				
					return "";
				
				}
				public String TDOCUMENTOComment(){
				
				    return "";
				
				}
				public String TDOCUMENTOPattern(){
				
					return "";
				
				}
				public String TDOCUMENTOOriginalDbColumnName(){
				
					return "TDOCUMENTO";
				
				}

				
			    public String PACIENTE;

				public String getPACIENTE () {
					return this.PACIENTE;
				}

				public Boolean PACIENTEIsNullable(){
				    return true;
				}
				public Boolean PACIENTEIsKey(){
				    return false;
				}
				public Integer PACIENTELength(){
				    return 400;
				}
				public Integer PACIENTEPrecision(){
				    return 0;
				}
				public String PACIENTEDefault(){
				
					return null;
				
				}
				public String PACIENTEComment(){
				
				    return "";
				
				}
				public String PACIENTEPattern(){
				
					return "";
				
				}
				public String PACIENTEOriginalDbColumnName(){
				
					return "PACIENTE";
				
				}

				
			    public String CODIGO;

				public String getCODIGO () {
					return this.CODIGO;
				}

				public Boolean CODIGOIsNullable(){
				    return true;
				}
				public Boolean CODIGOIsKey(){
				    return false;
				}
				public Integer CODIGOLength(){
				    return 400;
				}
				public Integer CODIGOPrecision(){
				    return 0;
				}
				public String CODIGODefault(){
				
					return null;
				
				}
				public String CODIGOComment(){
				
				    return "";
				
				}
				public String CODIGOPattern(){
				
					return "";
				
				}
				public String CODIGOOriginalDbColumnName(){
				
					return "CODIGO";
				
				}

				
			    public String CONCEPTO_GLOSA;

				public String getCONCEPTO_GLOSA () {
					return this.CONCEPTO_GLOSA;
				}

				public Boolean CONCEPTO_GLOSAIsNullable(){
				    return false;
				}
				public Boolean CONCEPTO_GLOSAIsKey(){
				    return false;
				}
				public Integer CONCEPTO_GLOSALength(){
				    return 2000;
				}
				public Integer CONCEPTO_GLOSAPrecision(){
				    return 0;
				}
				public String CONCEPTO_GLOSADefault(){
				
					return null;
				
				}
				public String CONCEPTO_GLOSAComment(){
				
				    return "";
				
				}
				public String CONCEPTO_GLOSAPattern(){
				
					return "";
				
				}
				public String CONCEPTO_GLOSAOriginalDbColumnName(){
				
					return "CONCEPTO_GLOSA";
				
				}

				
			    public String DESCRIPCION_GLOSA;

				public String getDESCRIPCION_GLOSA () {
					return this.DESCRIPCION_GLOSA;
				}

				public Boolean DESCRIPCION_GLOSAIsNullable(){
				    return false;
				}
				public Boolean DESCRIPCION_GLOSAIsKey(){
				    return false;
				}
				public Integer DESCRIPCION_GLOSALength(){
				    return 4000;
				}
				public Integer DESCRIPCION_GLOSAPrecision(){
				    return 0;
				}
				public String DESCRIPCION_GLOSADefault(){
				
					return null;
				
				}
				public String DESCRIPCION_GLOSAComment(){
				
				    return "";
				
				}
				public String DESCRIPCION_GLOSAPattern(){
				
					return "";
				
				}
				public String DESCRIPCION_GLOSAOriginalDbColumnName(){
				
					return "DESCRIPCION_GLOSA";
				
				}

				
			    public String OBCONCILIACION;

				public String getOBCONCILIACION () {
					return this.OBCONCILIACION;
				}

				public Boolean OBCONCILIACIONIsNullable(){
				    return true;
				}
				public Boolean OBCONCILIACIONIsKey(){
				    return false;
				}
				public Integer OBCONCILIACIONLength(){
				    return 4000;
				}
				public Integer OBCONCILIACIONPrecision(){
				    return 0;
				}
				public String OBCONCILIACIONDefault(){
				
					return null;
				
				}
				public String OBCONCILIACIONComment(){
				
				    return "";
				
				}
				public String OBCONCILIACIONPattern(){
				
					return "";
				
				}
				public String OBCONCILIACIONOriginalDbColumnName(){
				
					return "OBCONCILIACION";
				
				}

				
			    public BigDecimal VGLOSADO;

				public BigDecimal getVGLOSADO () {
					return this.VGLOSADO;
				}

				public Boolean VGLOSADOIsNullable(){
				    return true;
				}
				public Boolean VGLOSADOIsKey(){
				    return false;
				}
				public Integer VGLOSADOLength(){
				    return 0;
				}
				public Integer VGLOSADOPrecision(){
				    return 0;
				}
				public String VGLOSADODefault(){
				
					return "";
				
				}
				public String VGLOSADOComment(){
				
				    return "";
				
				}
				public String VGLOSADOPattern(){
				
					return "";
				
				}
				public String VGLOSADOOriginalDbColumnName(){
				
					return "VGLOSADO";
				
				}

				
			    public BigDecimal VACEPTADO;

				public BigDecimal getVACEPTADO () {
					return this.VACEPTADO;
				}

				public Boolean VACEPTADOIsNullable(){
				    return true;
				}
				public Boolean VACEPTADOIsKey(){
				    return false;
				}
				public Integer VACEPTADOLength(){
				    return 0;
				}
				public Integer VACEPTADOPrecision(){
				    return 0;
				}
				public String VACEPTADODefault(){
				
					return "";
				
				}
				public String VACEPTADOComment(){
				
				    return "";
				
				}
				public String VACEPTADOPattern(){
				
					return "";
				
				}
				public String VACEPTADOOriginalDbColumnName(){
				
					return "VACEPTADO";
				
				}

				
			    public BigDecimal VSOPORTADO;

				public BigDecimal getVSOPORTADO () {
					return this.VSOPORTADO;
				}

				public Boolean VSOPORTADOIsNullable(){
				    return true;
				}
				public Boolean VSOPORTADOIsKey(){
				    return false;
				}
				public Integer VSOPORTADOLength(){
				    return 0;
				}
				public Integer VSOPORTADOPrecision(){
				    return 0;
				}
				public String VSOPORTADODefault(){
				
					return "";
				
				}
				public String VSOPORTADOComment(){
				
				    return "";
				
				}
				public String VSOPORTADOPattern(){
				
					return "";
				
				}
				public String VSOPORTADOOriginalDbColumnName(){
				
					return "VSOPORTADO";
				
				}

				
			    public BigDecimal VNETO;

				public BigDecimal getVNETO () {
					return this.VNETO;
				}

				public Boolean VNETOIsNullable(){
				    return true;
				}
				public Boolean VNETOIsKey(){
				    return false;
				}
				public Integer VNETOLength(){
				    return 0;
				}
				public Integer VNETOPrecision(){
				    return 0;
				}
				public String VNETODefault(){
				
					return "";
				
				}
				public String VNETOComment(){
				
				    return "";
				
				}
				public String VNETOPattern(){
				
					return "";
				
				}
				public String VNETOOriginalDbColumnName(){
				
					return "VNETO";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_ACTAS_Actas.length) {
				if(length < 1024 && commonByteArray_ACM_ACTAS_Actas.length == 0) {
   					commonByteArray_ACM_ACTAS_Actas = new byte[1024];
				} else {
   					commonByteArray_ACM_ACTAS_Actas = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ACM_ACTAS_Actas, 0, length);
			strReturn = new String(commonByteArray_ACM_ACTAS_Actas, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_ACTAS_Actas.length) {
				if(length < 1024 && commonByteArray_ACM_ACTAS_Actas.length == 0) {
   					commonByteArray_ACM_ACTAS_Actas = new byte[1024];
				} else {
   					commonByteArray_ACM_ACTAS_Actas = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_ACM_ACTAS_Actas, 0, length);
			strReturn = new String(commonByteArray_ACM_ACTAS_Actas, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ACM_ACTAS_Actas) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
					this.NUMERO_FACTURA = readString(dis);
					
					this.DOCUMENTO = readString(dis);
					
						this.TDOCUMENTO = (BigDecimal) dis.readObject();
					
					this.PACIENTE = readString(dis);
					
					this.CODIGO = readString(dis);
					
					this.CONCEPTO_GLOSA = readString(dis);
					
					this.DESCRIPCION_GLOSA = readString(dis);
					
					this.OBCONCILIACION = readString(dis);
					
						this.VGLOSADO = (BigDecimal) dis.readObject();
					
						this.VACEPTADO = (BigDecimal) dis.readObject();
					
						this.VSOPORTADO = (BigDecimal) dis.readObject();
					
						this.VNETO = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ACM_ACTAS_Actas) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
					this.NUMERO_FACTURA = readString(dis);
					
					this.DOCUMENTO = readString(dis);
					
						this.TDOCUMENTO = (BigDecimal) dis.readObject();
					
					this.PACIENTE = readString(dis);
					
					this.CODIGO = readString(dis);
					
					this.CONCEPTO_GLOSA = readString(dis);
					
					this.DESCRIPCION_GLOSA = readString(dis);
					
					this.OBCONCILIACION = readString(dis);
					
						this.VGLOSADO = (BigDecimal) dis.readObject();
					
						this.VACEPTADO = (BigDecimal) dis.readObject();
					
						this.VSOPORTADO = (BigDecimal) dis.readObject();
					
						this.VNETO = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.ID);
					
					// String
				
						writeString(this.NUMERO_FACTURA,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TDOCUMENTO);
					
					// String
				
						writeString(this.PACIENTE,dos);
					
					// String
				
						writeString(this.CODIGO,dos);
					
					// String
				
						writeString(this.CONCEPTO_GLOSA,dos);
					
					// String
				
						writeString(this.DESCRIPCION_GLOSA,dos);
					
					// String
				
						writeString(this.OBCONCILIACION,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VGLOSADO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VACEPTADO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VSOPORTADO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VNETO);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ID);
					
					// String
				
						writeString(this.NUMERO_FACTURA,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TDOCUMENTO);
					
					// String
				
						writeString(this.PACIENTE,dos);
					
					// String
				
						writeString(this.CODIGO,dos);
					
					// String
				
						writeString(this.CONCEPTO_GLOSA,dos);
					
					// String
				
						writeString(this.DESCRIPCION_GLOSA,dos);
					
					// String
				
						writeString(this.OBCONCILIACION,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VGLOSADO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VACEPTADO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VSOPORTADO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VNETO);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",NUMERO_FACTURA="+NUMERO_FACTURA);
		sb.append(",DOCUMENTO="+DOCUMENTO);
		sb.append(",TDOCUMENTO="+String.valueOf(TDOCUMENTO));
		sb.append(",PACIENTE="+PACIENTE);
		sb.append(",CODIGO="+CODIGO);
		sb.append(",CONCEPTO_GLOSA="+CONCEPTO_GLOSA);
		sb.append(",DESCRIPCION_GLOSA="+DESCRIPCION_GLOSA);
		sb.append(",OBCONCILIACION="+OBCONCILIACION);
		sb.append(",VGLOSADO="+String.valueOf(VGLOSADO));
		sb.append(",VACEPTADO="+String.valueOf(VACEPTADO));
		sb.append(",VSOPORTADO="+String.valueOf(VSOPORTADO));
		sb.append(",VNETO="+String.valueOf(VNETO));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row14Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_5Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_5_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row14Struct row14 = new row14Struct();
row15Struct row15 = new row15Struct();
out4Struct out4 = new out4Struct();






	
	/**
	 * [tFileOutputExcel_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputExcel_5", false);
		start_Hash.put("tFileOutputExcel_5", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputExcel_5";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"out4");
					}
				
		int tos_count_tFileOutputExcel_5 = 0;
		


		
		int columnIndex_tFileOutputExcel_5 = 0;
		boolean headerIsInserted_tFileOutputExcel_5 = false;
		
		
		String fileName_tFileOutputExcel_5=context.fileSystem_URL;
		int nb_line_tFileOutputExcel_5 = 0;
		org.talend.ExcelTool xlsxTool_tFileOutputExcel_5 = new org.talend.ExcelTool();
		xlsxTool_tFileOutputExcel_5.setUseSharedStringTable(false);
		
    xlsxTool_tFileOutputExcel_5.setTruncateExceedingCharacters(false);
		xlsxTool_tFileOutputExcel_5.setSheet("main");
		xlsxTool_tFileOutputExcel_5.setAppend(true,true, false);
		xlsxTool_tFileOutputExcel_5.setRecalculateFormula(false);
		xlsxTool_tFileOutputExcel_5.setXY(false,0,0,false);
		
		java.util.concurrent.ConcurrentHashMap<java.lang.Object, java.lang.Object> chm_tFileOutputExcel_5 = (java.util.concurrent.ConcurrentHashMap<java.lang.Object, java.lang.Object>) globalMap.get("concurrentHashMap");
		java.lang.Object lockObj_tFileOutputExcel_5 = chm_tFileOutputExcel_5.computeIfAbsent("EXCEL_OUTPUT_LOCK_OBJ_tFileOutputExcel_5", k -> new Object());
		synchronized (lockObj_tFileOutputExcel_5) {
			
				xlsxTool_tFileOutputExcel_5.prepareXlsxFile(fileName_tFileOutputExcel_5);
			
		}
		
		xlsxTool_tFileOutputExcel_5.setFont("ARIAL");
		

 



/**
 * [tFileOutputExcel_5 begin ] stop
 */



	
	/**
	 * [tMap_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_4", false);
		start_Hash.put("tMap_4", System.currentTimeMillis());
		
	
	currentComponent="tMap_4";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row15");
					}
				
		int tos_count_tMap_4 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_4__Struct  {
}
Var__tMap_4__Struct Var__tMap_4 = new Var__tMap_4__Struct();
// ###############################

// ###############################
// # Outputs initialization
out4Struct out4_tmp = new out4Struct();
// ###############################

        
        



        









 



/**
 * [tMap_4 begin ] stop
 */



	
	/**
	 * [tJavaRow_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaRow_4", false);
		start_Hash.put("tJavaRow_4", System.currentTimeMillis());
		
	
	currentComponent="tJavaRow_4";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row14");
					}
				
		int tos_count_tJavaRow_4 = 0;
		

int nb_line_tJavaRow_4 = 0;

 



/**
 * [tJavaRow_4 begin ] stop
 */



	
	/**
	 * [tOracleInput_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_5", false);
		start_Hash.put("tOracleInput_5", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_5";
	
	
		int tos_count_tOracleInput_5 = 0;
		
	


	
		    int nb_line_tOracleInput_5 = 0;
		    java.sql.Connection conn_tOracleInput_5 = null;
				conn_tOracleInput_5 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");
				
                boolean isTimeZoneNull_tOracleInput_5 = false;
				boolean isConnectionWrapped_tOracleInput_5 = !(conn_tOracleInput_5 instanceof oracle.jdbc.OracleConnection) && conn_tOracleInput_5.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tOracleInput_5 = null;
                if (isConnectionWrapped_tOracleInput_5) {
					unwrappedOraConn_tOracleInput_5 = conn_tOracleInput_5.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tOracleInput_5 != null) {
                        isTimeZoneNull_tOracleInput_5 = (unwrappedOraConn_tOracleInput_5.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tOracleInput_5 = (((oracle.jdbc.OracleConnection)conn_tOracleInput_5).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tOracleInput_5) {
					java.sql.Statement stmtGetTZ_tOracleInput_5 = conn_tOracleInput_5.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_5 = stmtGetTZ_tOracleInput_5.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_5 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tOracleInput_5.next()) {
						sessionTimezone_tOracleInput_5 = rsGetTZ_tOracleInput_5.getString(1);
					}
					if (isConnectionWrapped_tOracleInput_5 && unwrappedOraConn_tOracleInput_5 != null) {
                        unwrappedOraConn_tOracleInput_5.setSessionTimeZone(sessionTimezone_tOracleInput_5);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_5).setSessionTimeZone(sessionTimezone_tOracleInput_5);
                    }
				}
			
		    
			java.sql.Statement stmt_tOracleInput_5 = conn_tOracleInput_5.createStatement();

		    String dbquery_tOracleInput_5 = "SELECT\n    AF.ID,\n    AF.PREFIJO || AF.NUMERO AS NUMERO_FACTURA,\n    NVL(DS.TDOCUMENTOS_ID, DF.TDOCUMENTOS_ID) || ' "
+"' || NVL(DS.DOCUMENTO, DF.DOCUMENTO) AS DOCUMENTO,\n    NVL(DS.TDOCUMENTOS_ID, DF.TDOCUMENTOS_ID) AS TDOCUMENTO,\n    TR"
+"IM(GP.PRIMER_NOMBRE)||COALESCE(TRIM(GP.SEGUNDO_NOMBRE),' ')||TRIM(GP.PRIMER_APELLIDO)||TRIM(GP.SEGUNDO_APELLIDO) AS PACI"
+"ENTE,\n    ACG.CODIGO || ACE.CODIGO AS CODIGO,\n    AC.DESCRIPCION AS CONCEPTO_GLOSA,\n    AG.OBSERVACION AS DESCRIPCION"
+"_GLOSA,\n    HG.OBSERVACIONES AS OBCONCILIACION,\n    HG.VGLOSADO,\n    HG.VACEPTADO,\n    HG.VSOPORTADO,\n    HG.VSOPOR"
+"TADO AS VNETO\nFROM\n    ACM_HGLOSASCAUSADAS HG\n    INNER JOIN ACM_GLOSASCAUSADAS      AG   ON  AG.ID = HG.GLOSASCAUSAD"
+"AS_ID\n    LEFT  JOIN ACM_DFACTURASERVICIO    DS   ON  DS.ID = AG.DFACTURASERVICIO_ID\n    LEFT  JOIN ACM_DFACTURAFORMUL"
+"ACION DF   ON  DF.ID = AG.DFACTURAFORMULACION_ID\n    LEFT  JOIN GEN_PERSONAS            GP   ON  GP.DOCUMENTO = NVL(DS."
+"DOCUMENTO, DF.DOCUMENTO)   AND  GP.TDOCUMENTOS_ID = NVL(DS.TDOCUMENTOS_ID, DF.TDOCUMENTOS_ID)\n    INNER JOIN ACM_CAUSAL"
+"GLOSAS        AC   ON  AC.ID = AG.CAUSALGLOSAS_ID   \n    INNER JOIN ACM_CONCEPTOS           ACG  ON  ACG.ID = AC.CONCEP"
+"TOGENERAL_ID      AND  ACG.TCONCEPTO = 'GENERAL'      AND  ACG.ESTADO = 'Activo'\n    INNER JOIN ACM_CONCEPTOS          "
+" ACE  ON  ACE.ID = AC.CONCEPTOESPECIFICO_ID  AND  ACE.TCONCEPTO = 'ESPECIFICO'  AND  ACE.ESTADO = 'Activo'\n    INNER JO"
+"IN ACM_ETAPASNORMATIVIDAD  EN   ON  EN.ID = HG.ETAPASNORMATIVIDAD_ID\n    INNER JOIN ACM_FACTURA             AF   ON  AF"
+".ID = HG.FACTURA_ID \n    INNER JOIN ACM_HAUDITORIAS         HA   ON  HA.ID = HG.HAUDITORIAS_ID               \nWHERE HG"
+".HAUDITORIAS_ID = '"+ context.HAUDITORIA_ID + "'\nAND HG.ESTREGISTRO_ID = 1\nAND HG.ESTADO = 'Revisada'\nAND EN.ESTREGISTRO_ID = 1\nAND AF.ESTREGISTRO_ID = 1\nORDER B"
+"Y NUMERO_FACTURA, DOCUMENTO";
		    

		    globalMap.put("tOracleInput_5_QUERY",dbquery_tOracleInput_5);

		    java.sql.ResultSet rs_tOracleInput_5 = null;

		    try {
		    	rs_tOracleInput_5 = stmt_tOracleInput_5.executeQuery(dbquery_tOracleInput_5);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_5 = rs_tOracleInput_5.getMetaData();
		    	int colQtyInRs_tOracleInput_5 = rsmd_tOracleInput_5.getColumnCount();

		    String tmpContent_tOracleInput_5 = null;
		    
		    
		    while (rs_tOracleInput_5.next()) {
		        nb_line_tOracleInput_5++;
		        
							if(colQtyInRs_tOracleInput_5 < 1) {
								row14.ID = null;
							} else {
		                          
					if(rs_tOracleInput_5.getObject(1) != null) {
						row14.ID = rs_tOracleInput_5.getBigDecimal(1);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_5 < 2) {
								row14.NUMERO_FACTURA = null;
							} else {
	                         		
        	row14.NUMERO_FACTURA = routines.system.JDBCUtil.getString(rs_tOracleInput_5, 2, false);
		                    }
							if(colQtyInRs_tOracleInput_5 < 3) {
								row14.DOCUMENTO = null;
							} else {
	                         		
        	row14.DOCUMENTO = routines.system.JDBCUtil.getString(rs_tOracleInput_5, 3, false);
		                    }
							if(colQtyInRs_tOracleInput_5 < 4) {
								row14.TDOCUMENTO = null;
							} else {
		                          
					if(rs_tOracleInput_5.getObject(4) != null) {
						row14.TDOCUMENTO = rs_tOracleInput_5.getBigDecimal(4);
					} else {
				
						row14.TDOCUMENTO = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_5 < 5) {
								row14.PACIENTE = null;
							} else {
	                         		
        	row14.PACIENTE = routines.system.JDBCUtil.getString(rs_tOracleInput_5, 5, false);
		                    }
							if(colQtyInRs_tOracleInput_5 < 6) {
								row14.CODIGO = null;
							} else {
	                         		
        	row14.CODIGO = routines.system.JDBCUtil.getString(rs_tOracleInput_5, 6, false);
		                    }
							if(colQtyInRs_tOracleInput_5 < 7) {
								row14.CONCEPTO_GLOSA = null;
							} else {
	                         		
        	row14.CONCEPTO_GLOSA = routines.system.JDBCUtil.getString(rs_tOracleInput_5, 7, false);
		                    }
							if(colQtyInRs_tOracleInput_5 < 8) {
								row14.DESCRIPCION_GLOSA = null;
							} else {
	                         		
        	row14.DESCRIPCION_GLOSA = routines.system.JDBCUtil.getString(rs_tOracleInput_5, 8, false);
		                    }
							if(colQtyInRs_tOracleInput_5 < 9) {
								row14.OBCONCILIACION = null;
							} else {
	                         		
        	row14.OBCONCILIACION = routines.system.JDBCUtil.getString(rs_tOracleInput_5, 9, false);
		                    }
							if(colQtyInRs_tOracleInput_5 < 10) {
								row14.VGLOSADO = null;
							} else {
		                          
					if(rs_tOracleInput_5.getObject(10) != null) {
						row14.VGLOSADO = rs_tOracleInput_5.getBigDecimal(10);
					} else {
				
						row14.VGLOSADO = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_5 < 11) {
								row14.VACEPTADO = null;
							} else {
		                          
					if(rs_tOracleInput_5.getObject(11) != null) {
						row14.VACEPTADO = rs_tOracleInput_5.getBigDecimal(11);
					} else {
				
						row14.VACEPTADO = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_5 < 12) {
								row14.VSOPORTADO = null;
							} else {
		                          
					if(rs_tOracleInput_5.getObject(12) != null) {
						row14.VSOPORTADO = rs_tOracleInput_5.getBigDecimal(12);
					} else {
				
						row14.VSOPORTADO = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_5 < 13) {
								row14.VNETO = null;
							} else {
		                          
					if(rs_tOracleInput_5.getObject(13) != null) {
						row14.VNETO = rs_tOracleInput_5.getBigDecimal(13);
					} else {
				
						row14.VNETO = null;
					}
		                    }
					




 



/**
 * [tOracleInput_5 begin ] stop
 */
	
	/**
	 * [tOracleInput_5 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_5";
	
	

 


	tos_count_tOracleInput_5++;

/**
 * [tOracleInput_5 main ] stop
 */
	
	/**
	 * [tOracleInput_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_5";
	
	

 



/**
 * [tOracleInput_5 process_data_begin ] stop
 */

	
	/**
	 * [tJavaRow_4 main ] start
	 */

	

	
	
	currentComponent="tJavaRow_4";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row14"
						
						);
					}
					

    //Code generate according to input schema and output schema
row15.NUMERO_FACTURA = row14.NUMERO_FACTURA;
row15.DOCUMENTO = row14.DOCUMENTO;
row15.PACIENTE = row14.PACIENTE;
row15.CODIGO = row14.CODIGO;
row15.CONCEPTO_GLOSA = row14.CONCEPTO_GLOSA;
row15.DESCRIPCION_GLOSA = row14.DESCRIPCION_GLOSA;
row15.OBCONCILIACION = row14.OBCONCILIACION;
row15.VGLOSADO = row14.VGLOSADO;
row15.VACEPTADO = row14.VACEPTADO;
row15.VSOPORTADO = row14.VSOPORTADO;
row15.VNETO = row14.VNETO;

// SE OBTIENE LOS TOTALES
context.VGLOSADO   = context.VGLOSADO.add(row15.VGLOSADO);
context.VACEPTADO  = context.VACEPTADO.add(row15.VACEPTADO);
context.VSOPORTADO = context.VSOPORTADO.add(row15.VSOPORTADO);
context.VNETO = context.VNETO.add(row15.VNETO);

    nb_line_tJavaRow_4++;   

 


	tos_count_tJavaRow_4++;

/**
 * [tJavaRow_4 main ] stop
 */
	
	/**
	 * [tJavaRow_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJavaRow_4";
	
	

 



/**
 * [tJavaRow_4 process_data_begin ] stop
 */

	
	/**
	 * [tMap_4 main ] start
	 */

	

	
	
	currentComponent="tMap_4";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row15"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_4 = false;
		
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_4 = false;
		boolean mainRowRejected_tMap_4 = false;
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_4__Struct Var = Var__tMap_4;// ###############################
        // ###############################
        // # Output tables

out4 = null;


// # Output table : 'out4'
out4_tmp.NUMERO_FACTURA = row15.NUMERO_FACTURA ;
out4_tmp.DOCUMENTO = row15.DOCUMENTO ;
out4_tmp.PACIENTE = row15.PACIENTE ;
out4_tmp.CODIGO = row15.CODIGO ;
out4_tmp.CONCEPTO_GLOSA = row15.CONCEPTO_GLOSA ;
out4_tmp.DESCRIPCION_GLOSA = row15.DESCRIPCION_GLOSA ;
out4_tmp.OBCONCILIACION = row15.OBCONCILIACION ;
out4_tmp.VGLOSADO = NumberFormat.getCurrencyInstance(Locale.US).format(row15.VGLOSADO ) ;
out4_tmp.VACEPTADO = NumberFormat.getCurrencyInstance(Locale.US).format(row15.VACEPTADO ) ;
out4_tmp.VSOPORTADO = NumberFormat.getCurrencyInstance(Locale.US).format(row15.VSOPORTADO ) ;
out4_tmp.VNETO = NumberFormat.getCurrencyInstance(Locale.US).format(row15.VNETO ) ;
out4 = out4_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_4 = false;










 


	tos_count_tMap_4++;

/**
 * [tMap_4 main ] stop
 */
	
	/**
	 * [tMap_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_4";
	
	

 



/**
 * [tMap_4 process_data_begin ] stop
 */
// Start of branch "out4"
if(out4 != null) { 



	
	/**
	 * [tFileOutputExcel_5 main ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_5";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"out4"
						
						);
					}
					

				xlsxTool_tFileOutputExcel_5.addRow();
									   				
	    				if(out4.NUMERO_FACTURA != null) {
    				
							xlsxTool_tFileOutputExcel_5.addCellValue(String.valueOf(out4.NUMERO_FACTURA));
	    				} else {
	    					xlsxTool_tFileOutputExcel_5.addCellNullValue();
	    				}
					
									   				
	    				if(out4.DOCUMENTO != null) {
    				
							xlsxTool_tFileOutputExcel_5.addCellValue(String.valueOf(out4.DOCUMENTO));
	    				} else {
	    					xlsxTool_tFileOutputExcel_5.addCellNullValue();
	    				}
					
									   				
	    				if(out4.PACIENTE != null) {
    				
							xlsxTool_tFileOutputExcel_5.addCellValue(String.valueOf(out4.PACIENTE));
	    				} else {
	    					xlsxTool_tFileOutputExcel_5.addCellNullValue();
	    				}
					
									   				
	    				if(out4.CODIGO != null) {
    				
							xlsxTool_tFileOutputExcel_5.addCellValue(String.valueOf(out4.CODIGO));
	    				} else {
	    					xlsxTool_tFileOutputExcel_5.addCellNullValue();
	    				}
					
									   				
	    				if(out4.CONCEPTO_GLOSA != null) {
    				
							xlsxTool_tFileOutputExcel_5.addCellValue(String.valueOf(out4.CONCEPTO_GLOSA));
	    				} else {
	    					xlsxTool_tFileOutputExcel_5.addCellNullValue();
	    				}
					
									   				
	    				if(out4.DESCRIPCION_GLOSA != null) {
    				
							xlsxTool_tFileOutputExcel_5.addCellValue(String.valueOf(out4.DESCRIPCION_GLOSA));
	    				} else {
	    					xlsxTool_tFileOutputExcel_5.addCellNullValue();
	    				}
					
									   				
	    				if(out4.OBCONCILIACION != null) {
    				
							xlsxTool_tFileOutputExcel_5.addCellValue(String.valueOf(out4.OBCONCILIACION));
	    				} else {
	    					xlsxTool_tFileOutputExcel_5.addCellNullValue();
	    				}
					
									   				
	    				if(out4.VGLOSADO != null) {
    				
							xlsxTool_tFileOutputExcel_5.addCellValue(String.valueOf(out4.VGLOSADO));
	    				} else {
	    					xlsxTool_tFileOutputExcel_5.addCellNullValue();
	    				}
					
									   				
	    				if(out4.VACEPTADO != null) {
    				
							xlsxTool_tFileOutputExcel_5.addCellValue(String.valueOf(out4.VACEPTADO));
	    				} else {
	    					xlsxTool_tFileOutputExcel_5.addCellNullValue();
	    				}
					
									   				
	    				if(out4.VSOPORTADO != null) {
    				
							xlsxTool_tFileOutputExcel_5.addCellValue(String.valueOf(out4.VSOPORTADO));
	    				} else {
	    					xlsxTool_tFileOutputExcel_5.addCellNullValue();
	    				}
					
									   				
	    				if(out4.VNETO != null) {
    				
							xlsxTool_tFileOutputExcel_5.addCellValue(String.valueOf(out4.VNETO));
	    				} else {
	    					xlsxTool_tFileOutputExcel_5.addCellNullValue();
	    				}
					
    			nb_line_tFileOutputExcel_5++;
				
 


	tos_count_tFileOutputExcel_5++;

/**
 * [tFileOutputExcel_5 main ] stop
 */
	
	/**
	 * [tFileOutputExcel_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_5";
	
	

 



/**
 * [tFileOutputExcel_5 process_data_begin ] stop
 */
	
	/**
	 * [tFileOutputExcel_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_5";
	
	

 



/**
 * [tFileOutputExcel_5 process_data_end ] stop
 */

} // End of branch "out4"




	
	/**
	 * [tMap_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_4";
	
	

 



/**
 * [tMap_4 process_data_end ] stop
 */



	
	/**
	 * [tJavaRow_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tJavaRow_4";
	
	

 



/**
 * [tJavaRow_4 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_5";
	
	

 



/**
 * [tOracleInput_5 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_5 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_5";
	
	

}
}finally{
	if (rs_tOracleInput_5 != null) {
		rs_tOracleInput_5.close();
	}
	if (stmt_tOracleInput_5 != null) {
		stmt_tOracleInput_5.close();
	}
}

globalMap.put("tOracleInput_5_NB_LINE",nb_line_tOracleInput_5);
 

ok_Hash.put("tOracleInput_5", true);
end_Hash.put("tOracleInput_5", System.currentTimeMillis());




/**
 * [tOracleInput_5 end ] stop
 */

	
	/**
	 * [tJavaRow_4 end ] start
	 */

	

	
	
	currentComponent="tJavaRow_4";
	
	

globalMap.put("tJavaRow_4_NB_LINE",nb_line_tJavaRow_4);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row14");
			  	}
			  	
 

ok_Hash.put("tJavaRow_4", true);
end_Hash.put("tJavaRow_4", System.currentTimeMillis());




/**
 * [tJavaRow_4 end ] stop
 */

	
	/**
	 * [tMap_4 end ] start
	 */

	

	
	
	currentComponent="tMap_4";
	
	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row15");
			  	}
			  	
 

ok_Hash.put("tMap_4", true);
end_Hash.put("tMap_4", System.currentTimeMillis());




/**
 * [tMap_4 end ] stop
 */

	
	/**
	 * [tFileOutputExcel_5 end ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_5";
	
	

									columnIndex_tFileOutputExcel_5 = 2;
								
					xlsxTool_tFileOutputExcel_5.setColAutoSize(columnIndex_tFileOutputExcel_5);
	
	
	
	
			xlsxTool_tFileOutputExcel_5.writeExcel(fileName_tFileOutputExcel_5,true);
	
		if(headerIsInserted_tFileOutputExcel_5 && nb_line_tFileOutputExcel_5 > 0){
			nb_line_tFileOutputExcel_5 = nb_line_tFileOutputExcel_5 -1;
		}
		globalMap.put("tFileOutputExcel_5_NB_LINE",nb_line_tFileOutputExcel_5);
		
		

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"out4");
			  	}
			  	
 

ok_Hash.put("tFileOutputExcel_5", true);
end_Hash.put("tFileOutputExcel_5", System.currentTimeMillis());




/**
 * [tFileOutputExcel_5 end ] stop
 */









				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tOracleInput_5:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk4", 0, "ok");
								} 
							
							tFixedFlowInput_4Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleInput_5 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_5";
	
	

 



/**
 * [tOracleInput_5 finally ] stop
 */

	
	/**
	 * [tJavaRow_4 finally ] start
	 */

	

	
	
	currentComponent="tJavaRow_4";
	
	

 



/**
 * [tJavaRow_4 finally ] stop
 */

	
	/**
	 * [tMap_4 finally ] start
	 */

	

	
	
	currentComponent="tMap_4";
	
	

 



/**
 * [tMap_4 finally ] stop
 */

	
	/**
	 * [tFileOutputExcel_5 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_5";
	
	

 



/**
 * [tFileOutputExcel_5 finally ] stop
 */









				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_5_SUBPROCESS_STATE", 1);
	}
	


public static class row16Struct implements routines.system.IPersistableRow<row16Struct> {
    final static byte[] commonByteArrayLock_ACM_ACTAS_Actas = new byte[0];
    static byte[] commonByteArray_ACM_ACTAS_Actas = new byte[0];

	
			    public String Column_A;

				public String getColumn_A () {
					return this.Column_A;
				}

				public Boolean Column_AIsNullable(){
				    return true;
				}
				public Boolean Column_AIsKey(){
				    return false;
				}
				public Integer Column_ALength(){
				    return null;
				}
				public Integer Column_APrecision(){
				    return null;
				}
				public String Column_ADefault(){
				
					return null;
				
				}
				public String Column_AComment(){
				
				    return "";
				
				}
				public String Column_APattern(){
				
					return "";
				
				}
				public String Column_AOriginalDbColumnName(){
				
					return "Column_A";
				
				}

				
			    public String Column_B;

				public String getColumn_B () {
					return this.Column_B;
				}

				public Boolean Column_BIsNullable(){
				    return true;
				}
				public Boolean Column_BIsKey(){
				    return false;
				}
				public Integer Column_BLength(){
				    return null;
				}
				public Integer Column_BPrecision(){
				    return null;
				}
				public String Column_BDefault(){
				
					return null;
				
				}
				public String Column_BComment(){
				
				    return "";
				
				}
				public String Column_BPattern(){
				
					return "";
				
				}
				public String Column_BOriginalDbColumnName(){
				
					return "Column_B";
				
				}

				
			    public String Column_C;

				public String getColumn_C () {
					return this.Column_C;
				}

				public Boolean Column_CIsNullable(){
				    return true;
				}
				public Boolean Column_CIsKey(){
				    return false;
				}
				public Integer Column_CLength(){
				    return null;
				}
				public Integer Column_CPrecision(){
				    return null;
				}
				public String Column_CDefault(){
				
					return null;
				
				}
				public String Column_CComment(){
				
				    return "";
				
				}
				public String Column_CPattern(){
				
					return "";
				
				}
				public String Column_COriginalDbColumnName(){
				
					return "Column_C";
				
				}

				
			    public String Column_D;

				public String getColumn_D () {
					return this.Column_D;
				}

				public Boolean Column_DIsNullable(){
				    return true;
				}
				public Boolean Column_DIsKey(){
				    return false;
				}
				public Integer Column_DLength(){
				    return null;
				}
				public Integer Column_DPrecision(){
				    return null;
				}
				public String Column_DDefault(){
				
					return null;
				
				}
				public String Column_DComment(){
				
				    return "";
				
				}
				public String Column_DPattern(){
				
					return "";
				
				}
				public String Column_DOriginalDbColumnName(){
				
					return "Column_D";
				
				}

				
			    public String Column_E;

				public String getColumn_E () {
					return this.Column_E;
				}

				public Boolean Column_EIsNullable(){
				    return true;
				}
				public Boolean Column_EIsKey(){
				    return false;
				}
				public Integer Column_ELength(){
				    return null;
				}
				public Integer Column_EPrecision(){
				    return null;
				}
				public String Column_EDefault(){
				
					return null;
				
				}
				public String Column_EComment(){
				
				    return "";
				
				}
				public String Column_EPattern(){
				
					return "";
				
				}
				public String Column_EOriginalDbColumnName(){
				
					return "Column_E";
				
				}

				
			    public String Column_F;

				public String getColumn_F () {
					return this.Column_F;
				}

				public Boolean Column_FIsNullable(){
				    return true;
				}
				public Boolean Column_FIsKey(){
				    return false;
				}
				public Integer Column_FLength(){
				    return null;
				}
				public Integer Column_FPrecision(){
				    return null;
				}
				public String Column_FDefault(){
				
					return null;
				
				}
				public String Column_FComment(){
				
				    return "";
				
				}
				public String Column_FPattern(){
				
					return "";
				
				}
				public String Column_FOriginalDbColumnName(){
				
					return "Column_F";
				
				}

				
			    public String OBSERVACION_CONCILIACION;

				public String getOBSERVACION_CONCILIACION () {
					return this.OBSERVACION_CONCILIACION;
				}

				public Boolean OBSERVACION_CONCILIACIONIsNullable(){
				    return true;
				}
				public Boolean OBSERVACION_CONCILIACIONIsKey(){
				    return false;
				}
				public Integer OBSERVACION_CONCILIACIONLength(){
				    return 0;
				}
				public Integer OBSERVACION_CONCILIACIONPrecision(){
				    return 0;
				}
				public String OBSERVACION_CONCILIACIONDefault(){
				
					return null;
				
				}
				public String OBSERVACION_CONCILIACIONComment(){
				
				    return "";
				
				}
				public String OBSERVACION_CONCILIACIONPattern(){
				
					return "";
				
				}
				public String OBSERVACION_CONCILIACIONOriginalDbColumnName(){
				
					return "OBSERVACION_CONCILIACION";
				
				}

				
			    public String VALOR_GLOSA;

				public String getVALOR_GLOSA () {
					return this.VALOR_GLOSA;
				}

				public Boolean VALOR_GLOSAIsNullable(){
				    return true;
				}
				public Boolean VALOR_GLOSAIsKey(){
				    return false;
				}
				public Integer VALOR_GLOSALength(){
				    return 0;
				}
				public Integer VALOR_GLOSAPrecision(){
				    return 0;
				}
				public String VALOR_GLOSADefault(){
				
					return null;
				
				}
				public String VALOR_GLOSAComment(){
				
				    return "";
				
				}
				public String VALOR_GLOSAPattern(){
				
					return "";
				
				}
				public String VALOR_GLOSAOriginalDbColumnName(){
				
					return "VALOR_GLOSA";
				
				}

				
			    public String VALOR_ACEPTADO;

				public String getVALOR_ACEPTADO () {
					return this.VALOR_ACEPTADO;
				}

				public Boolean VALOR_ACEPTADOIsNullable(){
				    return true;
				}
				public Boolean VALOR_ACEPTADOIsKey(){
				    return false;
				}
				public Integer VALOR_ACEPTADOLength(){
				    return 0;
				}
				public Integer VALOR_ACEPTADOPrecision(){
				    return 0;
				}
				public String VALOR_ACEPTADODefault(){
				
					return null;
				
				}
				public String VALOR_ACEPTADOComment(){
				
				    return "";
				
				}
				public String VALOR_ACEPTADOPattern(){
				
					return "";
				
				}
				public String VALOR_ACEPTADOOriginalDbColumnName(){
				
					return "VALOR_ACEPTADO";
				
				}

				
			    public String VALOR_SOPORTADO;

				public String getVALOR_SOPORTADO () {
					return this.VALOR_SOPORTADO;
				}

				public Boolean VALOR_SOPORTADOIsNullable(){
				    return true;
				}
				public Boolean VALOR_SOPORTADOIsKey(){
				    return false;
				}
				public Integer VALOR_SOPORTADOLength(){
				    return 0;
				}
				public Integer VALOR_SOPORTADOPrecision(){
				    return 0;
				}
				public String VALOR_SOPORTADODefault(){
				
					return null;
				
				}
				public String VALOR_SOPORTADOComment(){
				
				    return "";
				
				}
				public String VALOR_SOPORTADOPattern(){
				
					return "";
				
				}
				public String VALOR_SOPORTADOOriginalDbColumnName(){
				
					return "VALOR_SOPORTADO";
				
				}

				
			    public String VALOR_NETO;

				public String getVALOR_NETO () {
					return this.VALOR_NETO;
				}

				public Boolean VALOR_NETOIsNullable(){
				    return true;
				}
				public Boolean VALOR_NETOIsKey(){
				    return false;
				}
				public Integer VALOR_NETOLength(){
				    return 0;
				}
				public Integer VALOR_NETOPrecision(){
				    return 0;
				}
				public String VALOR_NETODefault(){
				
					return null;
				
				}
				public String VALOR_NETOComment(){
				
				    return "";
				
				}
				public String VALOR_NETOPattern(){
				
					return "";
				
				}
				public String VALOR_NETOOriginalDbColumnName(){
				
					return "VALOR_NETO";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_ACTAS_Actas.length) {
				if(length < 1024 && commonByteArray_ACM_ACTAS_Actas.length == 0) {
   					commonByteArray_ACM_ACTAS_Actas = new byte[1024];
				} else {
   					commonByteArray_ACM_ACTAS_Actas = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ACM_ACTAS_Actas, 0, length);
			strReturn = new String(commonByteArray_ACM_ACTAS_Actas, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_ACTAS_Actas.length) {
				if(length < 1024 && commonByteArray_ACM_ACTAS_Actas.length == 0) {
   					commonByteArray_ACM_ACTAS_Actas = new byte[1024];
				} else {
   					commonByteArray_ACM_ACTAS_Actas = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_ACM_ACTAS_Actas, 0, length);
			strReturn = new String(commonByteArray_ACM_ACTAS_Actas, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ACM_ACTAS_Actas) {

        	try {

        		int length = 0;
		
					this.Column_A = readString(dis);
					
					this.Column_B = readString(dis);
					
					this.Column_C = readString(dis);
					
					this.Column_D = readString(dis);
					
					this.Column_E = readString(dis);
					
					this.Column_F = readString(dis);
					
					this.OBSERVACION_CONCILIACION = readString(dis);
					
					this.VALOR_GLOSA = readString(dis);
					
					this.VALOR_ACEPTADO = readString(dis);
					
					this.VALOR_SOPORTADO = readString(dis);
					
					this.VALOR_NETO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ACM_ACTAS_Actas) {

        	try {

        		int length = 0;
		
					this.Column_A = readString(dis);
					
					this.Column_B = readString(dis);
					
					this.Column_C = readString(dis);
					
					this.Column_D = readString(dis);
					
					this.Column_E = readString(dis);
					
					this.Column_F = readString(dis);
					
					this.OBSERVACION_CONCILIACION = readString(dis);
					
					this.VALOR_GLOSA = readString(dis);
					
					this.VALOR_ACEPTADO = readString(dis);
					
					this.VALOR_SOPORTADO = readString(dis);
					
					this.VALOR_NETO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.Column_A,dos);
					
					// String
				
						writeString(this.Column_B,dos);
					
					// String
				
						writeString(this.Column_C,dos);
					
					// String
				
						writeString(this.Column_D,dos);
					
					// String
				
						writeString(this.Column_E,dos);
					
					// String
				
						writeString(this.Column_F,dos);
					
					// String
				
						writeString(this.OBSERVACION_CONCILIACION,dos);
					
					// String
				
						writeString(this.VALOR_GLOSA,dos);
					
					// String
				
						writeString(this.VALOR_ACEPTADO,dos);
					
					// String
				
						writeString(this.VALOR_SOPORTADO,dos);
					
					// String
				
						writeString(this.VALOR_NETO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.Column_A,dos);
					
					// String
				
						writeString(this.Column_B,dos);
					
					// String
				
						writeString(this.Column_C,dos);
					
					// String
				
						writeString(this.Column_D,dos);
					
					// String
				
						writeString(this.Column_E,dos);
					
					// String
				
						writeString(this.Column_F,dos);
					
					// String
				
						writeString(this.OBSERVACION_CONCILIACION,dos);
					
					// String
				
						writeString(this.VALOR_GLOSA,dos);
					
					// String
				
						writeString(this.VALOR_ACEPTADO,dos);
					
					// String
				
						writeString(this.VALOR_SOPORTADO,dos);
					
					// String
				
						writeString(this.VALOR_NETO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Column_A="+Column_A);
		sb.append(",Column_B="+Column_B);
		sb.append(",Column_C="+Column_C);
		sb.append(",Column_D="+Column_D);
		sb.append(",Column_E="+Column_E);
		sb.append(",Column_F="+Column_F);
		sb.append(",OBSERVACION_CONCILIACION="+OBSERVACION_CONCILIACION);
		sb.append(",VALOR_GLOSA="+VALOR_GLOSA);
		sb.append(",VALOR_ACEPTADO="+VALOR_ACEPTADO);
		sb.append(",VALOR_SOPORTADO="+VALOR_SOPORTADO);
		sb.append(",VALOR_NETO="+VALOR_NETO);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row16Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tFixedFlowInput_4Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFixedFlowInput_4_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row16Struct row16 = new row16Struct();




	
	/**
	 * [tFileOutputExcel_6 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputExcel_6", false);
		start_Hash.put("tFileOutputExcel_6", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputExcel_6";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row16");
					}
				
		int tos_count_tFileOutputExcel_6 = 0;
		


		
		int columnIndex_tFileOutputExcel_6 = 0;
		boolean headerIsInserted_tFileOutputExcel_6 = false;
		
		
		String fileName_tFileOutputExcel_6=context.fileSystem_URL;
		int nb_line_tFileOutputExcel_6 = 0;
		org.talend.ExcelTool xlsxTool_tFileOutputExcel_6 = new org.talend.ExcelTool();
		xlsxTool_tFileOutputExcel_6.setUseSharedStringTable(false);
		
    xlsxTool_tFileOutputExcel_6.setTruncateExceedingCharacters(false);
		xlsxTool_tFileOutputExcel_6.setSheet("main");
		xlsxTool_tFileOutputExcel_6.setAppend(true,true, false);
		xlsxTool_tFileOutputExcel_6.setRecalculateFormula(false);
		xlsxTool_tFileOutputExcel_6.setXY(false,0,0,false);
		
		java.util.concurrent.ConcurrentHashMap<java.lang.Object, java.lang.Object> chm_tFileOutputExcel_6 = (java.util.concurrent.ConcurrentHashMap<java.lang.Object, java.lang.Object>) globalMap.get("concurrentHashMap");
		java.lang.Object lockObj_tFileOutputExcel_6 = chm_tFileOutputExcel_6.computeIfAbsent("EXCEL_OUTPUT_LOCK_OBJ_tFileOutputExcel_6", k -> new Object());
		synchronized (lockObj_tFileOutputExcel_6) {
			
				xlsxTool_tFileOutputExcel_6.prepareXlsxFile(fileName_tFileOutputExcel_6);
			
		}
		
		xlsxTool_tFileOutputExcel_6.setFont("ARIAL");
		

 



/**
 * [tFileOutputExcel_6 begin ] stop
 */



	
	/**
	 * [tFixedFlowInput_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tFixedFlowInput_4", false);
		start_Hash.put("tFixedFlowInput_4", System.currentTimeMillis());
		
	
	currentComponent="tFixedFlowInput_4";
	
	
		int tos_count_tFixedFlowInput_4 = 0;
		

	int nb_line_tFixedFlowInput_4 = 0;
	List<row16Struct> cacheList_tFixedFlowInput_4 = new java.util.ArrayList<row16Struct>();
	row16 = new row16Struct();        	            	
    row16.Column_A = null;        	            	        	            	
    row16.Column_B = null;        	            	        	            	
    row16.Column_C = null;        	            	        	            	
    row16.Column_D = null;        	            	        	            	
    row16.Column_E = null;        	            	        	            	
    row16.Column_F = null;        	            	        	            	
	row16.OBSERVACION_CONCILIACION = "<b>TOTALES</b>";        	            	
	row16.VALOR_GLOSA = NumberFormat.getCurrencyInstance(Locale.US).format(context.VGLOSADO);        	            	
	row16.VALOR_ACEPTADO = NumberFormat.getCurrencyInstance(Locale.US).format(context.VACEPTADO);        	            	
	row16.VALOR_SOPORTADO = NumberFormat.getCurrencyInstance(Locale.US).format(context.VSOPORTADO);        	            	
	row16.VALOR_NETO = NumberFormat.getCurrencyInstance(Locale.US).format(context.VNETO);
	cacheList_tFixedFlowInput_4.add(row16);
	row16 = new row16Struct();        	            	
	row16.Column_A = "VALOR TOTAL DE LA GLOSA EN LA ETAPA ACTUAL";        	            	
	row16.Column_B = NumberFormat.getCurrencyInstance(Locale.US).format(context.VGLOSADO);        	            	
    row16.Column_C = null;        	            	        	            	
    row16.Column_D = null;        	            	        	            	
    row16.Column_E = null;        	            	        	            	
    row16.Column_F = null;        	            	        	            	
    row16.OBSERVACION_CONCILIACION = null;        	            	        	            	
    row16.VALOR_GLOSA = null;        	            	        	            	
    row16.VALOR_ACEPTADO = null;        	            	        	            	
    row16.VALOR_SOPORTADO = null;        	            	        	            	
    row16.VALOR_NETO = null;        	            	
	cacheList_tFixedFlowInput_4.add(row16);
	row16 = new row16Struct();        	            	
	row16.Column_A = "VALOR TOTAL ACPETADO POR LA IPS EN CONCILIACIÓN";        	            	
	row16.Column_B = NumberFormat.getCurrencyInstance(Locale.US).format(context.VACEPTADO);        	            	
    row16.Column_C = null;        	            	        	            	
    row16.Column_D = null;        	            	        	            	
    row16.Column_E = null;        	            	        	            	
    row16.Column_F = null;        	            	        	            	
    row16.OBSERVACION_CONCILIACION = null;        	            	        	            	
    row16.VALOR_GLOSA = null;        	            	        	            	
    row16.VALOR_ACEPTADO = null;        	            	        	            	
    row16.VALOR_SOPORTADO = null;        	            	        	            	
    row16.VALOR_NETO = null;        	            	
	cacheList_tFixedFlowInput_4.add(row16);
	row16 = new row16Struct();        	            	
	row16.Column_A = "VALOR TOTAL SOPORTADO POR LA IPS EN CONCILIACIÓ";        	            	
	row16.Column_B = NumberFormat.getCurrencyInstance(Locale.US).format(context.VSOPORTADO);        	            	
    row16.Column_C = null;        	            	        	            	
    row16.Column_D = null;        	            	        	            	
    row16.Column_E = null;        	            	        	            	
    row16.Column_F = null;        	            	        	            	
    row16.OBSERVACION_CONCILIACION = null;        	            	        	            	
    row16.VALOR_GLOSA = null;        	            	        	            	
    row16.VALOR_ACEPTADO = null;        	            	        	            	
    row16.VALOR_SOPORTADO = null;        	            	        	            	
    row16.VALOR_NETO = null;        	            	
	cacheList_tFixedFlowInput_4.add(row16);
	row16 = new row16Struct();        	            	
	row16.Column_A = "NETO A PAGAR";        	            	
	row16.Column_B = NumberFormat.getCurrencyInstance(Locale.US).format(context.VNETO);        	            	
    row16.Column_C = null;        	            	        	            	
    row16.Column_D = null;        	            	        	            	
    row16.Column_E = null;        	            	        	            	
    row16.Column_F = null;        	            	        	            	
    row16.OBSERVACION_CONCILIACION = null;        	            	        	            	
    row16.VALOR_GLOSA = null;        	            	        	            	
    row16.VALOR_ACEPTADO = null;        	            	        	            	
    row16.VALOR_SOPORTADO = null;        	            	        	            	
    row16.VALOR_NETO = null;        	            	
	cacheList_tFixedFlowInput_4.add(row16);
	row16 = new row16Struct();        	            	
    row16.Column_A = null;        	            	        	            	
    row16.Column_B = null;        	            	        	            	
    row16.Column_C = null;        	            	        	            	
    row16.Column_D = null;        	            	        	            	
    row16.Column_E = null;        	            	        	            	
    row16.Column_F = null;        	            	        	            	
    row16.OBSERVACION_CONCILIACION = null;        	            	        	            	
    row16.VALOR_GLOSA = null;        	            	        	            	
    row16.VALOR_ACEPTADO = null;        	            	        	            	
    row16.VALOR_SOPORTADO = null;        	            	        	            	
    row16.VALOR_NETO = null;        	            	
	cacheList_tFixedFlowInput_4.add(row16);
	row16 = new row16Struct();        	            	
    row16.Column_A = null;        	            	        	            	
    row16.Column_B = null;        	            	        	            	
    row16.Column_C = null;        	            	        	            	
    row16.Column_D = null;        	            	        	            	
    row16.Column_E = null;        	            	        	            	
    row16.Column_F = null;        	            	        	            	
    row16.OBSERVACION_CONCILIACION = null;        	            	        	            	
    row16.VALOR_GLOSA = null;        	            	        	            	
    row16.VALOR_ACEPTADO = null;        	            	        	            	
    row16.VALOR_SOPORTADO = null;        	            	        	            	
    row16.VALOR_NETO = null;        	            	
	cacheList_tFixedFlowInput_4.add(row16);
	row16 = new row16Struct();        	            	
	row16.Column_A = "Firma: _______________________________";        	            	
    row16.Column_B = null;        	            	        	            	
	row16.Column_C = "Firma: _______________________________";        	            	
    row16.Column_D = null;        	            	        	            	
    row16.Column_E = null;        	            	        	            	
    row16.Column_F = null;        	            	        	            	
    row16.OBSERVACION_CONCILIACION = null;        	            	        	            	
    row16.VALOR_GLOSA = null;        	            	        	            	
    row16.VALOR_ACEPTADO = null;        	            	        	            	
    row16.VALOR_SOPORTADO = null;        	            	        	            	
    row16.VALOR_NETO = null;        	            	
	cacheList_tFixedFlowInput_4.add(row16);
	row16 = new row16Struct();        	            	
	row16.Column_A = context.USUARIO;        	            	
    row16.Column_B = null;        	            	        	            	
	row16.Column_C = "Auditor representante del prestador";        	            	
    row16.Column_D = null;        	            	        	            	
    row16.Column_E = null;        	            	        	            	
    row16.Column_F = null;        	            	        	            	
    row16.OBSERVACION_CONCILIACION = null;        	            	        	            	
    row16.VALOR_GLOSA = null;        	            	        	            	
    row16.VALOR_ACEPTADO = null;        	            	        	            	
    row16.VALOR_SOPORTADO = null;        	            	        	            	
    row16.VALOR_NETO = null;        	            	
	cacheList_tFixedFlowInput_4.add(row16);
	row16 = new row16Struct();        	            	
	row16.Column_A = "Auditor de la entidad responsable de pago";        	            	
    row16.Column_B = null;        	            	        	            	
    row16.Column_C = null;        	            	        	            	
    row16.Column_D = null;        	            	        	            	
    row16.Column_E = null;        	            	        	            	
    row16.Column_F = null;        	            	        	            	
    row16.OBSERVACION_CONCILIACION = null;        	            	        	            	
    row16.VALOR_GLOSA = null;        	            	        	            	
    row16.VALOR_ACEPTADO = null;        	            	        	            	
    row16.VALOR_SOPORTADO = null;        	            	        	            	
    row16.VALOR_NETO = null;        	            	
	cacheList_tFixedFlowInput_4.add(row16);
	row16 = new row16Struct();        	            	
    row16.Column_A = null;        	            	        	            	
    row16.Column_B = null;        	            	        	            	
	row16.Column_C = "Dada en la ciudad de " + context.CIUDAD  + context.FECHA_EJECUCION;        	            	
    row16.Column_D = null;        	            	        	            	
    row16.Column_E = null;        	            	        	            	
    row16.Column_F = null;        	            	        	            	
    row16.OBSERVACION_CONCILIACION = null;        	            	        	            	
    row16.VALOR_GLOSA = null;        	            	        	            	
    row16.VALOR_ACEPTADO = null;        	            	        	            	
    row16.VALOR_SOPORTADO = null;        	            	        	            	
    row16.VALOR_NETO = null;        	            	
	cacheList_tFixedFlowInput_4.add(row16);
	for (int i_tFixedFlowInput_4 = 0 ; i_tFixedFlowInput_4 < 1 ; i_tFixedFlowInput_4++) {	
		for(row16Struct tmpRow_tFixedFlowInput_4 : cacheList_tFixedFlowInput_4){
			nb_line_tFixedFlowInput_4 ++;		
			row16 = tmpRow_tFixedFlowInput_4;

 



/**
 * [tFixedFlowInput_4 begin ] stop
 */
	
	/**
	 * [tFixedFlowInput_4 main ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_4";
	
	

 


	tos_count_tFixedFlowInput_4++;

/**
 * [tFixedFlowInput_4 main ] stop
 */
	
	/**
	 * [tFixedFlowInput_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_4";
	
	

 



/**
 * [tFixedFlowInput_4 process_data_begin ] stop
 */

	
	/**
	 * [tFileOutputExcel_6 main ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_6";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row16"
						
						);
					}
					

				xlsxTool_tFileOutputExcel_6.addRow();
									   				
	    				if(row16.Column_A != null) {
    				
							xlsxTool_tFileOutputExcel_6.addCellValue(String.valueOf(row16.Column_A));
	    				} else {
	    					xlsxTool_tFileOutputExcel_6.addCellNullValue();
	    				}
					
									   				
	    				if(row16.Column_B != null) {
    				
							xlsxTool_tFileOutputExcel_6.addCellValue(String.valueOf(row16.Column_B));
	    				} else {
	    					xlsxTool_tFileOutputExcel_6.addCellNullValue();
	    				}
					
									   				
	    				if(row16.Column_C != null) {
    				
							xlsxTool_tFileOutputExcel_6.addCellValue(String.valueOf(row16.Column_C));
	    				} else {
	    					xlsxTool_tFileOutputExcel_6.addCellNullValue();
	    				}
					
									   				
	    				if(row16.Column_D != null) {
    				
							xlsxTool_tFileOutputExcel_6.addCellValue(String.valueOf(row16.Column_D));
	    				} else {
	    					xlsxTool_tFileOutputExcel_6.addCellNullValue();
	    				}
					
									   				
	    				if(row16.Column_E != null) {
    				
							xlsxTool_tFileOutputExcel_6.addCellValue(String.valueOf(row16.Column_E));
	    				} else {
	    					xlsxTool_tFileOutputExcel_6.addCellNullValue();
	    				}
					
									   				
	    				if(row16.Column_F != null) {
    				
							xlsxTool_tFileOutputExcel_6.addCellValue(String.valueOf(row16.Column_F));
	    				} else {
	    					xlsxTool_tFileOutputExcel_6.addCellNullValue();
	    				}
					
									   				
	    				if(row16.OBSERVACION_CONCILIACION != null) {
    				
							xlsxTool_tFileOutputExcel_6.addCellValue(String.valueOf(row16.OBSERVACION_CONCILIACION));
	    				} else {
	    					xlsxTool_tFileOutputExcel_6.addCellNullValue();
	    				}
					
									   				
	    				if(row16.VALOR_GLOSA != null) {
    				
							xlsxTool_tFileOutputExcel_6.addCellValue(String.valueOf(row16.VALOR_GLOSA));
	    				} else {
	    					xlsxTool_tFileOutputExcel_6.addCellNullValue();
	    				}
					
									   				
	    				if(row16.VALOR_ACEPTADO != null) {
    				
							xlsxTool_tFileOutputExcel_6.addCellValue(String.valueOf(row16.VALOR_ACEPTADO));
	    				} else {
	    					xlsxTool_tFileOutputExcel_6.addCellNullValue();
	    				}
					
									   				
	    				if(row16.VALOR_SOPORTADO != null) {
    				
							xlsxTool_tFileOutputExcel_6.addCellValue(String.valueOf(row16.VALOR_SOPORTADO));
	    				} else {
	    					xlsxTool_tFileOutputExcel_6.addCellNullValue();
	    				}
					
									   				
	    				if(row16.VALOR_NETO != null) {
    				
							xlsxTool_tFileOutputExcel_6.addCellValue(String.valueOf(row16.VALOR_NETO));
	    				} else {
	    					xlsxTool_tFileOutputExcel_6.addCellNullValue();
	    				}
					
    			nb_line_tFileOutputExcel_6++;
				
 


	tos_count_tFileOutputExcel_6++;

/**
 * [tFileOutputExcel_6 main ] stop
 */
	
	/**
	 * [tFileOutputExcel_6 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_6";
	
	

 



/**
 * [tFileOutputExcel_6 process_data_begin ] stop
 */
	
	/**
	 * [tFileOutputExcel_6 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_6";
	
	

 



/**
 * [tFileOutputExcel_6 process_data_end ] stop
 */



	
	/**
	 * [tFixedFlowInput_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_4";
	
	

 



/**
 * [tFixedFlowInput_4 process_data_end ] stop
 */
	
	/**
	 * [tFixedFlowInput_4 end ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_4";
	
	

		}
	}
	cacheList_tFixedFlowInput_4.clear();
	globalMap.put("tFixedFlowInput_4_NB_LINE", nb_line_tFixedFlowInput_4);

 

ok_Hash.put("tFixedFlowInput_4", true);
end_Hash.put("tFixedFlowInput_4", System.currentTimeMillis());




/**
 * [tFixedFlowInput_4 end ] stop
 */

	
	/**
	 * [tFileOutputExcel_6 end ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_6";
	
	

									columnIndex_tFileOutputExcel_6 = 2;
								
					xlsxTool_tFileOutputExcel_6.setColAutoSize(columnIndex_tFileOutputExcel_6);
	
	
	
	
			xlsxTool_tFileOutputExcel_6.writeExcel(fileName_tFileOutputExcel_6,true);
	
		if(headerIsInserted_tFileOutputExcel_6 && nb_line_tFileOutputExcel_6 > 0){
			nb_line_tFileOutputExcel_6 = nb_line_tFileOutputExcel_6 -1;
		}
		globalMap.put("tFileOutputExcel_6_NB_LINE",nb_line_tFileOutputExcel_6);
		
		

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row16");
			  	}
			  	
 

ok_Hash.put("tFileOutputExcel_6", true);
end_Hash.put("tFileOutputExcel_6", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk13", 0, "ok");
				}
				tJava_4Process(globalMap);



/**
 * [tFileOutputExcel_6 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFixedFlowInput_4 finally ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_4";
	
	

 



/**
 * [tFixedFlowInput_4 finally ] stop
 */

	
	/**
	 * [tFileOutputExcel_6 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_6";
	
	

 



/**
 * [tFileOutputExcel_6 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFixedFlowInput_4_SUBPROCESS_STATE", 1);
	}
	


public static class row17Struct implements routines.system.IPersistableRow<row17Struct> {
    final static byte[] commonByteArrayLock_ACM_ACTAS_Actas = new byte[0];
    static byte[] commonByteArray_ACM_ACTAS_Actas = new byte[0];

	
			    public String PREFIJO;

				public String getPREFIJO () {
					return this.PREFIJO;
				}

				public Boolean PREFIJOIsNullable(){
				    return true;
				}
				public Boolean PREFIJOIsKey(){
				    return false;
				}
				public Integer PREFIJOLength(){
				    return 50;
				}
				public Integer PREFIJOPrecision(){
				    return 0;
				}
				public String PREFIJODefault(){
				
					return null;
				
				}
				public String PREFIJOComment(){
				
				    return "";
				
				}
				public String PREFIJOPattern(){
				
					return "";
				
				}
				public String PREFIJOOriginalDbColumnName(){
				
					return "PREFIJO";
				
				}

				
			    public String NUMERO_FACTURA;

				public String getNUMERO_FACTURA () {
					return this.NUMERO_FACTURA;
				}

				public Boolean NUMERO_FACTURAIsNullable(){
				    return true;
				}
				public Boolean NUMERO_FACTURAIsKey(){
				    return false;
				}
				public Integer NUMERO_FACTURALength(){
				    return 50;
				}
				public Integer NUMERO_FACTURAPrecision(){
				    return 0;
				}
				public String NUMERO_FACTURADefault(){
				
					return null;
				
				}
				public String NUMERO_FACTURAComment(){
				
				    return "";
				
				}
				public String NUMERO_FACTURAPattern(){
				
					return "";
				
				}
				public String NUMERO_FACTURAOriginalDbColumnName(){
				
					return "NUMERO_FACTURA";
				
				}

				
			    public String DOCUMENTO;

				public String getDOCUMENTO () {
					return this.DOCUMENTO;
				}

				public Boolean DOCUMENTOIsNullable(){
				    return false;
				}
				public Boolean DOCUMENTOIsKey(){
				    return false;
				}
				public Integer DOCUMENTOLength(){
				    return 40;
				}
				public Integer DOCUMENTOPrecision(){
				    return 0;
				}
				public String DOCUMENTODefault(){
				
					return null;
				
				}
				public String DOCUMENTOComment(){
				
				    return "";
				
				}
				public String DOCUMENTOPattern(){
				
					return "";
				
				}
				public String DOCUMENTOOriginalDbColumnName(){
				
					return "DOCUMENTO";
				
				}

				
			    public String PACIENTE;

				public String getPACIENTE () {
					return this.PACIENTE;
				}

				public Boolean PACIENTEIsNullable(){
				    return true;
				}
				public Boolean PACIENTEIsKey(){
				    return false;
				}
				public Integer PACIENTELength(){
				    return 401;
				}
				public Integer PACIENTEPrecision(){
				    return 0;
				}
				public String PACIENTEDefault(){
				
					return null;
				
				}
				public String PACIENTEComment(){
				
				    return "";
				
				}
				public String PACIENTEPattern(){
				
					return "";
				
				}
				public String PACIENTEOriginalDbColumnName(){
				
					return "PACIENTE";
				
				}

				
			    public String OBSERVACIONES;

				public String getOBSERVACIONES () {
					return this.OBSERVACIONES;
				}

				public Boolean OBSERVACIONESIsNullable(){
				    return true;
				}
				public Boolean OBSERVACIONESIsKey(){
				    return false;
				}
				public Integer OBSERVACIONESLength(){
				    return 4000;
				}
				public Integer OBSERVACIONESPrecision(){
				    return 0;
				}
				public String OBSERVACIONESDefault(){
				
					return null;
				
				}
				public String OBSERVACIONESComment(){
				
				    return "";
				
				}
				public String OBSERVACIONESPattern(){
				
					return "";
				
				}
				public String OBSERVACIONESOriginalDbColumnName(){
				
					return "OBSERVACIONES";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_ACTAS_Actas.length) {
				if(length < 1024 && commonByteArray_ACM_ACTAS_Actas.length == 0) {
   					commonByteArray_ACM_ACTAS_Actas = new byte[1024];
				} else {
   					commonByteArray_ACM_ACTAS_Actas = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ACM_ACTAS_Actas, 0, length);
			strReturn = new String(commonByteArray_ACM_ACTAS_Actas, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_ACTAS_Actas.length) {
				if(length < 1024 && commonByteArray_ACM_ACTAS_Actas.length == 0) {
   					commonByteArray_ACM_ACTAS_Actas = new byte[1024];
				} else {
   					commonByteArray_ACM_ACTAS_Actas = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_ACM_ACTAS_Actas, 0, length);
			strReturn = new String(commonByteArray_ACM_ACTAS_Actas, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ACM_ACTAS_Actas) {

        	try {

        		int length = 0;
		
					this.PREFIJO = readString(dis);
					
					this.NUMERO_FACTURA = readString(dis);
					
					this.DOCUMENTO = readString(dis);
					
					this.PACIENTE = readString(dis);
					
					this.OBSERVACIONES = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ACM_ACTAS_Actas) {

        	try {

        		int length = 0;
		
					this.PREFIJO = readString(dis);
					
					this.NUMERO_FACTURA = readString(dis);
					
					this.DOCUMENTO = readString(dis);
					
					this.PACIENTE = readString(dis);
					
					this.OBSERVACIONES = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.PREFIJO,dos);
					
					// String
				
						writeString(this.NUMERO_FACTURA,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// String
				
						writeString(this.PACIENTE,dos);
					
					// String
				
						writeString(this.OBSERVACIONES,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.PREFIJO,dos);
					
					// String
				
						writeString(this.NUMERO_FACTURA,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// String
				
						writeString(this.PACIENTE,dos);
					
					// String
				
						writeString(this.OBSERVACIONES,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("PREFIJO="+PREFIJO);
		sb.append(",NUMERO_FACTURA="+NUMERO_FACTURA);
		sb.append(",DOCUMENTO="+DOCUMENTO);
		sb.append(",PACIENTE="+PACIENTE);
		sb.append(",OBSERVACIONES="+OBSERVACIONES);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row17Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_6Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_6_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row17Struct row17 = new row17Struct();




	
	/**
	 * [tFileOutputExcel_7 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputExcel_7", false);
		start_Hash.put("tFileOutputExcel_7", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputExcel_7";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row17");
					}
				
		int tos_count_tFileOutputExcel_7 = 0;
		


		
		int columnIndex_tFileOutputExcel_7 = 0;
		boolean headerIsInserted_tFileOutputExcel_7 = false;
		
		
		String fileName_tFileOutputExcel_7=context.fileSystem_URL;
		int nb_line_tFileOutputExcel_7 = 0;
		org.talend.ExcelTool xlsxTool_tFileOutputExcel_7 = new org.talend.ExcelTool();
		xlsxTool_tFileOutputExcel_7.setUseSharedStringTable(false);
		
    xlsxTool_tFileOutputExcel_7.setTruncateExceedingCharacters(false);
		xlsxTool_tFileOutputExcel_7.setSheet("main");
		xlsxTool_tFileOutputExcel_7.setAppend(true,true, false);
		xlsxTool_tFileOutputExcel_7.setRecalculateFormula(false);
		xlsxTool_tFileOutputExcel_7.setXY(false,0,0,false);
		
		java.util.concurrent.ConcurrentHashMap<java.lang.Object, java.lang.Object> chm_tFileOutputExcel_7 = (java.util.concurrent.ConcurrentHashMap<java.lang.Object, java.lang.Object>) globalMap.get("concurrentHashMap");
		java.lang.Object lockObj_tFileOutputExcel_7 = chm_tFileOutputExcel_7.computeIfAbsent("EXCEL_OUTPUT_LOCK_OBJ_tFileOutputExcel_7", k -> new Object());
		synchronized (lockObj_tFileOutputExcel_7) {
			
				xlsxTool_tFileOutputExcel_7.prepareXlsxFile(fileName_tFileOutputExcel_7);
			
		}
		
		xlsxTool_tFileOutputExcel_7.setFont("ARIAL");
		

 



/**
 * [tFileOutputExcel_7 begin ] stop
 */



	
	/**
	 * [tOracleInput_6 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_6", false);
		start_Hash.put("tOracleInput_6", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_6";
	
	
		int tos_count_tOracleInput_6 = 0;
		
	


	
		    int nb_line_tOracleInput_6 = 0;
		    java.sql.Connection conn_tOracleInput_6 = null;
				conn_tOracleInput_6 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");
				
                boolean isTimeZoneNull_tOracleInput_6 = false;
				boolean isConnectionWrapped_tOracleInput_6 = !(conn_tOracleInput_6 instanceof oracle.jdbc.OracleConnection) && conn_tOracleInput_6.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tOracleInput_6 = null;
                if (isConnectionWrapped_tOracleInput_6) {
					unwrappedOraConn_tOracleInput_6 = conn_tOracleInput_6.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tOracleInput_6 != null) {
                        isTimeZoneNull_tOracleInput_6 = (unwrappedOraConn_tOracleInput_6.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tOracleInput_6 = (((oracle.jdbc.OracleConnection)conn_tOracleInput_6).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tOracleInput_6) {
					java.sql.Statement stmtGetTZ_tOracleInput_6 = conn_tOracleInput_6.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_6 = stmtGetTZ_tOracleInput_6.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_6 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tOracleInput_6.next()) {
						sessionTimezone_tOracleInput_6 = rsGetTZ_tOracleInput_6.getString(1);
					}
					if (isConnectionWrapped_tOracleInput_6 && unwrappedOraConn_tOracleInput_6 != null) {
                        unwrappedOraConn_tOracleInput_6.setSessionTimeZone(sessionTimezone_tOracleInput_6);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_6).setSessionTimeZone(sessionTimezone_tOracleInput_6);
                    }
				}
			
		    
			java.sql.Statement stmt_tOracleInput_6 = conn_tOracleInput_6.createStatement();

		    String dbquery_tOracleInput_6 = "SELECT DISTINCT\n    AF.PREFIJO,\n    AF.NUMERO AS NUMERO_FACTURA,\n	GT.SIGLA||' '|| GP.DOCUMENTO,\n    TRIM(GP.PRIMER_"
+"NOMBRE)||COALESCE(TRIM(GP.SEGUNDO_NOMBRE),' ')||TRIM(GP.PRIMER_APELLIDO)||' '|| TRIM(GP.SEGUNDO_APELLIDO) AS PACIENTE,\n"
+"    DS.OBSERVACIONES\nFROM ACM_DFACTURASERVICIO DS\nINNER JOIN ACM_RECEPCION AR ON AR.ID = DS.RECEPCION_ID\nINNER JOIN A"
+"CM_FACTURA   AF ON AF.ID = DS.FACTURA_ID\nLEFT JOIN GEN_PERSONAS  GP ON GP.DOCUMENTO = DS.DOCUMENTO AND  GP.TDOCUMENTOS_"
+"ID = DS.TDOCUMENTOS_ID\nLEFT  JOIN GEN_TDOCUMENTOS    GT   ON  GT.ID = DS.TDOCUMENTOS_ID \nWHERE AR.ESTADO = 'Aprobado' "
+"\nAND DS.OBSERVACIONES IS NOT NULL\nAND AR.ID = '" + context.RECEPCION_ID + "' \nORDER BY PREFIJO, NUMERO_FACTURA\n";
		    

		    globalMap.put("tOracleInput_6_QUERY",dbquery_tOracleInput_6);

		    java.sql.ResultSet rs_tOracleInput_6 = null;

		    try {
		    	rs_tOracleInput_6 = stmt_tOracleInput_6.executeQuery(dbquery_tOracleInput_6);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_6 = rs_tOracleInput_6.getMetaData();
		    	int colQtyInRs_tOracleInput_6 = rsmd_tOracleInput_6.getColumnCount();

		    String tmpContent_tOracleInput_6 = null;
		    
		    
		    while (rs_tOracleInput_6.next()) {
		        nb_line_tOracleInput_6++;
		        
							if(colQtyInRs_tOracleInput_6 < 1) {
								row17.PREFIJO = null;
							} else {
	                         		
        	row17.PREFIJO = routines.system.JDBCUtil.getString(rs_tOracleInput_6, 1, false);
		                    }
							if(colQtyInRs_tOracleInput_6 < 2) {
								row17.NUMERO_FACTURA = null;
							} else {
	                         		
        	row17.NUMERO_FACTURA = routines.system.JDBCUtil.getString(rs_tOracleInput_6, 2, false);
		                    }
							if(colQtyInRs_tOracleInput_6 < 3) {
								row17.DOCUMENTO = null;
							} else {
	                         		
        	row17.DOCUMENTO = routines.system.JDBCUtil.getString(rs_tOracleInput_6, 3, false);
		                    }
							if(colQtyInRs_tOracleInput_6 < 4) {
								row17.PACIENTE = null;
							} else {
	                         		
        	row17.PACIENTE = routines.system.JDBCUtil.getString(rs_tOracleInput_6, 4, false);
		                    }
							if(colQtyInRs_tOracleInput_6 < 5) {
								row17.OBSERVACIONES = null;
							} else {
	                         		
        	row17.OBSERVACIONES = routines.system.JDBCUtil.getString(rs_tOracleInput_6, 5, false);
		                    }
					




 



/**
 * [tOracleInput_6 begin ] stop
 */
	
	/**
	 * [tOracleInput_6 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_6";
	
	

 


	tos_count_tOracleInput_6++;

/**
 * [tOracleInput_6 main ] stop
 */
	
	/**
	 * [tOracleInput_6 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_6";
	
	

 



/**
 * [tOracleInput_6 process_data_begin ] stop
 */

	
	/**
	 * [tFileOutputExcel_7 main ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_7";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row17"
						
						);
					}
					

				xlsxTool_tFileOutputExcel_7.addRow();
									   				
	    				if(row17.PREFIJO != null) {
    				
							xlsxTool_tFileOutputExcel_7.addCellValue(String.valueOf(row17.PREFIJO));
	    				} else {
	    					xlsxTool_tFileOutputExcel_7.addCellNullValue();
	    				}
					
									   				
	    				if(row17.NUMERO_FACTURA != null) {
    				
							xlsxTool_tFileOutputExcel_7.addCellValue(String.valueOf(row17.NUMERO_FACTURA));
	    				} else {
	    					xlsxTool_tFileOutputExcel_7.addCellNullValue();
	    				}
					
									   				
	    				if(row17.DOCUMENTO != null) {
    				
							xlsxTool_tFileOutputExcel_7.addCellValue(String.valueOf(row17.DOCUMENTO));
	    				} else {
	    					xlsxTool_tFileOutputExcel_7.addCellNullValue();
	    				}
					
									   				
	    				if(row17.PACIENTE != null) {
    				
							xlsxTool_tFileOutputExcel_7.addCellValue(String.valueOf(row17.PACIENTE));
	    				} else {
	    					xlsxTool_tFileOutputExcel_7.addCellNullValue();
	    				}
					
									   				
	    				if(row17.OBSERVACIONES != null) {
    				
							xlsxTool_tFileOutputExcel_7.addCellValue(String.valueOf(row17.OBSERVACIONES));
	    				} else {
	    					xlsxTool_tFileOutputExcel_7.addCellNullValue();
	    				}
					
    			nb_line_tFileOutputExcel_7++;
				
 


	tos_count_tFileOutputExcel_7++;

/**
 * [tFileOutputExcel_7 main ] stop
 */
	
	/**
	 * [tFileOutputExcel_7 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_7";
	
	

 



/**
 * [tFileOutputExcel_7 process_data_begin ] stop
 */
	
	/**
	 * [tFileOutputExcel_7 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_7";
	
	

 



/**
 * [tFileOutputExcel_7 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_6 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_6";
	
	

 



/**
 * [tOracleInput_6 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_6 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_6";
	
	

}
}finally{
	if (rs_tOracleInput_6 != null) {
		rs_tOracleInput_6.close();
	}
	if (stmt_tOracleInput_6 != null) {
		stmt_tOracleInput_6.close();
	}
}

globalMap.put("tOracleInput_6_NB_LINE",nb_line_tOracleInput_6);
 

ok_Hash.put("tOracleInput_6", true);
end_Hash.put("tOracleInput_6", System.currentTimeMillis());




/**
 * [tOracleInput_6 end ] stop
 */

	
	/**
	 * [tFileOutputExcel_7 end ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_7";
	
	

									columnIndex_tFileOutputExcel_7 = 3;
								
					xlsxTool_tFileOutputExcel_7.setColAutoSize(columnIndex_tFileOutputExcel_7);
	
									columnIndex_tFileOutputExcel_7 = 4;
								
					xlsxTool_tFileOutputExcel_7.setColAutoSize(columnIndex_tFileOutputExcel_7);
	
	
	
	
			xlsxTool_tFileOutputExcel_7.writeExcel(fileName_tFileOutputExcel_7,true);
	
		if(headerIsInserted_tFileOutputExcel_7 && nb_line_tFileOutputExcel_7 > 0){
			nb_line_tFileOutputExcel_7 = nb_line_tFileOutputExcel_7 -1;
		}
		globalMap.put("tFileOutputExcel_7_NB_LINE",nb_line_tFileOutputExcel_7);
		
		

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row17");
			  	}
			  	
 

ok_Hash.put("tFileOutputExcel_7", true);
end_Hash.put("tFileOutputExcel_7", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk14", 0, "ok");
				}
				tJava_4Process(globalMap);



/**
 * [tFileOutputExcel_7 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleInput_6 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_6";
	
	

 



/**
 * [tOracleInput_6 finally ] stop
 */

	
	/**
	 * [tFileOutputExcel_7 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_7";
	
	

 



/**
 * [tFileOutputExcel_7 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_6_SUBPROCESS_STATE", 1);
	}
	


public static class row20Struct implements routines.system.IPersistableRow<row20Struct> {
    final static byte[] commonByteArrayLock_ACM_ACTAS_Actas = new byte[0];
    static byte[] commonByteArray_ACM_ACTAS_Actas = new byte[0];

	
			    public BigDecimal AUDITORIA_ID;

				public BigDecimal getAUDITORIA_ID () {
					return this.AUDITORIA_ID;
				}

				public Boolean AUDITORIA_IDIsNullable(){
				    return false;
				}
				public Boolean AUDITORIA_IDIsKey(){
				    return false;
				}
				public Integer AUDITORIA_IDLength(){
				    return null;
				}
				public Integer AUDITORIA_IDPrecision(){
				    return null;
				}
				public String AUDITORIA_IDDefault(){
				
					return "";
				
				}
				public String AUDITORIA_IDComment(){
				
				    return "";
				
				}
				public String AUDITORIA_IDPattern(){
				
					return "";
				
				}
				public String AUDITORIA_IDOriginalDbColumnName(){
				
					return "AUDITORIA_ID";
				
				}

				
			    public BigDecimal VTOTALCALCULADO;

				public BigDecimal getVTOTALCALCULADO () {
					return this.VTOTALCALCULADO;
				}

				public Boolean VTOTALCALCULADOIsNullable(){
				    return true;
				}
				public Boolean VTOTALCALCULADOIsKey(){
				    return false;
				}
				public Integer VTOTALCALCULADOLength(){
				    return null;
				}
				public Integer VTOTALCALCULADOPrecision(){
				    return null;
				}
				public String VTOTALCALCULADODefault(){
				
					return "";
				
				}
				public String VTOTALCALCULADOComment(){
				
				    return "";
				
				}
				public String VTOTALCALCULADOPattern(){
				
					return "";
				
				}
				public String VTOTALCALCULADOOriginalDbColumnName(){
				
					return "VTOTALCALCULADO";
				
				}

				
			    public BigDecimal TGLOSA;

				public BigDecimal getTGLOSA () {
					return this.TGLOSA;
				}

				public Boolean TGLOSAIsNullable(){
				    return false;
				}
				public Boolean TGLOSAIsKey(){
				    return false;
				}
				public Integer TGLOSALength(){
				    return null;
				}
				public Integer TGLOSAPrecision(){
				    return null;
				}
				public String TGLOSADefault(){
				
					return "";
				
				}
				public String TGLOSAComment(){
				
				    return "";
				
				}
				public String TGLOSAPattern(){
				
					return "";
				
				}
				public String TGLOSAOriginalDbColumnName(){
				
					return "TGLOSA";
				
				}

				
			    public BigDecimal TACEPTADO;

				public BigDecimal getTACEPTADO () {
					return this.TACEPTADO;
				}

				public Boolean TACEPTADOIsNullable(){
				    return false;
				}
				public Boolean TACEPTADOIsKey(){
				    return false;
				}
				public Integer TACEPTADOLength(){
				    return null;
				}
				public Integer TACEPTADOPrecision(){
				    return null;
				}
				public String TACEPTADODefault(){
				
					return "";
				
				}
				public String TACEPTADOComment(){
				
				    return "";
				
				}
				public String TACEPTADOPattern(){
				
					return "";
				
				}
				public String TACEPTADOOriginalDbColumnName(){
				
					return "TACEPTADO";
				
				}

				
			    public BigDecimal TSOPORTADO;

				public BigDecimal getTSOPORTADO () {
					return this.TSOPORTADO;
				}

				public Boolean TSOPORTADOIsNullable(){
				    return false;
				}
				public Boolean TSOPORTADOIsKey(){
				    return false;
				}
				public Integer TSOPORTADOLength(){
				    return null;
				}
				public Integer TSOPORTADOPrecision(){
				    return null;
				}
				public String TSOPORTADODefault(){
				
					return "";
				
				}
				public String TSOPORTADOComment(){
				
				    return "";
				
				}
				public String TSOPORTADOPattern(){
				
					return "";
				
				}
				public String TSOPORTADOOriginalDbColumnName(){
				
					return "TSOPORTADO";
				
				}

				
			    public BigDecimal TRATIFICADA;

				public BigDecimal getTRATIFICADA () {
					return this.TRATIFICADA;
				}

				public Boolean TRATIFICADAIsNullable(){
				    return true;
				}
				public Boolean TRATIFICADAIsKey(){
				    return false;
				}
				public Integer TRATIFICADALength(){
				    return null;
				}
				public Integer TRATIFICADAPrecision(){
				    return null;
				}
				public String TRATIFICADADefault(){
				
					return "";
				
				}
				public String TRATIFICADAComment(){
				
				    return "";
				
				}
				public String TRATIFICADAPattern(){
				
					return "";
				
				}
				public String TRATIFICADAOriginalDbColumnName(){
				
					return "TRATIFICADA";
				
				}

				
			    public BigDecimal VAVALPAGO;

				public BigDecimal getVAVALPAGO () {
					return this.VAVALPAGO;
				}

				public Boolean VAVALPAGOIsNullable(){
				    return false;
				}
				public Boolean VAVALPAGOIsKey(){
				    return false;
				}
				public Integer VAVALPAGOLength(){
				    return null;
				}
				public Integer VAVALPAGOPrecision(){
				    return null;
				}
				public String VAVALPAGODefault(){
				
					return "";
				
				}
				public String VAVALPAGOComment(){
				
				    return "";
				
				}
				public String VAVALPAGOPattern(){
				
					return "";
				
				}
				public String VAVALPAGOOriginalDbColumnName(){
				
					return "VAVALPAGO";
				
				}

				
			    public BigDecimal PORCETAJE_GLOSA;

				public BigDecimal getPORCETAJE_GLOSA () {
					return this.PORCETAJE_GLOSA;
				}

				public Boolean PORCETAJE_GLOSAIsNullable(){
				    return true;
				}
				public Boolean PORCETAJE_GLOSAIsKey(){
				    return false;
				}
				public Integer PORCETAJE_GLOSALength(){
				    return null;
				}
				public Integer PORCETAJE_GLOSAPrecision(){
				    return null;
				}
				public String PORCETAJE_GLOSADefault(){
				
					return "";
				
				}
				public String PORCETAJE_GLOSAComment(){
				
				    return "";
				
				}
				public String PORCETAJE_GLOSAPattern(){
				
					return "";
				
				}
				public String PORCETAJE_GLOSAOriginalDbColumnName(){
				
					return "PORCETAJE_GLOSA";
				
				}

				



    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ACM_ACTAS_Actas) {

        	try {

        		int length = 0;
		
						this.AUDITORIA_ID = (BigDecimal) dis.readObject();
					
						this.VTOTALCALCULADO = (BigDecimal) dis.readObject();
					
						this.TGLOSA = (BigDecimal) dis.readObject();
					
						this.TACEPTADO = (BigDecimal) dis.readObject();
					
						this.TSOPORTADO = (BigDecimal) dis.readObject();
					
						this.TRATIFICADA = (BigDecimal) dis.readObject();
					
						this.VAVALPAGO = (BigDecimal) dis.readObject();
					
						this.PORCETAJE_GLOSA = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ACM_ACTAS_Actas) {

        	try {

        		int length = 0;
		
						this.AUDITORIA_ID = (BigDecimal) dis.readObject();
					
						this.VTOTALCALCULADO = (BigDecimal) dis.readObject();
					
						this.TGLOSA = (BigDecimal) dis.readObject();
					
						this.TACEPTADO = (BigDecimal) dis.readObject();
					
						this.TSOPORTADO = (BigDecimal) dis.readObject();
					
						this.TRATIFICADA = (BigDecimal) dis.readObject();
					
						this.VAVALPAGO = (BigDecimal) dis.readObject();
					
						this.PORCETAJE_GLOSA = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.AUDITORIA_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VTOTALCALCULADO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TGLOSA);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TACEPTADO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TSOPORTADO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TRATIFICADA);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VAVALPAGO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PORCETAJE_GLOSA);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.AUDITORIA_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VTOTALCALCULADO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TGLOSA);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TACEPTADO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TSOPORTADO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TRATIFICADA);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VAVALPAGO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PORCETAJE_GLOSA);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("AUDITORIA_ID="+String.valueOf(AUDITORIA_ID));
		sb.append(",VTOTALCALCULADO="+String.valueOf(VTOTALCALCULADO));
		sb.append(",TGLOSA="+String.valueOf(TGLOSA));
		sb.append(",TACEPTADO="+String.valueOf(TACEPTADO));
		sb.append(",TSOPORTADO="+String.valueOf(TSOPORTADO));
		sb.append(",TRATIFICADA="+String.valueOf(TRATIFICADA));
		sb.append(",VAVALPAGO="+String.valueOf(VAVALPAGO));
		sb.append(",PORCETAJE_GLOSA="+String.valueOf(PORCETAJE_GLOSA));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row20Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_7Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_7_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row20Struct row20 = new row20Struct();




	
	/**
	 * [tJavaRow_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaRow_5", false);
		start_Hash.put("tJavaRow_5", System.currentTimeMillis());
		
	
	currentComponent="tJavaRow_5";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row20");
					}
				
		int tos_count_tJavaRow_5 = 0;
		

int nb_line_tJavaRow_5 = 0;

 



/**
 * [tJavaRow_5 begin ] stop
 */



	
	/**
	 * [tOracleInput_7 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_7", false);
		start_Hash.put("tOracleInput_7", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_7";
	
	
		int tos_count_tOracleInput_7 = 0;
		
	


	
		    int nb_line_tOracleInput_7 = 0;
		    java.sql.Connection conn_tOracleInput_7 = null;
				conn_tOracleInput_7 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");
				
                boolean isTimeZoneNull_tOracleInput_7 = false;
				boolean isConnectionWrapped_tOracleInput_7 = !(conn_tOracleInput_7 instanceof oracle.jdbc.OracleConnection) && conn_tOracleInput_7.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tOracleInput_7 = null;
                if (isConnectionWrapped_tOracleInput_7) {
					unwrappedOraConn_tOracleInput_7 = conn_tOracleInput_7.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tOracleInput_7 != null) {
                        isTimeZoneNull_tOracleInput_7 = (unwrappedOraConn_tOracleInput_7.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tOracleInput_7 = (((oracle.jdbc.OracleConnection)conn_tOracleInput_7).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tOracleInput_7) {
					java.sql.Statement stmtGetTZ_tOracleInput_7 = conn_tOracleInput_7.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_7 = stmtGetTZ_tOracleInput_7.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_7 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tOracleInput_7.next()) {
						sessionTimezone_tOracleInput_7 = rsGetTZ_tOracleInput_7.getString(1);
					}
					if (isConnectionWrapped_tOracleInput_7 && unwrappedOraConn_tOracleInput_7 != null) {
                        unwrappedOraConn_tOracleInput_7.setSessionTimeZone(sessionTimezone_tOracleInput_7);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_7).setSessionTimeZone(sessionTimezone_tOracleInput_7);
                    }
				}
			
		    
			java.sql.Statement stmt_tOracleInput_7 = conn_tOracleInput_7.createStatement();

		    String dbquery_tOracleInput_7 = "SELECT\n	AU.ID AS AUDITORIA_ID,\n    AR.VTOTALCALCULADO,\n    AU.VGLOSADO AS TGLOSA,\n    AU.VACEPTADO AS TACEPTADO,\n "
+"   AU.VSOPORTADO AS TSOPORTADO,\n    TO_NUMBER(0) AS TRATIFICADA,\n    AU.VAVALPAGO,\n    TO_NUMBER(0) AS PORCETAJE_GLOS"
+"A\nFROM  ACM_RECEPCION    AR \nINNER JOIN ACM_AUDITORIAS AU ON AU.RECEPCION_ID = AR.ID \nWHERE AR.ESTADO = 'Aprobado'\nA"
+"ND AR.ID =  '" + context.RECEPCION_ID + "'\nAND AR.ESTREGISTRO_ID = 1";
		    

		    globalMap.put("tOracleInput_7_QUERY",dbquery_tOracleInput_7);

		    java.sql.ResultSet rs_tOracleInput_7 = null;

		    try {
		    	rs_tOracleInput_7 = stmt_tOracleInput_7.executeQuery(dbquery_tOracleInput_7);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_7 = rs_tOracleInput_7.getMetaData();
		    	int colQtyInRs_tOracleInput_7 = rsmd_tOracleInput_7.getColumnCount();

		    String tmpContent_tOracleInput_7 = null;
		    
		    
		    while (rs_tOracleInput_7.next()) {
		        nb_line_tOracleInput_7++;
		        
							if(colQtyInRs_tOracleInput_7 < 1) {
								row20.AUDITORIA_ID = null;
							} else {
		                          
					if(rs_tOracleInput_7.getObject(1) != null) {
						row20.AUDITORIA_ID = rs_tOracleInput_7.getBigDecimal(1);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_7 < 2) {
								row20.VTOTALCALCULADO = null;
							} else {
		                          
					if(rs_tOracleInput_7.getObject(2) != null) {
						row20.VTOTALCALCULADO = rs_tOracleInput_7.getBigDecimal(2);
					} else {
				
						row20.VTOTALCALCULADO = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_7 < 3) {
								row20.TGLOSA = null;
							} else {
		                          
					if(rs_tOracleInput_7.getObject(3) != null) {
						row20.TGLOSA = rs_tOracleInput_7.getBigDecimal(3);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_7 < 4) {
								row20.TACEPTADO = null;
							} else {
		                          
					if(rs_tOracleInput_7.getObject(4) != null) {
						row20.TACEPTADO = rs_tOracleInput_7.getBigDecimal(4);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_7 < 5) {
								row20.TSOPORTADO = null;
							} else {
		                          
					if(rs_tOracleInput_7.getObject(5) != null) {
						row20.TSOPORTADO = rs_tOracleInput_7.getBigDecimal(5);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_7 < 6) {
								row20.TRATIFICADA = null;
							} else {
		                          
					if(rs_tOracleInput_7.getObject(6) != null) {
						row20.TRATIFICADA = rs_tOracleInput_7.getBigDecimal(6);
					} else {
				
						row20.TRATIFICADA = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_7 < 7) {
								row20.VAVALPAGO = null;
							} else {
		                          
					if(rs_tOracleInput_7.getObject(7) != null) {
						row20.VAVALPAGO = rs_tOracleInput_7.getBigDecimal(7);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_7 < 8) {
								row20.PORCETAJE_GLOSA = null;
							} else {
		                          
					if(rs_tOracleInput_7.getObject(8) != null) {
						row20.PORCETAJE_GLOSA = rs_tOracleInput_7.getBigDecimal(8);
					} else {
				
						row20.PORCETAJE_GLOSA = null;
					}
		                    }
					




 



/**
 * [tOracleInput_7 begin ] stop
 */
	
	/**
	 * [tOracleInput_7 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_7";
	
	

 


	tos_count_tOracleInput_7++;

/**
 * [tOracleInput_7 main ] stop
 */
	
	/**
	 * [tOracleInput_7 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_7";
	
	

 



/**
 * [tOracleInput_7 process_data_begin ] stop
 */

	
	/**
	 * [tJavaRow_5 main ] start
	 */

	

	
	
	currentComponent="tJavaRow_5";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row20"
						
						);
					}
					

    if(row20.TRATIFICADA.equals(0))
{
	context.fileSystem_Report = "ActaParcial";
}
else
{
	context.fileSystem_Report = "ActaFinal";
}


    nb_line_tJavaRow_5++;   

 


	tos_count_tJavaRow_5++;

/**
 * [tJavaRow_5 main ] stop
 */
	
	/**
	 * [tJavaRow_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJavaRow_5";
	
	

 



/**
 * [tJavaRow_5 process_data_begin ] stop
 */
	
	/**
	 * [tJavaRow_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tJavaRow_5";
	
	

 



/**
 * [tJavaRow_5 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_7 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_7";
	
	

 



/**
 * [tOracleInput_7 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_7 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_7";
	
	

}
}finally{
	if (rs_tOracleInput_7 != null) {
		rs_tOracleInput_7.close();
	}
	if (stmt_tOracleInput_7 != null) {
		stmt_tOracleInput_7.close();
	}
}

globalMap.put("tOracleInput_7_NB_LINE",nb_line_tOracleInput_7);
 

ok_Hash.put("tOracleInput_7", true);
end_Hash.put("tOracleInput_7", System.currentTimeMillis());




/**
 * [tOracleInput_7 end ] stop
 */

	
	/**
	 * [tJavaRow_5 end ] start
	 */

	

	
	
	currentComponent="tJavaRow_5";
	
	

globalMap.put("tJavaRow_5_NB_LINE",nb_line_tJavaRow_5);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row20");
			  	}
			  	
 

ok_Hash.put("tJavaRow_5", true);
end_Hash.put("tJavaRow_5", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk15", 0, "ok");
				}
				tJava_4Process(globalMap);



/**
 * [tJavaRow_5 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleInput_7 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_7";
	
	

 



/**
 * [tOracleInput_7 finally ] stop
 */

	
	/**
	 * [tJavaRow_5 finally ] start
	 */

	

	
	
	currentComponent="tJavaRow_5";
	
	

 



/**
 * [tJavaRow_5 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_7_SUBPROCESS_STATE", 1);
	}
	


public static class out2Struct implements routines.system.IPersistableRow<out2Struct> {
    final static byte[] commonByteArrayLock_ACM_ACTAS_Actas = new byte[0];
    static byte[] commonByteArray_ACM_ACTAS_Actas = new byte[0];

	
			    public String NUMERO_FACTURA;

				public String getNUMERO_FACTURA () {
					return this.NUMERO_FACTURA;
				}

				public Boolean NUMERO_FACTURAIsNullable(){
				    return true;
				}
				public Boolean NUMERO_FACTURAIsKey(){
				    return false;
				}
				public Integer NUMERO_FACTURALength(){
				    return 101;
				}
				public Integer NUMERO_FACTURAPrecision(){
				    return 0;
				}
				public String NUMERO_FACTURADefault(){
				
					return null;
				
				}
				public String NUMERO_FACTURAComment(){
				
				    return "";
				
				}
				public String NUMERO_FACTURAPattern(){
				
					return "";
				
				}
				public String NUMERO_FACTURAOriginalDbColumnName(){
				
					return "NUMERO_FACTURA";
				
				}

				
			    public String DOCUMENTO;

				public String getDOCUMENTO () {
					return this.DOCUMENTO;
				}

				public Boolean DOCUMENTOIsNullable(){
				    return true;
				}
				public Boolean DOCUMENTOIsKey(){
				    return false;
				}
				public Integer DOCUMENTOLength(){
				    return null;
				}
				public Integer DOCUMENTOPrecision(){
				    return null;
				}
				public String DOCUMENTODefault(){
				
					return null;
				
				}
				public String DOCUMENTOComment(){
				
				    return "";
				
				}
				public String DOCUMENTOPattern(){
				
					return "";
				
				}
				public String DOCUMENTOOriginalDbColumnName(){
				
					return "DOCUMENTO";
				
				}

				
			    public String PACIENTE;

				public String getPACIENTE () {
					return this.PACIENTE;
				}

				public Boolean PACIENTEIsNullable(){
				    return true;
				}
				public Boolean PACIENTEIsKey(){
				    return false;
				}
				public Integer PACIENTELength(){
				    return 400;
				}
				public Integer PACIENTEPrecision(){
				    return 0;
				}
				public String PACIENTEDefault(){
				
					return null;
				
				}
				public String PACIENTEComment(){
				
				    return "";
				
				}
				public String PACIENTEPattern(){
				
					return "";
				
				}
				public String PACIENTEOriginalDbColumnName(){
				
					return "PACIENTE";
				
				}

				
			    public String CODIGO;

				public String getCODIGO () {
					return this.CODIGO;
				}

				public Boolean CODIGOIsNullable(){
				    return true;
				}
				public Boolean CODIGOIsKey(){
				    return false;
				}
				public Integer CODIGOLength(){
				    return 400;
				}
				public Integer CODIGOPrecision(){
				    return 0;
				}
				public String CODIGODefault(){
				
					return null;
				
				}
				public String CODIGOComment(){
				
				    return "";
				
				}
				public String CODIGOPattern(){
				
					return "";
				
				}
				public String CODIGOOriginalDbColumnName(){
				
					return "CODIGO";
				
				}

				
			    public String CONCEPTO_GLOSA;

				public String getCONCEPTO_GLOSA () {
					return this.CONCEPTO_GLOSA;
				}

				public Boolean CONCEPTO_GLOSAIsNullable(){
				    return false;
				}
				public Boolean CONCEPTO_GLOSAIsKey(){
				    return false;
				}
				public Integer CONCEPTO_GLOSALength(){
				    return 2000;
				}
				public Integer CONCEPTO_GLOSAPrecision(){
				    return 0;
				}
				public String CONCEPTO_GLOSADefault(){
				
					return null;
				
				}
				public String CONCEPTO_GLOSAComment(){
				
				    return "";
				
				}
				public String CONCEPTO_GLOSAPattern(){
				
					return "";
				
				}
				public String CONCEPTO_GLOSAOriginalDbColumnName(){
				
					return "CONCEPTO_GLOSA";
				
				}

				
			    public String DESCRIPCION_GLOSA;

				public String getDESCRIPCION_GLOSA () {
					return this.DESCRIPCION_GLOSA;
				}

				public Boolean DESCRIPCION_GLOSAIsNullable(){
				    return false;
				}
				public Boolean DESCRIPCION_GLOSAIsKey(){
				    return false;
				}
				public Integer DESCRIPCION_GLOSALength(){
				    return 4000;
				}
				public Integer DESCRIPCION_GLOSAPrecision(){
				    return 0;
				}
				public String DESCRIPCION_GLOSADefault(){
				
					return null;
				
				}
				public String DESCRIPCION_GLOSAComment(){
				
				    return "";
				
				}
				public String DESCRIPCION_GLOSAPattern(){
				
					return "";
				
				}
				public String DESCRIPCION_GLOSAOriginalDbColumnName(){
				
					return "DESCRIPCION_GLOSA";
				
				}

				
			    public String VALOR_SERVICIO;

				public String getVALOR_SERVICIO () {
					return this.VALOR_SERVICIO;
				}

				public Boolean VALOR_SERVICIOIsNullable(){
				    return true;
				}
				public Boolean VALOR_SERVICIOIsKey(){
				    return false;
				}
				public Integer VALOR_SERVICIOLength(){
				    return null;
				}
				public Integer VALOR_SERVICIOPrecision(){
				    return null;
				}
				public String VALOR_SERVICIODefault(){
				
					return null;
				
				}
				public String VALOR_SERVICIOComment(){
				
				    return "";
				
				}
				public String VALOR_SERVICIOPattern(){
				
					return "";
				
				}
				public String VALOR_SERVICIOOriginalDbColumnName(){
				
					return "VALOR_SERVICIO";
				
				}

				
			    public String VALOR_GLOSADO;

				public String getVALOR_GLOSADO () {
					return this.VALOR_GLOSADO;
				}

				public Boolean VALOR_GLOSADOIsNullable(){
				    return true;
				}
				public Boolean VALOR_GLOSADOIsKey(){
				    return false;
				}
				public Integer VALOR_GLOSADOLength(){
				    return null;
				}
				public Integer VALOR_GLOSADOPrecision(){
				    return null;
				}
				public String VALOR_GLOSADODefault(){
				
					return null;
				
				}
				public String VALOR_GLOSADOComment(){
				
				    return "";
				
				}
				public String VALOR_GLOSADOPattern(){
				
					return "";
				
				}
				public String VALOR_GLOSADOOriginalDbColumnName(){
				
					return "VALOR_GLOSADO";
				
				}

				
			    public String VALOR_COBRADO;

				public String getVALOR_COBRADO () {
					return this.VALOR_COBRADO;
				}

				public Boolean VALOR_COBRADOIsNullable(){
				    return true;
				}
				public Boolean VALOR_COBRADOIsKey(){
				    return false;
				}
				public Integer VALOR_COBRADOLength(){
				    return null;
				}
				public Integer VALOR_COBRADOPrecision(){
				    return null;
				}
				public String VALOR_COBRADODefault(){
				
					return null;
				
				}
				public String VALOR_COBRADOComment(){
				
				    return "";
				
				}
				public String VALOR_COBRADOPattern(){
				
					return "";
				
				}
				public String VALOR_COBRADOOriginalDbColumnName(){
				
					return "VALOR_COBRADO";
				
				}

				
			    public String VALOR_NETO;

				public String getVALOR_NETO () {
					return this.VALOR_NETO;
				}

				public Boolean VALOR_NETOIsNullable(){
				    return true;
				}
				public Boolean VALOR_NETOIsKey(){
				    return false;
				}
				public Integer VALOR_NETOLength(){
				    return null;
				}
				public Integer VALOR_NETOPrecision(){
				    return null;
				}
				public String VALOR_NETODefault(){
				
					return null;
				
				}
				public String VALOR_NETOComment(){
				
				    return "";
				
				}
				public String VALOR_NETOPattern(){
				
					return "";
				
				}
				public String VALOR_NETOOriginalDbColumnName(){
				
					return "VALOR_NETO";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_ACTAS_Actas.length) {
				if(length < 1024 && commonByteArray_ACM_ACTAS_Actas.length == 0) {
   					commonByteArray_ACM_ACTAS_Actas = new byte[1024];
				} else {
   					commonByteArray_ACM_ACTAS_Actas = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ACM_ACTAS_Actas, 0, length);
			strReturn = new String(commonByteArray_ACM_ACTAS_Actas, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_ACTAS_Actas.length) {
				if(length < 1024 && commonByteArray_ACM_ACTAS_Actas.length == 0) {
   					commonByteArray_ACM_ACTAS_Actas = new byte[1024];
				} else {
   					commonByteArray_ACM_ACTAS_Actas = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_ACM_ACTAS_Actas, 0, length);
			strReturn = new String(commonByteArray_ACM_ACTAS_Actas, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ACM_ACTAS_Actas) {

        	try {

        		int length = 0;
		
					this.NUMERO_FACTURA = readString(dis);
					
					this.DOCUMENTO = readString(dis);
					
					this.PACIENTE = readString(dis);
					
					this.CODIGO = readString(dis);
					
					this.CONCEPTO_GLOSA = readString(dis);
					
					this.DESCRIPCION_GLOSA = readString(dis);
					
					this.VALOR_SERVICIO = readString(dis);
					
					this.VALOR_GLOSADO = readString(dis);
					
					this.VALOR_COBRADO = readString(dis);
					
					this.VALOR_NETO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ACM_ACTAS_Actas) {

        	try {

        		int length = 0;
		
					this.NUMERO_FACTURA = readString(dis);
					
					this.DOCUMENTO = readString(dis);
					
					this.PACIENTE = readString(dis);
					
					this.CODIGO = readString(dis);
					
					this.CONCEPTO_GLOSA = readString(dis);
					
					this.DESCRIPCION_GLOSA = readString(dis);
					
					this.VALOR_SERVICIO = readString(dis);
					
					this.VALOR_GLOSADO = readString(dis);
					
					this.VALOR_COBRADO = readString(dis);
					
					this.VALOR_NETO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.NUMERO_FACTURA,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// String
				
						writeString(this.PACIENTE,dos);
					
					// String
				
						writeString(this.CODIGO,dos);
					
					// String
				
						writeString(this.CONCEPTO_GLOSA,dos);
					
					// String
				
						writeString(this.DESCRIPCION_GLOSA,dos);
					
					// String
				
						writeString(this.VALOR_SERVICIO,dos);
					
					// String
				
						writeString(this.VALOR_GLOSADO,dos);
					
					// String
				
						writeString(this.VALOR_COBRADO,dos);
					
					// String
				
						writeString(this.VALOR_NETO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.NUMERO_FACTURA,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// String
				
						writeString(this.PACIENTE,dos);
					
					// String
				
						writeString(this.CODIGO,dos);
					
					// String
				
						writeString(this.CONCEPTO_GLOSA,dos);
					
					// String
				
						writeString(this.DESCRIPCION_GLOSA,dos);
					
					// String
				
						writeString(this.VALOR_SERVICIO,dos);
					
					// String
				
						writeString(this.VALOR_GLOSADO,dos);
					
					// String
				
						writeString(this.VALOR_COBRADO,dos);
					
					// String
				
						writeString(this.VALOR_NETO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("NUMERO_FACTURA="+NUMERO_FACTURA);
		sb.append(",DOCUMENTO="+DOCUMENTO);
		sb.append(",PACIENTE="+PACIENTE);
		sb.append(",CODIGO="+CODIGO);
		sb.append(",CONCEPTO_GLOSA="+CONCEPTO_GLOSA);
		sb.append(",DESCRIPCION_GLOSA="+DESCRIPCION_GLOSA);
		sb.append(",VALOR_SERVICIO="+VALOR_SERVICIO);
		sb.append(",VALOR_GLOSADO="+VALOR_GLOSADO);
		sb.append(",VALOR_COBRADO="+VALOR_COBRADO);
		sb.append(",VALOR_NETO="+VALOR_NETO);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(out2Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row10Struct implements routines.system.IPersistableRow<row10Struct> {
    final static byte[] commonByteArrayLock_ACM_ACTAS_Actas = new byte[0];
    static byte[] commonByteArray_ACM_ACTAS_Actas = new byte[0];

	
			    public String NUMERO_FACTURA;

				public String getNUMERO_FACTURA () {
					return this.NUMERO_FACTURA;
				}

				public Boolean NUMERO_FACTURAIsNullable(){
				    return true;
				}
				public Boolean NUMERO_FACTURAIsKey(){
				    return false;
				}
				public Integer NUMERO_FACTURALength(){
				    return 101;
				}
				public Integer NUMERO_FACTURAPrecision(){
				    return 0;
				}
				public String NUMERO_FACTURADefault(){
				
					return null;
				
				}
				public String NUMERO_FACTURAComment(){
				
				    return "";
				
				}
				public String NUMERO_FACTURAPattern(){
				
					return "";
				
				}
				public String NUMERO_FACTURAOriginalDbColumnName(){
				
					return "NUMERO_FACTURA";
				
				}

				
			    public String DOCUMENTO;

				public String getDOCUMENTO () {
					return this.DOCUMENTO;
				}

				public Boolean DOCUMENTOIsNullable(){
				    return true;
				}
				public Boolean DOCUMENTOIsKey(){
				    return false;
				}
				public Integer DOCUMENTOLength(){
				    return null;
				}
				public Integer DOCUMENTOPrecision(){
				    return null;
				}
				public String DOCUMENTODefault(){
				
					return null;
				
				}
				public String DOCUMENTOComment(){
				
				    return "";
				
				}
				public String DOCUMENTOPattern(){
				
					return "";
				
				}
				public String DOCUMENTOOriginalDbColumnName(){
				
					return "DOCUMENTO";
				
				}

				
			    public String PACIENTE;

				public String getPACIENTE () {
					return this.PACIENTE;
				}

				public Boolean PACIENTEIsNullable(){
				    return true;
				}
				public Boolean PACIENTEIsKey(){
				    return false;
				}
				public Integer PACIENTELength(){
				    return 400;
				}
				public Integer PACIENTEPrecision(){
				    return 0;
				}
				public String PACIENTEDefault(){
				
					return null;
				
				}
				public String PACIENTEComment(){
				
				    return "";
				
				}
				public String PACIENTEPattern(){
				
					return "";
				
				}
				public String PACIENTEOriginalDbColumnName(){
				
					return "PACIENTE";
				
				}

				
			    public String CODIGO;

				public String getCODIGO () {
					return this.CODIGO;
				}

				public Boolean CODIGOIsNullable(){
				    return true;
				}
				public Boolean CODIGOIsKey(){
				    return false;
				}
				public Integer CODIGOLength(){
				    return 400;
				}
				public Integer CODIGOPrecision(){
				    return 0;
				}
				public String CODIGODefault(){
				
					return null;
				
				}
				public String CODIGOComment(){
				
				    return "";
				
				}
				public String CODIGOPattern(){
				
					return "";
				
				}
				public String CODIGOOriginalDbColumnName(){
				
					return "CODIGO";
				
				}

				
			    public String CONCEPTO_GLOSA;

				public String getCONCEPTO_GLOSA () {
					return this.CONCEPTO_GLOSA;
				}

				public Boolean CONCEPTO_GLOSAIsNullable(){
				    return false;
				}
				public Boolean CONCEPTO_GLOSAIsKey(){
				    return false;
				}
				public Integer CONCEPTO_GLOSALength(){
				    return 2000;
				}
				public Integer CONCEPTO_GLOSAPrecision(){
				    return 0;
				}
				public String CONCEPTO_GLOSADefault(){
				
					return null;
				
				}
				public String CONCEPTO_GLOSAComment(){
				
				    return "";
				
				}
				public String CONCEPTO_GLOSAPattern(){
				
					return "";
				
				}
				public String CONCEPTO_GLOSAOriginalDbColumnName(){
				
					return "CONCEPTO_GLOSA";
				
				}

				
			    public String DESCRIPCION_GLOSA;

				public String getDESCRIPCION_GLOSA () {
					return this.DESCRIPCION_GLOSA;
				}

				public Boolean DESCRIPCION_GLOSAIsNullable(){
				    return false;
				}
				public Boolean DESCRIPCION_GLOSAIsKey(){
				    return false;
				}
				public Integer DESCRIPCION_GLOSALength(){
				    return 4000;
				}
				public Integer DESCRIPCION_GLOSAPrecision(){
				    return 0;
				}
				public String DESCRIPCION_GLOSADefault(){
				
					return null;
				
				}
				public String DESCRIPCION_GLOSAComment(){
				
				    return "";
				
				}
				public String DESCRIPCION_GLOSAPattern(){
				
					return "";
				
				}
				public String DESCRIPCION_GLOSAOriginalDbColumnName(){
				
					return "DESCRIPCION_GLOSA";
				
				}

				
			    public BigDecimal VALOR_SERVICIO;

				public BigDecimal getVALOR_SERVICIO () {
					return this.VALOR_SERVICIO;
				}

				public Boolean VALOR_SERVICIOIsNullable(){
				    return true;
				}
				public Boolean VALOR_SERVICIOIsKey(){
				    return false;
				}
				public Integer VALOR_SERVICIOLength(){
				    return null;
				}
				public Integer VALOR_SERVICIOPrecision(){
				    return null;
				}
				public String VALOR_SERVICIODefault(){
				
					return null;
				
				}
				public String VALOR_SERVICIOComment(){
				
				    return "";
				
				}
				public String VALOR_SERVICIOPattern(){
				
					return "";
				
				}
				public String VALOR_SERVICIOOriginalDbColumnName(){
				
					return "VALOR_SERVICIO";
				
				}

				
			    public BigDecimal VALOR_GLOSADO;

				public BigDecimal getVALOR_GLOSADO () {
					return this.VALOR_GLOSADO;
				}

				public Boolean VALOR_GLOSADOIsNullable(){
				    return true;
				}
				public Boolean VALOR_GLOSADOIsKey(){
				    return false;
				}
				public Integer VALOR_GLOSADOLength(){
				    return 0;
				}
				public Integer VALOR_GLOSADOPrecision(){
				    return 0;
				}
				public String VALOR_GLOSADODefault(){
				
					return "";
				
				}
				public String VALOR_GLOSADOComment(){
				
				    return "";
				
				}
				public String VALOR_GLOSADOPattern(){
				
					return "";
				
				}
				public String VALOR_GLOSADOOriginalDbColumnName(){
				
					return "VALOR_GLOSADO";
				
				}

				
			    public BigDecimal VALOR_COBRADO;

				public BigDecimal getVALOR_COBRADO () {
					return this.VALOR_COBRADO;
				}

				public Boolean VALOR_COBRADOIsNullable(){
				    return true;
				}
				public Boolean VALOR_COBRADOIsKey(){
				    return false;
				}
				public Integer VALOR_COBRADOLength(){
				    return 0;
				}
				public Integer VALOR_COBRADOPrecision(){
				    return 0;
				}
				public String VALOR_COBRADODefault(){
				
					return null;
				
				}
				public String VALOR_COBRADOComment(){
				
				    return "";
				
				}
				public String VALOR_COBRADOPattern(){
				
					return "";
				
				}
				public String VALOR_COBRADOOriginalDbColumnName(){
				
					return "VALOR_COBRADO";
				
				}

				
			    public BigDecimal VALOR_NETO;

				public BigDecimal getVALOR_NETO () {
					return this.VALOR_NETO;
				}

				public Boolean VALOR_NETOIsNullable(){
				    return true;
				}
				public Boolean VALOR_NETOIsKey(){
				    return false;
				}
				public Integer VALOR_NETOLength(){
				    return 0;
				}
				public Integer VALOR_NETOPrecision(){
				    return 0;
				}
				public String VALOR_NETODefault(){
				
					return null;
				
				}
				public String VALOR_NETOComment(){
				
				    return "";
				
				}
				public String VALOR_NETOPattern(){
				
					return "";
				
				}
				public String VALOR_NETOOriginalDbColumnName(){
				
					return "VALOR_NETO";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_ACTAS_Actas.length) {
				if(length < 1024 && commonByteArray_ACM_ACTAS_Actas.length == 0) {
   					commonByteArray_ACM_ACTAS_Actas = new byte[1024];
				} else {
   					commonByteArray_ACM_ACTAS_Actas = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ACM_ACTAS_Actas, 0, length);
			strReturn = new String(commonByteArray_ACM_ACTAS_Actas, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_ACTAS_Actas.length) {
				if(length < 1024 && commonByteArray_ACM_ACTAS_Actas.length == 0) {
   					commonByteArray_ACM_ACTAS_Actas = new byte[1024];
				} else {
   					commonByteArray_ACM_ACTAS_Actas = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_ACM_ACTAS_Actas, 0, length);
			strReturn = new String(commonByteArray_ACM_ACTAS_Actas, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ACM_ACTAS_Actas) {

        	try {

        		int length = 0;
		
					this.NUMERO_FACTURA = readString(dis);
					
					this.DOCUMENTO = readString(dis);
					
					this.PACIENTE = readString(dis);
					
					this.CODIGO = readString(dis);
					
					this.CONCEPTO_GLOSA = readString(dis);
					
					this.DESCRIPCION_GLOSA = readString(dis);
					
						this.VALOR_SERVICIO = (BigDecimal) dis.readObject();
					
						this.VALOR_GLOSADO = (BigDecimal) dis.readObject();
					
						this.VALOR_COBRADO = (BigDecimal) dis.readObject();
					
						this.VALOR_NETO = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ACM_ACTAS_Actas) {

        	try {

        		int length = 0;
		
					this.NUMERO_FACTURA = readString(dis);
					
					this.DOCUMENTO = readString(dis);
					
					this.PACIENTE = readString(dis);
					
					this.CODIGO = readString(dis);
					
					this.CONCEPTO_GLOSA = readString(dis);
					
					this.DESCRIPCION_GLOSA = readString(dis);
					
						this.VALOR_SERVICIO = (BigDecimal) dis.readObject();
					
						this.VALOR_GLOSADO = (BigDecimal) dis.readObject();
					
						this.VALOR_COBRADO = (BigDecimal) dis.readObject();
					
						this.VALOR_NETO = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.NUMERO_FACTURA,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// String
				
						writeString(this.PACIENTE,dos);
					
					// String
				
						writeString(this.CODIGO,dos);
					
					// String
				
						writeString(this.CONCEPTO_GLOSA,dos);
					
					// String
				
						writeString(this.DESCRIPCION_GLOSA,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VALOR_SERVICIO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VALOR_GLOSADO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VALOR_COBRADO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VALOR_NETO);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.NUMERO_FACTURA,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// String
				
						writeString(this.PACIENTE,dos);
					
					// String
				
						writeString(this.CODIGO,dos);
					
					// String
				
						writeString(this.CONCEPTO_GLOSA,dos);
					
					// String
				
						writeString(this.DESCRIPCION_GLOSA,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VALOR_SERVICIO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VALOR_GLOSADO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VALOR_COBRADO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VALOR_NETO);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("NUMERO_FACTURA="+NUMERO_FACTURA);
		sb.append(",DOCUMENTO="+DOCUMENTO);
		sb.append(",PACIENTE="+PACIENTE);
		sb.append(",CODIGO="+CODIGO);
		sb.append(",CONCEPTO_GLOSA="+CONCEPTO_GLOSA);
		sb.append(",DESCRIPCION_GLOSA="+DESCRIPCION_GLOSA);
		sb.append(",VALOR_SERVICIO="+String.valueOf(VALOR_SERVICIO));
		sb.append(",VALOR_GLOSADO="+String.valueOf(VALOR_GLOSADO));
		sb.append(",VALOR_COBRADO="+String.valueOf(VALOR_COBRADO));
		sb.append(",VALOR_NETO="+String.valueOf(VALOR_NETO));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row10Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class out1Struct implements routines.system.IPersistableRow<out1Struct> {
    final static byte[] commonByteArrayLock_ACM_ACTAS_Actas = new byte[0];
    static byte[] commonByteArray_ACM_ACTAS_Actas = new byte[0];

	
			    public BigDecimal FACTURA_ID;

				public BigDecimal getFACTURA_ID () {
					return this.FACTURA_ID;
				}

				public Boolean FACTURA_IDIsNullable(){
				    return true;
				}
				public Boolean FACTURA_IDIsKey(){
				    return false;
				}
				public Integer FACTURA_IDLength(){
				    return null;
				}
				public Integer FACTURA_IDPrecision(){
				    return null;
				}
				public String FACTURA_IDDefault(){
				
					return null;
				
				}
				public String FACTURA_IDComment(){
				
				    return "";
				
				}
				public String FACTURA_IDPattern(){
				
					return "";
				
				}
				public String FACTURA_IDOriginalDbColumnName(){
				
					return "FACTURA_ID";
				
				}

				
			    public String NUMERO_FACTURA;

				public String getNUMERO_FACTURA () {
					return this.NUMERO_FACTURA;
				}

				public Boolean NUMERO_FACTURAIsNullable(){
				    return true;
				}
				public Boolean NUMERO_FACTURAIsKey(){
				    return false;
				}
				public Integer NUMERO_FACTURALength(){
				    return 101;
				}
				public Integer NUMERO_FACTURAPrecision(){
				    return 0;
				}
				public String NUMERO_FACTURADefault(){
				
					return null;
				
				}
				public String NUMERO_FACTURAComment(){
				
				    return "";
				
				}
				public String NUMERO_FACTURAPattern(){
				
					return "";
				
				}
				public String NUMERO_FACTURAOriginalDbColumnName(){
				
					return "NUMERO_FACTURA";
				
				}

				
			    public String DOCUMENTO;

				public String getDOCUMENTO () {
					return this.DOCUMENTO;
				}

				public Boolean DOCUMENTOIsNullable(){
				    return true;
				}
				public Boolean DOCUMENTOIsKey(){
				    return false;
				}
				public Integer DOCUMENTOLength(){
				    return null;
				}
				public Integer DOCUMENTOPrecision(){
				    return null;
				}
				public String DOCUMENTODefault(){
				
					return null;
				
				}
				public String DOCUMENTOComment(){
				
				    return "";
				
				}
				public String DOCUMENTOPattern(){
				
					return "";
				
				}
				public String DOCUMENTOOriginalDbColumnName(){
				
					return "DOCUMENTO";
				
				}

				
			    public String PACIENTE;

				public String getPACIENTE () {
					return this.PACIENTE;
				}

				public Boolean PACIENTEIsNullable(){
				    return true;
				}
				public Boolean PACIENTEIsKey(){
				    return false;
				}
				public Integer PACIENTELength(){
				    return 400;
				}
				public Integer PACIENTEPrecision(){
				    return 0;
				}
				public String PACIENTEDefault(){
				
					return null;
				
				}
				public String PACIENTEComment(){
				
				    return "";
				
				}
				public String PACIENTEPattern(){
				
					return "";
				
				}
				public String PACIENTEOriginalDbColumnName(){
				
					return "PACIENTE";
				
				}

				
			    public String CODIGO;

				public String getCODIGO () {
					return this.CODIGO;
				}

				public Boolean CODIGOIsNullable(){
				    return true;
				}
				public Boolean CODIGOIsKey(){
				    return false;
				}
				public Integer CODIGOLength(){
				    return 400;
				}
				public Integer CODIGOPrecision(){
				    return 0;
				}
				public String CODIGODefault(){
				
					return null;
				
				}
				public String CODIGOComment(){
				
				    return "";
				
				}
				public String CODIGOPattern(){
				
					return "";
				
				}
				public String CODIGOOriginalDbColumnName(){
				
					return "CODIGO";
				
				}

				
			    public String CONCEPTO_GLOSA;

				public String getCONCEPTO_GLOSA () {
					return this.CONCEPTO_GLOSA;
				}

				public Boolean CONCEPTO_GLOSAIsNullable(){
				    return false;
				}
				public Boolean CONCEPTO_GLOSAIsKey(){
				    return false;
				}
				public Integer CONCEPTO_GLOSALength(){
				    return 2000;
				}
				public Integer CONCEPTO_GLOSAPrecision(){
				    return 0;
				}
				public String CONCEPTO_GLOSADefault(){
				
					return null;
				
				}
				public String CONCEPTO_GLOSAComment(){
				
				    return "";
				
				}
				public String CONCEPTO_GLOSAPattern(){
				
					return "";
				
				}
				public String CONCEPTO_GLOSAOriginalDbColumnName(){
				
					return "CONCEPTO_GLOSA";
				
				}

				
			    public String DESCRIPCION_GLOSA;

				public String getDESCRIPCION_GLOSA () {
					return this.DESCRIPCION_GLOSA;
				}

				public Boolean DESCRIPCION_GLOSAIsNullable(){
				    return false;
				}
				public Boolean DESCRIPCION_GLOSAIsKey(){
				    return false;
				}
				public Integer DESCRIPCION_GLOSALength(){
				    return 4000;
				}
				public Integer DESCRIPCION_GLOSAPrecision(){
				    return 0;
				}
				public String DESCRIPCION_GLOSADefault(){
				
					return null;
				
				}
				public String DESCRIPCION_GLOSAComment(){
				
				    return "";
				
				}
				public String DESCRIPCION_GLOSAPattern(){
				
					return "";
				
				}
				public String DESCRIPCION_GLOSAOriginalDbColumnName(){
				
					return "DESCRIPCION_GLOSA";
				
				}

				
			    public BigDecimal VALOR_SERVICIO;

				public BigDecimal getVALOR_SERVICIO () {
					return this.VALOR_SERVICIO;
				}

				public Boolean VALOR_SERVICIOIsNullable(){
				    return true;
				}
				public Boolean VALOR_SERVICIOIsKey(){
				    return false;
				}
				public Integer VALOR_SERVICIOLength(){
				    return 0;
				}
				public Integer VALOR_SERVICIOPrecision(){
				    return 0;
				}
				public String VALOR_SERVICIODefault(){
				
					return null;
				
				}
				public String VALOR_SERVICIOComment(){
				
				    return "";
				
				}
				public String VALOR_SERVICIOPattern(){
				
					return "";
				
				}
				public String VALOR_SERVICIOOriginalDbColumnName(){
				
					return "VALOR_SERVICIO";
				
				}

				
			    public BigDecimal VALOR_GLOSADO;

				public BigDecimal getVALOR_GLOSADO () {
					return this.VALOR_GLOSADO;
				}

				public Boolean VALOR_GLOSADOIsNullable(){
				    return true;
				}
				public Boolean VALOR_GLOSADOIsKey(){
				    return false;
				}
				public Integer VALOR_GLOSADOLength(){
				    return 0;
				}
				public Integer VALOR_GLOSADOPrecision(){
				    return 0;
				}
				public String VALOR_GLOSADODefault(){
				
					return "";
				
				}
				public String VALOR_GLOSADOComment(){
				
				    return "";
				
				}
				public String VALOR_GLOSADOPattern(){
				
					return "";
				
				}
				public String VALOR_GLOSADOOriginalDbColumnName(){
				
					return "VALOR_GLOSADO";
				
				}

				
			    public BigDecimal VALOR_COBRADO;

				public BigDecimal getVALOR_COBRADO () {
					return this.VALOR_COBRADO;
				}

				public Boolean VALOR_COBRADOIsNullable(){
				    return true;
				}
				public Boolean VALOR_COBRADOIsKey(){
				    return false;
				}
				public Integer VALOR_COBRADOLength(){
				    return 0;
				}
				public Integer VALOR_COBRADOPrecision(){
				    return 0;
				}
				public String VALOR_COBRADODefault(){
				
					return null;
				
				}
				public String VALOR_COBRADOComment(){
				
				    return "";
				
				}
				public String VALOR_COBRADOPattern(){
				
					return "";
				
				}
				public String VALOR_COBRADOOriginalDbColumnName(){
				
					return "VALOR_COBRADO";
				
				}

				
			    public BigDecimal VALOR_NETO;

				public BigDecimal getVALOR_NETO () {
					return this.VALOR_NETO;
				}

				public Boolean VALOR_NETOIsNullable(){
				    return true;
				}
				public Boolean VALOR_NETOIsKey(){
				    return false;
				}
				public Integer VALOR_NETOLength(){
				    return 0;
				}
				public Integer VALOR_NETOPrecision(){
				    return 0;
				}
				public String VALOR_NETODefault(){
				
					return null;
				
				}
				public String VALOR_NETOComment(){
				
				    return "";
				
				}
				public String VALOR_NETOPattern(){
				
					return "";
				
				}
				public String VALOR_NETOOriginalDbColumnName(){
				
					return "VALOR_NETO";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_ACTAS_Actas.length) {
				if(length < 1024 && commonByteArray_ACM_ACTAS_Actas.length == 0) {
   					commonByteArray_ACM_ACTAS_Actas = new byte[1024];
				} else {
   					commonByteArray_ACM_ACTAS_Actas = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ACM_ACTAS_Actas, 0, length);
			strReturn = new String(commonByteArray_ACM_ACTAS_Actas, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_ACTAS_Actas.length) {
				if(length < 1024 && commonByteArray_ACM_ACTAS_Actas.length == 0) {
   					commonByteArray_ACM_ACTAS_Actas = new byte[1024];
				} else {
   					commonByteArray_ACM_ACTAS_Actas = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_ACM_ACTAS_Actas, 0, length);
			strReturn = new String(commonByteArray_ACM_ACTAS_Actas, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ACM_ACTAS_Actas) {

        	try {

        		int length = 0;
		
						this.FACTURA_ID = (BigDecimal) dis.readObject();
					
					this.NUMERO_FACTURA = readString(dis);
					
					this.DOCUMENTO = readString(dis);
					
					this.PACIENTE = readString(dis);
					
					this.CODIGO = readString(dis);
					
					this.CONCEPTO_GLOSA = readString(dis);
					
					this.DESCRIPCION_GLOSA = readString(dis);
					
						this.VALOR_SERVICIO = (BigDecimal) dis.readObject();
					
						this.VALOR_GLOSADO = (BigDecimal) dis.readObject();
					
						this.VALOR_COBRADO = (BigDecimal) dis.readObject();
					
						this.VALOR_NETO = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ACM_ACTAS_Actas) {

        	try {

        		int length = 0;
		
						this.FACTURA_ID = (BigDecimal) dis.readObject();
					
					this.NUMERO_FACTURA = readString(dis);
					
					this.DOCUMENTO = readString(dis);
					
					this.PACIENTE = readString(dis);
					
					this.CODIGO = readString(dis);
					
					this.CONCEPTO_GLOSA = readString(dis);
					
					this.DESCRIPCION_GLOSA = readString(dis);
					
						this.VALOR_SERVICIO = (BigDecimal) dis.readObject();
					
						this.VALOR_GLOSADO = (BigDecimal) dis.readObject();
					
						this.VALOR_COBRADO = (BigDecimal) dis.readObject();
					
						this.VALOR_NETO = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.FACTURA_ID);
					
					// String
				
						writeString(this.NUMERO_FACTURA,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// String
				
						writeString(this.PACIENTE,dos);
					
					// String
				
						writeString(this.CODIGO,dos);
					
					// String
				
						writeString(this.CONCEPTO_GLOSA,dos);
					
					// String
				
						writeString(this.DESCRIPCION_GLOSA,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VALOR_SERVICIO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VALOR_GLOSADO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VALOR_COBRADO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VALOR_NETO);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.FACTURA_ID);
					
					// String
				
						writeString(this.NUMERO_FACTURA,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// String
				
						writeString(this.PACIENTE,dos);
					
					// String
				
						writeString(this.CODIGO,dos);
					
					// String
				
						writeString(this.CONCEPTO_GLOSA,dos);
					
					// String
				
						writeString(this.DESCRIPCION_GLOSA,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VALOR_SERVICIO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VALOR_GLOSADO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VALOR_COBRADO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VALOR_NETO);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("FACTURA_ID="+String.valueOf(FACTURA_ID));
		sb.append(",NUMERO_FACTURA="+NUMERO_FACTURA);
		sb.append(",DOCUMENTO="+DOCUMENTO);
		sb.append(",PACIENTE="+PACIENTE);
		sb.append(",CODIGO="+CODIGO);
		sb.append(",CONCEPTO_GLOSA="+CONCEPTO_GLOSA);
		sb.append(",DESCRIPCION_GLOSA="+DESCRIPCION_GLOSA);
		sb.append(",VALOR_SERVICIO="+String.valueOf(VALOR_SERVICIO));
		sb.append(",VALOR_GLOSADO="+String.valueOf(VALOR_GLOSADO));
		sb.append(",VALOR_COBRADO="+String.valueOf(VALOR_COBRADO));
		sb.append(",VALOR_NETO="+String.valueOf(VALOR_NETO));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(out1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row23Struct implements routines.system.IPersistableRow<row23Struct> {
    final static byte[] commonByteArrayLock_ACM_ACTAS_Actas = new byte[0];
    static byte[] commonByteArray_ACM_ACTAS_Actas = new byte[0];

	
			    public BigDecimal FACTURA_ID;

				public BigDecimal getFACTURA_ID () {
					return this.FACTURA_ID;
				}

				public Boolean FACTURA_IDIsNullable(){
				    return false;
				}
				public Boolean FACTURA_IDIsKey(){
				    return false;
				}
				public Integer FACTURA_IDLength(){
				    return null;
				}
				public Integer FACTURA_IDPrecision(){
				    return null;
				}
				public String FACTURA_IDDefault(){
				
					return "";
				
				}
				public String FACTURA_IDComment(){
				
				    return "";
				
				}
				public String FACTURA_IDPattern(){
				
					return "";
				
				}
				public String FACTURA_IDOriginalDbColumnName(){
				
					return "FACTURA_ID";
				
				}

				
			    public String NUMERO_FACTURA;

				public String getNUMERO_FACTURA () {
					return this.NUMERO_FACTURA;
				}

				public Boolean NUMERO_FACTURAIsNullable(){
				    return true;
				}
				public Boolean NUMERO_FACTURAIsKey(){
				    return false;
				}
				public Integer NUMERO_FACTURALength(){
				    return null;
				}
				public Integer NUMERO_FACTURAPrecision(){
				    return null;
				}
				public String NUMERO_FACTURADefault(){
				
					return null;
				
				}
				public String NUMERO_FACTURAComment(){
				
				    return "";
				
				}
				public String NUMERO_FACTURAPattern(){
				
					return "";
				
				}
				public String NUMERO_FACTURAOriginalDbColumnName(){
				
					return "NUMERO_FACTURA";
				
				}

				
			    public String DOCUMENTO;

				public String getDOCUMENTO () {
					return this.DOCUMENTO;
				}

				public Boolean DOCUMENTOIsNullable(){
				    return true;
				}
				public Boolean DOCUMENTOIsKey(){
				    return false;
				}
				public Integer DOCUMENTOLength(){
				    return null;
				}
				public Integer DOCUMENTOPrecision(){
				    return null;
				}
				public String DOCUMENTODefault(){
				
					return null;
				
				}
				public String DOCUMENTOComment(){
				
				    return "";
				
				}
				public String DOCUMENTOPattern(){
				
					return "";
				
				}
				public String DOCUMENTOOriginalDbColumnName(){
				
					return "DOCUMENTO";
				
				}

				
			    public String PACIENTE;

				public String getPACIENTE () {
					return this.PACIENTE;
				}

				public Boolean PACIENTEIsNullable(){
				    return true;
				}
				public Boolean PACIENTEIsKey(){
				    return false;
				}
				public Integer PACIENTELength(){
				    return null;
				}
				public Integer PACIENTEPrecision(){
				    return null;
				}
				public String PACIENTEDefault(){
				
					return null;
				
				}
				public String PACIENTEComment(){
				
				    return "";
				
				}
				public String PACIENTEPattern(){
				
					return "";
				
				}
				public String PACIENTEOriginalDbColumnName(){
				
					return "PACIENTE";
				
				}

				
			    public String CODIGO;

				public String getCODIGO () {
					return this.CODIGO;
				}

				public Boolean CODIGOIsNullable(){
				    return true;
				}
				public Boolean CODIGOIsKey(){
				    return false;
				}
				public Integer CODIGOLength(){
				    return null;
				}
				public Integer CODIGOPrecision(){
				    return null;
				}
				public String CODIGODefault(){
				
					return null;
				
				}
				public String CODIGOComment(){
				
				    return "";
				
				}
				public String CODIGOPattern(){
				
					return "";
				
				}
				public String CODIGOOriginalDbColumnName(){
				
					return "CODIGO";
				
				}

				
			    public String CONCEPTO_GLOSA;

				public String getCONCEPTO_GLOSA () {
					return this.CONCEPTO_GLOSA;
				}

				public Boolean CONCEPTO_GLOSAIsNullable(){
				    return true;
				}
				public Boolean CONCEPTO_GLOSAIsKey(){
				    return false;
				}
				public Integer CONCEPTO_GLOSALength(){
				    return null;
				}
				public Integer CONCEPTO_GLOSAPrecision(){
				    return null;
				}
				public String CONCEPTO_GLOSADefault(){
				
					return null;
				
				}
				public String CONCEPTO_GLOSAComment(){
				
				    return "";
				
				}
				public String CONCEPTO_GLOSAPattern(){
				
					return "";
				
				}
				public String CONCEPTO_GLOSAOriginalDbColumnName(){
				
					return "CONCEPTO_GLOSA";
				
				}

				
			    public String DESCRIPCION_GLOSA;

				public String getDESCRIPCION_GLOSA () {
					return this.DESCRIPCION_GLOSA;
				}

				public Boolean DESCRIPCION_GLOSAIsNullable(){
				    return true;
				}
				public Boolean DESCRIPCION_GLOSAIsKey(){
				    return false;
				}
				public Integer DESCRIPCION_GLOSALength(){
				    return null;
				}
				public Integer DESCRIPCION_GLOSAPrecision(){
				    return null;
				}
				public String DESCRIPCION_GLOSADefault(){
				
					return null;
				
				}
				public String DESCRIPCION_GLOSAComment(){
				
				    return "";
				
				}
				public String DESCRIPCION_GLOSAPattern(){
				
					return "";
				
				}
				public String DESCRIPCION_GLOSAOriginalDbColumnName(){
				
					return "DESCRIPCION_GLOSA";
				
				}

				
			    public BigDecimal VALOR_SERVICIO;

				public BigDecimal getVALOR_SERVICIO () {
					return this.VALOR_SERVICIO;
				}

				public Boolean VALOR_SERVICIOIsNullable(){
				    return true;
				}
				public Boolean VALOR_SERVICIOIsKey(){
				    return false;
				}
				public Integer VALOR_SERVICIOLength(){
				    return null;
				}
				public Integer VALOR_SERVICIOPrecision(){
				    return null;
				}
				public String VALOR_SERVICIODefault(){
				
					return "";
				
				}
				public String VALOR_SERVICIOComment(){
				
				    return "";
				
				}
				public String VALOR_SERVICIOPattern(){
				
					return "";
				
				}
				public String VALOR_SERVICIOOriginalDbColumnName(){
				
					return "VALOR_SERVICIO";
				
				}

				
			    public BigDecimal VALOR_GLOSADO;

				public BigDecimal getVALOR_GLOSADO () {
					return this.VALOR_GLOSADO;
				}

				public Boolean VALOR_GLOSADOIsNullable(){
				    return true;
				}
				public Boolean VALOR_GLOSADOIsKey(){
				    return false;
				}
				public Integer VALOR_GLOSADOLength(){
				    return null;
				}
				public Integer VALOR_GLOSADOPrecision(){
				    return null;
				}
				public String VALOR_GLOSADODefault(){
				
					return "";
				
				}
				public String VALOR_GLOSADOComment(){
				
				    return "";
				
				}
				public String VALOR_GLOSADOPattern(){
				
					return "";
				
				}
				public String VALOR_GLOSADOOriginalDbColumnName(){
				
					return "VALOR_GLOSADO";
				
				}

				
			    public BigDecimal VALOR_MCOBRADO;

				public BigDecimal getVALOR_MCOBRADO () {
					return this.VALOR_MCOBRADO;
				}

				public Boolean VALOR_MCOBRADOIsNullable(){
				    return true;
				}
				public Boolean VALOR_MCOBRADOIsKey(){
				    return false;
				}
				public Integer VALOR_MCOBRADOLength(){
				    return null;
				}
				public Integer VALOR_MCOBRADOPrecision(){
				    return null;
				}
				public String VALOR_MCOBRADODefault(){
				
					return "";
				
				}
				public String VALOR_MCOBRADOComment(){
				
				    return "";
				
				}
				public String VALOR_MCOBRADOPattern(){
				
					return "";
				
				}
				public String VALOR_MCOBRADOOriginalDbColumnName(){
				
					return "VALOR_MCOBRADO";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_ACTAS_Actas.length) {
				if(length < 1024 && commonByteArray_ACM_ACTAS_Actas.length == 0) {
   					commonByteArray_ACM_ACTAS_Actas = new byte[1024];
				} else {
   					commonByteArray_ACM_ACTAS_Actas = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ACM_ACTAS_Actas, 0, length);
			strReturn = new String(commonByteArray_ACM_ACTAS_Actas, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_ACTAS_Actas.length) {
				if(length < 1024 && commonByteArray_ACM_ACTAS_Actas.length == 0) {
   					commonByteArray_ACM_ACTAS_Actas = new byte[1024];
				} else {
   					commonByteArray_ACM_ACTAS_Actas = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_ACM_ACTAS_Actas, 0, length);
			strReturn = new String(commonByteArray_ACM_ACTAS_Actas, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ACM_ACTAS_Actas) {

        	try {

        		int length = 0;
		
						this.FACTURA_ID = (BigDecimal) dis.readObject();
					
					this.NUMERO_FACTURA = readString(dis);
					
					this.DOCUMENTO = readString(dis);
					
					this.PACIENTE = readString(dis);
					
					this.CODIGO = readString(dis);
					
					this.CONCEPTO_GLOSA = readString(dis);
					
					this.DESCRIPCION_GLOSA = readString(dis);
					
						this.VALOR_SERVICIO = (BigDecimal) dis.readObject();
					
						this.VALOR_GLOSADO = (BigDecimal) dis.readObject();
					
						this.VALOR_MCOBRADO = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ACM_ACTAS_Actas) {

        	try {

        		int length = 0;
		
						this.FACTURA_ID = (BigDecimal) dis.readObject();
					
					this.NUMERO_FACTURA = readString(dis);
					
					this.DOCUMENTO = readString(dis);
					
					this.PACIENTE = readString(dis);
					
					this.CODIGO = readString(dis);
					
					this.CONCEPTO_GLOSA = readString(dis);
					
					this.DESCRIPCION_GLOSA = readString(dis);
					
						this.VALOR_SERVICIO = (BigDecimal) dis.readObject();
					
						this.VALOR_GLOSADO = (BigDecimal) dis.readObject();
					
						this.VALOR_MCOBRADO = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.FACTURA_ID);
					
					// String
				
						writeString(this.NUMERO_FACTURA,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// String
				
						writeString(this.PACIENTE,dos);
					
					// String
				
						writeString(this.CODIGO,dos);
					
					// String
				
						writeString(this.CONCEPTO_GLOSA,dos);
					
					// String
				
						writeString(this.DESCRIPCION_GLOSA,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VALOR_SERVICIO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VALOR_GLOSADO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VALOR_MCOBRADO);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.FACTURA_ID);
					
					// String
				
						writeString(this.NUMERO_FACTURA,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// String
				
						writeString(this.PACIENTE,dos);
					
					// String
				
						writeString(this.CODIGO,dos);
					
					// String
				
						writeString(this.CONCEPTO_GLOSA,dos);
					
					// String
				
						writeString(this.DESCRIPCION_GLOSA,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VALOR_SERVICIO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VALOR_GLOSADO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VALOR_MCOBRADO);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("FACTURA_ID="+String.valueOf(FACTURA_ID));
		sb.append(",NUMERO_FACTURA="+NUMERO_FACTURA);
		sb.append(",DOCUMENTO="+DOCUMENTO);
		sb.append(",PACIENTE="+PACIENTE);
		sb.append(",CODIGO="+CODIGO);
		sb.append(",CONCEPTO_GLOSA="+CONCEPTO_GLOSA);
		sb.append(",DESCRIPCION_GLOSA="+DESCRIPCION_GLOSA);
		sb.append(",VALOR_SERVICIO="+String.valueOf(VALOR_SERVICIO));
		sb.append(",VALOR_GLOSADO="+String.valueOf(VALOR_GLOSADO));
		sb.append(",VALOR_MCOBRADO="+String.valueOf(VALOR_MCOBRADO));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row23Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class OnRowsEndStructtSortRow_1 implements routines.system.IPersistableRow<OnRowsEndStructtSortRow_1> {
    final static byte[] commonByteArrayLock_ACM_ACTAS_Actas = new byte[0];
    static byte[] commonByteArray_ACM_ACTAS_Actas = new byte[0];

	
			    public BigDecimal FACTURA_ID;

				public BigDecimal getFACTURA_ID () {
					return this.FACTURA_ID;
				}

				public Boolean FACTURA_IDIsNullable(){
				    return false;
				}
				public Boolean FACTURA_IDIsKey(){
				    return false;
				}
				public Integer FACTURA_IDLength(){
				    return null;
				}
				public Integer FACTURA_IDPrecision(){
				    return null;
				}
				public String FACTURA_IDDefault(){
				
					return "";
				
				}
				public String FACTURA_IDComment(){
				
				    return "";
				
				}
				public String FACTURA_IDPattern(){
				
					return "";
				
				}
				public String FACTURA_IDOriginalDbColumnName(){
				
					return "FACTURA_ID";
				
				}

				
			    public String NUMERO_FACTURA;

				public String getNUMERO_FACTURA () {
					return this.NUMERO_FACTURA;
				}

				public Boolean NUMERO_FACTURAIsNullable(){
				    return true;
				}
				public Boolean NUMERO_FACTURAIsKey(){
				    return false;
				}
				public Integer NUMERO_FACTURALength(){
				    return null;
				}
				public Integer NUMERO_FACTURAPrecision(){
				    return null;
				}
				public String NUMERO_FACTURADefault(){
				
					return null;
				
				}
				public String NUMERO_FACTURAComment(){
				
				    return "";
				
				}
				public String NUMERO_FACTURAPattern(){
				
					return "";
				
				}
				public String NUMERO_FACTURAOriginalDbColumnName(){
				
					return "NUMERO_FACTURA";
				
				}

				
			    public String DOCUMENTO;

				public String getDOCUMENTO () {
					return this.DOCUMENTO;
				}

				public Boolean DOCUMENTOIsNullable(){
				    return true;
				}
				public Boolean DOCUMENTOIsKey(){
				    return false;
				}
				public Integer DOCUMENTOLength(){
				    return null;
				}
				public Integer DOCUMENTOPrecision(){
				    return null;
				}
				public String DOCUMENTODefault(){
				
					return null;
				
				}
				public String DOCUMENTOComment(){
				
				    return "";
				
				}
				public String DOCUMENTOPattern(){
				
					return "";
				
				}
				public String DOCUMENTOOriginalDbColumnName(){
				
					return "DOCUMENTO";
				
				}

				
			    public String PACIENTE;

				public String getPACIENTE () {
					return this.PACIENTE;
				}

				public Boolean PACIENTEIsNullable(){
				    return true;
				}
				public Boolean PACIENTEIsKey(){
				    return false;
				}
				public Integer PACIENTELength(){
				    return null;
				}
				public Integer PACIENTEPrecision(){
				    return null;
				}
				public String PACIENTEDefault(){
				
					return null;
				
				}
				public String PACIENTEComment(){
				
				    return "";
				
				}
				public String PACIENTEPattern(){
				
					return "";
				
				}
				public String PACIENTEOriginalDbColumnName(){
				
					return "PACIENTE";
				
				}

				
			    public String CODIGO;

				public String getCODIGO () {
					return this.CODIGO;
				}

				public Boolean CODIGOIsNullable(){
				    return true;
				}
				public Boolean CODIGOIsKey(){
				    return false;
				}
				public Integer CODIGOLength(){
				    return null;
				}
				public Integer CODIGOPrecision(){
				    return null;
				}
				public String CODIGODefault(){
				
					return null;
				
				}
				public String CODIGOComment(){
				
				    return "";
				
				}
				public String CODIGOPattern(){
				
					return "";
				
				}
				public String CODIGOOriginalDbColumnName(){
				
					return "CODIGO";
				
				}

				
			    public String CONCEPTO_GLOSA;

				public String getCONCEPTO_GLOSA () {
					return this.CONCEPTO_GLOSA;
				}

				public Boolean CONCEPTO_GLOSAIsNullable(){
				    return true;
				}
				public Boolean CONCEPTO_GLOSAIsKey(){
				    return false;
				}
				public Integer CONCEPTO_GLOSALength(){
				    return null;
				}
				public Integer CONCEPTO_GLOSAPrecision(){
				    return null;
				}
				public String CONCEPTO_GLOSADefault(){
				
					return null;
				
				}
				public String CONCEPTO_GLOSAComment(){
				
				    return "";
				
				}
				public String CONCEPTO_GLOSAPattern(){
				
					return "";
				
				}
				public String CONCEPTO_GLOSAOriginalDbColumnName(){
				
					return "CONCEPTO_GLOSA";
				
				}

				
			    public String DESCRIPCION_GLOSA;

				public String getDESCRIPCION_GLOSA () {
					return this.DESCRIPCION_GLOSA;
				}

				public Boolean DESCRIPCION_GLOSAIsNullable(){
				    return true;
				}
				public Boolean DESCRIPCION_GLOSAIsKey(){
				    return false;
				}
				public Integer DESCRIPCION_GLOSALength(){
				    return null;
				}
				public Integer DESCRIPCION_GLOSAPrecision(){
				    return null;
				}
				public String DESCRIPCION_GLOSADefault(){
				
					return null;
				
				}
				public String DESCRIPCION_GLOSAComment(){
				
				    return "";
				
				}
				public String DESCRIPCION_GLOSAPattern(){
				
					return "";
				
				}
				public String DESCRIPCION_GLOSAOriginalDbColumnName(){
				
					return "DESCRIPCION_GLOSA";
				
				}

				
			    public BigDecimal VALOR_SERVICIO;

				public BigDecimal getVALOR_SERVICIO () {
					return this.VALOR_SERVICIO;
				}

				public Boolean VALOR_SERVICIOIsNullable(){
				    return true;
				}
				public Boolean VALOR_SERVICIOIsKey(){
				    return false;
				}
				public Integer VALOR_SERVICIOLength(){
				    return null;
				}
				public Integer VALOR_SERVICIOPrecision(){
				    return null;
				}
				public String VALOR_SERVICIODefault(){
				
					return "";
				
				}
				public String VALOR_SERVICIOComment(){
				
				    return "";
				
				}
				public String VALOR_SERVICIOPattern(){
				
					return "";
				
				}
				public String VALOR_SERVICIOOriginalDbColumnName(){
				
					return "VALOR_SERVICIO";
				
				}

				
			    public BigDecimal VALOR_GLOSADO;

				public BigDecimal getVALOR_GLOSADO () {
					return this.VALOR_GLOSADO;
				}

				public Boolean VALOR_GLOSADOIsNullable(){
				    return true;
				}
				public Boolean VALOR_GLOSADOIsKey(){
				    return false;
				}
				public Integer VALOR_GLOSADOLength(){
				    return null;
				}
				public Integer VALOR_GLOSADOPrecision(){
				    return null;
				}
				public String VALOR_GLOSADODefault(){
				
					return "";
				
				}
				public String VALOR_GLOSADOComment(){
				
				    return "";
				
				}
				public String VALOR_GLOSADOPattern(){
				
					return "";
				
				}
				public String VALOR_GLOSADOOriginalDbColumnName(){
				
					return "VALOR_GLOSADO";
				
				}

				
			    public BigDecimal VALOR_MCOBRADO;

				public BigDecimal getVALOR_MCOBRADO () {
					return this.VALOR_MCOBRADO;
				}

				public Boolean VALOR_MCOBRADOIsNullable(){
				    return true;
				}
				public Boolean VALOR_MCOBRADOIsKey(){
				    return false;
				}
				public Integer VALOR_MCOBRADOLength(){
				    return null;
				}
				public Integer VALOR_MCOBRADOPrecision(){
				    return null;
				}
				public String VALOR_MCOBRADODefault(){
				
					return "";
				
				}
				public String VALOR_MCOBRADOComment(){
				
				    return "";
				
				}
				public String VALOR_MCOBRADOPattern(){
				
					return "";
				
				}
				public String VALOR_MCOBRADOOriginalDbColumnName(){
				
					return "VALOR_MCOBRADO";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_ACTAS_Actas.length) {
				if(length < 1024 && commonByteArray_ACM_ACTAS_Actas.length == 0) {
   					commonByteArray_ACM_ACTAS_Actas = new byte[1024];
				} else {
   					commonByteArray_ACM_ACTAS_Actas = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ACM_ACTAS_Actas, 0, length);
			strReturn = new String(commonByteArray_ACM_ACTAS_Actas, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_ACTAS_Actas.length) {
				if(length < 1024 && commonByteArray_ACM_ACTAS_Actas.length == 0) {
   					commonByteArray_ACM_ACTAS_Actas = new byte[1024];
				} else {
   					commonByteArray_ACM_ACTAS_Actas = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_ACM_ACTAS_Actas, 0, length);
			strReturn = new String(commonByteArray_ACM_ACTAS_Actas, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ACM_ACTAS_Actas) {

        	try {

        		int length = 0;
		
						this.FACTURA_ID = (BigDecimal) dis.readObject();
					
					this.NUMERO_FACTURA = readString(dis);
					
					this.DOCUMENTO = readString(dis);
					
					this.PACIENTE = readString(dis);
					
					this.CODIGO = readString(dis);
					
					this.CONCEPTO_GLOSA = readString(dis);
					
					this.DESCRIPCION_GLOSA = readString(dis);
					
						this.VALOR_SERVICIO = (BigDecimal) dis.readObject();
					
						this.VALOR_GLOSADO = (BigDecimal) dis.readObject();
					
						this.VALOR_MCOBRADO = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ACM_ACTAS_Actas) {

        	try {

        		int length = 0;
		
						this.FACTURA_ID = (BigDecimal) dis.readObject();
					
					this.NUMERO_FACTURA = readString(dis);
					
					this.DOCUMENTO = readString(dis);
					
					this.PACIENTE = readString(dis);
					
					this.CODIGO = readString(dis);
					
					this.CONCEPTO_GLOSA = readString(dis);
					
					this.DESCRIPCION_GLOSA = readString(dis);
					
						this.VALOR_SERVICIO = (BigDecimal) dis.readObject();
					
						this.VALOR_GLOSADO = (BigDecimal) dis.readObject();
					
						this.VALOR_MCOBRADO = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.FACTURA_ID);
					
					// String
				
						writeString(this.NUMERO_FACTURA,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// String
				
						writeString(this.PACIENTE,dos);
					
					// String
				
						writeString(this.CODIGO,dos);
					
					// String
				
						writeString(this.CONCEPTO_GLOSA,dos);
					
					// String
				
						writeString(this.DESCRIPCION_GLOSA,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VALOR_SERVICIO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VALOR_GLOSADO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VALOR_MCOBRADO);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.FACTURA_ID);
					
					// String
				
						writeString(this.NUMERO_FACTURA,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// String
				
						writeString(this.PACIENTE,dos);
					
					// String
				
						writeString(this.CODIGO,dos);
					
					// String
				
						writeString(this.CONCEPTO_GLOSA,dos);
					
					// String
				
						writeString(this.DESCRIPCION_GLOSA,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VALOR_SERVICIO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VALOR_GLOSADO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VALOR_MCOBRADO);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("FACTURA_ID="+String.valueOf(FACTURA_ID));
		sb.append(",NUMERO_FACTURA="+NUMERO_FACTURA);
		sb.append(",DOCUMENTO="+DOCUMENTO);
		sb.append(",PACIENTE="+PACIENTE);
		sb.append(",CODIGO="+CODIGO);
		sb.append(",CONCEPTO_GLOSA="+CONCEPTO_GLOSA);
		sb.append(",DESCRIPCION_GLOSA="+DESCRIPCION_GLOSA);
		sb.append(",VALOR_SERVICIO="+String.valueOf(VALOR_SERVICIO));
		sb.append(",VALOR_GLOSADO="+String.valueOf(VALOR_GLOSADO));
		sb.append(",VALOR_MCOBRADO="+String.valueOf(VALOR_MCOBRADO));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(OnRowsEndStructtSortRow_1 other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row22Struct implements routines.system.IPersistableRow<row22Struct> {
    final static byte[] commonByteArrayLock_ACM_ACTAS_Actas = new byte[0];
    static byte[] commonByteArray_ACM_ACTAS_Actas = new byte[0];

	
			    public BigDecimal FACTURA_ID;

				public BigDecimal getFACTURA_ID () {
					return this.FACTURA_ID;
				}

				public Boolean FACTURA_IDIsNullable(){
				    return false;
				}
				public Boolean FACTURA_IDIsKey(){
				    return false;
				}
				public Integer FACTURA_IDLength(){
				    return null;
				}
				public Integer FACTURA_IDPrecision(){
				    return null;
				}
				public String FACTURA_IDDefault(){
				
					return "";
				
				}
				public String FACTURA_IDComment(){
				
				    return "";
				
				}
				public String FACTURA_IDPattern(){
				
					return "";
				
				}
				public String FACTURA_IDOriginalDbColumnName(){
				
					return "FACTURA_ID";
				
				}

				
			    public String NUMERO_FACTURA;

				public String getNUMERO_FACTURA () {
					return this.NUMERO_FACTURA;
				}

				public Boolean NUMERO_FACTURAIsNullable(){
				    return true;
				}
				public Boolean NUMERO_FACTURAIsKey(){
				    return false;
				}
				public Integer NUMERO_FACTURALength(){
				    return null;
				}
				public Integer NUMERO_FACTURAPrecision(){
				    return null;
				}
				public String NUMERO_FACTURADefault(){
				
					return null;
				
				}
				public String NUMERO_FACTURAComment(){
				
				    return "";
				
				}
				public String NUMERO_FACTURAPattern(){
				
					return "";
				
				}
				public String NUMERO_FACTURAOriginalDbColumnName(){
				
					return "NUMERO_FACTURA";
				
				}

				
			    public String DOCUMENTO;

				public String getDOCUMENTO () {
					return this.DOCUMENTO;
				}

				public Boolean DOCUMENTOIsNullable(){
				    return true;
				}
				public Boolean DOCUMENTOIsKey(){
				    return false;
				}
				public Integer DOCUMENTOLength(){
				    return null;
				}
				public Integer DOCUMENTOPrecision(){
				    return null;
				}
				public String DOCUMENTODefault(){
				
					return null;
				
				}
				public String DOCUMENTOComment(){
				
				    return "";
				
				}
				public String DOCUMENTOPattern(){
				
					return "";
				
				}
				public String DOCUMENTOOriginalDbColumnName(){
				
					return "DOCUMENTO";
				
				}

				
			    public String PACIENTE;

				public String getPACIENTE () {
					return this.PACIENTE;
				}

				public Boolean PACIENTEIsNullable(){
				    return true;
				}
				public Boolean PACIENTEIsKey(){
				    return false;
				}
				public Integer PACIENTELength(){
				    return null;
				}
				public Integer PACIENTEPrecision(){
				    return null;
				}
				public String PACIENTEDefault(){
				
					return null;
				
				}
				public String PACIENTEComment(){
				
				    return "";
				
				}
				public String PACIENTEPattern(){
				
					return "";
				
				}
				public String PACIENTEOriginalDbColumnName(){
				
					return "PACIENTE";
				
				}

				
			    public String CODIGO;

				public String getCODIGO () {
					return this.CODIGO;
				}

				public Boolean CODIGOIsNullable(){
				    return true;
				}
				public Boolean CODIGOIsKey(){
				    return false;
				}
				public Integer CODIGOLength(){
				    return null;
				}
				public Integer CODIGOPrecision(){
				    return null;
				}
				public String CODIGODefault(){
				
					return null;
				
				}
				public String CODIGOComment(){
				
				    return "";
				
				}
				public String CODIGOPattern(){
				
					return "";
				
				}
				public String CODIGOOriginalDbColumnName(){
				
					return "CODIGO";
				
				}

				
			    public String CONCEPTO_GLOSA;

				public String getCONCEPTO_GLOSA () {
					return this.CONCEPTO_GLOSA;
				}

				public Boolean CONCEPTO_GLOSAIsNullable(){
				    return true;
				}
				public Boolean CONCEPTO_GLOSAIsKey(){
				    return false;
				}
				public Integer CONCEPTO_GLOSALength(){
				    return null;
				}
				public Integer CONCEPTO_GLOSAPrecision(){
				    return null;
				}
				public String CONCEPTO_GLOSADefault(){
				
					return null;
				
				}
				public String CONCEPTO_GLOSAComment(){
				
				    return "";
				
				}
				public String CONCEPTO_GLOSAPattern(){
				
					return "";
				
				}
				public String CONCEPTO_GLOSAOriginalDbColumnName(){
				
					return "CONCEPTO_GLOSA";
				
				}

				
			    public String DESCRIPCION_GLOSA;

				public String getDESCRIPCION_GLOSA () {
					return this.DESCRIPCION_GLOSA;
				}

				public Boolean DESCRIPCION_GLOSAIsNullable(){
				    return true;
				}
				public Boolean DESCRIPCION_GLOSAIsKey(){
				    return false;
				}
				public Integer DESCRIPCION_GLOSALength(){
				    return null;
				}
				public Integer DESCRIPCION_GLOSAPrecision(){
				    return null;
				}
				public String DESCRIPCION_GLOSADefault(){
				
					return null;
				
				}
				public String DESCRIPCION_GLOSAComment(){
				
				    return "";
				
				}
				public String DESCRIPCION_GLOSAPattern(){
				
					return "";
				
				}
				public String DESCRIPCION_GLOSAOriginalDbColumnName(){
				
					return "DESCRIPCION_GLOSA";
				
				}

				
			    public BigDecimal VALOR_SERVICIO;

				public BigDecimal getVALOR_SERVICIO () {
					return this.VALOR_SERVICIO;
				}

				public Boolean VALOR_SERVICIOIsNullable(){
				    return true;
				}
				public Boolean VALOR_SERVICIOIsKey(){
				    return false;
				}
				public Integer VALOR_SERVICIOLength(){
				    return null;
				}
				public Integer VALOR_SERVICIOPrecision(){
				    return null;
				}
				public String VALOR_SERVICIODefault(){
				
					return "";
				
				}
				public String VALOR_SERVICIOComment(){
				
				    return "";
				
				}
				public String VALOR_SERVICIOPattern(){
				
					return "";
				
				}
				public String VALOR_SERVICIOOriginalDbColumnName(){
				
					return "VALOR_SERVICIO";
				
				}

				
			    public BigDecimal VALOR_GLOSADO;

				public BigDecimal getVALOR_GLOSADO () {
					return this.VALOR_GLOSADO;
				}

				public Boolean VALOR_GLOSADOIsNullable(){
				    return true;
				}
				public Boolean VALOR_GLOSADOIsKey(){
				    return false;
				}
				public Integer VALOR_GLOSADOLength(){
				    return null;
				}
				public Integer VALOR_GLOSADOPrecision(){
				    return null;
				}
				public String VALOR_GLOSADODefault(){
				
					return "";
				
				}
				public String VALOR_GLOSADOComment(){
				
				    return "";
				
				}
				public String VALOR_GLOSADOPattern(){
				
					return "";
				
				}
				public String VALOR_GLOSADOOriginalDbColumnName(){
				
					return "VALOR_GLOSADO";
				
				}

				
			    public BigDecimal VALOR_MCOBRADO;

				public BigDecimal getVALOR_MCOBRADO () {
					return this.VALOR_MCOBRADO;
				}

				public Boolean VALOR_MCOBRADOIsNullable(){
				    return true;
				}
				public Boolean VALOR_MCOBRADOIsKey(){
				    return false;
				}
				public Integer VALOR_MCOBRADOLength(){
				    return null;
				}
				public Integer VALOR_MCOBRADOPrecision(){
				    return null;
				}
				public String VALOR_MCOBRADODefault(){
				
					return "";
				
				}
				public String VALOR_MCOBRADOComment(){
				
				    return "";
				
				}
				public String VALOR_MCOBRADOPattern(){
				
					return "";
				
				}
				public String VALOR_MCOBRADOOriginalDbColumnName(){
				
					return "VALOR_MCOBRADO";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_ACTAS_Actas.length) {
				if(length < 1024 && commonByteArray_ACM_ACTAS_Actas.length == 0) {
   					commonByteArray_ACM_ACTAS_Actas = new byte[1024];
				} else {
   					commonByteArray_ACM_ACTAS_Actas = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ACM_ACTAS_Actas, 0, length);
			strReturn = new String(commonByteArray_ACM_ACTAS_Actas, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_ACTAS_Actas.length) {
				if(length < 1024 && commonByteArray_ACM_ACTAS_Actas.length == 0) {
   					commonByteArray_ACM_ACTAS_Actas = new byte[1024];
				} else {
   					commonByteArray_ACM_ACTAS_Actas = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_ACM_ACTAS_Actas, 0, length);
			strReturn = new String(commonByteArray_ACM_ACTAS_Actas, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ACM_ACTAS_Actas) {

        	try {

        		int length = 0;
		
						this.FACTURA_ID = (BigDecimal) dis.readObject();
					
					this.NUMERO_FACTURA = readString(dis);
					
					this.DOCUMENTO = readString(dis);
					
					this.PACIENTE = readString(dis);
					
					this.CODIGO = readString(dis);
					
					this.CONCEPTO_GLOSA = readString(dis);
					
					this.DESCRIPCION_GLOSA = readString(dis);
					
						this.VALOR_SERVICIO = (BigDecimal) dis.readObject();
					
						this.VALOR_GLOSADO = (BigDecimal) dis.readObject();
					
						this.VALOR_MCOBRADO = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ACM_ACTAS_Actas) {

        	try {

        		int length = 0;
		
						this.FACTURA_ID = (BigDecimal) dis.readObject();
					
					this.NUMERO_FACTURA = readString(dis);
					
					this.DOCUMENTO = readString(dis);
					
					this.PACIENTE = readString(dis);
					
					this.CODIGO = readString(dis);
					
					this.CONCEPTO_GLOSA = readString(dis);
					
					this.DESCRIPCION_GLOSA = readString(dis);
					
						this.VALOR_SERVICIO = (BigDecimal) dis.readObject();
					
						this.VALOR_GLOSADO = (BigDecimal) dis.readObject();
					
						this.VALOR_MCOBRADO = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.FACTURA_ID);
					
					// String
				
						writeString(this.NUMERO_FACTURA,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// String
				
						writeString(this.PACIENTE,dos);
					
					// String
				
						writeString(this.CODIGO,dos);
					
					// String
				
						writeString(this.CONCEPTO_GLOSA,dos);
					
					// String
				
						writeString(this.DESCRIPCION_GLOSA,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VALOR_SERVICIO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VALOR_GLOSADO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VALOR_MCOBRADO);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.FACTURA_ID);
					
					// String
				
						writeString(this.NUMERO_FACTURA,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// String
				
						writeString(this.PACIENTE,dos);
					
					// String
				
						writeString(this.CODIGO,dos);
					
					// String
				
						writeString(this.CONCEPTO_GLOSA,dos);
					
					// String
				
						writeString(this.DESCRIPCION_GLOSA,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VALOR_SERVICIO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VALOR_GLOSADO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VALOR_MCOBRADO);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("FACTURA_ID="+String.valueOf(FACTURA_ID));
		sb.append(",NUMERO_FACTURA="+NUMERO_FACTURA);
		sb.append(",DOCUMENTO="+DOCUMENTO);
		sb.append(",PACIENTE="+PACIENTE);
		sb.append(",CODIGO="+CODIGO);
		sb.append(",CONCEPTO_GLOSA="+CONCEPTO_GLOSA);
		sb.append(",DESCRIPCION_GLOSA="+DESCRIPCION_GLOSA);
		sb.append(",VALOR_SERVICIO="+String.valueOf(VALOR_SERVICIO));
		sb.append(",VALOR_GLOSADO="+String.valueOf(VALOR_GLOSADO));
		sb.append(",VALOR_MCOBRADO="+String.valueOf(VALOR_MCOBRADO));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row22Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row6Struct implements routines.system.IPersistableRow<row6Struct> {
    final static byte[] commonByteArrayLock_ACM_ACTAS_Actas = new byte[0];
    static byte[] commonByteArray_ACM_ACTAS_Actas = new byte[0];

	
			    public BigDecimal FACTURA_ID;

				public BigDecimal getFACTURA_ID () {
					return this.FACTURA_ID;
				}

				public Boolean FACTURA_IDIsNullable(){
				    return false;
				}
				public Boolean FACTURA_IDIsKey(){
				    return false;
				}
				public Integer FACTURA_IDLength(){
				    return null;
				}
				public Integer FACTURA_IDPrecision(){
				    return null;
				}
				public String FACTURA_IDDefault(){
				
					return "";
				
				}
				public String FACTURA_IDComment(){
				
				    return "";
				
				}
				public String FACTURA_IDPattern(){
				
					return "";
				
				}
				public String FACTURA_IDOriginalDbColumnName(){
				
					return "FACTURA_ID";
				
				}

				
			    public String NUMERO_FACTURA;

				public String getNUMERO_FACTURA () {
					return this.NUMERO_FACTURA;
				}

				public Boolean NUMERO_FACTURAIsNullable(){
				    return true;
				}
				public Boolean NUMERO_FACTURAIsKey(){
				    return false;
				}
				public Integer NUMERO_FACTURALength(){
				    return null;
				}
				public Integer NUMERO_FACTURAPrecision(){
				    return null;
				}
				public String NUMERO_FACTURADefault(){
				
					return null;
				
				}
				public String NUMERO_FACTURAComment(){
				
				    return "";
				
				}
				public String NUMERO_FACTURAPattern(){
				
					return "";
				
				}
				public String NUMERO_FACTURAOriginalDbColumnName(){
				
					return "NUMERO_FACTURA";
				
				}

				
			    public String DOCUMENTO;

				public String getDOCUMENTO () {
					return this.DOCUMENTO;
				}

				public Boolean DOCUMENTOIsNullable(){
				    return true;
				}
				public Boolean DOCUMENTOIsKey(){
				    return false;
				}
				public Integer DOCUMENTOLength(){
				    return null;
				}
				public Integer DOCUMENTOPrecision(){
				    return null;
				}
				public String DOCUMENTODefault(){
				
					return null;
				
				}
				public String DOCUMENTOComment(){
				
				    return "";
				
				}
				public String DOCUMENTOPattern(){
				
					return "";
				
				}
				public String DOCUMENTOOriginalDbColumnName(){
				
					return "DOCUMENTO";
				
				}

				
			    public String PACIENTE;

				public String getPACIENTE () {
					return this.PACIENTE;
				}

				public Boolean PACIENTEIsNullable(){
				    return true;
				}
				public Boolean PACIENTEIsKey(){
				    return false;
				}
				public Integer PACIENTELength(){
				    return null;
				}
				public Integer PACIENTEPrecision(){
				    return null;
				}
				public String PACIENTEDefault(){
				
					return null;
				
				}
				public String PACIENTEComment(){
				
				    return "";
				
				}
				public String PACIENTEPattern(){
				
					return "";
				
				}
				public String PACIENTEOriginalDbColumnName(){
				
					return "PACIENTE";
				
				}

				
			    public String CODIGO;

				public String getCODIGO () {
					return this.CODIGO;
				}

				public Boolean CODIGOIsNullable(){
				    return true;
				}
				public Boolean CODIGOIsKey(){
				    return false;
				}
				public Integer CODIGOLength(){
				    return null;
				}
				public Integer CODIGOPrecision(){
				    return null;
				}
				public String CODIGODefault(){
				
					return null;
				
				}
				public String CODIGOComment(){
				
				    return "";
				
				}
				public String CODIGOPattern(){
				
					return "";
				
				}
				public String CODIGOOriginalDbColumnName(){
				
					return "CODIGO";
				
				}

				
			    public String CONCEPTO_GLOSA;

				public String getCONCEPTO_GLOSA () {
					return this.CONCEPTO_GLOSA;
				}

				public Boolean CONCEPTO_GLOSAIsNullable(){
				    return true;
				}
				public Boolean CONCEPTO_GLOSAIsKey(){
				    return false;
				}
				public Integer CONCEPTO_GLOSALength(){
				    return null;
				}
				public Integer CONCEPTO_GLOSAPrecision(){
				    return null;
				}
				public String CONCEPTO_GLOSADefault(){
				
					return null;
				
				}
				public String CONCEPTO_GLOSAComment(){
				
				    return "";
				
				}
				public String CONCEPTO_GLOSAPattern(){
				
					return "";
				
				}
				public String CONCEPTO_GLOSAOriginalDbColumnName(){
				
					return "CONCEPTO_GLOSA";
				
				}

				
			    public String DESCRIPCION_GLOSA;

				public String getDESCRIPCION_GLOSA () {
					return this.DESCRIPCION_GLOSA;
				}

				public Boolean DESCRIPCION_GLOSAIsNullable(){
				    return true;
				}
				public Boolean DESCRIPCION_GLOSAIsKey(){
				    return false;
				}
				public Integer DESCRIPCION_GLOSALength(){
				    return null;
				}
				public Integer DESCRIPCION_GLOSAPrecision(){
				    return null;
				}
				public String DESCRIPCION_GLOSADefault(){
				
					return null;
				
				}
				public String DESCRIPCION_GLOSAComment(){
				
				    return "";
				
				}
				public String DESCRIPCION_GLOSAPattern(){
				
					return "";
				
				}
				public String DESCRIPCION_GLOSAOriginalDbColumnName(){
				
					return "DESCRIPCION_GLOSA";
				
				}

				
			    public BigDecimal VALOR_SERVICIO;

				public BigDecimal getVALOR_SERVICIO () {
					return this.VALOR_SERVICIO;
				}

				public Boolean VALOR_SERVICIOIsNullable(){
				    return true;
				}
				public Boolean VALOR_SERVICIOIsKey(){
				    return false;
				}
				public Integer VALOR_SERVICIOLength(){
				    return null;
				}
				public Integer VALOR_SERVICIOPrecision(){
				    return null;
				}
				public String VALOR_SERVICIODefault(){
				
					return "";
				
				}
				public String VALOR_SERVICIOComment(){
				
				    return "";
				
				}
				public String VALOR_SERVICIOPattern(){
				
					return "";
				
				}
				public String VALOR_SERVICIOOriginalDbColumnName(){
				
					return "VALOR_SERVICIO";
				
				}

				
			    public BigDecimal VALOR_GLOSADO;

				public BigDecimal getVALOR_GLOSADO () {
					return this.VALOR_GLOSADO;
				}

				public Boolean VALOR_GLOSADOIsNullable(){
				    return true;
				}
				public Boolean VALOR_GLOSADOIsKey(){
				    return false;
				}
				public Integer VALOR_GLOSADOLength(){
				    return null;
				}
				public Integer VALOR_GLOSADOPrecision(){
				    return null;
				}
				public String VALOR_GLOSADODefault(){
				
					return "";
				
				}
				public String VALOR_GLOSADOComment(){
				
				    return "";
				
				}
				public String VALOR_GLOSADOPattern(){
				
					return "";
				
				}
				public String VALOR_GLOSADOOriginalDbColumnName(){
				
					return "VALOR_GLOSADO";
				
				}

				
			    public BigDecimal VALOR_MCOBRADO;

				public BigDecimal getVALOR_MCOBRADO () {
					return this.VALOR_MCOBRADO;
				}

				public Boolean VALOR_MCOBRADOIsNullable(){
				    return true;
				}
				public Boolean VALOR_MCOBRADOIsKey(){
				    return false;
				}
				public Integer VALOR_MCOBRADOLength(){
				    return null;
				}
				public Integer VALOR_MCOBRADOPrecision(){
				    return null;
				}
				public String VALOR_MCOBRADODefault(){
				
					return "";
				
				}
				public String VALOR_MCOBRADOComment(){
				
				    return "";
				
				}
				public String VALOR_MCOBRADOPattern(){
				
					return "";
				
				}
				public String VALOR_MCOBRADOOriginalDbColumnName(){
				
					return "VALOR_MCOBRADO";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_ACTAS_Actas.length) {
				if(length < 1024 && commonByteArray_ACM_ACTAS_Actas.length == 0) {
   					commonByteArray_ACM_ACTAS_Actas = new byte[1024];
				} else {
   					commonByteArray_ACM_ACTAS_Actas = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ACM_ACTAS_Actas, 0, length);
			strReturn = new String(commonByteArray_ACM_ACTAS_Actas, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_ACTAS_Actas.length) {
				if(length < 1024 && commonByteArray_ACM_ACTAS_Actas.length == 0) {
   					commonByteArray_ACM_ACTAS_Actas = new byte[1024];
				} else {
   					commonByteArray_ACM_ACTAS_Actas = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_ACM_ACTAS_Actas, 0, length);
			strReturn = new String(commonByteArray_ACM_ACTAS_Actas, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ACM_ACTAS_Actas) {

        	try {

        		int length = 0;
		
						this.FACTURA_ID = (BigDecimal) dis.readObject();
					
					this.NUMERO_FACTURA = readString(dis);
					
					this.DOCUMENTO = readString(dis);
					
					this.PACIENTE = readString(dis);
					
					this.CODIGO = readString(dis);
					
					this.CONCEPTO_GLOSA = readString(dis);
					
					this.DESCRIPCION_GLOSA = readString(dis);
					
						this.VALOR_SERVICIO = (BigDecimal) dis.readObject();
					
						this.VALOR_GLOSADO = (BigDecimal) dis.readObject();
					
						this.VALOR_MCOBRADO = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ACM_ACTAS_Actas) {

        	try {

        		int length = 0;
		
						this.FACTURA_ID = (BigDecimal) dis.readObject();
					
					this.NUMERO_FACTURA = readString(dis);
					
					this.DOCUMENTO = readString(dis);
					
					this.PACIENTE = readString(dis);
					
					this.CODIGO = readString(dis);
					
					this.CONCEPTO_GLOSA = readString(dis);
					
					this.DESCRIPCION_GLOSA = readString(dis);
					
						this.VALOR_SERVICIO = (BigDecimal) dis.readObject();
					
						this.VALOR_GLOSADO = (BigDecimal) dis.readObject();
					
						this.VALOR_MCOBRADO = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.FACTURA_ID);
					
					// String
				
						writeString(this.NUMERO_FACTURA,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// String
				
						writeString(this.PACIENTE,dos);
					
					// String
				
						writeString(this.CODIGO,dos);
					
					// String
				
						writeString(this.CONCEPTO_GLOSA,dos);
					
					// String
				
						writeString(this.DESCRIPCION_GLOSA,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VALOR_SERVICIO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VALOR_GLOSADO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VALOR_MCOBRADO);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.FACTURA_ID);
					
					// String
				
						writeString(this.NUMERO_FACTURA,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// String
				
						writeString(this.PACIENTE,dos);
					
					// String
				
						writeString(this.CODIGO,dos);
					
					// String
				
						writeString(this.CONCEPTO_GLOSA,dos);
					
					// String
				
						writeString(this.DESCRIPCION_GLOSA,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VALOR_SERVICIO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VALOR_GLOSADO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VALOR_MCOBRADO);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("FACTURA_ID="+String.valueOf(FACTURA_ID));
		sb.append(",NUMERO_FACTURA="+NUMERO_FACTURA);
		sb.append(",DOCUMENTO="+DOCUMENTO);
		sb.append(",PACIENTE="+PACIENTE);
		sb.append(",CODIGO="+CODIGO);
		sb.append(",CONCEPTO_GLOSA="+CONCEPTO_GLOSA);
		sb.append(",DESCRIPCION_GLOSA="+DESCRIPCION_GLOSA);
		sb.append(",VALOR_SERVICIO="+String.valueOf(VALOR_SERVICIO));
		sb.append(",VALOR_GLOSADO="+String.valueOf(VALOR_GLOSADO));
		sb.append(",VALOR_MCOBRADO="+String.valueOf(VALOR_MCOBRADO));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row6Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row21Struct implements routines.system.IPersistableRow<row21Struct> {
    final static byte[] commonByteArrayLock_ACM_ACTAS_Actas = new byte[0];
    static byte[] commonByteArray_ACM_ACTAS_Actas = new byte[0];

	
			    public BigDecimal FACTURA_ID;

				public BigDecimal getFACTURA_ID () {
					return this.FACTURA_ID;
				}

				public Boolean FACTURA_IDIsNullable(){
				    return true;
				}
				public Boolean FACTURA_IDIsKey(){
				    return false;
				}
				public Integer FACTURA_IDLength(){
				    return null;
				}
				public Integer FACTURA_IDPrecision(){
				    return null;
				}
				public String FACTURA_IDDefault(){
				
					return "";
				
				}
				public String FACTURA_IDComment(){
				
				    return "";
				
				}
				public String FACTURA_IDPattern(){
				
					return "";
				
				}
				public String FACTURA_IDOriginalDbColumnName(){
				
					return "FACTURA_ID";
				
				}

				
			    public String NUMERO_FACTURA;

				public String getNUMERO_FACTURA () {
					return this.NUMERO_FACTURA;
				}

				public Boolean NUMERO_FACTURAIsNullable(){
				    return true;
				}
				public Boolean NUMERO_FACTURAIsKey(){
				    return false;
				}
				public Integer NUMERO_FACTURALength(){
				    return null;
				}
				public Integer NUMERO_FACTURAPrecision(){
				    return null;
				}
				public String NUMERO_FACTURADefault(){
				
					return null;
				
				}
				public String NUMERO_FACTURAComment(){
				
				    return "";
				
				}
				public String NUMERO_FACTURAPattern(){
				
					return "";
				
				}
				public String NUMERO_FACTURAOriginalDbColumnName(){
				
					return "NUMERO_FACTURA";
				
				}

				
			    public String DOCUMENTO;

				public String getDOCUMENTO () {
					return this.DOCUMENTO;
				}

				public Boolean DOCUMENTOIsNullable(){
				    return true;
				}
				public Boolean DOCUMENTOIsKey(){
				    return false;
				}
				public Integer DOCUMENTOLength(){
				    return null;
				}
				public Integer DOCUMENTOPrecision(){
				    return null;
				}
				public String DOCUMENTODefault(){
				
					return null;
				
				}
				public String DOCUMENTOComment(){
				
				    return "";
				
				}
				public String DOCUMENTOPattern(){
				
					return "";
				
				}
				public String DOCUMENTOOriginalDbColumnName(){
				
					return "DOCUMENTO";
				
				}

				
			    public String PACIENTE;

				public String getPACIENTE () {
					return this.PACIENTE;
				}

				public Boolean PACIENTEIsNullable(){
				    return true;
				}
				public Boolean PACIENTEIsKey(){
				    return false;
				}
				public Integer PACIENTELength(){
				    return null;
				}
				public Integer PACIENTEPrecision(){
				    return null;
				}
				public String PACIENTEDefault(){
				
					return null;
				
				}
				public String PACIENTEComment(){
				
				    return "";
				
				}
				public String PACIENTEPattern(){
				
					return "";
				
				}
				public String PACIENTEOriginalDbColumnName(){
				
					return "PACIENTE";
				
				}

				
			    public String CODIGO;

				public String getCODIGO () {
					return this.CODIGO;
				}

				public Boolean CODIGOIsNullable(){
				    return true;
				}
				public Boolean CODIGOIsKey(){
				    return false;
				}
				public Integer CODIGOLength(){
				    return null;
				}
				public Integer CODIGOPrecision(){
				    return null;
				}
				public String CODIGODefault(){
				
					return null;
				
				}
				public String CODIGOComment(){
				
				    return "";
				
				}
				public String CODIGOPattern(){
				
					return "";
				
				}
				public String CODIGOOriginalDbColumnName(){
				
					return "CODIGO";
				
				}

				
			    public String CONCEPTO_GLOSA;

				public String getCONCEPTO_GLOSA () {
					return this.CONCEPTO_GLOSA;
				}

				public Boolean CONCEPTO_GLOSAIsNullable(){
				    return true;
				}
				public Boolean CONCEPTO_GLOSAIsKey(){
				    return false;
				}
				public Integer CONCEPTO_GLOSALength(){
				    return null;
				}
				public Integer CONCEPTO_GLOSAPrecision(){
				    return null;
				}
				public String CONCEPTO_GLOSADefault(){
				
					return null;
				
				}
				public String CONCEPTO_GLOSAComment(){
				
				    return "";
				
				}
				public String CONCEPTO_GLOSAPattern(){
				
					return "";
				
				}
				public String CONCEPTO_GLOSAOriginalDbColumnName(){
				
					return "CONCEPTO_GLOSA";
				
				}

				
			    public String DESCRIPCION_GLOSA;

				public String getDESCRIPCION_GLOSA () {
					return this.DESCRIPCION_GLOSA;
				}

				public Boolean DESCRIPCION_GLOSAIsNullable(){
				    return true;
				}
				public Boolean DESCRIPCION_GLOSAIsKey(){
				    return false;
				}
				public Integer DESCRIPCION_GLOSALength(){
				    return null;
				}
				public Integer DESCRIPCION_GLOSAPrecision(){
				    return null;
				}
				public String DESCRIPCION_GLOSADefault(){
				
					return null;
				
				}
				public String DESCRIPCION_GLOSAComment(){
				
				    return "";
				
				}
				public String DESCRIPCION_GLOSAPattern(){
				
					return "";
				
				}
				public String DESCRIPCION_GLOSAOriginalDbColumnName(){
				
					return "DESCRIPCION_GLOSA";
				
				}

				
			    public BigDecimal VALOR_SERVICIO;

				public BigDecimal getVALOR_SERVICIO () {
					return this.VALOR_SERVICIO;
				}

				public Boolean VALOR_SERVICIOIsNullable(){
				    return true;
				}
				public Boolean VALOR_SERVICIOIsKey(){
				    return false;
				}
				public Integer VALOR_SERVICIOLength(){
				    return null;
				}
				public Integer VALOR_SERVICIOPrecision(){
				    return null;
				}
				public String VALOR_SERVICIODefault(){
				
					return "";
				
				}
				public String VALOR_SERVICIOComment(){
				
				    return "";
				
				}
				public String VALOR_SERVICIOPattern(){
				
					return "";
				
				}
				public String VALOR_SERVICIOOriginalDbColumnName(){
				
					return "VALOR_SERVICIO";
				
				}

				
			    public BigDecimal VALOR_GLOSADO;

				public BigDecimal getVALOR_GLOSADO () {
					return this.VALOR_GLOSADO;
				}

				public Boolean VALOR_GLOSADOIsNullable(){
				    return true;
				}
				public Boolean VALOR_GLOSADOIsKey(){
				    return false;
				}
				public Integer VALOR_GLOSADOLength(){
				    return null;
				}
				public Integer VALOR_GLOSADOPrecision(){
				    return null;
				}
				public String VALOR_GLOSADODefault(){
				
					return "";
				
				}
				public String VALOR_GLOSADOComment(){
				
				    return "";
				
				}
				public String VALOR_GLOSADOPattern(){
				
					return "";
				
				}
				public String VALOR_GLOSADOOriginalDbColumnName(){
				
					return "VALOR_GLOSADO";
				
				}

				
			    public BigDecimal VALOR_MCOBRADO;

				public BigDecimal getVALOR_MCOBRADO () {
					return this.VALOR_MCOBRADO;
				}

				public Boolean VALOR_MCOBRADOIsNullable(){
				    return true;
				}
				public Boolean VALOR_MCOBRADOIsKey(){
				    return false;
				}
				public Integer VALOR_MCOBRADOLength(){
				    return null;
				}
				public Integer VALOR_MCOBRADOPrecision(){
				    return null;
				}
				public String VALOR_MCOBRADODefault(){
				
					return "";
				
				}
				public String VALOR_MCOBRADOComment(){
				
				    return "";
				
				}
				public String VALOR_MCOBRADOPattern(){
				
					return "";
				
				}
				public String VALOR_MCOBRADOOriginalDbColumnName(){
				
					return "VALOR_MCOBRADO";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_ACTAS_Actas.length) {
				if(length < 1024 && commonByteArray_ACM_ACTAS_Actas.length == 0) {
   					commonByteArray_ACM_ACTAS_Actas = new byte[1024];
				} else {
   					commonByteArray_ACM_ACTAS_Actas = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ACM_ACTAS_Actas, 0, length);
			strReturn = new String(commonByteArray_ACM_ACTAS_Actas, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_ACTAS_Actas.length) {
				if(length < 1024 && commonByteArray_ACM_ACTAS_Actas.length == 0) {
   					commonByteArray_ACM_ACTAS_Actas = new byte[1024];
				} else {
   					commonByteArray_ACM_ACTAS_Actas = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_ACM_ACTAS_Actas, 0, length);
			strReturn = new String(commonByteArray_ACM_ACTAS_Actas, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ACM_ACTAS_Actas) {

        	try {

        		int length = 0;
		
						this.FACTURA_ID = (BigDecimal) dis.readObject();
					
					this.NUMERO_FACTURA = readString(dis);
					
					this.DOCUMENTO = readString(dis);
					
					this.PACIENTE = readString(dis);
					
					this.CODIGO = readString(dis);
					
					this.CONCEPTO_GLOSA = readString(dis);
					
					this.DESCRIPCION_GLOSA = readString(dis);
					
						this.VALOR_SERVICIO = (BigDecimal) dis.readObject();
					
						this.VALOR_GLOSADO = (BigDecimal) dis.readObject();
					
						this.VALOR_MCOBRADO = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ACM_ACTAS_Actas) {

        	try {

        		int length = 0;
		
						this.FACTURA_ID = (BigDecimal) dis.readObject();
					
					this.NUMERO_FACTURA = readString(dis);
					
					this.DOCUMENTO = readString(dis);
					
					this.PACIENTE = readString(dis);
					
					this.CODIGO = readString(dis);
					
					this.CONCEPTO_GLOSA = readString(dis);
					
					this.DESCRIPCION_GLOSA = readString(dis);
					
						this.VALOR_SERVICIO = (BigDecimal) dis.readObject();
					
						this.VALOR_GLOSADO = (BigDecimal) dis.readObject();
					
						this.VALOR_MCOBRADO = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.FACTURA_ID);
					
					// String
				
						writeString(this.NUMERO_FACTURA,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// String
				
						writeString(this.PACIENTE,dos);
					
					// String
				
						writeString(this.CODIGO,dos);
					
					// String
				
						writeString(this.CONCEPTO_GLOSA,dos);
					
					// String
				
						writeString(this.DESCRIPCION_GLOSA,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VALOR_SERVICIO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VALOR_GLOSADO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VALOR_MCOBRADO);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.FACTURA_ID);
					
					// String
				
						writeString(this.NUMERO_FACTURA,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// String
				
						writeString(this.PACIENTE,dos);
					
					// String
				
						writeString(this.CODIGO,dos);
					
					// String
				
						writeString(this.CONCEPTO_GLOSA,dos);
					
					// String
				
						writeString(this.DESCRIPCION_GLOSA,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VALOR_SERVICIO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VALOR_GLOSADO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VALOR_MCOBRADO);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("FACTURA_ID="+String.valueOf(FACTURA_ID));
		sb.append(",NUMERO_FACTURA="+NUMERO_FACTURA);
		sb.append(",DOCUMENTO="+DOCUMENTO);
		sb.append(",PACIENTE="+PACIENTE);
		sb.append(",CODIGO="+CODIGO);
		sb.append(",CONCEPTO_GLOSA="+CONCEPTO_GLOSA);
		sb.append(",DESCRIPCION_GLOSA="+DESCRIPCION_GLOSA);
		sb.append(",VALOR_SERVICIO="+String.valueOf(VALOR_SERVICIO));
		sb.append(",VALOR_GLOSADO="+String.valueOf(VALOR_GLOSADO));
		sb.append(",VALOR_MCOBRADO="+String.valueOf(VALOR_MCOBRADO));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row21Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_3_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

		String currentVirtualComponent = null;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row6Struct row6 = new row6Struct();

		row21Struct row21 = new row21Struct();

			row22Struct row22 = new row22Struct();
row23Struct row23 = new row23Struct();
out1Struct out1 = new out1Struct();
row10Struct row10 = new row10Struct();
out2Struct out2 = new out2Struct();




	
	/**
	 * [tSortRow_1_SortOut begin ] start
	 */

	

	
		
		ok_Hash.put("tSortRow_1_SortOut", false);
		start_Hash.put("tSortRow_1_SortOut", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tSortRow_1";
	
	currentComponent="tSortRow_1_SortOut";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row22");
					}
				
		int tos_count_tSortRow_1_SortOut = 0;
		


class Comparablerow22Struct extends row22Struct implements Comparable<Comparablerow22Struct> {
	
	public int compareTo(Comparablerow22Struct other) {

		if(this.NUMERO_FACTURA == null && other.NUMERO_FACTURA != null){
			return -1;
						
		}else if(this.NUMERO_FACTURA != null && other.NUMERO_FACTURA == null){
			return 1;
						
		}else if(this.NUMERO_FACTURA != null && other.NUMERO_FACTURA != null){
			if(!this.NUMERO_FACTURA.equals(other.NUMERO_FACTURA)){
				return this.NUMERO_FACTURA.compareTo(other.NUMERO_FACTURA);
			}
		}
		if(this.DOCUMENTO == null && other.DOCUMENTO != null){
			return -1;
						
		}else if(this.DOCUMENTO != null && other.DOCUMENTO == null){
			return 1;
						
		}else if(this.DOCUMENTO != null && other.DOCUMENTO != null){
			if(!this.DOCUMENTO.equals(other.DOCUMENTO)){
				return this.DOCUMENTO.compareTo(other.DOCUMENTO);
			}
		}
		return 0;
	}
}

java.util.List<Comparablerow22Struct> list_tSortRow_1_SortOut = new java.util.ArrayList<Comparablerow22Struct>();


 



/**
 * [tSortRow_1_SortOut begin ] stop
 */



	
	/**
	 * [tUnite_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tUnite_2", false);
		start_Hash.put("tUnite_2", System.currentTimeMillis());
		
	
	currentComponent="tUnite_2";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row6","row21");
					}
				
		int tos_count_tUnite_2 = 0;
		

int nb_line_tUnite_2 = 0;

 



/**
 * [tUnite_2 begin ] stop
 */
	
	/**
	 * [tOracleInput_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_3", false);
		start_Hash.put("tOracleInput_3", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_3";
	
	
		int tos_count_tOracleInput_3 = 0;
		
	


	
		    int nb_line_tOracleInput_3 = 0;
		    java.sql.Connection conn_tOracleInput_3 = null;
				conn_tOracleInput_3 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");
				
                boolean isTimeZoneNull_tOracleInput_3 = false;
				boolean isConnectionWrapped_tOracleInput_3 = !(conn_tOracleInput_3 instanceof oracle.jdbc.OracleConnection) && conn_tOracleInput_3.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tOracleInput_3 = null;
                if (isConnectionWrapped_tOracleInput_3) {
					unwrappedOraConn_tOracleInput_3 = conn_tOracleInput_3.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tOracleInput_3 != null) {
                        isTimeZoneNull_tOracleInput_3 = (unwrappedOraConn_tOracleInput_3.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tOracleInput_3 = (((oracle.jdbc.OracleConnection)conn_tOracleInput_3).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tOracleInput_3) {
					java.sql.Statement stmtGetTZ_tOracleInput_3 = conn_tOracleInput_3.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_3 = stmtGetTZ_tOracleInput_3.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_3 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tOracleInput_3.next()) {
						sessionTimezone_tOracleInput_3 = rsGetTZ_tOracleInput_3.getString(1);
					}
					if (isConnectionWrapped_tOracleInput_3 && unwrappedOraConn_tOracleInput_3 != null) {
                        unwrappedOraConn_tOracleInput_3.setSessionTimeZone(sessionTimezone_tOracleInput_3);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_3).setSessionTimeZone(sessionTimezone_tOracleInput_3);
                    }
				}
			
		    
			java.sql.Statement stmt_tOracleInput_3 = conn_tOracleInput_3.createStatement();

		    String dbquery_tOracleInput_3 = "\nSELECT\n		DS.ID AS FACTURA_ID,\n        AF.PREFIJO || AF.NUMERO AS NUMERO_FACTURA,\n        GT.SIGLA || ' ' || DS.DOC"
+"UMENTO AS DOCUMENTO,\n        DECODE(GP.ID, null, 'El usuario no se encuentra registrado en el sistema',  TRIM(GP.PRIMER"
+"_NOMBRE)||COALESCE(TRIM(GP.SEGUNDO_NOMBRE),' ')||TRIM(GP.PRIMER_APELLIDO)||TRIM(GP.SEGUNDO_APELLIDO)  ) AS PACIENTE,\n  "
+"      ACG.CODIGO || ACE.CODIGO AS CODIGO,\n        AC.DESCRIPCION AS CONCEPTO_GLOSA,\n        HG.OBSERVACIONES AS DESCRI"
+"PCION_GLOSA,\n        SUM(DS.VTOTAL - DS.VMENORCOBRADO) AS VALOR_SERVICIO,\n        SUM(NVL(HG.VGLOSADO,0))   AS VALOR_G"
+"LOSADO,\n        SUM(NVL(DS.VMENORCOBRADO, 0)) AS VALOR_MCOBRADO\n    FROM\n        ACM_DFACTURASERVICIO DS\n        INN"
+"ER JOIN ACM_FACTURA    	  AF   ON  AF.ID = DS.FACTURA_ID \n        LEFT  JOIN GEN_PERSONAS       GP   ON  GP.ID = DS.PER"
+"SONAS_ID\n        LEFT  JOIN GEN_TDOCUMENTOS    GT   ON  GT.ID = DS.TDOCUMENTOS_ID \n        INNER  JOIN ACM_GLOSASCAUSA"
+"DAS AG   ON  AG.RECEPCION_ID = DS.RECEPCION_ID AND AG.DFACTURASERVICIO_ID = DS.ID  AND AG.ESTADO <> 'Eliminada' \n      "
+"  INNER  JOIN ACM_CAUSALGLOSAS   AC   ON  AC.ID =  AG.CAUSALGLOSAS_ID\n        INNER  JOIN ACM_CONCEPTOS      ACG  ON  A"
+"CG.ID = AC.CONCEPTOGENERAL_ID      AND  ACG.TCONCEPTO = 'GENERAL'    AND  ACG.ESTADO = 'Activo'\n        INNER  JOIN ACM"
+"_CONCEPTOS      ACE  ON  ACE.ID = AC.CONCEPTOESPECIFICO_ID  AND  ACE.TCONCEPTO = 'ESPECIFICO' AND  ACE.ESTADO = 'Activo'"
+"     \n        INNER  JOIN ACM_HGLOSASCAUSADAS HG  ON  HG.GLOSASCAUSADAS_ID = AG.ID  AND  HG.HAUDITORIAS_ID =  '" + context.HAUDITORIA_ID + "'  AND  HG.ESTREGISTRO_ID = 1\n        INNER  JOIN ACM_HAUDITORIAS     HA  ON  HA.ID = HG.HAUDITORIAS_ID     AND HA.TIP"
+"O =  'Etapa'           \n        INNER JOIN ACM_ETAPASNORMATIVIDAD  EN   ON  EN.ID = HG.ETAPASNORMATIVIDAD_ID   AND EN.C"
+"ODIGO = 1  AND EN.ESTREGISTRO_ID = 1     \n    WHERE  DS.RECEPCION_ID = '" + context.RECEPCION_ID + "'\n    AND AF.ESTREGISTRO_ID = 1 \n    GROUP BY DS.ID, AF.PREFIJO || AF.NUMERO, GT.SIGLA || ' ' || DS.DOCUMENTO, DECODE"
+"(GP.ID, null, 'El usuario no se encuentra registrado en el sistema', TRIM(GP.PRIMER_NOMBRE)||COALESCE(TRIM(GP.SEGUNDO_NO"
+"MBRE),' ')||TRIM(GP.PRIMER_APELLIDO)||TRIM(GP.SEGUNDO_APELLIDO) ), ACG.CODIGO || ACE.CODIGO, \n    AC.DESCRIPCION, HG.OB"
+"SERVACIONES \n    \n    UNION ALL\n     SELECT\n		DS.ID AS FACTURA_ID,\n        AF.PREFIJO || AF.NUMERO AS NUMERO_FACTUR"
+"A,\n        DS.TDOCUMENTO || ' ' || DS.DOCUMENTO AS DOCUMENTO,\n        DECODE(GP.ID, null, 'El usuario no se encuentra "
+"registrado en el sistema',  TRIM(GP.PRIMER_NOMBRE)||COALESCE(TRIM(GP.SEGUNDO_NOMBRE),' ')||TRIM(GP.PRIMER_APELLIDO)||TRI"
+"M(GP.SEGUNDO_APELLIDO)  ) AS PACIENTE,\n        ACG.CODIGO || ACE.CODIGO AS CODIGO,\n        AC.DESCRIPCION AS CONCEPTO_"
+"GLOSA,\n        HG.OBSERVACIONES AS DESCRIPCION_GLOSA,\n        SUM(DS.VTOTAL - DS.VMENORCOBRADO) AS VALOR_SERVICIO,\n  "
+"      SUM(NVL(HG.VGLOSADO,0))   AS VALOR_GLOSADO,\n        SUM(NVL(DS.VMENORCOBRADO, 0)) AS VALOR_MCOBRADO\n    FROM\n  "
+"      ACM_DFACTURAFORMULACION DS\n        INNER JOIN ACM_FACTURA    	  AF   ON  AF.ID = DS.FACTURA_ID \n        LEFT JOI"
+"N GEN_PERSONAS       GP   ON  GP.DOCUMENTO = DS.DOCUMENTO AND GP.TDOCUMENTOS_ID = DS.TDOCUMENTOS_ID\n        INNER  JOIN"
+" ACM_GLOSASCAUSADAS AG   ON  AG.RECEPCION_ID = DS.RECEPCION_ID AND AG.DFACTURAFORMULACION_ID = DS.ID  AND AG.ESTADO <> '"
+"Eliminada' \n        INNER  JOIN ACM_CAUSALGLOSAS   AC   ON  AC.ID =  AG.CAUSALGLOSAS_ID\n        INNER  JOIN ACM_CONCEP"
+"TOS      ACG  ON  ACG.ID = AC.CONCEPTOGENERAL_ID      AND  ACG.TCONCEPTO = 'GENERAL'    AND  ACG.ESTADO = 'Activo'\n    "
+"    INNER  JOIN ACM_CONCEPTOS      ACE  ON  ACE.ID = AC.CONCEPTOESPECIFICO_ID  AND  ACE.TCONCEPTO = 'ESPECIFICO' AND  AC"
+"E.ESTADO = 'Activo'     \n        INNER  JOIN ACM_HGLOSASCAUSADAS HG  ON  HG.GLOSASCAUSADAS_ID = AG.ID  AND  HG.HAUDITOR"
+"IAS_ID = '" + context.HAUDITORIA_ID + "'  AND  HG.ESTREGISTRO_ID = 1\n        INNER  JOIN ACM_HAUDITORIAS     HA  ON  HA.ID = HG.HAUDITORIAS_ID     AND HA.TIP"
+"O =  'Etapa'           \n        INNER JOIN ACM_ETAPASNORMATIVIDAD  EN   ON  EN.ID = HG.ETAPASNORMATIVIDAD_ID  AND EN.CO"
+"DIGO = 1   AND EN.ESTREGISTRO_ID = 1     \n    WHERE  DS.RECEPCION_ID = '" + context.RECEPCION_ID + "'\n    AND AF.ESTREGISTRO_ID = 1\n    GROUP BY DS.ID, AF.PREFIJO || AF.NUMERO, DS.TDOCUMENTO || ' ' || DS.DOCUMENTO, DE"
+"CODE(GP.ID, null, 'El usuario no se encuentra registrado en el sistema', TRIM(GP.PRIMER_NOMBRE)||COALESCE(TRIM(GP.SEGUND"
+"O_NOMBRE),' ')||TRIM(GP.PRIMER_APELLIDO)||TRIM(GP.SEGUNDO_APELLIDO) ), ACG.CODIGO || ACE.CODIGO, \n    AC.DESCRIPCION, H"
+"G.OBSERVACIONES \n    ORDER BY NUMERO_FACTURA, DOCUMENTO ";
		    

		    globalMap.put("tOracleInput_3_QUERY",dbquery_tOracleInput_3);

		    java.sql.ResultSet rs_tOracleInput_3 = null;

		    try {
		    	rs_tOracleInput_3 = stmt_tOracleInput_3.executeQuery(dbquery_tOracleInput_3);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_3 = rs_tOracleInput_3.getMetaData();
		    	int colQtyInRs_tOracleInput_3 = rsmd_tOracleInput_3.getColumnCount();

		    String tmpContent_tOracleInput_3 = null;
		    
		    
		    while (rs_tOracleInput_3.next()) {
		        nb_line_tOracleInput_3++;
		        
							if(colQtyInRs_tOracleInput_3 < 1) {
								row6.FACTURA_ID = null;
							} else {
		                          
					if(rs_tOracleInput_3.getObject(1) != null) {
						row6.FACTURA_ID = rs_tOracleInput_3.getBigDecimal(1);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_3 < 2) {
								row6.NUMERO_FACTURA = null;
							} else {
	                         		
        	row6.NUMERO_FACTURA = routines.system.JDBCUtil.getString(rs_tOracleInput_3, 2, false);
		                    }
							if(colQtyInRs_tOracleInput_3 < 3) {
								row6.DOCUMENTO = null;
							} else {
	                         		
        	row6.DOCUMENTO = routines.system.JDBCUtil.getString(rs_tOracleInput_3, 3, false);
		                    }
							if(colQtyInRs_tOracleInput_3 < 4) {
								row6.PACIENTE = null;
							} else {
	                         		
        	row6.PACIENTE = routines.system.JDBCUtil.getString(rs_tOracleInput_3, 4, false);
		                    }
							if(colQtyInRs_tOracleInput_3 < 5) {
								row6.CODIGO = null;
							} else {
	                         		
        	row6.CODIGO = routines.system.JDBCUtil.getString(rs_tOracleInput_3, 5, false);
		                    }
							if(colQtyInRs_tOracleInput_3 < 6) {
								row6.CONCEPTO_GLOSA = null;
							} else {
	                         		
        	row6.CONCEPTO_GLOSA = routines.system.JDBCUtil.getString(rs_tOracleInput_3, 6, false);
		                    }
							if(colQtyInRs_tOracleInput_3 < 7) {
								row6.DESCRIPCION_GLOSA = null;
							} else {
	                         		
        	row6.DESCRIPCION_GLOSA = routines.system.JDBCUtil.getString(rs_tOracleInput_3, 7, false);
		                    }
							if(colQtyInRs_tOracleInput_3 < 8) {
								row6.VALOR_SERVICIO = null;
							} else {
		                          
					if(rs_tOracleInput_3.getObject(8) != null) {
						row6.VALOR_SERVICIO = rs_tOracleInput_3.getBigDecimal(8);
					} else {
				
						row6.VALOR_SERVICIO = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_3 < 9) {
								row6.VALOR_GLOSADO = null;
							} else {
		                          
					if(rs_tOracleInput_3.getObject(9) != null) {
						row6.VALOR_GLOSADO = rs_tOracleInput_3.getBigDecimal(9);
					} else {
				
						row6.VALOR_GLOSADO = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_3 < 10) {
								row6.VALOR_MCOBRADO = null;
							} else {
		                          
					if(rs_tOracleInput_3.getObject(10) != null) {
						row6.VALOR_MCOBRADO = rs_tOracleInput_3.getBigDecimal(10);
					} else {
				
						row6.VALOR_MCOBRADO = null;
					}
		                    }
					




 



/**
 * [tOracleInput_3 begin ] stop
 */
	
	/**
	 * [tOracleInput_3 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_3";
	
	

 


	tos_count_tOracleInput_3++;

/**
 * [tOracleInput_3 main ] stop
 */
	
	/**
	 * [tOracleInput_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_3";
	
	

 



/**
 * [tOracleInput_3 process_data_begin ] stop
 */

	
	/**
	 * [tUnite_2 main ] start
	 */

	

	
	
	currentComponent="tUnite_2";
	
	
						if(execStat){
							runStat.updateStatOnConnection(iterateId,1,1
								
									,"row6"
									
							);
						}
						
//////////
 

// for output
			row22 = new row22Struct();
								
			row22.FACTURA_ID = row6.FACTURA_ID;								
			row22.NUMERO_FACTURA = row6.NUMERO_FACTURA;								
			row22.DOCUMENTO = row6.DOCUMENTO;								
			row22.PACIENTE = row6.PACIENTE;								
			row22.CODIGO = row6.CODIGO;								
			row22.CONCEPTO_GLOSA = row6.CONCEPTO_GLOSA;								
			row22.DESCRIPCION_GLOSA = row6.DESCRIPCION_GLOSA;								
			row22.VALOR_SERVICIO = row6.VALOR_SERVICIO;								
			row22.VALOR_GLOSADO = row6.VALOR_GLOSADO;								
			row22.VALOR_MCOBRADO = row6.VALOR_MCOBRADO;			

			nb_line_tUnite_2++;

//////////
 


	tos_count_tUnite_2++;

/**
 * [tUnite_2 main ] stop
 */
	
	/**
	 * [tUnite_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tUnite_2";
	
	

 



/**
 * [tUnite_2 process_data_begin ] stop
 */

	
	/**
	 * [tSortRow_1_SortOut main ] start
	 */

	

	
	
		currentVirtualComponent = "tSortRow_1";
	
	currentComponent="tSortRow_1_SortOut";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row22"
						
						);
					}
					



	Comparablerow22Struct arrayRowtSortRow_1_SortOut = new Comparablerow22Struct();

	arrayRowtSortRow_1_SortOut.FACTURA_ID = row22.FACTURA_ID;
	arrayRowtSortRow_1_SortOut.NUMERO_FACTURA = row22.NUMERO_FACTURA;
	arrayRowtSortRow_1_SortOut.DOCUMENTO = row22.DOCUMENTO;
	arrayRowtSortRow_1_SortOut.PACIENTE = row22.PACIENTE;
	arrayRowtSortRow_1_SortOut.CODIGO = row22.CODIGO;
	arrayRowtSortRow_1_SortOut.CONCEPTO_GLOSA = row22.CONCEPTO_GLOSA;
	arrayRowtSortRow_1_SortOut.DESCRIPCION_GLOSA = row22.DESCRIPCION_GLOSA;
	arrayRowtSortRow_1_SortOut.VALOR_SERVICIO = row22.VALOR_SERVICIO;
	arrayRowtSortRow_1_SortOut.VALOR_GLOSADO = row22.VALOR_GLOSADO;
	arrayRowtSortRow_1_SortOut.VALOR_MCOBRADO = row22.VALOR_MCOBRADO;	
	list_tSortRow_1_SortOut.add(arrayRowtSortRow_1_SortOut);

 


	tos_count_tSortRow_1_SortOut++;

/**
 * [tSortRow_1_SortOut main ] stop
 */
	
	/**
	 * [tSortRow_1_SortOut process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tSortRow_1";
	
	currentComponent="tSortRow_1_SortOut";
	
	

 



/**
 * [tSortRow_1_SortOut process_data_begin ] stop
 */
	
	/**
	 * [tSortRow_1_SortOut process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tSortRow_1";
	
	currentComponent="tSortRow_1_SortOut";
	
	

 



/**
 * [tSortRow_1_SortOut process_data_end ] stop
 */



	
	/**
	 * [tUnite_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tUnite_2";
	
	

 



/**
 * [tUnite_2 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_3";
	
	

 



/**
 * [tOracleInput_3 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_3 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_3";
	
	

}
}finally{
	if (rs_tOracleInput_3 != null) {
		rs_tOracleInput_3.close();
	}
	if (stmt_tOracleInput_3 != null) {
		stmt_tOracleInput_3.close();
	}
}

globalMap.put("tOracleInput_3_NB_LINE",nb_line_tOracleInput_3);
 

ok_Hash.put("tOracleInput_3", true);
end_Hash.put("tOracleInput_3", System.currentTimeMillis());




/**
 * [tOracleInput_3 end ] stop
 */
	
	/**
	 * [tOracleInput_8 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_8", false);
		start_Hash.put("tOracleInput_8", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_8";
	
	
		int tos_count_tOracleInput_8 = 0;
		
	


	
		    int nb_line_tOracleInput_8 = 0;
		    java.sql.Connection conn_tOracleInput_8 = null;
				conn_tOracleInput_8 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");
				
                boolean isTimeZoneNull_tOracleInput_8 = false;
				boolean isConnectionWrapped_tOracleInput_8 = !(conn_tOracleInput_8 instanceof oracle.jdbc.OracleConnection) && conn_tOracleInput_8.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tOracleInput_8 = null;
                if (isConnectionWrapped_tOracleInput_8) {
					unwrappedOraConn_tOracleInput_8 = conn_tOracleInput_8.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tOracleInput_8 != null) {
                        isTimeZoneNull_tOracleInput_8 = (unwrappedOraConn_tOracleInput_8.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tOracleInput_8 = (((oracle.jdbc.OracleConnection)conn_tOracleInput_8).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tOracleInput_8) {
					java.sql.Statement stmtGetTZ_tOracleInput_8 = conn_tOracleInput_8.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_8 = stmtGetTZ_tOracleInput_8.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_8 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tOracleInput_8.next()) {
						sessionTimezone_tOracleInput_8 = rsGetTZ_tOracleInput_8.getString(1);
					}
					if (isConnectionWrapped_tOracleInput_8 && unwrappedOraConn_tOracleInput_8 != null) {
                        unwrappedOraConn_tOracleInput_8.setSessionTimeZone(sessionTimezone_tOracleInput_8);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_8).setSessionTimeZone(sessionTimezone_tOracleInput_8);
                    }
				}
			
		    
			java.sql.Statement stmt_tOracleInput_8 = conn_tOracleInput_8.createStatement();

		    String dbquery_tOracleInput_8 = "\nSELECT\n	    AF.ID AS FACTURA_ID,\n        AF.PREFIJO || AF.NUMERO AS NUMERO_FACTURA,\n        GT.SIGLA || ' ' || DS."
+"DOCUMENTO AS DOCUMENTO,\n        DECODE(GP.ID, null, 'El usuario no se encuentra registrado en el sistema',  TRIM(GP.PRI"
+"MER_NOMBRE)||COALESCE(TRIM(GP.SEGUNDO_NOMBRE),' ')||TRIM(GP.PRIMER_APELLIDO)||TRIM(GP.SEGUNDO_APELLIDO)  ) AS PACIENTE,"
+"\n        ACG.CODIGO || ACE.CODIGO AS CODIGO,\n        AC.DESCRIPCION AS CONCEPTO_GLOSA,\n        HG.OBSERVACIONES AS DES"
+"CRIPCION_GLOSA,\n        SUM(DS.VTOTAL - DS.VMENORCOBRADO) AS VALOR_SERVICIO,\n        SUM(NVL(HG.VGLOSADO,0))   AS VALO"
+"R_GLOSADO,\n        SUM(NVL(DS.VMENORCOBRADO, 0)) AS VALOR_MCOBRADO\n    FROM\n        ACM_DFACTURASERVICIO DS\n        "
+"INNER JOIN ACM_FACTURA    	  AF   ON  AF.ID = DS.FACTURA_ID \n        LEFT  JOIN GEN_PERSONAS       GP   ON  GP.ID = DS."
+"PERSONAS_ID\n        LEFT  JOIN GEN_TDOCUMENTOS    GT   ON  GT.ID = DS.TDOCUMENTOS_ID \n        LEFT  JOIN ACM_GLOSASCAU"
+"SADAS AG   ON  AG.RECEPCION_ID = DS.RECEPCION_ID AND AG.DFACTURASERVICIO_ID = DS.ID  AND AG.ESTADO <> 'Eliminada' \n    "
+"    LEFT  JOIN ACM_CAUSALGLOSAS   AC   ON  AC.ID =  AG.CAUSALGLOSAS_ID\n        LEFT  JOIN ACM_CONCEPTOS      ACG  ON  A"
+"CG.ID = AC.CONCEPTOGENERAL_ID      AND  ACG.TCONCEPTO = 'GENERAL'    AND  ACG.ESTADO = 'Activo'\n        LEFT  JOIN ACM_"
+"CONCEPTOS      ACE  ON  ACE.ID = AC.CONCEPTOESPECIFICO_ID  AND  ACE.TCONCEPTO = 'ESPECIFICO' AND  ACE.ESTADO = 'Activo' "
+"    \n        LEFT  JOIN ACM_HGLOSASCAUSADAS HG  ON  HG.GLOSASCAUSADAS_ID = AG.ID  AND  HG.HAUDITORIAS_ID =  '" + context.HAUDITORIA_ID + "'  AND  HG.ESTREGISTRO_ID = 1\n        LEFT  JOIN ACM_HAUDITORIAS     HA  ON  HA.ID = HG.HAUDITORIAS_ID     AND HA.TIPO"
+" =  'Etapa'           \n        LEFT JOIN ACM_ETAPASNORMATIVIDAD  EN   ON  EN.ID = HG.ETAPASNORMATIVIDAD_ID   AND EN.COD"
+"IGO = 1  AND EN.ESTREGISTRO_ID = 1     \n    WHERE  DS.RECEPCION_ID = '" + context.RECEPCION_ID + "'\n    AND AF.ESTREGISTRO_ID = 1 \n	AND AG.ID IS NULL\n    GROUP BY AF.ID, AF.PREFIJO || AF.NUMERO, GT.SIGLA || ' ' || "
+"DS.DOCUMENTO, DECODE(GP.ID, null, 'El usuario no se encuentra registrado en el sistema', TRIM(GP.PRIMER_NOMBRE)||COALESC"
+"E(TRIM(GP.SEGUNDO_NOMBRE),' ')||TRIM(GP.PRIMER_APELLIDO)||TRIM(GP.SEGUNDO_APELLIDO) ), ACG.CODIGO || ACE.CODIGO, \n    A"
+"C.DESCRIPCION, HG.OBSERVACIONES \n    \n    UNION ALL\n     SELECT\n		AF.ID AS FACTURA_ID,\n        AF.PREFIJO || AF.NUM"
+"ERO AS NUMERO_FACTURA,\n        DS.TDOCUMENTO || ' ' || DS.DOCUMENTO AS DOCUMENTO,\n        DECODE(GP.ID, null, 'El usua"
+"rio no se encuentra registrado en el sistema',  TRIM(GP.PRIMER_NOMBRE)||COALESCE(TRIM(GP.SEGUNDO_NOMBRE),' ')||TRIM(GP.P"
+"RIMER_APELLIDO)||TRIM(GP.SEGUNDO_APELLIDO)  ) AS PACIENTE,\n        ACG.CODIGO || ACE.CODIGO AS CODIGO,\n        AC.DESC"
+"RIPCION AS CONCEPTO_GLOSA,\n        HG.OBSERVACIONES AS DESCRIPCION_GLOSA,\n        SUM(DS.VTOTAL - DS.VMENORCOBRADO) AS"
+" VALOR_SERVICIO,\n        SUM(NVL(HG.VGLOSADO,0))   AS VALOR_GLOSADO,\n        SUM(NVL(DS.VMENORCOBRADO, 0)) AS VALOR_MC"
+"OBRADO\n    FROM\n        ACM_DFACTURAFORMULACION DS\n        INNER JOIN ACM_FACTURA    	  AF   ON  AF.ID = DS.FACTURA_I"
+"D \n        LEFT JOIN GEN_PERSONAS       GP   ON  GP.DOCUMENTO = DS.DOCUMENTO AND GP.TDOCUMENTOS_ID = DS.TDOCUMENTOS_ID"
+"\n        LEFT  JOIN ACM_GLOSASCAUSADAS AG   ON  AG.RECEPCION_ID = DS.RECEPCION_ID AND AG.DFACTURAFORMULACION_ID = DS.ID "
+" AND AG.ESTADO <> 'Eliminada' \n        LEFT  JOIN ACM_CAUSALGLOSAS   AC   ON  AC.ID =  AG.CAUSALGLOSAS_ID\n        LEFT"
+"  JOIN ACM_CONCEPTOS      ACG  ON  ACG.ID = AC.CONCEPTOGENERAL_ID      AND  ACG.TCONCEPTO = 'GENERAL'    AND  ACG.ESTADO"
+" = 'Activo'\n        LEFT  JOIN ACM_CONCEPTOS      ACE  ON  ACE.ID = AC.CONCEPTOESPECIFICO_ID  AND  ACE.TCONCEPTO = 'ESP"
+"ECIFICO' AND  ACE.ESTADO = 'Activo'     \n        LEFT  JOIN ACM_HGLOSASCAUSADAS HG  ON  HG.GLOSASCAUSADAS_ID = AG.ID  A"
+"ND  HG.HAUDITORIAS_ID = '" + context.HAUDITORIA_ID + "'  AND  HG.ESTREGISTRO_ID = 1\n        LEFT  JOIN ACM_HAUDITORIAS     HA  ON  HA.ID = HG.HAUDITORIAS_ID     AND HA.TIPO"
+" =  'Etapa'           \n        LEFT JOIN ACM_ETAPASNORMATIVIDAD  EN   ON  EN.ID = HG.ETAPASNORMATIVIDAD_ID  AND EN.CODI"
+"GO = 1   AND EN.ESTREGISTRO_ID = 1     \n    WHERE  DS.RECEPCION_ID = '" + context.RECEPCION_ID + "'\n    AND AF.ESTREGISTRO_ID = 1\n	AND AG.ID IS NULL\n    GROUP BY AF.ID, AF.PREFIJO || AF.NUMERO, DS.TDOCUMENTO || ' '"
+" || DS.DOCUMENTO, DECODE(GP.ID, null, 'El usuario no se encuentra registrado en el sistema', TRIM(GP.PRIMER_NOMBRE)||COA"
+"LESCE(TRIM(GP.SEGUNDO_NOMBRE),' ')||TRIM(GP.PRIMER_APELLIDO)||TRIM(GP.SEGUNDO_APELLIDO) ), ACG.CODIGO || ACE.CODIGO, \n "
+"   AC.DESCRIPCION, HG.OBSERVACIONES \n    ORDER BY NUMERO_FACTURA, DOCUMENTO ";
		    

		    globalMap.put("tOracleInput_8_QUERY",dbquery_tOracleInput_8);

		    java.sql.ResultSet rs_tOracleInput_8 = null;

		    try {
		    	rs_tOracleInput_8 = stmt_tOracleInput_8.executeQuery(dbquery_tOracleInput_8);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_8 = rs_tOracleInput_8.getMetaData();
		    	int colQtyInRs_tOracleInput_8 = rsmd_tOracleInput_8.getColumnCount();

		    String tmpContent_tOracleInput_8 = null;
		    
		    
		    while (rs_tOracleInput_8.next()) {
		        nb_line_tOracleInput_8++;
		        
							if(colQtyInRs_tOracleInput_8 < 1) {
								row21.FACTURA_ID = null;
							} else {
		                          
					if(rs_tOracleInput_8.getObject(1) != null) {
						row21.FACTURA_ID = rs_tOracleInput_8.getBigDecimal(1);
					} else {
				
						row21.FACTURA_ID = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_8 < 2) {
								row21.NUMERO_FACTURA = null;
							} else {
	                         		
        	row21.NUMERO_FACTURA = routines.system.JDBCUtil.getString(rs_tOracleInput_8, 2, false);
		                    }
							if(colQtyInRs_tOracleInput_8 < 3) {
								row21.DOCUMENTO = null;
							} else {
	                         		
        	row21.DOCUMENTO = routines.system.JDBCUtil.getString(rs_tOracleInput_8, 3, false);
		                    }
							if(colQtyInRs_tOracleInput_8 < 4) {
								row21.PACIENTE = null;
							} else {
	                         		
        	row21.PACIENTE = routines.system.JDBCUtil.getString(rs_tOracleInput_8, 4, false);
		                    }
							if(colQtyInRs_tOracleInput_8 < 5) {
								row21.CODIGO = null;
							} else {
	                         		
        	row21.CODIGO = routines.system.JDBCUtil.getString(rs_tOracleInput_8, 5, false);
		                    }
							if(colQtyInRs_tOracleInput_8 < 6) {
								row21.CONCEPTO_GLOSA = null;
							} else {
	                         		
        	row21.CONCEPTO_GLOSA = routines.system.JDBCUtil.getString(rs_tOracleInput_8, 6, false);
		                    }
							if(colQtyInRs_tOracleInput_8 < 7) {
								row21.DESCRIPCION_GLOSA = null;
							} else {
	                         		
        	row21.DESCRIPCION_GLOSA = routines.system.JDBCUtil.getString(rs_tOracleInput_8, 7, false);
		                    }
							if(colQtyInRs_tOracleInput_8 < 8) {
								row21.VALOR_SERVICIO = null;
							} else {
		                          
					if(rs_tOracleInput_8.getObject(8) != null) {
						row21.VALOR_SERVICIO = rs_tOracleInput_8.getBigDecimal(8);
					} else {
				
						row21.VALOR_SERVICIO = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_8 < 9) {
								row21.VALOR_GLOSADO = null;
							} else {
		                          
					if(rs_tOracleInput_8.getObject(9) != null) {
						row21.VALOR_GLOSADO = rs_tOracleInput_8.getBigDecimal(9);
					} else {
				
						row21.VALOR_GLOSADO = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_8 < 10) {
								row21.VALOR_MCOBRADO = null;
							} else {
		                          
					if(rs_tOracleInput_8.getObject(10) != null) {
						row21.VALOR_MCOBRADO = rs_tOracleInput_8.getBigDecimal(10);
					} else {
				
						row21.VALOR_MCOBRADO = null;
					}
		                    }
					




 



/**
 * [tOracleInput_8 begin ] stop
 */
	
	/**
	 * [tOracleInput_8 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_8";
	
	

 


	tos_count_tOracleInput_8++;

/**
 * [tOracleInput_8 main ] stop
 */
	
	/**
	 * [tOracleInput_8 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_8";
	
	

 



/**
 * [tOracleInput_8 process_data_begin ] stop
 */

	
	/**
	 * [tUnite_2 main ] start
	 */

	

	
	
	currentComponent="tUnite_2";
	
	
						if(execStat){
							runStat.updateStatOnConnection(iterateId,1,1
								
									,"row21"
									
							);
						}
						
//////////
 

// for output
			row22 = new row22Struct();
								
			row22.FACTURA_ID = row21.FACTURA_ID;								
			row22.NUMERO_FACTURA = row21.NUMERO_FACTURA;								
			row22.DOCUMENTO = row21.DOCUMENTO;								
			row22.PACIENTE = row21.PACIENTE;								
			row22.CODIGO = row21.CODIGO;								
			row22.CONCEPTO_GLOSA = row21.CONCEPTO_GLOSA;								
			row22.DESCRIPCION_GLOSA = row21.DESCRIPCION_GLOSA;								
			row22.VALOR_SERVICIO = row21.VALOR_SERVICIO;								
			row22.VALOR_GLOSADO = row21.VALOR_GLOSADO;								
			row22.VALOR_MCOBRADO = row21.VALOR_MCOBRADO;			

			nb_line_tUnite_2++;

//////////
 


	tos_count_tUnite_2++;

/**
 * [tUnite_2 main ] stop
 */
	
	/**
	 * [tUnite_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tUnite_2";
	
	

 



/**
 * [tUnite_2 process_data_begin ] stop
 */

	
	/**
	 * [tSortRow_1_SortOut main ] start
	 */

	

	
	
		currentVirtualComponent = "tSortRow_1";
	
	currentComponent="tSortRow_1_SortOut";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row22"
						
						);
					}
					



	Comparablerow22Struct arrayRowtSortRow_1_SortOut = new Comparablerow22Struct();

	arrayRowtSortRow_1_SortOut.FACTURA_ID = row22.FACTURA_ID;
	arrayRowtSortRow_1_SortOut.NUMERO_FACTURA = row22.NUMERO_FACTURA;
	arrayRowtSortRow_1_SortOut.DOCUMENTO = row22.DOCUMENTO;
	arrayRowtSortRow_1_SortOut.PACIENTE = row22.PACIENTE;
	arrayRowtSortRow_1_SortOut.CODIGO = row22.CODIGO;
	arrayRowtSortRow_1_SortOut.CONCEPTO_GLOSA = row22.CONCEPTO_GLOSA;
	arrayRowtSortRow_1_SortOut.DESCRIPCION_GLOSA = row22.DESCRIPCION_GLOSA;
	arrayRowtSortRow_1_SortOut.VALOR_SERVICIO = row22.VALOR_SERVICIO;
	arrayRowtSortRow_1_SortOut.VALOR_GLOSADO = row22.VALOR_GLOSADO;
	arrayRowtSortRow_1_SortOut.VALOR_MCOBRADO = row22.VALOR_MCOBRADO;	
	list_tSortRow_1_SortOut.add(arrayRowtSortRow_1_SortOut);

 


	tos_count_tSortRow_1_SortOut++;

/**
 * [tSortRow_1_SortOut main ] stop
 */
	
	/**
	 * [tSortRow_1_SortOut process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tSortRow_1";
	
	currentComponent="tSortRow_1_SortOut";
	
	

 



/**
 * [tSortRow_1_SortOut process_data_begin ] stop
 */
	
	/**
	 * [tSortRow_1_SortOut process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tSortRow_1";
	
	currentComponent="tSortRow_1_SortOut";
	
	

 



/**
 * [tSortRow_1_SortOut process_data_end ] stop
 */



	
	/**
	 * [tUnite_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tUnite_2";
	
	

 



/**
 * [tUnite_2 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_8 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_8";
	
	

 



/**
 * [tOracleInput_8 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_8 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_8";
	
	

}
}finally{
	if (rs_tOracleInput_8 != null) {
		rs_tOracleInput_8.close();
	}
	if (stmt_tOracleInput_8 != null) {
		stmt_tOracleInput_8.close();
	}
}

globalMap.put("tOracleInput_8_NB_LINE",nb_line_tOracleInput_8);
 

ok_Hash.put("tOracleInput_8", true);
end_Hash.put("tOracleInput_8", System.currentTimeMillis());




/**
 * [tOracleInput_8 end ] stop
 */
	
	/**
	 * [tUnite_2 end ] start
	 */

	

	
	
	currentComponent="tUnite_2";
	
	

globalMap.put("tUnite_2_NB_LINE", nb_line_tUnite_2);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row6","row21");
			  	}
			  	
 

ok_Hash.put("tUnite_2", true);
end_Hash.put("tUnite_2", System.currentTimeMillis());




/**
 * [tUnite_2 end ] stop
 */

	
	/**
	 * [tSortRow_1_SortOut end ] start
	 */

	

	
	
		currentVirtualComponent = "tSortRow_1";
	
	currentComponent="tSortRow_1_SortOut";
	
	

row22Struct[] array_tSortRow_1_SortOut = list_tSortRow_1_SortOut.toArray(new Comparablerow22Struct[0]);

java.util.Arrays.sort(array_tSortRow_1_SortOut);

globalMap.put("tSortRow_1",array_tSortRow_1_SortOut);


				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row22");
			  	}
			  	
 

ok_Hash.put("tSortRow_1_SortOut", true);
end_Hash.put("tSortRow_1_SortOut", System.currentTimeMillis());




/**
 * [tSortRow_1_SortOut end ] stop
 */





	
	/**
	 * [tFileOutputExcel_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputExcel_1", false);
		start_Hash.put("tFileOutputExcel_1", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputExcel_1";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"out2");
					}
				
		int tos_count_tFileOutputExcel_1 = 0;
		


		
		int columnIndex_tFileOutputExcel_1 = 0;
		boolean headerIsInserted_tFileOutputExcel_1 = false;
		
		
		String fileName_tFileOutputExcel_1=context.fileSystem_URL;
		int nb_line_tFileOutputExcel_1 = 0;
		org.talend.ExcelTool xlsxTool_tFileOutputExcel_1 = new org.talend.ExcelTool();
		xlsxTool_tFileOutputExcel_1.setUseSharedStringTable(false);
		
    xlsxTool_tFileOutputExcel_1.setTruncateExceedingCharacters(false);
		xlsxTool_tFileOutputExcel_1.setSheet("main");
		xlsxTool_tFileOutputExcel_1.setAppend(true,true, false);
		xlsxTool_tFileOutputExcel_1.setRecalculateFormula(false);
		xlsxTool_tFileOutputExcel_1.setXY(false,0,0,false);
		
		java.util.concurrent.ConcurrentHashMap<java.lang.Object, java.lang.Object> chm_tFileOutputExcel_1 = (java.util.concurrent.ConcurrentHashMap<java.lang.Object, java.lang.Object>) globalMap.get("concurrentHashMap");
		java.lang.Object lockObj_tFileOutputExcel_1 = chm_tFileOutputExcel_1.computeIfAbsent("EXCEL_OUTPUT_LOCK_OBJ_tFileOutputExcel_1", k -> new Object());
		synchronized (lockObj_tFileOutputExcel_1) {
			
				xlsxTool_tFileOutputExcel_1.prepareXlsxFile(fileName_tFileOutputExcel_1);
			
		}
		
		xlsxTool_tFileOutputExcel_1.setFont("ARIAL");
		

 



/**
 * [tFileOutputExcel_1 begin ] stop
 */



	
	/**
	 * [tMap_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_2", false);
		start_Hash.put("tMap_2", System.currentTimeMillis());
		
	
	currentComponent="tMap_2";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row10");
					}
				
		int tos_count_tMap_2 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_2__Struct  {
}
Var__tMap_2__Struct Var__tMap_2 = new Var__tMap_2__Struct();
// ###############################

// ###############################
// # Outputs initialization
out2Struct out2_tmp = new out2Struct();
// ###############################

        
        



        









 



/**
 * [tMap_2 begin ] stop
 */



	
	/**
	 * [tJavaRow_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaRow_2", false);
		start_Hash.put("tJavaRow_2", System.currentTimeMillis());
		
	
	currentComponent="tJavaRow_2";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"out1");
					}
				
		int tos_count_tJavaRow_2 = 0;
		

int nb_line_tJavaRow_2 = 0;

 



/**
 * [tJavaRow_2 begin ] stop
 */



	
	/**
	 * [tMap_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_1", false);
		start_Hash.put("tMap_1", System.currentTimeMillis());
		
	
	currentComponent="tMap_1";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row23");
					}
				
		int tos_count_tMap_1 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_1__Struct  {
	BigDecimal var1;
}
Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
// ###############################

// ###############################
// # Outputs initialization
out1Struct out1_tmp = new out1Struct();
// ###############################

        
        



        









 



/**
 * [tMap_1 begin ] stop
 */



	
	/**
	 * [tSortRow_1_SortIn begin ] start
	 */

	

	
		
		ok_Hash.put("tSortRow_1_SortIn", false);
		start_Hash.put("tSortRow_1_SortIn", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tSortRow_1";
	
	currentComponent="tSortRow_1_SortIn";
	
	
		int tos_count_tSortRow_1_SortIn = 0;
		


row22Struct[] array_tSortRow_1_SortIn = (row22Struct[]) globalMap.remove("tSortRow_1");

int nb_line_tSortRow_1_SortIn = 0;

row22Struct current_tSortRow_1_SortIn = null;

for(int i_tSortRow_1_SortIn = 0; i_tSortRow_1_SortIn < array_tSortRow_1_SortIn.length; i_tSortRow_1_SortIn++){
	current_tSortRow_1_SortIn = array_tSortRow_1_SortIn[i_tSortRow_1_SortIn];
	row23.FACTURA_ID = current_tSortRow_1_SortIn.FACTURA_ID;
	row23.NUMERO_FACTURA = current_tSortRow_1_SortIn.NUMERO_FACTURA;
	row23.DOCUMENTO = current_tSortRow_1_SortIn.DOCUMENTO;
	row23.PACIENTE = current_tSortRow_1_SortIn.PACIENTE;
	row23.CODIGO = current_tSortRow_1_SortIn.CODIGO;
	row23.CONCEPTO_GLOSA = current_tSortRow_1_SortIn.CONCEPTO_GLOSA;
	row23.DESCRIPCION_GLOSA = current_tSortRow_1_SortIn.DESCRIPCION_GLOSA;
	row23.VALOR_SERVICIO = current_tSortRow_1_SortIn.VALOR_SERVICIO;
	row23.VALOR_GLOSADO = current_tSortRow_1_SortIn.VALOR_GLOSADO;
	row23.VALOR_MCOBRADO = current_tSortRow_1_SortIn.VALOR_MCOBRADO;
	// increase number of line sorted
	nb_line_tSortRow_1_SortIn++;

 



/**
 * [tSortRow_1_SortIn begin ] stop
 */
	
	/**
	 * [tSortRow_1_SortIn main ] start
	 */

	

	
	
		currentVirtualComponent = "tSortRow_1";
	
	currentComponent="tSortRow_1_SortIn";
	
	

 


	tos_count_tSortRow_1_SortIn++;

/**
 * [tSortRow_1_SortIn main ] stop
 */
	
	/**
	 * [tSortRow_1_SortIn process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tSortRow_1";
	
	currentComponent="tSortRow_1_SortIn";
	
	

 



/**
 * [tSortRow_1_SortIn process_data_begin ] stop
 */

	
	/**
	 * [tMap_1 main ] start
	 */

	

	
	
	currentComponent="tMap_1";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row23"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;
		
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_1 = false;
		boolean mainRowRejected_tMap_1 = false;
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_1__Struct Var = Var__tMap_1;
Var.var1 = (row23.VALOR_GLOSADO != null)? row23.VALOR_GLOSADO : new BigDecimal(0) ;// ###############################
        // ###############################
        // # Output tables

out1 = null;


// # Output table : 'out1'
out1_tmp.FACTURA_ID = row23.FACTURA_ID ;
out1_tmp.NUMERO_FACTURA = row23.NUMERO_FACTURA ;
out1_tmp.DOCUMENTO = row23.DOCUMENTO ;
out1_tmp.PACIENTE = row23.PACIENTE ;
out1_tmp.CODIGO = row23.CODIGO ;
out1_tmp.CONCEPTO_GLOSA = row23.CONCEPTO_GLOSA ;
out1_tmp.DESCRIPCION_GLOSA = row23.DESCRIPCION_GLOSA ;
out1_tmp.VALOR_SERVICIO = row23.VALOR_SERVICIO ;
out1_tmp.VALOR_GLOSADO = Var.var1 ;
out1_tmp.VALOR_COBRADO = row23.VALOR_MCOBRADO ;
out1_tmp.VALOR_NETO = null;
out1 = out1_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_1 = false;










 


	tos_count_tMap_1++;

/**
 * [tMap_1 main ] stop
 */
	
	/**
	 * [tMap_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_1";
	
	

 



/**
 * [tMap_1 process_data_begin ] stop
 */
// Start of branch "out1"
if(out1 != null) { 



	
	/**
	 * [tJavaRow_2 main ] start
	 */

	

	
	
	currentComponent="tJavaRow_2";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"out1"
						
						);
					}
					

    //Code generate according to input schema and output schema
row10.NUMERO_FACTURA = out1.NUMERO_FACTURA;
row10.DOCUMENTO = out1.DOCUMENTO;
row10.PACIENTE = out1.PACIENTE;
row10.CODIGO = out1.CODIGO;
row10.CONCEPTO_GLOSA = out1.CONCEPTO_GLOSA;
row10.DESCRIPCION_GLOSA = out1.DESCRIPCION_GLOSA;
row10.VALOR_GLOSADO = out1.VALOR_GLOSADO;
row10.VALOR_COBRADO = out1.VALOR_COBRADO;

context.CONTADOR ++ ;

	if((context.FACTURA_ID.equals(out1.FACTURA_ID)) && (context.DOCUMENTO.equals(row10.DOCUMENTO)))
	{
		row10.VALOR_SERVICIO = new BigDecimal(0);
		context.SUMADOR_NETO = context.SUMADOR_NETO.subtract(row10.VALOR_GLOSADO);
		row10.VALOR_NETO = context.SUMADOR_NETO;
		
		if( ((Integer)globalMap.get("tOracleInput_3_NB_LINE")) == context.CONTADOR )
		{
			context.VNETO = context.VNETO.add(context.SUMADOR_NETO);
		}
	}

	else	
	{
		context.VNETO = context.VNETO.add(context.SUMADOR_NETO);
		row10.VALOR_SERVICIO = out1.VALOR_SERVICIO;
		row10.VALOR_NETO = row10.VALOR_SERVICIO.subtract(row10.VALOR_GLOSADO);
	
		context.SUMADOR_NETO = 	row10.VALOR_NETO;
	}


context.FACTURA_ID = out1.FACTURA_ID;
context.DOCUMENTO  = out1.DOCUMENTO;

// SE OBTIENE LOS TOTALES
context.VFACTURADO = context.VFACTURADO.add(row10.VALOR_SERVICIO);
context.VGLOSADO   = context.VGLOSADO.add(row10.VALOR_GLOSADO);
context.VCOBRADO   = context.VCOBRADO.add(row10.VALOR_COBRADO);
//context.VNETO = context.VNETO.add(row10.VALOR_NETO);
    nb_line_tJavaRow_2++;   

 


	tos_count_tJavaRow_2++;

/**
 * [tJavaRow_2 main ] stop
 */
	
	/**
	 * [tJavaRow_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJavaRow_2";
	
	

 



/**
 * [tJavaRow_2 process_data_begin ] stop
 */

	
	/**
	 * [tMap_2 main ] start
	 */

	

	
	
	currentComponent="tMap_2";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row10"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_2 = false;
		
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_2 = false;
		boolean mainRowRejected_tMap_2 = false;
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_2__Struct Var = Var__tMap_2;// ###############################
        // ###############################
        // # Output tables

out2 = null;


// # Output table : 'out2'
out2_tmp.NUMERO_FACTURA = row10.NUMERO_FACTURA ;
out2_tmp.DOCUMENTO = row10.DOCUMENTO ;
out2_tmp.PACIENTE = row10.PACIENTE ;
out2_tmp.CODIGO = row10.CODIGO ;
out2_tmp.CONCEPTO_GLOSA = row10.CONCEPTO_GLOSA ;
out2_tmp.DESCRIPCION_GLOSA = row10.DESCRIPCION_GLOSA ;
out2_tmp.VALOR_SERVICIO = NumberFormat.getCurrencyInstance(Locale.US).format(row10.VALOR_SERVICIO) ;
out2_tmp.VALOR_GLOSADO = NumberFormat.getCurrencyInstance(Locale.US).format(row10.VALOR_GLOSADO) ;
out2_tmp.VALOR_COBRADO = NumberFormat.getCurrencyInstance(Locale.US).format(row10.VALOR_COBRADO) ;
out2_tmp.VALOR_NETO = NumberFormat.getCurrencyInstance(Locale.US).format(row10.VALOR_NETO) ;
out2 = out2_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_2 = false;










 


	tos_count_tMap_2++;

/**
 * [tMap_2 main ] stop
 */
	
	/**
	 * [tMap_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_2";
	
	

 



/**
 * [tMap_2 process_data_begin ] stop
 */
// Start of branch "out2"
if(out2 != null) { 



	
	/**
	 * [tFileOutputExcel_1 main ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_1";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"out2"
						
						);
					}
					

				xlsxTool_tFileOutputExcel_1.addRow();
									   				
	    				if(out2.NUMERO_FACTURA != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(out2.NUMERO_FACTURA));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(out2.DOCUMENTO != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(out2.DOCUMENTO));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(out2.PACIENTE != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(out2.PACIENTE));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(out2.CODIGO != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(out2.CODIGO));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(out2.CONCEPTO_GLOSA != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(out2.CONCEPTO_GLOSA));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(out2.DESCRIPCION_GLOSA != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(out2.DESCRIPCION_GLOSA));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(out2.VALOR_SERVICIO != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(out2.VALOR_SERVICIO));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(out2.VALOR_GLOSADO != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(out2.VALOR_GLOSADO));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(out2.VALOR_COBRADO != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(out2.VALOR_COBRADO));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(out2.VALOR_NETO != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(out2.VALOR_NETO));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
    			nb_line_tFileOutputExcel_1++;
				
 


	tos_count_tFileOutputExcel_1++;

/**
 * [tFileOutputExcel_1 main ] stop
 */
	
	/**
	 * [tFileOutputExcel_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_1";
	
	

 



/**
 * [tFileOutputExcel_1 process_data_begin ] stop
 */
	
	/**
	 * [tFileOutputExcel_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_1";
	
	

 



/**
 * [tFileOutputExcel_1 process_data_end ] stop
 */

} // End of branch "out2"




	
	/**
	 * [tMap_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_2";
	
	

 



/**
 * [tMap_2 process_data_end ] stop
 */



	
	/**
	 * [tJavaRow_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tJavaRow_2";
	
	

 



/**
 * [tJavaRow_2 process_data_end ] stop
 */

} // End of branch "out1"




	
	/**
	 * [tMap_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_1";
	
	

 



/**
 * [tMap_1 process_data_end ] stop
 */



	
	/**
	 * [tSortRow_1_SortIn process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tSortRow_1";
	
	currentComponent="tSortRow_1_SortIn";
	
	

 



/**
 * [tSortRow_1_SortIn process_data_end ] stop
 */
	
	/**
	 * [tSortRow_1_SortIn end ] start
	 */

	

	
	
		currentVirtualComponent = "tSortRow_1";
	
	currentComponent="tSortRow_1_SortIn";
	
	


}

globalMap.put("tSortRow_1_SortIn_NB_LINE",nb_line_tSortRow_1_SortIn);

 

ok_Hash.put("tSortRow_1_SortIn", true);
end_Hash.put("tSortRow_1_SortIn", System.currentTimeMillis());




/**
 * [tSortRow_1_SortIn end ] stop
 */

	
	/**
	 * [tMap_1 end ] start
	 */

	

	
	
	currentComponent="tMap_1";
	
	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row23");
			  	}
			  	
 

ok_Hash.put("tMap_1", true);
end_Hash.put("tMap_1", System.currentTimeMillis());




/**
 * [tMap_1 end ] stop
 */

	
	/**
	 * [tJavaRow_2 end ] start
	 */

	

	
	
	currentComponent="tJavaRow_2";
	
	

globalMap.put("tJavaRow_2_NB_LINE",nb_line_tJavaRow_2);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"out1");
			  	}
			  	
 

ok_Hash.put("tJavaRow_2", true);
end_Hash.put("tJavaRow_2", System.currentTimeMillis());




/**
 * [tJavaRow_2 end ] stop
 */

	
	/**
	 * [tMap_2 end ] start
	 */

	

	
	
	currentComponent="tMap_2";
	
	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row10");
			  	}
			  	
 

ok_Hash.put("tMap_2", true);
end_Hash.put("tMap_2", System.currentTimeMillis());




/**
 * [tMap_2 end ] stop
 */

	
	/**
	 * [tFileOutputExcel_1 end ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_1";
	
	

									columnIndex_tFileOutputExcel_1 = 2;
								
					xlsxTool_tFileOutputExcel_1.setColAutoSize(columnIndex_tFileOutputExcel_1);
	
	
	
	
			xlsxTool_tFileOutputExcel_1.writeExcel(fileName_tFileOutputExcel_1,true);
	
		if(headerIsInserted_tFileOutputExcel_1 && nb_line_tFileOutputExcel_1 > 0){
			nb_line_tFileOutputExcel_1 = nb_line_tFileOutputExcel_1 -1;
		}
		globalMap.put("tFileOutputExcel_1_NB_LINE",nb_line_tFileOutputExcel_1);
		
		

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"out2");
			  	}
			  	
 

ok_Hash.put("tFileOutputExcel_1", true);
end_Hash.put("tFileOutputExcel_1", System.currentTimeMillis());




/**
 * [tFileOutputExcel_1 end ] stop
 */


















				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tOracleInput_3:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk2", 0, "ok");
								} 
							
							tFixedFlowInput_2Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
					te.setVirtualComponentName(currentVirtualComponent);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
							//free memory for "tSortRow_1_SortIn"
							globalMap.remove("tSortRow_1");
						
				try{
					
	
	/**
	 * [tOracleInput_3 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_3";
	
	

 



/**
 * [tOracleInput_3 finally ] stop
 */
	
	/**
	 * [tOracleInput_8 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_8";
	
	

 



/**
 * [tOracleInput_8 finally ] stop
 */
	
	/**
	 * [tUnite_2 finally ] start
	 */

	

	
	
	currentComponent="tUnite_2";
	
	

 



/**
 * [tUnite_2 finally ] stop
 */

	
	/**
	 * [tSortRow_1_SortOut finally ] start
	 */

	

	
	
		currentVirtualComponent = "tSortRow_1";
	
	currentComponent="tSortRow_1_SortOut";
	
	

 



/**
 * [tSortRow_1_SortOut finally ] stop
 */

	
	/**
	 * [tSortRow_1_SortIn finally ] start
	 */

	

	
	
		currentVirtualComponent = "tSortRow_1";
	
	currentComponent="tSortRow_1_SortIn";
	
	

 



/**
 * [tSortRow_1_SortIn finally ] stop
 */

	
	/**
	 * [tMap_1 finally ] start
	 */

	

	
	
	currentComponent="tMap_1";
	
	

 



/**
 * [tMap_1 finally ] stop
 */

	
	/**
	 * [tJavaRow_2 finally ] start
	 */

	

	
	
	currentComponent="tJavaRow_2";
	
	

 



/**
 * [tJavaRow_2 finally ] stop
 */

	
	/**
	 * [tMap_2 finally ] start
	 */

	

	
	
	currentComponent="tMap_2";
	
	

 



/**
 * [tMap_2 finally ] stop
 */

	
	/**
	 * [tFileOutputExcel_1 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_1";
	
	

 



/**
 * [tFileOutputExcel_1 finally ] stop
 */


















				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_3_SUBPROCESS_STATE", 1);
	}
	


public static class row7Struct implements routines.system.IPersistableRow<row7Struct> {
    final static byte[] commonByteArrayLock_ACM_ACTAS_Actas = new byte[0];
    static byte[] commonByteArray_ACM_ACTAS_Actas = new byte[0];

	
			    public String Column_A;

				public String getColumn_A () {
					return this.Column_A;
				}

				public Boolean Column_AIsNullable(){
				    return true;
				}
				public Boolean Column_AIsKey(){
				    return false;
				}
				public Integer Column_ALength(){
				    return null;
				}
				public Integer Column_APrecision(){
				    return null;
				}
				public String Column_ADefault(){
				
					return null;
				
				}
				public String Column_AComment(){
				
				    return "";
				
				}
				public String Column_APattern(){
				
					return "";
				
				}
				public String Column_AOriginalDbColumnName(){
				
					return "Column_A";
				
				}

				
			    public String Column_B;

				public String getColumn_B () {
					return this.Column_B;
				}

				public Boolean Column_BIsNullable(){
				    return true;
				}
				public Boolean Column_BIsKey(){
				    return false;
				}
				public Integer Column_BLength(){
				    return null;
				}
				public Integer Column_BPrecision(){
				    return null;
				}
				public String Column_BDefault(){
				
					return null;
				
				}
				public String Column_BComment(){
				
				    return "";
				
				}
				public String Column_BPattern(){
				
					return "";
				
				}
				public String Column_BOriginalDbColumnName(){
				
					return "Column_B";
				
				}

				
			    public String Column_C;

				public String getColumn_C () {
					return this.Column_C;
				}

				public Boolean Column_CIsNullable(){
				    return true;
				}
				public Boolean Column_CIsKey(){
				    return false;
				}
				public Integer Column_CLength(){
				    return null;
				}
				public Integer Column_CPrecision(){
				    return null;
				}
				public String Column_CDefault(){
				
					return null;
				
				}
				public String Column_CComment(){
				
				    return "";
				
				}
				public String Column_CPattern(){
				
					return "";
				
				}
				public String Column_COriginalDbColumnName(){
				
					return "Column_C";
				
				}

				
			    public String Column_D;

				public String getColumn_D () {
					return this.Column_D;
				}

				public Boolean Column_DIsNullable(){
				    return true;
				}
				public Boolean Column_DIsKey(){
				    return false;
				}
				public Integer Column_DLength(){
				    return null;
				}
				public Integer Column_DPrecision(){
				    return null;
				}
				public String Column_DDefault(){
				
					return null;
				
				}
				public String Column_DComment(){
				
				    return "";
				
				}
				public String Column_DPattern(){
				
					return "";
				
				}
				public String Column_DOriginalDbColumnName(){
				
					return "Column_D";
				
				}

				
			    public String Column_E;

				public String getColumn_E () {
					return this.Column_E;
				}

				public Boolean Column_EIsNullable(){
				    return true;
				}
				public Boolean Column_EIsKey(){
				    return false;
				}
				public Integer Column_ELength(){
				    return null;
				}
				public Integer Column_EPrecision(){
				    return null;
				}
				public String Column_EDefault(){
				
					return null;
				
				}
				public String Column_EComment(){
				
				    return "";
				
				}
				public String Column_EPattern(){
				
					return "";
				
				}
				public String Column_EOriginalDbColumnName(){
				
					return "Column_E";
				
				}

				
			    public String Column_F;

				public String getColumn_F () {
					return this.Column_F;
				}

				public Boolean Column_FIsNullable(){
				    return true;
				}
				public Boolean Column_FIsKey(){
				    return false;
				}
				public Integer Column_FLength(){
				    return null;
				}
				public Integer Column_FPrecision(){
				    return null;
				}
				public String Column_FDefault(){
				
					return null;
				
				}
				public String Column_FComment(){
				
				    return "";
				
				}
				public String Column_FPattern(){
				
					return "";
				
				}
				public String Column_FOriginalDbColumnName(){
				
					return "Column_F";
				
				}

				
			    public String VALOR_FACTURADO;

				public String getVALOR_FACTURADO () {
					return this.VALOR_FACTURADO;
				}

				public Boolean VALOR_FACTURADOIsNullable(){
				    return true;
				}
				public Boolean VALOR_FACTURADOIsKey(){
				    return false;
				}
				public Integer VALOR_FACTURADOLength(){
				    return null;
				}
				public Integer VALOR_FACTURADOPrecision(){
				    return null;
				}
				public String VALOR_FACTURADODefault(){
				
					return null;
				
				}
				public String VALOR_FACTURADOComment(){
				
				    return "";
				
				}
				public String VALOR_FACTURADOPattern(){
				
					return "";
				
				}
				public String VALOR_FACTURADOOriginalDbColumnName(){
				
					return "VALOR_FACTURADO";
				
				}

				
			    public String VALOR_GLOSADO;

				public String getVALOR_GLOSADO () {
					return this.VALOR_GLOSADO;
				}

				public Boolean VALOR_GLOSADOIsNullable(){
				    return true;
				}
				public Boolean VALOR_GLOSADOIsKey(){
				    return false;
				}
				public Integer VALOR_GLOSADOLength(){
				    return null;
				}
				public Integer VALOR_GLOSADOPrecision(){
				    return null;
				}
				public String VALOR_GLOSADODefault(){
				
					return null;
				
				}
				public String VALOR_GLOSADOComment(){
				
				    return "";
				
				}
				public String VALOR_GLOSADOPattern(){
				
					return "";
				
				}
				public String VALOR_GLOSADOOriginalDbColumnName(){
				
					return "VALOR_GLOSADO";
				
				}

				
			    public String VALOR_COBRADO;

				public String getVALOR_COBRADO () {
					return this.VALOR_COBRADO;
				}

				public Boolean VALOR_COBRADOIsNullable(){
				    return true;
				}
				public Boolean VALOR_COBRADOIsKey(){
				    return false;
				}
				public Integer VALOR_COBRADOLength(){
				    return null;
				}
				public Integer VALOR_COBRADOPrecision(){
				    return null;
				}
				public String VALOR_COBRADODefault(){
				
					return null;
				
				}
				public String VALOR_COBRADOComment(){
				
				    return "";
				
				}
				public String VALOR_COBRADOPattern(){
				
					return "";
				
				}
				public String VALOR_COBRADOOriginalDbColumnName(){
				
					return "VALOR_COBRADO";
				
				}

				
			    public String VALOR_NETO;

				public String getVALOR_NETO () {
					return this.VALOR_NETO;
				}

				public Boolean VALOR_NETOIsNullable(){
				    return true;
				}
				public Boolean VALOR_NETOIsKey(){
				    return false;
				}
				public Integer VALOR_NETOLength(){
				    return null;
				}
				public Integer VALOR_NETOPrecision(){
				    return null;
				}
				public String VALOR_NETODefault(){
				
					return null;
				
				}
				public String VALOR_NETOComment(){
				
				    return "";
				
				}
				public String VALOR_NETOPattern(){
				
					return "";
				
				}
				public String VALOR_NETOOriginalDbColumnName(){
				
					return "VALOR_NETO";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_ACTAS_Actas.length) {
				if(length < 1024 && commonByteArray_ACM_ACTAS_Actas.length == 0) {
   					commonByteArray_ACM_ACTAS_Actas = new byte[1024];
				} else {
   					commonByteArray_ACM_ACTAS_Actas = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ACM_ACTAS_Actas, 0, length);
			strReturn = new String(commonByteArray_ACM_ACTAS_Actas, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_ACTAS_Actas.length) {
				if(length < 1024 && commonByteArray_ACM_ACTAS_Actas.length == 0) {
   					commonByteArray_ACM_ACTAS_Actas = new byte[1024];
				} else {
   					commonByteArray_ACM_ACTAS_Actas = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_ACM_ACTAS_Actas, 0, length);
			strReturn = new String(commonByteArray_ACM_ACTAS_Actas, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ACM_ACTAS_Actas) {

        	try {

        		int length = 0;
		
					this.Column_A = readString(dis);
					
					this.Column_B = readString(dis);
					
					this.Column_C = readString(dis);
					
					this.Column_D = readString(dis);
					
					this.Column_E = readString(dis);
					
					this.Column_F = readString(dis);
					
					this.VALOR_FACTURADO = readString(dis);
					
					this.VALOR_GLOSADO = readString(dis);
					
					this.VALOR_COBRADO = readString(dis);
					
					this.VALOR_NETO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ACM_ACTAS_Actas) {

        	try {

        		int length = 0;
		
					this.Column_A = readString(dis);
					
					this.Column_B = readString(dis);
					
					this.Column_C = readString(dis);
					
					this.Column_D = readString(dis);
					
					this.Column_E = readString(dis);
					
					this.Column_F = readString(dis);
					
					this.VALOR_FACTURADO = readString(dis);
					
					this.VALOR_GLOSADO = readString(dis);
					
					this.VALOR_COBRADO = readString(dis);
					
					this.VALOR_NETO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.Column_A,dos);
					
					// String
				
						writeString(this.Column_B,dos);
					
					// String
				
						writeString(this.Column_C,dos);
					
					// String
				
						writeString(this.Column_D,dos);
					
					// String
				
						writeString(this.Column_E,dos);
					
					// String
				
						writeString(this.Column_F,dos);
					
					// String
				
						writeString(this.VALOR_FACTURADO,dos);
					
					// String
				
						writeString(this.VALOR_GLOSADO,dos);
					
					// String
				
						writeString(this.VALOR_COBRADO,dos);
					
					// String
				
						writeString(this.VALOR_NETO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.Column_A,dos);
					
					// String
				
						writeString(this.Column_B,dos);
					
					// String
				
						writeString(this.Column_C,dos);
					
					// String
				
						writeString(this.Column_D,dos);
					
					// String
				
						writeString(this.Column_E,dos);
					
					// String
				
						writeString(this.Column_F,dos);
					
					// String
				
						writeString(this.VALOR_FACTURADO,dos);
					
					// String
				
						writeString(this.VALOR_GLOSADO,dos);
					
					// String
				
						writeString(this.VALOR_COBRADO,dos);
					
					// String
				
						writeString(this.VALOR_NETO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Column_A="+Column_A);
		sb.append(",Column_B="+Column_B);
		sb.append(",Column_C="+Column_C);
		sb.append(",Column_D="+Column_D);
		sb.append(",Column_E="+Column_E);
		sb.append(",Column_F="+Column_F);
		sb.append(",VALOR_FACTURADO="+VALOR_FACTURADO);
		sb.append(",VALOR_GLOSADO="+VALOR_GLOSADO);
		sb.append(",VALOR_COBRADO="+VALOR_COBRADO);
		sb.append(",VALOR_NETO="+VALOR_NETO);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row7Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tFixedFlowInput_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFixedFlowInput_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row7Struct row7 = new row7Struct();




	
	/**
	 * [tFileOutputExcel_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputExcel_2", false);
		start_Hash.put("tFileOutputExcel_2", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputExcel_2";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row7");
					}
				
		int tos_count_tFileOutputExcel_2 = 0;
		


		
		int columnIndex_tFileOutputExcel_2 = 0;
		boolean headerIsInserted_tFileOutputExcel_2 = false;
		
		
		String fileName_tFileOutputExcel_2=context.fileSystem_URL;
		int nb_line_tFileOutputExcel_2 = 0;
		org.talend.ExcelTool xlsxTool_tFileOutputExcel_2 = new org.talend.ExcelTool();
		xlsxTool_tFileOutputExcel_2.setUseSharedStringTable(false);
		
    xlsxTool_tFileOutputExcel_2.setTruncateExceedingCharacters(false);
		xlsxTool_tFileOutputExcel_2.setSheet("main");
		xlsxTool_tFileOutputExcel_2.setAppend(true,true, false);
		xlsxTool_tFileOutputExcel_2.setRecalculateFormula(false);
		xlsxTool_tFileOutputExcel_2.setXY(false,0,0,false);
		
		java.util.concurrent.ConcurrentHashMap<java.lang.Object, java.lang.Object> chm_tFileOutputExcel_2 = (java.util.concurrent.ConcurrentHashMap<java.lang.Object, java.lang.Object>) globalMap.get("concurrentHashMap");
		java.lang.Object lockObj_tFileOutputExcel_2 = chm_tFileOutputExcel_2.computeIfAbsent("EXCEL_OUTPUT_LOCK_OBJ_tFileOutputExcel_2", k -> new Object());
		synchronized (lockObj_tFileOutputExcel_2) {
			
				xlsxTool_tFileOutputExcel_2.prepareXlsxFile(fileName_tFileOutputExcel_2);
			
		}
		
		xlsxTool_tFileOutputExcel_2.setFont("ARIAL");
		

 



/**
 * [tFileOutputExcel_2 begin ] stop
 */



	
	/**
	 * [tFixedFlowInput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tFixedFlowInput_2", false);
		start_Hash.put("tFixedFlowInput_2", System.currentTimeMillis());
		
	
	currentComponent="tFixedFlowInput_2";
	
	
		int tos_count_tFixedFlowInput_2 = 0;
		

	int nb_line_tFixedFlowInput_2 = 0;
	List<row7Struct> cacheList_tFixedFlowInput_2 = new java.util.ArrayList<row7Struct>();
	row7 = new row7Struct();        	            	
    row7.Column_A = null;        	            	        	            	
    row7.Column_B = null;        	            	        	            	
    row7.Column_C = null;        	            	        	            	
    row7.Column_D = null;        	            	        	            	
    row7.Column_E = null;        	            	        	            	
	row7.Column_F = "TOTALES";        	            	
	row7.VALOR_FACTURADO = NumberFormat.getCurrencyInstance(Locale.US).format(context.VFACTURADO);        	            	
	row7.VALOR_GLOSADO = NumberFormat.getCurrencyInstance(Locale.US).format(context.VGLOSADO);        	            	
	row7.VALOR_COBRADO = NumberFormat.getCurrencyInstance(Locale.US).format(context.VCOBRADO);        	            	
	row7.VALOR_NETO = NumberFormat.getCurrencyInstance(Locale.US).format(context.VNETO);
	cacheList_tFixedFlowInput_2.add(row7);
	row7 = new row7Struct();        	            	
	row7.Column_A = "VALOR TOTAL RADICADO";        	            	
	row7.Column_B = NumberFormat.getCurrencyInstance(Locale.US).format(context.VFACTURADO);        	            	
    row7.Column_C = null;        	            	        	            	
    row7.Column_D = null;        	            	        	            	
    row7.Column_E = null;        	            	        	            	
    row7.Column_F = null;        	            	        	            	
    row7.VALOR_FACTURADO = null;        	            	        	            	
    row7.VALOR_GLOSADO = null;        	            	        	            	
    row7.VALOR_COBRADO = null;        	            	        	            	
    row7.VALOR_NETO = null;        	            	
	cacheList_tFixedFlowInput_2.add(row7);
	row7 = new row7Struct();        	            	
	row7.Column_A = "VALOR DE LA OBJECION";        	            	
	row7.Column_B = NumberFormat.getCurrencyInstance(Locale.US).format(context.VGLOSADO);        	            	
    row7.Column_C = null;        	            	        	            	
    row7.Column_D = null;        	            	        	            	
    row7.Column_E = null;        	            	        	            	
    row7.Column_F = null;        	            	        	            	
    row7.VALOR_FACTURADO = null;        	            	        	            	
    row7.VALOR_GLOSADO = null;        	            	        	            	
    row7.VALOR_COBRADO = null;        	            	        	            	
    row7.VALOR_NETO = null;        	            	
	cacheList_tFixedFlowInput_2.add(row7);
	row7 = new row7Struct();        	            	
	row7.Column_A = "MENOR VALOR COBRADO";        	            	
	row7.Column_B = NumberFormat.getCurrencyInstance(Locale.US).format(context.VCOBRADO);        	            	
    row7.Column_C = null;        	            	        	            	
    row7.Column_D = null;        	            	        	            	
    row7.Column_E = null;        	            	        	            	
    row7.Column_F = null;        	            	        	            	
    row7.VALOR_FACTURADO = null;        	            	        	            	
    row7.VALOR_GLOSADO = null;        	            	        	            	
    row7.VALOR_COBRADO = null;        	            	        	            	
    row7.VALOR_NETO = null;        	            	
	cacheList_tFixedFlowInput_2.add(row7);
	row7 = new row7Struct();        	            	
	row7.Column_A = "VALOR NETO A PAGAR";        	            	
	row7.Column_B = NumberFormat.getCurrencyInstance(Locale.US).format(context.VNETO);        	            	
    row7.Column_C = null;        	            	        	            	
    row7.Column_D = null;        	            	        	            	
    row7.Column_E = null;        	            	        	            	
    row7.Column_F = null;        	            	        	            	
    row7.VALOR_FACTURADO = null;        	            	        	            	
    row7.VALOR_GLOSADO = null;        	            	        	            	
    row7.VALOR_COBRADO = null;        	            	        	            	
    row7.VALOR_NETO = null;        	            	
	cacheList_tFixedFlowInput_2.add(row7);
	row7 = new row7Struct();        	            	
    row7.Column_A = null;        	            	        	            	
    row7.Column_B = null;        	            	        	            	
    row7.Column_C = null;        	            	        	            	
    row7.Column_D = null;        	            	        	            	
    row7.Column_E = null;        	            	        	            	
    row7.Column_F = null;        	            	        	            	
    row7.VALOR_FACTURADO = null;        	            	        	            	
    row7.VALOR_GLOSADO = null;        	            	        	            	
    row7.VALOR_COBRADO = null;        	            	        	            	
    row7.VALOR_NETO = null;        	            	
	cacheList_tFixedFlowInput_2.add(row7);
	row7 = new row7Struct();        	            	
    row7.Column_A = null;        	            	        	            	
    row7.Column_B = null;        	            	        	            	
    row7.Column_C = null;        	            	        	            	
    row7.Column_D = null;        	            	        	            	
    row7.Column_E = null;        	            	        	            	
    row7.Column_F = null;        	            	        	            	
    row7.VALOR_FACTURADO = null;        	            	        	            	
    row7.VALOR_GLOSADO = null;        	            	        	            	
    row7.VALOR_COBRADO = null;        	            	        	            	
    row7.VALOR_NETO = null;        	            	
	cacheList_tFixedFlowInput_2.add(row7);
	row7 = new row7Struct();        	            	
	row7.Column_A = "Firma: __________________________";        	            	
    row7.Column_B = null;        	            	        	            	
    row7.Column_C = null;        	            	        	            	
    row7.Column_D = null;        	            	        	            	
    row7.Column_E = null;        	            	        	            	
    row7.Column_F = null;        	            	        	            	
    row7.VALOR_FACTURADO = null;        	            	        	            	
    row7.VALOR_GLOSADO = null;        	            	        	            	
    row7.VALOR_COBRADO = null;        	            	        	            	
    row7.VALOR_NETO = null;        	            	
	cacheList_tFixedFlowInput_2.add(row7);
	row7 = new row7Struct();        	            	
	row7.Column_A = context.USUARIO;        	            	
    row7.Column_B = null;        	            	        	            	
    row7.Column_C = null;        	            	        	            	
    row7.Column_D = null;        	            	        	            	
    row7.Column_E = null;        	            	        	            	
    row7.Column_F = null;        	            	        	            	
    row7.VALOR_FACTURADO = null;        	            	        	            	
    row7.VALOR_GLOSADO = null;        	            	        	            	
    row7.VALOR_COBRADO = null;        	            	        	            	
    row7.VALOR_NETO = null;        	            	
	cacheList_tFixedFlowInput_2.add(row7);
	row7 = new row7Struct();        	            	
	row7.Column_A = "Auditor de la entidad responsable del pago";        	            	
    row7.Column_B = null;        	            	        	            	
    row7.Column_C = null;        	            	        	            	
    row7.Column_D = null;        	            	        	            	
    row7.Column_E = null;        	            	        	            	
    row7.Column_F = null;        	            	        	            	
    row7.VALOR_FACTURADO = null;        	            	        	            	
    row7.VALOR_GLOSADO = null;        	            	        	            	
    row7.VALOR_COBRADO = null;        	            	        	            	
    row7.VALOR_NETO = null;        	            	
	cacheList_tFixedFlowInput_2.add(row7);
	row7 = new row7Struct();        	            	
    row7.Column_A = null;        	            	        	            	
    row7.Column_B = null;        	            	        	            	
	row7.Column_C = "Dada en la ciudad de " + context.CIUDAD  + context.FECHA_EJECUCION;        	            	
    row7.Column_D = null;        	            	        	            	
    row7.Column_E = null;        	            	        	            	
    row7.Column_F = null;        	            	        	            	
    row7.VALOR_FACTURADO = null;        	            	        	            	
    row7.VALOR_GLOSADO = null;        	            	        	            	
    row7.VALOR_COBRADO = null;        	            	        	            	
    row7.VALOR_NETO = null;        	            	
	cacheList_tFixedFlowInput_2.add(row7);
	for (int i_tFixedFlowInput_2 = 0 ; i_tFixedFlowInput_2 < 1 ; i_tFixedFlowInput_2++) {	
		for(row7Struct tmpRow_tFixedFlowInput_2 : cacheList_tFixedFlowInput_2){
			nb_line_tFixedFlowInput_2 ++;		
			row7 = tmpRow_tFixedFlowInput_2;

 



/**
 * [tFixedFlowInput_2 begin ] stop
 */
	
	/**
	 * [tFixedFlowInput_2 main ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_2";
	
	

 


	tos_count_tFixedFlowInput_2++;

/**
 * [tFixedFlowInput_2 main ] stop
 */
	
	/**
	 * [tFixedFlowInput_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_2";
	
	

 



/**
 * [tFixedFlowInput_2 process_data_begin ] stop
 */

	
	/**
	 * [tFileOutputExcel_2 main ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_2";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row7"
						
						);
					}
					

				xlsxTool_tFileOutputExcel_2.addRow();
									   				
	    				if(row7.Column_A != null) {
    				
							xlsxTool_tFileOutputExcel_2.addCellValue(String.valueOf(row7.Column_A));
	    				} else {
	    					xlsxTool_tFileOutputExcel_2.addCellNullValue();
	    				}
					
									   				
	    				if(row7.Column_B != null) {
    				
							xlsxTool_tFileOutputExcel_2.addCellValue(String.valueOf(row7.Column_B));
	    				} else {
	    					xlsxTool_tFileOutputExcel_2.addCellNullValue();
	    				}
					
									   				
	    				if(row7.Column_C != null) {
    				
							xlsxTool_tFileOutputExcel_2.addCellValue(String.valueOf(row7.Column_C));
	    				} else {
	    					xlsxTool_tFileOutputExcel_2.addCellNullValue();
	    				}
					
									   				
	    				if(row7.Column_D != null) {
    				
							xlsxTool_tFileOutputExcel_2.addCellValue(String.valueOf(row7.Column_D));
	    				} else {
	    					xlsxTool_tFileOutputExcel_2.addCellNullValue();
	    				}
					
									   				
	    				if(row7.Column_E != null) {
    				
							xlsxTool_tFileOutputExcel_2.addCellValue(String.valueOf(row7.Column_E));
	    				} else {
	    					xlsxTool_tFileOutputExcel_2.addCellNullValue();
	    				}
					
									   				
	    				if(row7.Column_F != null) {
    				
							xlsxTool_tFileOutputExcel_2.addCellValue(String.valueOf(row7.Column_F));
	    				} else {
	    					xlsxTool_tFileOutputExcel_2.addCellNullValue();
	    				}
					
									   				
	    				if(row7.VALOR_FACTURADO != null) {
    				
							xlsxTool_tFileOutputExcel_2.addCellValue(String.valueOf(row7.VALOR_FACTURADO));
	    				} else {
	    					xlsxTool_tFileOutputExcel_2.addCellNullValue();
	    				}
					
									   				
	    				if(row7.VALOR_GLOSADO != null) {
    				
							xlsxTool_tFileOutputExcel_2.addCellValue(String.valueOf(row7.VALOR_GLOSADO));
	    				} else {
	    					xlsxTool_tFileOutputExcel_2.addCellNullValue();
	    				}
					
									   				
	    				if(row7.VALOR_COBRADO != null) {
    				
							xlsxTool_tFileOutputExcel_2.addCellValue(String.valueOf(row7.VALOR_COBRADO));
	    				} else {
	    					xlsxTool_tFileOutputExcel_2.addCellNullValue();
	    				}
					
									   				
	    				if(row7.VALOR_NETO != null) {
    				
							xlsxTool_tFileOutputExcel_2.addCellValue(String.valueOf(row7.VALOR_NETO));
	    				} else {
	    					xlsxTool_tFileOutputExcel_2.addCellNullValue();
	    				}
					
    			nb_line_tFileOutputExcel_2++;
				
 


	tos_count_tFileOutputExcel_2++;

/**
 * [tFileOutputExcel_2 main ] stop
 */
	
	/**
	 * [tFileOutputExcel_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_2";
	
	

 



/**
 * [tFileOutputExcel_2 process_data_begin ] stop
 */
	
	/**
	 * [tFileOutputExcel_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_2";
	
	

 



/**
 * [tFileOutputExcel_2 process_data_end ] stop
 */



	
	/**
	 * [tFixedFlowInput_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_2";
	
	

 



/**
 * [tFixedFlowInput_2 process_data_end ] stop
 */
	
	/**
	 * [tFixedFlowInput_2 end ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_2";
	
	

		}
	}
	cacheList_tFixedFlowInput_2.clear();
	globalMap.put("tFixedFlowInput_2_NB_LINE", nb_line_tFixedFlowInput_2);

 

ok_Hash.put("tFixedFlowInput_2", true);
end_Hash.put("tFixedFlowInput_2", System.currentTimeMillis());




/**
 * [tFixedFlowInput_2 end ] stop
 */

	
	/**
	 * [tFileOutputExcel_2 end ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_2";
	
	

									columnIndex_tFileOutputExcel_2 = 2;
								
					xlsxTool_tFileOutputExcel_2.setColAutoSize(columnIndex_tFileOutputExcel_2);
	
	
	
	
			xlsxTool_tFileOutputExcel_2.writeExcel(fileName_tFileOutputExcel_2,true);
	
		if(headerIsInserted_tFileOutputExcel_2 && nb_line_tFileOutputExcel_2 > 0){
			nb_line_tFileOutputExcel_2 = nb_line_tFileOutputExcel_2 -1;
		}
		globalMap.put("tFileOutputExcel_2_NB_LINE",nb_line_tFileOutputExcel_2);
		
		

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row7");
			  	}
			  	
 

ok_Hash.put("tFileOutputExcel_2", true);
end_Hash.put("tFileOutputExcel_2", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk12", 0, "ok");
				}
				tJava_4Process(globalMap);



/**
 * [tFileOutputExcel_2 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFixedFlowInput_2 finally ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_2";
	
	

 



/**
 * [tFixedFlowInput_2 finally ] stop
 */

	
	/**
	 * [tFileOutputExcel_2 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_2";
	
	

 



/**
 * [tFileOutputExcel_2 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFixedFlowInput_2_SUBPROCESS_STATE", 1);
	}
	


public static class row5Struct implements routines.system.IPersistableRow<row5Struct> {
    final static byte[] commonByteArrayLock_ACM_ACTAS_Actas = new byte[0];
    static byte[] commonByteArray_ACM_ACTAS_Actas = new byte[0];

	
			    public java.util.Date moment;

				public java.util.Date getMoment () {
					return this.moment;
				}

				public Boolean momentIsNullable(){
				    return true;
				}
				public Boolean momentIsKey(){
				    return false;
				}
				public Integer momentLength(){
				    return 0;
				}
				public Integer momentPrecision(){
				    return 0;
				}
				public String momentDefault(){
				
					return null;
				
				}
				public String momentComment(){
				
				    return null;
				
				}
				public String momentPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String momentOriginalDbColumnName(){
				
					return "moment";
				
				}

				
			    public String pid;

				public String getPid () {
					return this.pid;
				}

				public Boolean pidIsNullable(){
				    return true;
				}
				public Boolean pidIsKey(){
				    return false;
				}
				public Integer pidLength(){
				    return 20;
				}
				public Integer pidPrecision(){
				    return 0;
				}
				public String pidDefault(){
				
					return null;
				
				}
				public String pidComment(){
				
				    return null;
				
				}
				public String pidPattern(){
				
				    return null;
				
				}
				public String pidOriginalDbColumnName(){
				
					return "pid";
				
				}

				
			    public String root_pid;

				public String getRoot_pid () {
					return this.root_pid;
				}

				public Boolean root_pidIsNullable(){
				    return true;
				}
				public Boolean root_pidIsKey(){
				    return false;
				}
				public Integer root_pidLength(){
				    return 20;
				}
				public Integer root_pidPrecision(){
				    return 0;
				}
				public String root_pidDefault(){
				
					return null;
				
				}
				public String root_pidComment(){
				
				    return null;
				
				}
				public String root_pidPattern(){
				
				    return null;
				
				}
				public String root_pidOriginalDbColumnName(){
				
					return "root_pid";
				
				}

				
			    public String father_pid;

				public String getFather_pid () {
					return this.father_pid;
				}

				public Boolean father_pidIsNullable(){
				    return true;
				}
				public Boolean father_pidIsKey(){
				    return false;
				}
				public Integer father_pidLength(){
				    return 20;
				}
				public Integer father_pidPrecision(){
				    return 0;
				}
				public String father_pidDefault(){
				
					return null;
				
				}
				public String father_pidComment(){
				
				    return null;
				
				}
				public String father_pidPattern(){
				
				    return null;
				
				}
				public String father_pidOriginalDbColumnName(){
				
					return "father_pid";
				
				}

				
			    public String project;

				public String getProject () {
					return this.project;
				}

				public Boolean projectIsNullable(){
				    return true;
				}
				public Boolean projectIsKey(){
				    return false;
				}
				public Integer projectLength(){
				    return 50;
				}
				public Integer projectPrecision(){
				    return 0;
				}
				public String projectDefault(){
				
					return null;
				
				}
				public String projectComment(){
				
				    return null;
				
				}
				public String projectPattern(){
				
				    return null;
				
				}
				public String projectOriginalDbColumnName(){
				
					return "project";
				
				}

				
			    public String job;

				public String getJob () {
					return this.job;
				}

				public Boolean jobIsNullable(){
				    return true;
				}
				public Boolean jobIsKey(){
				    return false;
				}
				public Integer jobLength(){
				    return 255;
				}
				public Integer jobPrecision(){
				    return 0;
				}
				public String jobDefault(){
				
					return null;
				
				}
				public String jobComment(){
				
				    return null;
				
				}
				public String jobPattern(){
				
				    return null;
				
				}
				public String jobOriginalDbColumnName(){
				
					return "job";
				
				}

				
			    public String context;

				public String getContext () {
					return this.context;
				}

				public Boolean contextIsNullable(){
				    return true;
				}
				public Boolean contextIsKey(){
				    return false;
				}
				public Integer contextLength(){
				    return 50;
				}
				public Integer contextPrecision(){
				    return 0;
				}
				public String contextDefault(){
				
					return null;
				
				}
				public String contextComment(){
				
				    return null;
				
				}
				public String contextPattern(){
				
				    return null;
				
				}
				public String contextOriginalDbColumnName(){
				
					return "context";
				
				}

				
			    public Integer priority;

				public Integer getPriority () {
					return this.priority;
				}

				public Boolean priorityIsNullable(){
				    return true;
				}
				public Boolean priorityIsKey(){
				    return false;
				}
				public Integer priorityLength(){
				    return 3;
				}
				public Integer priorityPrecision(){
				    return 0;
				}
				public String priorityDefault(){
				
					return "";
				
				}
				public String priorityComment(){
				
				    return null;
				
				}
				public String priorityPattern(){
				
				    return null;
				
				}
				public String priorityOriginalDbColumnName(){
				
					return "priority";
				
				}

				
			    public String type;

				public String getType () {
					return this.type;
				}

				public Boolean typeIsNullable(){
				    return true;
				}
				public Boolean typeIsKey(){
				    return false;
				}
				public Integer typeLength(){
				    return 255;
				}
				public Integer typePrecision(){
				    return 0;
				}
				public String typeDefault(){
				
					return null;
				
				}
				public String typeComment(){
				
				    return null;
				
				}
				public String typePattern(){
				
				    return null;
				
				}
				public String typeOriginalDbColumnName(){
				
					return "type";
				
				}

				
			    public String origin;

				public String getOrigin () {
					return this.origin;
				}

				public Boolean originIsNullable(){
				    return true;
				}
				public Boolean originIsKey(){
				    return false;
				}
				public Integer originLength(){
				    return 255;
				}
				public Integer originPrecision(){
				    return 0;
				}
				public String originDefault(){
				
					return null;
				
				}
				public String originComment(){
				
				    return null;
				
				}
				public String originPattern(){
				
				    return null;
				
				}
				public String originOriginalDbColumnName(){
				
					return "origin";
				
				}

				
			    public String message;

				public String getMessage () {
					return this.message;
				}

				public Boolean messageIsNullable(){
				    return true;
				}
				public Boolean messageIsKey(){
				    return false;
				}
				public Integer messageLength(){
				    return 255;
				}
				public Integer messagePrecision(){
				    return 0;
				}
				public String messageDefault(){
				
					return null;
				
				}
				public String messageComment(){
				
				    return null;
				
				}
				public String messagePattern(){
				
				    return null;
				
				}
				public String messageOriginalDbColumnName(){
				
					return "message";
				
				}

				
			    public Integer code;

				public Integer getCode () {
					return this.code;
				}

				public Boolean codeIsNullable(){
				    return true;
				}
				public Boolean codeIsKey(){
				    return false;
				}
				public Integer codeLength(){
				    return 3;
				}
				public Integer codePrecision(){
				    return 0;
				}
				public String codeDefault(){
				
					return "";
				
				}
				public String codeComment(){
				
				    return null;
				
				}
				public String codePattern(){
				
				    return null;
				
				}
				public String codeOriginalDbColumnName(){
				
					return "code";
				
				}

				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_ACTAS_Actas.length) {
				if(length < 1024 && commonByteArray_ACM_ACTAS_Actas.length == 0) {
   					commonByteArray_ACM_ACTAS_Actas = new byte[1024];
				} else {
   					commonByteArray_ACM_ACTAS_Actas = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ACM_ACTAS_Actas, 0, length);
			strReturn = new String(commonByteArray_ACM_ACTAS_Actas, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_ACTAS_Actas.length) {
				if(length < 1024 && commonByteArray_ACM_ACTAS_Actas.length == 0) {
   					commonByteArray_ACM_ACTAS_Actas = new byte[1024];
				} else {
   					commonByteArray_ACM_ACTAS_Actas = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_ACM_ACTAS_Actas, 0, length);
			strReturn = new String(commonByteArray_ACM_ACTAS_Actas, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ACM_ACTAS_Actas) {

        	try {

        		int length = 0;
		
					this.moment = readDate(dis);
					
					this.pid = readString(dis);
					
					this.root_pid = readString(dis);
					
					this.father_pid = readString(dis);
					
					this.project = readString(dis);
					
					this.job = readString(dis);
					
					this.context = readString(dis);
					
						this.priority = readInteger(dis);
					
					this.type = readString(dis);
					
					this.origin = readString(dis);
					
					this.message = readString(dis);
					
						this.code = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ACM_ACTAS_Actas) {

        	try {

        		int length = 0;
		
					this.moment = readDate(dis);
					
					this.pid = readString(dis);
					
					this.root_pid = readString(dis);
					
					this.father_pid = readString(dis);
					
					this.project = readString(dis);
					
					this.job = readString(dis);
					
					this.context = readString(dis);
					
						this.priority = readInteger(dis);
					
					this.type = readString(dis);
					
					this.origin = readString(dis);
					
					this.message = readString(dis);
					
						this.code = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.pid,dos);
					
					// String
				
						writeString(this.root_pid,dos);
					
					// String
				
						writeString(this.father_pid,dos);
					
					// String
				
						writeString(this.project,dos);
					
					// String
				
						writeString(this.job,dos);
					
					// String
				
						writeString(this.context,dos);
					
					// Integer
				
						writeInteger(this.priority,dos);
					
					// String
				
						writeString(this.type,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.message,dos);
					
					// Integer
				
						writeInteger(this.code,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.pid,dos);
					
					// String
				
						writeString(this.root_pid,dos);
					
					// String
				
						writeString(this.father_pid,dos);
					
					// String
				
						writeString(this.project,dos);
					
					// String
				
						writeString(this.job,dos);
					
					// String
				
						writeString(this.context,dos);
					
					// Integer
				
						writeInteger(this.priority,dos);
					
					// String
				
						writeString(this.type,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.message,dos);
					
					// Integer
				
						writeInteger(this.code,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("moment="+String.valueOf(moment));
		sb.append(",pid="+pid);
		sb.append(",root_pid="+root_pid);
		sb.append(",father_pid="+father_pid);
		sb.append(",project="+project);
		sb.append(",job="+job);
		sb.append(",context="+context);
		sb.append(",priority="+String.valueOf(priority));
		sb.append(",type="+type);
		sb.append(",origin="+origin);
		sb.append(",message="+message);
		sb.append(",code="+String.valueOf(code));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row5Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row3Struct implements routines.system.IPersistableRow<row3Struct> {
    final static byte[] commonByteArrayLock_ACM_ACTAS_Actas = new byte[0];
    static byte[] commonByteArray_ACM_ACTAS_Actas = new byte[0];

	
			    public java.util.Date moment;

				public java.util.Date getMoment () {
					return this.moment;
				}

				public Boolean momentIsNullable(){
				    return true;
				}
				public Boolean momentIsKey(){
				    return false;
				}
				public Integer momentLength(){
				    return 0;
				}
				public Integer momentPrecision(){
				    return 0;
				}
				public String momentDefault(){
				
					return null;
				
				}
				public String momentComment(){
				
				    return null;
				
				}
				public String momentPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String momentOriginalDbColumnName(){
				
					return "moment";
				
				}

				
			    public String pid;

				public String getPid () {
					return this.pid;
				}

				public Boolean pidIsNullable(){
				    return true;
				}
				public Boolean pidIsKey(){
				    return false;
				}
				public Integer pidLength(){
				    return 20;
				}
				public Integer pidPrecision(){
				    return 0;
				}
				public String pidDefault(){
				
					return null;
				
				}
				public String pidComment(){
				
				    return null;
				
				}
				public String pidPattern(){
				
				    return null;
				
				}
				public String pidOriginalDbColumnName(){
				
					return "pid";
				
				}

				
			    public String root_pid;

				public String getRoot_pid () {
					return this.root_pid;
				}

				public Boolean root_pidIsNullable(){
				    return true;
				}
				public Boolean root_pidIsKey(){
				    return false;
				}
				public Integer root_pidLength(){
				    return 20;
				}
				public Integer root_pidPrecision(){
				    return 0;
				}
				public String root_pidDefault(){
				
					return null;
				
				}
				public String root_pidComment(){
				
				    return null;
				
				}
				public String root_pidPattern(){
				
				    return null;
				
				}
				public String root_pidOriginalDbColumnName(){
				
					return "root_pid";
				
				}

				
			    public String father_pid;

				public String getFather_pid () {
					return this.father_pid;
				}

				public Boolean father_pidIsNullable(){
				    return true;
				}
				public Boolean father_pidIsKey(){
				    return false;
				}
				public Integer father_pidLength(){
				    return 20;
				}
				public Integer father_pidPrecision(){
				    return 0;
				}
				public String father_pidDefault(){
				
					return null;
				
				}
				public String father_pidComment(){
				
				    return null;
				
				}
				public String father_pidPattern(){
				
				    return null;
				
				}
				public String father_pidOriginalDbColumnName(){
				
					return "father_pid";
				
				}

				
			    public String project;

				public String getProject () {
					return this.project;
				}

				public Boolean projectIsNullable(){
				    return true;
				}
				public Boolean projectIsKey(){
				    return false;
				}
				public Integer projectLength(){
				    return 50;
				}
				public Integer projectPrecision(){
				    return 0;
				}
				public String projectDefault(){
				
					return null;
				
				}
				public String projectComment(){
				
				    return null;
				
				}
				public String projectPattern(){
				
				    return null;
				
				}
				public String projectOriginalDbColumnName(){
				
					return "project";
				
				}

				
			    public String job;

				public String getJob () {
					return this.job;
				}

				public Boolean jobIsNullable(){
				    return true;
				}
				public Boolean jobIsKey(){
				    return false;
				}
				public Integer jobLength(){
				    return 255;
				}
				public Integer jobPrecision(){
				    return 0;
				}
				public String jobDefault(){
				
					return null;
				
				}
				public String jobComment(){
				
				    return null;
				
				}
				public String jobPattern(){
				
				    return null;
				
				}
				public String jobOriginalDbColumnName(){
				
					return "job";
				
				}

				
			    public String context;

				public String getContext () {
					return this.context;
				}

				public Boolean contextIsNullable(){
				    return true;
				}
				public Boolean contextIsKey(){
				    return false;
				}
				public Integer contextLength(){
				    return 50;
				}
				public Integer contextPrecision(){
				    return 0;
				}
				public String contextDefault(){
				
					return null;
				
				}
				public String contextComment(){
				
				    return null;
				
				}
				public String contextPattern(){
				
				    return null;
				
				}
				public String contextOriginalDbColumnName(){
				
					return "context";
				
				}

				
			    public Integer priority;

				public Integer getPriority () {
					return this.priority;
				}

				public Boolean priorityIsNullable(){
				    return true;
				}
				public Boolean priorityIsKey(){
				    return false;
				}
				public Integer priorityLength(){
				    return 3;
				}
				public Integer priorityPrecision(){
				    return 0;
				}
				public String priorityDefault(){
				
					return "";
				
				}
				public String priorityComment(){
				
				    return null;
				
				}
				public String priorityPattern(){
				
				    return null;
				
				}
				public String priorityOriginalDbColumnName(){
				
					return "priority";
				
				}

				
			    public String type;

				public String getType () {
					return this.type;
				}

				public Boolean typeIsNullable(){
				    return true;
				}
				public Boolean typeIsKey(){
				    return false;
				}
				public Integer typeLength(){
				    return 255;
				}
				public Integer typePrecision(){
				    return 0;
				}
				public String typeDefault(){
				
					return null;
				
				}
				public String typeComment(){
				
				    return null;
				
				}
				public String typePattern(){
				
				    return null;
				
				}
				public String typeOriginalDbColumnName(){
				
					return "type";
				
				}

				
			    public String origin;

				public String getOrigin () {
					return this.origin;
				}

				public Boolean originIsNullable(){
				    return true;
				}
				public Boolean originIsKey(){
				    return false;
				}
				public Integer originLength(){
				    return 255;
				}
				public Integer originPrecision(){
				    return 0;
				}
				public String originDefault(){
				
					return null;
				
				}
				public String originComment(){
				
				    return null;
				
				}
				public String originPattern(){
				
				    return null;
				
				}
				public String originOriginalDbColumnName(){
				
					return "origin";
				
				}

				
			    public String message;

				public String getMessage () {
					return this.message;
				}

				public Boolean messageIsNullable(){
				    return true;
				}
				public Boolean messageIsKey(){
				    return false;
				}
				public Integer messageLength(){
				    return 255;
				}
				public Integer messagePrecision(){
				    return 0;
				}
				public String messageDefault(){
				
					return null;
				
				}
				public String messageComment(){
				
				    return null;
				
				}
				public String messagePattern(){
				
				    return null;
				
				}
				public String messageOriginalDbColumnName(){
				
					return "message";
				
				}

				
			    public Integer code;

				public Integer getCode () {
					return this.code;
				}

				public Boolean codeIsNullable(){
				    return true;
				}
				public Boolean codeIsKey(){
				    return false;
				}
				public Integer codeLength(){
				    return 3;
				}
				public Integer codePrecision(){
				    return 0;
				}
				public String codeDefault(){
				
					return "";
				
				}
				public String codeComment(){
				
				    return null;
				
				}
				public String codePattern(){
				
				    return null;
				
				}
				public String codeOriginalDbColumnName(){
				
					return "code";
				
				}

				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_ACTAS_Actas.length) {
				if(length < 1024 && commonByteArray_ACM_ACTAS_Actas.length == 0) {
   					commonByteArray_ACM_ACTAS_Actas = new byte[1024];
				} else {
   					commonByteArray_ACM_ACTAS_Actas = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ACM_ACTAS_Actas, 0, length);
			strReturn = new String(commonByteArray_ACM_ACTAS_Actas, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_ACTAS_Actas.length) {
				if(length < 1024 && commonByteArray_ACM_ACTAS_Actas.length == 0) {
   					commonByteArray_ACM_ACTAS_Actas = new byte[1024];
				} else {
   					commonByteArray_ACM_ACTAS_Actas = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_ACM_ACTAS_Actas, 0, length);
			strReturn = new String(commonByteArray_ACM_ACTAS_Actas, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ACM_ACTAS_Actas) {

        	try {

        		int length = 0;
		
					this.moment = readDate(dis);
					
					this.pid = readString(dis);
					
					this.root_pid = readString(dis);
					
					this.father_pid = readString(dis);
					
					this.project = readString(dis);
					
					this.job = readString(dis);
					
					this.context = readString(dis);
					
						this.priority = readInteger(dis);
					
					this.type = readString(dis);
					
					this.origin = readString(dis);
					
					this.message = readString(dis);
					
						this.code = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ACM_ACTAS_Actas) {

        	try {

        		int length = 0;
		
					this.moment = readDate(dis);
					
					this.pid = readString(dis);
					
					this.root_pid = readString(dis);
					
					this.father_pid = readString(dis);
					
					this.project = readString(dis);
					
					this.job = readString(dis);
					
					this.context = readString(dis);
					
						this.priority = readInteger(dis);
					
					this.type = readString(dis);
					
					this.origin = readString(dis);
					
					this.message = readString(dis);
					
						this.code = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.pid,dos);
					
					// String
				
						writeString(this.root_pid,dos);
					
					// String
				
						writeString(this.father_pid,dos);
					
					// String
				
						writeString(this.project,dos);
					
					// String
				
						writeString(this.job,dos);
					
					// String
				
						writeString(this.context,dos);
					
					// Integer
				
						writeInteger(this.priority,dos);
					
					// String
				
						writeString(this.type,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.message,dos);
					
					// Integer
				
						writeInteger(this.code,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.pid,dos);
					
					// String
				
						writeString(this.root_pid,dos);
					
					// String
				
						writeString(this.father_pid,dos);
					
					// String
				
						writeString(this.project,dos);
					
					// String
				
						writeString(this.job,dos);
					
					// String
				
						writeString(this.context,dos);
					
					// Integer
				
						writeInteger(this.priority,dos);
					
					// String
				
						writeString(this.type,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.message,dos);
					
					// Integer
				
						writeInteger(this.code,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("moment="+String.valueOf(moment));
		sb.append(",pid="+pid);
		sb.append(",root_pid="+root_pid);
		sb.append(",father_pid="+father_pid);
		sb.append(",project="+project);
		sb.append(",job="+job);
		sb.append(",context="+context);
		sb.append(",priority="+String.valueOf(priority));
		sb.append(",type="+type);
		sb.append(",origin="+origin);
		sb.append(",message="+message);
		sb.append(",code="+String.valueOf(code));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row3Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tLogCatcher_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tLogCatcher_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row3Struct row3 = new row3Struct();
row3Struct row5 = row3;





	
	/**
	 * [tRunJob_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tRunJob_1", false);
		start_Hash.put("tRunJob_1", System.currentTimeMillis());
		
	
	currentComponent="tRunJob_1";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row5");
					}
				
		int tos_count_tRunJob_1 = 0;
		
class DealChildJobLibrary_tRunJob_1 {

	public String replaceJarPathsFromCrcMap(String originalClassPathLine) throws java.lang.Exception {
		String classPathLine = "";
		String crcMapPath = new java.io.File("../crcMap").getCanonicalPath();
		if (isNeedAddLibsPath( crcMapPath)) {
			java.util.Map<String, String> crcMap = null;
			java.io.ObjectInputStream ois = new java.io.ObjectInputStream(new java.io.FileInputStream(crcMapPath)) {
				@Override
				public Class<?> resolveClass(java.io.ObjectStreamClass desc) throws java.io.IOException, ClassNotFoundException {
					if(!"java.util.HashMap".equals(desc.getName())) {
						throw new java.io.InvalidClassException("Unauthorized deserialization attempt : " + desc.getName());
					}
					return super.resolveClass(desc);
				}
			};
			crcMap = (java.util.Map<String, String>) ois.readObject();
			ois.close();
			classPathLine = addLibsPath(originalClassPathLine, crcMap);
		} else {
			classPathLine = originalClassPathLine;
		}
		return classPathLine;
	}
	
	private boolean isNeedAddLibsPath(String crcMapPath) {
		if (!(new java.io.File(crcMapPath).exists())) {// when not use cache
			return false;
		}
		return true;
	}
	
	
	private String addLibsPath(String line, java.util.Map<String, String> crcMap) {
		for (java.util.Map.Entry<String, String> entry : crcMap.entrySet()) {
			line = adaptLibPaths(line, entry);
		}
		return line;
	}
	
	private String adaptLibPaths(String line, java.util.Map.Entry<String, String> entry) {
		String jarName = entry.getValue();
		String crc = entry.getKey();
		String libStringFinder = "../lib/" + jarName;
		if (line.contains(libStringFinder)) {
			line = line.replace(libStringFinder, "../../../cache/lib/" + crc + "/" + jarName);
		} else if (line.contains(":$ROOT_PATH/" + jarName + ":")) {
			line = line.replace(":$ROOT_PATH/" + jarName + ":", ":$ROOT_PATH/../../../cache/lib/" + crc + "/" + jarName + ":");
		} else if (line.contains(";" + jarName + ";")) {
			line = line.replace(";" + jarName + ";", ";../../../cache/lib/" + crc + "/" + jarName + ";");
		}
		return line;
	}
	
}
	DealChildJobLibrary_tRunJob_1 dealChildJobLibrary_tRunJob_1 = new DealChildJobLibrary_tRunJob_1();

	class JVMArgumentHelper_tRunJob_1 {
		
		
		
		private void addClasspath(java.util.List<String> target_argument_list, String job_origin_classpath) {
			
			String extra_classpath = null;
			String path_separator = System.getProperty("path.separator");
			if (path_separator != null && path_separator.length() > 1) {
				throw new RuntimeException("path separator should be single character");
			}
			
			if(extra_classpath!=null && !extra_classpath.isEmpty()) {
				if(extra_classpath.endsWith(path_separator)) {
					target_argument_list.add(extra_classpath+job_origin_classpath);
				} else if(extra_classpath.contains(path_separator)) {
					target_argument_list.add(concatStr(extra_classpath, path_separator, job_origin_classpath));
				} else if(extra_classpath.endsWith(":")) {
					target_argument_list.add(extra_classpath.replace(":", path_separator)+job_origin_classpath);
				} else if(extra_classpath.endsWith(";")) {
					target_argument_list.add(extra_classpath.replace(";", path_separator)+job_origin_classpath);
				} else if(extra_classpath.contains(":")) {
					target_argument_list.add(concatStr(extra_classpath.replace(":", path_separator), path_separator, job_origin_classpath));
				} else if(extra_classpath.contains(";")) {
					target_argument_list.add(concatStr(extra_classpath.replace(";", path_separator), path_separator, job_origin_classpath));
				} else {
					target_argument_list.add(concatStr(extra_classpath, path_separator, job_origin_classpath));
				}
				return;
			}
			
			target_argument_list.add(job_origin_classpath);
		}
		
		private String concatStr(String s1, String s2, String s3) {
			java.lang.StringBuilder strB = new java.lang.StringBuilder();
			strB.append(s1).append(s2).append(s3);
			return strB.toString();
		}
		
		public void addArgumentsTo(java.util.List<String> target_argument_list, String argument_from_child) {
			addArgumentsTo(target_argument_list, argument_from_child, false);
		}
		
		public void addArgumentsTo(java.util.List<String> target_argument_list, String argument_from_child, boolean isCP) {
			if(isCP) {
				addClasspath(target_argument_list, argument_from_child);
				return;
			}
		
			
			
			
			target_argument_list.add(argument_from_child);
			
		}
		
		
	}
	
	JVMArgumentHelper_tRunJob_1 jvm_argument_helper_tRunJob_1 = new JVMArgumentHelper_tRunJob_1();
	
	String audit_jar_path_tRunJob_1 = System.getProperty("classpath.extended");
	

 



/**
 * [tRunJob_1 begin ] stop
 */



	
	/**
	 * [tFileOutputDelimited_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputDelimited_1", false);
		start_Hash.put("tFileOutputDelimited_1", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputDelimited_1";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row3");
					}
				
		int tos_count_tFileOutputDelimited_1 = 0;
		

String fileName_tFileOutputDelimited_1 = "";
    fileName_tFileOutputDelimited_1 = (new java.io.File(context.LOGS_ERROR)).getAbsolutePath().replace("\\","/");
    String fullName_tFileOutputDelimited_1 = null;
    String extension_tFileOutputDelimited_1 = null;
    String directory_tFileOutputDelimited_1 = null;
    if((fileName_tFileOutputDelimited_1.indexOf("/") != -1)) {
        if(fileName_tFileOutputDelimited_1.lastIndexOf(".") < fileName_tFileOutputDelimited_1.lastIndexOf("/")) {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
            extension_tFileOutputDelimited_1 = "";
        } else {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0, fileName_tFileOutputDelimited_1.lastIndexOf("."));
            extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(fileName_tFileOutputDelimited_1.lastIndexOf("."));
        }
        directory_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0, fileName_tFileOutputDelimited_1.lastIndexOf("/"));
    } else {
        if(fileName_tFileOutputDelimited_1.lastIndexOf(".") != -1) {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0, fileName_tFileOutputDelimited_1.lastIndexOf("."));
            extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(fileName_tFileOutputDelimited_1.lastIndexOf("."));
        } else {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
            extension_tFileOutputDelimited_1 = "";
        }
        directory_tFileOutputDelimited_1 = "";
    }
    boolean isFileGenerated_tFileOutputDelimited_1 = true;
    java.io.File filetFileOutputDelimited_1 = new java.io.File(fileName_tFileOutputDelimited_1);
    globalMap.put("tFileOutputDelimited_1_FILE_NAME",fileName_tFileOutputDelimited_1);
        if(filetFileOutputDelimited_1.exists()){
            isFileGenerated_tFileOutputDelimited_1 = false;
        }
            int nb_line_tFileOutputDelimited_1 = 0;
            int splitedFileNo_tFileOutputDelimited_1 = 0;
            int currentRow_tFileOutputDelimited_1 = 0;

            final String OUT_DELIM_tFileOutputDelimited_1 = /** Start field tFileOutputDelimited_1:FIELDSEPARATOR */";"/** End field tFileOutputDelimited_1:FIELDSEPARATOR */;

            final String OUT_DELIM_ROWSEP_tFileOutputDelimited_1 = /** Start field tFileOutputDelimited_1:ROWSEPARATOR */"\n"/** End field tFileOutputDelimited_1:ROWSEPARATOR */;

                    //create directory only if not exists
                    if(directory_tFileOutputDelimited_1 != null && directory_tFileOutputDelimited_1.trim().length() != 0) {
                        java.io.File dir_tFileOutputDelimited_1 = new java.io.File(directory_tFileOutputDelimited_1);
                        if(!dir_tFileOutputDelimited_1.exists()) {
                            dir_tFileOutputDelimited_1.mkdirs();
                        }
                    }

                        //routines.system.Row
                        java.io.Writer outtFileOutputDelimited_1 = null;

                        outtFileOutputDelimited_1 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
                        new java.io.FileOutputStream(fileName_tFileOutputDelimited_1, true),"ISO-8859-15"));
                resourceMap.put("out_tFileOutputDelimited_1", outtFileOutputDelimited_1);
                                    if(filetFileOutputDelimited_1.length()==0){
                                        outtFileOutputDelimited_1.write("moment");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("pid");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("root_pid");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("father_pid");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("project");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("job");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("context");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("priority");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("type");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("origin");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("message");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("code");
                                        outtFileOutputDelimited_1.write(OUT_DELIM_ROWSEP_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.flush();
                                    }


resourceMap.put("nb_line_tFileOutputDelimited_1", nb_line_tFileOutputDelimited_1);

 



/**
 * [tFileOutputDelimited_1 begin ] stop
 */



	
	/**
	 * [tLogCatcher_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogCatcher_1", false);
		start_Hash.put("tLogCatcher_1", System.currentTimeMillis());
		
	
	currentComponent="tLogCatcher_1";
	
	
		int tos_count_tLogCatcher_1 = 0;
		

try {
	for (LogCatcherUtils.LogCatcherMessage lcm : tLogCatcher_1.getMessages()) {
		row3.type = lcm.getType();
		row3.origin = (lcm.getOrigin()==null || lcm.getOrigin().length()<1 ? null : lcm.getOrigin());
		row3.priority = lcm.getPriority();
		row3.message = lcm.getMessage();
		row3.code = lcm.getCode();
		
		row3.moment = java.util.Calendar.getInstance().getTime();
	
    	row3.pid = pid;
		row3.root_pid = rootPid;
		row3.father_pid = fatherPid;
	
    	row3.project = projectName;
    	row3.job = jobName;
    	row3.context = contextStr;
    		
 



/**
 * [tLogCatcher_1 begin ] stop
 */
	
	/**
	 * [tLogCatcher_1 main ] start
	 */

	

	
	
	currentComponent="tLogCatcher_1";
	
	

 


	tos_count_tLogCatcher_1++;

/**
 * [tLogCatcher_1 main ] stop
 */
	
	/**
	 * [tLogCatcher_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogCatcher_1";
	
	

 



/**
 * [tLogCatcher_1 process_data_begin ] stop
 */

	
	/**
	 * [tFileOutputDelimited_1 main ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row3"
						
						);
					}
					


                    StringBuilder sb_tFileOutputDelimited_1 = new StringBuilder();
                            if(row3.moment != null) {
                        sb_tFileOutputDelimited_1.append(
                            FormatterUtils.format_Date(row3.moment, "yyyy-MM-dd HH:mm:ss")
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row3.pid != null) {
                        sb_tFileOutputDelimited_1.append(
                            row3.pid
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row3.root_pid != null) {
                        sb_tFileOutputDelimited_1.append(
                            row3.root_pid
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row3.father_pid != null) {
                        sb_tFileOutputDelimited_1.append(
                            row3.father_pid
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row3.project != null) {
                        sb_tFileOutputDelimited_1.append(
                            row3.project
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row3.job != null) {
                        sb_tFileOutputDelimited_1.append(
                            row3.job
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row3.context != null) {
                        sb_tFileOutputDelimited_1.append(
                            row3.context
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row3.priority != null) {
                        sb_tFileOutputDelimited_1.append(
                            row3.priority
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row3.type != null) {
                        sb_tFileOutputDelimited_1.append(
                            row3.type
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row3.origin != null) {
                        sb_tFileOutputDelimited_1.append(
                            row3.origin
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row3.message != null) {
                        sb_tFileOutputDelimited_1.append(
                            row3.message
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row3.code != null) {
                        sb_tFileOutputDelimited_1.append(
                            row3.code
                        );
                            }
                    sb_tFileOutputDelimited_1.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_1);


                    nb_line_tFileOutputDelimited_1++;
                    resourceMap.put("nb_line_tFileOutputDelimited_1", nb_line_tFileOutputDelimited_1);

                        outtFileOutputDelimited_1.write(sb_tFileOutputDelimited_1.toString());




 
     row5 = row3;


	tos_count_tFileOutputDelimited_1++;

/**
 * [tFileOutputDelimited_1 main ] stop
 */
	
	/**
	 * [tFileOutputDelimited_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";
	
	

 



/**
 * [tFileOutputDelimited_1 process_data_begin ] stop
 */

	
	/**
	 * [tRunJob_1 main ] start
	 */

	

	
	
	currentComponent="tRunJob_1";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row5"
						
						);
					}
					
	java.util.List<String> paraList_tRunJob_1 = new java.util.ArrayList<String>();
	
			
			String osName_tRunJob_1 = System.getProperty("os.name");
			if (osName_tRunJob_1 != null && osName_tRunJob_1.toLowerCase(java.util.Locale.US).startsWith("win")){
				
						paraList_tRunJob_1.add("java");
						String m2 = System.getProperty("talend.component.manager.m2.repository");
						if (m2 != null){
							paraList_tRunJob_1.add("-Dtalend.component.manager.m2.repository=" + m2);
						}
						
						if (Boolean.getBoolean("propagateLoggingConfiguration")) {
							String log4j1_config_tRunJob_1 = System.getProperty("log4j.configuration");
							if (log4j1_config_tRunJob_1 != null){
								paraList_tRunJob_1.add("-Dlog4j.configuration=" + log4j1_config_tRunJob_1);
							}
							String log4j2_config_tRunJob_1 = System.getProperty("log4j.configurationFile");
							if (log4j2_config_tRunJob_1 != null){
								paraList_tRunJob_1.add("-Dlog4j.configurationFile=" + log4j2_config_tRunJob_1);
							}
							if (log4j1_config_tRunJob_1 != null || log4j2_config_tRunJob_1 != null) {
								paraList_tRunJob_1.add("-DpropagateLoggingConfiguration=true");
							}
						}
						
						if(enableLogStash){
							System.getProperties().stringPropertyNames().stream()
								.filter(it -> it.startsWith("audit."))
								.forEach(key -> paraList_tRunJob_1.add("-D" + key + "=" + System.getProperty(key)));
						}
							
						System.getProperties().stringPropertyNames().stream()
							.filter(it -> it.startsWith("runtime.lineage.") || "classpath.extended".equals(it))
							.forEach(key -> paraList_tRunJob_1.add("-D" + key + "=" + System.getProperty(key)));
					
		      					jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "-Dtalend.component.manager.m2.repository=../lib");
		      				
		      					jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "-Xms256M");
		      				
		      					jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "-Xmx1024M");
		      				
		      					jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "-cp");
		      				
              					String classpath_tRunJob_1_5 = ".;../lib/routines.jar;../lib/log4j-slf4j-impl-2.17.1.jar;../lib/log4j-api-2.17.1.jar;../lib/log4j-core-2.17.1.jar;../lib/activation-1.1.jar;../lib/jakarta.mail-1.6.7.jar;../lib/xercesImpl-2.12.2.jar;../lib/xml-apis-1.4.01.jar;../lib/slf4j-api-1.7.34.jar;../lib/crypto-utils-7.1.16.jar;../lib/TalendSAX.jar;../lib/jboss-marshalling-2.0.12.Final.jar;../lib/dom4j-2.1.3.jar;mail_0_1.jar;";
              					
              					if(audit_jar_path_tRunJob_1!=null && !audit_jar_path_tRunJob_1.isEmpty()) {
		      						classpath_tRunJob_1_5 += audit_jar_path_tRunJob_1;
		      					}
		      					
	        					jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, dealChildJobLibrary_tRunJob_1.replaceJarPathsFromCrcMap(classpath_tRunJob_1_5), true);
		      				
		      					jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "acm_actas.mail_0_1.Mail");
		      				
		      					jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "--father_pid="+pid);
		      				
		      					jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "--root_pid="+rootPid);
		      				
		      					jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "--father_node=tRunJob_1");
		      				
		      					jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "--context=Default");
		      				
		      					jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "%*");
		      				
			} else {
	      		
						paraList_tRunJob_1.add("java");
						String m2 = System.getProperty("talend.component.manager.m2.repository");
						if (m2 != null){
							paraList_tRunJob_1.add("-Dtalend.component.manager.m2.repository=" + m2);
						}
						
						if (Boolean.getBoolean("propagateLoggingConfiguration")) {
							String log4j1_config_tRunJob_1 = System.getProperty("log4j.configuration");
							if (log4j1_config_tRunJob_1 != null){
								paraList_tRunJob_1.add("-Dlog4j.configuration=" + log4j1_config_tRunJob_1);
							}
							String log4j2_config_tRunJob_1 = System.getProperty("log4j.configurationFile");
							if (log4j2_config_tRunJob_1 != null){
								paraList_tRunJob_1.add("-Dlog4j.configurationFile=" + log4j2_config_tRunJob_1);
							}
							if (log4j1_config_tRunJob_1 != null || log4j2_config_tRunJob_1 != null) {
								paraList_tRunJob_1.add("-DpropagateLoggingConfiguration=true");
							}
						}
						
						if(enableLogStash){
							System.getProperties().stringPropertyNames().stream()
								.filter(it -> it.startsWith("audit."))
								.forEach(key -> paraList_tRunJob_1.add("-D" + key + "=" + System.getProperty(key)));
						}
							
						System.getProperties().stringPropertyNames().stream()
							.filter(it -> it.startsWith("runtime.lineage.") || "classpath.extended".equals(it))
							.forEach(key -> paraList_tRunJob_1.add("-D" + key + "=" + System.getProperty(key)));
					
								jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "-Dtalend.component.manager.m2.repository=../lib");
		      				
								jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "-Xms256M");
		      				
								jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "-Xmx1024M");
		      				
								jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "-cp");
		      				
		      					String classpath_tRunJob_1_5 = ".:$ROOT_PATH:$ROOT_PATH/../lib/routines.jar:$ROOT_PATH/../lib/log4j-slf4j-impl-2.17.1.jar:$ROOT_PATH/../lib/log4j-api-2.17.1.jar:$ROOT_PATH/../lib/log4j-core-2.17.1.jar:$ROOT_PATH/../lib/activation-1.1.jar:$ROOT_PATH/../lib/jakarta.mail-1.6.7.jar:$ROOT_PATH/../lib/xercesImpl-2.12.2.jar:$ROOT_PATH/../lib/xml-apis-1.4.01.jar:$ROOT_PATH/../lib/slf4j-api-1.7.34.jar:$ROOT_PATH/../lib/crypto-utils-7.1.16.jar:$ROOT_PATH/../lib/TalendSAX.jar:$ROOT_PATH/../lib/jboss-marshalling-2.0.12.Final.jar:$ROOT_PATH/../lib/dom4j-2.1.3.jar:$ROOT_PATH/mail_0_1.jar:";
		      					
		      					if(audit_jar_path_tRunJob_1!=null && !audit_jar_path_tRunJob_1.isEmpty()) {
		      						classpath_tRunJob_1_5 += audit_jar_path_tRunJob_1;
		      					}
		      					
								jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, dealChildJobLibrary_tRunJob_1.replaceJarPathsFromCrcMap(classpath_tRunJob_1_5).replace("$ROOT_PATH",System.getProperty("user.dir")), true);
		      				
								jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "acm_actas.mail_0_1.Mail");
		      				
								jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "--father_pid="+pid);
		      				
								jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "--root_pid="+rootPid);
		      				
								jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "--father_node=tRunJob_1");
		      				
								jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "--context=Default");
		      				
								jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "$@");
		      				
			}

			
			
	  	
		if(enableLogStash){
			paraList_tRunJob_1.add("--audit.enabled="+enableLogStash);
		}
		
	//for feature:10589
	
		paraList_tRunJob_1.add("--stat_port=" + null);
	

	if(resuming_logs_dir_path != null){
		paraList_tRunJob_1.add("--resuming_logs_dir_path=" + resuming_logs_dir_path);
	}
	String childResumePath_tRunJob_1 = ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path);
	String tRunJobName_tRunJob_1 = ResumeUtil.getRighttRunJob(resuming_checkpoint_path);
	if("tRunJob_1".equals(tRunJobName_tRunJob_1) && childResumePath_tRunJob_1 != null){
		paraList_tRunJob_1.add("--resuming_checkpoint_path=" + ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path));
	}
	paraList_tRunJob_1.add("--parent_part_launcher=JOB:" + jobName + "/NODE:tRunJob_1");
	
	java.util.Map<String, Object> parentContextMap_tRunJob_1 = new java.util.HashMap<String, Object>();

	
		
		context.synchronizeContext();
            class ContextProcessor_tRunJob_1 {
                    private void transmitContext_0() {
                    parentContextMap_tRunJob_1.put("ACTA_ID", context.ACTA_ID);
                    paraList_tRunJob_1.add("--context_type " + "ACTA_ID" + "=" + "id_BigDecimal");
                    parentContextMap_tRunJob_1.put("CIUDAD", context.CIUDAD);
                    paraList_tRunJob_1.add("--context_type " + "CIUDAD" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("CONTADOR", context.CONTADOR);
                    paraList_tRunJob_1.add("--context_type " + "CONTADOR" + "=" + "id_Integer");
                    parentContextMap_tRunJob_1.put("DOCUMENTO", context.DOCUMENTO);
                    paraList_tRunJob_1.add("--context_type " + "DOCUMENTO" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("ESTABLECIMIENTO", context.ESTABLECIMIENTO);
                    paraList_tRunJob_1.add("--context_type " + "ESTABLECIMIENTO" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("FACTURA_ID", context.FACTURA_ID);
                    paraList_tRunJob_1.add("--context_type " + "FACTURA_ID" + "=" + "id_BigDecimal");
                    parentContextMap_tRunJob_1.put("FECHA_HORA_FIN_EJECUCION", context.FECHA_HORA_FIN_EJECUCION);
                    paraList_tRunJob_1.add("--context_type " + "FECHA_HORA_FIN_EJECUCION" + "=" + "id_Date");
                    parentContextMap_tRunJob_1.put("FECHA_HORA_INICIO_EJECUCION", context.FECHA_HORA_INICIO_EJECUCION);
                    paraList_tRunJob_1.add("--context_type " + "FECHA_HORA_INICIO_EJECUCION" + "=" + "id_Date");
                    parentContextMap_tRunJob_1.put("HAUDITORIA_ID", context.HAUDITORIA_ID);
                    paraList_tRunJob_1.add("--context_type " + "HAUDITORIA_ID" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("ID", context.ID);
                    paraList_tRunJob_1.add("--context_type " + "ID" + "=" + "id_BigDecimal");
                    parentContextMap_tRunJob_1.put("NOMBRE_ACTA", context.NOMBRE_ACTA);
                    paraList_tRunJob_1.add("--context_type " + "NOMBRE_ACTA" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("RECEPCION_ID", context.RECEPCION_ID);
                    paraList_tRunJob_1.add("--context_type " + "RECEPCION_ID" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("SIGLA", context.SIGLA);
                    paraList_tRunJob_1.add("--context_type " + "SIGLA" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("SUMADOR_NETO", context.SUMADOR_NETO);
                    paraList_tRunJob_1.add("--context_type " + "SUMADOR_NETO" + "=" + "id_BigDecimal");
                    parentContextMap_tRunJob_1.put("TACTA", context.TACTA);
                    paraList_tRunJob_1.add("--context_type " + "TACTA" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("TDOCUMENTO", context.TDOCUMENTO);
                    paraList_tRunJob_1.add("--context_type " + "TDOCUMENTO" + "=" + "id_BigDecimal");
                    parentContextMap_tRunJob_1.put("USUARIO", context.USUARIO);
                    paraList_tRunJob_1.add("--context_type " + "USUARIO" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("VACEPTADO", context.VACEPTADO);
                    paraList_tRunJob_1.add("--context_type " + "VACEPTADO" + "=" + "id_BigDecimal");
                    parentContextMap_tRunJob_1.put("VCOBRADO", context.VCOBRADO);
                    paraList_tRunJob_1.add("--context_type " + "VCOBRADO" + "=" + "id_BigDecimal");
                    parentContextMap_tRunJob_1.put("VFACTURADO", context.VFACTURADO);
                    paraList_tRunJob_1.add("--context_type " + "VFACTURADO" + "=" + "id_BigDecimal");
                    parentContextMap_tRunJob_1.put("VGLOSADO", context.VGLOSADO);
                    paraList_tRunJob_1.add("--context_type " + "VGLOSADO" + "=" + "id_BigDecimal");
                    parentContextMap_tRunJob_1.put("VNETO", context.VNETO);
                    paraList_tRunJob_1.add("--context_type " + "VNETO" + "=" + "id_BigDecimal");
                    parentContextMap_tRunJob_1.put("VRATIFICADA", context.VRATIFICADA);
                    paraList_tRunJob_1.add("--context_type " + "VRATIFICADA" + "=" + "id_BigDecimal");
                    parentContextMap_tRunJob_1.put("VSOPORTADO", context.VSOPORTADO);
                    paraList_tRunJob_1.add("--context_type " + "VSOPORTADO" + "=" + "id_BigDecimal");
                    parentContextMap_tRunJob_1.put("db_origen_AdditionalParams", context.db_origen_AdditionalParams);
                    paraList_tRunJob_1.add("--context_type " + "db_origen_AdditionalParams" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("db_origen_Login", context.db_origen_Login);
                    paraList_tRunJob_1.add("--context_type " + "db_origen_Login" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("db_origen_Password", context.db_origen_Password);
                    paraList_tRunJob_1.add("--context_type " + "db_origen_Password" + "=" + "id_Password");
                    parentContextMap_tRunJob_1.put("db_origen_Port", context.db_origen_Port);
                    paraList_tRunJob_1.add("--context_type " + "db_origen_Port" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("db_origen_Schema", context.db_origen_Schema);
                    paraList_tRunJob_1.add("--context_type " + "db_origen_Schema" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("db_origen_Server", context.db_origen_Server);
                    paraList_tRunJob_1.add("--context_type " + "db_origen_Server" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("db_origen_ServiceName", context.db_origen_ServiceName);
                    paraList_tRunJob_1.add("--context_type " + "db_origen_ServiceName" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("db_destino_AdditionalParams", context.db_destino_AdditionalParams);
                    paraList_tRunJob_1.add("--context_type " + "db_destino_AdditionalParams" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("db_destino_Login", context.db_destino_Login);
                    paraList_tRunJob_1.add("--context_type " + "db_destino_Login" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("db_destino_Password", context.db_destino_Password);
                    paraList_tRunJob_1.add("--context_type " + "db_destino_Password" + "=" + "id_Password");
                    parentContextMap_tRunJob_1.put("db_destino_Port", context.db_destino_Port);
                    paraList_tRunJob_1.add("--context_type " + "db_destino_Port" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("db_destino_Schema", context.db_destino_Schema);
                    paraList_tRunJob_1.add("--context_type " + "db_destino_Schema" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("db_destino_Server", context.db_destino_Server);
                    paraList_tRunJob_1.add("--context_type " + "db_destino_Server" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("db_destino_ServiceName", context.db_destino_ServiceName);
                    paraList_tRunJob_1.add("--context_type " + "db_destino_ServiceName" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("archivoSalida", context.archivoSalida);
                    paraList_tRunJob_1.add("--context_type " + "archivoSalida" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("fileSystem_Area", context.fileSystem_Area);
                    paraList_tRunJob_1.add("--context_type " + "fileSystem_Area" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("fileSystem_Path", context.fileSystem_Path);
                    paraList_tRunJob_1.add("--context_type " + "fileSystem_Path" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("fileSystem_Report", context.fileSystem_Report);
                    paraList_tRunJob_1.add("--context_type " + "fileSystem_Report" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("fileSystem_URL", context.fileSystem_URL);
                    paraList_tRunJob_1.add("--context_type " + "fileSystem_URL" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("ACTUALIZACION_TOTAL", context.ACTUALIZACION_TOTAL);
                    paraList_tRunJob_1.add("--context_type " + "ACTUALIZACION_TOTAL" + "=" + "id_Boolean");
                    parentContextMap_tRunJob_1.put("BODEGA", context.BODEGA);
                    paraList_tRunJob_1.add("--context_type " + "BODEGA" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("ERROR", context.ERROR);
                    paraList_tRunJob_1.add("--context_type " + "ERROR" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("ESTADO", context.ESTADO);
                    paraList_tRunJob_1.add("--context_type " + "ESTADO" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("ESTADO_EXEC", context.ESTADO_EXEC);
                    paraList_tRunJob_1.add("--context_type " + "ESTADO_EXEC" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("FANTERIOR", context.FANTERIOR);
                    paraList_tRunJob_1.add("--context_type " + "FANTERIOR" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("FECHA_EJECUCION", context.FECHA_EJECUCION);
                    paraList_tRunJob_1.add("--context_type " + "FECHA_EJECUCION" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("FECHA_TERMINACION", context.FECHA_TERMINACION);
                    paraList_tRunJob_1.add("--context_type " + "FECHA_TERMINACION" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("HORA", context.HORA);
                    paraList_tRunJob_1.add("--context_type " + "HORA" + "=" + "id_Integer");
                    parentContextMap_tRunJob_1.put("HORA_FINAL", context.HORA_FINAL);
                    paraList_tRunJob_1.add("--context_type " + "HORA_FINAL" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("HORA_INICIO", context.HORA_INICIO);
                    paraList_tRunJob_1.add("--context_type " + "HORA_INICIO" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("ID_SOLICITUD", context.ID_SOLICITUD);
                    paraList_tRunJob_1.add("--context_type " + "ID_SOLICITUD" + "=" + "id_Integer");
                    parentContextMap_tRunJob_1.put("JOB", context.JOB);
                    paraList_tRunJob_1.add("--context_type " + "JOB" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("LAST_DAYS", context.LAST_DAYS);
                    paraList_tRunJob_1.add("--context_type " + "LAST_DAYS" + "=" + "id_Integer");
                    parentContextMap_tRunJob_1.put("LOGS_ERROR", context.LOGS_ERROR);
                    paraList_tRunJob_1.add("--context_type " + "LOGS_ERROR" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("LOGS_EXECUTION", context.LOGS_EXECUTION);
                    paraList_tRunJob_1.add("--context_type " + "LOGS_EXECUTION" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("MINUTOS", context.MINUTOS);
                    paraList_tRunJob_1.add("--context_type " + "MINUTOS" + "=" + "id_Integer");
                    parentContextMap_tRunJob_1.put("ORIGEN", context.ORIGEN);
                    paraList_tRunJob_1.add("--context_type " + "ORIGEN" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("PATH", context.PATH);
                    paraList_tRunJob_1.add("--context_type " + "PATH" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("JasperAmbiente", context.JasperAmbiente);
                    paraList_tRunJob_1.add("--context_type " + "JasperAmbiente" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("JasperModulo", context.JasperModulo);
                    paraList_tRunJob_1.add("--context_type " + "JasperModulo" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("JasperParameters", context.JasperParameters);
                    paraList_tRunJob_1.add("--context_type " + "JasperParameters" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("JasperPassword", context.JasperPassword);
                    paraList_tRunJob_1.add("--context_type " + "JasperPassword" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("JasperReporte", context.JasperReporte);
                    paraList_tRunJob_1.add("--context_type " + "JasperReporte" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("JasperServer", context.JasperServer);
                    paraList_tRunJob_1.add("--context_type " + "JasperServer" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("JasperURI", context.JasperURI);
                    paraList_tRunJob_1.add("--context_type " + "JasperURI" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("JasperUser", context.JasperUser);
                    paraList_tRunJob_1.add("--context_type " + "JasperUser" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("mail_Message", context.mail_Message);
                    paraList_tRunJob_1.add("--context_type " + "mail_Message" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("mail_Password", context.mail_Password);
                    paraList_tRunJob_1.add("--context_type " + "mail_Password" + "=" + "id_Password");
                    parentContextMap_tRunJob_1.put("mail_Sendername", context.mail_Sendername);
                    paraList_tRunJob_1.add("--context_type " + "mail_Sendername" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("mail_SMTP_Host", context.mail_SMTP_Host);
                    paraList_tRunJob_1.add("--context_type " + "mail_SMTP_Host" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("mail_SMTP_Port", context.mail_SMTP_Port);
                    paraList_tRunJob_1.add("--context_type " + "mail_SMTP_Port" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("mail_Subject", context.mail_Subject);
                    paraList_tRunJob_1.add("--context_type " + "mail_Subject" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("mail_To", context.mail_To);
                    paraList_tRunJob_1.add("--context_type " + "mail_To" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("mail_User", context.mail_User);
                    paraList_tRunJob_1.add("--context_type " + "mail_User" + "=" + "id_String");
                        }
                    public void transmitAllContext() {
                        transmitContext_0();
                    }
            }
            new ContextProcessor_tRunJob_1().transmitAllContext();
		java.util.Enumeration<?> propertyNames_tRunJob_1 = context.propertyNames();
		while (propertyNames_tRunJob_1.hasMoreElements()) {
			String key_tRunJob_1 = (String) propertyNames_tRunJob_1.nextElement();
			Object value_tRunJob_1 = (Object) context.get(key_tRunJob_1);
			if(value_tRunJob_1!=null) {  
				
					paraList_tRunJob_1.add("--context_param " + key_tRunJob_1 + "=" + value_tRunJob_1);
					
			} else {
				paraList_tRunJob_1.add("--context_param " + key_tRunJob_1 + "=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
			}
			
		}
		

	Object obj_tRunJob_1 = null;

	
		obj_tRunJob_1 = row5.moment;
		if(obj_tRunJob_1!=null) {
			if (obj_tRunJob_1.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_1.add("--context_param moment=" + ((java.util.Date) obj_tRunJob_1).getTime());
			} else {
				
					paraList_tRunJob_1.add("--context_param moment=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_1));
					
				
			}
		} else {
			paraList_tRunJob_1.add("--context_param moment=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_1.put("moment", obj_tRunJob_1);
	
		obj_tRunJob_1 = row5.project;
		if(obj_tRunJob_1!=null) {
			if (obj_tRunJob_1.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_1.add("--context_param Project=" + ((java.util.Date) obj_tRunJob_1).getTime());
			} else {
				
					paraList_tRunJob_1.add("--context_param Project=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_1));
					
				
			}
		} else {
			paraList_tRunJob_1.add("--context_param Project=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_1.put("Project", obj_tRunJob_1);
	
		obj_tRunJob_1 = row5.job;
		if(obj_tRunJob_1!=null) {
			if (obj_tRunJob_1.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_1.add("--context_param job=" + ((java.util.Date) obj_tRunJob_1).getTime());
			} else {
				
					paraList_tRunJob_1.add("--context_param job=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_1));
					
				
			}
		} else {
			paraList_tRunJob_1.add("--context_param job=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_1.put("job", obj_tRunJob_1);
	
		obj_tRunJob_1 = row5.context;
		if(obj_tRunJob_1!=null) {
			if (obj_tRunJob_1.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_1.add("--context_param context=" + ((java.util.Date) obj_tRunJob_1).getTime());
			} else {
				
					paraList_tRunJob_1.add("--context_param context=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_1));
					
				
			}
		} else {
			paraList_tRunJob_1.add("--context_param context=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_1.put("context", obj_tRunJob_1);
	
		obj_tRunJob_1 = row5.origin;
		if(obj_tRunJob_1!=null) {
			if (obj_tRunJob_1.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_1.add("--context_param origen=" + ((java.util.Date) obj_tRunJob_1).getTime());
			} else {
				
					paraList_tRunJob_1.add("--context_param origen=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_1));
					
				
			}
		} else {
			paraList_tRunJob_1.add("--context_param origen=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_1.put("origen", obj_tRunJob_1);
	
		obj_tRunJob_1 = row5.message;
		if(obj_tRunJob_1!=null) {
			if (obj_tRunJob_1.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_1.add("--context_param message=" + ((java.util.Date) obj_tRunJob_1).getTime());
			} else {
				
					paraList_tRunJob_1.add("--context_param message=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_1));
					
				
			}
		} else {
			paraList_tRunJob_1.add("--context_param message=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_1.put("message", obj_tRunJob_1);
	
		obj_tRunJob_1 = context.db_origen_Server;
		if(obj_tRunJob_1!=null) {
			if (obj_tRunJob_1.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_1.add("--context_param server_origen=" + ((java.util.Date) obj_tRunJob_1).getTime());
			} else {
				
					paraList_tRunJob_1.add("--context_param server_origen=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_1));
					
				
			}
		} else {
			paraList_tRunJob_1.add("--context_param server_origen=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_1.put("server_origen", obj_tRunJob_1);
	
		obj_tRunJob_1 = context.db_origen_ServiceName;
		if(obj_tRunJob_1!=null) {
			if (obj_tRunJob_1.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_1.add("--context_param service_name_origen=" + ((java.util.Date) obj_tRunJob_1).getTime());
			} else {
				
					paraList_tRunJob_1.add("--context_param service_name_origen=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_1));
					
				
			}
		} else {
			paraList_tRunJob_1.add("--context_param service_name_origen=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_1.put("service_name_origen", obj_tRunJob_1);
	
		obj_tRunJob_1 = context.db_origen_Login;
		if(obj_tRunJob_1!=null) {
			if (obj_tRunJob_1.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_1.add("--context_param user_origen=" + ((java.util.Date) obj_tRunJob_1).getTime());
			} else {
				
					paraList_tRunJob_1.add("--context_param user_origen=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_1));
					
				
			}
		} else {
			paraList_tRunJob_1.add("--context_param user_origen=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_1.put("user_origen", obj_tRunJob_1);
	
		obj_tRunJob_1 = context.db_destino_Server;
		if(obj_tRunJob_1!=null) {
			if (obj_tRunJob_1.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_1.add("--context_param server_destino=" + ((java.util.Date) obj_tRunJob_1).getTime());
			} else {
				
					paraList_tRunJob_1.add("--context_param server_destino=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_1));
					
				
			}
		} else {
			paraList_tRunJob_1.add("--context_param server_destino=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_1.put("server_destino", obj_tRunJob_1);
	
		obj_tRunJob_1 = context.db_destino_ServiceName;
		if(obj_tRunJob_1!=null) {
			if (obj_tRunJob_1.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_1.add("--context_param service_name_destino=" + ((java.util.Date) obj_tRunJob_1).getTime());
			} else {
				
					paraList_tRunJob_1.add("--context_param service_name_destino=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_1));
					
				
			}
		} else {
			paraList_tRunJob_1.add("--context_param service_name_destino=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_1.put("service_name_destino", obj_tRunJob_1);
	
		obj_tRunJob_1 = context.db_destino_Login;
		if(obj_tRunJob_1!=null) {
			if (obj_tRunJob_1.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_1.add("--context_param user_destino=" + ((java.util.Date) obj_tRunJob_1).getTime());
			} else {
				
					paraList_tRunJob_1.add("--context_param user_destino=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_1));
					
				
			}
		} else {
			paraList_tRunJob_1.add("--context_param user_destino=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_1.put("user_destino", obj_tRunJob_1);
	
	
				class ConsoleHelper_tRunJob_1 {
					private Thread getNormalThread(Process process) {
						return new Thread() {
							public void run() {
								try {
									java.io.BufferedReader reader = new java.io.BufferedReader(
											new java.io.InputStreamReader(
													process.getInputStream()));
									String line = "";
									try {
										while ((line = reader.readLine()) != null) {
											System.out.println(line);
										}
									} finally {
										reader.close();
									}
								} catch (java.io.IOException ioe) {
globalMap.put("tRunJob_1_ERROR_MESSAGE",ioe.getMessage());
						            
									ioe.printStackTrace();
								}
							}
						};
					}

					private Thread getErrorThread(Process process, StringBuffer sb) {
						return new Thread() {
							public void run() {
								try {
									java.io.BufferedReader reader = new java.io.BufferedReader(
											new java.io.InputStreamReader(
													process.getErrorStream()));
									String line = "";
									try {
										while ((line = reader.readLine()) != null) {
											sb.append(line)
													.append("\n");
										}
									} finally {
										reader.close();
									}
								} catch (java.io.IOException ioe) {
globalMap.put("tRunJob_1_ERROR_MESSAGE",ioe.getMessage());
						            
									ioe.printStackTrace();
								}
							}
						};
					}
				}
				ConsoleHelper_tRunJob_1 consoleHelper_tRunJob_1 = new ConsoleHelper_tRunJob_1();

		Runtime runtime_tRunJob_1 = Runtime.getRuntime();
		Process ps_tRunJob_1 = null;
		
		//0 indicates normal termination
        int result_tRunJob_1;
        StringBuffer errorMsg_tRunJob_1 = new StringBuffer();
        try {
            ps_tRunJob_1 = runtime_tRunJob_1.exec((String[])paraList_tRunJob_1.toArray(new String[paraList_tRunJob_1.size()]));

            Thread normal_tRunJob_1 = consoleHelper_tRunJob_1.getNormalThread(ps_tRunJob_1);
            normal_tRunJob_1.start();

            Thread error_tRunJob_1 = consoleHelper_tRunJob_1.getErrorThread(ps_tRunJob_1, errorMsg_tRunJob_1);
            error_tRunJob_1.start();

            result_tRunJob_1 = ps_tRunJob_1.waitFor();
            normal_tRunJob_1.join();
            error_tRunJob_1.join();
        } catch (ThreadDeath tde) {
globalMap.put("tRunJob_1_ERROR_MESSAGE",tde.getMessage());
            ps_tRunJob_1.destroy();
            throw tde;
        }

		globalMap.put("tRunJob_1_CHILD_RETURN_CODE",result_tRunJob_1);
		if(result_tRunJob_1 != 0){
   			globalMap.put("tRunJob_1_CHILD_EXCEPTION_STACKTRACE",errorMsg_tRunJob_1.toString());
			  
	    		throw new RuntimeException("Child job returns " + result_tRunJob_1 + ". It doesn't terminate normally.\n" + errorMsg_tRunJob_1.toString());
			
  		}

		

 


	tos_count_tRunJob_1++;

/**
 * [tRunJob_1 main ] stop
 */
	
	/**
	 * [tRunJob_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tRunJob_1";
	
	

 



/**
 * [tRunJob_1 process_data_begin ] stop
 */
	
	/**
	 * [tRunJob_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tRunJob_1";
	
	

 



/**
 * [tRunJob_1 process_data_end ] stop
 */



	
	/**
	 * [tFileOutputDelimited_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";
	
	

 



/**
 * [tFileOutputDelimited_1 process_data_end ] stop
 */



	
	/**
	 * [tLogCatcher_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogCatcher_1";
	
	

 



/**
 * [tLogCatcher_1 process_data_end ] stop
 */
	
	/**
	 * [tLogCatcher_1 end ] start
	 */

	

	
	
	currentComponent="tLogCatcher_1";
	
	
	}
} catch (Exception e_tLogCatcher_1) {
globalMap.put("tLogCatcher_1_ERROR_MESSAGE",e_tLogCatcher_1.getMessage());
	logIgnoredError(String.format("tLogCatcher_1 - tLogCatcher failed to process log message(s) due to internal error: %s", e_tLogCatcher_1), e_tLogCatcher_1);
}

 

ok_Hash.put("tLogCatcher_1", true);
end_Hash.put("tLogCatcher_1", System.currentTimeMillis());




/**
 * [tLogCatcher_1 end ] stop
 */

	
	/**
	 * [tFileOutputDelimited_1 end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";
	
	



		
			
					if(outtFileOutputDelimited_1!=null) {
						outtFileOutputDelimited_1.flush();
						outtFileOutputDelimited_1.close();
					}
				
				globalMap.put("tFileOutputDelimited_1_NB_LINE",nb_line_tFileOutputDelimited_1);
				globalMap.put("tFileOutputDelimited_1_FILE_NAME",fileName_tFileOutputDelimited_1);
			
		
		
		resourceMap.put("finish_tFileOutputDelimited_1", true);
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row3");
			  	}
			  	
 

ok_Hash.put("tFileOutputDelimited_1", true);
end_Hash.put("tFileOutputDelimited_1", System.currentTimeMillis());




/**
 * [tFileOutputDelimited_1 end ] stop
 */

	
	/**
	 * [tRunJob_1 end ] start
	 */

	

	
	
	currentComponent="tRunJob_1";
	
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row5");
			  	}
			  	
 

ok_Hash.put("tRunJob_1", true);
end_Hash.put("tRunJob_1", System.currentTimeMillis());




/**
 * [tRunJob_1 end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tLogCatcher_1 finally ] start
	 */

	

	
	
	currentComponent="tLogCatcher_1";
	
	

 



/**
 * [tLogCatcher_1 finally ] stop
 */

	
	/**
	 * [tFileOutputDelimited_1 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";
	
	


		if(resourceMap.get("finish_tFileOutputDelimited_1") == null){ 
			
				
						java.io.Writer outtFileOutputDelimited_1 = (java.io.Writer)resourceMap.get("out_tFileOutputDelimited_1");
						if(outtFileOutputDelimited_1!=null) {
							outtFileOutputDelimited_1.flush();
							outtFileOutputDelimited_1.close();
						}
					
				
			
		}
	

 



/**
 * [tFileOutputDelimited_1 finally ] stop
 */

	
	/**
	 * [tRunJob_1 finally ] start
	 */

	

	
	
	currentComponent="tRunJob_1";
	
	
	
 



/**
 * [tRunJob_1 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tLogCatcher_1_SUBPROCESS_STATE", 1);
	}
	


public void tPostjob_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPostjob_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tPostjob_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostjob_1", false);
		start_Hash.put("tPostjob_1", System.currentTimeMillis());
		
	
	currentComponent="tPostjob_1";
	
	
		int tos_count_tPostjob_1 = 0;
		

 



/**
 * [tPostjob_1 begin ] stop
 */
	
	/**
	 * [tPostjob_1 main ] start
	 */

	

	
	
	currentComponent="tPostjob_1";
	
	

 


	tos_count_tPostjob_1++;

/**
 * [tPostjob_1 main ] stop
 */
	
	/**
	 * [tPostjob_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tPostjob_1";
	
	

 



/**
 * [tPostjob_1 process_data_begin ] stop
 */
	
	/**
	 * [tPostjob_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tPostjob_1";
	
	

 



/**
 * [tPostjob_1 process_data_end ] stop
 */
	
	/**
	 * [tPostjob_1 end ] start
	 */

	

	
	
	currentComponent="tPostjob_1";
	
	

 

ok_Hash.put("tPostjob_1", true);
end_Hash.put("tPostjob_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk6", 0, "ok");
				}
				tJava_1Process(globalMap);



/**
 * [tPostjob_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPostjob_1 finally ] start
	 */

	

	
	
	currentComponent="tPostjob_1";
	
	

 



/**
 * [tPostjob_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPostjob_1_SUBPROCESS_STATE", 1);
	}
	


public void tJava_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tJava_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_1", false);
		start_Hash.put("tJava_1", System.currentTimeMillis());
		
	
	currentComponent="tJava_1";
	
	
		int tos_count_tJava_1 = 0;
		


//Guarda en variables de contexto la hora final de ejecución del etl, actualiza el estado a succes y los imprime en consola

context.HORA_FINAL = TalendDate.getDate("HH:mm:ss");
context.ESTADO_EXEC = "Succes";

System.out.println("- End: "+context.HORA_FINAL );
System.out.println("- Estado: "+context.ESTADO_EXEC );
 



/**
 * [tJava_1 begin ] stop
 */
	
	/**
	 * [tJava_1 main ] start
	 */

	

	
	
	currentComponent="tJava_1";
	
	

 


	tos_count_tJava_1++;

/**
 * [tJava_1 main ] stop
 */
	
	/**
	 * [tJava_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_1";
	
	

 



/**
 * [tJava_1 process_data_begin ] stop
 */
	
	/**
	 * [tJava_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_1";
	
	

 



/**
 * [tJava_1 process_data_end ] stop
 */
	
	/**
	 * [tJava_1 end ] start
	 */

	

	
	
	currentComponent="tJava_1";
	
	

 

ok_Hash.put("tJava_1", true);
end_Hash.put("tJava_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk7", 0, "ok");
				}
				tOracleClose_1Process(globalMap);
				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk8", 0, "ok");
				}
				tFixedFlowInput_1Process(globalMap);



/**
 * [tJava_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_1 finally ] start
	 */

	

	
	
	currentComponent="tJava_1";
	
	

 



/**
 * [tJava_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_1_SUBPROCESS_STATE", 1);
	}
	


public void tOracleClose_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleClose_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tOracleClose_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleClose_1", false);
		start_Hash.put("tOracleClose_1", System.currentTimeMillis());
		
	
	currentComponent="tOracleClose_1";
	
	
		int tos_count_tOracleClose_1 = 0;
		

 



/**
 * [tOracleClose_1 begin ] stop
 */
	
	/**
	 * [tOracleClose_1 main ] start
	 */

	

	
	
	currentComponent="tOracleClose_1";
	
	

	java.sql.Connection conn_tOracleClose_1 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");
	
	if(conn_tOracleClose_1 != null && !conn_tOracleClose_1.isClosed())
	{
		
			conn_tOracleClose_1.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_tOracleConnection_1"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
	}

 


	tos_count_tOracleClose_1++;

/**
 * [tOracleClose_1 main ] stop
 */
	
	/**
	 * [tOracleClose_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleClose_1";
	
	

 



/**
 * [tOracleClose_1 process_data_begin ] stop
 */
	
	/**
	 * [tOracleClose_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleClose_1";
	
	

 



/**
 * [tOracleClose_1 process_data_end ] stop
 */
	
	/**
	 * [tOracleClose_1 end ] start
	 */

	

	
	
	currentComponent="tOracleClose_1";
	
	

 

ok_Hash.put("tOracleClose_1", true);
end_Hash.put("tOracleClose_1", System.currentTimeMillis());




/**
 * [tOracleClose_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleClose_1 finally ] start
	 */

	

	
	
	currentComponent="tOracleClose_1";
	
	

 



/**
 * [tOracleClose_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleClose_1_SUBPROCESS_STATE", 1);
	}
	


public static class row4Struct implements routines.system.IPersistableRow<row4Struct> {
    final static byte[] commonByteArrayLock_ACM_ACTAS_Actas = new byte[0];
    static byte[] commonByteArray_ACM_ACTAS_Actas = new byte[0];

	
			    public String FECHA_EJECUCION;

				public String getFECHA_EJECUCION () {
					return this.FECHA_EJECUCION;
				}

				public Boolean FECHA_EJECUCIONIsNullable(){
				    return true;
				}
				public Boolean FECHA_EJECUCIONIsKey(){
				    return false;
				}
				public Integer FECHA_EJECUCIONLength(){
				    return null;
				}
				public Integer FECHA_EJECUCIONPrecision(){
				    return null;
				}
				public String FECHA_EJECUCIONDefault(){
				
					return null;
				
				}
				public String FECHA_EJECUCIONComment(){
				
				    return "";
				
				}
				public String FECHA_EJECUCIONPattern(){
				
					return "";
				
				}
				public String FECHA_EJECUCIONOriginalDbColumnName(){
				
					return "FECHA_EJECUCION";
				
				}

				
			    public String HORA_INICIO;

				public String getHORA_INICIO () {
					return this.HORA_INICIO;
				}

				public Boolean HORA_INICIOIsNullable(){
				    return true;
				}
				public Boolean HORA_INICIOIsKey(){
				    return false;
				}
				public Integer HORA_INICIOLength(){
				    return null;
				}
				public Integer HORA_INICIOPrecision(){
				    return null;
				}
				public String HORA_INICIODefault(){
				
					return null;
				
				}
				public String HORA_INICIOComment(){
				
				    return "";
				
				}
				public String HORA_INICIOPattern(){
				
					return "";
				
				}
				public String HORA_INICIOOriginalDbColumnName(){
				
					return "HORA_INICIO";
				
				}

				
			    public String HORA_FINAL;

				public String getHORA_FINAL () {
					return this.HORA_FINAL;
				}

				public Boolean HORA_FINALIsNullable(){
				    return true;
				}
				public Boolean HORA_FINALIsKey(){
				    return false;
				}
				public Integer HORA_FINALLength(){
				    return null;
				}
				public Integer HORA_FINALPrecision(){
				    return null;
				}
				public String HORA_FINALDefault(){
				
					return null;
				
				}
				public String HORA_FINALComment(){
				
				    return "";
				
				}
				public String HORA_FINALPattern(){
				
					return "";
				
				}
				public String HORA_FINALOriginalDbColumnName(){
				
					return "HORA_FINAL";
				
				}

				
			    public String ESTADO;

				public String getESTADO () {
					return this.ESTADO;
				}

				public Boolean ESTADOIsNullable(){
				    return true;
				}
				public Boolean ESTADOIsKey(){
				    return false;
				}
				public Integer ESTADOLength(){
				    return null;
				}
				public Integer ESTADOPrecision(){
				    return null;
				}
				public String ESTADODefault(){
				
					return null;
				
				}
				public String ESTADOComment(){
				
				    return "";
				
				}
				public String ESTADOPattern(){
				
					return "";
				
				}
				public String ESTADOOriginalDbColumnName(){
				
					return "ESTADO";
				
				}

				
			    public String JOBS;

				public String getJOBS () {
					return this.JOBS;
				}

				public Boolean JOBSIsNullable(){
				    return true;
				}
				public Boolean JOBSIsKey(){
				    return false;
				}
				public Integer JOBSLength(){
				    return null;
				}
				public Integer JOBSPrecision(){
				    return null;
				}
				public String JOBSDefault(){
				
					return null;
				
				}
				public String JOBSComment(){
				
				    return "";
				
				}
				public String JOBSPattern(){
				
					return "";
				
				}
				public String JOBSOriginalDbColumnName(){
				
					return "JOBS";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_ACTAS_Actas.length) {
				if(length < 1024 && commonByteArray_ACM_ACTAS_Actas.length == 0) {
   					commonByteArray_ACM_ACTAS_Actas = new byte[1024];
				} else {
   					commonByteArray_ACM_ACTAS_Actas = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ACM_ACTAS_Actas, 0, length);
			strReturn = new String(commonByteArray_ACM_ACTAS_Actas, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_ACTAS_Actas.length) {
				if(length < 1024 && commonByteArray_ACM_ACTAS_Actas.length == 0) {
   					commonByteArray_ACM_ACTAS_Actas = new byte[1024];
				} else {
   					commonByteArray_ACM_ACTAS_Actas = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_ACM_ACTAS_Actas, 0, length);
			strReturn = new String(commonByteArray_ACM_ACTAS_Actas, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ACM_ACTAS_Actas) {

        	try {

        		int length = 0;
		
					this.FECHA_EJECUCION = readString(dis);
					
					this.HORA_INICIO = readString(dis);
					
					this.HORA_FINAL = readString(dis);
					
					this.ESTADO = readString(dis);
					
					this.JOBS = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ACM_ACTAS_Actas) {

        	try {

        		int length = 0;
		
					this.FECHA_EJECUCION = readString(dis);
					
					this.HORA_INICIO = readString(dis);
					
					this.HORA_FINAL = readString(dis);
					
					this.ESTADO = readString(dis);
					
					this.JOBS = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.FECHA_EJECUCION,dos);
					
					// String
				
						writeString(this.HORA_INICIO,dos);
					
					// String
				
						writeString(this.HORA_FINAL,dos);
					
					// String
				
						writeString(this.ESTADO,dos);
					
					// String
				
						writeString(this.JOBS,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.FECHA_EJECUCION,dos);
					
					// String
				
						writeString(this.HORA_INICIO,dos);
					
					// String
				
						writeString(this.HORA_FINAL,dos);
					
					// String
				
						writeString(this.ESTADO,dos);
					
					// String
				
						writeString(this.JOBS,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("FECHA_EJECUCION="+FECHA_EJECUCION);
		sb.append(",HORA_INICIO="+HORA_INICIO);
		sb.append(",HORA_FINAL="+HORA_FINAL);
		sb.append(",ESTADO="+ESTADO);
		sb.append(",JOBS="+JOBS);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row4Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tFixedFlowInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFixedFlowInput_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row4Struct row4 = new row4Struct();




	
	/**
	 * [tFileOutputDelimited_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputDelimited_2", false);
		start_Hash.put("tFileOutputDelimited_2", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputDelimited_2";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row4");
					}
				
		int tos_count_tFileOutputDelimited_2 = 0;
		

String fileName_tFileOutputDelimited_2 = "";
    fileName_tFileOutputDelimited_2 = (new java.io.File(context.LOGS_EXECUTION)).getAbsolutePath().replace("\\","/");
    String fullName_tFileOutputDelimited_2 = null;
    String extension_tFileOutputDelimited_2 = null;
    String directory_tFileOutputDelimited_2 = null;
    if((fileName_tFileOutputDelimited_2.indexOf("/") != -1)) {
        if(fileName_tFileOutputDelimited_2.lastIndexOf(".") < fileName_tFileOutputDelimited_2.lastIndexOf("/")) {
            fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2;
            extension_tFileOutputDelimited_2 = "";
        } else {
            fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(0, fileName_tFileOutputDelimited_2.lastIndexOf("."));
            extension_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(fileName_tFileOutputDelimited_2.lastIndexOf("."));
        }
        directory_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(0, fileName_tFileOutputDelimited_2.lastIndexOf("/"));
    } else {
        if(fileName_tFileOutputDelimited_2.lastIndexOf(".") != -1) {
            fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(0, fileName_tFileOutputDelimited_2.lastIndexOf("."));
            extension_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(fileName_tFileOutputDelimited_2.lastIndexOf("."));
        } else {
            fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2;
            extension_tFileOutputDelimited_2 = "";
        }
        directory_tFileOutputDelimited_2 = "";
    }
    boolean isFileGenerated_tFileOutputDelimited_2 = true;
    java.io.File filetFileOutputDelimited_2 = new java.io.File(fileName_tFileOutputDelimited_2);
    globalMap.put("tFileOutputDelimited_2_FILE_NAME",fileName_tFileOutputDelimited_2);
        if(filetFileOutputDelimited_2.exists()){
            isFileGenerated_tFileOutputDelimited_2 = false;
        }
            int nb_line_tFileOutputDelimited_2 = 0;
            int splitedFileNo_tFileOutputDelimited_2 = 0;
            int currentRow_tFileOutputDelimited_2 = 0;

            final String OUT_DELIM_tFileOutputDelimited_2 = /** Start field tFileOutputDelimited_2:FIELDSEPARATOR */";"/** End field tFileOutputDelimited_2:FIELDSEPARATOR */;

            final String OUT_DELIM_ROWSEP_tFileOutputDelimited_2 = /** Start field tFileOutputDelimited_2:ROWSEPARATOR */"\n"/** End field tFileOutputDelimited_2:ROWSEPARATOR */;

                    //create directory only if not exists
                    if(directory_tFileOutputDelimited_2 != null && directory_tFileOutputDelimited_2.trim().length() != 0) {
                        java.io.File dir_tFileOutputDelimited_2 = new java.io.File(directory_tFileOutputDelimited_2);
                        if(!dir_tFileOutputDelimited_2.exists()) {
                            dir_tFileOutputDelimited_2.mkdirs();
                        }
                    }

                        //routines.system.Row
                        java.io.Writer outtFileOutputDelimited_2 = null;

                        outtFileOutputDelimited_2 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
                        new java.io.FileOutputStream(fileName_tFileOutputDelimited_2, true),"ISO-8859-15"));
                resourceMap.put("out_tFileOutputDelimited_2", outtFileOutputDelimited_2);
                                    if(filetFileOutputDelimited_2.length()==0){
                                        outtFileOutputDelimited_2.write("FECHA_EJECUCION");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("HORA_INICIO");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("HORA_FINAL");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("ESTADO");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("JOBS");
                                        outtFileOutputDelimited_2.write(OUT_DELIM_ROWSEP_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.flush();
                                    }


resourceMap.put("nb_line_tFileOutputDelimited_2", nb_line_tFileOutputDelimited_2);

 



/**
 * [tFileOutputDelimited_2 begin ] stop
 */



	
	/**
	 * [tFixedFlowInput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFixedFlowInput_1", false);
		start_Hash.put("tFixedFlowInput_1", System.currentTimeMillis());
		
	
	currentComponent="tFixedFlowInput_1";
	
	
		int tos_count_tFixedFlowInput_1 = 0;
		

	    for (int i_tFixedFlowInput_1 = 0 ; i_tFixedFlowInput_1 < 1 ; i_tFixedFlowInput_1++) {
	                	            	
    	            		row4.FECHA_EJECUCION = context.FECHA_EJECUCION;
    	            	        	            	
    	            		row4.HORA_INICIO = context.HORA_INICIO;
    	            	        	            	
    	            		row4.HORA_FINAL = context.HORA_FINAL;
    	            	        	            	
    	            		row4.ESTADO = context.ESTADO_EXEC;
    	            	        	            	
    	            		row4.JOBS = context.JOB;
    	            	

 



/**
 * [tFixedFlowInput_1 begin ] stop
 */
	
	/**
	 * [tFixedFlowInput_1 main ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_1";
	
	

 


	tos_count_tFixedFlowInput_1++;

/**
 * [tFixedFlowInput_1 main ] stop
 */
	
	/**
	 * [tFixedFlowInput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_1";
	
	

 



/**
 * [tFixedFlowInput_1 process_data_begin ] stop
 */

	
	/**
	 * [tFileOutputDelimited_2 main ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_2";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row4"
						
						);
					}
					


                    StringBuilder sb_tFileOutputDelimited_2 = new StringBuilder();
                            if(row4.FECHA_EJECUCION != null) {
                        sb_tFileOutputDelimited_2.append(
                            row4.FECHA_EJECUCION
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(row4.HORA_INICIO != null) {
                        sb_tFileOutputDelimited_2.append(
                            row4.HORA_INICIO
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(row4.HORA_FINAL != null) {
                        sb_tFileOutputDelimited_2.append(
                            row4.HORA_FINAL
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(row4.ESTADO != null) {
                        sb_tFileOutputDelimited_2.append(
                            row4.ESTADO
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(row4.JOBS != null) {
                        sb_tFileOutputDelimited_2.append(
                            row4.JOBS
                        );
                            }
                    sb_tFileOutputDelimited_2.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_2);


                    nb_line_tFileOutputDelimited_2++;
                    resourceMap.put("nb_line_tFileOutputDelimited_2", nb_line_tFileOutputDelimited_2);

                        outtFileOutputDelimited_2.write(sb_tFileOutputDelimited_2.toString());




 


	tos_count_tFileOutputDelimited_2++;

/**
 * [tFileOutputDelimited_2 main ] stop
 */
	
	/**
	 * [tFileOutputDelimited_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_2";
	
	

 



/**
 * [tFileOutputDelimited_2 process_data_begin ] stop
 */
	
	/**
	 * [tFileOutputDelimited_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_2";
	
	

 



/**
 * [tFileOutputDelimited_2 process_data_end ] stop
 */



	
	/**
	 * [tFixedFlowInput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_1";
	
	

 



/**
 * [tFixedFlowInput_1 process_data_end ] stop
 */
	
	/**
	 * [tFixedFlowInput_1 end ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_1";
	
	

        }
        globalMap.put("tFixedFlowInput_1_NB_LINE", 1);        

 

ok_Hash.put("tFixedFlowInput_1", true);
end_Hash.put("tFixedFlowInput_1", System.currentTimeMillis());




/**
 * [tFixedFlowInput_1 end ] stop
 */

	
	/**
	 * [tFileOutputDelimited_2 end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_2";
	
	



		
			
					if(outtFileOutputDelimited_2!=null) {
						outtFileOutputDelimited_2.flush();
						outtFileOutputDelimited_2.close();
					}
				
				globalMap.put("tFileOutputDelimited_2_NB_LINE",nb_line_tFileOutputDelimited_2);
				globalMap.put("tFileOutputDelimited_2_FILE_NAME",fileName_tFileOutputDelimited_2);
			
		
		
		resourceMap.put("finish_tFileOutputDelimited_2", true);
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row4");
			  	}
			  	
 

ok_Hash.put("tFileOutputDelimited_2", true);
end_Hash.put("tFileOutputDelimited_2", System.currentTimeMillis());




/**
 * [tFileOutputDelimited_2 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFixedFlowInput_1 finally ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_1";
	
	

 



/**
 * [tFixedFlowInput_1 finally ] stop
 */

	
	/**
	 * [tFileOutputDelimited_2 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_2";
	
	


		if(resourceMap.get("finish_tFileOutputDelimited_2") == null){ 
			
				
						java.io.Writer outtFileOutputDelimited_2 = (java.io.Writer)resourceMap.get("out_tFileOutputDelimited_2");
						if(outtFileOutputDelimited_2!=null) {
							outtFileOutputDelimited_2.flush();
							outtFileOutputDelimited_2.close();
						}
					
				
			
		}
	

 



/**
 * [tFileOutputDelimited_2 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFixedFlowInput_1_SUBPROCESS_STATE", 1);
	}
	
    public String resuming_logs_dir_path = null;
    public String resuming_checkpoint_path = null;
    public String parent_part_launcher = null;
    private String resumeEntryMethodName = null;
    private boolean globalResumeTicket = false;

    public boolean watch = false;
    // portStats is null, it means don't execute the statistics
    public Integer portStats = null;
    public int portTraces = 4334;
    public String clientHost;
    public String defaultClientHost = "localhost";
    public String contextStr = "Default";
    public boolean isDefaultContext = true;
    public String pid = "0";
    public String rootPid = null;
    public String fatherPid = null;
    public String fatherNode = null;
    public long startTime = 0;
    public boolean isChildJob = false;
    public String log4jLevel = "";
    
    private boolean enableLogStash;

    private boolean execStat = true;

    private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
        protected java.util.Map<String, String> initialValue() {
            java.util.Map<String,String> threadRunResultMap = new java.util.HashMap<String, String>();
            threadRunResultMap.put("errorCode", null);
            threadRunResultMap.put("status", "");
            return threadRunResultMap;
        };
    };


    protected PropertiesWithType context_param = new PropertiesWithType();
    public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

    public String status= "";
    
    
    private final static java.util.Properties jobInfo = new java.util.Properties();
    private final static java.util.Map<String,String> mdcInfo = new java.util.HashMap<>();
    private final static java.util.concurrent.atomic.AtomicLong subJobPidCounter = new java.util.concurrent.atomic.AtomicLong();


    public static void main(String[] args){
        final Actas ActasClass = new Actas();

        int exitCode = ActasClass.runJobInTOS(args);

        System.exit(exitCode);
    }
	

	
	
	private void getjobInfo() {
		final String TEMPLATE_PATH = "src/main/templates/jobInfo_template.properties";
		final String BUILD_PATH = "../jobInfo.properties";
		final String path = this.getClass().getResource("").getPath();
		if(path.lastIndexOf("target") > 0) {
			final java.io.File templateFile = new java.io.File(
					path.substring(0, path.lastIndexOf("target")).concat(TEMPLATE_PATH));
			if (templateFile.exists()) {
				readJobInfo(templateFile);
				return;
			}
		}
			readJobInfo(new java.io.File(BUILD_PATH));
	}

    private void readJobInfo(java.io.File jobInfoFile){
	
        if(jobInfoFile.exists()) {
            try (java.io.InputStream is = new java.io.FileInputStream(jobInfoFile)) {
            	jobInfo.load(is);
            } catch (IOException e) {
            	 
                
            }
        }
    }


    public String[][] runJob(String[] args) {

        int exitCode = runJobInTOS(args);
        String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

        return bufferValue;
    }

    public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;
    	
        return hastBufferOutput;
    }

    public int runJobInTOS(String[] args) {
	   	// reset status
	   	status = "";
	   	
        String lastStr = "";
        for (String arg : args) {
            if (arg.equalsIgnoreCase("--context_param")) {
                lastStr = arg;
            } else if (lastStr.equals("")) {
                evalParam(arg);
            } else {
                evalParam(lastStr + " " + arg);
                lastStr = "";
            }
        }
        enableLogStash = "true".equalsIgnoreCase(System.getProperty("audit.enabled"));


		
		

        if(clientHost == null) {
            clientHost = defaultClientHost;
        }

        if(pid == null || "0".equals(pid)) {
            pid = TalendString.getAsciiRandomString(6);
        }


        if (rootPid==null) {
            rootPid = pid;
        }


        if (fatherPid==null) {
            fatherPid = pid;
        }else{
            isChildJob = true;
        }

        if (portStats != null) {
            // portStats = -1; //for testing
            if (portStats < 0 || portStats > 65535) {
                // issue:10869, the portStats is invalid, so this client socket can't open
                System.err.println("The statistics socket port " + portStats + " is invalid.");
                execStat = false;
            }
        } else {
            execStat = false;
        }
        boolean inOSGi = routines.system.BundleUtils.inOSGi();

        try {
            java.util.Dictionary<String, Object> jobProperties = null;
            if (inOSGi) {
                jobProperties = routines.system.BundleUtils.getJobProperties(jobName);
    
                if (jobProperties != null && jobProperties.get("context") != null) {
                    contextStr = (String)jobProperties.get("context");
                }
            }
            //call job/subjob with an existing context, like: --context=production. if without this parameter, there will use the default context instead.
            java.io.InputStream inContext = Actas.class.getClassLoader().getResourceAsStream("acm_actas/actas_0_1/contexts/" + contextStr + ".properties");
            if (inContext == null) {
                inContext = Actas.class.getClassLoader().getResourceAsStream("config/contexts/" + contextStr + ".properties");
            }
            if (inContext != null) {
                try {
                    //defaultProps is in order to keep the original context value
                    if(context != null && context.isEmpty()) {
    	                defaultProps.load(inContext);
    	                if (inOSGi && jobProperties != null) {
                             java.util.Enumeration<String> keys = jobProperties.keys();
                             while (keys.hasMoreElements()) {
                                 String propKey = keys.nextElement();
                                 if (defaultProps.containsKey(propKey)) {
                                     defaultProps.put(propKey, (String) jobProperties.get(propKey));
                                 }
                             }
    	                }
    	                context = new ContextProperties(defaultProps);
                    }
                } finally {
                    inContext.close();
                }
            } else if (!isDefaultContext) {
                //print info and job continue to run, for case: context_param is not empty.
                System.err.println("Could not find the context " + contextStr);
            }
            
            if(!context_param.isEmpty()) {
                context.putAll(context_param);
				//set types for params from parentJobs
				for (Object key: context_param.keySet()){
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
            }
            class ContextProcessing {
                private void processContext_0() {
                        context.setContextType("ACTA_ID", "id_BigDecimal");
                        if(context.getStringValue("ACTA_ID") == null) {
                            context.ACTA_ID = null;
                        } else {
                            try{
                                context.ACTA_ID=routines.system.ParserUtils.parseTo_BigDecimal (context.getProperty("ACTA_ID"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "ACTA_ID", e.getMessage()));
                                context.ACTA_ID=null;
                            }
                        }
                        context.setContextType("CIUDAD", "id_String");
                        if(context.getStringValue("CIUDAD") == null) {
                            context.CIUDAD = null;
                        } else {
                            context.CIUDAD=(String) context.getProperty("CIUDAD");
                        }
                        context.setContextType("CONTADOR", "id_Integer");
                        if(context.getStringValue("CONTADOR") == null) {
                            context.CONTADOR = null;
                        } else {
                            try{
                                context.CONTADOR=routines.system.ParserUtils.parseTo_Integer (context.getProperty("CONTADOR"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "CONTADOR", e.getMessage()));
                                context.CONTADOR=null;
                            }
                        }
                        context.setContextType("DOCUMENTO", "id_String");
                        if(context.getStringValue("DOCUMENTO") == null) {
                            context.DOCUMENTO = null;
                        } else {
                            context.DOCUMENTO=(String) context.getProperty("DOCUMENTO");
                        }
                        context.setContextType("ESTABLECIMIENTO", "id_String");
                        if(context.getStringValue("ESTABLECIMIENTO") == null) {
                            context.ESTABLECIMIENTO = null;
                        } else {
                            context.ESTABLECIMIENTO=(String) context.getProperty("ESTABLECIMIENTO");
                        }
                        context.setContextType("FACTURA_ID", "id_BigDecimal");
                        if(context.getStringValue("FACTURA_ID") == null) {
                            context.FACTURA_ID = null;
                        } else {
                            try{
                                context.FACTURA_ID=routines.system.ParserUtils.parseTo_BigDecimal (context.getProperty("FACTURA_ID"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "FACTURA_ID", e.getMessage()));
                                context.FACTURA_ID=null;
                            }
                        }
                        context.setContextType("FECHA_HORA_FIN_EJECUCION", "id_Date");
                        if(context.getStringValue("FECHA_HORA_FIN_EJECUCION") == null) {
                            context.FECHA_HORA_FIN_EJECUCION = null;
                        } else {
                            String context_FECHA_HORA_FIN_EJECUCION_value = context.getProperty("FECHA_HORA_FIN_EJECUCION");
                            try{
                                if (context_FECHA_HORA_FIN_EJECUCION_value == null){
                                    context_FECHA_HORA_FIN_EJECUCION_value = "";
                                }
                                int context_FECHA_HORA_FIN_EJECUCION_pos = context_FECHA_HORA_FIN_EJECUCION_value.indexOf(";");
                                String context_FECHA_HORA_FIN_EJECUCION_pattern =  "yyyy-MM-dd HH:mm:ss";
                                if(context_FECHA_HORA_FIN_EJECUCION_pos > -1){
                                    context_FECHA_HORA_FIN_EJECUCION_pattern = context_FECHA_HORA_FIN_EJECUCION_value.substring(0, context_FECHA_HORA_FIN_EJECUCION_pos);
                                    context_FECHA_HORA_FIN_EJECUCION_value = context_FECHA_HORA_FIN_EJECUCION_value.substring(context_FECHA_HORA_FIN_EJECUCION_pos + 1);
                                }

                                context.FECHA_HORA_FIN_EJECUCION=(java.util.Date)(new java.text.SimpleDateFormat(context_FECHA_HORA_FIN_EJECUCION_pattern).parse(context_FECHA_HORA_FIN_EJECUCION_value));

                            } catch(ParseException e) {
                                try { 
                                    long context_FECHA_HORA_FIN_EJECUCION_longValue = Long.valueOf(context_FECHA_HORA_FIN_EJECUCION_value);
                                    context.FECHA_HORA_FIN_EJECUCION = new java.util.Date(context_FECHA_HORA_FIN_EJECUCION_longValue);
                                } catch (NumberFormatException cantParseToLongException) {
                                        System.err.println(String.format("Null value will be used for context parameter %s: %s", "FECHA_HORA_FIN_EJECUCION", "Can't parse date string: " + e.getMessage() + " and long: " + cantParseToLongException.getMessage()));
                                    context.FECHA_HORA_FIN_EJECUCION=null;
                                }
                            }
                        }
                        context.setContextType("FECHA_HORA_INICIO_EJECUCION", "id_Date");
                        if(context.getStringValue("FECHA_HORA_INICIO_EJECUCION") == null) {
                            context.FECHA_HORA_INICIO_EJECUCION = null;
                        } else {
                            String context_FECHA_HORA_INICIO_EJECUCION_value = context.getProperty("FECHA_HORA_INICIO_EJECUCION");
                            try{
                                if (context_FECHA_HORA_INICIO_EJECUCION_value == null){
                                    context_FECHA_HORA_INICIO_EJECUCION_value = "";
                                }
                                int context_FECHA_HORA_INICIO_EJECUCION_pos = context_FECHA_HORA_INICIO_EJECUCION_value.indexOf(";");
                                String context_FECHA_HORA_INICIO_EJECUCION_pattern =  "yyyy-MM-dd HH:mm:ss";
                                if(context_FECHA_HORA_INICIO_EJECUCION_pos > -1){
                                    context_FECHA_HORA_INICIO_EJECUCION_pattern = context_FECHA_HORA_INICIO_EJECUCION_value.substring(0, context_FECHA_HORA_INICIO_EJECUCION_pos);
                                    context_FECHA_HORA_INICIO_EJECUCION_value = context_FECHA_HORA_INICIO_EJECUCION_value.substring(context_FECHA_HORA_INICIO_EJECUCION_pos + 1);
                                }

                                context.FECHA_HORA_INICIO_EJECUCION=(java.util.Date)(new java.text.SimpleDateFormat(context_FECHA_HORA_INICIO_EJECUCION_pattern).parse(context_FECHA_HORA_INICIO_EJECUCION_value));

                            } catch(ParseException e) {
                                try { 
                                    long context_FECHA_HORA_INICIO_EJECUCION_longValue = Long.valueOf(context_FECHA_HORA_INICIO_EJECUCION_value);
                                    context.FECHA_HORA_INICIO_EJECUCION = new java.util.Date(context_FECHA_HORA_INICIO_EJECUCION_longValue);
                                } catch (NumberFormatException cantParseToLongException) {
                                        System.err.println(String.format("Null value will be used for context parameter %s: %s", "FECHA_HORA_INICIO_EJECUCION", "Can't parse date string: " + e.getMessage() + " and long: " + cantParseToLongException.getMessage()));
                                    context.FECHA_HORA_INICIO_EJECUCION=null;
                                }
                            }
                        }
                        context.setContextType("HAUDITORIA_ID", "id_String");
                        if(context.getStringValue("HAUDITORIA_ID") == null) {
                            context.HAUDITORIA_ID = null;
                        } else {
                            context.HAUDITORIA_ID=(String) context.getProperty("HAUDITORIA_ID");
                        }
                        context.setContextType("ID", "id_BigDecimal");
                        if(context.getStringValue("ID") == null) {
                            context.ID = null;
                        } else {
                            try{
                                context.ID=routines.system.ParserUtils.parseTo_BigDecimal (context.getProperty("ID"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "ID", e.getMessage()));
                                context.ID=null;
                            }
                        }
                        context.setContextType("NOMBRE_ACTA", "id_String");
                        if(context.getStringValue("NOMBRE_ACTA") == null) {
                            context.NOMBRE_ACTA = null;
                        } else {
                            context.NOMBRE_ACTA=(String) context.getProperty("NOMBRE_ACTA");
                        }
                        context.setContextType("RECEPCION_ID", "id_String");
                        if(context.getStringValue("RECEPCION_ID") == null) {
                            context.RECEPCION_ID = null;
                        } else {
                            context.RECEPCION_ID=(String) context.getProperty("RECEPCION_ID");
                        }
                        context.setContextType("SIGLA", "id_String");
                        if(context.getStringValue("SIGLA") == null) {
                            context.SIGLA = null;
                        } else {
                            context.SIGLA=(String) context.getProperty("SIGLA");
                        }
                        context.setContextType("SUMADOR_NETO", "id_BigDecimal");
                        if(context.getStringValue("SUMADOR_NETO") == null) {
                            context.SUMADOR_NETO = null;
                        } else {
                            try{
                                context.SUMADOR_NETO=routines.system.ParserUtils.parseTo_BigDecimal (context.getProperty("SUMADOR_NETO"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "SUMADOR_NETO", e.getMessage()));
                                context.SUMADOR_NETO=null;
                            }
                        }
                        context.setContextType("TACTA", "id_String");
                        if(context.getStringValue("TACTA") == null) {
                            context.TACTA = null;
                        } else {
                            context.TACTA=(String) context.getProperty("TACTA");
                        }
                        context.setContextType("TDOCUMENTO", "id_BigDecimal");
                        if(context.getStringValue("TDOCUMENTO") == null) {
                            context.TDOCUMENTO = null;
                        } else {
                            try{
                                context.TDOCUMENTO=routines.system.ParserUtils.parseTo_BigDecimal (context.getProperty("TDOCUMENTO"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "TDOCUMENTO", e.getMessage()));
                                context.TDOCUMENTO=null;
                            }
                        }
                        context.setContextType("USUARIO", "id_String");
                        if(context.getStringValue("USUARIO") == null) {
                            context.USUARIO = null;
                        } else {
                            context.USUARIO=(String) context.getProperty("USUARIO");
                        }
                        context.setContextType("VACEPTADO", "id_BigDecimal");
                        if(context.getStringValue("VACEPTADO") == null) {
                            context.VACEPTADO = null;
                        } else {
                            try{
                                context.VACEPTADO=routines.system.ParserUtils.parseTo_BigDecimal (context.getProperty("VACEPTADO"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "VACEPTADO", e.getMessage()));
                                context.VACEPTADO=null;
                            }
                        }
                        context.setContextType("VCOBRADO", "id_BigDecimal");
                        if(context.getStringValue("VCOBRADO") == null) {
                            context.VCOBRADO = null;
                        } else {
                            try{
                                context.VCOBRADO=routines.system.ParserUtils.parseTo_BigDecimal (context.getProperty("VCOBRADO"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "VCOBRADO", e.getMessage()));
                                context.VCOBRADO=null;
                            }
                        }
                        context.setContextType("VFACTURADO", "id_BigDecimal");
                        if(context.getStringValue("VFACTURADO") == null) {
                            context.VFACTURADO = null;
                        } else {
                            try{
                                context.VFACTURADO=routines.system.ParserUtils.parseTo_BigDecimal (context.getProperty("VFACTURADO"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "VFACTURADO", e.getMessage()));
                                context.VFACTURADO=null;
                            }
                        }
                        context.setContextType("VGLOSADO", "id_BigDecimal");
                        if(context.getStringValue("VGLOSADO") == null) {
                            context.VGLOSADO = null;
                        } else {
                            try{
                                context.VGLOSADO=routines.system.ParserUtils.parseTo_BigDecimal (context.getProperty("VGLOSADO"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "VGLOSADO", e.getMessage()));
                                context.VGLOSADO=null;
                            }
                        }
                        context.setContextType("VNETO", "id_BigDecimal");
                        if(context.getStringValue("VNETO") == null) {
                            context.VNETO = null;
                        } else {
                            try{
                                context.VNETO=routines.system.ParserUtils.parseTo_BigDecimal (context.getProperty("VNETO"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "VNETO", e.getMessage()));
                                context.VNETO=null;
                            }
                        }
                        context.setContextType("VRATIFICADA", "id_BigDecimal");
                        if(context.getStringValue("VRATIFICADA") == null) {
                            context.VRATIFICADA = null;
                        } else {
                            try{
                                context.VRATIFICADA=routines.system.ParserUtils.parseTo_BigDecimal (context.getProperty("VRATIFICADA"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "VRATIFICADA", e.getMessage()));
                                context.VRATIFICADA=null;
                            }
                        }
                        context.setContextType("VSOPORTADO", "id_BigDecimal");
                        if(context.getStringValue("VSOPORTADO") == null) {
                            context.VSOPORTADO = null;
                        } else {
                            try{
                                context.VSOPORTADO=routines.system.ParserUtils.parseTo_BigDecimal (context.getProperty("VSOPORTADO"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "VSOPORTADO", e.getMessage()));
                                context.VSOPORTADO=null;
                            }
                        }
                        context.setContextType("db_origen_AdditionalParams", "id_String");
                        if(context.getStringValue("db_origen_AdditionalParams") == null) {
                            context.db_origen_AdditionalParams = null;
                        } else {
                            context.db_origen_AdditionalParams=(String) context.getProperty("db_origen_AdditionalParams");
                        }
                        context.setContextType("db_origen_Login", "id_String");
                        if(context.getStringValue("db_origen_Login") == null) {
                            context.db_origen_Login = null;
                        } else {
                            context.db_origen_Login=(String) context.getProperty("db_origen_Login");
                        }
                        context.setContextType("db_origen_Password", "id_Password");
                        if(context.getStringValue("db_origen_Password") == null) {
                            context.db_origen_Password = null;
                        } else {
                            String pwd_db_origen_Password_value = context.getProperty("db_origen_Password");
                            context.db_origen_Password = null;
                            if(pwd_db_origen_Password_value!=null) {
                                if(context_param.containsKey("db_origen_Password")) {//no need to decrypt if it come from program argument or parent job runtime
                                    context.db_origen_Password = pwd_db_origen_Password_value;
                                } else if (!pwd_db_origen_Password_value.isEmpty()) {
                                    try {
                                        context.db_origen_Password = routines.system.PasswordEncryptUtil.decryptPassword(pwd_db_origen_Password_value);
                                        context.put("db_origen_Password",context.db_origen_Password);
                                    } catch (java.lang.RuntimeException e) {
                                        //do nothing
                                    }
                                }
                            }
                        }
                        context.setContextType("db_origen_Port", "id_String");
                        if(context.getStringValue("db_origen_Port") == null) {
                            context.db_origen_Port = null;
                        } else {
                            context.db_origen_Port=(String) context.getProperty("db_origen_Port");
                        }
                        context.setContextType("db_origen_Schema", "id_String");
                        if(context.getStringValue("db_origen_Schema") == null) {
                            context.db_origen_Schema = null;
                        } else {
                            context.db_origen_Schema=(String) context.getProperty("db_origen_Schema");
                        }
                        context.setContextType("db_origen_Server", "id_String");
                        if(context.getStringValue("db_origen_Server") == null) {
                            context.db_origen_Server = null;
                        } else {
                            context.db_origen_Server=(String) context.getProperty("db_origen_Server");
                        }
                        context.setContextType("db_origen_ServiceName", "id_String");
                        if(context.getStringValue("db_origen_ServiceName") == null) {
                            context.db_origen_ServiceName = null;
                        } else {
                            context.db_origen_ServiceName=(String) context.getProperty("db_origen_ServiceName");
                        }
                        context.setContextType("db_destino_AdditionalParams", "id_String");
                        if(context.getStringValue("db_destino_AdditionalParams") == null) {
                            context.db_destino_AdditionalParams = null;
                        } else {
                            context.db_destino_AdditionalParams=(String) context.getProperty("db_destino_AdditionalParams");
                        }
                        context.setContextType("db_destino_Login", "id_String");
                        if(context.getStringValue("db_destino_Login") == null) {
                            context.db_destino_Login = null;
                        } else {
                            context.db_destino_Login=(String) context.getProperty("db_destino_Login");
                        }
                        context.setContextType("db_destino_Password", "id_Password");
                        if(context.getStringValue("db_destino_Password") == null) {
                            context.db_destino_Password = null;
                        } else {
                            String pwd_db_destino_Password_value = context.getProperty("db_destino_Password");
                            context.db_destino_Password = null;
                            if(pwd_db_destino_Password_value!=null) {
                                if(context_param.containsKey("db_destino_Password")) {//no need to decrypt if it come from program argument or parent job runtime
                                    context.db_destino_Password = pwd_db_destino_Password_value;
                                } else if (!pwd_db_destino_Password_value.isEmpty()) {
                                    try {
                                        context.db_destino_Password = routines.system.PasswordEncryptUtil.decryptPassword(pwd_db_destino_Password_value);
                                        context.put("db_destino_Password",context.db_destino_Password);
                                    } catch (java.lang.RuntimeException e) {
                                        //do nothing
                                    }
                                }
                            }
                        }
                        context.setContextType("db_destino_Port", "id_String");
                        if(context.getStringValue("db_destino_Port") == null) {
                            context.db_destino_Port = null;
                        } else {
                            context.db_destino_Port=(String) context.getProperty("db_destino_Port");
                        }
                        context.setContextType("db_destino_Schema", "id_String");
                        if(context.getStringValue("db_destino_Schema") == null) {
                            context.db_destino_Schema = null;
                        } else {
                            context.db_destino_Schema=(String) context.getProperty("db_destino_Schema");
                        }
                        context.setContextType("db_destino_Server", "id_String");
                        if(context.getStringValue("db_destino_Server") == null) {
                            context.db_destino_Server = null;
                        } else {
                            context.db_destino_Server=(String) context.getProperty("db_destino_Server");
                        }
                        context.setContextType("db_destino_ServiceName", "id_String");
                        if(context.getStringValue("db_destino_ServiceName") == null) {
                            context.db_destino_ServiceName = null;
                        } else {
                            context.db_destino_ServiceName=(String) context.getProperty("db_destino_ServiceName");
                        }
                        context.setContextType("archivoSalida", "id_String");
                        if(context.getStringValue("archivoSalida") == null) {
                            context.archivoSalida = null;
                        } else {
                            context.archivoSalida=(String) context.getProperty("archivoSalida");
                        }
                        context.setContextType("fileSystem_Area", "id_String");
                        if(context.getStringValue("fileSystem_Area") == null) {
                            context.fileSystem_Area = null;
                        } else {
                            context.fileSystem_Area=(String) context.getProperty("fileSystem_Area");
                        }
                        context.setContextType("fileSystem_Path", "id_String");
                        if(context.getStringValue("fileSystem_Path") == null) {
                            context.fileSystem_Path = null;
                        } else {
                            context.fileSystem_Path=(String) context.getProperty("fileSystem_Path");
                        }
                        context.setContextType("fileSystem_Report", "id_String");
                        if(context.getStringValue("fileSystem_Report") == null) {
                            context.fileSystem_Report = null;
                        } else {
                            context.fileSystem_Report=(String) context.getProperty("fileSystem_Report");
                        }
                        context.setContextType("fileSystem_URL", "id_String");
                        if(context.getStringValue("fileSystem_URL") == null) {
                            context.fileSystem_URL = null;
                        } else {
                            context.fileSystem_URL=(String) context.getProperty("fileSystem_URL");
                        }
                        context.setContextType("ACTUALIZACION_TOTAL", "id_Boolean");
                        if(context.getStringValue("ACTUALIZACION_TOTAL") == null) {
                            context.ACTUALIZACION_TOTAL = null;
                        } else {
                            try{
                                context.ACTUALIZACION_TOTAL=routines.system.ParserUtils.parseTo_Boolean (context.getProperty("ACTUALIZACION_TOTAL"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "ACTUALIZACION_TOTAL", e.getMessage()));
                                context.ACTUALIZACION_TOTAL=null;
                            }
                        }
                        context.setContextType("BODEGA", "id_String");
                        if(context.getStringValue("BODEGA") == null) {
                            context.BODEGA = null;
                        } else {
                            context.BODEGA=(String) context.getProperty("BODEGA");
                        }
                        context.setContextType("ERROR", "id_String");
                        if(context.getStringValue("ERROR") == null) {
                            context.ERROR = null;
                        } else {
                            context.ERROR=(String) context.getProperty("ERROR");
                        }
                        context.setContextType("ESTADO", "id_String");
                        if(context.getStringValue("ESTADO") == null) {
                            context.ESTADO = null;
                        } else {
                            context.ESTADO=(String) context.getProperty("ESTADO");
                        }
                        context.setContextType("ESTADO_EXEC", "id_String");
                        if(context.getStringValue("ESTADO_EXEC") == null) {
                            context.ESTADO_EXEC = null;
                        } else {
                            context.ESTADO_EXEC=(String) context.getProperty("ESTADO_EXEC");
                        }
                        context.setContextType("FANTERIOR", "id_String");
                        if(context.getStringValue("FANTERIOR") == null) {
                            context.FANTERIOR = null;
                        } else {
                            context.FANTERIOR=(String) context.getProperty("FANTERIOR");
                        }
                        context.setContextType("FECHA_EJECUCION", "id_String");
                        if(context.getStringValue("FECHA_EJECUCION") == null) {
                            context.FECHA_EJECUCION = null;
                        } else {
                            context.FECHA_EJECUCION=(String) context.getProperty("FECHA_EJECUCION");
                        }
                        context.setContextType("FECHA_TERMINACION", "id_String");
                        if(context.getStringValue("FECHA_TERMINACION") == null) {
                            context.FECHA_TERMINACION = null;
                        } else {
                            context.FECHA_TERMINACION=(String) context.getProperty("FECHA_TERMINACION");
                        }
                        context.setContextType("HORA", "id_Integer");
                        if(context.getStringValue("HORA") == null) {
                            context.HORA = null;
                        } else {
                            try{
                                context.HORA=routines.system.ParserUtils.parseTo_Integer (context.getProperty("HORA"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "HORA", e.getMessage()));
                                context.HORA=null;
                            }
                        }
                        context.setContextType("HORA_FINAL", "id_String");
                        if(context.getStringValue("HORA_FINAL") == null) {
                            context.HORA_FINAL = null;
                        } else {
                            context.HORA_FINAL=(String) context.getProperty("HORA_FINAL");
                        }
                        context.setContextType("HORA_INICIO", "id_String");
                        if(context.getStringValue("HORA_INICIO") == null) {
                            context.HORA_INICIO = null;
                        } else {
                            context.HORA_INICIO=(String) context.getProperty("HORA_INICIO");
                        }
                        context.setContextType("ID_SOLICITUD", "id_Integer");
                        if(context.getStringValue("ID_SOLICITUD") == null) {
                            context.ID_SOLICITUD = null;
                        } else {
                            try{
                                context.ID_SOLICITUD=routines.system.ParserUtils.parseTo_Integer (context.getProperty("ID_SOLICITUD"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "ID_SOLICITUD", e.getMessage()));
                                context.ID_SOLICITUD=null;
                            }
                        }
                        context.setContextType("JOB", "id_String");
                        if(context.getStringValue("JOB") == null) {
                            context.JOB = null;
                        } else {
                            context.JOB=(String) context.getProperty("JOB");
                        }
                        context.setContextType("LAST_DAYS", "id_Integer");
                        if(context.getStringValue("LAST_DAYS") == null) {
                            context.LAST_DAYS = null;
                        } else {
                            try{
                                context.LAST_DAYS=routines.system.ParserUtils.parseTo_Integer (context.getProperty("LAST_DAYS"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "LAST_DAYS", e.getMessage()));
                                context.LAST_DAYS=null;
                            }
                        }
                        context.setContextType("LOGS_ERROR", "id_String");
                        if(context.getStringValue("LOGS_ERROR") == null) {
                            context.LOGS_ERROR = null;
                        } else {
                            context.LOGS_ERROR=(String) context.getProperty("LOGS_ERROR");
                        }
                        context.setContextType("LOGS_EXECUTION", "id_String");
                        if(context.getStringValue("LOGS_EXECUTION") == null) {
                            context.LOGS_EXECUTION = null;
                        } else {
                            context.LOGS_EXECUTION=(String) context.getProperty("LOGS_EXECUTION");
                        }
                        context.setContextType("MINUTOS", "id_Integer");
                        if(context.getStringValue("MINUTOS") == null) {
                            context.MINUTOS = null;
                        } else {
                            try{
                                context.MINUTOS=routines.system.ParserUtils.parseTo_Integer (context.getProperty("MINUTOS"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "MINUTOS", e.getMessage()));
                                context.MINUTOS=null;
                            }
                        }
                        context.setContextType("ORIGEN", "id_String");
                        if(context.getStringValue("ORIGEN") == null) {
                            context.ORIGEN = null;
                        } else {
                            context.ORIGEN=(String) context.getProperty("ORIGEN");
                        }
                        context.setContextType("PATH", "id_String");
                        if(context.getStringValue("PATH") == null) {
                            context.PATH = null;
                        } else {
                            context.PATH=(String) context.getProperty("PATH");
                        }
                        context.setContextType("JasperAmbiente", "id_String");
                        if(context.getStringValue("JasperAmbiente") == null) {
                            context.JasperAmbiente = null;
                        } else {
                            context.JasperAmbiente=(String) context.getProperty("JasperAmbiente");
                        }
                        context.setContextType("JasperModulo", "id_String");
                        if(context.getStringValue("JasperModulo") == null) {
                            context.JasperModulo = null;
                        } else {
                            context.JasperModulo=(String) context.getProperty("JasperModulo");
                        }
                        context.setContextType("JasperParameters", "id_String");
                        if(context.getStringValue("JasperParameters") == null) {
                            context.JasperParameters = null;
                        } else {
                            context.JasperParameters=(String) context.getProperty("JasperParameters");
                        }
                        context.setContextType("JasperPassword", "id_String");
                        if(context.getStringValue("JasperPassword") == null) {
                            context.JasperPassword = null;
                        } else {
                            context.JasperPassword=(String) context.getProperty("JasperPassword");
                        }
                        context.setContextType("JasperReporte", "id_String");
                        if(context.getStringValue("JasperReporte") == null) {
                            context.JasperReporte = null;
                        } else {
                            context.JasperReporte=(String) context.getProperty("JasperReporte");
                        }
                        context.setContextType("JasperServer", "id_String");
                        if(context.getStringValue("JasperServer") == null) {
                            context.JasperServer = null;
                        } else {
                            context.JasperServer=(String) context.getProperty("JasperServer");
                        }
                        context.setContextType("JasperURI", "id_String");
                        if(context.getStringValue("JasperURI") == null) {
                            context.JasperURI = null;
                        } else {
                            context.JasperURI=(String) context.getProperty("JasperURI");
                        }
                        context.setContextType("JasperUser", "id_String");
                        if(context.getStringValue("JasperUser") == null) {
                            context.JasperUser = null;
                        } else {
                            context.JasperUser=(String) context.getProperty("JasperUser");
                        }
                        context.setContextType("mail_Message", "id_String");
                        if(context.getStringValue("mail_Message") == null) {
                            context.mail_Message = null;
                        } else {
                            context.mail_Message=(String) context.getProperty("mail_Message");
                        }
                        context.setContextType("mail_Password", "id_Password");
                        if(context.getStringValue("mail_Password") == null) {
                            context.mail_Password = null;
                        } else {
                            String pwd_mail_Password_value = context.getProperty("mail_Password");
                            context.mail_Password = null;
                            if(pwd_mail_Password_value!=null) {
                                if(context_param.containsKey("mail_Password")) {//no need to decrypt if it come from program argument or parent job runtime
                                    context.mail_Password = pwd_mail_Password_value;
                                } else if (!pwd_mail_Password_value.isEmpty()) {
                                    try {
                                        context.mail_Password = routines.system.PasswordEncryptUtil.decryptPassword(pwd_mail_Password_value);
                                        context.put("mail_Password",context.mail_Password);
                                    } catch (java.lang.RuntimeException e) {
                                        //do nothing
                                    }
                                }
                            }
                        }
                        context.setContextType("mail_Sendername", "id_String");
                        if(context.getStringValue("mail_Sendername") == null) {
                            context.mail_Sendername = null;
                        } else {
                            context.mail_Sendername=(String) context.getProperty("mail_Sendername");
                        }
                        context.setContextType("mail_SMTP_Host", "id_String");
                        if(context.getStringValue("mail_SMTP_Host") == null) {
                            context.mail_SMTP_Host = null;
                        } else {
                            context.mail_SMTP_Host=(String) context.getProperty("mail_SMTP_Host");
                        }
                        context.setContextType("mail_SMTP_Port", "id_String");
                        if(context.getStringValue("mail_SMTP_Port") == null) {
                            context.mail_SMTP_Port = null;
                        } else {
                            context.mail_SMTP_Port=(String) context.getProperty("mail_SMTP_Port");
                        }
                        context.setContextType("mail_Subject", "id_String");
                        if(context.getStringValue("mail_Subject") == null) {
                            context.mail_Subject = null;
                        } else {
                            context.mail_Subject=(String) context.getProperty("mail_Subject");
                        }
                        context.setContextType("mail_To", "id_String");
                        if(context.getStringValue("mail_To") == null) {
                            context.mail_To = null;
                        } else {
                            context.mail_To=(String) context.getProperty("mail_To");
                        }
                        context.setContextType("mail_User", "id_String");
                        if(context.getStringValue("mail_User") == null) {
                            context.mail_User = null;
                        } else {
                            context.mail_User=(String) context.getProperty("mail_User");
                        }
                } 
                public void processAllContext() {
                        processContext_0();
                }
            }

            new ContextProcessing().processAllContext();
        } catch (java.io.IOException ie) {
            System.err.println("Could not load context "+contextStr);
            ie.printStackTrace();
        }

        // get context value from parent directly
        if (parentContextMap != null && !parentContextMap.isEmpty()) {if (parentContextMap.containsKey("ACTA_ID")) {
                context.ACTA_ID = (BigDecimal) parentContextMap.get("ACTA_ID");
            }if (parentContextMap.containsKey("CIUDAD")) {
                context.CIUDAD = (String) parentContextMap.get("CIUDAD");
            }if (parentContextMap.containsKey("CONTADOR")) {
                context.CONTADOR = (Integer) parentContextMap.get("CONTADOR");
            }if (parentContextMap.containsKey("DOCUMENTO")) {
                context.DOCUMENTO = (String) parentContextMap.get("DOCUMENTO");
            }if (parentContextMap.containsKey("ESTABLECIMIENTO")) {
                context.ESTABLECIMIENTO = (String) parentContextMap.get("ESTABLECIMIENTO");
            }if (parentContextMap.containsKey("FACTURA_ID")) {
                context.FACTURA_ID = (BigDecimal) parentContextMap.get("FACTURA_ID");
            }if (parentContextMap.containsKey("FECHA_HORA_FIN_EJECUCION")) {
                context.FECHA_HORA_FIN_EJECUCION = (java.util.Date) parentContextMap.get("FECHA_HORA_FIN_EJECUCION");
            }if (parentContextMap.containsKey("FECHA_HORA_INICIO_EJECUCION")) {
                context.FECHA_HORA_INICIO_EJECUCION = (java.util.Date) parentContextMap.get("FECHA_HORA_INICIO_EJECUCION");
            }if (parentContextMap.containsKey("HAUDITORIA_ID")) {
                context.HAUDITORIA_ID = (String) parentContextMap.get("HAUDITORIA_ID");
            }if (parentContextMap.containsKey("ID")) {
                context.ID = (BigDecimal) parentContextMap.get("ID");
            }if (parentContextMap.containsKey("NOMBRE_ACTA")) {
                context.NOMBRE_ACTA = (String) parentContextMap.get("NOMBRE_ACTA");
            }if (parentContextMap.containsKey("RECEPCION_ID")) {
                context.RECEPCION_ID = (String) parentContextMap.get("RECEPCION_ID");
            }if (parentContextMap.containsKey("SIGLA")) {
                context.SIGLA = (String) parentContextMap.get("SIGLA");
            }if (parentContextMap.containsKey("SUMADOR_NETO")) {
                context.SUMADOR_NETO = (BigDecimal) parentContextMap.get("SUMADOR_NETO");
            }if (parentContextMap.containsKey("TACTA")) {
                context.TACTA = (String) parentContextMap.get("TACTA");
            }if (parentContextMap.containsKey("TDOCUMENTO")) {
                context.TDOCUMENTO = (BigDecimal) parentContextMap.get("TDOCUMENTO");
            }if (parentContextMap.containsKey("USUARIO")) {
                context.USUARIO = (String) parentContextMap.get("USUARIO");
            }if (parentContextMap.containsKey("VACEPTADO")) {
                context.VACEPTADO = (BigDecimal) parentContextMap.get("VACEPTADO");
            }if (parentContextMap.containsKey("VCOBRADO")) {
                context.VCOBRADO = (BigDecimal) parentContextMap.get("VCOBRADO");
            }if (parentContextMap.containsKey("VFACTURADO")) {
                context.VFACTURADO = (BigDecimal) parentContextMap.get("VFACTURADO");
            }if (parentContextMap.containsKey("VGLOSADO")) {
                context.VGLOSADO = (BigDecimal) parentContextMap.get("VGLOSADO");
            }if (parentContextMap.containsKey("VNETO")) {
                context.VNETO = (BigDecimal) parentContextMap.get("VNETO");
            }if (parentContextMap.containsKey("VRATIFICADA")) {
                context.VRATIFICADA = (BigDecimal) parentContextMap.get("VRATIFICADA");
            }if (parentContextMap.containsKey("VSOPORTADO")) {
                context.VSOPORTADO = (BigDecimal) parentContextMap.get("VSOPORTADO");
            }if (parentContextMap.containsKey("db_origen_AdditionalParams")) {
                context.db_origen_AdditionalParams = (String) parentContextMap.get("db_origen_AdditionalParams");
            }if (parentContextMap.containsKey("db_origen_Login")) {
                context.db_origen_Login = (String) parentContextMap.get("db_origen_Login");
            }if (parentContextMap.containsKey("db_origen_Password")) {
                context.db_origen_Password = (java.lang.String) parentContextMap.get("db_origen_Password");
            }if (parentContextMap.containsKey("db_origen_Port")) {
                context.db_origen_Port = (String) parentContextMap.get("db_origen_Port");
            }if (parentContextMap.containsKey("db_origen_Schema")) {
                context.db_origen_Schema = (String) parentContextMap.get("db_origen_Schema");
            }if (parentContextMap.containsKey("db_origen_Server")) {
                context.db_origen_Server = (String) parentContextMap.get("db_origen_Server");
            }if (parentContextMap.containsKey("db_origen_ServiceName")) {
                context.db_origen_ServiceName = (String) parentContextMap.get("db_origen_ServiceName");
            }if (parentContextMap.containsKey("db_destino_AdditionalParams")) {
                context.db_destino_AdditionalParams = (String) parentContextMap.get("db_destino_AdditionalParams");
            }if (parentContextMap.containsKey("db_destino_Login")) {
                context.db_destino_Login = (String) parentContextMap.get("db_destino_Login");
            }if (parentContextMap.containsKey("db_destino_Password")) {
                context.db_destino_Password = (java.lang.String) parentContextMap.get("db_destino_Password");
            }if (parentContextMap.containsKey("db_destino_Port")) {
                context.db_destino_Port = (String) parentContextMap.get("db_destino_Port");
            }if (parentContextMap.containsKey("db_destino_Schema")) {
                context.db_destino_Schema = (String) parentContextMap.get("db_destino_Schema");
            }if (parentContextMap.containsKey("db_destino_Server")) {
                context.db_destino_Server = (String) parentContextMap.get("db_destino_Server");
            }if (parentContextMap.containsKey("db_destino_ServiceName")) {
                context.db_destino_ServiceName = (String) parentContextMap.get("db_destino_ServiceName");
            }if (parentContextMap.containsKey("archivoSalida")) {
                context.archivoSalida = (String) parentContextMap.get("archivoSalida");
            }if (parentContextMap.containsKey("fileSystem_Area")) {
                context.fileSystem_Area = (String) parentContextMap.get("fileSystem_Area");
            }if (parentContextMap.containsKey("fileSystem_Path")) {
                context.fileSystem_Path = (String) parentContextMap.get("fileSystem_Path");
            }if (parentContextMap.containsKey("fileSystem_Report")) {
                context.fileSystem_Report = (String) parentContextMap.get("fileSystem_Report");
            }if (parentContextMap.containsKey("fileSystem_URL")) {
                context.fileSystem_URL = (String) parentContextMap.get("fileSystem_URL");
            }if (parentContextMap.containsKey("ACTUALIZACION_TOTAL")) {
                context.ACTUALIZACION_TOTAL = (Boolean) parentContextMap.get("ACTUALIZACION_TOTAL");
            }if (parentContextMap.containsKey("BODEGA")) {
                context.BODEGA = (String) parentContextMap.get("BODEGA");
            }if (parentContextMap.containsKey("ERROR")) {
                context.ERROR = (String) parentContextMap.get("ERROR");
            }if (parentContextMap.containsKey("ESTADO")) {
                context.ESTADO = (String) parentContextMap.get("ESTADO");
            }if (parentContextMap.containsKey("ESTADO_EXEC")) {
                context.ESTADO_EXEC = (String) parentContextMap.get("ESTADO_EXEC");
            }if (parentContextMap.containsKey("FANTERIOR")) {
                context.FANTERIOR = (String) parentContextMap.get("FANTERIOR");
            }if (parentContextMap.containsKey("FECHA_EJECUCION")) {
                context.FECHA_EJECUCION = (String) parentContextMap.get("FECHA_EJECUCION");
            }if (parentContextMap.containsKey("FECHA_TERMINACION")) {
                context.FECHA_TERMINACION = (String) parentContextMap.get("FECHA_TERMINACION");
            }if (parentContextMap.containsKey("HORA")) {
                context.HORA = (Integer) parentContextMap.get("HORA");
            }if (parentContextMap.containsKey("HORA_FINAL")) {
                context.HORA_FINAL = (String) parentContextMap.get("HORA_FINAL");
            }if (parentContextMap.containsKey("HORA_INICIO")) {
                context.HORA_INICIO = (String) parentContextMap.get("HORA_INICIO");
            }if (parentContextMap.containsKey("ID_SOLICITUD")) {
                context.ID_SOLICITUD = (Integer) parentContextMap.get("ID_SOLICITUD");
            }if (parentContextMap.containsKey("JOB")) {
                context.JOB = (String) parentContextMap.get("JOB");
            }if (parentContextMap.containsKey("LAST_DAYS")) {
                context.LAST_DAYS = (Integer) parentContextMap.get("LAST_DAYS");
            }if (parentContextMap.containsKey("LOGS_ERROR")) {
                context.LOGS_ERROR = (String) parentContextMap.get("LOGS_ERROR");
            }if (parentContextMap.containsKey("LOGS_EXECUTION")) {
                context.LOGS_EXECUTION = (String) parentContextMap.get("LOGS_EXECUTION");
            }if (parentContextMap.containsKey("MINUTOS")) {
                context.MINUTOS = (Integer) parentContextMap.get("MINUTOS");
            }if (parentContextMap.containsKey("ORIGEN")) {
                context.ORIGEN = (String) parentContextMap.get("ORIGEN");
            }if (parentContextMap.containsKey("PATH")) {
                context.PATH = (String) parentContextMap.get("PATH");
            }if (parentContextMap.containsKey("JasperAmbiente")) {
                context.JasperAmbiente = (String) parentContextMap.get("JasperAmbiente");
            }if (parentContextMap.containsKey("JasperModulo")) {
                context.JasperModulo = (String) parentContextMap.get("JasperModulo");
            }if (parentContextMap.containsKey("JasperParameters")) {
                context.JasperParameters = (String) parentContextMap.get("JasperParameters");
            }if (parentContextMap.containsKey("JasperPassword")) {
                context.JasperPassword = (String) parentContextMap.get("JasperPassword");
            }if (parentContextMap.containsKey("JasperReporte")) {
                context.JasperReporte = (String) parentContextMap.get("JasperReporte");
            }if (parentContextMap.containsKey("JasperServer")) {
                context.JasperServer = (String) parentContextMap.get("JasperServer");
            }if (parentContextMap.containsKey("JasperURI")) {
                context.JasperURI = (String) parentContextMap.get("JasperURI");
            }if (parentContextMap.containsKey("JasperUser")) {
                context.JasperUser = (String) parentContextMap.get("JasperUser");
            }if (parentContextMap.containsKey("mail_Message")) {
                context.mail_Message = (String) parentContextMap.get("mail_Message");
            }if (parentContextMap.containsKey("mail_Password")) {
                context.mail_Password = (java.lang.String) parentContextMap.get("mail_Password");
            }if (parentContextMap.containsKey("mail_Sendername")) {
                context.mail_Sendername = (String) parentContextMap.get("mail_Sendername");
            }if (parentContextMap.containsKey("mail_SMTP_Host")) {
                context.mail_SMTP_Host = (String) parentContextMap.get("mail_SMTP_Host");
            }if (parentContextMap.containsKey("mail_SMTP_Port")) {
                context.mail_SMTP_Port = (String) parentContextMap.get("mail_SMTP_Port");
            }if (parentContextMap.containsKey("mail_Subject")) {
                context.mail_Subject = (String) parentContextMap.get("mail_Subject");
            }if (parentContextMap.containsKey("mail_To")) {
                context.mail_To = (String) parentContextMap.get("mail_To");
            }if (parentContextMap.containsKey("mail_User")) {
                context.mail_User = (String) parentContextMap.get("mail_User");
            }
        }

        //Resume: init the resumeUtil
        resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
        resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
        resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
			parametersToEncrypt.add("db_origen_Password");
			parametersToEncrypt.add("db_destino_Password");
			parametersToEncrypt.add("mail_Password");
        //Resume: jobStart
        resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","","","",resumeUtil.convertToJsonText(context,ContextProperties.class,parametersToEncrypt));


if(execStat) {
    try {
        runStat.openSocket(!isChildJob);
        runStat.setAllPID(rootPid, fatherPid, pid, jobName);
        runStat.startThreadStat(clientHost, portStats);
        runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
    } catch (java.io.IOException ioException) {
        ioException.printStackTrace();
    }
}



	
	    java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
	    globalMap.put("concurrentHashMap", concurrentHashMap);
	

    long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
    long endUsedMemory = 0;
    long end = 0;

    startTime = System.currentTimeMillis();


this.globalResumeTicket = true;//to run tPreJob

try {
errorCode = null;tPrejob_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tPrejob_1) {
globalMap.put("tPrejob_1_SUBPROCESS_STATE", -1);

e_tPrejob_1.printStackTrace();

}




this.globalResumeTicket = false;//to run others jobs


this.globalResumeTicket = true;//to run tPostJob

try {
errorCode = null;tPostjob_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tPostjob_1) {
globalMap.put("tPostjob_1_SUBPROCESS_STATE", -1);

e_tPostjob_1.printStackTrace();

}



        end = System.currentTimeMillis();

        if (watch) {
            System.out.println((end-startTime)+" milliseconds");
        }

        endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
        if (false) {
            System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : Actas");
        }



if (execStat) {
    runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
    runStat.stopThreadStat();
}
    int returnCode = 0;


    if(errorCode == null) {
         returnCode = status != null && status.equals("failure") ? 1 : 0;
    } else {
         returnCode = errorCode.intValue();
    }
    resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","" + returnCode,"","","");
    resumeUtil.flush();


    return returnCode;

  }

    // only for OSGi env
    public void destroy() {
    closeSqlDbConnections();


    }



    private void closeSqlDbConnections() {
        try {
            Object obj_conn;
            obj_conn = globalMap.remove("conn_tOracleConnection_1");
            if (null != obj_conn) {
                ((java.sql.Connection) obj_conn).close();
            }
        } catch (java.lang.Exception e) {
        }
    }











    private java.util.Map<String, Object> getSharedConnections4REST() {
        java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();
            connections.put("conn_tOracleConnection_1", globalMap.get("conn_tOracleConnection_1"));






        return connections;
    }

    private void evalParam(String arg) {
        if (arg.startsWith("--resuming_logs_dir_path")) {
            resuming_logs_dir_path = arg.substring(25);
        } else if (arg.startsWith("--resuming_checkpoint_path")) {
            resuming_checkpoint_path = arg.substring(27);
        } else if (arg.startsWith("--parent_part_launcher")) {
            parent_part_launcher = arg.substring(23);
        } else if (arg.startsWith("--watch")) {
            watch = true;
        } else if (arg.startsWith("--stat_port=")) {
            String portStatsStr = arg.substring(12);
            if (portStatsStr != null && !portStatsStr.equals("null")) {
                portStats = Integer.parseInt(portStatsStr);
            }
        } else if (arg.startsWith("--trace_port=")) {
            portTraces = Integer.parseInt(arg.substring(13));
        } else if (arg.startsWith("--client_host=")) {
            clientHost = arg.substring(14);
        } else if (arg.startsWith("--context=")) {
            contextStr = arg.substring(10);
            isDefaultContext = false;
        } else if (arg.startsWith("--father_pid=")) {
            fatherPid = arg.substring(13);
        } else if (arg.startsWith("--root_pid=")) {
            rootPid = arg.substring(11);
        } else if (arg.startsWith("--father_node=")) {
            fatherNode = arg.substring(14);
        } else if (arg.startsWith("--pid=")) {
            pid = arg.substring(6);
        } else if (arg.startsWith("--context_type")) {
            String keyValue = arg.substring(15);
			int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.setContextType(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }

            }

		} else if (arg.startsWith("--context_param")) {
            String keyValue = arg.substring(16);
            int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }
            }
        } else if (arg.startsWith("--context_file")) {
        	String keyValue = arg.substring(15);
        	String filePath = new String(java.util.Base64.getDecoder().decode(keyValue));
        	java.nio.file.Path contextFile = java.nio.file.Paths.get(filePath);
            try (java.io.BufferedReader reader = java.nio.file.Files.newBufferedReader(contextFile)) {
                String line;
                while ((line = reader.readLine()) != null) {
                    int index = -1;
                    if ( (index = line.indexOf('=')) > -1) {
							if (line.startsWith("--context_param")) {
								if ("id_Password".equals(context_param.getContextType(line.substring(16, index)))) {
									context_param.put(line.substring(16, index), routines.system.PasswordEncryptUtil.decryptPassword(
											line.substring(index + 1)));
								} else {
									context_param.put(line.substring(16, index), line.substring(index + 1));
								}
							}else {//--context_type
								context_param.setContextType(line.substring(15, index), line.substring(index + 1));
							}
                    }
                }
            } catch (java.io.IOException e) {
            	System.err.println("Could not load the context file: " + filePath);
                e.printStackTrace();
            }
        } else if (arg.startsWith("--log4jLevel=")) {
            log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--audit.enabled") && arg.contains("=")) {//for trunjob call
		    final int equal = arg.indexOf('=');
			final String key = arg.substring("--".length(), equal);
			System.setProperty(key, arg.substring(equal + 1));
		}
    }
    
    private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

    private final String[][] escapeChars = {
        {"\\\\","\\"},{"\\n","\n"},{"\\'","\'"},{"\\r","\r"},
        {"\\f","\f"},{"\\b","\b"},{"\\t","\t"}
        };
    private String replaceEscapeChars (String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0],currIndex);
				if (index>=0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0], strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
    }

    public Integer getErrorCode() {
        return errorCode;
    }


    public String getStatus() {
        return status;
    }

    ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 *     944826 characters generated by Talend Open Studio for ESB 
 *     on the November 1, 2024, 1:06:01 AM COT
 ************************************************************************************************/