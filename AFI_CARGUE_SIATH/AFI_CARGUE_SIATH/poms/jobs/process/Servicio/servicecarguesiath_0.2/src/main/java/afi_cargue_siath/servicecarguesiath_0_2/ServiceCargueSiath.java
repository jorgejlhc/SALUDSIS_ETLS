// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for ESB
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


package afi_cargue_siath.servicecarguesiath_0_2;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;
 




	//the import part of tJavaRow_2
	//import java.util.List;


@SuppressWarnings("unused")

/**
 * Job: ServiceCargueSiath Purpose: <br>
 * Description:  <br>
 * @author jorgejlhc@gmail.com
 * @version 8.8.8.20240722_1936-SNAPSHOT
 * @status 
 */
public class ServiceCargueSiath implements TalendJob {

protected static void logIgnoredError(String message, Throwable cause) {
       System.err.println(message);
       if (cause != null) {
               cause.printStackTrace();
       }

}


	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}
	
	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	
	private final static String utf8Charset = "UTF-8";
	

	//contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String,String> propertyTypes = new java.util.HashMap<>();
		
		public PropertiesWithType(java.util.Properties properties){
			super(properties);
		}
		public PropertiesWithType(){
			super();
		}
		
		public void setContextType(String key, String type) {
			propertyTypes.put(key,type);
		}
	
		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}	
	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();
		

	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties){
			super(properties);
		}
		public ContextProperties(){
			super();
		}

		public void synchronizeContext(){
			
			if(IdSolicitud != null){
				
					this.setProperty("IdSolicitud", IdSolicitud.toString());
				
			}
			
		}
		
		//if the stored or passed value is "<TALEND_NULL>" string, it mean null
		public String getStringValue(String key) {
			String origin_value = this.getProperty(key);
			if(NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY.equals(origin_value)) {
				return null;
			}
			return origin_value;
		}

public Integer IdSolicitud;
public Integer getIdSolicitud(){
	return this.IdSolicitud;
}
	}
			
	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.
	public ContextProperties getContext() {
		return this.context;
	}
	private final String jobVersion = "0.2";
	private final String jobName = "ServiceCargueSiath";
	private final String projectName = "AFI_CARGUE_SIATH";
	public Integer errorCode = null;
	private String currentComponent = "";
	
	private String cLabel =  null;
	
		private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
        private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();
	
		private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
		public  final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();
	

private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";
	
	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(), new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}
	
	public void setDataSourceReferences(List serviceReferences) throws Exception{
		
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		java.util.Map<String, javax.sql.DataSource> dataSources = new java.util.HashMap<String, javax.sql.DataSource>();
		
		for (java.util.Map.Entry<String, javax.sql.DataSource> entry : BundleUtils.getServices(serviceReferences,  javax.sql.DataSource.class).entrySet()) {
                    dataSources.put(entry.getKey(), entry.getValue());
                    talendDataSources.put(entry.getKey(), new routines.system.TalendDataSource(entry.getValue()));
		}

		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}

	LogCatcherUtils tLogCatcher_1 = new LogCatcherUtils();

private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

public String getExceptionStackTrace() {
	if ("failure".equals(this.getStatus())) {
		errorMessagePS.flush();
		return baos.toString();
	}
	return null;
}

private Exception exception;

public Exception getException() {
	if ("failure".equals(this.getStatus())) {
		return this.exception;
	}
	return null;
}

private class TalendException extends Exception {

	private static final long serialVersionUID = 1L;

	private java.util.Map<String, Object> globalMap = null;
	private Exception e = null;
	
	private String currentComponent = null;
	private String cLabel =  null;
	
	private String virtualComponentName = null;
	
	public void setVirtualComponentName (String virtualComponentName){
		this.virtualComponentName = virtualComponentName;
	}

	private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
		this.currentComponent= errorComponent;
		this.globalMap = globalMap;
		this.e = e;
	}
	
	private TalendException(Exception e, String errorComponent, String errorComponentLabel, final java.util.Map<String, Object> globalMap) {
		this(e, errorComponent, globalMap);
		this.cLabel = errorComponentLabel;
	}

	public Exception getException() {
		return this.e;
	}

	public String getCurrentComponent() {
		return this.currentComponent;
	}

	
    public String getExceptionCauseMessage(Exception e){
        Throwable cause = e;
        String message = null;
        int i = 10;
        while (null != cause && 0 < i--) {
            message = cause.getMessage();
            if (null == message) {
                cause = cause.getCause();
            } else {
                break;          
            }
        }
        if (null == message) {
            message = e.getClass().getName();
        }   
        return message;
    }

	@Override
	public void printStackTrace() {
		if (!(e instanceof TalendException || e instanceof TDieException)) {
			if(virtualComponentName!=null && currentComponent.indexOf(virtualComponentName+"_")==0){
				globalMap.put(virtualComponentName+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			}
			globalMap.put(currentComponent+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
		}
		if (!(e instanceof TDieException)) {
			if(e instanceof TalendException){
				e.printStackTrace();
			} else {
				e.printStackTrace();
				e.printStackTrace(errorMessagePS);
				ServiceCargueSiath.this.exception = e;
			}
		}
		if (!(e instanceof TalendException)) {
		try {
			for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
				if (m.getName().compareTo(currentComponent + "_error") == 0) {
					m.invoke(ServiceCargueSiath.this, new Object[] { e , currentComponent, globalMap});
					break;
				}
			}

			if(!(e instanceof TDieException)){
				tLogCatcher_1.addMessage("Java Exception", currentComponent, 6, e.getClass().getName() + ":" + e.getMessage(), 1);
				tLogCatcher_1Process(globalMap);
			}
			} catch (TalendException e) {
				// do nothing
			
		} catch (Exception e) {
			this.e.printStackTrace();
		}
		}
	}
}

			public void tXMLMap_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRESTRequest_1_Loop_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRESTResponse_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRESTRequest_1_Loop_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaRow_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRESTRequest_1_Loop_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRunJob_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRESTRequest_1_Loop_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFixedFlowInput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFixedFlowInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tXMLMap_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFixedFlowInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRESTResponse_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFixedFlowInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRESTResponse_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRESTRequest_1_Loop_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogCatcher_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tLogCatcher_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tXMLMap_7_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tLogCatcher_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRESTResponse_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tLogCatcher_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRESTRequest_1_Loop_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
							tRESTRequest_1_In_error(exception, errorComponent, globalMap);
						
						}
					
			public void tRESTRequest_1_In_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRESTRequest_1_Loop_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tXMLMap_4_TXMLMAP_OUT_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
							tXMLMap_4_TXMLMAP_IN_error(exception, errorComponent, globalMap);
						
						}
					
			public void tXMLMap_4_TXMLMAP_IN_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRESTRequest_1_Loop_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFixedFlowInput_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tLogCatcher_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tRESTRequest_1_Loop_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
	


private boolean runInTalendEsbRuntimeContainer = false;

public void setRunInTalendEsbRuntimeContainer(boolean flag) {
	runInTalendEsbRuntimeContainer = flag;
}

protected String restEndpoint;

public void setRestEndpoint(String restEndpoint){
	this.restEndpoint = restEndpoint;
}

public String getRestEndpoint() {
	return "http://0.0.0.0:8083/";
}

private boolean runInDaemonMode = true;

public void setRunInDaemonMode(boolean flag) {
	runInDaemonMode = flag;
}

private boolean restTalendJobAlreadyStarted = false;

/**
 * REST provider implementation
 */
@javax.ws.rs.Path("/")

public static class RestServiceProviderImpl4TalendJob {

	@javax.ws.rs.core.Context
	private org.apache.cxf.jaxrs.ext.MessageContext messageContext;
	private final String setCookieHeader = "Set-Cookie";

	private final ServiceCargueSiath job;

	public RestServiceProviderImpl4TalendJob(ServiceCargueSiath job) {
		this.job = job;
	}

	private void populateRequestWithJobContext(java.util.Map<String, Object> requestGlobalMap, ServiceCargueSiath job) {
		// pass job DataSources
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources =
			(java.util.Map<String, routines.system.TalendDataSource>) job.globalMap.get(KEY_DB_DATASOURCES);
		if (null != talendDataSources) {
			java.util.Map<String, routines.system.TalendDataSource> restDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
			for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry : talendDataSources.entrySet()) {
				restDataSources.put(talendDataSourceEntry.getKey(), new routines.system.TalendDataSource(talendDataSourceEntry.getValue().getRawDataSource()));
			}
			requestGlobalMap.put(KEY_DB_DATASOURCES, restDataSources);
		}

		if (null != job.globalMap.get(KEY_DB_DATASOURCES_RAW)) {
			requestGlobalMap.put(KEY_DB_DATASOURCES_RAW, job.globalMap.get(KEY_DB_DATASOURCES_RAW));
		}

		// pass job shared connections
		requestGlobalMap.putAll(job.getSharedConnections4REST());

		// pass job concurrent map
		requestGlobalMap.put("concurrentHashMap", job.globalMap.get("concurrentHashMap"));

		requestGlobalMap.putAll(job.globalMap);
	}

	private void closePassedDataSourceConnections(java.util.Map<String, Object> requestGlobalMap) {
		// close connections in passed job DataSources
		try {
			java.util.Map<String, routines.system.TalendDataSource> restDataSources =
				(java.util.Map<String, routines.system.TalendDataSource>) requestGlobalMap.get(KEY_DB_DATASOURCES);
			if (null != restDataSources) {
				for (routines.system.TalendDataSource restDataSource : restDataSources.values()) {
					restDataSource.close();
				}
			}
		} catch (Throwable e) {
			e.printStackTrace(System.err);
		}
	}

	private javax.ws.rs.core.Response processRequest(java.util.Map<String, Object> request) {
		
		final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
		
		try {
			globalMap.put("restRequest", request);

			populateRequestWithJobContext(globalMap, job);

			job.tRESTRequest_1_LoopProcess(globalMap);

			java.util.Map<String, Object> response = (java.util.Map<String, Object>) globalMap.get("restResponse");

			Object responseBody = null;
			Integer status = null;
			java.util.Map<String, String> headers = null;
			if (null != response) {
				Object dropJsonRootProp = response.get("drop.json.root.element");
				Boolean dropJsonRoot = (null == dropJsonRootProp) ? false : (Boolean) dropJsonRootProp;
				messageContext.put("drop.json.root.element", dropJsonRoot.toString());

				responseBody = response.get("BODY");
				status = (Integer) response.get("STATUS");
				headers = (java.util.Map<String, String>) response.get("HEADERS");
			} else {
                            responseBody = request.get("ERROR");
                        }
            
			if (null == status) {
				status = (request.containsKey("STATUS")) ? (Integer) request.get("STATUS") : 404;
			}

			javax.ws.rs.core.Response.ResponseBuilder responseBuilder = javax.ws.rs.core.Response.status(status).entity(responseBody);
			if (headers != null) {
				for (java.util.Map.Entry<String, String> header : headers.entrySet()) {
					if (header.getKey().equalsIgnoreCase(setCookieHeader)) {
						String cookies = header.getValue().trim();
						String cookiesList[] = cookies.split(";");

						for (String cookie : cookiesList) {
							String cookieTokens[] = cookie.trim().split("=");

							if (cookieTokens.length == 2) {

								String cookieName = cookieTokens[0].trim();
								String cookieValue = cookieTokens[1].trim();

								if (cookieName.length() > 0 && cookieValue.length() > 0) {
									javax.ws.rs.core.NewCookie newCookie = new javax.ws.rs.core.NewCookie(cookieName, cookieValue);
									responseBuilder.cookie(newCookie);
								}
							}
						}
					} else {
						responseBuilder.header(header.getKey(), header.getValue());
					}
				}
			}

			return responseBuilder.build();

		} catch (Throwable ex) {
			ex.printStackTrace();
			throw new javax.ws.rs.WebApplicationException(ex, 500);
		} finally {
			// close DB connections
			closePassedDataSourceConnections(globalMap);
		}
	}

	private javax.ws.rs.core.Response processStreamingResponseRequest(final java.util.Map<String, Object> request) {

		javax.ws.rs.core.StreamingOutput streamingOutput = new javax.ws.rs.core.StreamingOutput() {
			public void write(java.io.OutputStream output) {

				
				final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
				

				try {
					globalMap.put("restResponseStream", output);

					globalMap.put("restRequest", request);

					populateRequestWithJobContext(globalMap, job);

					job.tRESTRequest_1_LoopProcess(globalMap);

					if (globalMap.containsKey("restResponseWrappingClosure")) {
						output.write(((String) globalMap.get("restResponseWrappingClosure")).getBytes());
					}
				} catch (Throwable ex) {
					ex.printStackTrace();
					throw new javax.ws.rs.WebApplicationException(ex, 500);
				} finally {
					// close DB connections
					closePassedDataSourceConnections(globalMap);
				}
			}
		};

		return javax.ws.rs.core.Response.ok().entity(streamingOutput).build();
	}

	@javax.ws.rs.POST()

	@javax.ws.rs.Path("")	@javax.ws.rs.Consumes({ "application/json" })
	@javax.ws.rs.Produces({ "application/json" })
	public javax.ws.rs.core.Response in(
		
		org.dom4j.Document body
		
			) {
                List<String> requiredParameterWithNullValueList = new java.util.ArrayList<String>();  
                if(requiredParameterWithNullValueList.size() > 0){
                    return handleWrongRequest(messageContext, 400, "400 Bad Request \n" + requiredParameterWithNullValueList.toString() + " in tRESTRequest_1:in " + (requiredParameterWithNullValueList.size() == 1 ? "is required!" : "are required!"));         
                }
		java.util.Map<String, Object> request_tRESTRequest_1 = new java.util.HashMap<String, Object>();
		request_tRESTRequest_1.put("VERB", "POST");
		request_tRESTRequest_1.put("OPERATION", "in");
		request_tRESTRequest_1.put("PATTERN", "");
	
		request_tRESTRequest_1.put("BODY", body);
	

		populateRequestInfo(request_tRESTRequest_1, messageContext);

		java.util.Map<String, Object> parameters_tRESTRequest_1 = new java.util.HashMap<String, Object>();
		
		request_tRESTRequest_1.put("PARAMS", parameters_tRESTRequest_1);


		return processRequest(request_tRESTRequest_1);
	}
	public javax.ws.rs.core.Response handleWrongRequest(
			org.apache.cxf.jaxrs.ext.MessageContext context, int status, String error) {

		// System.out.println("wrong call [uri: " + context.getUriInfo().getPath() + " ; method: " + context.getRequest().getMethod() + " ; status: " + status + " ; error: " + error + "]");

		java.util.Map<String, Object> wrongRequest = new java.util.HashMap<String, Object>();

		wrongRequest.put("ERROR", error);
		wrongRequest.put("STATUS", status);
		wrongRequest.put("VERB", context.getRequest().getMethod());
		wrongRequest.put("URI", context.getUriInfo().getPath());
		wrongRequest.put("URI_BASE", context.getUriInfo().getBaseUri().toString());
		wrongRequest.put("URI_ABSOLUTE", context.getUriInfo().getAbsolutePath().toString());
		wrongRequest.put("URI_REQUEST", context.getUriInfo().getRequestUri().toString());

		return processRequest(wrongRequest);
	}

	private void populateRequestInfo(java.util.Map<String, Object> request, org.apache.cxf.jaxrs.ext.MessageContext context) {
		final javax.ws.rs.core.UriInfo ui = context.getUriInfo();

		request.put("URI", ui.getPath());
		request.put("URI_BASE", ui.getBaseUri().toString());
		request.put("URI_ABSOLUTE", ui.getAbsolutePath().toString());
		request.put("URI_REQUEST", ui.getRequestUri().toString());

		request.put("ALL_HEADER_PARAMS", context.getHttpHeaders().getRequestHeaders());
		request.put("ALL_QUERY_PARAMS", ui.getQueryParameters());

		javax.ws.rs.core.SecurityContext securityContext = context.getSecurityContext();
		if (null != securityContext && null != securityContext.getUserPrincipal()) {
			request.put("PRINCIPAL_NAME", securityContext.getUserPrincipal().getName());
		}

		request.put("CorrelationID", context.get("CorrelationID"));

		request.put("MESSAGE_CONTEXT", context);
	}

	private void populateMultipartRequestInfo(java.util.Map<String, Object> request, org.apache.cxf.jaxrs.ext.MessageContext context,
			java.util.Map<String, Boolean> partNames) {
		java.util.Map<String, String> attachmentFilenames = new java.util.HashMap<String, String>();

		java.util.Map<String, java.util.Map<String, java.util.List<String>>> attachmentHeaders =
			new java.util.HashMap<String, java.util.Map<String, java.util.List<String>>>();

		for (java.util.Map.Entry<String,Boolean> p : partNames.entrySet()) {
			String partName = p.getKey();
			Boolean optional = p.getValue();
			org.apache.cxf.jaxrs.ext.multipart.Attachment attachment = getFirstMatchingPart(context, partName, optional);
			if (null != attachment) {
				attachmentHeaders.put(partName, attachment.getHeaders());
				if (null != attachment.getContentDisposition()) {
					String filename = attachment.getContentDisposition().getParameter("filename");
					if (null != filename) {
						attachmentFilenames.put(partName, filename);
					}
				}
			}
		}

		request.put("ATTACHMENT_HEADERS", attachmentHeaders);
		request.put("ATTACHMENT_FILENAMES", attachmentFilenames);
	}

	private static org.apache.cxf.jaxrs.ext.multipart.Attachment getFirstMatchingPart(
			org.apache.cxf.jaxrs.ext.MessageContext context, String partName, Boolean optional) {
		List<org.apache.cxf.jaxrs.ext.multipart.Attachment> attachments =
			org.apache.cxf.jaxrs.utils.multipart.AttachmentUtils.getAttachments(context);
		for (org.apache.cxf.jaxrs.ext.multipart.Attachment attachment : attachments) {
			if (partName.equals(attachment.getContentId())) {
				return attachment;
			}
			org.apache.cxf.jaxrs.ext.multipart.ContentDisposition cd = attachment.getContentDisposition();
			if (null != cd && partName.equals(cd.getParameter("name"))) {
				return attachment;
			}
		}
		if (optional) { 
			return null;
		}
		// unexpected
		throw new javax.ws.rs.InternalServerErrorException();
	}
}

public static class ExceptionMapper4TalendJobRestService extends org.apache.cxf.jaxrs.impl.WebApplicationExceptionMapper {

	@javax.ws.rs.core.Context private org.apache.cxf.jaxrs.ext.MessageContext messageContext;

	private RestServiceProviderImpl4TalendJob provider;

	public ExceptionMapper4TalendJobRestService(RestServiceProviderImpl4TalendJob provider) {
		this.provider = provider;
	}

	public javax.ws.rs.core.Response toResponse(javax.ws.rs.WebApplicationException ex) {
		String error = null;
		javax.ws.rs.core.Response response = ex.getResponse();
		if (null != response && null != response.getEntity()) {
			error = response.getEntity().toString();
		}
		response = super.toResponse(ex);
		if (null == error) {
			if (null != response && null != response.getEntity()) {
				error = response.getEntity().toString();
			} else {
				error = null == ex.getCause() ? ex.getMessage() : ex.getCause().getMessage();
			}
		}
		response = provider.handleWrongRequest(messageContext, response.getStatus(), error);

		java.util.List<javax.ws.rs.core.MediaType> accepts = messageContext.getHttpHeaders().getAcceptableMediaTypes();
		javax.ws.rs.core.MediaType responseType = accepts.isEmpty() ? null : accepts.get(0);

		if (responseType == null || !responseType.getSubtype().equals("xml") && !responseType.getSubtype().equals("json")) {
			responseType = javax.ws.rs.core.MediaType.APPLICATION_XML_TYPE;
		}

		javax.ws.rs.core.Response r = javax.ws.rs.core.Response.status(response.getStatus()).entity(response.getEntity()).type(responseType).build();

		if(response.getHeaders()!=null){
			r.getHeaders().putAll(response.getHeaders());
		}

		return r;
	}
}

protected String checkEndpointUrl(String url) {
	final String defaultEndpointUrl = "http://127.0.0.1:8090/";

	String endpointUrl = url;
	if (null == endpointUrl || endpointUrl.trim().isEmpty()) {
		endpointUrl = defaultEndpointUrl;
	} else if (!endpointUrl.contains("://")) { // relative
		if (endpointUrl.startsWith("/")) {
			endpointUrl = endpointUrl.substring(1);
		}
		endpointUrl = defaultEndpointUrl + endpointUrl;
	}

	// test for busy
	java.net.URI endpointURI = java.net.URI.create(endpointUrl);
	String host = endpointURI.getHost();
	try {
		if (java.net.InetAddress.getByName(host).isLoopbackAddress()) {
			int port = endpointURI.getPort();
			java.net.ServerSocket ss = null;
			try {
				ss = new java.net.ServerSocket(port);
			} catch (IOException e) {
				// rethrow exception
				throw new IllegalArgumentException("Cannot start provider with uri: " + endpointUrl + ". Port " + port + " already in use.");
			} finally {
				if (ss != null) {
					try {
						ss.close();
					} catch (IOException e) {
						// ignore
					}
				}
			}
			try {
				// ok, let's doublecheck for silent listeners
				java.net.Socket cs = new java.net.Socket(host, port);
				// if succeed - somebody silently listening, fail!
				cs.close();
				// rethrow exception
				throw new IllegalArgumentException("Cannot start provider with uri: " + endpointUrl + ". Port " + port + " already in use.");
			} catch (IOException e) {
				// ok, nobody listens, proceed
			}
		}
	} catch (java.net.UnknownHostException e) {
		// ignore
	}

	return endpointUrl;
}


public static class StreamingDOM4JProvider extends org.apache.cxf.jaxrs.provider.dom4j.DOM4JProvider {

	public static final String SUPRESS_XML_DECLARATION = "supress.xml.declaration";

	private java.util.Map<String, Object> globalMap = null;

	public void setGlobalMap(java.util.Map<String, Object> globalMap) {
		this.globalMap = globalMap;
	}

	public void writeTo(org.dom4j.Document doc, Class<?> cls, java.lang.reflect.Type type,
			java.lang.annotation.Annotation[] anns, javax.ws.rs.core.MediaType mt,
			javax.ws.rs.core.MultivaluedMap<String, Object> headers, java.io.OutputStream os)
					throws java.io.IOException, javax.ws.rs.WebApplicationException {
		if (mt.getSubtype().contains("xml")) {
			org.dom4j.io.XMLWriter writer;
			org.apache.cxf.message.Message currentMessage = null;
			if (org.apache.cxf.jaxrs.utils.JAXRSUtils.getCurrentMessage() != null) {
				currentMessage = org.apache.cxf.jaxrs.utils.JAXRSUtils.getCurrentMessage();
			} else {
				currentMessage = (org.apache.cxf.message.Message)((java.util.Map<String, Object>)globalMap.get("restRequest")).get("CURRENT_MESSAGE");
			}

			if (currentMessage != null && currentMessage.getExchange() != null && currentMessage.getExchange().containsKey(SUPRESS_XML_DECLARATION)) {
				org.dom4j.io.OutputFormat format = new org.dom4j.io.OutputFormat();
				format.setSuppressDeclaration(true);
				writer = new org.dom4j.io.XMLWriter(os, format);
			} else {
				writer = new org.dom4j.io.XMLWriter(os);
			}
			writer.write(doc);
			writer.flush();
		} else {
			super.writeTo(doc, cls, type, anns, mt, headers, os);
		}
	}
}

Thread4RestServiceProviderEndpoint thread4RestServiceProviderEndpoint = null;

class Thread4RestServiceProviderEndpoint extends Thread {

	private final String endpointUrl;

	private final ServiceCargueSiath job;

	private org.apache.cxf.endpoint.Server server;

	private org.apache.cxf.jaxrs.JAXRSServerFactoryBean sf;

	public Thread4RestServiceProviderEndpoint(ServiceCargueSiath job, String endpointUrl) {
		this.job = job;
		this.endpointUrl = endpointUrl;
		this.sf = new org.apache.cxf.jaxrs.JAXRSServerFactoryBean();
	}

	boolean inOSGi = routines.system.BundleUtils.inOSGi();

	public org.apache.cxf.endpoint.Server getServer(){
		return server;
	}

	public org.apache.cxf.jaxrs.JAXRSServerFactoryBean getJAXRSServerFactoryBean(){
		return sf;
	}

	public void run() {

		try {
			RestServiceProviderImpl4TalendJob provider = new RestServiceProviderImpl4TalendJob(job);

			if(sf.getProperties() == null){
				sf.setProperties(new java.util.HashMap<String, Object>());
			}

			java.util.List<Object> providers = (java.util.List<Object>)sf.getProviders();
			providers.add(new ExceptionMapper4TalendJobRestService(provider));
			providers.add(new StreamingDOM4JProvider());
			
			org.apache.cxf.jaxrs.provider.json.JSONProvider jsonProvider =
					new org.apache.cxf.jaxrs.provider.json.JSONProvider();
			jsonProvider.setIgnoreNamespaces(true);
			
				jsonProvider.setAttributesToElements(true);
			
			
				jsonProvider.setSupportUnwrapped(true);
				jsonProvider.setWrapperName("root");
			

			
				jsonProvider.setConvertTypesToStrings(true);
			
			providers.add(jsonProvider);
			sf.setProviders(providers);
			sf.setTransportId("http://cxf.apache.org/transports/http");
			sf.setResourceClasses(RestServiceProviderImpl4TalendJob.class);
			sf.setResourceProvider(RestServiceProviderImpl4TalendJob.class,
					new org.apache.cxf.jaxrs.lifecycle.SingletonResourceProvider(provider));
			sf.setAddress(endpointUrl);

			final java.util.List<org.apache.cxf.feature.Feature> features = sf.getFeatures() == null?
					new java.util.ArrayList<org.apache.cxf.feature.Feature>() : sf.getFeatures();

			

			

			

			

			sf.setFeatures(features);

			server = sf.create();

			// System.out.println("REST service [endpoint: " + endpointUrl + "] published");
		} catch (Throwable e) {
			e.printStackTrace();
		}
	}

	public void stopEndpoint() {
		if (null != server) {
			server.stop();
			server.destroy();
			// System.out.println("REST service [endpoint: " + endpointUrl + "] unpublished");
		}
	}
}

	public static class ContextBean {
		static String evaluate(String context, String contextExpression, String jobName)
				throws IOException, javax.script.ScriptException {
			String currentContext = context;
			String jobNameStripped = jobName.substring(jobName.lastIndexOf(".") + 1);

			boolean inOSGi = routines.system.BundleUtils.inOSGi();
			java.util.Dictionary<String, Object> jobProperties = null;
			if (inOSGi) {
				jobProperties = routines.system.BundleUtils.getJobProperties(jobNameStripped);

				if (jobProperties != null && null != jobProperties.get("context")) {
					currentContext = (String) jobProperties.get("context");
				}
			}
						
			boolean isExpression = contextExpression.contains("+") || contextExpression.contains("(");
			final String prefix = isExpression ? "\"" : "";
			java.util.Properties defaultProps = new java.util.Properties();
			java.io.InputStream inContext = ServiceCargueSiath.class.getClassLoader()
					.getResourceAsStream("afi_cargue_siath/servicecarguesiath_0_2/contexts/" + currentContext  + ".properties");
			if (inContext == null) {
				inContext = ServiceCargueSiath.class.getClassLoader()
						.getResourceAsStream("config/contexts/" + currentContext  + ".properties");
			}
			try {
			    defaultProps.load(inContext);
				if(jobProperties != null){
					java.util.Enumeration<String> keys = jobProperties.keys();
					while (keys.hasMoreElements()) {
						String propKey = keys.nextElement();
						if (defaultProps.containsKey(propKey)) {
							defaultProps.put(propKey, (String) jobProperties.get(propKey));
						}
					}
				}
			} finally {
			    inContext.close();
			}
			java.util.regex.Pattern pattern = java.util.regex.Pattern.compile("context.([\\w]+)");
			java.util.regex.Matcher matcher = pattern.matcher(contextExpression);

			while (matcher.find()) {
				contextExpression = contextExpression.replaceAll(matcher.group(0),
						prefix + defaultProps.getProperty(matcher.group(1)) + prefix);
			}
			if (contextExpression.startsWith("/services")) {
				contextExpression = contextExpression.replaceFirst("/services","");
            }
			return isExpression ? evaluateContextExpression(contextExpression) : contextExpression;
		}

		public static String evaluateContextExpression(String expression) throws RuntimeException {
			delight.rhinosandox.RhinoSandbox sandbox = delight.rhinosandox.RhinoSandboxes.create();

			// Add some import for Java
			expression = expression.replaceAll("System.getProperty", "java.lang.System.getProperty");
			return sandbox.eval(null, expression).toString();
		}

        public static String getContext(String context, String contextName, String jobName) throws Exception {
			return contextName.contains("context.") ? evaluate(context, contextName, jobName) : contextName;
        }
    }








public static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
    final static byte[] commonByteArrayLock_AFI_CARGUE_SIATH_ServiceCargueSiath = new byte[0];
    static byte[] commonByteArray_AFI_CARGUE_SIATH_ServiceCargueSiath = new byte[0];

	
			    public routines.system.Document body;

				public routines.system.Document getBody () {
					return this.body;
				}

				public Boolean bodyIsNullable(){
				    return true;
				}
				public Boolean bodyIsKey(){
				    return false;
				}
				public Integer bodyLength(){
				    return 0;
				}
				public Integer bodyPrecision(){
				    return 0;
				}
				public String bodyDefault(){
				
					return "";
				
				}
				public String bodyComment(){
				
				    return null;
				
				}
				public String bodyPattern(){
				
				    return null;
				
				}
				public String bodyOriginalDbColumnName(){
				
					return "body";
				
				}

				



    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_CARGUE_SIATH_ServiceCargueSiath) {

        	try {

        		int length = 0;
		
						this.body = (routines.system.Document) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_CARGUE_SIATH_ServiceCargueSiath) {

        	try {

        		int length = 0;
		
						this.body = (routines.system.Document) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Document
				
       			    	dos.writeObject(this.body);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Document
				
						dos.clearInstanceCache();
						dos.writeObject(this.body);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("body="+String.valueOf(body));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row4Struct implements routines.system.IPersistableRow<row4Struct> {
    final static byte[] commonByteArrayLock_AFI_CARGUE_SIATH_ServiceCargueSiath = new byte[0];
    static byte[] commonByteArray_AFI_CARGUE_SIATH_ServiceCargueSiath = new byte[0];

	
			    public String nada;

				public String getNada () {
					return this.nada;
				}

				public Boolean nadaIsNullable(){
				    return true;
				}
				public Boolean nadaIsKey(){
				    return false;
				}
				public Integer nadaLength(){
				    return null;
				}
				public Integer nadaPrecision(){
				    return null;
				}
				public String nadaDefault(){
				
					return null;
				
				}
				public String nadaComment(){
				
				    return "";
				
				}
				public String nadaPattern(){
				
					return "";
				
				}
				public String nadaOriginalDbColumnName(){
				
					return "nada";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_CARGUE_SIATH_ServiceCargueSiath.length) {
				if(length < 1024 && commonByteArray_AFI_CARGUE_SIATH_ServiceCargueSiath.length == 0) {
   					commonByteArray_AFI_CARGUE_SIATH_ServiceCargueSiath = new byte[1024];
				} else {
   					commonByteArray_AFI_CARGUE_SIATH_ServiceCargueSiath = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_CARGUE_SIATH_ServiceCargueSiath, 0, length);
			strReturn = new String(commonByteArray_AFI_CARGUE_SIATH_ServiceCargueSiath, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_CARGUE_SIATH_ServiceCargueSiath.length) {
				if(length < 1024 && commonByteArray_AFI_CARGUE_SIATH_ServiceCargueSiath.length == 0) {
   					commonByteArray_AFI_CARGUE_SIATH_ServiceCargueSiath = new byte[1024];
				} else {
   					commonByteArray_AFI_CARGUE_SIATH_ServiceCargueSiath = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_CARGUE_SIATH_ServiceCargueSiath, 0, length);
			strReturn = new String(commonByteArray_AFI_CARGUE_SIATH_ServiceCargueSiath, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_CARGUE_SIATH_ServiceCargueSiath) {

        	try {

        		int length = 0;
		
					this.nada = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_CARGUE_SIATH_ServiceCargueSiath) {

        	try {

        		int length = 0;
		
					this.nada = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.nada,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.nada,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("nada="+nada);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row4Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tFixedFlowInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFixedFlowInput_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row4Struct row4 = new row4Struct();
row1Struct row1 = new row1Struct();





	
	/**
	 * [tRESTResponse_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tRESTResponse_3", false);
		start_Hash.put("tRESTResponse_3", System.currentTimeMillis());
		
	
	currentComponent="tRESTResponse_3";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row1");
					}
				
		int tos_count_tRESTResponse_3 = 0;
		

 



/**
 * [tRESTResponse_3 begin ] stop
 */



	
	/**
	 * [tXMLMap_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tXMLMap_5", false);
		start_Hash.put("tXMLMap_5", System.currentTimeMillis());
		
	
	currentComponent="tXMLMap_5";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row4");
					}
				
		int tos_count_tXMLMap_5 = 0;
		

	
	
//===============================input xml init part===============================
class XML_API_tXMLMap_5{
	public boolean isDefNull(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
        if (node != null && node instanceof org.dom4j.Element) {
        	org.dom4j.Attribute attri = ((org.dom4j.Element)node).attribute("nil");
        	if(attri != null && ("true").equals(attri.getText())){
            	return true;
            }
        }
        return false;
    }

    public boolean isMissing(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
        return node == null ? true : false;
    }

    public boolean isEmpty(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
        if (node != null) {
            return node.getText().length() == 0;
        }
        return false;
    }
}
	class Var__tXMLMap_5__Struct {
	}
	Var__tXMLMap_5__Struct Var__tXMLMap_5 = new Var__tXMLMap_5__Struct();
// ###############################
// # Outputs initialization
row1Struct row1_tmp = new row1Struct();
row1Struct row1_save = null;
// ###############################
		int nb_line_tXMLMap_5 = 0; 
	
    XML_API_tXMLMap_5 xml_api_tXMLMap_5 = new XML_API_tXMLMap_5();

class GenerateDocument_row1 {

	java.util.Map<String,Object> valueMap = null;
	
	routines.system.DocumentGenerateOrderHelper orderHelper = new routines.system.DocumentGenerateOrderHelper(1);
		
	org.dom4j.Document doc = null;
	
	org.dom4j.Element root4Group = null;
	
	org.dom4j.io.OutputFormat format = null;
	
	java.util.List<java.util.List<String>> groupbyList = null;
	java.util.List<org.dom4j.Element> groupElementList = null;
	int order = 0;
	
	boolean isFirst = true;
	
	boolean	needRoot = true;
	
	String currentValue = null;
	
    public GenerateDocument_row1() {
//    	this.treeNodeAPI = treeNodeAPI;
    	
    	valueMap = new java.util.HashMap<String,Object>();
    	
    	groupbyList =  new java.util.ArrayList<java.util.List<String>>();
		groupElementList = new java.util.ArrayList<org.dom4j.Element>();
    	
    	doc = org.dom4j.DocumentHelper.createDocument();
    	format = org.dom4j.io.OutputFormat.createPrettyPrint();
    	format.setTrimText(false);
    }
    
    public org.dom4j.Document getDocument(){
		generateOk();
    	return this.doc;
    }
    
    //do some work after document has been generated
    private void generateOk() {
    	routines.system.NestXMLTool.replaceDefaultNameSpace(this.doc.getRootElement(),null);
    }
	
	//We generate the TreeNode_API object only if there is a document in the main input table.
    void generateElements(boolean isInnerJoin, row4Struct row4, Var__tXMLMap_5__Struct Var
	) {
	
	
	/*if(this.treeNodeAPI==null) {
		this.treeNodeAPI = treeNodeAPI;
	}*/
	
	org.dom4j.Element subTreeRootParent = null;
// build root xml tree 
if (needRoot) {
	needRoot=false;
		org.dom4j.Element root = null;
				root = org.dom4j.DocumentHelper.createElement("EtlResponse");
				doc.add(root);
		subTreeRootParent = root;
		org.dom4j.Element root_0 = null;
				root_0 = root.addElement("State");
		valueMap.put("root_0",1);
		if(valueMap.get("root_0")!=null) {
			routines.system.NestXMLTool.setText(root_0,FormatterUtils.fm(valueMap.get("root_0"),null));
		}
		org.dom4j.Element root_1 = null;
				root_1 = root.addElement("Message");
		valueMap.put("root_1","Proceso de cargue masivo SIATH, ejecuctado satisfactoriamente");
		if(valueMap.get("root_1")!=null) {
			routines.system.NestXMLTool.setText(root_1,FormatterUtils.fm(valueMap.get("root_1"),null));
		}
		org.dom4j.Element root_2 = null;
				root_2 = root.addElement("ErrorBackTrace");
		org.dom4j.Element root_3 = null;
				root_3 = root.addElement("Result");
		root4Group = subTreeRootParent;
	}else{
		subTreeRootParent=root4Group;
	}
	/* build group xml tree */
	boolean isNewElement = false;
		isNewElement = false;
		}
    }


	            

 



/**
 * [tXMLMap_5 begin ] stop
 */



	
	/**
	 * [tFixedFlowInput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFixedFlowInput_1", false);
		start_Hash.put("tFixedFlowInput_1", System.currentTimeMillis());
		
	
	currentComponent="tFixedFlowInput_1";
	
	
		int tos_count_tFixedFlowInput_1 = 0;
		

	    for (int i_tFixedFlowInput_1 = 0 ; i_tFixedFlowInput_1 < 1 ; i_tFixedFlowInput_1++) {
	                	            	
    	            		row4.nada = null;        	            	
    	            	

 



/**
 * [tFixedFlowInput_1 begin ] stop
 */
	
	/**
	 * [tFixedFlowInput_1 main ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_1";
	
	

 


	tos_count_tFixedFlowInput_1++;

/**
 * [tFixedFlowInput_1 main ] stop
 */
	
	/**
	 * [tFixedFlowInput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_1";
	
	

 



/**
 * [tFixedFlowInput_1 process_data_begin ] stop
 */

	
	/**
	 * [tXMLMap_5 main ] start
	 */

	

	
	
	currentComponent="tXMLMap_5";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row4"
						
						);
					}
					


	boolean rejectedInnerJoin_tXMLMap_5 = false;
	boolean rejectedDocInnerJoin_tXMLMap_5 = false;
	boolean mainRowRejected_tXMLMap_5 = false;
	boolean isMatchDocRowtXMLMap_5 = false;
	  
	
				    GenerateDocument_row1 gen_Doc_row1_tXMLMap_5 = new GenerateDocument_row1();
					row1_tmp.body = null;
					
		

			
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tXMLMap_5__Struct Var = Var__tXMLMap_5;
		// ###############################
		// # Output tables

row1 = null;


// # Output table : 'row1'

gen_Doc_row1_tXMLMap_5.generateElements(rejectedDocInnerJoin_tXMLMap_5,row4,Var);

if(row1_tmp.body == null){
row1_tmp.body = new routines.system.Document();
row1_tmp.body.setDocument(gen_Doc_row1_tXMLMap_5.getDocument());
}

row1 = row1_tmp;
row1_save = row1_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tXMLMap_5 = false;



 


	tos_count_tXMLMap_5++;

/**
 * [tXMLMap_5 main ] stop
 */
	
	/**
	 * [tXMLMap_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tXMLMap_5";
	
	

 



/**
 * [tXMLMap_5 process_data_begin ] stop
 */
// Start of branch "row1"
if(row1 != null) { 



	
	/**
	 * [tRESTResponse_3 main ] start
	 */

	

	
	
	currentComponent="tRESTResponse_3";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row1"
						
						);
					}
					

	java.io.OutputStream outputStream_tRESTResponse_3 = (java.io.OutputStream) globalMap.get("restResponseStream");
	boolean responseAlreadySent_tRESTResponse_3 = globalMap.containsKey("restResponse");

	if (null == outputStream_tRESTResponse_3 && responseAlreadySent_tRESTResponse_3) {
		throw new RuntimeException("Rest response already sent.");
	} else if (!globalMap.containsKey("restRequest")) {
		throw new RuntimeException("Not received rest request yet.");
	} else {
		Integer restProviderStatusCode_tRESTResponse_3 = 200;

		Object restProviderResponse_tRESTResponse_3 = null;
		if (null != row1.body) {
			restProviderResponse_tRESTResponse_3 = row1.body.getDocument();
		}

		java.util.Map<String, String> restProviderResponseHeaders_tRESTResponse_3 = new java.util.TreeMap<String, String>(String.CASE_INSENSITIVE_ORDER);
		java.lang.StringBuilder restProviderResponseHeader_cookies_tRESTResponse_3 = new java.lang.StringBuilder();
		final String setCookieHeader = "Set-Cookie";

        if (restProviderResponseHeader_cookies_tRESTResponse_3.length() > 0) {
		    restProviderResponseHeaders_tRESTResponse_3.put(setCookieHeader, restProviderResponseHeader_cookies_tRESTResponse_3.toString());
		}

        java.util.Map<String, Object> restRequest_tRESTResponse_3 = (java.util.Map<String, Object>) globalMap.get("restRequest");
        org.apache.cxf.jaxrs.ext.MessageContext messageContext_tRESTResponse_3 = (org.apache.cxf.jaxrs.ext.MessageContext) restRequest_tRESTResponse_3.get("MESSAGE_CONTEXT");
        

		if (null == outputStream_tRESTResponse_3) {
			java.util.Map<String, Object> restResponse_tRESTResponse_3 = new java.util.HashMap<String, Object>();
			restResponse_tRESTResponse_3.put("BODY", restProviderResponse_tRESTResponse_3);
			restResponse_tRESTResponse_3.put("STATUS", restProviderStatusCode_tRESTResponse_3);
			restResponse_tRESTResponse_3.put("HEADERS", restProviderResponseHeaders_tRESTResponse_3);
			restResponse_tRESTResponse_3.put("drop.json.root.element", Boolean.valueOf(true));
			globalMap.put("restResponse", restResponse_tRESTResponse_3);
			
		} else {

			javax.ws.rs.core.MediaType responseMediaType_tRESTResponse_3 = null;
			if (!responseAlreadySent_tRESTResponse_3) {
				org.apache.cxf.message.Message currentMessage = null;
				if (org.apache.cxf.jaxrs.utils.JAXRSUtils.getCurrentMessage() != null) {
					currentMessage = org.apache.cxf.jaxrs.utils.JAXRSUtils.getCurrentMessage();
				} else {
					currentMessage = ((org.apache.cxf.message.Message)restRequest_tRESTResponse_3.get("CURRENT_MESSAGE"));
				}

				if (currentMessage != null && currentMessage.getExchange() != null) {
					currentMessage.getExchange().put(StreamingDOM4JProvider.SUPRESS_XML_DECLARATION, true);
				}

				messageContext_tRESTResponse_3.put(org.apache.cxf.message.Message.RESPONSE_CODE, restProviderStatusCode_tRESTResponse_3);
				javax.ws.rs.core.MultivaluedMap<String, String> headersMultivaluedMap_tRESTResponse_3 = new org.apache.cxf.jaxrs.impl.MetadataMap<String, String>();
				for (java.util.Map.Entry<String, String> multivaluedHeader : restProviderResponseHeaders_tRESTResponse_3.entrySet()) {
					headersMultivaluedMap_tRESTResponse_3.putSingle(multivaluedHeader.getKey(), multivaluedHeader.getValue());
				}
				messageContext_tRESTResponse_3.put(org.apache.cxf.message.Message.PROTOCOL_HEADERS, headersMultivaluedMap_tRESTResponse_3);

				String responseContentType_tRESTResponse_3 = null;
				
				if (currentMessage != null && currentMessage.getExchange() != null) {
					responseContentType_tRESTResponse_3 = (String) currentMessage.getExchange().get(org.apache.cxf.message.Message.CONTENT_TYPE);
				}
					
				if (null == responseContentType_tRESTResponse_3) {
					// this should not be needed, just in case. set it to the first value in the sorted list returned from HttpHeaders
					responseMediaType_tRESTResponse_3 = messageContext_tRESTResponse_3.getHttpHeaders().getAcceptableMediaTypes().get(0);
				} else {
					responseMediaType_tRESTResponse_3 = org.apache.cxf.jaxrs.utils.JAXRSUtils.toMediaType(responseContentType_tRESTResponse_3);
				}
				globalMap.put("restResponseMediaType", responseMediaType_tRESTResponse_3);

				String responseMediaSubType_tRESTResponse_3 = responseMediaType_tRESTResponse_3.getSubtype();
				if (responseMediaSubType_tRESTResponse_3.equals("xml") || responseMediaSubType_tRESTResponse_3.endsWith("+xml")) {
					outputStream_tRESTResponse_3.write("<wrapper>".getBytes());
					globalMap.put("restResponseWrappingClosure", "</wrapper>");
				}
				if (responseMediaSubType_tRESTResponse_3.equals("json") || responseMediaSubType_tRESTResponse_3.endsWith("+json")) {
					outputStream_tRESTResponse_3.write("[".getBytes());
					globalMap.put("restResponseWrappingClosure", "]");
				}

				globalMap.put("restResponse", true);
			} else {
				responseMediaType_tRESTResponse_3 = (javax.ws.rs.core.MediaType) globalMap.get("restResponseMediaType");
			}

			if (null != restProviderResponse_tRESTResponse_3) {
				String responseMediaSubType_tRESTResponse_3 = responseMediaType_tRESTResponse_3.getSubtype();
				if (responseMediaSubType_tRESTResponse_3.equals("json") || responseMediaSubType_tRESTResponse_3.endsWith("+json")) {
					if (globalMap.containsKey("restResponseJsonStarted")) {
						outputStream_tRESTResponse_3.write(",".getBytes());
					} else {
						globalMap.put("restResponseJsonStarted", true);
					}
				}

				Class<? extends Object> responseBodyClass_tRESTResponse_3 = restProviderResponse_tRESTResponse_3.getClass();
				javax.ws.rs.ext.Providers messageBodyProviders_tRESTResponse_3 = messageContext_tRESTResponse_3.getProviders();
				javax.ws.rs.ext.MessageBodyWriter messageBodyWriter_tRESTResponse_3 = messageBodyProviders_tRESTResponse_3.getMessageBodyWriter(
						responseBodyClass_tRESTResponse_3, responseBodyClass_tRESTResponse_3, null, responseMediaType_tRESTResponse_3);

                if (messageBodyWriter_tRESTResponse_3 instanceof StreamingDOM4JProvider) {
                    ((StreamingDOM4JProvider)messageBodyWriter_tRESTResponse_3).setGlobalMap(globalMap);
                }

				messageBodyWriter_tRESTResponse_3.writeTo(restProviderResponse_tRESTResponse_3, responseBodyClass_tRESTResponse_3, responseBodyClass_tRESTResponse_3,
						new java.lang.annotation.Annotation[] {}, responseMediaType_tRESTResponse_3, null, outputStream_tRESTResponse_3);
			}
			// initial variant
			//outputStream_tRESTResponse_3.write(String.valueOf(restProviderResponse_tRESTResponse_3).getBytes());
			outputStream_tRESTResponse_3.flush();
		}
	}

 


	tos_count_tRESTResponse_3++;

/**
 * [tRESTResponse_3 main ] stop
 */
	
	/**
	 * [tRESTResponse_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tRESTResponse_3";
	
	

 



/**
 * [tRESTResponse_3 process_data_begin ] stop
 */
	
	/**
	 * [tRESTResponse_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tRESTResponse_3";
	
	

 



/**
 * [tRESTResponse_3 process_data_end ] stop
 */

} // End of branch "row1"




	
	/**
	 * [tXMLMap_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tXMLMap_5";
	
	

 



/**
 * [tXMLMap_5 process_data_end ] stop
 */



	
	/**
	 * [tFixedFlowInput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_1";
	
	

 



/**
 * [tFixedFlowInput_1 process_data_end ] stop
 */
	
	/**
	 * [tFixedFlowInput_1 end ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_1";
	
	

        }
        globalMap.put("tFixedFlowInput_1_NB_LINE", 1);        

 

ok_Hash.put("tFixedFlowInput_1", true);
end_Hash.put("tFixedFlowInput_1", System.currentTimeMillis());




/**
 * [tFixedFlowInput_1 end ] stop
 */

	
	/**
	 * [tXMLMap_5 end ] start
	 */

	

	
	
	currentComponent="tXMLMap_5";
	
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row4");
			  	}
			  	
 

ok_Hash.put("tXMLMap_5", true);
end_Hash.put("tXMLMap_5", System.currentTimeMillis());




/**
 * [tXMLMap_5 end ] stop
 */

	
	/**
	 * [tRESTResponse_3 end ] start
	 */

	

	
	
	currentComponent="tRESTResponse_3";
	
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row1");
			  	}
			  	
 

ok_Hash.put("tRESTResponse_3", true);
end_Hash.put("tRESTResponse_3", System.currentTimeMillis());




/**
 * [tRESTResponse_3 end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFixedFlowInput_1 finally ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_1";
	
	

 



/**
 * [tFixedFlowInput_1 finally ] stop
 */

	
	/**
	 * [tXMLMap_5 finally ] start
	 */

	

	
	
	currentComponent="tXMLMap_5";
	
	

 



/**
 * [tXMLMap_5 finally ] stop
 */

	
	/**
	 * [tRESTResponse_3 finally ] start
	 */

	

	
	
	currentComponent="tRESTResponse_3";
	
	

 



/**
 * [tRESTResponse_3 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFixedFlowInput_1_SUBPROCESS_STATE", 1);
	}
	


public static class copyOfcopyOfidNullStruct implements routines.system.IPersistableRow<copyOfcopyOfidNullStruct> {
    final static byte[] commonByteArrayLock_AFI_CARGUE_SIATH_ServiceCargueSiath = new byte[0];
    static byte[] commonByteArray_AFI_CARGUE_SIATH_ServiceCargueSiath = new byte[0];

	
			    public routines.system.Document body;

				public routines.system.Document getBody () {
					return this.body;
				}

				public Boolean bodyIsNullable(){
				    return true;
				}
				public Boolean bodyIsKey(){
				    return false;
				}
				public Integer bodyLength(){
				    return 0;
				}
				public Integer bodyPrecision(){
				    return 0;
				}
				public String bodyDefault(){
				
					return "";
				
				}
				public String bodyComment(){
				
				    return null;
				
				}
				public String bodyPattern(){
				
				    return null;
				
				}
				public String bodyOriginalDbColumnName(){
				
					return "body";
				
				}

				



    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_CARGUE_SIATH_ServiceCargueSiath) {

        	try {

        		int length = 0;
		
						this.body = (routines.system.Document) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_CARGUE_SIATH_ServiceCargueSiath) {

        	try {

        		int length = 0;
		
						this.body = (routines.system.Document) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Document
				
       			    	dos.writeObject(this.body);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Document
				
						dos.clearInstanceCache();
						dos.writeObject(this.body);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("body="+String.valueOf(body));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(copyOfcopyOfidNullStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row16Struct implements routines.system.IPersistableRow<row16Struct> {
    final static byte[] commonByteArrayLock_AFI_CARGUE_SIATH_ServiceCargueSiath = new byte[0];
    static byte[] commonByteArray_AFI_CARGUE_SIATH_ServiceCargueSiath = new byte[0];

	
			    public java.util.Date moment;

				public java.util.Date getMoment () {
					return this.moment;
				}

				public Boolean momentIsNullable(){
				    return true;
				}
				public Boolean momentIsKey(){
				    return false;
				}
				public Integer momentLength(){
				    return 0;
				}
				public Integer momentPrecision(){
				    return 0;
				}
				public String momentDefault(){
				
					return "";
				
				}
				public String momentComment(){
				
				    return null;
				
				}
				public String momentPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String momentOriginalDbColumnName(){
				
					return "moment";
				
				}

				
			    public String pid;

				public String getPid () {
					return this.pid;
				}

				public Boolean pidIsNullable(){
				    return true;
				}
				public Boolean pidIsKey(){
				    return false;
				}
				public Integer pidLength(){
				    return 20;
				}
				public Integer pidPrecision(){
				    return 0;
				}
				public String pidDefault(){
				
					return "";
				
				}
				public String pidComment(){
				
				    return null;
				
				}
				public String pidPattern(){
				
				    return null;
				
				}
				public String pidOriginalDbColumnName(){
				
					return "pid";
				
				}

				
			    public String root_pid;

				public String getRoot_pid () {
					return this.root_pid;
				}

				public Boolean root_pidIsNullable(){
				    return true;
				}
				public Boolean root_pidIsKey(){
				    return false;
				}
				public Integer root_pidLength(){
				    return 20;
				}
				public Integer root_pidPrecision(){
				    return 0;
				}
				public String root_pidDefault(){
				
					return "";
				
				}
				public String root_pidComment(){
				
				    return null;
				
				}
				public String root_pidPattern(){
				
				    return null;
				
				}
				public String root_pidOriginalDbColumnName(){
				
					return "root_pid";
				
				}

				
			    public String father_pid;

				public String getFather_pid () {
					return this.father_pid;
				}

				public Boolean father_pidIsNullable(){
				    return true;
				}
				public Boolean father_pidIsKey(){
				    return false;
				}
				public Integer father_pidLength(){
				    return 20;
				}
				public Integer father_pidPrecision(){
				    return 0;
				}
				public String father_pidDefault(){
				
					return "";
				
				}
				public String father_pidComment(){
				
				    return null;
				
				}
				public String father_pidPattern(){
				
				    return null;
				
				}
				public String father_pidOriginalDbColumnName(){
				
					return "father_pid";
				
				}

				
			    public String project;

				public String getProject () {
					return this.project;
				}

				public Boolean projectIsNullable(){
				    return true;
				}
				public Boolean projectIsKey(){
				    return false;
				}
				public Integer projectLength(){
				    return 50;
				}
				public Integer projectPrecision(){
				    return 0;
				}
				public String projectDefault(){
				
					return "";
				
				}
				public String projectComment(){
				
				    return null;
				
				}
				public String projectPattern(){
				
				    return null;
				
				}
				public String projectOriginalDbColumnName(){
				
					return "project";
				
				}

				
			    public String job;

				public String getJob () {
					return this.job;
				}

				public Boolean jobIsNullable(){
				    return true;
				}
				public Boolean jobIsKey(){
				    return false;
				}
				public Integer jobLength(){
				    return 255;
				}
				public Integer jobPrecision(){
				    return 0;
				}
				public String jobDefault(){
				
					return "";
				
				}
				public String jobComment(){
				
				    return null;
				
				}
				public String jobPattern(){
				
				    return null;
				
				}
				public String jobOriginalDbColumnName(){
				
					return "job";
				
				}

				
			    public String context;

				public String getContext () {
					return this.context;
				}

				public Boolean contextIsNullable(){
				    return true;
				}
				public Boolean contextIsKey(){
				    return false;
				}
				public Integer contextLength(){
				    return 50;
				}
				public Integer contextPrecision(){
				    return 0;
				}
				public String contextDefault(){
				
					return "";
				
				}
				public String contextComment(){
				
				    return null;
				
				}
				public String contextPattern(){
				
				    return null;
				
				}
				public String contextOriginalDbColumnName(){
				
					return "context";
				
				}

				
			    public Integer priority;

				public Integer getPriority () {
					return this.priority;
				}

				public Boolean priorityIsNullable(){
				    return true;
				}
				public Boolean priorityIsKey(){
				    return false;
				}
				public Integer priorityLength(){
				    return 3;
				}
				public Integer priorityPrecision(){
				    return 0;
				}
				public String priorityDefault(){
				
					return "";
				
				}
				public String priorityComment(){
				
				    return null;
				
				}
				public String priorityPattern(){
				
				    return null;
				
				}
				public String priorityOriginalDbColumnName(){
				
					return "priority";
				
				}

				
			    public String type;

				public String getType () {
					return this.type;
				}

				public Boolean typeIsNullable(){
				    return true;
				}
				public Boolean typeIsKey(){
				    return false;
				}
				public Integer typeLength(){
				    return 255;
				}
				public Integer typePrecision(){
				    return 0;
				}
				public String typeDefault(){
				
					return "";
				
				}
				public String typeComment(){
				
				    return null;
				
				}
				public String typePattern(){
				
				    return null;
				
				}
				public String typeOriginalDbColumnName(){
				
					return "type";
				
				}

				
			    public String origin;

				public String getOrigin () {
					return this.origin;
				}

				public Boolean originIsNullable(){
				    return true;
				}
				public Boolean originIsKey(){
				    return false;
				}
				public Integer originLength(){
				    return 255;
				}
				public Integer originPrecision(){
				    return 0;
				}
				public String originDefault(){
				
					return "";
				
				}
				public String originComment(){
				
				    return null;
				
				}
				public String originPattern(){
				
				    return null;
				
				}
				public String originOriginalDbColumnName(){
				
					return "origin";
				
				}

				
			    public String message;

				public String getMessage () {
					return this.message;
				}

				public Boolean messageIsNullable(){
				    return true;
				}
				public Boolean messageIsKey(){
				    return false;
				}
				public Integer messageLength(){
				    return 255;
				}
				public Integer messagePrecision(){
				    return 0;
				}
				public String messageDefault(){
				
					return "";
				
				}
				public String messageComment(){
				
				    return null;
				
				}
				public String messagePattern(){
				
				    return null;
				
				}
				public String messageOriginalDbColumnName(){
				
					return "message";
				
				}

				
			    public Integer code;

				public Integer getCode () {
					return this.code;
				}

				public Boolean codeIsNullable(){
				    return true;
				}
				public Boolean codeIsKey(){
				    return false;
				}
				public Integer codeLength(){
				    return 3;
				}
				public Integer codePrecision(){
				    return 0;
				}
				public String codeDefault(){
				
					return "";
				
				}
				public String codeComment(){
				
				    return null;
				
				}
				public String codePattern(){
				
				    return null;
				
				}
				public String codeOriginalDbColumnName(){
				
					return "code";
				
				}

				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_CARGUE_SIATH_ServiceCargueSiath.length) {
				if(length < 1024 && commonByteArray_AFI_CARGUE_SIATH_ServiceCargueSiath.length == 0) {
   					commonByteArray_AFI_CARGUE_SIATH_ServiceCargueSiath = new byte[1024];
				} else {
   					commonByteArray_AFI_CARGUE_SIATH_ServiceCargueSiath = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_CARGUE_SIATH_ServiceCargueSiath, 0, length);
			strReturn = new String(commonByteArray_AFI_CARGUE_SIATH_ServiceCargueSiath, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_CARGUE_SIATH_ServiceCargueSiath.length) {
				if(length < 1024 && commonByteArray_AFI_CARGUE_SIATH_ServiceCargueSiath.length == 0) {
   					commonByteArray_AFI_CARGUE_SIATH_ServiceCargueSiath = new byte[1024];
				} else {
   					commonByteArray_AFI_CARGUE_SIATH_ServiceCargueSiath = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_CARGUE_SIATH_ServiceCargueSiath, 0, length);
			strReturn = new String(commonByteArray_AFI_CARGUE_SIATH_ServiceCargueSiath, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_CARGUE_SIATH_ServiceCargueSiath) {

        	try {

        		int length = 0;
		
					this.moment = readDate(dis);
					
					this.pid = readString(dis);
					
					this.root_pid = readString(dis);
					
					this.father_pid = readString(dis);
					
					this.project = readString(dis);
					
					this.job = readString(dis);
					
					this.context = readString(dis);
					
						this.priority = readInteger(dis);
					
					this.type = readString(dis);
					
					this.origin = readString(dis);
					
					this.message = readString(dis);
					
						this.code = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_CARGUE_SIATH_ServiceCargueSiath) {

        	try {

        		int length = 0;
		
					this.moment = readDate(dis);
					
					this.pid = readString(dis);
					
					this.root_pid = readString(dis);
					
					this.father_pid = readString(dis);
					
					this.project = readString(dis);
					
					this.job = readString(dis);
					
					this.context = readString(dis);
					
						this.priority = readInteger(dis);
					
					this.type = readString(dis);
					
					this.origin = readString(dis);
					
					this.message = readString(dis);
					
						this.code = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.pid,dos);
					
					// String
				
						writeString(this.root_pid,dos);
					
					// String
				
						writeString(this.father_pid,dos);
					
					// String
				
						writeString(this.project,dos);
					
					// String
				
						writeString(this.job,dos);
					
					// String
				
						writeString(this.context,dos);
					
					// Integer
				
						writeInteger(this.priority,dos);
					
					// String
				
						writeString(this.type,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.message,dos);
					
					// Integer
				
						writeInteger(this.code,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.pid,dos);
					
					// String
				
						writeString(this.root_pid,dos);
					
					// String
				
						writeString(this.father_pid,dos);
					
					// String
				
						writeString(this.project,dos);
					
					// String
				
						writeString(this.job,dos);
					
					// String
				
						writeString(this.context,dos);
					
					// Integer
				
						writeInteger(this.priority,dos);
					
					// String
				
						writeString(this.type,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.message,dos);
					
					// Integer
				
						writeInteger(this.code,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("moment="+String.valueOf(moment));
		sb.append(",pid="+pid);
		sb.append(",root_pid="+root_pid);
		sb.append(",father_pid="+father_pid);
		sb.append(",project="+project);
		sb.append(",job="+job);
		sb.append(",context="+context);
		sb.append(",priority="+String.valueOf(priority));
		sb.append(",type="+type);
		sb.append(",origin="+origin);
		sb.append(",message="+message);
		sb.append(",code="+String.valueOf(code));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row16Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tLogCatcher_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tLogCatcher_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row16Struct row16 = new row16Struct();
copyOfcopyOfidNullStruct copyOfcopyOfidNull = new copyOfcopyOfidNullStruct();





	
	/**
	 * [tRESTResponse_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tRESTResponse_5", false);
		start_Hash.put("tRESTResponse_5", System.currentTimeMillis());
		
	
	currentComponent="tRESTResponse_5";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"copyOfcopyOfidNull");
					}
				
		int tos_count_tRESTResponse_5 = 0;
		

 



/**
 * [tRESTResponse_5 begin ] stop
 */



	
	/**
	 * [tXMLMap_7 begin ] start
	 */

	

	
		
		ok_Hash.put("tXMLMap_7", false);
		start_Hash.put("tXMLMap_7", System.currentTimeMillis());
		
	
	currentComponent="tXMLMap_7";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row16");
					}
				
		int tos_count_tXMLMap_7 = 0;
		

	
	
//===============================input xml init part===============================
class XML_API_tXMLMap_7{
	public boolean isDefNull(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
        if (node != null && node instanceof org.dom4j.Element) {
        	org.dom4j.Attribute attri = ((org.dom4j.Element)node).attribute("nil");
        	if(attri != null && ("true").equals(attri.getText())){
            	return true;
            }
        }
        return false;
    }

    public boolean isMissing(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
        return node == null ? true : false;
    }

    public boolean isEmpty(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
        if (node != null) {
            return node.getText().length() == 0;
        }
        return false;
    }
}
	class Var__tXMLMap_7__Struct {
	}
	Var__tXMLMap_7__Struct Var__tXMLMap_7 = new Var__tXMLMap_7__Struct();
// ###############################
// # Outputs initialization
copyOfcopyOfidNullStruct copyOfcopyOfidNull_tmp = new copyOfcopyOfidNullStruct();
copyOfcopyOfidNullStruct copyOfcopyOfidNull_save = null;
// ###############################
		int nb_line_tXMLMap_7 = 0; 
	
    XML_API_tXMLMap_7 xml_api_tXMLMap_7 = new XML_API_tXMLMap_7();

class GenerateDocument_copyOfcopyOfidNull {

	java.util.Map<String,Object> valueMap = null;
	
	routines.system.DocumentGenerateOrderHelper orderHelper = new routines.system.DocumentGenerateOrderHelper(1);
		
	org.dom4j.Document doc = null;
	
	org.dom4j.Element root4Group = null;
	
	org.dom4j.io.OutputFormat format = null;
	
	java.util.List<java.util.List<String>> groupbyList = null;
	java.util.List<org.dom4j.Element> groupElementList = null;
	int order = 0;
	
	boolean isFirst = true;
	
	boolean	needRoot = true;
	
	String currentValue = null;
	
    public GenerateDocument_copyOfcopyOfidNull() {
//    	this.treeNodeAPI = treeNodeAPI;
    	
    	valueMap = new java.util.HashMap<String,Object>();
    	
    	groupbyList =  new java.util.ArrayList<java.util.List<String>>();
		groupElementList = new java.util.ArrayList<org.dom4j.Element>();
    	
    	doc = org.dom4j.DocumentHelper.createDocument();
    	format = org.dom4j.io.OutputFormat.createPrettyPrint();
    	format.setTrimText(false);
    }
    
    public org.dom4j.Document getDocument(){
		generateOk();
    	return this.doc;
    }
    
    //do some work after document has been generated
    private void generateOk() {
    	routines.system.NestXMLTool.replaceDefaultNameSpace(this.doc.getRootElement(),null);
    }
	
	//We generate the TreeNode_API object only if there is a document in the main input table.
    void generateElements(boolean isInnerJoin, row16Struct row16, Var__tXMLMap_7__Struct Var
	) {
	
	
	/*if(this.treeNodeAPI==null) {
		this.treeNodeAPI = treeNodeAPI;
	}*/
	
	org.dom4j.Element subTreeRootParent = null;
// build root xml tree 
if (needRoot) {
	needRoot=false;
		org.dom4j.Element root = null;
				root = org.dom4j.DocumentHelper.createElement("EtlResponse");
				doc.add(root);
		subTreeRootParent = root;
		org.dom4j.Element root_0 = null;
				root_0 = root.addElement("State");
		valueMap.put("root_0",0);
		if(valueMap.get("root_0")!=null) {
			routines.system.NestXMLTool.setText(root_0,FormatterUtils.fm(valueMap.get("root_0"),null));
		}
		org.dom4j.Element root_1 = null;
				root_1 = root.addElement("Message");
		valueMap.put("root_1","Error de ejecución del proceso");
		if(valueMap.get("root_1")!=null) {
			routines.system.NestXMLTool.setText(root_1,FormatterUtils.fm(valueMap.get("root_1"),null));
		}
		org.dom4j.Element root_2 = null;
				root_2 = root.addElement("ErrorBackTrace");
		valueMap.put("root_2", row16.message);
		if(valueMap.get("root_2")!=null) {
			routines.system.NestXMLTool.setText(root_2,FormatterUtils.fm(valueMap.get("root_2"),null));
		}
		org.dom4j.Element root_3 = null;
				root_3 = root.addElement("Result");
		root4Group = subTreeRootParent;
	}else{
		subTreeRootParent=root4Group;
	}
	/* build group xml tree */
	boolean isNewElement = false;
		isNewElement = false;
		}
    }


	            

 



/**
 * [tXMLMap_7 begin ] stop
 */



	
	/**
	 * [tLogCatcher_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogCatcher_1", false);
		start_Hash.put("tLogCatcher_1", System.currentTimeMillis());
		
	
	currentComponent="tLogCatcher_1";
	
	
		int tos_count_tLogCatcher_1 = 0;
		

try {
	for (LogCatcherUtils.LogCatcherMessage lcm : tLogCatcher_1.getMessages()) {
		row16.type = lcm.getType();
		row16.origin = (lcm.getOrigin()==null || lcm.getOrigin().length()<1 ? null : lcm.getOrigin());
		row16.priority = lcm.getPriority();
		row16.message = lcm.getMessage();
		row16.code = lcm.getCode();
		
		row16.moment = java.util.Calendar.getInstance().getTime();
	
    	row16.pid = pid;
		row16.root_pid = rootPid;
		row16.father_pid = fatherPid;
	
    	row16.project = projectName;
    	row16.job = jobName;
    	row16.context = contextStr;
    		
 



/**
 * [tLogCatcher_1 begin ] stop
 */
	
	/**
	 * [tLogCatcher_1 main ] start
	 */

	

	
	
	currentComponent="tLogCatcher_1";
	
	

 


	tos_count_tLogCatcher_1++;

/**
 * [tLogCatcher_1 main ] stop
 */
	
	/**
	 * [tLogCatcher_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogCatcher_1";
	
	

 



/**
 * [tLogCatcher_1 process_data_begin ] stop
 */

	
	/**
	 * [tXMLMap_7 main ] start
	 */

	

	
	
	currentComponent="tXMLMap_7";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row16"
						
						);
					}
					


	boolean rejectedInnerJoin_tXMLMap_7 = false;
	boolean rejectedDocInnerJoin_tXMLMap_7 = false;
	boolean mainRowRejected_tXMLMap_7 = false;
	boolean isMatchDocRowtXMLMap_7 = false;
	  
	
				    GenerateDocument_copyOfcopyOfidNull gen_Doc_copyOfcopyOfidNull_tXMLMap_7 = new GenerateDocument_copyOfcopyOfidNull();
					copyOfcopyOfidNull_tmp.body = null;
					
		

			
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tXMLMap_7__Struct Var = Var__tXMLMap_7;
		// ###############################
		// # Output tables

copyOfcopyOfidNull = null;


// # Output table : 'copyOfcopyOfidNull'

gen_Doc_copyOfcopyOfidNull_tXMLMap_7.generateElements(rejectedDocInnerJoin_tXMLMap_7,row16,Var);

if(copyOfcopyOfidNull_tmp.body == null){
copyOfcopyOfidNull_tmp.body = new routines.system.Document();
copyOfcopyOfidNull_tmp.body.setDocument(gen_Doc_copyOfcopyOfidNull_tXMLMap_7.getDocument());
}

copyOfcopyOfidNull = copyOfcopyOfidNull_tmp;
copyOfcopyOfidNull_save = copyOfcopyOfidNull_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tXMLMap_7 = false;



 


	tos_count_tXMLMap_7++;

/**
 * [tXMLMap_7 main ] stop
 */
	
	/**
	 * [tXMLMap_7 process_data_begin ] start
	 */

	

	
	
	currentComponent="tXMLMap_7";
	
	

 



/**
 * [tXMLMap_7 process_data_begin ] stop
 */
// Start of branch "copyOfcopyOfidNull"
if(copyOfcopyOfidNull != null) { 



	
	/**
	 * [tRESTResponse_5 main ] start
	 */

	

	
	
	currentComponent="tRESTResponse_5";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"copyOfcopyOfidNull"
						
						);
					}
					

	java.io.OutputStream outputStream_tRESTResponse_5 = (java.io.OutputStream) globalMap.get("restResponseStream");
	boolean responseAlreadySent_tRESTResponse_5 = globalMap.containsKey("restResponse");

	if (null == outputStream_tRESTResponse_5 && responseAlreadySent_tRESTResponse_5) {
		throw new RuntimeException("Rest response already sent.");
	} else if (!globalMap.containsKey("restRequest")) {
		throw new RuntimeException("Not received rest request yet.");
	} else {
		Integer restProviderStatusCode_tRESTResponse_5 = 500;

		Object restProviderResponse_tRESTResponse_5 = null;
		if (null != copyOfcopyOfidNull.body) {
			restProviderResponse_tRESTResponse_5 = copyOfcopyOfidNull.body.getDocument();
		}

		java.util.Map<String, String> restProviderResponseHeaders_tRESTResponse_5 = new java.util.TreeMap<String, String>(String.CASE_INSENSITIVE_ORDER);
		java.lang.StringBuilder restProviderResponseHeader_cookies_tRESTResponse_5 = new java.lang.StringBuilder();
		final String setCookieHeader = "Set-Cookie";

        if (restProviderResponseHeader_cookies_tRESTResponse_5.length() > 0) {
		    restProviderResponseHeaders_tRESTResponse_5.put(setCookieHeader, restProviderResponseHeader_cookies_tRESTResponse_5.toString());
		}

        java.util.Map<String, Object> restRequest_tRESTResponse_5 = (java.util.Map<String, Object>) globalMap.get("restRequest");
        org.apache.cxf.jaxrs.ext.MessageContext messageContext_tRESTResponse_5 = (org.apache.cxf.jaxrs.ext.MessageContext) restRequest_tRESTResponse_5.get("MESSAGE_CONTEXT");
        

		if (null == outputStream_tRESTResponse_5) {
			java.util.Map<String, Object> restResponse_tRESTResponse_5 = new java.util.HashMap<String, Object>();
			restResponse_tRESTResponse_5.put("BODY", restProviderResponse_tRESTResponse_5);
			restResponse_tRESTResponse_5.put("STATUS", restProviderStatusCode_tRESTResponse_5);
			restResponse_tRESTResponse_5.put("HEADERS", restProviderResponseHeaders_tRESTResponse_5);
			restResponse_tRESTResponse_5.put("drop.json.root.element", Boolean.valueOf(true));
			globalMap.put("restResponse", restResponse_tRESTResponse_5);
			
		} else {

			javax.ws.rs.core.MediaType responseMediaType_tRESTResponse_5 = null;
			if (!responseAlreadySent_tRESTResponse_5) {
				org.apache.cxf.message.Message currentMessage = null;
				if (org.apache.cxf.jaxrs.utils.JAXRSUtils.getCurrentMessage() != null) {
					currentMessage = org.apache.cxf.jaxrs.utils.JAXRSUtils.getCurrentMessage();
				} else {
					currentMessage = ((org.apache.cxf.message.Message)restRequest_tRESTResponse_5.get("CURRENT_MESSAGE"));
				}

				if (currentMessage != null && currentMessage.getExchange() != null) {
					currentMessage.getExchange().put(StreamingDOM4JProvider.SUPRESS_XML_DECLARATION, true);
				}

				messageContext_tRESTResponse_5.put(org.apache.cxf.message.Message.RESPONSE_CODE, restProviderStatusCode_tRESTResponse_5);
				javax.ws.rs.core.MultivaluedMap<String, String> headersMultivaluedMap_tRESTResponse_5 = new org.apache.cxf.jaxrs.impl.MetadataMap<String, String>();
				for (java.util.Map.Entry<String, String> multivaluedHeader : restProviderResponseHeaders_tRESTResponse_5.entrySet()) {
					headersMultivaluedMap_tRESTResponse_5.putSingle(multivaluedHeader.getKey(), multivaluedHeader.getValue());
				}
				messageContext_tRESTResponse_5.put(org.apache.cxf.message.Message.PROTOCOL_HEADERS, headersMultivaluedMap_tRESTResponse_5);

				String responseContentType_tRESTResponse_5 = null;
				
				if (currentMessage != null && currentMessage.getExchange() != null) {
					responseContentType_tRESTResponse_5 = (String) currentMessage.getExchange().get(org.apache.cxf.message.Message.CONTENT_TYPE);
				}
					
				if (null == responseContentType_tRESTResponse_5) {
					// this should not be needed, just in case. set it to the first value in the sorted list returned from HttpHeaders
					responseMediaType_tRESTResponse_5 = messageContext_tRESTResponse_5.getHttpHeaders().getAcceptableMediaTypes().get(0);
				} else {
					responseMediaType_tRESTResponse_5 = org.apache.cxf.jaxrs.utils.JAXRSUtils.toMediaType(responseContentType_tRESTResponse_5);
				}
				globalMap.put("restResponseMediaType", responseMediaType_tRESTResponse_5);

				String responseMediaSubType_tRESTResponse_5 = responseMediaType_tRESTResponse_5.getSubtype();
				if (responseMediaSubType_tRESTResponse_5.equals("xml") || responseMediaSubType_tRESTResponse_5.endsWith("+xml")) {
					outputStream_tRESTResponse_5.write("<wrapper>".getBytes());
					globalMap.put("restResponseWrappingClosure", "</wrapper>");
				}
				if (responseMediaSubType_tRESTResponse_5.equals("json") || responseMediaSubType_tRESTResponse_5.endsWith("+json")) {
					outputStream_tRESTResponse_5.write("[".getBytes());
					globalMap.put("restResponseWrappingClosure", "]");
				}

				globalMap.put("restResponse", true);
			} else {
				responseMediaType_tRESTResponse_5 = (javax.ws.rs.core.MediaType) globalMap.get("restResponseMediaType");
			}

			if (null != restProviderResponse_tRESTResponse_5) {
				String responseMediaSubType_tRESTResponse_5 = responseMediaType_tRESTResponse_5.getSubtype();
				if (responseMediaSubType_tRESTResponse_5.equals("json") || responseMediaSubType_tRESTResponse_5.endsWith("+json")) {
					if (globalMap.containsKey("restResponseJsonStarted")) {
						outputStream_tRESTResponse_5.write(",".getBytes());
					} else {
						globalMap.put("restResponseJsonStarted", true);
					}
				}

				Class<? extends Object> responseBodyClass_tRESTResponse_5 = restProviderResponse_tRESTResponse_5.getClass();
				javax.ws.rs.ext.Providers messageBodyProviders_tRESTResponse_5 = messageContext_tRESTResponse_5.getProviders();
				javax.ws.rs.ext.MessageBodyWriter messageBodyWriter_tRESTResponse_5 = messageBodyProviders_tRESTResponse_5.getMessageBodyWriter(
						responseBodyClass_tRESTResponse_5, responseBodyClass_tRESTResponse_5, null, responseMediaType_tRESTResponse_5);

                if (messageBodyWriter_tRESTResponse_5 instanceof StreamingDOM4JProvider) {
                    ((StreamingDOM4JProvider)messageBodyWriter_tRESTResponse_5).setGlobalMap(globalMap);
                }

				messageBodyWriter_tRESTResponse_5.writeTo(restProviderResponse_tRESTResponse_5, responseBodyClass_tRESTResponse_5, responseBodyClass_tRESTResponse_5,
						new java.lang.annotation.Annotation[] {}, responseMediaType_tRESTResponse_5, null, outputStream_tRESTResponse_5);
			}
			// initial variant
			//outputStream_tRESTResponse_5.write(String.valueOf(restProviderResponse_tRESTResponse_5).getBytes());
			outputStream_tRESTResponse_5.flush();
		}
	}

 


	tos_count_tRESTResponse_5++;

/**
 * [tRESTResponse_5 main ] stop
 */
	
	/**
	 * [tRESTResponse_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tRESTResponse_5";
	
	

 



/**
 * [tRESTResponse_5 process_data_begin ] stop
 */
	
	/**
	 * [tRESTResponse_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tRESTResponse_5";
	
	

 



/**
 * [tRESTResponse_5 process_data_end ] stop
 */

} // End of branch "copyOfcopyOfidNull"




	
	/**
	 * [tXMLMap_7 process_data_end ] start
	 */

	

	
	
	currentComponent="tXMLMap_7";
	
	

 



/**
 * [tXMLMap_7 process_data_end ] stop
 */



	
	/**
	 * [tLogCatcher_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogCatcher_1";
	
	

 



/**
 * [tLogCatcher_1 process_data_end ] stop
 */
	
	/**
	 * [tLogCatcher_1 end ] start
	 */

	

	
	
	currentComponent="tLogCatcher_1";
	
	
	}
} catch (Exception e_tLogCatcher_1) {
globalMap.put("tLogCatcher_1_ERROR_MESSAGE",e_tLogCatcher_1.getMessage());
	logIgnoredError(String.format("tLogCatcher_1 - tLogCatcher failed to process log message(s) due to internal error: %s", e_tLogCatcher_1), e_tLogCatcher_1);
}

 

ok_Hash.put("tLogCatcher_1", true);
end_Hash.put("tLogCatcher_1", System.currentTimeMillis());




/**
 * [tLogCatcher_1 end ] stop
 */

	
	/**
	 * [tXMLMap_7 end ] start
	 */

	

	
	
	currentComponent="tXMLMap_7";
	
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row16");
			  	}
			  	
 

ok_Hash.put("tXMLMap_7", true);
end_Hash.put("tXMLMap_7", System.currentTimeMillis());




/**
 * [tXMLMap_7 end ] stop
 */

	
	/**
	 * [tRESTResponse_5 end ] start
	 */

	

	
	
	currentComponent="tRESTResponse_5";
	
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"copyOfcopyOfidNull");
			  	}
			  	
 

ok_Hash.put("tRESTResponse_5", true);
end_Hash.put("tRESTResponse_5", System.currentTimeMillis());




/**
 * [tRESTResponse_5 end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tLogCatcher_1 finally ] start
	 */

	

	
	
	currentComponent="tLogCatcher_1";
	
	

 



/**
 * [tLogCatcher_1 finally ] stop
 */

	
	/**
	 * [tXMLMap_7 finally ] start
	 */

	

	
	
	currentComponent="tXMLMap_7";
	
	

 



/**
 * [tXMLMap_7 finally ] stop
 */

	
	/**
	 * [tRESTResponse_5 finally ] start
	 */

	

	
	
	currentComponent="tRESTResponse_5";
	
	

 



/**
 * [tRESTResponse_5 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tLogCatcher_1_SUBPROCESS_STATE", 1);
	}
	


public static class row2Struct implements routines.system.IPersistableRow<row2Struct> {
    final static byte[] commonByteArrayLock_AFI_CARGUE_SIATH_ServiceCargueSiath = new byte[0];
    static byte[] commonByteArray_AFI_CARGUE_SIATH_ServiceCargueSiath = new byte[0];

	



    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_CARGUE_SIATH_ServiceCargueSiath) {

        	try {

        		int length = 0;
		

		

        }

		
			finally {}
		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_CARGUE_SIATH_ServiceCargueSiath) {

        	try {

        		int length = 0;
		

		

        }

		
			finally {}
		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
        }

			finally {}
		

    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
        }

			finally {}
		

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row2Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class RequestOKStruct implements routines.system.IPersistableRow<RequestOKStruct> {
    final static byte[] commonByteArrayLock_AFI_CARGUE_SIATH_ServiceCargueSiath = new byte[0];
    static byte[] commonByteArray_AFI_CARGUE_SIATH_ServiceCargueSiath = new byte[0];

	
			    public String IdSolicitud;

				public String getIdSolicitud () {
					return this.IdSolicitud;
				}

				public Boolean IdSolicitudIsNullable(){
				    return true;
				}
				public Boolean IdSolicitudIsKey(){
				    return false;
				}
				public Integer IdSolicitudLength(){
				    return null;
				}
				public Integer IdSolicitudPrecision(){
				    return null;
				}
				public String IdSolicitudDefault(){
				
					return null;
				
				}
				public String IdSolicitudComment(){
				
				    return "";
				
				}
				public String IdSolicitudPattern(){
				
					return "";
				
				}
				public String IdSolicitudOriginalDbColumnName(){
				
					return "IdSolicitud";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_CARGUE_SIATH_ServiceCargueSiath.length) {
				if(length < 1024 && commonByteArray_AFI_CARGUE_SIATH_ServiceCargueSiath.length == 0) {
   					commonByteArray_AFI_CARGUE_SIATH_ServiceCargueSiath = new byte[1024];
				} else {
   					commonByteArray_AFI_CARGUE_SIATH_ServiceCargueSiath = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_CARGUE_SIATH_ServiceCargueSiath, 0, length);
			strReturn = new String(commonByteArray_AFI_CARGUE_SIATH_ServiceCargueSiath, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_CARGUE_SIATH_ServiceCargueSiath.length) {
				if(length < 1024 && commonByteArray_AFI_CARGUE_SIATH_ServiceCargueSiath.length == 0) {
   					commonByteArray_AFI_CARGUE_SIATH_ServiceCargueSiath = new byte[1024];
				} else {
   					commonByteArray_AFI_CARGUE_SIATH_ServiceCargueSiath = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_CARGUE_SIATH_ServiceCargueSiath, 0, length);
			strReturn = new String(commonByteArray_AFI_CARGUE_SIATH_ServiceCargueSiath, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_CARGUE_SIATH_ServiceCargueSiath) {

        	try {

        		int length = 0;
		
					this.IdSolicitud = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_CARGUE_SIATH_ServiceCargueSiath) {

        	try {

        		int length = 0;
		
					this.IdSolicitud = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.IdSolicitud,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.IdSolicitud,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("IdSolicitud="+IdSolicitud);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(RequestOKStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class RequestERRORStruct implements routines.system.IPersistableRow<RequestERRORStruct> {
    final static byte[] commonByteArrayLock_AFI_CARGUE_SIATH_ServiceCargueSiath = new byte[0];
    static byte[] commonByteArray_AFI_CARGUE_SIATH_ServiceCargueSiath = new byte[0];

	
			    public routines.system.Document body;

				public routines.system.Document getBody () {
					return this.body;
				}

				public Boolean bodyIsNullable(){
				    return true;
				}
				public Boolean bodyIsKey(){
				    return false;
				}
				public Integer bodyLength(){
				    return null;
				}
				public Integer bodyPrecision(){
				    return null;
				}
				public String bodyDefault(){
				
					return null;
				
				}
				public String bodyComment(){
				
				    return "";
				
				}
				public String bodyPattern(){
				
					return "";
				
				}
				public String bodyOriginalDbColumnName(){
				
					return "body";
				
				}

				



    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_CARGUE_SIATH_ServiceCargueSiath) {

        	try {

        		int length = 0;
		
						this.body = (routines.system.Document) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_CARGUE_SIATH_ServiceCargueSiath) {

        	try {

        		int length = 0;
		
						this.body = (routines.system.Document) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Document
				
       			    	dos.writeObject(this.body);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Document
				
						dos.clearInstanceCache();
						dos.writeObject(this.body);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("body="+String.valueOf(body));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(RequestERRORStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class ErrorCallStruct implements routines.system.IPersistableRow<ErrorCallStruct> {
    final static byte[] commonByteArrayLock_AFI_CARGUE_SIATH_ServiceCargueSiath = new byte[0];
    static byte[] commonByteArray_AFI_CARGUE_SIATH_ServiceCargueSiath = new byte[0];

	
			    public routines.system.Document body;

				public routines.system.Document getBody () {
					return this.body;
				}

				public Boolean bodyIsNullable(){
				    return true;
				}
				public Boolean bodyIsKey(){
				    return false;
				}
				public Integer bodyLength(){
				    return null;
				}
				public Integer bodyPrecision(){
				    return null;
				}
				public String bodyDefault(){
				
					return null;
				
				}
				public String bodyComment(){
				
				    return "";
				
				}
				public String bodyPattern(){
				
					return "";
				
				}
				public String bodyOriginalDbColumnName(){
				
					return "body";
				
				}

				



    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_CARGUE_SIATH_ServiceCargueSiath) {

        	try {

        		int length = 0;
		
						this.body = (routines.system.Document) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_CARGUE_SIATH_ServiceCargueSiath) {

        	try {

        		int length = 0;
		
						this.body = (routines.system.Document) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Document
				
       			    	dos.writeObject(this.body);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Document
				
						dos.clearInstanceCache();
						dos.writeObject(this.body);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("body="+String.valueOf(body));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(ErrorCallStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row3Struct implements routines.system.IPersistableRow<row3Struct> {
    final static byte[] commonByteArrayLock_AFI_CARGUE_SIATH_ServiceCargueSiath = new byte[0];
    static byte[] commonByteArray_AFI_CARGUE_SIATH_ServiceCargueSiath = new byte[0];

	
			    public String uri;

				public String getUri () {
					return this.uri;
				}

				public Boolean uriIsNullable(){
				    return true;
				}
				public Boolean uriIsKey(){
				    return false;
				}
				public Integer uriLength(){
				    return 255;
				}
				public Integer uriPrecision(){
				    return 0;
				}
				public String uriDefault(){
				
					return "";
				
				}
				public String uriComment(){
				
				    return null;
				
				}
				public String uriPattern(){
				
				    return null;
				
				}
				public String uriOriginalDbColumnName(){
				
					return "uri";
				
				}

				
			    public String method;

				public String getMethod () {
					return this.method;
				}

				public Boolean methodIsNullable(){
				    return true;
				}
				public Boolean methodIsKey(){
				    return false;
				}
				public Integer methodLength(){
				    return 255;
				}
				public Integer methodPrecision(){
				    return 0;
				}
				public String methodDefault(){
				
					return "";
				
				}
				public String methodComment(){
				
				    return null;
				
				}
				public String methodPattern(){
				
				    return null;
				
				}
				public String methodOriginalDbColumnName(){
				
					return "method";
				
				}

				
			    public Integer status;

				public Integer getStatus () {
					return this.status;
				}

				public Boolean statusIsNullable(){
				    return true;
				}
				public Boolean statusIsKey(){
				    return false;
				}
				public Integer statusLength(){
				    return 0;
				}
				public Integer statusPrecision(){
				    return 0;
				}
				public String statusDefault(){
				
					return "";
				
				}
				public String statusComment(){
				
				    return null;
				
				}
				public String statusPattern(){
				
				    return null;
				
				}
				public String statusOriginalDbColumnName(){
				
					return "status";
				
				}

				
			    public String error;

				public String getError () {
					return this.error;
				}

				public Boolean errorIsNullable(){
				    return true;
				}
				public Boolean errorIsKey(){
				    return false;
				}
				public Integer errorLength(){
				    return 1024;
				}
				public Integer errorPrecision(){
				    return 0;
				}
				public String errorDefault(){
				
					return "";
				
				}
				public String errorComment(){
				
				    return null;
				
				}
				public String errorPattern(){
				
				    return null;
				
				}
				public String errorOriginalDbColumnName(){
				
					return "error";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_CARGUE_SIATH_ServiceCargueSiath.length) {
				if(length < 1024 && commonByteArray_AFI_CARGUE_SIATH_ServiceCargueSiath.length == 0) {
   					commonByteArray_AFI_CARGUE_SIATH_ServiceCargueSiath = new byte[1024];
				} else {
   					commonByteArray_AFI_CARGUE_SIATH_ServiceCargueSiath = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_CARGUE_SIATH_ServiceCargueSiath, 0, length);
			strReturn = new String(commonByteArray_AFI_CARGUE_SIATH_ServiceCargueSiath, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_CARGUE_SIATH_ServiceCargueSiath.length) {
				if(length < 1024 && commonByteArray_AFI_CARGUE_SIATH_ServiceCargueSiath.length == 0) {
   					commonByteArray_AFI_CARGUE_SIATH_ServiceCargueSiath = new byte[1024];
				} else {
   					commonByteArray_AFI_CARGUE_SIATH_ServiceCargueSiath = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_CARGUE_SIATH_ServiceCargueSiath, 0, length);
			strReturn = new String(commonByteArray_AFI_CARGUE_SIATH_ServiceCargueSiath, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_CARGUE_SIATH_ServiceCargueSiath) {

        	try {

        		int length = 0;
		
					this.uri = readString(dis);
					
					this.method = readString(dis);
					
						this.status = readInteger(dis);
					
					this.error = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_CARGUE_SIATH_ServiceCargueSiath) {

        	try {

        		int length = 0;
		
					this.uri = readString(dis);
					
					this.method = readString(dis);
					
						this.status = readInteger(dis);
					
					this.error = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.uri,dos);
					
					// String
				
						writeString(this.method,dos);
					
					// Integer
				
						writeInteger(this.status,dos);
					
					// String
				
						writeString(this.error,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.uri,dos);
					
					// String
				
						writeString(this.method,dos);
					
					// Integer
				
						writeInteger(this.status,dos);
					
					// String
				
						writeString(this.error,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("uri="+uri);
		sb.append(",method="+method);
		sb.append(",status="+String.valueOf(status));
		sb.append(",error="+error);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row3Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class inStruct implements routines.system.IPersistableRow<inStruct> {
    final static byte[] commonByteArrayLock_AFI_CARGUE_SIATH_ServiceCargueSiath = new byte[0];
    static byte[] commonByteArray_AFI_CARGUE_SIATH_ServiceCargueSiath = new byte[0];

	
			    public routines.system.Document body;

				public routines.system.Document getBody () {
					return this.body;
				}

				public Boolean bodyIsNullable(){
				    return true;
				}
				public Boolean bodyIsKey(){
				    return false;
				}
				public Integer bodyLength(){
				    return null;
				}
				public Integer bodyPrecision(){
				    return null;
				}
				public String bodyDefault(){
				
					return null;
				
				}
				public String bodyComment(){
				
				    return "";
				
				}
				public String bodyPattern(){
				
					return "";
				
				}
				public String bodyOriginalDbColumnName(){
				
					return "body";
				
				}

				



    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_CARGUE_SIATH_ServiceCargueSiath) {

        	try {

        		int length = 0;
		
						this.body = (routines.system.Document) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_CARGUE_SIATH_ServiceCargueSiath) {

        	try {

        		int length = 0;
		
						this.body = (routines.system.Document) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Document
				
       			    	dos.writeObject(this.body);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Document
				
						dos.clearInstanceCache();
						dos.writeObject(this.body);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("body="+String.valueOf(body));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(inStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tRESTRequest_1_LoopProcess(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tRESTRequest_1_Loop_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

		String currentVirtualComponent = null;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row3Struct row3 = new row3Struct();
ErrorCallStruct ErrorCall = new ErrorCallStruct();
inStruct in = new inStruct();
RequestOKStruct RequestOK = new RequestOKStruct();
row2Struct row2 = new row2Struct();
RequestERRORStruct RequestERROR = new RequestERRORStruct();



	
	/**
	 * [tRESTRequest_1_Loop begin ] start
	 */

				
			int NB_ITERATE_tRESTRequest_1_In = 0; //for statistics
			

	
		
		ok_Hash.put("tRESTRequest_1_Loop", false);
		start_Hash.put("tRESTRequest_1_Loop", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tRESTRequest_1";
	
	currentComponent="tRESTRequest_1_Loop";
	
	
		int tos_count_tRESTRequest_1_Loop = 0;
		
						if(execStat){
							runStat.updateStatOnConnection(iterateId,0,0,"row3","ErrorCall","in","RequestOK","row2","RequestERROR");
						}
						
						
						


					in = null;
			
					row3 = null;
			

	int nb_line_tRESTRequest_1 = 0;

	try {

		java.util.Map<String, Object> requestMessage_tRESTRequest_1 =
				(java.util.Map<String, Object>) globalMap.get("restRequest");

		restEndpoint = getRestEndpoint();

		if (null == requestMessage_tRESTRequest_1) {

			if (restTalendJobAlreadyStarted) {
				throw new RuntimeException("request is not provided");
			} else {
				if (!runInTalendEsbRuntimeContainer && null == thread4RestServiceProviderEndpoint) {
					String endpointUrl_tRESTRequest_1 = checkEndpointUrl(restEndpoint);
					// *** external thread for endpoint initialization
					thread4RestServiceProviderEndpoint = new Thread4RestServiceProviderEndpoint(this, endpointUrl_tRESTRequest_1);
					thread4RestServiceProviderEndpoint.start();
					// *** external thread for endpoint initialization
				}

				restTalendJobAlreadyStarted = true;

				if(runInDaemonMode){
					Thread.currentThread();
					try {
						while(true) {
							Thread.sleep(60000);
						}
					} catch (InterruptedException e_tRESTRequest_1) {
						// e_tRESTRequest_1.printStackTrace();
						// throw new TalendException(e_tRESTRequest_1, "wholeJob", globalMap);
					}
				}
			}
			return;
		}

        requestMessage_tRESTRequest_1.put("CURRENT_MESSAGE", org.apache.cxf.jaxrs.utils.JAXRSUtils.getCurrentMessage());

        Object ctx_tRESTRequest_1 = requestMessage_tRESTRequest_1.get("MESSAGE_CONTEXT");
        if (ctx_tRESTRequest_1 != null && ctx_tRESTRequest_1 instanceof org.apache.cxf.jaxrs.impl.tl.ThreadLocalMessageContext) {
            requestMessage_tRESTRequest_1.put("MESSAGE_CONTEXT", ((org.apache.cxf.jaxrs.impl.tl.ThreadLocalMessageContext)ctx_tRESTRequest_1).get());
        }

 



/**
 * [tRESTRequest_1_Loop begin ] stop
 */
	
	/**
	 * [tRESTRequest_1_Loop main ] start
	 */

	

	
	
		currentVirtualComponent = "tRESTRequest_1";
	
	currentComponent="tRESTRequest_1_Loop";
	
	
				resourceMap.put("inIterateVComp", true);
			

 


	tos_count_tRESTRequest_1_Loop++;

/**
 * [tRESTRequest_1_Loop main ] stop
 */
	
	/**
	 * [tRESTRequest_1_Loop process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tRESTRequest_1";
	
	currentComponent="tRESTRequest_1_Loop";
	
	

 



/**
 * [tRESTRequest_1_Loop process_data_begin ] stop
 */
	NB_ITERATE_tRESTRequest_1_In++;
	
	
				if(execStat){
					runStat.updateStatOnConnection("Iterate", 1, "exec" + NB_ITERATE_tRESTRequest_1_In);
					//Thread.sleep(1000);
				}				
			



	
	/**
	 * [tRESTResponse_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tRESTResponse_2", false);
		start_Hash.put("tRESTResponse_2", System.currentTimeMillis());
		
	
	currentComponent="tRESTResponse_2";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"ErrorCall");
					}
				
		int tos_count_tRESTResponse_2 = 0;
		

 



/**
 * [tRESTResponse_2 begin ] stop
 */



	
	/**
	 * [tXMLMap_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tXMLMap_2", false);
		start_Hash.put("tXMLMap_2", System.currentTimeMillis());
		
	
	currentComponent="tXMLMap_2";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row3");
					}
				
		int tos_count_tXMLMap_2 = 0;
		

	
	
//===============================input xml init part===============================
class XML_API_tXMLMap_2{
	public boolean isDefNull(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
        if (node != null && node instanceof org.dom4j.Element) {
        	org.dom4j.Attribute attri = ((org.dom4j.Element)node).attribute("nil");
        	if(attri != null && ("true").equals(attri.getText())){
            	return true;
            }
        }
        return false;
    }

    public boolean isMissing(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
        return node == null ? true : false;
    }

    public boolean isEmpty(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
        if (node != null) {
            return node.getText().length() == 0;
        }
        return false;
    }
}
	class Var__tXMLMap_2__Struct {
	}
	Var__tXMLMap_2__Struct Var__tXMLMap_2 = new Var__tXMLMap_2__Struct();
// ###############################
// # Outputs initialization
ErrorCallStruct ErrorCall_tmp = new ErrorCallStruct();
ErrorCallStruct ErrorCall_save = null;
// ###############################
		int nb_line_tXMLMap_2 = 0; 
	
    XML_API_tXMLMap_2 xml_api_tXMLMap_2 = new XML_API_tXMLMap_2();

class GenerateDocument_ErrorCall {

	java.util.Map<String,Object> valueMap = null;
	
	routines.system.DocumentGenerateOrderHelper orderHelper = new routines.system.DocumentGenerateOrderHelper(1);
		
	org.dom4j.Document doc = null;
	
	org.dom4j.Element root4Group = null;
	
	org.dom4j.io.OutputFormat format = null;
	
	java.util.List<java.util.List<String>> groupbyList = null;
	java.util.List<org.dom4j.Element> groupElementList = null;
	int order = 0;
	
	boolean isFirst = true;
	
	boolean	needRoot = true;
	
	String currentValue = null;
	
    public GenerateDocument_ErrorCall() {
//    	this.treeNodeAPI = treeNodeAPI;
    	
    	valueMap = new java.util.HashMap<String,Object>();
    	
    	groupbyList =  new java.util.ArrayList<java.util.List<String>>();
		groupElementList = new java.util.ArrayList<org.dom4j.Element>();
    	
    	doc = org.dom4j.DocumentHelper.createDocument();
    	format = org.dom4j.io.OutputFormat.createPrettyPrint();
    	format.setTrimText(false);
    }
    
    public org.dom4j.Document getDocument(){
		generateOk();
    	return this.doc;
    }
    
    //do some work after document has been generated
    private void generateOk() {
    	routines.system.NestXMLTool.replaceDefaultNameSpace(this.doc.getRootElement(),null);
    }
	
	//We generate the TreeNode_API object only if there is a document in the main input table.
    void generateElements(boolean isInnerJoin, row3Struct row3, Var__tXMLMap_2__Struct Var
	) {
	
	
	/*if(this.treeNodeAPI==null) {
		this.treeNodeAPI = treeNodeAPI;
	}*/
	
	org.dom4j.Element subTreeRootParent = null;
// build root xml tree 
if (needRoot) {
	needRoot=false;
		org.dom4j.Element root = null;
				root = org.dom4j.DocumentHelper.createElement("EtlResponse");
				doc.add(root);
		subTreeRootParent = root;
		org.dom4j.Element root_0 = null;
				root_0 = root.addElement("State");
		valueMap.put("root_0",0);
		if(valueMap.get("root_0")!=null) {
			routines.system.NestXMLTool.setText(root_0,FormatterUtils.fm(valueMap.get("root_0"),null));
		}
		org.dom4j.Element root_1 = null;
				root_1 = root.addElement("Message");
		valueMap.put("root_1","Error en el llamado del ETL de cargue masivo SIATH");
		if(valueMap.get("root_1")!=null) {
			routines.system.NestXMLTool.setText(root_1,FormatterUtils.fm(valueMap.get("root_1"),null));
		}
		org.dom4j.Element root_2 = null;
				root_2 = root.addElement("ErrorBackTrace");
		valueMap.put("root_2", row3.error);
		if(valueMap.get("root_2")!=null) {
			routines.system.NestXMLTool.setText(root_2,FormatterUtils.fm(valueMap.get("root_2"),null));
		}
		org.dom4j.Element root_3 = null;
				root_3 = root.addElement("Result");
		root4Group = subTreeRootParent;
	}else{
		subTreeRootParent=root4Group;
	}
	/* build group xml tree */
	boolean isNewElement = false;
		isNewElement = false;
		}
    }


	            

 



/**
 * [tXMLMap_2 begin ] stop
 */




	
	/**
	 * [tXMLMap_4_TXMLMAP_OUT begin ] start
	 */

	

	
		
		ok_Hash.put("tXMLMap_4_TXMLMAP_OUT", false);
		start_Hash.put("tXMLMap_4_TXMLMAP_OUT", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tXMLMap_4";
	
	currentComponent="tXMLMap_4_TXMLMAP_OUT";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"in");
					}
				
		int tos_count_tXMLMap_4_TXMLMAP_OUT = 0;
		

	
	
//===============================input xml init part===============================
class XML_API_tXMLMap_4_TXMLMAP_OUT{
	public boolean isDefNull(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
        if (node != null && node instanceof org.dom4j.Element) {
        	org.dom4j.Attribute attri = ((org.dom4j.Element)node).attribute("nil");
        	if(attri != null && ("true").equals(attri.getText())){
            	return true;
            }
        }
        return false;
    }

    public boolean isMissing(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
        return node == null ? true : false;
    }

    public boolean isEmpty(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
        if (node != null) {
            return node.getText().length() == 0;
        }
        return false;
    }
}
	class Var__tXMLMap_4_TXMLMAP_OUT__Struct {
	}
	Var__tXMLMap_4_TXMLMAP_OUT__Struct Var__tXMLMap_4_TXMLMAP_OUT = new Var__tXMLMap_4_TXMLMAP_OUT__Struct();
// ###############################
// # Outputs initialization
RequestOKStruct RequestOK_tmp = new RequestOKStruct();
RequestOKStruct RequestOK_save = null;
//the aggregate variable
RequestOKStruct RequestOK_aggregate = null;
RequestERRORStruct RequestERROR_tmp = new RequestERRORStruct();
RequestERRORStruct RequestERROR_save = null;
//the aggregate variable
RequestERRORStruct RequestERROR_aggregate = null;
//init the resultset for aggregate
java.util.List<Object> allOutsForAggregate_tXMLMap_4 = new java.util.ArrayList<Object>();
globalMap.put("allOutsForAggregate_tXMLMap_4",allOutsForAggregate_tXMLMap_4);
// ###############################
class TreeNode_API_tXMLMap_4_TXMLMAP_OUT {
	java.util.Map<String, String> xpath_value_map = new java.util.HashMap<String, String>();
	
	void clear(){
		xpath_value_map.clear();
	}
	
	void put(String xpath, String value){
		xpath_value_map.put(xpath, value);
	}
	String get_null(String xpath) {
		return null;
	}
	String get_String(String xpath){
		return xpath_value_map.get(xpath);
	}
}
			TreeNode_API_tXMLMap_4_TXMLMAP_OUT treeNodeAPI_tXMLMap_4_TXMLMAP_OUT = new TreeNode_API_tXMLMap_4_TXMLMAP_OUT();
			NameSpaceTool nsTool_tXMLMap_4_TXMLMAP_OUT = new NameSpaceTool();
		int nb_line_tXMLMap_4_TXMLMAP_OUT = 0; 
	
    XML_API_tXMLMap_4_TXMLMAP_OUT xml_api_tXMLMap_4_TXMLMAP_OUT = new XML_API_tXMLMap_4_TXMLMAP_OUT();

	//the map store the previous value of aggregate columns
	java.util.Map<String,Object> aggregateCacheMap_tXMLMap_4_TXMLMAP_OUT = new java.util.HashMap<String,Object>();

class GenerateDocument_RequestERROR {

		TreeNode_API_tXMLMap_4_TXMLMAP_OUT treeNodeAPI = null;
	java.util.Map<String,Object> valueMap = null;
	
	routines.system.DocumentGenerateOrderHelper orderHelper = new routines.system.DocumentGenerateOrderHelper(1);
	
	org.dom4j.Document doc = null;
	
	org.dom4j.Element root4Group = null;
	
	org.dom4j.io.OutputFormat format = null;
	
	java.util.List<java.util.List<String>> groupbyList = null;
	java.util.List<org.dom4j.Element> groupElementList = null;
	int order = 0;
	
	boolean isFirst = true;
	
	boolean	needRoot = true;
	
	String currentValue = null;

		org.dom4j.Element subTreeLoopParent0 = null;
		public boolean  subTreeLoop0 = false;
	
    public GenerateDocument_RequestERROR() {
//    	this.treeNodeAPI = treeNodeAPI;
    	
    	valueMap = new java.util.HashMap<String,Object>();
    	
    	groupbyList =  new java.util.ArrayList<java.util.List<String>>();
		groupElementList = new java.util.ArrayList<org.dom4j.Element>();
    	
    	doc = org.dom4j.DocumentHelper.createDocument();
    	format = org.dom4j.io.OutputFormat.createPrettyPrint();
    	format.setTrimText(false);
    }
    
    public org.dom4j.Document getDocument(){
    	return this.doc;
    }
    
	//We generate the TreeNode_API object only if there is a document in the main input table.
    void generateElements(TreeNode_API_tXMLMap_4_TXMLMAP_OUT treeNodeAPI,boolean isInnerJoin, inStruct in, Var__tXMLMap_4_TXMLMAP_OUT__Struct Var
	) {
	
	
	/*if(this.treeNodeAPI==null) {
		this.treeNodeAPI = treeNodeAPI;
	}*/
	
	org.dom4j.Element subTreeRootParent = null;
// build root xml tree 
if (needRoot) {
	needRoot=false;
		org.dom4j.Element root = null;
				root = org.dom4j.DocumentHelper.createElement("EtlResponse");
				doc.add(root);
		subTreeRootParent = root;
		org.dom4j.Element root_0 = null;
				root_0 = root.addElement("State");
		valueMap.put("root_0",2);
		if(valueMap.get("root_0")!=null) {
			routines.system.NestXMLTool.setText(root_0, FormatterUtils.fm(valueMap.get("root_0"),null));
		}
		org.dom4j.Element root_1 = null;
				root_1 = root.addElement("Message");
		valueMap.put("root_1","El identificador de la solicitud de cargue masivo SIATH, no puede ser nulo");
		if(valueMap.get("root_1")!=null) {
			routines.system.NestXMLTool.setText(root_1, FormatterUtils.fm(valueMap.get("root_1"),null));
		}
		org.dom4j.Element root_2 = null;
				root_2 = root.addElement("ErrorBackTrace");
		org.dom4j.Element root_3 = null;
				root_3 = root.addElement("Result");
		root4Group = subTreeRootParent;
	}else{
		subTreeRootParent=root4Group;
	}
	/* build group xml tree */
	boolean isNewElement = false;
		isNewElement = false;
		}
    }

	GenerateDocument_RequestERROR gen_Doc_RequestERROR_tXMLMap_4_TXMLMAP_OUT = new GenerateDocument_RequestERROR();
	boolean docAlreadyInstanciate_RequestERROR = false;

	            

 



/**
 * [tXMLMap_4_TXMLMAP_OUT begin ] stop
 */



	
	/**
	 * [tRESTRequest_1_In begin ] start
	 */

	

	
		
		ok_Hash.put("tRESTRequest_1_In", false);
		start_Hash.put("tRESTRequest_1_In", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tRESTRequest_1";
	
	currentComponent="tRESTRequest_1_In";
	
	
		int tos_count_tRESTRequest_1_In = 0;
		
						resourceMap.remove("inIterateVComp");
					

 



/**
 * [tRESTRequest_1_In begin ] stop
 */
	
	/**
	 * [tRESTRequest_1_In main ] start
	 */

	

	
	
		currentVirtualComponent = "tRESTRequest_1";
	
	currentComponent="tRESTRequest_1_In";
	
	

		if (requestMessage_tRESTRequest_1.containsKey("ERROR")) { // wrong request received
						in = null;
						String wrongCallUri_tRESTRequest_1 = (String) requestMessage_tRESTRequest_1.get("URI");
						String wrongCallMethod_tRESTRequest_1 = (String) requestMessage_tRESTRequest_1.get("VERB");
						String wrongCallError_tRESTRequest_1 = (String) requestMessage_tRESTRequest_1.get("ERROR");
						int wrongCallStatus_tRESTRequest_1 = (Integer) requestMessage_tRESTRequest_1.get("STATUS");

						row3 = new row3Struct();
						row3.uri = wrongCallUri_tRESTRequest_1;
						row3.method = wrongCallMethod_tRESTRequest_1;
						row3.error = wrongCallError_tRESTRequest_1;
						row3.status = wrongCallStatus_tRESTRequest_1;
		} else { // non-error (not wrong request)

			String matchedUriPattern_tRESTRequest_1 = (String) requestMessage_tRESTRequest_1.get("PATTERN");
			String matchedFlow_tRESTRequest_1 = (String) requestMessage_tRESTRequest_1.get("OPERATION");

			java.util.Map<String, Object> params_tRESTRequest_1 =
				(java.util.Map<String, Object>) requestMessage_tRESTRequest_1.get("PARAMS");
					if (matchedFlow_tRESTRequest_1.equals("in")) {
						in = new inStruct();
								Object bodyObject_tRESTRequest_1 = requestMessage_tRESTRequest_1.get("BODY");
								if (null != bodyObject_tRESTRequest_1) {
									
										routines.system.Document body_tRESTRequest_1 = new routines.system.Document();
										body_tRESTRequest_1.setDocument((org.dom4j.Document) bodyObject_tRESTRequest_1);
										in.body = body_tRESTRequest_1;
									
								}
					} else { // non matched flow
						in = null;
					}
				
						row3 = null;
		}

		globalMap.put("tRESTRequest_1_URI", (String) requestMessage_tRESTRequest_1.get("URI"));
		globalMap.put("tRESTRequest_1_URI_BASE", (String) requestMessage_tRESTRequest_1.get("URI_BASE"));
		globalMap.put("tRESTRequest_1_URI_ABSOLUTE", (String) requestMessage_tRESTRequest_1.get("URI_ABSOLUTE"));
		globalMap.put("tRESTRequest_1_URI_REQUEST", (String) requestMessage_tRESTRequest_1.get("URI_REQUEST"));
		globalMap.put("tRESTRequest_1_HTTP_METHOD", (String) requestMessage_tRESTRequest_1.get("VERB"));

		globalMap.put("tRESTRequest_1_ATTACHMENT_HEADERS", requestMessage_tRESTRequest_1.get("ATTACHMENT_HEADERS"));
		globalMap.put("tRESTRequest_1_ATTACHMENT_FILENAMES", requestMessage_tRESTRequest_1.get("ATTACHMENT_FILENAMES"));

		globalMap.put("tRESTRequest_1_PRINCIPAL_NAME", (String) requestMessage_tRESTRequest_1.get("PRINCIPAL_NAME"));
		globalMap.put("tRESTRequest_1_CORRELATION_ID", (String) requestMessage_tRESTRequest_1.get("CorrelationID"));

 


	tos_count_tRESTRequest_1_In++;

/**
 * [tRESTRequest_1_In main ] stop
 */
	
	/**
	 * [tRESTRequest_1_In process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tRESTRequest_1";
	
	currentComponent="tRESTRequest_1_In";
	
	

 



/**
 * [tRESTRequest_1_In process_data_begin ] stop
 */
// Start of branch "row3"
if(row3 != null) { 



	
	/**
	 * [tXMLMap_2 main ] start
	 */

	

	
	
	currentComponent="tXMLMap_2";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row3"
						
						);
					}
					


	boolean rejectedInnerJoin_tXMLMap_2 = false;
	boolean rejectedDocInnerJoin_tXMLMap_2 = false;
	boolean mainRowRejected_tXMLMap_2 = false;
	boolean isMatchDocRowtXMLMap_2 = false;
	  
	
				    GenerateDocument_ErrorCall gen_Doc_ErrorCall_tXMLMap_2 = new GenerateDocument_ErrorCall();
					ErrorCall_tmp.body = null;
					
		

			
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tXMLMap_2__Struct Var = Var__tXMLMap_2;
		// ###############################
		// # Output tables

ErrorCall = null;


// # Output table : 'ErrorCall'

gen_Doc_ErrorCall_tXMLMap_2.generateElements(rejectedDocInnerJoin_tXMLMap_2,row3,Var);

if(ErrorCall_tmp.body == null){
ErrorCall_tmp.body = new routines.system.Document();
ErrorCall_tmp.body.setDocument(gen_Doc_ErrorCall_tXMLMap_2.getDocument());
}

ErrorCall = ErrorCall_tmp;
ErrorCall_save = ErrorCall_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tXMLMap_2 = false;



 


	tos_count_tXMLMap_2++;

/**
 * [tXMLMap_2 main ] stop
 */
	
	/**
	 * [tXMLMap_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tXMLMap_2";
	
	

 



/**
 * [tXMLMap_2 process_data_begin ] stop
 */
// Start of branch "ErrorCall"
if(ErrorCall != null) { 



	
	/**
	 * [tRESTResponse_2 main ] start
	 */

	

	
	
	currentComponent="tRESTResponse_2";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"ErrorCall"
						
						);
					}
					

	java.io.OutputStream outputStream_tRESTResponse_2 = (java.io.OutputStream) globalMap.get("restResponseStream");
	boolean responseAlreadySent_tRESTResponse_2 = globalMap.containsKey("restResponse");

	if (null == outputStream_tRESTResponse_2 && responseAlreadySent_tRESTResponse_2) {
		throw new RuntimeException("Rest response already sent.");
	} else if (!globalMap.containsKey("restRequest")) {
		throw new RuntimeException("Not received rest request yet.");
	} else {
		Integer restProviderStatusCode_tRESTResponse_2 = 400;

		Object restProviderResponse_tRESTResponse_2 = null;
		if (null != ErrorCall.body) {
			restProviderResponse_tRESTResponse_2 = ErrorCall.body.getDocument();
		}

		java.util.Map<String, String> restProviderResponseHeaders_tRESTResponse_2 = new java.util.TreeMap<String, String>(String.CASE_INSENSITIVE_ORDER);
		java.lang.StringBuilder restProviderResponseHeader_cookies_tRESTResponse_2 = new java.lang.StringBuilder();
		final String setCookieHeader = "Set-Cookie";

        if (restProviderResponseHeader_cookies_tRESTResponse_2.length() > 0) {
		    restProviderResponseHeaders_tRESTResponse_2.put(setCookieHeader, restProviderResponseHeader_cookies_tRESTResponse_2.toString());
		}

        java.util.Map<String, Object> restRequest_tRESTResponse_2 = (java.util.Map<String, Object>) globalMap.get("restRequest");
        org.apache.cxf.jaxrs.ext.MessageContext messageContext_tRESTResponse_2 = (org.apache.cxf.jaxrs.ext.MessageContext) restRequest_tRESTResponse_2.get("MESSAGE_CONTEXT");
        

		if (null == outputStream_tRESTResponse_2) {
			java.util.Map<String, Object> restResponse_tRESTResponse_2 = new java.util.HashMap<String, Object>();
			restResponse_tRESTResponse_2.put("BODY", restProviderResponse_tRESTResponse_2);
			restResponse_tRESTResponse_2.put("STATUS", restProviderStatusCode_tRESTResponse_2);
			restResponse_tRESTResponse_2.put("HEADERS", restProviderResponseHeaders_tRESTResponse_2);
			restResponse_tRESTResponse_2.put("drop.json.root.element", Boolean.valueOf(true));
			globalMap.put("restResponse", restResponse_tRESTResponse_2);
			
		} else {

			javax.ws.rs.core.MediaType responseMediaType_tRESTResponse_2 = null;
			if (!responseAlreadySent_tRESTResponse_2) {
				org.apache.cxf.message.Message currentMessage = null;
				if (org.apache.cxf.jaxrs.utils.JAXRSUtils.getCurrentMessage() != null) {
					currentMessage = org.apache.cxf.jaxrs.utils.JAXRSUtils.getCurrentMessage();
				} else {
					currentMessage = ((org.apache.cxf.message.Message)restRequest_tRESTResponse_2.get("CURRENT_MESSAGE"));
				}

				if (currentMessage != null && currentMessage.getExchange() != null) {
					currentMessage.getExchange().put(StreamingDOM4JProvider.SUPRESS_XML_DECLARATION, true);
				}

				messageContext_tRESTResponse_2.put(org.apache.cxf.message.Message.RESPONSE_CODE, restProviderStatusCode_tRESTResponse_2);
				javax.ws.rs.core.MultivaluedMap<String, String> headersMultivaluedMap_tRESTResponse_2 = new org.apache.cxf.jaxrs.impl.MetadataMap<String, String>();
				for (java.util.Map.Entry<String, String> multivaluedHeader : restProviderResponseHeaders_tRESTResponse_2.entrySet()) {
					headersMultivaluedMap_tRESTResponse_2.putSingle(multivaluedHeader.getKey(), multivaluedHeader.getValue());
				}
				messageContext_tRESTResponse_2.put(org.apache.cxf.message.Message.PROTOCOL_HEADERS, headersMultivaluedMap_tRESTResponse_2);

				String responseContentType_tRESTResponse_2 = null;
				
				if (currentMessage != null && currentMessage.getExchange() != null) {
					responseContentType_tRESTResponse_2 = (String) currentMessage.getExchange().get(org.apache.cxf.message.Message.CONTENT_TYPE);
				}
					
				if (null == responseContentType_tRESTResponse_2) {
					// this should not be needed, just in case. set it to the first value in the sorted list returned from HttpHeaders
					responseMediaType_tRESTResponse_2 = messageContext_tRESTResponse_2.getHttpHeaders().getAcceptableMediaTypes().get(0);
				} else {
					responseMediaType_tRESTResponse_2 = org.apache.cxf.jaxrs.utils.JAXRSUtils.toMediaType(responseContentType_tRESTResponse_2);
				}
				globalMap.put("restResponseMediaType", responseMediaType_tRESTResponse_2);

				String responseMediaSubType_tRESTResponse_2 = responseMediaType_tRESTResponse_2.getSubtype();
				if (responseMediaSubType_tRESTResponse_2.equals("xml") || responseMediaSubType_tRESTResponse_2.endsWith("+xml")) {
					outputStream_tRESTResponse_2.write("<wrapper>".getBytes());
					globalMap.put("restResponseWrappingClosure", "</wrapper>");
				}
				if (responseMediaSubType_tRESTResponse_2.equals("json") || responseMediaSubType_tRESTResponse_2.endsWith("+json")) {
					outputStream_tRESTResponse_2.write("[".getBytes());
					globalMap.put("restResponseWrappingClosure", "]");
				}

				globalMap.put("restResponse", true);
			} else {
				responseMediaType_tRESTResponse_2 = (javax.ws.rs.core.MediaType) globalMap.get("restResponseMediaType");
			}

			if (null != restProviderResponse_tRESTResponse_2) {
				String responseMediaSubType_tRESTResponse_2 = responseMediaType_tRESTResponse_2.getSubtype();
				if (responseMediaSubType_tRESTResponse_2.equals("json") || responseMediaSubType_tRESTResponse_2.endsWith("+json")) {
					if (globalMap.containsKey("restResponseJsonStarted")) {
						outputStream_tRESTResponse_2.write(",".getBytes());
					} else {
						globalMap.put("restResponseJsonStarted", true);
					}
				}

				Class<? extends Object> responseBodyClass_tRESTResponse_2 = restProviderResponse_tRESTResponse_2.getClass();
				javax.ws.rs.ext.Providers messageBodyProviders_tRESTResponse_2 = messageContext_tRESTResponse_2.getProviders();
				javax.ws.rs.ext.MessageBodyWriter messageBodyWriter_tRESTResponse_2 = messageBodyProviders_tRESTResponse_2.getMessageBodyWriter(
						responseBodyClass_tRESTResponse_2, responseBodyClass_tRESTResponse_2, null, responseMediaType_tRESTResponse_2);

                if (messageBodyWriter_tRESTResponse_2 instanceof StreamingDOM4JProvider) {
                    ((StreamingDOM4JProvider)messageBodyWriter_tRESTResponse_2).setGlobalMap(globalMap);
                }

				messageBodyWriter_tRESTResponse_2.writeTo(restProviderResponse_tRESTResponse_2, responseBodyClass_tRESTResponse_2, responseBodyClass_tRESTResponse_2,
						new java.lang.annotation.Annotation[] {}, responseMediaType_tRESTResponse_2, null, outputStream_tRESTResponse_2);
			}
			// initial variant
			//outputStream_tRESTResponse_2.write(String.valueOf(restProviderResponse_tRESTResponse_2).getBytes());
			outputStream_tRESTResponse_2.flush();
		}
	}

 


	tos_count_tRESTResponse_2++;

/**
 * [tRESTResponse_2 main ] stop
 */
	
	/**
	 * [tRESTResponse_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tRESTResponse_2";
	
	

 



/**
 * [tRESTResponse_2 process_data_begin ] stop
 */
	
	/**
	 * [tRESTResponse_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tRESTResponse_2";
	
	

 



/**
 * [tRESTResponse_2 process_data_end ] stop
 */

} // End of branch "ErrorCall"




	
	/**
	 * [tXMLMap_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tXMLMap_2";
	
	

 



/**
 * [tXMLMap_2 process_data_end ] stop
 */

} // End of branch "row3"




// Start of branch "in"
if(in != null) { 



	
	/**
	 * [tXMLMap_4_TXMLMAP_OUT main ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_4";
	
	currentComponent="tXMLMap_4_TXMLMAP_OUT";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"in"
						
						);
					}
					

	boolean rejectedInnerJoin_tXMLMap_4_TXMLMAP_OUT = false;
	boolean rejectedDocInnerJoin_tXMLMap_4_TXMLMAP_OUT = false;
	boolean mainRowRejected_tXMLMap_4_TXMLMAP_OUT = false;
	boolean isMatchDocRowtXMLMap_4_TXMLMAP_OUT = false;
	  
	
			

				    gen_Doc_RequestERROR_tXMLMap_4_TXMLMAP_OUT = new GenerateDocument_RequestERROR();
				    
					RequestERROR_tmp = new RequestERRORStruct();
				   
					RequestERROR_tmp.body = null;
					
		
		
				//init document to flat tool
				routines.system.DocumentToFlat docToFlat_tXMLMap_4_TXMLMAP_OUT = new routines.system.DocumentToFlat();
				docToFlat_tXMLMap_4_TXMLMAP_OUT.setOriginalLoop("/root");
				docToFlat_tXMLMap_4_TXMLMAP_OUT.setIsOptional(false);
				if(in.body == null || in.body.getDocument() == null) {
					throw new RuntimeException("in.body can't be empty");
				}
				org.dom4j.Document doc_tXMLMap_4_TXMLMAP_OUT = in.body.getDocument();
				docToFlat_tXMLMap_4_TXMLMAP_OUT.setDoc(doc_tXMLMap_4_TXMLMAP_OUT);
				docToFlat_tXMLMap_4_TXMLMAP_OUT.setDefineNS(false);
				docToFlat_tXMLMap_4_TXMLMAP_OUT.setNamespaceTool(nsTool_tXMLMap_4_TXMLMAP_OUT);
				
					//old version, find NS from doc
					nsTool_tXMLMap_4_TXMLMAP_OUT.countNSMap(doc_tXMLMap_4_TXMLMAP_OUT.getRootElement());
					java.util.HashMap<String,String> xmlNameSpaceMap_tXMLMap_4_TXMLMAP_OUT = nsTool_tXMLMap_4_TXMLMAP_OUT.xmlNameSpaceMap;
				
				docToFlat_tXMLMap_4_TXMLMAP_OUT.setXmlNameSpaceMap(xmlNameSpaceMap_tXMLMap_4_TXMLMAP_OUT);
				
				String[] absolutePathMappings_tXMLMap_4_TXMLMAP_OUT = new String[1];
				String[] relativePathMappings_tXMLMap_4_TXMLMAP_OUT = new String[1];
				
				absolutePathMappings_tXMLMap_4_TXMLMAP_OUT[0] = "in.body:/root/vafiarchivos_id";
				relativePathMappings_tXMLMap_4_TXMLMAP_OUT[0] = "vafiarchivos_id";
				
				docToFlat_tXMLMap_4_TXMLMAP_OUT.setAbsolutePathMappings(absolutePathMappings_tXMLMap_4_TXMLMAP_OUT);
				docToFlat_tXMLMap_4_TXMLMAP_OUT.setCurrentRelativePathMappings(relativePathMappings_tXMLMap_4_TXMLMAP_OUT);
				//generate document to flat data
				docToFlat_tXMLMap_4_TXMLMAP_OUT.flat();
				//get flat data
				java.util.List<java.util.Map<String, String>> resultSet_tXMLMap_4_TXMLMAP_OUT = docToFlat_tXMLMap_4_TXMLMAP_OUT.getResultSet();
				
				for (java.util.Map<String,String> oneRow_tXMLMap_4_TXMLMAP_OUT: resultSet_tXMLMap_4_TXMLMAP_OUT) { // G_TXM_M_001
					nb_line_tXMLMap_4_TXMLMAP_OUT++;
			    	rejectedInnerJoin_tXMLMap_4_TXMLMAP_OUT = false;
			    	rejectedDocInnerJoin_tXMLMap_4_TXMLMAP_OUT = false;
					mainRowRejected_tXMLMap_4_TXMLMAP_OUT=false;
				    isMatchDocRowtXMLMap_4_TXMLMAP_OUT = false;
					
			    	treeNodeAPI_tXMLMap_4_TXMLMAP_OUT.clear();
			    	for(java.util.Map.Entry<String, String> entry_tXMLMap_4_TXMLMAP_OUT : oneRow_tXMLMap_4_TXMLMAP_OUT.entrySet()) {
						treeNodeAPI_tXMLMap_4_TXMLMAP_OUT.put(entry_tXMLMap_4_TXMLMAP_OUT.getKey(),entry_tXMLMap_4_TXMLMAP_OUT.getValue());
					}
					


			
{ // start of Var scope

	// ###############################
	// # Vars tables

Var__tXMLMap_4_TXMLMAP_OUT__Struct Var = Var__tXMLMap_4_TXMLMAP_OUT;
		// ###############################
		// # Output tables

RequestOK = null;
RequestERROR = null;


// # Output table : 'RequestOK'
// # Filter conditions 
if( 

treeNodeAPI_tXMLMap_4_TXMLMAP_OUT.get_String("in.body:/root/vafiarchivos_id") != null

 ) {

RequestOK_tmp = new RequestOKStruct();
RequestOK_tmp.IdSolicitud = treeNodeAPI_tXMLMap_4_TXMLMAP_OUT.get_String("in.body:/root/vafiarchivos_id");allOutsForAggregate_tXMLMap_4.add(RequestOK_tmp);

} // closing filter/reject

// # Output table : 'RequestERROR'
// # Filter conditions 
if( 

treeNodeAPI_tXMLMap_4_TXMLMAP_OUT.get_String("in.body:/root/vafiarchivos_id") == null

 ) {

gen_Doc_RequestERROR_tXMLMap_4_TXMLMAP_OUT = new GenerateDocument_RequestERROR();
RequestERROR_tmp = new RequestERRORStruct();



gen_Doc_RequestERROR_tXMLMap_4_TXMLMAP_OUT.generateElements(treeNodeAPI_tXMLMap_4_TXMLMAP_OUT,rejectedDocInnerJoin_tXMLMap_4_TXMLMAP_OUT,in,Var);

if(RequestERROR_tmp.body == null){
RequestERROR_tmp.body = new routines.system.Document();
RequestERROR_tmp.body.setDocument(gen_Doc_RequestERROR_tXMLMap_4_TXMLMAP_OUT.getDocument());
//construct the resultset when there is no aggregate column for the out table
allOutsForAggregate_tXMLMap_4.add(RequestERROR_tmp);}

} // closing filter/reject
// ###############################

} // end of Var scope

rejectedInnerJoin_tXMLMap_4_TXMLMAP_OUT = false;


		}//G_TXM_M_001 close
	

 


	tos_count_tXMLMap_4_TXMLMAP_OUT++;

/**
 * [tXMLMap_4_TXMLMAP_OUT main ] stop
 */
	
	/**
	 * [tXMLMap_4_TXMLMAP_OUT process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_4";
	
	currentComponent="tXMLMap_4_TXMLMAP_OUT";
	
	

 



/**
 * [tXMLMap_4_TXMLMAP_OUT process_data_begin ] stop
 */
	
	/**
	 * [tXMLMap_4_TXMLMAP_OUT process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_4";
	
	currentComponent="tXMLMap_4_TXMLMAP_OUT";
	
	

 



/**
 * [tXMLMap_4_TXMLMAP_OUT process_data_end ] stop
 */

} // End of branch "in"




	
	/**
	 * [tRESTRequest_1_In process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tRESTRequest_1";
	
	currentComponent="tRESTRequest_1_In";
	
	

 



/**
 * [tRESTRequest_1_In process_data_end ] stop
 */
	
	/**
	 * [tRESTRequest_1_In end ] start
	 */

	

	
	
		currentVirtualComponent = "tRESTRequest_1";
	
	currentComponent="tRESTRequest_1_In";
	
	
						resourceMap.put("inIterateVComp", true);
					

 

ok_Hash.put("tRESTRequest_1_In", true);
end_Hash.put("tRESTRequest_1_In", System.currentTimeMillis());




/**
 * [tRESTRequest_1_In end ] stop
 */

	
	/**
	 * [tXMLMap_2 end ] start
	 */

	

	
	
	currentComponent="tXMLMap_2";
	
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row3");
			  	}
			  	
 

ok_Hash.put("tXMLMap_2", true);
end_Hash.put("tXMLMap_2", System.currentTimeMillis());




/**
 * [tXMLMap_2 end ] stop
 */

	
	/**
	 * [tRESTResponse_2 end ] start
	 */

	

	
	
	currentComponent="tRESTResponse_2";
	
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"ErrorCall");
			  	}
			  	
 

ok_Hash.put("tRESTResponse_2", true);
end_Hash.put("tRESTResponse_2", System.currentTimeMillis());




/**
 * [tRESTResponse_2 end ] stop
 */







	
	/**
	 * [tXMLMap_4_TXMLMAP_OUT end ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_4";
	
	currentComponent="tXMLMap_4_TXMLMAP_OUT";
	
	




				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"in");
			  	}
			  	
 

ok_Hash.put("tXMLMap_4_TXMLMAP_OUT", true);
end_Hash.put("tXMLMap_4_TXMLMAP_OUT", System.currentTimeMillis());




/**
 * [tXMLMap_4_TXMLMAP_OUT end ] stop
 */



	
	/**
	 * [tRunJob_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tRunJob_1", false);
		start_Hash.put("tRunJob_1", System.currentTimeMillis());
		
	
	currentComponent="tRunJob_1";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row2");
					}
				
		int tos_count_tRunJob_1 = 0;
		


 



/**
 * [tRunJob_1 begin ] stop
 */



	
	/**
	 * [tJavaRow_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaRow_2", false);
		start_Hash.put("tJavaRow_2", System.currentTimeMillis());
		
	
	currentComponent="tJavaRow_2";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"RequestOK");
					}
				
		int tos_count_tJavaRow_2 = 0;
		

int nb_line_tJavaRow_2 = 0;

 



/**
 * [tJavaRow_2 begin ] stop
 */




	
	/**
	 * [tRESTResponse_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tRESTResponse_1", false);
		start_Hash.put("tRESTResponse_1", System.currentTimeMillis());
		
	
	currentComponent="tRESTResponse_1";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"RequestERROR");
					}
				
		int tos_count_tRESTResponse_1 = 0;
		

 



/**
 * [tRESTResponse_1 begin ] stop
 */



	
	/**
	 * [tXMLMap_4_TXMLMAP_IN begin ] start
	 */

	

	
		
		ok_Hash.put("tXMLMap_4_TXMLMAP_IN", false);
		start_Hash.put("tXMLMap_4_TXMLMAP_IN", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tXMLMap_4";
	
	currentComponent="tXMLMap_4_TXMLMAP_IN";
	
	
		int tos_count_tXMLMap_4_TXMLMAP_IN = 0;
		
java.util.List<Object> outs_tXMLMap_4 = (java.util.List<Object>)globalMap.get("allOutsForAggregate_tXMLMap_4");
for(Object  row_out_tXMLMap_4_TXMLMAP_IN : outs_tXMLMap_4) {//TD512
 



/**
 * [tXMLMap_4_TXMLMAP_IN begin ] stop
 */
	
	/**
	 * [tXMLMap_4_TXMLMAP_IN main ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_4";
	
	currentComponent="tXMLMap_4_TXMLMAP_IN";
	
	

	RequestOK = null;
	if(row_out_tXMLMap_4_TXMLMAP_IN!=null && row_out_tXMLMap_4_TXMLMAP_IN instanceof RequestOKStruct) {
		RequestOK = (RequestOKStruct)row_out_tXMLMap_4_TXMLMAP_IN;		
	}
	RequestERROR = null;
	if(row_out_tXMLMap_4_TXMLMAP_IN!=null && row_out_tXMLMap_4_TXMLMAP_IN instanceof RequestERRORStruct) {
		RequestERROR = (RequestERRORStruct)row_out_tXMLMap_4_TXMLMAP_IN;
			routines.system.NestXMLTool.generateOk(RequestERROR.body, false);		
	}
 


	tos_count_tXMLMap_4_TXMLMAP_IN++;

/**
 * [tXMLMap_4_TXMLMAP_IN main ] stop
 */
	
	/**
	 * [tXMLMap_4_TXMLMAP_IN process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_4";
	
	currentComponent="tXMLMap_4_TXMLMAP_IN";
	
	

 



/**
 * [tXMLMap_4_TXMLMAP_IN process_data_begin ] stop
 */
// Start of branch "RequestOK"
if(RequestOK != null) { 



	
	/**
	 * [tJavaRow_2 main ] start
	 */

	

	
	
	currentComponent="tJavaRow_2";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"RequestOK"
						
						);
					}
					

    //Code generated according to input schema and output schema
context.IdSolicitud = Integer.parseInt(RequestOK.IdSolicitud);

    nb_line_tJavaRow_2++;   

 


	tos_count_tJavaRow_2++;

/**
 * [tJavaRow_2 main ] stop
 */
	
	/**
	 * [tJavaRow_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJavaRow_2";
	
	

 



/**
 * [tJavaRow_2 process_data_begin ] stop
 */

	
	/**
	 * [tRunJob_1 main ] start
	 */

	

	
	
	currentComponent="tRunJob_1";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row2"
						
						);
					}
					
	java.util.List<String> paraList_tRunJob_1 = new java.util.ArrayList<String>();
	
	        				paraList_tRunJob_1.add("--father_pid="+pid);
	      			
	        				paraList_tRunJob_1.add("--root_pid="+rootPid);
	      			
	        				paraList_tRunJob_1.add("--father_node=tRunJob_1");
	      			
	        				paraList_tRunJob_1.add("--context=Default");
	      			
		if(enableLogStash){
			paraList_tRunJob_1.add("--audit.enabled="+enableLogStash);
		}
		
	//for feature:10589
	
		paraList_tRunJob_1.add("--stat_port=" + portStats);
	

	if(resuming_logs_dir_path != null){
		paraList_tRunJob_1.add("--resuming_logs_dir_path=" + resuming_logs_dir_path);
	}
	String childResumePath_tRunJob_1 = ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path);
	String tRunJobName_tRunJob_1 = ResumeUtil.getRighttRunJob(resuming_checkpoint_path);
	if("tRunJob_1".equals(tRunJobName_tRunJob_1) && childResumePath_tRunJob_1 != null){
		paraList_tRunJob_1.add("--resuming_checkpoint_path=" + ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path));
	}
	paraList_tRunJob_1.add("--parent_part_launcher=JOB:" + jobName + "/NODE:tRunJob_1");
	
	java.util.Map<String, Object> parentContextMap_tRunJob_1 = new java.util.HashMap<String, Object>();

	
		
		context.synchronizeContext();
            class ContextProcessor_tRunJob_1 {
                    private void transmitContext_0() {
                    parentContextMap_tRunJob_1.put("IdSolicitud", context.IdSolicitud);
                    paraList_tRunJob_1.add("--context_type " + "IdSolicitud" + "=" + "id_Integer");
                        }
                    public void transmitAllContext() {
                        transmitContext_0();
                    }
            }
            new ContextProcessor_tRunJob_1().transmitAllContext();
		java.util.Enumeration<?> propertyNames_tRunJob_1 = context.propertyNames();
		while (propertyNames_tRunJob_1.hasMoreElements()) {
			String key_tRunJob_1 = (String) propertyNames_tRunJob_1.nextElement();
			Object value_tRunJob_1 = (Object) context.get(key_tRunJob_1);
			if(value_tRunJob_1!=null) {  
				
					paraList_tRunJob_1.add("--context_param " + key_tRunJob_1 + "=" + value_tRunJob_1);
					
			} else {
				paraList_tRunJob_1.add("--context_param " + key_tRunJob_1 + "=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
			}
			
		}
		

	Object obj_tRunJob_1 = null;

	
		obj_tRunJob_1 = context.IdSolicitud;
		if(obj_tRunJob_1!=null) {
			if (obj_tRunJob_1.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_1.add("--context_param vafiarchivos_id=" + ((java.util.Date) obj_tRunJob_1).getTime());
			} else {
				
					paraList_tRunJob_1.add("--context_param vafiarchivos_id=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_1));
					
				
			}
		} else {
			paraList_tRunJob_1.add("--context_param vafiarchivos_id=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_1.put("vafiarchivos_id", obj_tRunJob_1);
	
	
		afi_cargue_siath.carguesiathmsv_0_1.CargueSiathMSV childJob_tRunJob_1 = new afi_cargue_siath.carguesiathmsv_0_1.CargueSiathMSV();
	    // pass DataSources
	    java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_1 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
	            .get(KEY_DB_DATASOURCES);
	    if (null != talendDataSources_tRunJob_1) {
	        java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_1 = new java.util.HashMap<String, javax.sql.DataSource>();
	        for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_1 : talendDataSources_tRunJob_1
			        .entrySet()) {
	            dataSources_tRunJob_1.put(talendDataSourceEntry_tRunJob_1.getKey(),
	                    talendDataSourceEntry_tRunJob_1.getValue().getRawDataSource());
	        }
	        childJob_tRunJob_1.setDataSources(dataSources_tRunJob_1);
	    }
		  
			childJob_tRunJob_1.parentContextMap = parentContextMap_tRunJob_1;
		  
		
		String[][] childReturn_tRunJob_1 = childJob_tRunJob_1.runJob((String[]) paraList_tRunJob_1.toArray(new String[paraList_tRunJob_1.size()]));
		
            if(childJob_tRunJob_1.getErrorCode() == null){
                globalMap.put("tRunJob_1_CHILD_RETURN_CODE", childJob_tRunJob_1.getStatus() != null && ("failure").equals(childJob_tRunJob_1.getStatus()) ? 1 : 0);
            }else{
                globalMap.put("tRunJob_1_CHILD_RETURN_CODE", childJob_tRunJob_1.getErrorCode());
            }
            if (childJob_tRunJob_1.getExceptionStackTrace() != null) {
                globalMap.put("tRunJob_1_CHILD_EXCEPTION_STACKTRACE", childJob_tRunJob_1.getExceptionStackTrace());
            }
                    errorCode = childJob_tRunJob_1.getErrorCode();
                if (childJob_tRunJob_1.getErrorCode() != null || ("failure").equals(childJob_tRunJob_1.getStatus())) {
                    java.lang.Exception ce_tRunJob_1 = childJob_tRunJob_1.getException();
                    throw new RuntimeException("Child job running failed.\n" + ((ce_tRunJob_1!=null) ? (ce_tRunJob_1.getClass().getName() + ": " + ce_tRunJob_1.getMessage()) : ""));
                }

 


	tos_count_tRunJob_1++;

/**
 * [tRunJob_1 main ] stop
 */
	
	/**
	 * [tRunJob_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tRunJob_1";
	
	

 



/**
 * [tRunJob_1 process_data_begin ] stop
 */
	
	/**
	 * [tRunJob_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tRunJob_1";
	
	

 



/**
 * [tRunJob_1 process_data_end ] stop
 */



	
	/**
	 * [tJavaRow_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tJavaRow_2";
	
	

 



/**
 * [tJavaRow_2 process_data_end ] stop
 */

} // End of branch "RequestOK"




// Start of branch "RequestERROR"
if(RequestERROR != null) { 



	
	/**
	 * [tRESTResponse_1 main ] start
	 */

	

	
	
	currentComponent="tRESTResponse_1";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"RequestERROR"
						
						);
					}
					

	java.io.OutputStream outputStream_tRESTResponse_1 = (java.io.OutputStream) globalMap.get("restResponseStream");
	boolean responseAlreadySent_tRESTResponse_1 = globalMap.containsKey("restResponse");

	if (null == outputStream_tRESTResponse_1 && responseAlreadySent_tRESTResponse_1) {
		throw new RuntimeException("Rest response already sent.");
	} else if (!globalMap.containsKey("restRequest")) {
		throw new RuntimeException("Not received rest request yet.");
	} else {
		Integer restProviderStatusCode_tRESTResponse_1 = 400;

		Object restProviderResponse_tRESTResponse_1 = null;
		if (null != RequestERROR.body) {
			restProviderResponse_tRESTResponse_1 = RequestERROR.body.getDocument();
		}

		java.util.Map<String, String> restProviderResponseHeaders_tRESTResponse_1 = new java.util.TreeMap<String, String>(String.CASE_INSENSITIVE_ORDER);
		java.lang.StringBuilder restProviderResponseHeader_cookies_tRESTResponse_1 = new java.lang.StringBuilder();
		final String setCookieHeader = "Set-Cookie";

        if (restProviderResponseHeader_cookies_tRESTResponse_1.length() > 0) {
		    restProviderResponseHeaders_tRESTResponse_1.put(setCookieHeader, restProviderResponseHeader_cookies_tRESTResponse_1.toString());
		}

        java.util.Map<String, Object> restRequest_tRESTResponse_1 = (java.util.Map<String, Object>) globalMap.get("restRequest");
        org.apache.cxf.jaxrs.ext.MessageContext messageContext_tRESTResponse_1 = (org.apache.cxf.jaxrs.ext.MessageContext) restRequest_tRESTResponse_1.get("MESSAGE_CONTEXT");
        

		if (null == outputStream_tRESTResponse_1) {
			java.util.Map<String, Object> restResponse_tRESTResponse_1 = new java.util.HashMap<String, Object>();
			restResponse_tRESTResponse_1.put("BODY", restProviderResponse_tRESTResponse_1);
			restResponse_tRESTResponse_1.put("STATUS", restProviderStatusCode_tRESTResponse_1);
			restResponse_tRESTResponse_1.put("HEADERS", restProviderResponseHeaders_tRESTResponse_1);
			restResponse_tRESTResponse_1.put("drop.json.root.element", Boolean.valueOf(true));
			globalMap.put("restResponse", restResponse_tRESTResponse_1);
			
		} else {

			javax.ws.rs.core.MediaType responseMediaType_tRESTResponse_1 = null;
			if (!responseAlreadySent_tRESTResponse_1) {
				org.apache.cxf.message.Message currentMessage = null;
				if (org.apache.cxf.jaxrs.utils.JAXRSUtils.getCurrentMessage() != null) {
					currentMessage = org.apache.cxf.jaxrs.utils.JAXRSUtils.getCurrentMessage();
				} else {
					currentMessage = ((org.apache.cxf.message.Message)restRequest_tRESTResponse_1.get("CURRENT_MESSAGE"));
				}

				if (currentMessage != null && currentMessage.getExchange() != null) {
					currentMessage.getExchange().put(StreamingDOM4JProvider.SUPRESS_XML_DECLARATION, true);
				}

				messageContext_tRESTResponse_1.put(org.apache.cxf.message.Message.RESPONSE_CODE, restProviderStatusCode_tRESTResponse_1);
				javax.ws.rs.core.MultivaluedMap<String, String> headersMultivaluedMap_tRESTResponse_1 = new org.apache.cxf.jaxrs.impl.MetadataMap<String, String>();
				for (java.util.Map.Entry<String, String> multivaluedHeader : restProviderResponseHeaders_tRESTResponse_1.entrySet()) {
					headersMultivaluedMap_tRESTResponse_1.putSingle(multivaluedHeader.getKey(), multivaluedHeader.getValue());
				}
				messageContext_tRESTResponse_1.put(org.apache.cxf.message.Message.PROTOCOL_HEADERS, headersMultivaluedMap_tRESTResponse_1);

				String responseContentType_tRESTResponse_1 = null;
				
				if (currentMessage != null && currentMessage.getExchange() != null) {
					responseContentType_tRESTResponse_1 = (String) currentMessage.getExchange().get(org.apache.cxf.message.Message.CONTENT_TYPE);
				}
					
				if (null == responseContentType_tRESTResponse_1) {
					// this should not be needed, just in case. set it to the first value in the sorted list returned from HttpHeaders
					responseMediaType_tRESTResponse_1 = messageContext_tRESTResponse_1.getHttpHeaders().getAcceptableMediaTypes().get(0);
				} else {
					responseMediaType_tRESTResponse_1 = org.apache.cxf.jaxrs.utils.JAXRSUtils.toMediaType(responseContentType_tRESTResponse_1);
				}
				globalMap.put("restResponseMediaType", responseMediaType_tRESTResponse_1);

				String responseMediaSubType_tRESTResponse_1 = responseMediaType_tRESTResponse_1.getSubtype();
				if (responseMediaSubType_tRESTResponse_1.equals("xml") || responseMediaSubType_tRESTResponse_1.endsWith("+xml")) {
					outputStream_tRESTResponse_1.write("<wrapper>".getBytes());
					globalMap.put("restResponseWrappingClosure", "</wrapper>");
				}
				if (responseMediaSubType_tRESTResponse_1.equals("json") || responseMediaSubType_tRESTResponse_1.endsWith("+json")) {
					outputStream_tRESTResponse_1.write("[".getBytes());
					globalMap.put("restResponseWrappingClosure", "]");
				}

				globalMap.put("restResponse", true);
			} else {
				responseMediaType_tRESTResponse_1 = (javax.ws.rs.core.MediaType) globalMap.get("restResponseMediaType");
			}

			if (null != restProviderResponse_tRESTResponse_1) {
				String responseMediaSubType_tRESTResponse_1 = responseMediaType_tRESTResponse_1.getSubtype();
				if (responseMediaSubType_tRESTResponse_1.equals("json") || responseMediaSubType_tRESTResponse_1.endsWith("+json")) {
					if (globalMap.containsKey("restResponseJsonStarted")) {
						outputStream_tRESTResponse_1.write(",".getBytes());
					} else {
						globalMap.put("restResponseJsonStarted", true);
					}
				}

				Class<? extends Object> responseBodyClass_tRESTResponse_1 = restProviderResponse_tRESTResponse_1.getClass();
				javax.ws.rs.ext.Providers messageBodyProviders_tRESTResponse_1 = messageContext_tRESTResponse_1.getProviders();
				javax.ws.rs.ext.MessageBodyWriter messageBodyWriter_tRESTResponse_1 = messageBodyProviders_tRESTResponse_1.getMessageBodyWriter(
						responseBodyClass_tRESTResponse_1, responseBodyClass_tRESTResponse_1, null, responseMediaType_tRESTResponse_1);

                if (messageBodyWriter_tRESTResponse_1 instanceof StreamingDOM4JProvider) {
                    ((StreamingDOM4JProvider)messageBodyWriter_tRESTResponse_1).setGlobalMap(globalMap);
                }

				messageBodyWriter_tRESTResponse_1.writeTo(restProviderResponse_tRESTResponse_1, responseBodyClass_tRESTResponse_1, responseBodyClass_tRESTResponse_1,
						new java.lang.annotation.Annotation[] {}, responseMediaType_tRESTResponse_1, null, outputStream_tRESTResponse_1);
			}
			// initial variant
			//outputStream_tRESTResponse_1.write(String.valueOf(restProviderResponse_tRESTResponse_1).getBytes());
			outputStream_tRESTResponse_1.flush();
		}
	}

 


	tos_count_tRESTResponse_1++;

/**
 * [tRESTResponse_1 main ] stop
 */
	
	/**
	 * [tRESTResponse_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tRESTResponse_1";
	
	

 



/**
 * [tRESTResponse_1 process_data_begin ] stop
 */
	
	/**
	 * [tRESTResponse_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tRESTResponse_1";
	
	

 



/**
 * [tRESTResponse_1 process_data_end ] stop
 */

} // End of branch "RequestERROR"




	
	/**
	 * [tXMLMap_4_TXMLMAP_IN process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_4";
	
	currentComponent="tXMLMap_4_TXMLMAP_IN";
	
	

 



/**
 * [tXMLMap_4_TXMLMAP_IN process_data_end ] stop
 */
	
	/**
	 * [tXMLMap_4_TXMLMAP_IN end ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_4";
	
	currentComponent="tXMLMap_4_TXMLMAP_IN";
	
	

}//TD512
 

ok_Hash.put("tXMLMap_4_TXMLMAP_IN", true);
end_Hash.put("tXMLMap_4_TXMLMAP_IN", System.currentTimeMillis());




/**
 * [tXMLMap_4_TXMLMAP_IN end ] stop
 */

	
	/**
	 * [tJavaRow_2 end ] start
	 */

	

	
	
	currentComponent="tJavaRow_2";
	
	

globalMap.put("tJavaRow_2_NB_LINE",nb_line_tJavaRow_2);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"RequestOK");
			  	}
			  	
 

ok_Hash.put("tJavaRow_2", true);
end_Hash.put("tJavaRow_2", System.currentTimeMillis());




/**
 * [tJavaRow_2 end ] stop
 */

	
	/**
	 * [tRunJob_1 end ] start
	 */

	

	
	
	currentComponent="tRunJob_1";
	
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row2");
			  	}
			  	
 

ok_Hash.put("tRunJob_1", true);
end_Hash.put("tRunJob_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk2", 0, "ok");
				}
				tFixedFlowInput_1Process(globalMap);



/**
 * [tRunJob_1 end ] stop
 */







	
	/**
	 * [tRESTResponse_1 end ] start
	 */

	

	
	
	currentComponent="tRESTResponse_1";
	
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"RequestERROR");
			  	}
			  	
 

ok_Hash.put("tRESTResponse_1", true);
end_Hash.put("tRESTResponse_1", System.currentTimeMillis());




/**
 * [tRESTResponse_1 end ] stop
 */









						if(execStat){
							runStat.updateStatOnConnection("Iterate", 2, "exec" + NB_ITERATE_tRESTRequest_1_In);
						}				
					




	
	/**
	 * [tRESTRequest_1_Loop process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tRESTRequest_1";
	
	currentComponent="tRESTRequest_1_Loop";
	
	

 



/**
 * [tRESTRequest_1_Loop process_data_end ] stop
 */
	
	/**
	 * [tRESTRequest_1_Loop end ] start
	 */

	

	
	
		currentVirtualComponent = "tRESTRequest_1";
	
	currentComponent="tRESTRequest_1_Loop";
	
	
				resourceMap.remove("inIterateVComp");
			
	} catch (Throwable e_tRESTRequest_1) {
        if (e_tRESTRequest_1 instanceof Exception) {
			new TalendException((Exception) e_tRESTRequest_1, currentComponent, globalMap).printStackTrace();
        } else {
			new TalendException(new RuntimeException (e_tRESTRequest_1), currentComponent, globalMap).printStackTrace();
       	}
		if(!globalMap.containsKey("restResponse")){
			java.util.Map<String, Object> restFault_tRESTRequest_1 = new java.util.HashMap<String, Object>();
			restFault_tRESTRequest_1.put("STATUS", 500);
			restFault_tRESTRequest_1.put("BODY", e_tRESTRequest_1.getMessage());
			globalMap.put("restResponse", restFault_tRESTRequest_1);
		}
		return;
	}
	nb_line_tRESTRequest_1++;
	globalMap.put("tRESTRequest_1_NB_LINE", nb_line_tRESTRequest_1);

				if(execStat){
					runStat.updateStatOnConnection(iterateId,2,0,"row3","ErrorCall","in","RequestOK","row2","RequestERROR");
				}
				
				
				
 

ok_Hash.put("tRESTRequest_1_Loop", true);
end_Hash.put("tRESTRequest_1_Loop", System.currentTimeMillis());




/**
 * [tRESTRequest_1_Loop end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
					te.setVirtualComponentName(currentVirtualComponent);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tRESTRequest_1_Loop finally ] start
	 */

	

	
	
		currentVirtualComponent = "tRESTRequest_1";
	
	currentComponent="tRESTRequest_1_Loop";
	
	

 



/**
 * [tRESTRequest_1_Loop finally ] stop
 */

	
	/**
	 * [tRESTRequest_1_In finally ] start
	 */

	

	
	
		currentVirtualComponent = "tRESTRequest_1";
	
	currentComponent="tRESTRequest_1_In";
	
	

 



/**
 * [tRESTRequest_1_In finally ] stop
 */

	
	/**
	 * [tXMLMap_2 finally ] start
	 */

	

	
	
	currentComponent="tXMLMap_2";
	
	

 



/**
 * [tXMLMap_2 finally ] stop
 */

	
	/**
	 * [tRESTResponse_2 finally ] start
	 */

	

	
	
	currentComponent="tRESTResponse_2";
	
	

 



/**
 * [tRESTResponse_2 finally ] stop
 */







	
	/**
	 * [tXMLMap_4_TXMLMAP_OUT finally ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_4";
	
	currentComponent="tXMLMap_4_TXMLMAP_OUT";
	
	

 



/**
 * [tXMLMap_4_TXMLMAP_OUT finally ] stop
 */

	
	/**
	 * [tXMLMap_4_TXMLMAP_IN finally ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_4";
	
	currentComponent="tXMLMap_4_TXMLMAP_IN";
	
	

 



/**
 * [tXMLMap_4_TXMLMAP_IN finally ] stop
 */

	
	/**
	 * [tJavaRow_2 finally ] start
	 */

	

	
	
	currentComponent="tJavaRow_2";
	
	

 



/**
 * [tJavaRow_2 finally ] stop
 */

	
	/**
	 * [tRunJob_1 finally ] start
	 */

	

	
	
	currentComponent="tRunJob_1";
	
	
	
 



/**
 * [tRunJob_1 finally ] stop
 */







	
	/**
	 * [tRESTResponse_1 finally ] start
	 */

	

	
	
	currentComponent="tRESTResponse_1";
	
	

 



/**
 * [tRESTResponse_1 finally ] stop
 */












				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tRESTRequest_1_Loop_SUBPROCESS_STATE", 1);
	}
	
    public String resuming_logs_dir_path = null;
    public String resuming_checkpoint_path = null;
    public String parent_part_launcher = null;
    private String resumeEntryMethodName = null;
    private boolean globalResumeTicket = false;

    public boolean watch = false;
    // portStats is null, it means don't execute the statistics
    public Integer portStats = null;
    public int portTraces = 4334;
    public String clientHost;
    public String defaultClientHost = "localhost";
    public String contextStr = "Default";
    public boolean isDefaultContext = true;
    public String pid = "0";
    public String rootPid = null;
    public String fatherPid = null;
    public String fatherNode = null;
    public long startTime = 0;
    public boolean isChildJob = false;
    public String log4jLevel = "";
    
    private boolean enableLogStash;

    private boolean execStat = true;

    private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
        protected java.util.Map<String, String> initialValue() {
            java.util.Map<String,String> threadRunResultMap = new java.util.HashMap<String, String>();
            threadRunResultMap.put("errorCode", null);
            threadRunResultMap.put("status", "");
            return threadRunResultMap;
        };
    };


    protected PropertiesWithType context_param = new PropertiesWithType();
    public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

    public String status= "";
    
    
    private final static java.util.Properties jobInfo = new java.util.Properties();
    private final static java.util.Map<String,String> mdcInfo = new java.util.HashMap<>();
    private final static java.util.concurrent.atomic.AtomicLong subJobPidCounter = new java.util.concurrent.atomic.AtomicLong();


    public static void main(String[] args){
        final ServiceCargueSiath ServiceCargueSiathClass = new ServiceCargueSiath();

        int exitCode = ServiceCargueSiathClass.runJobInTOS(args);

        System.exit(exitCode);
    }
	

	
	
	private void getjobInfo() {
		final String TEMPLATE_PATH = "src/main/templates/jobInfo_template.properties";
		final String BUILD_PATH = "../jobInfo.properties";
		final String path = this.getClass().getResource("").getPath();
		if(path.lastIndexOf("target") > 0) {
			final java.io.File templateFile = new java.io.File(
					path.substring(0, path.lastIndexOf("target")).concat(TEMPLATE_PATH));
			if (templateFile.exists()) {
				readJobInfo(templateFile);
				return;
			}
		}
			readJobInfo(new java.io.File(BUILD_PATH));
	}

    private void readJobInfo(java.io.File jobInfoFile){
	
        if(jobInfoFile.exists()) {
            try (java.io.InputStream is = new java.io.FileInputStream(jobInfoFile)) {
            	jobInfo.load(is);
            } catch (IOException e) {
            	 
                
            }
        }
    }


    public String[][] runJob(String[] args) {

        int exitCode = runJobInTOS(args);
        String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

        return bufferValue;
    }

    public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;
    	
        return hastBufferOutput;
    }

    public int runJobInTOS(String[] args) {
	   	// reset status
	   	status = "";
	   	
        String lastStr = "";
        for (String arg : args) {
            if (arg.equalsIgnoreCase("--context_param")) {
                lastStr = arg;
            } else if (lastStr.equals("")) {
                evalParam(arg);
            } else {
                evalParam(lastStr + " " + arg);
                lastStr = "";
            }
        }
        enableLogStash = "true".equalsIgnoreCase(System.getProperty("audit.enabled"));


		
		

        if(clientHost == null) {
            clientHost = defaultClientHost;
        }

        if(pid == null || "0".equals(pid)) {
            pid = TalendString.getAsciiRandomString(6);
        }


        if (rootPid==null) {
            rootPid = pid;
        }


        if (fatherPid==null) {
            fatherPid = pid;
        }else{
            isChildJob = true;
        }

        if (portStats != null) {
            // portStats = -1; //for testing
            if (portStats < 0 || portStats > 65535) {
                // issue:10869, the portStats is invalid, so this client socket can't open
                System.err.println("The statistics socket port " + portStats + " is invalid.");
                execStat = false;
            }
        } else {
            execStat = false;
        }
        boolean inOSGi = routines.system.BundleUtils.inOSGi();

        try {
            java.util.Dictionary<String, Object> jobProperties = null;
            if (inOSGi) {
                jobProperties = routines.system.BundleUtils.getJobProperties(jobName);
    
                if (jobProperties != null && jobProperties.get("context") != null) {
                    contextStr = (String)jobProperties.get("context");
                }
            }
            //call job/subjob with an existing context, like: --context=production. if without this parameter, there will use the default context instead.
            java.io.InputStream inContext = ServiceCargueSiath.class.getClassLoader().getResourceAsStream("afi_cargue_siath/servicecarguesiath_0_2/contexts/" + contextStr + ".properties");
            if (inContext == null) {
                inContext = ServiceCargueSiath.class.getClassLoader().getResourceAsStream("config/contexts/" + contextStr + ".properties");
            }
            if (inContext != null) {
                try {
                    //defaultProps is in order to keep the original context value
                    if(context != null && context.isEmpty()) {
    	                defaultProps.load(inContext);
    	                if (inOSGi && jobProperties != null) {
                             java.util.Enumeration<String> keys = jobProperties.keys();
                             while (keys.hasMoreElements()) {
                                 String propKey = keys.nextElement();
                                 if (defaultProps.containsKey(propKey)) {
                                     defaultProps.put(propKey, (String) jobProperties.get(propKey));
                                 }
                             }
    	                }
    	                context = new ContextProperties(defaultProps);
                    }
                } finally {
                    inContext.close();
                }
            } else if (!isDefaultContext) {
                //print info and job continue to run, for case: context_param is not empty.
                System.err.println("Could not find the context " + contextStr);
            }
            
            if(!context_param.isEmpty()) {
                context.putAll(context_param);
				//set types for params from parentJobs
				for (Object key: context_param.keySet()){
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
            }
            class ContextProcessing {
                private void processContext_0() {
                        context.setContextType("IdSolicitud", "id_Integer");
                        if(context.getStringValue("IdSolicitud") == null) {
                            context.IdSolicitud = null;
                        } else {
                            try{
                                context.IdSolicitud=routines.system.ParserUtils.parseTo_Integer (context.getProperty("IdSolicitud"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "IdSolicitud", e.getMessage()));
                                context.IdSolicitud=null;
                            }
                        }
                } 
                public void processAllContext() {
                        processContext_0();
                }
            }

            new ContextProcessing().processAllContext();
        } catch (java.io.IOException ie) {
            System.err.println("Could not load context "+contextStr);
            ie.printStackTrace();
        }

        // get context value from parent directly
        if (parentContextMap != null && !parentContextMap.isEmpty()) {if (parentContextMap.containsKey("IdSolicitud")) {
                context.IdSolicitud = (Integer) parentContextMap.get("IdSolicitud");
            }
        }

        //Resume: init the resumeUtil
        resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
        resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
        resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
        //Resume: jobStart
        resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","","","",resumeUtil.convertToJsonText(context,ContextProperties.class,parametersToEncrypt));


if(execStat) {
    try {
        runStat.openSocket(!isChildJob);
        runStat.setAllPID(rootPid, fatherPid, pid, jobName);
        runStat.startThreadStat(clientHost, portStats);
        runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
    } catch (java.io.IOException ioException) {
        ioException.printStackTrace();
    }
}



	
	    java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
	    globalMap.put("concurrentHashMap", concurrentHashMap);
	

    long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
    long endUsedMemory = 0;
    long end = 0;

    startTime = System.currentTimeMillis();


this.globalResumeTicket = true;//to run tPreJob





this.globalResumeTicket = false;//to run others jobs

try {
errorCode = null;tRESTRequest_1_LoopProcess(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tRESTRequest_1_Loop) {
globalMap.put("tRESTRequest_1_Loop_SUBPROCESS_STATE", -1);

e_tRESTRequest_1_Loop.printStackTrace();

}

this.globalResumeTicket = true;//to run tPostJob




        end = System.currentTimeMillis();

        if (watch) {
            System.out.println((end-startTime)+" milliseconds");
        }

        endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
        if (false) {
            System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : ServiceCargueSiath");
        }



if (execStat) {
    runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
    runStat.stopThreadStat();
}
    int returnCode = 0;


    if(errorCode == null) {
         returnCode = status != null && status.equals("failure") ? 1 : 0;
    } else {
         returnCode = errorCode.intValue();
    }
    resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","" + returnCode,"","","");
    resumeUtil.flush();


    return returnCode;

  }

    // only for OSGi env
    public void destroy() {


    }














    private java.util.Map<String, Object> getSharedConnections4REST() {
        java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();






        return connections;
    }

    private void evalParam(String arg) {
        if (arg.startsWith("--resuming_logs_dir_path")) {
            resuming_logs_dir_path = arg.substring(25);
        } else if (arg.startsWith("--resuming_checkpoint_path")) {
            resuming_checkpoint_path = arg.substring(27);
        } else if (arg.startsWith("--parent_part_launcher")) {
            parent_part_launcher = arg.substring(23);
        } else if (arg.startsWith("--watch")) {
            watch = true;
        } else if (arg.startsWith("--stat_port=")) {
            String portStatsStr = arg.substring(12);
            if (portStatsStr != null && !portStatsStr.equals("null")) {
                portStats = Integer.parseInt(portStatsStr);
            }
        } else if (arg.startsWith("--trace_port=")) {
            portTraces = Integer.parseInt(arg.substring(13));
        } else if (arg.startsWith("--client_host=")) {
            clientHost = arg.substring(14);
        } else if (arg.startsWith("--context=")) {
            contextStr = arg.substring(10);
            isDefaultContext = false;
        } else if (arg.startsWith("--father_pid=")) {
            fatherPid = arg.substring(13);
        } else if (arg.startsWith("--root_pid=")) {
            rootPid = arg.substring(11);
        } else if (arg.startsWith("--father_node=")) {
            fatherNode = arg.substring(14);
        } else if (arg.startsWith("--pid=")) {
            pid = arg.substring(6);
        } else if (arg.startsWith("--context_type")) {
            String keyValue = arg.substring(15);
			int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.setContextType(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }

            }

		} else if (arg.startsWith("--context_param")) {
            String keyValue = arg.substring(16);
            int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }
            }
        } else if (arg.startsWith("--context_file")) {
        	String keyValue = arg.substring(15);
        	String filePath = new String(java.util.Base64.getDecoder().decode(keyValue));
        	java.nio.file.Path contextFile = java.nio.file.Paths.get(filePath);
            try (java.io.BufferedReader reader = java.nio.file.Files.newBufferedReader(contextFile)) {
                String line;
                while ((line = reader.readLine()) != null) {
                    int index = -1;
                    if ( (index = line.indexOf('=')) > -1) {
							if (line.startsWith("--context_param")) {
								if ("id_Password".equals(context_param.getContextType(line.substring(16, index)))) {
									context_param.put(line.substring(16, index), routines.system.PasswordEncryptUtil.decryptPassword(
											line.substring(index + 1)));
								} else {
									context_param.put(line.substring(16, index), line.substring(index + 1));
								}
							}else {//--context_type
								context_param.setContextType(line.substring(15, index), line.substring(index + 1));
							}
                    }
                }
            } catch (java.io.IOException e) {
            	System.err.println("Could not load the context file: " + filePath);
                e.printStackTrace();
            }
        } else if (arg.startsWith("--log4jLevel=")) {
            log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--audit.enabled") && arg.contains("=")) {//for trunjob call
		    final int equal = arg.indexOf('=');
			final String key = arg.substring("--".length(), equal);
			System.setProperty(key, arg.substring(equal + 1));
		}
    }
    
    private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

    private final String[][] escapeChars = {
        {"\\\\","\\"},{"\\n","\n"},{"\\'","\'"},{"\\r","\r"},
        {"\\f","\f"},{"\\b","\b"},{"\\t","\t"}
        };
    private String replaceEscapeChars (String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0],currIndex);
				if (index>=0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0], strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
    }

    public Integer getErrorCode() {
        return errorCode;
    }


    public String getStatus() {
        return status;
    }

    ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 *     212030 characters generated by Talend Open Studio for ESB 
 *     on the October 28, 2024, 11:13:13 AM COT
 ************************************************************************************************/