// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for ESB
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


package afi_principal.consolidado_salud_1_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.GenerarUuid;
import routines.Mathematical;
import routines.ExtraerBlob;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;
 




	//the import part of tJava_2
	//import java.util.List;

	//the import part of tJavaRow_4
	//import java.util.List;

	//the import part of tJava_3
	//import java.util.List;

	//the import part of tJavaRow_1
	//import java.util.List;

	//the import part of tJavaRow_2
	//import java.util.List;

	//the import part of tJavaRow_3
	//import java.util.List;

	//the import part of tJava_7
	//import java.util.List;

	//the import part of tJava_1
	//import java.util.List;

	//the import part of tJava_11
	//import java.util.List;

	//the import part of tJavaRow_5
	//import java.util.List;

	//the import part of tJavaRow_6
	//import java.util.List;

	//the import part of tJavaRow_7
	//import java.util.List;

	//the import part of tJavaRow_8
	//import java.util.List;

	//the import part of tJava_10
	//import java.util.List;

	//the import part of tJava_9
	//import java.util.List;

	//the import part of tJavaRow_9
	//import java.util.List;

	//the import part of tJava_6
	//import java.util.List;

	//the import part of tJavaRow_10
	//import java.util.List;

	//the import part of tJava_5
	//import java.util.List;

	//the import part of tJava_8
	//import java.util.List;

	//the import part of tJava_4
	//import java.util.List;


@SuppressWarnings("unused")

/**
 * Job: Consolidado_Salud Purpose: ETL Consolidado estado de salud<br>
 * Description:  <br>
 * @author jorgejlhc@gmail.com
 * @version 8.8.8.20240722_1936-SNAPSHOT
 * @status PROD
 */
public class Consolidado_Salud implements TalendJob {

protected static void logIgnoredError(String message, Throwable cause) {
       System.err.println(message);
       if (cause != null) {
               cause.printStackTrace();
       }

}


	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}
	private Object[] multiThreadLockWrite = new Object[0];
	
	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	
	private final static String utf8Charset = "UTF-8";
	

	//contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String,String> propertyTypes = new java.util.HashMap<>();
		
		public PropertiesWithType(java.util.Properties properties){
			super(properties);
		}
		public PropertiesWithType(){
			super();
		}
		
		public void setContextType(String key, String type) {
			propertyTypes.put(key,type);
		}
	
		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}	
	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();
		

	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties){
			super(properties);
		}
		public ContextProperties(){
			super();
		}

		public void synchronizeContext(){
			
			if(oracle_AdditionalParams != null){
				
					this.setProperty("oracle_AdditionalParams", oracle_AdditionalParams.toString());
				
			}
			
			if(oracle_ServiceName != null){
				
					this.setProperty("oracle_ServiceName", oracle_ServiceName.toString());
				
			}
			
			if(oracle_Host != null){
				
					this.setProperty("oracle_Host", oracle_Host.toString());
				
			}
			
			if(oracle_Schema != null){
				
					this.setProperty("oracle_Schema", oracle_Schema.toString());
				
			}
			
			if(oracle_Password != null){
				
					this.setProperty("oracle_Password", oracle_Password.toString());
				
			}
			
			if(oracle_User != null){
				
					this.setProperty("oracle_User", oracle_User.toString());
				
			}
			
			if(oracle_Port != null){
				
					this.setProperty("oracle_Port", oracle_Port.toString());
				
			}
			
			if(oracle_Sid != null){
				
					this.setProperty("oracle_Sid", oracle_Sid.toString());
				
			}
			
			if(fileSystem_Path != null){
				
					this.setProperty("fileSystem_Path", fileSystem_Path.toString());
				
			}
			
			if(fileSystem_Area != null){
				
					this.setProperty("fileSystem_Area", fileSystem_Area.toString());
				
			}
			
			if(infoNombreArchivo != null){
				
					this.setProperty("infoNombreArchivo", infoNombreArchivo.toString());
				
			}
			
			if(infoUsuarioIdArchivo != null){
				
					this.setProperty("infoUsuarioIdArchivo", infoUsuarioIdArchivo.toString());
				
			}
			
			if(infoIdArchivo != null){
				
					this.setProperty("infoIdArchivo", infoIdArchivo.toString());
				
			}
			
			if(infoTipoArchivo != null){
				
					this.setProperty("infoTipoArchivo", infoTipoArchivo.toString());
				
			}
			
			if(tipoJobProceso != null){
				
					this.setProperty("tipoJobProceso", tipoJobProceso.toString());
				
			}
			
			if(idProceso != null){
				
					this.setProperty("idProceso", idProceso.toString());
				
			}
			
			if(tipoProceso != null){
				
					this.setProperty("tipoProceso", tipoProceso.toString());
				
			}
			
			if(descripcionProceso != null){
				
					this.setProperty("descripcionProceso", descripcionProceso.toString());
				
			}
			
			if(auxAumentoRegistros != null){
				
					this.setProperty("auxAumentoRegistros", auxAumentoRegistros.toString());
				
			}
			
			if(archivoConfiguracion != null){
				
					this.setProperty("archivoConfiguracion", archivoConfiguracion.toString());
				
			}
			
			if(outCodigo != null){
				
					this.setProperty("outCodigo", outCodigo.toString());
				
			}
			
			if(auxPosicionRegistros != null){
				
					this.setProperty("auxPosicionRegistros", auxPosicionRegistros.toString());
				
			}
			
			if(archivoSalida != null){
				
					this.setProperty("archivoSalida", archivoSalida.toString());
				
			}
			
			if(infoConteoRegistros != null){
				
					this.setProperty("infoConteoRegistros", infoConteoRegistros.toString());
				
			}
			
			if(OPCION2 != null){
				
					this.setProperty("OPCION2", OPCION2.toString());
				
			}
			
			if(AFILIADOS_ID != null){
				
					this.setProperty("AFILIADOS_ID", AFILIADOS_ID.toString());
				
			}
			
			if(OPCION1 != null){
				
					this.setProperty("OPCION1", OPCION1.toString());
				
			}
			
			if(TIPO_PREGUNTA_ID != null){
				
					this.setProperty("TIPO_PREGUNTA_ID", TIPO_PREGUNTA_ID.toString());
				
			}
			
			if(PREGUNTAS_ID != null){
				
					this.setProperty("PREGUNTAS_ID", PREGUNTAS_ID.toString());
				
			}
			
			if(RESPUESTA_ID != null){
				
					this.setProperty("RESPUESTA_ID", RESPUESTA_ID.toString());
				
			}
			
			if(AuxOpcion2 != null){
				
					this.setProperty("AuxOpcion2", AuxOpcion2.toString());
				
			}
			
			if(AuxValor != null){
				
					this.setProperty("AuxValor", AuxValor.toString());
				
			}
			
			if(AuxOpcion1 != null){
				
					this.setProperty("AuxOpcion1", AuxOpcion1.toString());
				
			}
			
			if(tipoArchivoMinSaludEtapa3MultiafiliacionGenerado != null){
				
					this.setProperty("tipoArchivoMinSaludEtapa3MultiafiliacionGenerado", tipoArchivoMinSaludEtapa3MultiafiliacionGenerado.toString());
				
			}
			
			if(tipoArchivoMinSaludEtapa2NuevosRegistros != null){
				
					this.setProperty("tipoArchivoMinSaludEtapa2NuevosRegistros", tipoArchivoMinSaludEtapa2NuevosRegistros.toString());
				
			}
			
			if(tipoArchivoEntesTerritoriales != null){
				
					this.setProperty("tipoArchivoEntesTerritoriales", tipoArchivoEntesTerritoriales.toString());
				
			}
			
			if(tipoArchivoMinSaludEtapa2Novedades != null){
				
					this.setProperty("tipoArchivoMinSaludEtapa2Novedades", tipoArchivoMinSaludEtapa2Novedades.toString());
				
			}
			
			if(tipoArchivoMinSaludEtapa2NovedadesGenerado != null){
				
					this.setProperty("tipoArchivoMinSaludEtapa2NovedadesGenerado", tipoArchivoMinSaludEtapa2NovedadesGenerado.toString());
				
			}
			
			if(tipoArchivoMinSaludEtapa2NuevosRegistrosGenerado != null){
				
					this.setProperty("tipoArchivoMinSaludEtapa2NuevosRegistrosGenerado", tipoArchivoMinSaludEtapa2NuevosRegistrosGenerado.toString());
				
			}
			
			if(tipoArchivoMinSaludEtapa3Multiafiliacion != null){
				
					this.setProperty("tipoArchivoMinSaludEtapa3Multiafiliacion", tipoArchivoMinSaludEtapa3Multiafiliacion.toString());
				
			}
			
			if(tipoArchivoFedevidaGenerado != null){
				
					this.setProperty("tipoArchivoFedevidaGenerado", tipoArchivoFedevidaGenerado.toString());
				
			}
			
			if(tipoArchivoEntesGenerado != null){
				
					this.setProperty("tipoArchivoEntesGenerado", tipoArchivoEntesGenerado.toString());
				
			}
			
			if(tipoArchivoFedevida != null){
				
					this.setProperty("tipoArchivoFedevida", tipoArchivoFedevida.toString());
				
			}
			
			if(tipoArchivoCompendioSalud != null){
				
					this.setProperty("tipoArchivoCompendioSalud", tipoArchivoCompendioSalud.toString());
				
			}
			
			if(estArchivoErrorArchivo != null){
				
					this.setProperty("estArchivoErrorArchivo", estArchivoErrorArchivo.toString());
				
			}
			
			if(estArchivoEnProceso != null){
				
					this.setProperty("estArchivoEnProceso", estArchivoEnProceso.toString());
				
			}
			
			if(estArchivoErrorProcesamiento != null){
				
					this.setProperty("estArchivoErrorProcesamiento", estArchivoErrorProcesamiento.toString());
				
			}
			
			if(estArchivoProcesado != null){
				
					this.setProperty("estArchivoProcesado", estArchivoProcesado.toString());
				
			}
			
			if(estArchivoPausado != null){
				
					this.setProperty("estArchivoPausado", estArchivoPausado.toString());
				
			}
			
			if(estArchivoInactivo != null){
				
					this.setProperty("estArchivoInactivo", estArchivoInactivo.toString());
				
			}
			
			if(estArchivoCancelado != null){
				
					this.setProperty("estArchivoCancelado", estArchivoCancelado.toString());
				
			}
			
			if(estArchivoActivo != null){
				
					this.setProperty("estArchivoActivo", estArchivoActivo.toString());
				
			}
			
			if(AuxFechaFin != null){
				
					this.setProperty("AuxFechaFin", AuxFechaFin.toString());
				
			}
			
			if(AuxFechaInicio != null){
				
					this.setProperty("AuxFechaInicio", AuxFechaInicio.toString());
				
			}
			
			if(auxRango != null){
				
					this.setProperty("auxRango", auxRango.toString());
				
			}
			
			if(auxAfiliadosCompendio != null){
				
					this.setProperty("auxAfiliadosCompendio", auxAfiliadosCompendio.toString());
				
			}
			
			if(auxTotalRegistros != null){
				
					this.setProperty("auxTotalRegistros", auxTotalRegistros.toString());
				
			}
			
			if(tipoArchivoCompendioSaludGenerado != null){
				
					this.setProperty("tipoArchivoCompendioSaludGenerado", tipoArchivoCompendioSaludGenerado.toString());
				
			}
			
			if(mail_PasswordMail != null){
				
					this.setProperty("mail_PasswordMail", mail_PasswordMail.toString());
				
			}
			
			if(mail_SMTPPort != null){
				
					this.setProperty("mail_SMTPPort", mail_SMTPPort.toString());
				
			}
			
			if(mail_UsernameMail != null){
				
					this.setProperty("mail_UsernameMail", mail_UsernameMail.toString());
				
			}
			
			if(mail_SMTPHost != null){
				
					this.setProperty("mail_SMTPHost", mail_SMTPHost.toString());
				
			}
			
		}
		
		//if the stored or passed value is "<TALEND_NULL>" string, it mean null
		public String getStringValue(String key) {
			String origin_value = this.getProperty(key);
			if(NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY.equals(origin_value)) {
				return null;
			}
			return origin_value;
		}

public String oracle_AdditionalParams;
public String getOracle_AdditionalParams(){
	return this.oracle_AdditionalParams;
}
public String oracle_ServiceName;
public String getOracle_ServiceName(){
	return this.oracle_ServiceName;
}
public String oracle_Host;
public String getOracle_Host(){
	return this.oracle_Host;
}
public String oracle_Schema;
public String getOracle_Schema(){
	return this.oracle_Schema;
}
public String oracle_Password;
public String getOracle_Password(){
	return this.oracle_Password;
}
public String oracle_User;
public String getOracle_User(){
	return this.oracle_User;
}
public String oracle_Port;
public String getOracle_Port(){
	return this.oracle_Port;
}
public String oracle_Sid;
public String getOracle_Sid(){
	return this.oracle_Sid;
}
public String fileSystem_Path;
public String getFileSystem_Path(){
	return this.fileSystem_Path;
}
public String fileSystem_Area;
public String getFileSystem_Area(){
	return this.fileSystem_Area;
}
public String infoNombreArchivo;
public String getInfoNombreArchivo(){
	return this.infoNombreArchivo;
}
public Integer infoUsuarioIdArchivo;
public Integer getInfoUsuarioIdArchivo(){
	return this.infoUsuarioIdArchivo;
}
public Integer infoIdArchivo;
public Integer getInfoIdArchivo(){
	return this.infoIdArchivo;
}
public Integer infoTipoArchivo;
public Integer getInfoTipoArchivo(){
	return this.infoTipoArchivo;
}
public Integer tipoJobProceso;
public Integer getTipoJobProceso(){
	return this.tipoJobProceso;
}
public Integer idProceso;
public Integer getIdProceso(){
	return this.idProceso;
}
public Integer tipoProceso;
public Integer getTipoProceso(){
	return this.tipoProceso;
}
public String descripcionProceso;
public String getDescripcionProceso(){
	return this.descripcionProceso;
}
public Integer auxAumentoRegistros;
public Integer getAuxAumentoRegistros(){
	return this.auxAumentoRegistros;
}
public String archivoConfiguracion;
public String getArchivoConfiguracion(){
	return this.archivoConfiguracion;
}
public Boolean outCodigo;
public Boolean getOutCodigo(){
	return this.outCodigo;
}
public Integer auxPosicionRegistros;
public Integer getAuxPosicionRegistros(){
	return this.auxPosicionRegistros;
}
public String archivoSalida;
public String getArchivoSalida(){
	return this.archivoSalida;
}
public Integer infoConteoRegistros;
public Integer getInfoConteoRegistros(){
	return this.infoConteoRegistros;
}
public String OPCION2;
public String getOPCION2(){
	return this.OPCION2;
}
public Integer AFILIADOS_ID;
public Integer getAFILIADOS_ID(){
	return this.AFILIADOS_ID;
}
public String OPCION1;
public String getOPCION1(){
	return this.OPCION1;
}
public Integer TIPO_PREGUNTA_ID;
public Integer getTIPO_PREGUNTA_ID(){
	return this.TIPO_PREGUNTA_ID;
}
public Integer PREGUNTAS_ID;
public Integer getPREGUNTAS_ID(){
	return this.PREGUNTAS_ID;
}
public Integer RESPUESTA_ID;
public Integer getRESPUESTA_ID(){
	return this.RESPUESTA_ID;
}
public Integer AuxOpcion2;
public Integer getAuxOpcion2(){
	return this.AuxOpcion2;
}
public String AuxValor;
public String getAuxValor(){
	return this.AuxValor;
}
public Integer AuxOpcion1;
public Integer getAuxOpcion1(){
	return this.AuxOpcion1;
}
public Integer tipoArchivoMinSaludEtapa3MultiafiliacionGenerado;
public Integer getTipoArchivoMinSaludEtapa3MultiafiliacionGenerado(){
	return this.tipoArchivoMinSaludEtapa3MultiafiliacionGenerado;
}
public Integer tipoArchivoMinSaludEtapa2NuevosRegistros;
public Integer getTipoArchivoMinSaludEtapa2NuevosRegistros(){
	return this.tipoArchivoMinSaludEtapa2NuevosRegistros;
}
public Integer tipoArchivoEntesTerritoriales;
public Integer getTipoArchivoEntesTerritoriales(){
	return this.tipoArchivoEntesTerritoriales;
}
public Integer tipoArchivoMinSaludEtapa2Novedades;
public Integer getTipoArchivoMinSaludEtapa2Novedades(){
	return this.tipoArchivoMinSaludEtapa2Novedades;
}
public Integer tipoArchivoMinSaludEtapa2NovedadesGenerado;
public Integer getTipoArchivoMinSaludEtapa2NovedadesGenerado(){
	return this.tipoArchivoMinSaludEtapa2NovedadesGenerado;
}
public Integer tipoArchivoMinSaludEtapa2NuevosRegistrosGenerado;
public Integer getTipoArchivoMinSaludEtapa2NuevosRegistrosGenerado(){
	return this.tipoArchivoMinSaludEtapa2NuevosRegistrosGenerado;
}
public Integer tipoArchivoMinSaludEtapa3Multiafiliacion;
public Integer getTipoArchivoMinSaludEtapa3Multiafiliacion(){
	return this.tipoArchivoMinSaludEtapa3Multiafiliacion;
}
public Integer tipoArchivoFedevidaGenerado;
public Integer getTipoArchivoFedevidaGenerado(){
	return this.tipoArchivoFedevidaGenerado;
}
public Integer tipoArchivoEntesGenerado;
public Integer getTipoArchivoEntesGenerado(){
	return this.tipoArchivoEntesGenerado;
}
public Integer tipoArchivoFedevida;
public Integer getTipoArchivoFedevida(){
	return this.tipoArchivoFedevida;
}
public Integer tipoArchivoCompendioSalud;
public Integer getTipoArchivoCompendioSalud(){
	return this.tipoArchivoCompendioSalud;
}
public Integer estArchivoErrorArchivo;
public Integer getEstArchivoErrorArchivo(){
	return this.estArchivoErrorArchivo;
}
public Integer estArchivoEnProceso;
public Integer getEstArchivoEnProceso(){
	return this.estArchivoEnProceso;
}
public Integer estArchivoErrorProcesamiento;
public Integer getEstArchivoErrorProcesamiento(){
	return this.estArchivoErrorProcesamiento;
}
public Integer estArchivoProcesado;
public Integer getEstArchivoProcesado(){
	return this.estArchivoProcesado;
}
public Integer estArchivoPausado;
public Integer getEstArchivoPausado(){
	return this.estArchivoPausado;
}
public Integer estArchivoInactivo;
public Integer getEstArchivoInactivo(){
	return this.estArchivoInactivo;
}
public Integer estArchivoCancelado;
public Integer getEstArchivoCancelado(){
	return this.estArchivoCancelado;
}
public Integer estArchivoActivo;
public Integer getEstArchivoActivo(){
	return this.estArchivoActivo;
}
public String AuxFechaFin;
public String getAuxFechaFin(){
	return this.AuxFechaFin;
}
public String AuxFechaInicio;
public String getAuxFechaInicio(){
	return this.AuxFechaInicio;
}
public String auxRango;
public String getAuxRango(){
	return this.auxRango;
}
public String auxAfiliadosCompendio;
public String getAuxAfiliadosCompendio(){
	return this.auxAfiliadosCompendio;
}
public Integer auxTotalRegistros;
public Integer getAuxTotalRegistros(){
	return this.auxTotalRegistros;
}
public Integer tipoArchivoCompendioSaludGenerado;
public Integer getTipoArchivoCompendioSaludGenerado(){
	return this.tipoArchivoCompendioSaludGenerado;
}
public String mail_PasswordMail;
public String getMail_PasswordMail(){
	return this.mail_PasswordMail;
}
public String mail_SMTPPort;
public String getMail_SMTPPort(){
	return this.mail_SMTPPort;
}
public String mail_UsernameMail;
public String getMail_UsernameMail(){
	return this.mail_UsernameMail;
}
public String mail_SMTPHost;
public String getMail_SMTPHost(){
	return this.mail_SMTPHost;
}
	}
			
	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.
	public ContextProperties getContext() {
		return this.context;
	}
	private final String jobVersion = "1.1";
	private final String jobName = "Consolidado_Salud";
	private final String projectName = "AFI_PRINCIPAL";
	public Integer errorCode = null;
	private String currentComponent = "";
	
	private String cLabel =  null;
	
		private final java.util.Map<String, Object> globalMap = java.util.Collections.synchronizedMap(new java.util.HashMap<String, Object>());
		
	
		private final java.util.Map<String, Long> start_Hash = java.util.Collections.synchronizedMap(new java.util.HashMap<String, Long>());
		private final java.util.Map<String, Long> end_Hash = java.util.Collections.synchronizedMap(new java.util.HashMap<String, Long>());
		private final java.util.Map<String, Boolean> ok_Hash = java.util.Collections.synchronizedMap(new java.util.HashMap<String, Boolean>());
		public  final java.util.List<String[]> globalBuffer = java.util.Collections.synchronizedList(new java.util.ArrayList<String[]>());
	

private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";
	
	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(), new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}
	
	public void setDataSourceReferences(List serviceReferences) throws Exception{
		
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		java.util.Map<String, javax.sql.DataSource> dataSources = new java.util.HashMap<String, javax.sql.DataSource>();
		
		for (java.util.Map.Entry<String, javax.sql.DataSource> entry : BundleUtils.getServices(serviceReferences,  javax.sql.DataSource.class).entrySet()) {
                    dataSources.put(entry.getKey(), entry.getValue());
                    talendDataSources.put(entry.getKey(), new routines.system.TalendDataSource(entry.getValue()));
		}

		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}


private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

public String getExceptionStackTrace() {
	if ("failure".equals(this.getStatus())) {
		errorMessagePS.flush();
		return baos.toString();
	}
	return null;
}

private Exception exception;

public Exception getException() {
	if ("failure".equals(this.getStatus())) {
		return this.exception;
	}
	return null;
}

private class TalendException extends Exception {

	private static final long serialVersionUID = 1L;

	private java.util.Map<String, Object> globalMap = null;
	private Exception e = null;
	
	private String currentComponent = null;
	private String cLabel =  null;
	
	private String virtualComponentName = null;
	
	public void setVirtualComponentName (String virtualComponentName){
		this.virtualComponentName = virtualComponentName;
	}

	private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
		this.currentComponent= errorComponent;
		this.globalMap = globalMap;
		this.e = e;
	}
	
	private TalendException(Exception e, String errorComponent, String errorComponentLabel, final java.util.Map<String, Object> globalMap) {
		this(e, errorComponent, globalMap);
		this.cLabel = errorComponentLabel;
	}

	public Exception getException() {
		return this.e;
	}

	public String getCurrentComponent() {
		return this.currentComponent;
	}

	
    public String getExceptionCauseMessage(Exception e){
        Throwable cause = e;
        String message = null;
        int i = 10;
        while (null != cause && 0 < i--) {
            message = cause.getMessage();
            if (null == message) {
                cause = cause.getCause();
            } else {
                break;          
            }
        }
        if (null == message) {
            message = e.getClass().getName();
        }   
        return message;
    }

	@Override
	public void printStackTrace() {
		if (!(e instanceof TalendException || e instanceof TDieException)) {
			if(virtualComponentName!=null && currentComponent.indexOf(virtualComponentName+"_")==0){
				globalMap.put(virtualComponentName+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			}
			globalMap.put(currentComponent+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
		}
		if (!(e instanceof TDieException)) {
			if(e instanceof TalendException){
				e.printStackTrace();
			} else {
				e.printStackTrace();
				e.printStackTrace(errorMessagePS);
				Consolidado_Salud.this.exception = e;
			}
		}
		if (!(e instanceof TalendException)) {
		try {
			for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
				if (m.getName().compareTo(currentComponent + "_error") == 0) {
					m.invoke(Consolidado_Salud.this, new Object[] { e , currentComponent, globalMap});
					break;
				}
			}

			if(!(e instanceof TDieException)){
			}
		} catch (Exception e) {
			this.e.printStackTrace();
		}
		}
	}
}

			public void tPostjob_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tPostjob_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleClose_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleClose_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tJava_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_19_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_19_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashOutput_8_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_19_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_10_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_10_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashOutput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_10_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_13_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_13_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashOutput_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_13_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_18_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_18_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashOutput_11_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_18_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaRow_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFlowToIterate_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFixedFlowInput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tFixedFlowInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashOutput_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tFixedFlowInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFixedFlowInput_8_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tFixedFlowInput_8_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaRow_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tFixedFlowInput_8_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleSP_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
						try {
							
								if(this.execStat){
									runStat.updateStatOnConnection("OnComponentError8", 0, "error");
								}
							
							
								((java.util.Map)threadLocal.get()).put("errorCode", null);
								tJava_7Process(globalMap);
								if ( !"failure".equals(((java.util.Map)threadLocal.get()).get("status")) ) {
									((java.util.Map)threadLocal.get()).put("status", "end");
								}
								

						} catch (Exception e) {
							e.printStackTrace();
						}
						
					tFixedFlowInput_8_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaRow_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tFixedFlowInput_8_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaRow_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_7_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tJava_7_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFlowToIterate_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFixedFlowInput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tFixedFlowInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashOutput_7_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
						try {
							
								if(this.execStat){
									runStat.updateStatOnConnection("OnComponentError11", 0, "error");
								}
							
							
								((java.util.Map)threadLocal.get()).put("errorCode", null);
								tJava_11Process(globalMap);
								if ( !"failure".equals(((java.util.Map)threadLocal.get()).get("status")) ) {
									((java.util.Map)threadLocal.get()).put("status", "end");
								}
								

						} catch (Exception e) {
							e.printStackTrace();
						}
						
					tFixedFlowInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_11_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tJava_11_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFixedFlowInput_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tFixedFlowInput_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaRow_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tFixedFlowInput_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_7_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_7_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaRow_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_7_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFixedFlowInput_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tFixedFlowInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaRow_7_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tFixedFlowInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleSP_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tFixedFlowInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaRow_8_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tFixedFlowInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashOutput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_10_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tJava_10_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLoop_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tLoop_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_9_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tLoop_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_7_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_7_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tSampleRow_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_7_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaRow_9_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_7_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPivotToColumnsDelimited_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFixedFlowInput_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tFixedFlowInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tFixedFlowInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleOutput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tFixedFlowInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tJava_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tFixedFlowInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_8_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPrejob_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tPrejob_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileExist_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tFileExist_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputXML_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tFileInputXML_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaRow_10_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tFileInputXML_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleConnection_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
						try {
							
								if(this.execStat){
									runStat.updateStatOnConnection("OnComponentError4", 0, "error");
								}
							
							
								((java.util.Map)threadLocal.get()).put("errorCode", null);
								tDie_1Process(globalMap);
								if ( !"failure".equals(((java.util.Map)threadLocal.get()).get("status")) ) {
									((java.util.Map)threadLocal.get()).put("status", "end");
								}
								

						} catch (Exception e) {
							e.printStackTrace();
						}
						
					tOracleConnection_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDie_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDie_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tJava_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRunJob_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tRunJob_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleConnection_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
						try {
							
								if(this.execStat){
									runStat.updateStatOnConnection("OnComponentError5", 0, "error");
								}
							
							
								((java.util.Map)threadLocal.get()).put("errorCode", null);
								tDie_2Process(globalMap);
								if ( !"failure".equals(((java.util.Map)threadLocal.get()).get("status")) ) {
									((java.util.Map)threadLocal.get()).put("status", "end");
								}
								

						} catch (Exception e) {
							e.printStackTrace();
						}
						
					tOracleConnection_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDie_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDie_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_8_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tJava_8_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tJava_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tFixedFlowInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row_gen_afiliados_in_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row_afi_planafiliaciones_in_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row_gen_preguntas_in_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row_gen_tdocumentos_in_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row_gen_sexos_in_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDenormalize_1_DenormalizeOut_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
							tDenormalize_1_ArrayIn_error(exception, errorComponent, globalMap);
						
						}
					
			public void tDenormalize_1_ArrayIn_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_7_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostjob_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleClose_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleInput_19_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleInput_10_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleInput_13_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleInput_18_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleInput_3_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleInput_5_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFixedFlowInput_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFixedFlowInput_8_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleInput_6_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_7_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tHashInput_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFixedFlowInput_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_11_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFixedFlowInput_6_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleInput_7_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFixedFlowInput_5_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleInput_4_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_10_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tLoop_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tHashInput_7_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tHashInput_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFixedFlowInput_3_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_6_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tPrejob_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileExist_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileInputXML_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleConnection_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDie_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_5_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tRunJob_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleConnection_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDie_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_8_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_4_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
	









public void tPostjob_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPostjob_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tPostjob_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostjob_1", false);
		start_Hash.put("tPostjob_1", System.currentTimeMillis());
		
	
	currentComponent="tPostjob_1";
	
	
		int tos_count_tPostjob_1 = 0;
		

 



/**
 * [tPostjob_1 begin ] stop
 */
	
	/**
	 * [tPostjob_1 main ] start
	 */

	

	
	
	currentComponent="tPostjob_1";
	
	

 


	tos_count_tPostjob_1++;

/**
 * [tPostjob_1 main ] stop
 */
	
	/**
	 * [tPostjob_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tPostjob_1";
	
	

 



/**
 * [tPostjob_1 process_data_begin ] stop
 */
	
	/**
	 * [tPostjob_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tPostjob_1";
	
	

 



/**
 * [tPostjob_1 process_data_end ] stop
 */
	
	/**
	 * [tPostjob_1 end ] start
	 */

	

	
	
	currentComponent="tPostjob_1";
	
	

 

ok_Hash.put("tPostjob_1", true);
end_Hash.put("tPostjob_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk4", 0, "ok");
				}
				tOracleClose_1Process(globalMap);



/**
 * [tPostjob_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPostjob_1 finally ] start
	 */

	

	
	
	currentComponent="tPostjob_1";
	
	

 



/**
 * [tPostjob_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPostjob_1_SUBPROCESS_STATE", 1);
	}
	


public void tOracleClose_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleClose_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tOracleClose_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleClose_1", false);
		start_Hash.put("tOracleClose_1", System.currentTimeMillis());
		
	
	currentComponent="tOracleClose_1";
	
	
		int tos_count_tOracleClose_1 = 0;
		

 



/**
 * [tOracleClose_1 begin ] stop
 */
	
	/**
	 * [tOracleClose_1 main ] start
	 */

	

	
	
	currentComponent="tOracleClose_1";
	
	

	java.sql.Connection conn_tOracleClose_1 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_2");
	
	if(conn_tOracleClose_1 != null && !conn_tOracleClose_1.isClosed())
	{
		
			conn_tOracleClose_1.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_tOracleConnection_2"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
	}

 


	tos_count_tOracleClose_1++;

/**
 * [tOracleClose_1 main ] stop
 */
	
	/**
	 * [tOracleClose_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleClose_1";
	
	

 



/**
 * [tOracleClose_1 process_data_begin ] stop
 */
	
	/**
	 * [tOracleClose_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleClose_1";
	
	

 



/**
 * [tOracleClose_1 process_data_end ] stop
 */
	
	/**
	 * [tOracleClose_1 end ] start
	 */

	

	
	
	currentComponent="tOracleClose_1";
	
	

 

ok_Hash.put("tOracleClose_1", true);
end_Hash.put("tOracleClose_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk5", 0, "ok");
				}
				tJava_2Process(globalMap);



/**
 * [tOracleClose_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleClose_1 finally ] start
	 */

	

	
	
	currentComponent="tOracleClose_1";
	
	

 



/**
 * [tOracleClose_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleClose_1_SUBPROCESS_STATE", 1);
	}
	


public void tJava_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tJava_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_2", false);
		start_Hash.put("tJava_2", System.currentTimeMillis());
		
	
	currentComponent="tJava_2";
	
	
		int tos_count_tJava_2 = 0;
		


//***********************************************
System.out.println("*******************POSTJOB FINALIZADO COMPENDIO DE SALUD *******************");
 



/**
 * [tJava_2 begin ] stop
 */
	
	/**
	 * [tJava_2 main ] start
	 */

	

	
	
	currentComponent="tJava_2";
	
	

 


	tos_count_tJava_2++;

/**
 * [tJava_2 main ] stop
 */
	
	/**
	 * [tJava_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_2";
	
	

 



/**
 * [tJava_2 process_data_begin ] stop
 */
	
	/**
	 * [tJava_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_2";
	
	

 



/**
 * [tJava_2 process_data_end ] stop
 */
	
	/**
	 * [tJava_2 end ] start
	 */

	

	
	
	currentComponent="tJava_2";
	
	

 

ok_Hash.put("tJava_2", true);
end_Hash.put("tJava_2", System.currentTimeMillis());




/**
 * [tJava_2 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_2 finally ] start
	 */

	

	
	
	currentComponent="tJava_2";
	
	

 



/**
 * [tJava_2 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_2_SUBPROCESS_STATE", 1);
	}
	


public static class row36Struct implements routines.system.IPersistableRow<row36Struct> {
    final static byte[] commonByteArrayLock_AFI_PRINCIPAL_Consolidado_Salud = new byte[0];
    static byte[] commonByteArray_AFI_PRINCIPAL_Consolidado_Salud = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public BigDecimal ID;

				public BigDecimal getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return false;
				}
				public Boolean IDIsKey(){
				    return true;
				}
				public Integer IDLength(){
				    return 22;
				}
				public Integer IDPrecision(){
				    return 0;
				}
				public String IDDefault(){
				
					return "SALUDSIS\".\"ISEQ$$_92309\".nextval";
				
				}
				public String IDComment(){
				
				    return "PK - Llave primaria";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public String NOMBRE;

				public String getNOMBRE () {
					return this.NOMBRE;
				}

				public Boolean NOMBREIsNullable(){
				    return false;
				}
				public Boolean NOMBREIsKey(){
				    return false;
				}
				public Integer NOMBRELength(){
				    return 20;
				}
				public Integer NOMBREPrecision(){
				    return 0;
				}
				public String NOMBREDefault(){
				
					return null;
				
				}
				public String NOMBREComment(){
				
				    return "Nombre del Sexo";
				
				}
				public String NOMBREPattern(){
				
					return "";
				
				}
				public String NOMBREOriginalDbColumnName(){
				
					return "NOMBRE";
				
				}

				
			    public String SIGLA;

				public String getSIGLA () {
					return this.SIGLA;
				}

				public Boolean SIGLAIsNullable(){
				    return false;
				}
				public Boolean SIGLAIsKey(){
				    return false;
				}
				public Integer SIGLALength(){
				    return 1;
				}
				public Integer SIGLAPrecision(){
				    return 0;
				}
				public String SIGLADefault(){
				
					return null;
				
				}
				public String SIGLAComment(){
				
				    return "Sigla del Sexo";
				
				}
				public String SIGLAPattern(){
				
					return "";
				
				}
				public String SIGLAOriginalDbColumnName(){
				
					return "SIGLA";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.ID == null) ? 0 : this.ID.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row36Struct other = (row36Struct) obj;
		
						if (this.ID == null) {
							if (other.ID != null)
								return false;
						
						} else if (!this.ID.equals(other.ID))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row36Struct other) {

		other.ID = this.ID;
	            other.NOMBRE = this.NOMBRE;
	            other.SIGLA = this.SIGLA;
	            
	}

	public void copyKeysDataTo(row36Struct other) {

		other.ID = this.ID;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_PRINCIPAL_Consolidado_Salud.length) {
				if(length < 1024 && commonByteArray_AFI_PRINCIPAL_Consolidado_Salud.length == 0) {
   					commonByteArray_AFI_PRINCIPAL_Consolidado_Salud = new byte[1024];
				} else {
   					commonByteArray_AFI_PRINCIPAL_Consolidado_Salud = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_PRINCIPAL_Consolidado_Salud, 0, length);
			strReturn = new String(commonByteArray_AFI_PRINCIPAL_Consolidado_Salud, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_PRINCIPAL_Consolidado_Salud.length) {
				if(length < 1024 && commonByteArray_AFI_PRINCIPAL_Consolidado_Salud.length == 0) {
   					commonByteArray_AFI_PRINCIPAL_Consolidado_Salud = new byte[1024];
				} else {
   					commonByteArray_AFI_PRINCIPAL_Consolidado_Salud = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_PRINCIPAL_Consolidado_Salud, 0, length);
			strReturn = new String(commonByteArray_AFI_PRINCIPAL_Consolidado_Salud, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_PRINCIPAL_Consolidado_Salud) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
					this.NOMBRE = readString(dis);
					
					this.SIGLA = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_PRINCIPAL_Consolidado_Salud) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
					this.NOMBRE = readString(dis);
					
					this.SIGLA = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.ID);
					
					// String
				
						writeString(this.NOMBRE,dos);
					
					// String
				
						writeString(this.SIGLA,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ID);
					
					// String
				
						writeString(this.NOMBRE,dos);
					
					// String
				
						writeString(this.SIGLA,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",NOMBRE="+NOMBRE);
		sb.append(",SIGLA="+SIGLA);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row36Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.ID, other.ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_19Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_19_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row36Struct row36 = new row36Struct();




	
	/**
	 * [tHashOutput_8 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashOutput_8", false);
		start_Hash.put("tHashOutput_8", System.currentTimeMillis());
		
	
	currentComponent="tHashOutput_8";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row36");
					}
				
		int tos_count_tHashOutput_8 = 0;
		



org.talend.designer.components.hashfile.common.MapHashFile mf_tHashOutput_8=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();    
		org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row36Struct> tHashFile_tHashOutput_8 = null;
		String hashKey_tHashOutput_8 = "tHashFile_Consolidado_Salud_" + pid + "_tHashOutput_8";
			synchronized(org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.get(hashKey_tHashOutput_8)){
			    if(mf_tHashOutput_8.getResourceMap().get(hashKey_tHashOutput_8) == null){
	      		    mf_tHashOutput_8.getResourceMap().put(hashKey_tHashOutput_8, new org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row36Struct>(org.talend.designer.components.hashfile.common.MATCHING_MODE.KEEP_ALL));
	      		    tHashFile_tHashOutput_8 = mf_tHashOutput_8.getResourceMap().get(hashKey_tHashOutput_8);
			    }else{
			    	tHashFile_tHashOutput_8 = mf_tHashOutput_8.getResourceMap().get(hashKey_tHashOutput_8);
			    }
			}
        int nb_line_tHashOutput_8 = 0;

 



/**
 * [tHashOutput_8 begin ] stop
 */



	
	/**
	 * [tOracleInput_19 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_19", false);
		start_Hash.put("tOracleInput_19", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_19";
	
	
		int tos_count_tOracleInput_19 = 0;
		
	


	
		    int nb_line_tOracleInput_19 = 0;
		    java.sql.Connection conn_tOracleInput_19 = null;
				conn_tOracleInput_19 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");
				
                boolean isTimeZoneNull_tOracleInput_19 = false;
				boolean isConnectionWrapped_tOracleInput_19 = !(conn_tOracleInput_19 instanceof oracle.jdbc.OracleConnection) && conn_tOracleInput_19.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tOracleInput_19 = null;
                if (isConnectionWrapped_tOracleInput_19) {
					unwrappedOraConn_tOracleInput_19 = conn_tOracleInput_19.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tOracleInput_19 != null) {
                        isTimeZoneNull_tOracleInput_19 = (unwrappedOraConn_tOracleInput_19.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tOracleInput_19 = (((oracle.jdbc.OracleConnection)conn_tOracleInput_19).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tOracleInput_19) {
					java.sql.Statement stmtGetTZ_tOracleInput_19 = conn_tOracleInput_19.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_19 = stmtGetTZ_tOracleInput_19.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_19 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tOracleInput_19.next()) {
						sessionTimezone_tOracleInput_19 = rsGetTZ_tOracleInput_19.getString(1);
					}
					if (isConnectionWrapped_tOracleInput_19 && unwrappedOraConn_tOracleInput_19 != null) {
                        unwrappedOraConn_tOracleInput_19.setSessionTimeZone(sessionTimezone_tOracleInput_19);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_19).setSessionTimeZone(sessionTimezone_tOracleInput_19);
                    }
				}
			
		    
			java.sql.Statement stmt_tOracleInput_19 = conn_tOracleInput_19.createStatement();

		    String dbquery_tOracleInput_19 = "SELECT \n	GSX.ID,\n	GSX.NOMBRE,\n	GSX.SIGLA\nFROM\n	SALUDSIS.GEN_SEXOS GSX\nWHERE\n	GSX.ESTREGISTRO_ID=1";
		    

		    globalMap.put("tOracleInput_19_QUERY",dbquery_tOracleInput_19);

		    java.sql.ResultSet rs_tOracleInput_19 = null;

		    try {
		    	rs_tOracleInput_19 = stmt_tOracleInput_19.executeQuery(dbquery_tOracleInput_19);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_19 = rs_tOracleInput_19.getMetaData();
		    	int colQtyInRs_tOracleInput_19 = rsmd_tOracleInput_19.getColumnCount();

		    String tmpContent_tOracleInput_19 = null;
		    
		    
		    while (rs_tOracleInput_19.next()) {
		        nb_line_tOracleInput_19++;
		        
							if(colQtyInRs_tOracleInput_19 < 1) {
								row36.ID = null;
							} else {
		                          
					if(rs_tOracleInput_19.getObject(1) != null) {
						row36.ID = rs_tOracleInput_19.getBigDecimal(1);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_19 < 2) {
								row36.NOMBRE = null;
							} else {
	                         		
        	row36.NOMBRE = routines.system.JDBCUtil.getString(rs_tOracleInput_19, 2, false);
		                    }
							if(colQtyInRs_tOracleInput_19 < 3) {
								row36.SIGLA = null;
							} else {
	                         		
        	row36.SIGLA = routines.system.JDBCUtil.getString(rs_tOracleInput_19, 3, false);
		                    }
					




 



/**
 * [tOracleInput_19 begin ] stop
 */
	
	/**
	 * [tOracleInput_19 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_19";
	
	

 


	tos_count_tOracleInput_19++;

/**
 * [tOracleInput_19 main ] stop
 */
	
	/**
	 * [tOracleInput_19 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_19";
	
	

 



/**
 * [tOracleInput_19 process_data_begin ] stop
 */

	
	/**
	 * [tHashOutput_8 main ] start
	 */

	

	
	
	currentComponent="tHashOutput_8";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row36"
						
						);
					}
					



    
		row36Struct oneRow_tHashOutput_8 = new row36Struct();
				
					oneRow_tHashOutput_8.ID = row36.ID;
					oneRow_tHashOutput_8.NOMBRE = row36.NOMBRE;
					oneRow_tHashOutput_8.SIGLA = row36.SIGLA;
		
        tHashFile_tHashOutput_8.put(oneRow_tHashOutput_8);
        nb_line_tHashOutput_8 ++;

 


	tos_count_tHashOutput_8++;

/**
 * [tHashOutput_8 main ] stop
 */
	
	/**
	 * [tHashOutput_8 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashOutput_8";
	
	

 



/**
 * [tHashOutput_8 process_data_begin ] stop
 */
	
	/**
	 * [tHashOutput_8 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashOutput_8";
	
	

 



/**
 * [tHashOutput_8 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_19 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_19";
	
	

 



/**
 * [tOracleInput_19 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_19 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_19";
	
	

}
}finally{
	if (rs_tOracleInput_19 != null) {
		rs_tOracleInput_19.close();
	}
	if (stmt_tOracleInput_19 != null) {
		stmt_tOracleInput_19.close();
	}
}

globalMap.put("tOracleInput_19_NB_LINE",nb_line_tOracleInput_19);
 

ok_Hash.put("tOracleInput_19", true);
end_Hash.put("tOracleInput_19", System.currentTimeMillis());




/**
 * [tOracleInput_19 end ] stop
 */

	
	/**
	 * [tHashOutput_8 end ] start
	 */

	

	
	
	currentComponent="tHashOutput_8";
	
	
globalMap.put("tHashOutput_8_NB_LINE", nb_line_tHashOutput_8);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row36");
			  	}
			  	
 

ok_Hash.put("tHashOutput_8", true);
end_Hash.put("tHashOutput_8", System.currentTimeMillis());




/**
 * [tHashOutput_8 end ] stop
 */



				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tOracleInput_19:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk4", 0, "ok");
								} 
							
							tOracleInput_10Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleInput_19 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_19";
	
	

 



/**
 * [tOracleInput_19 finally ] stop
 */

	
	/**
	 * [tHashOutput_8 finally ] start
	 */

	

	
	
	currentComponent="tHashOutput_8";
	
	

 



/**
 * [tHashOutput_8 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_19_SUBPROCESS_STATE", 1);
	}
	


public static class row5Struct implements routines.system.IPersistableRow<row5Struct> {
    final static byte[] commonByteArrayLock_AFI_PRINCIPAL_Consolidado_Salud = new byte[0];
    static byte[] commonByteArray_AFI_PRINCIPAL_Consolidado_Salud = new byte[0];

	
			    public int ID;

				public int getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return false;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return 0;
				}
				public Integer IDPrecision(){
				    return 0;
				}
				public String IDDefault(){
				
					return "1";
				
				}
				public String IDComment(){
				
				    return "Estado del trabajo (1 Activo - 2 Realizado - 3 Fallido - 4 Cancelado)";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public String PREGUNTA;

				public String getPREGUNTA () {
					return this.PREGUNTA;
				}

				public Boolean PREGUNTAIsNullable(){
				    return false;
				}
				public Boolean PREGUNTAIsKey(){
				    return false;
				}
				public Integer PREGUNTALength(){
				    return 0;
				}
				public Integer PREGUNTAPrecision(){
				    return 0;
				}
				public String PREGUNTADefault(){
				
					return null;
				
				}
				public String PREGUNTAComment(){
				
				    return "Nombre del archivo";
				
				}
				public String PREGUNTAPattern(){
				
					return "";
				
				}
				public String PREGUNTAOriginalDbColumnName(){
				
					return "PREGUNTA";
				
				}

				
			    public int TEMASENCUESTA_ID;

				public int getTEMASENCUESTA_ID () {
					return this.TEMASENCUESTA_ID;
				}

				public Boolean TEMASENCUESTA_IDIsNullable(){
				    return false;
				}
				public Boolean TEMASENCUESTA_IDIsKey(){
				    return false;
				}
				public Integer TEMASENCUESTA_IDLength(){
				    return 0;
				}
				public Integer TEMASENCUESTA_IDPrecision(){
				    return 0;
				}
				public String TEMASENCUESTA_IDDefault(){
				
					return null;
				
				}
				public String TEMASENCUESTA_IDComment(){
				
				    return "FK - AFI_TARCHIVOS";
				
				}
				public String TEMASENCUESTA_IDPattern(){
				
					return "";
				
				}
				public String TEMASENCUESTA_IDOriginalDbColumnName(){
				
					return "TEMASENCUESTA_ID";
				
				}

				
			    public String ESTADO;

				public String getESTADO () {
					return this.ESTADO;
				}

				public Boolean ESTADOIsNullable(){
				    return false;
				}
				public Boolean ESTADOIsKey(){
				    return false;
				}
				public Integer ESTADOLength(){
				    return 0;
				}
				public Integer ESTADOPrecision(){
				    return 0;
				}
				public String ESTADODefault(){
				
					return null;
				
				}
				public String ESTADOComment(){
				
				    return "FK - GEN_USUARIOS (Usuario que subio el archivo)";
				
				}
				public String ESTADOPattern(){
				
					return "";
				
				}
				public String ESTADOOriginalDbColumnName(){
				
					return "ESTADO";
				
				}

				
			    public int ENCUESTAS_ID;

				public int getENCUESTAS_ID () {
					return this.ENCUESTAS_ID;
				}

				public Boolean ENCUESTAS_IDIsNullable(){
				    return false;
				}
				public Boolean ENCUESTAS_IDIsKey(){
				    return false;
				}
				public Integer ENCUESTAS_IDLength(){
				    return 0;
				}
				public Integer ENCUESTAS_IDPrecision(){
				    return 0;
				}
				public String ENCUESTAS_IDDefault(){
				
					return null;
				
				}
				public String ENCUESTAS_IDComment(){
				
				    return "Codigo de identificacion del archivo";
				
				}
				public String ENCUESTAS_IDPattern(){
				
					return "";
				
				}
				public String ENCUESTAS_IDOriginalDbColumnName(){
				
					return "ENCUESTAS_ID";
				
				}

				
			    public int TPREGUNTAS_ID;

				public int getTPREGUNTAS_ID () {
					return this.TPREGUNTAS_ID;
				}

				public Boolean TPREGUNTAS_IDIsNullable(){
				    return false;
				}
				public Boolean TPREGUNTAS_IDIsKey(){
				    return false;
				}
				public Integer TPREGUNTAS_IDLength(){
				    return 0;
				}
				public Integer TPREGUNTAS_IDPrecision(){
				    return 0;
				}
				public String TPREGUNTAS_IDDefault(){
				
					return null;
				
				}
				public String TPREGUNTAS_IDComment(){
				
				    return "Nombre del archivo en el File System";
				
				}
				public String TPREGUNTAS_IDPattern(){
				
					return "";
				
				}
				public String TPREGUNTAS_IDOriginalDbColumnName(){
				
					return "TPREGUNTAS_ID";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_PRINCIPAL_Consolidado_Salud.length) {
				if(length < 1024 && commonByteArray_AFI_PRINCIPAL_Consolidado_Salud.length == 0) {
   					commonByteArray_AFI_PRINCIPAL_Consolidado_Salud = new byte[1024];
				} else {
   					commonByteArray_AFI_PRINCIPAL_Consolidado_Salud = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_PRINCIPAL_Consolidado_Salud, 0, length);
			strReturn = new String(commonByteArray_AFI_PRINCIPAL_Consolidado_Salud, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_PRINCIPAL_Consolidado_Salud.length) {
				if(length < 1024 && commonByteArray_AFI_PRINCIPAL_Consolidado_Salud.length == 0) {
   					commonByteArray_AFI_PRINCIPAL_Consolidado_Salud = new byte[1024];
				} else {
   					commonByteArray_AFI_PRINCIPAL_Consolidado_Salud = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_PRINCIPAL_Consolidado_Salud, 0, length);
			strReturn = new String(commonByteArray_AFI_PRINCIPAL_Consolidado_Salud, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_PRINCIPAL_Consolidado_Salud) {

        	try {

        		int length = 0;
		
			        this.ID = dis.readInt();
					
					this.PREGUNTA = readString(dis);
					
			        this.TEMASENCUESTA_ID = dis.readInt();
					
					this.ESTADO = readString(dis);
					
			        this.ENCUESTAS_ID = dis.readInt();
					
			        this.TPREGUNTAS_ID = dis.readInt();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_PRINCIPAL_Consolidado_Salud) {

        	try {

        		int length = 0;
		
			        this.ID = dis.readInt();
					
					this.PREGUNTA = readString(dis);
					
			        this.TEMASENCUESTA_ID = dis.readInt();
					
					this.ESTADO = readString(dis);
					
			        this.ENCUESTAS_ID = dis.readInt();
					
			        this.TPREGUNTAS_ID = dis.readInt();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.ID);
					
					// String
				
						writeString(this.PREGUNTA,dos);
					
					// int
				
		            	dos.writeInt(this.TEMASENCUESTA_ID);
					
					// String
				
						writeString(this.ESTADO,dos);
					
					// int
				
		            	dos.writeInt(this.ENCUESTAS_ID);
					
					// int
				
		            	dos.writeInt(this.TPREGUNTAS_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.ID);
					
					// String
				
						writeString(this.PREGUNTA,dos);
					
					// int
				
		            	dos.writeInt(this.TEMASENCUESTA_ID);
					
					// String
				
						writeString(this.ESTADO,dos);
					
					// int
				
		            	dos.writeInt(this.ENCUESTAS_ID);
					
					// int
				
		            	dos.writeInt(this.TPREGUNTAS_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",PREGUNTA="+PREGUNTA);
		sb.append(",TEMASENCUESTA_ID="+String.valueOf(TEMASENCUESTA_ID));
		sb.append(",ESTADO="+ESTADO);
		sb.append(",ENCUESTAS_ID="+String.valueOf(ENCUESTAS_ID));
		sb.append(",TPREGUNTAS_ID="+String.valueOf(TPREGUNTAS_ID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row5Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_10Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_10_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row5Struct row5 = new row5Struct();




	
	/**
	 * [tHashOutput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashOutput_1", false);
		start_Hash.put("tHashOutput_1", System.currentTimeMillis());
		
	
	currentComponent="tHashOutput_1";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row5");
					}
				
		int tos_count_tHashOutput_1 = 0;
		



org.talend.designer.components.hashfile.common.MapHashFile mf_tHashOutput_1=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();    
		org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row5Struct> tHashFile_tHashOutput_1 = null;
		String hashKey_tHashOutput_1 = "tHashFile_Consolidado_Salud_" + pid + "_tHashOutput_1";
			synchronized(org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.get(hashKey_tHashOutput_1)){
			    if(mf_tHashOutput_1.getResourceMap().get(hashKey_tHashOutput_1) == null){
	      		    mf_tHashOutput_1.getResourceMap().put(hashKey_tHashOutput_1, new org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row5Struct>(org.talend.designer.components.hashfile.common.MATCHING_MODE.KEEP_ALL));
	      		    tHashFile_tHashOutput_1 = mf_tHashOutput_1.getResourceMap().get(hashKey_tHashOutput_1);
			    }else{
			    	tHashFile_tHashOutput_1 = mf_tHashOutput_1.getResourceMap().get(hashKey_tHashOutput_1);
			    }
			}
        int nb_line_tHashOutput_1 = 0;

 



/**
 * [tHashOutput_1 begin ] stop
 */



	
	/**
	 * [tOracleInput_10 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_10", false);
		start_Hash.put("tOracleInput_10", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_10";
	
	
		int tos_count_tOracleInput_10 = 0;
		
	


	
		    int nb_line_tOracleInput_10 = 0;
		    java.sql.Connection conn_tOracleInput_10 = null;
				conn_tOracleInput_10 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");
				
                boolean isTimeZoneNull_tOracleInput_10 = false;
				boolean isConnectionWrapped_tOracleInput_10 = !(conn_tOracleInput_10 instanceof oracle.jdbc.OracleConnection) && conn_tOracleInput_10.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tOracleInput_10 = null;
                if (isConnectionWrapped_tOracleInput_10) {
					unwrappedOraConn_tOracleInput_10 = conn_tOracleInput_10.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tOracleInput_10 != null) {
                        isTimeZoneNull_tOracleInput_10 = (unwrappedOraConn_tOracleInput_10.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tOracleInput_10 = (((oracle.jdbc.OracleConnection)conn_tOracleInput_10).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tOracleInput_10) {
					java.sql.Statement stmtGetTZ_tOracleInput_10 = conn_tOracleInput_10.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_10 = stmtGetTZ_tOracleInput_10.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_10 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tOracleInput_10.next()) {
						sessionTimezone_tOracleInput_10 = rsGetTZ_tOracleInput_10.getString(1);
					}
					if (isConnectionWrapped_tOracleInput_10 && unwrappedOraConn_tOracleInput_10 != null) {
                        unwrappedOraConn_tOracleInput_10.setSessionTimeZone(sessionTimezone_tOracleInput_10);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_10).setSessionTimeZone(sessionTimezone_tOracleInput_10);
                    }
				}
			
		    
			java.sql.Statement stmt_tOracleInput_10 = conn_tOracleInput_10.createStatement();

		    String dbquery_tOracleInput_10 = "SELECT \n	PRE.ID, \n	PRE.PREGUNTA, \n	PRE.TEMASENCUESTA_ID, \n	PRE.ESTADO,\n	PRE.ENCUESTAS_ID, \n	PRE.TPREGUNTAS_ID\nFR"
+"OM\n	SALUDSIS.GEN_PREGUNTAS PRE\nWHERE\n	PRE.ESTREGISTRO_ID=1";
		    

		    globalMap.put("tOracleInput_10_QUERY",dbquery_tOracleInput_10);

		    java.sql.ResultSet rs_tOracleInput_10 = null;

		    try {
		    	rs_tOracleInput_10 = stmt_tOracleInput_10.executeQuery(dbquery_tOracleInput_10);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_10 = rs_tOracleInput_10.getMetaData();
		    	int colQtyInRs_tOracleInput_10 = rsmd_tOracleInput_10.getColumnCount();

		    String tmpContent_tOracleInput_10 = null;
		    
		    
		    while (rs_tOracleInput_10.next()) {
		        nb_line_tOracleInput_10++;
		        
							if(colQtyInRs_tOracleInput_10 < 1) {
								row5.ID = 0;
							} else {
		                          
					if(rs_tOracleInput_10.getObject(1) != null) {
						row5.ID = rs_tOracleInput_10.getInt(1);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_10 < 2) {
								row5.PREGUNTA = null;
							} else {
	                         		
        	row5.PREGUNTA = routines.system.JDBCUtil.getString(rs_tOracleInput_10, 2, false);
		                    }
							if(colQtyInRs_tOracleInput_10 < 3) {
								row5.TEMASENCUESTA_ID = 0;
							} else {
		                          
					if(rs_tOracleInput_10.getObject(3) != null) {
						row5.TEMASENCUESTA_ID = rs_tOracleInput_10.getInt(3);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_10 < 4) {
								row5.ESTADO = null;
							} else {
	                         		
        	row5.ESTADO = routines.system.JDBCUtil.getString(rs_tOracleInput_10, 4, false);
		                    }
							if(colQtyInRs_tOracleInput_10 < 5) {
								row5.ENCUESTAS_ID = 0;
							} else {
		                          
					if(rs_tOracleInput_10.getObject(5) != null) {
						row5.ENCUESTAS_ID = rs_tOracleInput_10.getInt(5);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_10 < 6) {
								row5.TPREGUNTAS_ID = 0;
							} else {
		                          
					if(rs_tOracleInput_10.getObject(6) != null) {
						row5.TPREGUNTAS_ID = rs_tOracleInput_10.getInt(6);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
					




 



/**
 * [tOracleInput_10 begin ] stop
 */
	
	/**
	 * [tOracleInput_10 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_10";
	
	

 


	tos_count_tOracleInput_10++;

/**
 * [tOracleInput_10 main ] stop
 */
	
	/**
	 * [tOracleInput_10 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_10";
	
	

 



/**
 * [tOracleInput_10 process_data_begin ] stop
 */

	
	/**
	 * [tHashOutput_1 main ] start
	 */

	

	
	
	currentComponent="tHashOutput_1";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row5"
						
						);
					}
					



    
		row5Struct oneRow_tHashOutput_1 = new row5Struct();
				
					oneRow_tHashOutput_1.ID = row5.ID;
					oneRow_tHashOutput_1.PREGUNTA = row5.PREGUNTA;
					oneRow_tHashOutput_1.TEMASENCUESTA_ID = row5.TEMASENCUESTA_ID;
					oneRow_tHashOutput_1.ESTADO = row5.ESTADO;
					oneRow_tHashOutput_1.ENCUESTAS_ID = row5.ENCUESTAS_ID;
					oneRow_tHashOutput_1.TPREGUNTAS_ID = row5.TPREGUNTAS_ID;
		
        tHashFile_tHashOutput_1.put(oneRow_tHashOutput_1);
        nb_line_tHashOutput_1 ++;

 


	tos_count_tHashOutput_1++;

/**
 * [tHashOutput_1 main ] stop
 */
	
	/**
	 * [tHashOutput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashOutput_1";
	
	

 



/**
 * [tHashOutput_1 process_data_begin ] stop
 */
	
	/**
	 * [tHashOutput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashOutput_1";
	
	

 



/**
 * [tHashOutput_1 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_10 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_10";
	
	

 



/**
 * [tOracleInput_10 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_10 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_10";
	
	

}
}finally{
	if (rs_tOracleInput_10 != null) {
		rs_tOracleInput_10.close();
	}
	if (stmt_tOracleInput_10 != null) {
		stmt_tOracleInput_10.close();
	}
}

globalMap.put("tOracleInput_10_NB_LINE",nb_line_tOracleInput_10);
 

ok_Hash.put("tOracleInput_10", true);
end_Hash.put("tOracleInput_10", System.currentTimeMillis());




/**
 * [tOracleInput_10 end ] stop
 */

	
	/**
	 * [tHashOutput_1 end ] start
	 */

	

	
	
	currentComponent="tHashOutput_1";
	
	
globalMap.put("tHashOutput_1_NB_LINE", nb_line_tHashOutput_1);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row5");
			  	}
			  	
 

ok_Hash.put("tHashOutput_1", true);
end_Hash.put("tHashOutput_1", System.currentTimeMillis());




/**
 * [tHashOutput_1 end ] stop
 */



				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tOracleInput_10:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk5", 0, "ok");
								} 
							
							tOracleInput_13Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleInput_10 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_10";
	
	

 



/**
 * [tOracleInput_10 finally ] stop
 */

	
	/**
	 * [tHashOutput_1 finally ] start
	 */

	

	
	
	currentComponent="tHashOutput_1";
	
	

 



/**
 * [tHashOutput_1 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_10_SUBPROCESS_STATE", 1);
	}
	


public static class row30Struct implements routines.system.IPersistableRow<row30Struct> {
    final static byte[] commonByteArrayLock_AFI_PRINCIPAL_Consolidado_Salud = new byte[0];
    static byte[] commonByteArray_AFI_PRINCIPAL_Consolidado_Salud = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public BigDecimal ID;

				public BigDecimal getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return false;
				}
				public Boolean IDIsKey(){
				    return true;
				}
				public Integer IDLength(){
				    return 22;
				}
				public Integer IDPrecision(){
				    return 0;
				}
				public String IDDefault(){
				
					return "SALUDSIS\".\"ISEQ$$_100698\".nextval";
				
				}
				public String IDComment(){
				
				    return "PK Llave primaria";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public BigDecimal TAFILIADOS_ID;

				public BigDecimal getTAFILIADOS_ID () {
					return this.TAFILIADOS_ID;
				}

				public Boolean TAFILIADOS_IDIsNullable(){
				    return false;
				}
				public Boolean TAFILIADOS_IDIsKey(){
				    return false;
				}
				public Integer TAFILIADOS_IDLength(){
				    return 22;
				}
				public Integer TAFILIADOS_IDPrecision(){
				    return 0;
				}
				public String TAFILIADOS_IDDefault(){
				
					return null;
				
				}
				public String TAFILIADOS_IDComment(){
				
				    return "FK (AFI_TAFILIADOS)";
				
				}
				public String TAFILIADOS_IDPattern(){
				
					return "";
				
				}
				public String TAFILIADOS_IDOriginalDbColumnName(){
				
					return "TAFILIADOS_ID";
				
				}

				
			    public BigDecimal TAFILIACIONES_ID;

				public BigDecimal getTAFILIACIONES_ID () {
					return this.TAFILIACIONES_ID;
				}

				public Boolean TAFILIACIONES_IDIsNullable(){
				    return false;
				}
				public Boolean TAFILIACIONES_IDIsKey(){
				    return false;
				}
				public Integer TAFILIACIONES_IDLength(){
				    return 22;
				}
				public Integer TAFILIACIONES_IDPrecision(){
				    return 0;
				}
				public String TAFILIACIONES_IDDefault(){
				
					return null;
				
				}
				public String TAFILIACIONES_IDComment(){
				
				    return "FK (AFI_TAFILIACIONES";
				
				}
				public String TAFILIACIONES_IDPattern(){
				
					return "";
				
				}
				public String TAFILIACIONES_IDOriginalDbColumnName(){
				
					return "TAFILIACIONES_ID";
				
				}

				
			    public String DESCRIPCION;

				public String getDESCRIPCION () {
					return this.DESCRIPCION;
				}

				public Boolean DESCRIPCIONIsNullable(){
				    return false;
				}
				public Boolean DESCRIPCIONIsKey(){
				    return false;
				}
				public Integer DESCRIPCIONLength(){
				    return 250;
				}
				public Integer DESCRIPCIONPrecision(){
				    return 0;
				}
				public String DESCRIPCIONDefault(){
				
					return "'null'";
				
				}
				public String DESCRIPCIONComment(){
				
				    return "Descripcion de la relacion del tipo y la vinculacion";
				
				}
				public String DESCRIPCIONPattern(){
				
					return "";
				
				}
				public String DESCRIPCIONOriginalDbColumnName(){
				
					return "DESCRIPCION";
				
				}

				
			    public String PERMITE_BENEFICIARIOS;

				public String getPERMITE_BENEFICIARIOS () {
					return this.PERMITE_BENEFICIARIOS;
				}

				public Boolean PERMITE_BENEFICIARIOSIsNullable(){
				    return false;
				}
				public Boolean PERMITE_BENEFICIARIOSIsKey(){
				    return false;
				}
				public Integer PERMITE_BENEFICIARIOSLength(){
				    return 2;
				}
				public Integer PERMITE_BENEFICIARIOSPrecision(){
				    return 0;
				}
				public String PERMITE_BENEFICIARIOSDefault(){
				
					return "'Si'";
				
				}
				public String PERMITE_BENEFICIARIOSComment(){
				
				    return "Permite beneficiarios";
				
				}
				public String PERMITE_BENEFICIARIOSPattern(){
				
					return "";
				
				}
				public String PERMITE_BENEFICIARIOSOriginalDbColumnName(){
				
					return "PERMITE_BENEFICIARIOS";
				
				}

				
			    public BigDecimal CODIGO;

				public BigDecimal getCODIGO () {
					return this.CODIGO;
				}

				public Boolean CODIGOIsNullable(){
				    return true;
				}
				public Boolean CODIGOIsKey(){
				    return false;
				}
				public Integer CODIGOLength(){
				    return 22;
				}
				public Integer CODIGOPrecision(){
				    return 0;
				}
				public String CODIGODefault(){
				
					return null;
				
				}
				public String CODIGOComment(){
				
				    return "Codigo utilizado para identificar el parentesco en la aplicacion";
				
				}
				public String CODIGOPattern(){
				
					return "";
				
				}
				public String CODIGOOriginalDbColumnName(){
				
					return "CODIGO";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.ID == null) ? 0 : this.ID.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row30Struct other = (row30Struct) obj;
		
						if (this.ID == null) {
							if (other.ID != null)
								return false;
						
						} else if (!this.ID.equals(other.ID))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row30Struct other) {

		other.ID = this.ID;
	            other.TAFILIADOS_ID = this.TAFILIADOS_ID;
	            other.TAFILIACIONES_ID = this.TAFILIACIONES_ID;
	            other.DESCRIPCION = this.DESCRIPCION;
	            other.PERMITE_BENEFICIARIOS = this.PERMITE_BENEFICIARIOS;
	            other.CODIGO = this.CODIGO;
	            
	}

	public void copyKeysDataTo(row30Struct other) {

		other.ID = this.ID;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_PRINCIPAL_Consolidado_Salud.length) {
				if(length < 1024 && commonByteArray_AFI_PRINCIPAL_Consolidado_Salud.length == 0) {
   					commonByteArray_AFI_PRINCIPAL_Consolidado_Salud = new byte[1024];
				} else {
   					commonByteArray_AFI_PRINCIPAL_Consolidado_Salud = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_PRINCIPAL_Consolidado_Salud, 0, length);
			strReturn = new String(commonByteArray_AFI_PRINCIPAL_Consolidado_Salud, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_PRINCIPAL_Consolidado_Salud.length) {
				if(length < 1024 && commonByteArray_AFI_PRINCIPAL_Consolidado_Salud.length == 0) {
   					commonByteArray_AFI_PRINCIPAL_Consolidado_Salud = new byte[1024];
				} else {
   					commonByteArray_AFI_PRINCIPAL_Consolidado_Salud = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_PRINCIPAL_Consolidado_Salud, 0, length);
			strReturn = new String(commonByteArray_AFI_PRINCIPAL_Consolidado_Salud, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_PRINCIPAL_Consolidado_Salud) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
						this.TAFILIADOS_ID = (BigDecimal) dis.readObject();
					
						this.TAFILIACIONES_ID = (BigDecimal) dis.readObject();
					
					this.DESCRIPCION = readString(dis);
					
					this.PERMITE_BENEFICIARIOS = readString(dis);
					
						this.CODIGO = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_PRINCIPAL_Consolidado_Salud) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
						this.TAFILIADOS_ID = (BigDecimal) dis.readObject();
					
						this.TAFILIACIONES_ID = (BigDecimal) dis.readObject();
					
					this.DESCRIPCION = readString(dis);
					
					this.PERMITE_BENEFICIARIOS = readString(dis);
					
						this.CODIGO = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TAFILIADOS_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TAFILIACIONES_ID);
					
					// String
				
						writeString(this.DESCRIPCION,dos);
					
					// String
				
						writeString(this.PERMITE_BENEFICIARIOS,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CODIGO);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TAFILIADOS_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TAFILIACIONES_ID);
					
					// String
				
						writeString(this.DESCRIPCION,dos);
					
					// String
				
						writeString(this.PERMITE_BENEFICIARIOS,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CODIGO);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",TAFILIADOS_ID="+String.valueOf(TAFILIADOS_ID));
		sb.append(",TAFILIACIONES_ID="+String.valueOf(TAFILIACIONES_ID));
		sb.append(",DESCRIPCION="+DESCRIPCION);
		sb.append(",PERMITE_BENEFICIARIOS="+PERMITE_BENEFICIARIOS);
		sb.append(",CODIGO="+String.valueOf(CODIGO));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row30Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.ID, other.ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_13Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_13_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row30Struct row30 = new row30Struct();




	
	/**
	 * [tHashOutput_6 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashOutput_6", false);
		start_Hash.put("tHashOutput_6", System.currentTimeMillis());
		
	
	currentComponent="tHashOutput_6";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row30");
					}
				
		int tos_count_tHashOutput_6 = 0;
		



org.talend.designer.components.hashfile.common.MapHashFile mf_tHashOutput_6=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();    
		org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row30Struct> tHashFile_tHashOutput_6 = null;
		String hashKey_tHashOutput_6 = "tHashFile_Consolidado_Salud_" + pid + "_tHashOutput_6";
			synchronized(org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.get(hashKey_tHashOutput_6)){
			    if(mf_tHashOutput_6.getResourceMap().get(hashKey_tHashOutput_6) == null){
	      		    mf_tHashOutput_6.getResourceMap().put(hashKey_tHashOutput_6, new org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row30Struct>(org.talend.designer.components.hashfile.common.MATCHING_MODE.KEEP_ALL));
	      		    tHashFile_tHashOutput_6 = mf_tHashOutput_6.getResourceMap().get(hashKey_tHashOutput_6);
			    }else{
			    	tHashFile_tHashOutput_6 = mf_tHashOutput_6.getResourceMap().get(hashKey_tHashOutput_6);
			    }
			}
        int nb_line_tHashOutput_6 = 0;

 



/**
 * [tHashOutput_6 begin ] stop
 */



	
	/**
	 * [tOracleInput_13 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_13", false);
		start_Hash.put("tOracleInput_13", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_13";
	
	
		int tos_count_tOracleInput_13 = 0;
		
	


	
		    int nb_line_tOracleInput_13 = 0;
		    java.sql.Connection conn_tOracleInput_13 = null;
				conn_tOracleInput_13 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");
				
                boolean isTimeZoneNull_tOracleInput_13 = false;
				boolean isConnectionWrapped_tOracleInput_13 = !(conn_tOracleInput_13 instanceof oracle.jdbc.OracleConnection) && conn_tOracleInput_13.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tOracleInput_13 = null;
                if (isConnectionWrapped_tOracleInput_13) {
					unwrappedOraConn_tOracleInput_13 = conn_tOracleInput_13.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tOracleInput_13 != null) {
                        isTimeZoneNull_tOracleInput_13 = (unwrappedOraConn_tOracleInput_13.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tOracleInput_13 = (((oracle.jdbc.OracleConnection)conn_tOracleInput_13).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tOracleInput_13) {
					java.sql.Statement stmtGetTZ_tOracleInput_13 = conn_tOracleInput_13.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_13 = stmtGetTZ_tOracleInput_13.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_13 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tOracleInput_13.next()) {
						sessionTimezone_tOracleInput_13 = rsGetTZ_tOracleInput_13.getString(1);
					}
					if (isConnectionWrapped_tOracleInput_13 && unwrappedOraConn_tOracleInput_13 != null) {
                        unwrappedOraConn_tOracleInput_13.setSessionTimeZone(sessionTimezone_tOracleInput_13);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_13).setSessionTimeZone(sessionTimezone_tOracleInput_13);
                    }
				}
			
		    
			java.sql.Statement stmt_tOracleInput_13 = conn_tOracleInput_13.createStatement();

		    String dbquery_tOracleInput_13 = "SELECT \n	APF.ID,\n	APF.TAFILIADOS_ID,\n	APF.TAFILIACIONES_ID,\n	APF.DESCRIPCION,\n	APF.PERMITE_BENEFICIARIOS,\n	APF.CO"
+"DIGO\nFROM\n	SALUDSIS.AFI_PLANAFILIACIONES APF\nWHERE\n	APF.ESTREGISTRO_ID=1";
		    

		    globalMap.put("tOracleInput_13_QUERY",dbquery_tOracleInput_13);

		    java.sql.ResultSet rs_tOracleInput_13 = null;

		    try {
		    	rs_tOracleInput_13 = stmt_tOracleInput_13.executeQuery(dbquery_tOracleInput_13);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_13 = rs_tOracleInput_13.getMetaData();
		    	int colQtyInRs_tOracleInput_13 = rsmd_tOracleInput_13.getColumnCount();

		    String tmpContent_tOracleInput_13 = null;
		    
		    
		    while (rs_tOracleInput_13.next()) {
		        nb_line_tOracleInput_13++;
		        
							if(colQtyInRs_tOracleInput_13 < 1) {
								row30.ID = null;
							} else {
		                          
					if(rs_tOracleInput_13.getObject(1) != null) {
						row30.ID = rs_tOracleInput_13.getBigDecimal(1);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_13 < 2) {
								row30.TAFILIADOS_ID = null;
							} else {
		                          
					if(rs_tOracleInput_13.getObject(2) != null) {
						row30.TAFILIADOS_ID = rs_tOracleInput_13.getBigDecimal(2);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_13 < 3) {
								row30.TAFILIACIONES_ID = null;
							} else {
		                          
					if(rs_tOracleInput_13.getObject(3) != null) {
						row30.TAFILIACIONES_ID = rs_tOracleInput_13.getBigDecimal(3);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_13 < 4) {
								row30.DESCRIPCION = null;
							} else {
	                         		
        	row30.DESCRIPCION = routines.system.JDBCUtil.getString(rs_tOracleInput_13, 4, false);
		                    }
							if(colQtyInRs_tOracleInput_13 < 5) {
								row30.PERMITE_BENEFICIARIOS = null;
							} else {
	                         		
        	row30.PERMITE_BENEFICIARIOS = routines.system.JDBCUtil.getString(rs_tOracleInput_13, 5, false);
		                    }
							if(colQtyInRs_tOracleInput_13 < 6) {
								row30.CODIGO = null;
							} else {
		                          
					if(rs_tOracleInput_13.getObject(6) != null) {
						row30.CODIGO = rs_tOracleInput_13.getBigDecimal(6);
					} else {
				
						row30.CODIGO = null;
					}
		                    }
					




 



/**
 * [tOracleInput_13 begin ] stop
 */
	
	/**
	 * [tOracleInput_13 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_13";
	
	

 


	tos_count_tOracleInput_13++;

/**
 * [tOracleInput_13 main ] stop
 */
	
	/**
	 * [tOracleInput_13 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_13";
	
	

 



/**
 * [tOracleInput_13 process_data_begin ] stop
 */

	
	/**
	 * [tHashOutput_6 main ] start
	 */

	

	
	
	currentComponent="tHashOutput_6";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row30"
						
						);
					}
					



    
		row30Struct oneRow_tHashOutput_6 = new row30Struct();
				
					oneRow_tHashOutput_6.ID = row30.ID;
					oneRow_tHashOutput_6.TAFILIADOS_ID = row30.TAFILIADOS_ID;
					oneRow_tHashOutput_6.TAFILIACIONES_ID = row30.TAFILIACIONES_ID;
					oneRow_tHashOutput_6.DESCRIPCION = row30.DESCRIPCION;
					oneRow_tHashOutput_6.PERMITE_BENEFICIARIOS = row30.PERMITE_BENEFICIARIOS;
					oneRow_tHashOutput_6.CODIGO = row30.CODIGO;
		
        tHashFile_tHashOutput_6.put(oneRow_tHashOutput_6);
        nb_line_tHashOutput_6 ++;

 


	tos_count_tHashOutput_6++;

/**
 * [tHashOutput_6 main ] stop
 */
	
	/**
	 * [tHashOutput_6 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashOutput_6";
	
	

 



/**
 * [tHashOutput_6 process_data_begin ] stop
 */
	
	/**
	 * [tHashOutput_6 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashOutput_6";
	
	

 



/**
 * [tHashOutput_6 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_13 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_13";
	
	

 



/**
 * [tOracleInput_13 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_13 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_13";
	
	

}
}finally{
	if (rs_tOracleInput_13 != null) {
		rs_tOracleInput_13.close();
	}
	if (stmt_tOracleInput_13 != null) {
		stmt_tOracleInput_13.close();
	}
}

globalMap.put("tOracleInput_13_NB_LINE",nb_line_tOracleInput_13);
 

ok_Hash.put("tOracleInput_13", true);
end_Hash.put("tOracleInput_13", System.currentTimeMillis());




/**
 * [tOracleInput_13 end ] stop
 */

	
	/**
	 * [tHashOutput_6 end ] start
	 */

	

	
	
	currentComponent="tHashOutput_6";
	
	
globalMap.put("tHashOutput_6_NB_LINE", nb_line_tHashOutput_6);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row30");
			  	}
			  	
 

ok_Hash.put("tHashOutput_6", true);
end_Hash.put("tHashOutput_6", System.currentTimeMillis());




/**
 * [tHashOutput_6 end ] stop
 */



				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tOracleInput_13:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk6", 0, "ok");
								} 
							
							tOracleInput_18Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleInput_13 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_13";
	
	

 



/**
 * [tOracleInput_13 finally ] stop
 */

	
	/**
	 * [tHashOutput_6 finally ] start
	 */

	

	
	
	currentComponent="tHashOutput_6";
	
	

 



/**
 * [tHashOutput_6 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_13_SUBPROCESS_STATE", 1);
	}
	


public static class row35Struct implements routines.system.IPersistableRow<row35Struct> {
    final static byte[] commonByteArrayLock_AFI_PRINCIPAL_Consolidado_Salud = new byte[0];
    static byte[] commonByteArray_AFI_PRINCIPAL_Consolidado_Salud = new byte[0];

	
			    public Integer ID;

				public Integer getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return true;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return 0;
				}
				public Integer IDPrecision(){
				    return 0;
				}
				public String IDDefault(){
				
					return null;
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public String NOMBRE;

				public String getNOMBRE () {
					return this.NOMBRE;
				}

				public Boolean NOMBREIsNullable(){
				    return true;
				}
				public Boolean NOMBREIsKey(){
				    return false;
				}
				public Integer NOMBRELength(){
				    return 0;
				}
				public Integer NOMBREPrecision(){
				    return 0;
				}
				public String NOMBREDefault(){
				
					return null;
				
				}
				public String NOMBREComment(){
				
				    return "";
				
				}
				public String NOMBREPattern(){
				
					return "";
				
				}
				public String NOMBREOriginalDbColumnName(){
				
					return "NOMBRE";
				
				}

				
			    public String SIGLA;

				public String getSIGLA () {
					return this.SIGLA;
				}

				public Boolean SIGLAIsNullable(){
				    return true;
				}
				public Boolean SIGLAIsKey(){
				    return false;
				}
				public Integer SIGLALength(){
				    return 0;
				}
				public Integer SIGLAPrecision(){
				    return 0;
				}
				public String SIGLADefault(){
				
					return null;
				
				}
				public String SIGLAComment(){
				
				    return "";
				
				}
				public String SIGLAPattern(){
				
					return "";
				
				}
				public String SIGLAOriginalDbColumnName(){
				
					return "SIGLA";
				
				}

				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_PRINCIPAL_Consolidado_Salud.length) {
				if(length < 1024 && commonByteArray_AFI_PRINCIPAL_Consolidado_Salud.length == 0) {
   					commonByteArray_AFI_PRINCIPAL_Consolidado_Salud = new byte[1024];
				} else {
   					commonByteArray_AFI_PRINCIPAL_Consolidado_Salud = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_PRINCIPAL_Consolidado_Salud, 0, length);
			strReturn = new String(commonByteArray_AFI_PRINCIPAL_Consolidado_Salud, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_PRINCIPAL_Consolidado_Salud.length) {
				if(length < 1024 && commonByteArray_AFI_PRINCIPAL_Consolidado_Salud.length == 0) {
   					commonByteArray_AFI_PRINCIPAL_Consolidado_Salud = new byte[1024];
				} else {
   					commonByteArray_AFI_PRINCIPAL_Consolidado_Salud = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_PRINCIPAL_Consolidado_Salud, 0, length);
			strReturn = new String(commonByteArray_AFI_PRINCIPAL_Consolidado_Salud, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_PRINCIPAL_Consolidado_Salud) {

        	try {

        		int length = 0;
		
						this.ID = readInteger(dis);
					
					this.NOMBRE = readString(dis);
					
					this.SIGLA = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_PRINCIPAL_Consolidado_Salud) {

        	try {

        		int length = 0;
		
						this.ID = readInteger(dis);
					
					this.NOMBRE = readString(dis);
					
					this.SIGLA = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.ID,dos);
					
					// String
				
						writeString(this.NOMBRE,dos);
					
					// String
				
						writeString(this.SIGLA,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.ID,dos);
					
					// String
				
						writeString(this.NOMBRE,dos);
					
					// String
				
						writeString(this.SIGLA,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",NOMBRE="+NOMBRE);
		sb.append(",SIGLA="+SIGLA);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row35Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_18Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_18_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row35Struct row35 = new row35Struct();




	
	/**
	 * [tHashOutput_11 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashOutput_11", false);
		start_Hash.put("tHashOutput_11", System.currentTimeMillis());
		
	
	currentComponent="tHashOutput_11";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row35");
					}
				
		int tos_count_tHashOutput_11 = 0;
		



org.talend.designer.components.hashfile.common.MapHashFile mf_tHashOutput_11=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();    
		org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row35Struct> tHashFile_tHashOutput_11 = null;
		String hashKey_tHashOutput_11 = "tHashFile_Consolidado_Salud_" + pid + "_tHashOutput_11";
			synchronized(org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.get(hashKey_tHashOutput_11)){
			    if(mf_tHashOutput_11.getResourceMap().get(hashKey_tHashOutput_11) == null){
	      		    mf_tHashOutput_11.getResourceMap().put(hashKey_tHashOutput_11, new org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row35Struct>(org.talend.designer.components.hashfile.common.MATCHING_MODE.KEEP_ALL));
	      		    tHashFile_tHashOutput_11 = mf_tHashOutput_11.getResourceMap().get(hashKey_tHashOutput_11);
			    }else{
			    	tHashFile_tHashOutput_11 = mf_tHashOutput_11.getResourceMap().get(hashKey_tHashOutput_11);
			    }
			}
        int nb_line_tHashOutput_11 = 0;

 



/**
 * [tHashOutput_11 begin ] stop
 */



	
	/**
	 * [tOracleInput_18 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_18", false);
		start_Hash.put("tOracleInput_18", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_18";
	
	
		int tos_count_tOracleInput_18 = 0;
		
	


	
		    int nb_line_tOracleInput_18 = 0;
		    java.sql.Connection conn_tOracleInput_18 = null;
				conn_tOracleInput_18 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");
				
                boolean isTimeZoneNull_tOracleInput_18 = false;
				boolean isConnectionWrapped_tOracleInput_18 = !(conn_tOracleInput_18 instanceof oracle.jdbc.OracleConnection) && conn_tOracleInput_18.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tOracleInput_18 = null;
                if (isConnectionWrapped_tOracleInput_18) {
					unwrappedOraConn_tOracleInput_18 = conn_tOracleInput_18.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tOracleInput_18 != null) {
                        isTimeZoneNull_tOracleInput_18 = (unwrappedOraConn_tOracleInput_18.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tOracleInput_18 = (((oracle.jdbc.OracleConnection)conn_tOracleInput_18).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tOracleInput_18) {
					java.sql.Statement stmtGetTZ_tOracleInput_18 = conn_tOracleInput_18.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_18 = stmtGetTZ_tOracleInput_18.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_18 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tOracleInput_18.next()) {
						sessionTimezone_tOracleInput_18 = rsGetTZ_tOracleInput_18.getString(1);
					}
					if (isConnectionWrapped_tOracleInput_18 && unwrappedOraConn_tOracleInput_18 != null) {
                        unwrappedOraConn_tOracleInput_18.setSessionTimeZone(sessionTimezone_tOracleInput_18);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_18).setSessionTimeZone(sessionTimezone_tOracleInput_18);
                    }
				}
			
		    
			java.sql.Statement stmt_tOracleInput_18 = conn_tOracleInput_18.createStatement();

		    String dbquery_tOracleInput_18 = "SELECT \n	GTD.\"ID\",\n	GTD.NOMBRE,\n	GTD.SIGLA\nFROM\n	SALUDSIS.GEN_TDOCUMENTOS GTD\nWHERE\n	GTD.ESTREGISTRO_ID = 1";
		    

		    globalMap.put("tOracleInput_18_QUERY",dbquery_tOracleInput_18);

		    java.sql.ResultSet rs_tOracleInput_18 = null;

		    try {
		    	rs_tOracleInput_18 = stmt_tOracleInput_18.executeQuery(dbquery_tOracleInput_18);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_18 = rs_tOracleInput_18.getMetaData();
		    	int colQtyInRs_tOracleInput_18 = rsmd_tOracleInput_18.getColumnCount();

		    String tmpContent_tOracleInput_18 = null;
		    
		    
		    while (rs_tOracleInput_18.next()) {
		        nb_line_tOracleInput_18++;
		        
							if(colQtyInRs_tOracleInput_18 < 1) {
								row35.ID = null;
							} else {
		                          
					if(rs_tOracleInput_18.getObject(1) != null) {
						row35.ID = rs_tOracleInput_18.getInt(1);
					} else {
				
						row35.ID = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_18 < 2) {
								row35.NOMBRE = null;
							} else {
	                         		
        	row35.NOMBRE = routines.system.JDBCUtil.getString(rs_tOracleInput_18, 2, false);
		                    }
							if(colQtyInRs_tOracleInput_18 < 3) {
								row35.SIGLA = null;
							} else {
	                         		
        	row35.SIGLA = routines.system.JDBCUtil.getString(rs_tOracleInput_18, 3, false);
		                    }
					




 



/**
 * [tOracleInput_18 begin ] stop
 */
	
	/**
	 * [tOracleInput_18 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_18";
	
	

 


	tos_count_tOracleInput_18++;

/**
 * [tOracleInput_18 main ] stop
 */
	
	/**
	 * [tOracleInput_18 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_18";
	
	

 



/**
 * [tOracleInput_18 process_data_begin ] stop
 */

	
	/**
	 * [tHashOutput_11 main ] start
	 */

	

	
	
	currentComponent="tHashOutput_11";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row35"
						
						);
					}
					



    
		row35Struct oneRow_tHashOutput_11 = new row35Struct();
				
					oneRow_tHashOutput_11.ID = row35.ID;
					oneRow_tHashOutput_11.NOMBRE = row35.NOMBRE;
					oneRow_tHashOutput_11.SIGLA = row35.SIGLA;
		
        tHashFile_tHashOutput_11.put(oneRow_tHashOutput_11);
        nb_line_tHashOutput_11 ++;

 


	tos_count_tHashOutput_11++;

/**
 * [tHashOutput_11 main ] stop
 */
	
	/**
	 * [tHashOutput_11 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashOutput_11";
	
	

 



/**
 * [tHashOutput_11 process_data_begin ] stop
 */
	
	/**
	 * [tHashOutput_11 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashOutput_11";
	
	

 



/**
 * [tHashOutput_11 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_18 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_18";
	
	

 



/**
 * [tOracleInput_18 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_18 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_18";
	
	

}
}finally{
	if (rs_tOracleInput_18 != null) {
		rs_tOracleInput_18.close();
	}
	if (stmt_tOracleInput_18 != null) {
		stmt_tOracleInput_18.close();
	}
}

globalMap.put("tOracleInput_18_NB_LINE",nb_line_tOracleInput_18);
 

ok_Hash.put("tOracleInput_18", true);
end_Hash.put("tOracleInput_18", System.currentTimeMillis());




/**
 * [tOracleInput_18 end ] stop
 */

	
	/**
	 * [tHashOutput_11 end ] start
	 */

	

	
	
	currentComponent="tHashOutput_11";
	
	
globalMap.put("tHashOutput_11_NB_LINE", nb_line_tHashOutput_11);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row35");
			  	}
			  	
 

ok_Hash.put("tHashOutput_11", true);
end_Hash.put("tHashOutput_11", System.currentTimeMillis());




/**
 * [tHashOutput_11 end ] stop
 */



				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tOracleInput_18:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk7", 0, "ok");
								} 
							
							tOracleInput_3Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleInput_18 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_18";
	
	

 



/**
 * [tOracleInput_18 finally ] stop
 */

	
	/**
	 * [tHashOutput_11 finally ] start
	 */

	

	
	
	currentComponent="tHashOutput_11";
	
	

 



/**
 * [tHashOutput_11 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_18_SUBPROCESS_STATE", 1);
	}
	


public static class row4Struct implements routines.system.IPersistableRow<row4Struct> {
    final static byte[] commonByteArrayLock_AFI_PRINCIPAL_Consolidado_Salud = new byte[0];
    static byte[] commonByteArray_AFI_PRINCIPAL_Consolidado_Salud = new byte[0];

	
			    public String FECHA_INICIO;

				public String getFECHA_INICIO () {
					return this.FECHA_INICIO;
				}

				public Boolean FECHA_INICIOIsNullable(){
				    return true;
				}
				public Boolean FECHA_INICIOIsKey(){
				    return false;
				}
				public Integer FECHA_INICIOLength(){
				    return 0;
				}
				public Integer FECHA_INICIOPrecision(){
				    return 0;
				}
				public String FECHA_INICIODefault(){
				
					return null;
				
				}
				public String FECHA_INICIOComment(){
				
				    return "";
				
				}
				public String FECHA_INICIOPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String FECHA_INICIOOriginalDbColumnName(){
				
					return "FECHA_INICIO";
				
				}

				
			    public String FECHA_FIN;

				public String getFECHA_FIN () {
					return this.FECHA_FIN;
				}

				public Boolean FECHA_FINIsNullable(){
				    return true;
				}
				public Boolean FECHA_FINIsKey(){
				    return false;
				}
				public Integer FECHA_FINLength(){
				    return 0;
				}
				public Integer FECHA_FINPrecision(){
				    return 0;
				}
				public String FECHA_FINDefault(){
				
					return null;
				
				}
				public String FECHA_FINComment(){
				
				    return "";
				
				}
				public String FECHA_FINPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String FECHA_FINOriginalDbColumnName(){
				
					return "FECHA_FIN";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_PRINCIPAL_Consolidado_Salud.length) {
				if(length < 1024 && commonByteArray_AFI_PRINCIPAL_Consolidado_Salud.length == 0) {
   					commonByteArray_AFI_PRINCIPAL_Consolidado_Salud = new byte[1024];
				} else {
   					commonByteArray_AFI_PRINCIPAL_Consolidado_Salud = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_PRINCIPAL_Consolidado_Salud, 0, length);
			strReturn = new String(commonByteArray_AFI_PRINCIPAL_Consolidado_Salud, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_PRINCIPAL_Consolidado_Salud.length) {
				if(length < 1024 && commonByteArray_AFI_PRINCIPAL_Consolidado_Salud.length == 0) {
   					commonByteArray_AFI_PRINCIPAL_Consolidado_Salud = new byte[1024];
				} else {
   					commonByteArray_AFI_PRINCIPAL_Consolidado_Salud = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_PRINCIPAL_Consolidado_Salud, 0, length);
			strReturn = new String(commonByteArray_AFI_PRINCIPAL_Consolidado_Salud, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_PRINCIPAL_Consolidado_Salud) {

        	try {

        		int length = 0;
		
					this.FECHA_INICIO = readString(dis);
					
					this.FECHA_FIN = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_PRINCIPAL_Consolidado_Salud) {

        	try {

        		int length = 0;
		
					this.FECHA_INICIO = readString(dis);
					
					this.FECHA_FIN = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.FECHA_INICIO,dos);
					
					// String
				
						writeString(this.FECHA_FIN,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.FECHA_INICIO,dos);
					
					// String
				
						writeString(this.FECHA_FIN,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("FECHA_INICIO="+FECHA_INICIO);
		sb.append(",FECHA_FIN="+FECHA_FIN);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row4Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_3_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row4Struct row4 = new row4Struct();




	
	/**
	 * [tJavaRow_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaRow_4", false);
		start_Hash.put("tJavaRow_4", System.currentTimeMillis());
		
	
	currentComponent="tJavaRow_4";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row4");
					}
				
		int tos_count_tJavaRow_4 = 0;
		

int nb_line_tJavaRow_4 = 0;

 



/**
 * [tJavaRow_4 begin ] stop
 */



	
	/**
	 * [tOracleInput_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_3", false);
		start_Hash.put("tOracleInput_3", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_3";
	
	
		int tos_count_tOracleInput_3 = 0;
		
	


	
		    int nb_line_tOracleInput_3 = 0;
		    java.sql.Connection conn_tOracleInput_3 = null;
				conn_tOracleInput_3 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");
				
                boolean isTimeZoneNull_tOracleInput_3 = false;
				boolean isConnectionWrapped_tOracleInput_3 = !(conn_tOracleInput_3 instanceof oracle.jdbc.OracleConnection) && conn_tOracleInput_3.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tOracleInput_3 = null;
                if (isConnectionWrapped_tOracleInput_3) {
					unwrappedOraConn_tOracleInput_3 = conn_tOracleInput_3.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tOracleInput_3 != null) {
                        isTimeZoneNull_tOracleInput_3 = (unwrappedOraConn_tOracleInput_3.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tOracleInput_3 = (((oracle.jdbc.OracleConnection)conn_tOracleInput_3).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tOracleInput_3) {
					java.sql.Statement stmtGetTZ_tOracleInput_3 = conn_tOracleInput_3.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_3 = stmtGetTZ_tOracleInput_3.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_3 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tOracleInput_3.next()) {
						sessionTimezone_tOracleInput_3 = rsGetTZ_tOracleInput_3.getString(1);
					}
					if (isConnectionWrapped_tOracleInput_3 && unwrappedOraConn_tOracleInput_3 != null) {
                        unwrappedOraConn_tOracleInput_3.setSessionTimeZone(sessionTimezone_tOracleInput_3);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_3).setSessionTimeZone(sessionTimezone_tOracleInput_3);
                    }
				}
			
		    
			java.sql.Statement stmt_tOracleInput_3 = conn_tOracleInput_3.createStatement();

		    String dbquery_tOracleInput_3 = "SELECT \n  TO_CHAR(T.FECHA_INICIO) AS FECHA_INICIO,\n  TO_CHAR(T.FECHA_FIN) AS FECHA_FIN\nFROM\n  AFI_ARCHIVOS T\nWHERE"
+"\n  ID="+context.infoIdArchivo;
		    

		    globalMap.put("tOracleInput_3_QUERY",dbquery_tOracleInput_3);

		    java.sql.ResultSet rs_tOracleInput_3 = null;

		    try {
		    	rs_tOracleInput_3 = stmt_tOracleInput_3.executeQuery(dbquery_tOracleInput_3);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_3 = rs_tOracleInput_3.getMetaData();
		    	int colQtyInRs_tOracleInput_3 = rsmd_tOracleInput_3.getColumnCount();

		    String tmpContent_tOracleInput_3 = null;
		    
		    
		    while (rs_tOracleInput_3.next()) {
		        nb_line_tOracleInput_3++;
		        
							if(colQtyInRs_tOracleInput_3 < 1) {
								row4.FECHA_INICIO = null;
							} else {
	                         		
        	row4.FECHA_INICIO = routines.system.JDBCUtil.getString(rs_tOracleInput_3, 1, false);
		                    }
							if(colQtyInRs_tOracleInput_3 < 2) {
								row4.FECHA_FIN = null;
							} else {
	                         		
        	row4.FECHA_FIN = routines.system.JDBCUtil.getString(rs_tOracleInput_3, 2, false);
		                    }
					




 



/**
 * [tOracleInput_3 begin ] stop
 */
	
	/**
	 * [tOracleInput_3 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_3";
	
	

 


	tos_count_tOracleInput_3++;

/**
 * [tOracleInput_3 main ] stop
 */
	
	/**
	 * [tOracleInput_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_3";
	
	

 



/**
 * [tOracleInput_3 process_data_begin ] stop
 */

	
	/**
	 * [tJavaRow_4 main ] start
	 */

	

	
	
	currentComponent="tJavaRow_4";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row4"
						
						);
					}
					

    //Code generate according to input schema and output schema
context.AuxFechaInicio = row4.FECHA_INICIO;
context.AuxFechaFin = row4.FECHA_FIN;
    nb_line_tJavaRow_4++;   

 


	tos_count_tJavaRow_4++;

/**
 * [tJavaRow_4 main ] stop
 */
	
	/**
	 * [tJavaRow_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJavaRow_4";
	
	

 



/**
 * [tJavaRow_4 process_data_begin ] stop
 */
	
	/**
	 * [tJavaRow_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tJavaRow_4";
	
	

 



/**
 * [tJavaRow_4 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_3";
	
	

 



/**
 * [tOracleInput_3 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_3 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_3";
	
	

}
}finally{
	if (rs_tOracleInput_3 != null) {
		rs_tOracleInput_3.close();
	}
	if (stmt_tOracleInput_3 != null) {
		stmt_tOracleInput_3.close();
	}
}

globalMap.put("tOracleInput_3_NB_LINE",nb_line_tOracleInput_3);
 

ok_Hash.put("tOracleInput_3", true);
end_Hash.put("tOracleInput_3", System.currentTimeMillis());




/**
 * [tOracleInput_3 end ] stop
 */

	
	/**
	 * [tJavaRow_4 end ] start
	 */

	

	
	
	currentComponent="tJavaRow_4";
	
	

globalMap.put("tJavaRow_4_NB_LINE",nb_line_tJavaRow_4);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row4");
			  	}
			  	
 

ok_Hash.put("tJavaRow_4", true);
end_Hash.put("tJavaRow_4", System.currentTimeMillis());

   			if ((!context.AuxFechaInicio.equals("")) && (!context.AuxFechaFin.equals(""))) {
   				
					if(execStat){
   	 					runStat.updateStatOnConnection("If15", 0, "true");
					}
				tOracleInput_5Process(globalMap);
			}

			   
   				else{
					if(execStat){   
   	 					runStat.updateStatOnConnection("If15", 0, "false");
					}   	 
   				}



/**
 * [tJavaRow_4 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleInput_3 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_3";
	
	

 



/**
 * [tOracleInput_3 finally ] stop
 */

	
	/**
	 * [tJavaRow_4 finally ] start
	 */

	

	
	
	currentComponent="tJavaRow_4";
	
	

 



/**
 * [tJavaRow_4 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_3_SUBPROCESS_STATE", 1);
	}
	


public static class row6Struct implements routines.system.IPersistableRow<row6Struct> {
    final static byte[] commonByteArrayLock_AFI_PRINCIPAL_Consolidado_Salud = new byte[0];
    static byte[] commonByteArray_AFI_PRINCIPAL_Consolidado_Salud = new byte[0];

	
			    public Integer TIPO_PREGUNTA_ID;

				public Integer getTIPO_PREGUNTA_ID () {
					return this.TIPO_PREGUNTA_ID;
				}

				public Boolean TIPO_PREGUNTA_IDIsNullable(){
				    return true;
				}
				public Boolean TIPO_PREGUNTA_IDIsKey(){
				    return false;
				}
				public Integer TIPO_PREGUNTA_IDLength(){
				    return 0;
				}
				public Integer TIPO_PREGUNTA_IDPrecision(){
				    return 0;
				}
				public String TIPO_PREGUNTA_IDDefault(){
				
					return null;
				
				}
				public String TIPO_PREGUNTA_IDComment(){
				
				    return "";
				
				}
				public String TIPO_PREGUNTA_IDPattern(){
				
					return "";
				
				}
				public String TIPO_PREGUNTA_IDOriginalDbColumnName(){
				
					return "TIPO_PREGUNTA_ID";
				
				}

				
			    public Integer RESPUESTA_ID;

				public Integer getRESPUESTA_ID () {
					return this.RESPUESTA_ID;
				}

				public Boolean RESPUESTA_IDIsNullable(){
				    return true;
				}
				public Boolean RESPUESTA_IDIsKey(){
				    return false;
				}
				public Integer RESPUESTA_IDLength(){
				    return 0;
				}
				public Integer RESPUESTA_IDPrecision(){
				    return 0;
				}
				public String RESPUESTA_IDDefault(){
				
					return null;
				
				}
				public String RESPUESTA_IDComment(){
				
				    return "";
				
				}
				public String RESPUESTA_IDPattern(){
				
					return "";
				
				}
				public String RESPUESTA_IDOriginalDbColumnName(){
				
					return "RESPUESTA_ID";
				
				}

				
			    public Integer AFILIADOS_ID;

				public Integer getAFILIADOS_ID () {
					return this.AFILIADOS_ID;
				}

				public Boolean AFILIADOS_IDIsNullable(){
				    return true;
				}
				public Boolean AFILIADOS_IDIsKey(){
				    return false;
				}
				public Integer AFILIADOS_IDLength(){
				    return 0;
				}
				public Integer AFILIADOS_IDPrecision(){
				    return 0;
				}
				public String AFILIADOS_IDDefault(){
				
					return null;
				
				}
				public String AFILIADOS_IDComment(){
				
				    return "";
				
				}
				public String AFILIADOS_IDPattern(){
				
					return "";
				
				}
				public String AFILIADOS_IDOriginalDbColumnName(){
				
					return "AFILIADOS_ID";
				
				}

				
			    public Integer PREGUNTAS_ID;

				public Integer getPREGUNTAS_ID () {
					return this.PREGUNTAS_ID;
				}

				public Boolean PREGUNTAS_IDIsNullable(){
				    return true;
				}
				public Boolean PREGUNTAS_IDIsKey(){
				    return false;
				}
				public Integer PREGUNTAS_IDLength(){
				    return 0;
				}
				public Integer PREGUNTAS_IDPrecision(){
				    return 0;
				}
				public String PREGUNTAS_IDDefault(){
				
					return null;
				
				}
				public String PREGUNTAS_IDComment(){
				
				    return "";
				
				}
				public String PREGUNTAS_IDPattern(){
				
					return "";
				
				}
				public String PREGUNTAS_IDOriginalDbColumnName(){
				
					return "PREGUNTAS_ID";
				
				}

				
			    public String OPCION1;

				public String getOPCION1 () {
					return this.OPCION1;
				}

				public Boolean OPCION1IsNullable(){
				    return true;
				}
				public Boolean OPCION1IsKey(){
				    return false;
				}
				public Integer OPCION1Length(){
				    return 0;
				}
				public Integer OPCION1Precision(){
				    return 0;
				}
				public String OPCION1Default(){
				
					return null;
				
				}
				public String OPCION1Comment(){
				
				    return "";
				
				}
				public String OPCION1Pattern(){
				
					return "";
				
				}
				public String OPCION1OriginalDbColumnName(){
				
					return "OPCION1";
				
				}

				
			    public String OPCION2;

				public String getOPCION2 () {
					return this.OPCION2;
				}

				public Boolean OPCION2IsNullable(){
				    return true;
				}
				public Boolean OPCION2IsKey(){
				    return false;
				}
				public Integer OPCION2Length(){
				    return 0;
				}
				public Integer OPCION2Precision(){
				    return 0;
				}
				public String OPCION2Default(){
				
					return null;
				
				}
				public String OPCION2Comment(){
				
				    return "";
				
				}
				public String OPCION2Pattern(){
				
					return "";
				
				}
				public String OPCION2OriginalDbColumnName(){
				
					return "OPCION2";
				
				}

				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_PRINCIPAL_Consolidado_Salud.length) {
				if(length < 1024 && commonByteArray_AFI_PRINCIPAL_Consolidado_Salud.length == 0) {
   					commonByteArray_AFI_PRINCIPAL_Consolidado_Salud = new byte[1024];
				} else {
   					commonByteArray_AFI_PRINCIPAL_Consolidado_Salud = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_PRINCIPAL_Consolidado_Salud, 0, length);
			strReturn = new String(commonByteArray_AFI_PRINCIPAL_Consolidado_Salud, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_PRINCIPAL_Consolidado_Salud.length) {
				if(length < 1024 && commonByteArray_AFI_PRINCIPAL_Consolidado_Salud.length == 0) {
   					commonByteArray_AFI_PRINCIPAL_Consolidado_Salud = new byte[1024];
				} else {
   					commonByteArray_AFI_PRINCIPAL_Consolidado_Salud = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_PRINCIPAL_Consolidado_Salud, 0, length);
			strReturn = new String(commonByteArray_AFI_PRINCIPAL_Consolidado_Salud, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_PRINCIPAL_Consolidado_Salud) {

        	try {

        		int length = 0;
		
						this.TIPO_PREGUNTA_ID = readInteger(dis);
					
						this.RESPUESTA_ID = readInteger(dis);
					
						this.AFILIADOS_ID = readInteger(dis);
					
						this.PREGUNTAS_ID = readInteger(dis);
					
					this.OPCION1 = readString(dis);
					
					this.OPCION2 = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_PRINCIPAL_Consolidado_Salud) {

        	try {

        		int length = 0;
		
						this.TIPO_PREGUNTA_ID = readInteger(dis);
					
						this.RESPUESTA_ID = readInteger(dis);
					
						this.AFILIADOS_ID = readInteger(dis);
					
						this.PREGUNTAS_ID = readInteger(dis);
					
					this.OPCION1 = readString(dis);
					
					this.OPCION2 = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.TIPO_PREGUNTA_ID,dos);
					
					// Integer
				
						writeInteger(this.RESPUESTA_ID,dos);
					
					// Integer
				
						writeInteger(this.AFILIADOS_ID,dos);
					
					// Integer
				
						writeInteger(this.PREGUNTAS_ID,dos);
					
					// String
				
						writeString(this.OPCION1,dos);
					
					// String
				
						writeString(this.OPCION2,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.TIPO_PREGUNTA_ID,dos);
					
					// Integer
				
						writeInteger(this.RESPUESTA_ID,dos);
					
					// Integer
				
						writeInteger(this.AFILIADOS_ID,dos);
					
					// Integer
				
						writeInteger(this.PREGUNTAS_ID,dos);
					
					// String
				
						writeString(this.OPCION1,dos);
					
					// String
				
						writeString(this.OPCION2,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("TIPO_PREGUNTA_ID="+String.valueOf(TIPO_PREGUNTA_ID));
		sb.append(",RESPUESTA_ID="+String.valueOf(RESPUESTA_ID));
		sb.append(",AFILIADOS_ID="+String.valueOf(AFILIADOS_ID));
		sb.append(",PREGUNTAS_ID="+String.valueOf(PREGUNTAS_ID));
		sb.append(",OPCION1="+OPCION1);
		sb.append(",OPCION2="+OPCION2);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row6Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_5Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_5_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row6Struct row6 = new row6Struct();




	
	/**
	 * [tFlowToIterate_1 begin ] start
	 */

				
			int NB_ITERATE_tJava_3 = 0; //for statistics
			

	
		
		ok_Hash.put("tFlowToIterate_1", false);
		start_Hash.put("tFlowToIterate_1", System.currentTimeMillis());
		
	
	currentComponent="tFlowToIterate_1";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row6");
					}
				
		int tos_count_tFlowToIterate_1 = 0;
		

int nb_line_tFlowToIterate_1 = 0;
int counter_tFlowToIterate_1 = 0;

 



/**
 * [tFlowToIterate_1 begin ] stop
 */



	
	/**
	 * [tOracleInput_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_5", false);
		start_Hash.put("tOracleInput_5", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_5";
	
	
		int tos_count_tOracleInput_5 = 0;
		
	


	
		    int nb_line_tOracleInput_5 = 0;
		    java.sql.Connection conn_tOracleInput_5 = null;
				conn_tOracleInput_5 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");
				
                boolean isTimeZoneNull_tOracleInput_5 = false;
				boolean isConnectionWrapped_tOracleInput_5 = !(conn_tOracleInput_5 instanceof oracle.jdbc.OracleConnection) && conn_tOracleInput_5.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tOracleInput_5 = null;
                if (isConnectionWrapped_tOracleInput_5) {
					unwrappedOraConn_tOracleInput_5 = conn_tOracleInput_5.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tOracleInput_5 != null) {
                        isTimeZoneNull_tOracleInput_5 = (unwrappedOraConn_tOracleInput_5.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tOracleInput_5 = (((oracle.jdbc.OracleConnection)conn_tOracleInput_5).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tOracleInput_5) {
					java.sql.Statement stmtGetTZ_tOracleInput_5 = conn_tOracleInput_5.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_5 = stmtGetTZ_tOracleInput_5.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_5 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tOracleInput_5.next()) {
						sessionTimezone_tOracleInput_5 = rsGetTZ_tOracleInput_5.getString(1);
					}
					if (isConnectionWrapped_tOracleInput_5 && unwrappedOraConn_tOracleInput_5 != null) {
                        unwrappedOraConn_tOracleInput_5.setSessionTimeZone(sessionTimezone_tOracleInput_5);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_5).setSessionTimeZone(sessionTimezone_tOracleInput_5);
                    }
				}
			
		    
			java.sql.Statement stmt_tOracleInput_5 = conn_tOracleInput_5.createStatement();

		    String dbquery_tOracleInput_5 = "SELECT\n  TPRE.ID AS TIPO_PREGUNTA_ID,\n  RES.ID AS RESPUESTA_ID, \n  RES.AFILIADOS_ID,\n  RES.PREGUNTAS_ID,\n  RES.OPC"
+"ION1,\n  RES.OPCION2  \nFROM\n  SALUDSIS.AFI_RESPUESTAS RES\n  INNER JOIN SALUDSIS.GEN_PREGUNTAS PRE ON RES.PREGUNTAS_ID"
+"=PRE.ID\n  INNER JOIN SALUDSIS.GEN_TPREGUNTAS TPRE ON PRE.TPREGUNTAS_ID=TPRE.ID\nWHERE \n  RES.FECHA BETWEEN TO_DATE('"+context.AuxFechaInicio+"','DD/MM/YY') AND TO_DATE('"+context.AuxFechaFin+"','DD/MM/YY')  AND\n  RES.ESTREGISTRO_ID=1 AND \n  PRE.ESTREGISTRO_ID=1 AND\n  RES.ESTREGISTRO_ID=1 AND\n  PRE.ESTREGIS"
+"TRO_ID=1 AND\n  TPRE.ESTREGISTRO_ID=1";
		    

		    globalMap.put("tOracleInput_5_QUERY",dbquery_tOracleInput_5);

		    java.sql.ResultSet rs_tOracleInput_5 = null;

		    try {
		    	rs_tOracleInput_5 = stmt_tOracleInput_5.executeQuery(dbquery_tOracleInput_5);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_5 = rs_tOracleInput_5.getMetaData();
		    	int colQtyInRs_tOracleInput_5 = rsmd_tOracleInput_5.getColumnCount();

		    String tmpContent_tOracleInput_5 = null;
		    
		    
		    while (rs_tOracleInput_5.next()) {
		        nb_line_tOracleInput_5++;
		        
							if(colQtyInRs_tOracleInput_5 < 1) {
								row6.TIPO_PREGUNTA_ID = null;
							} else {
		                          
					if(rs_tOracleInput_5.getObject(1) != null) {
						row6.TIPO_PREGUNTA_ID = rs_tOracleInput_5.getInt(1);
					} else {
				
						row6.TIPO_PREGUNTA_ID = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_5 < 2) {
								row6.RESPUESTA_ID = null;
							} else {
		                          
					if(rs_tOracleInput_5.getObject(2) != null) {
						row6.RESPUESTA_ID = rs_tOracleInput_5.getInt(2);
					} else {
				
						row6.RESPUESTA_ID = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_5 < 3) {
								row6.AFILIADOS_ID = null;
							} else {
		                          
					if(rs_tOracleInput_5.getObject(3) != null) {
						row6.AFILIADOS_ID = rs_tOracleInput_5.getInt(3);
					} else {
				
						row6.AFILIADOS_ID = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_5 < 4) {
								row6.PREGUNTAS_ID = null;
							} else {
		                          
					if(rs_tOracleInput_5.getObject(4) != null) {
						row6.PREGUNTAS_ID = rs_tOracleInput_5.getInt(4);
					} else {
				
						row6.PREGUNTAS_ID = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_5 < 5) {
								row6.OPCION1 = null;
							} else {
	                         		
        	row6.OPCION1 = routines.system.JDBCUtil.getString(rs_tOracleInput_5, 5, false);
		                    }
							if(colQtyInRs_tOracleInput_5 < 6) {
								row6.OPCION2 = null;
							} else {
	                         		
        	row6.OPCION2 = routines.system.JDBCUtil.getString(rs_tOracleInput_5, 6, false);
		                    }
					




 



/**
 * [tOracleInput_5 begin ] stop
 */
	
	/**
	 * [tOracleInput_5 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_5";
	
	

 


	tos_count_tOracleInput_5++;

/**
 * [tOracleInput_5 main ] stop
 */
	
	/**
	 * [tOracleInput_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_5";
	
	

 



/**
 * [tOracleInput_5 process_data_begin ] stop
 */

	
	/**
	 * [tFlowToIterate_1 main ] start
	 */

	

	
	
	currentComponent="tFlowToIterate_1";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row6"
						
						);
					}
					


    	            
            globalMap.put("row6.TIPO_PREGUNTA_ID", row6.TIPO_PREGUNTA_ID);
    	            
            globalMap.put("row6.RESPUESTA_ID", row6.RESPUESTA_ID);
    	            
            globalMap.put("row6.AFILIADOS_ID", row6.AFILIADOS_ID);
    	            
            globalMap.put("row6.PREGUNTAS_ID", row6.PREGUNTAS_ID);
    	            
            globalMap.put("row6.OPCION1", row6.OPCION1);
    	            
            globalMap.put("row6.OPCION2", row6.OPCION2);
    	
 
	   nb_line_tFlowToIterate_1++;  
       counter_tFlowToIterate_1++;
       globalMap.put("tFlowToIterate_1_CURRENT_ITERATION", counter_tFlowToIterate_1);
 


	tos_count_tFlowToIterate_1++;

/**
 * [tFlowToIterate_1 main ] stop
 */
	
	/**
	 * [tFlowToIterate_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFlowToIterate_1";
	
	

 



/**
 * [tFlowToIterate_1 process_data_begin ] stop
 */
	NB_ITERATE_tJava_3++;
	
	
					if(execStat){				
	       				runStat.updateStatOnConnection("OnComponentError8", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("If2", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row8", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("OnComponentOk9", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("If3", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row13", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row11", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("If1", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("If4", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row7", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row9", 3, 0);
					}           			
				
				if(execStat){
					runStat.updateStatOnConnection("iterate1", 1, "exec" + NB_ITERATE_tJava_3);
					//Thread.sleep(1000);
				}				
			

	
	/**
	 * [tJava_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_3", false);
		start_Hash.put("tJava_3", System.currentTimeMillis());
		
	
	currentComponent="tJava_3";
	
	
		int tos_count_tJava_3 = 0;
		


context.TIPO_PREGUNTA_ID=row6.TIPO_PREGUNTA_ID;
context.RESPUESTA_ID=row6.RESPUESTA_ID;
context.AFILIADOS_ID=row6.AFILIADOS_ID;
context.PREGUNTAS_ID=row6.PREGUNTAS_ID;
context.OPCION1=row6.OPCION1;
context.OPCION2=row6.OPCION2;
 



/**
 * [tJava_3 begin ] stop
 */
	
	/**
	 * [tJava_3 main ] start
	 */

	

	
	
	currentComponent="tJava_3";
	
	

 


	tos_count_tJava_3++;

/**
 * [tJava_3 main ] stop
 */
	
	/**
	 * [tJava_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_3";
	
	

 



/**
 * [tJava_3 process_data_begin ] stop
 */
	
	/**
	 * [tJava_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_3";
	
	

 



/**
 * [tJava_3 process_data_end ] stop
 */
	
	/**
	 * [tJava_3 end ] start
	 */

	

	
	
	currentComponent="tJava_3";
	
	

 

ok_Hash.put("tJava_3", true);
end_Hash.put("tJava_3", System.currentTimeMillis());

   			if (context.TIPO_PREGUNTA_ID == 5) {
   				
					if(execStat){
   	 					runStat.updateStatOnConnection("If4", 0, "true");
					}
				tFixedFlowInput_1Process(globalMap);
			}

			   
   				else{
					if(execStat){   
   	 					runStat.updateStatOnConnection("If4", 0, "false");
					}   	 
   				}
   			if (context.TIPO_PREGUNTA_ID != 5) {
   				
					if(execStat){
   	 					runStat.updateStatOnConnection("If1", 0, "true");
					}
				tFixedFlowInput_8Process(globalMap);
			}

			   
   				else{
					if(execStat){   
   	 					runStat.updateStatOnConnection("If1", 0, "false");
					}   	 
   				}



/**
 * [tJava_3 end ] stop
 */
						if(execStat){
							runStat.updateStatOnConnection("iterate1", 2, "exec" + NB_ITERATE_tJava_3);
						}				
					




	
	/**
	 * [tFlowToIterate_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFlowToIterate_1";
	
	

 



/**
 * [tFlowToIterate_1 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_5";
	
	

 



/**
 * [tOracleInput_5 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_5 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_5";
	
	

}
}finally{
	if (rs_tOracleInput_5 != null) {
		rs_tOracleInput_5.close();
	}
	if (stmt_tOracleInput_5 != null) {
		stmt_tOracleInput_5.close();
	}
}

globalMap.put("tOracleInput_5_NB_LINE",nb_line_tOracleInput_5);
 

ok_Hash.put("tOracleInput_5", true);
end_Hash.put("tOracleInput_5", System.currentTimeMillis());




/**
 * [tOracleInput_5 end ] stop
 */

	
	/**
	 * [tFlowToIterate_1 end ] start
	 */

	

	
	
	currentComponent="tFlowToIterate_1";
	
	

globalMap.put("tFlowToIterate_1_NB_LINE",nb_line_tFlowToIterate_1);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row6");
			  	}
			  	
 

ok_Hash.put("tFlowToIterate_1", true);
end_Hash.put("tFlowToIterate_1", System.currentTimeMillis());




/**
 * [tFlowToIterate_1 end ] stop
 */



				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tOracleInput_5:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk1", 0, "ok");
								} 
							
							tHashInput_1Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleInput_5 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_5";
	
	

 



/**
 * [tOracleInput_5 finally ] stop
 */

	
	/**
	 * [tFlowToIterate_1 finally ] start
	 */

	

	
	
	currentComponent="tFlowToIterate_1";
	
	

 



/**
 * [tFlowToIterate_1 finally ] stop
 */

	
	/**
	 * [tJava_3 finally ] start
	 */

	

	
	
	currentComponent="tJava_3";
	
	

 



/**
 * [tJava_3 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_5_SUBPROCESS_STATE", 1);
	}
	


public static class row13Struct implements routines.system.IPersistableRow<row13Struct> {
    final static byte[] commonByteArrayLock_AFI_PRINCIPAL_Consolidado_Salud = new byte[0];
    static byte[] commonByteArray_AFI_PRINCIPAL_Consolidado_Salud = new byte[0];

	
			    public Integer TIPO_PREGUNTA_ID;

				public Integer getTIPO_PREGUNTA_ID () {
					return this.TIPO_PREGUNTA_ID;
				}

				public Boolean TIPO_PREGUNTA_IDIsNullable(){
				    return true;
				}
				public Boolean TIPO_PREGUNTA_IDIsKey(){
				    return false;
				}
				public Integer TIPO_PREGUNTA_IDLength(){
				    return 0;
				}
				public Integer TIPO_PREGUNTA_IDPrecision(){
				    return 0;
				}
				public String TIPO_PREGUNTA_IDDefault(){
				
					return null;
				
				}
				public String TIPO_PREGUNTA_IDComment(){
				
				    return "";
				
				}
				public String TIPO_PREGUNTA_IDPattern(){
				
					return "";
				
				}
				public String TIPO_PREGUNTA_IDOriginalDbColumnName(){
				
					return "TIPO_PREGUNTA_ID";
				
				}

				
			    public Integer RESPUESTA_ID;

				public Integer getRESPUESTA_ID () {
					return this.RESPUESTA_ID;
				}

				public Boolean RESPUESTA_IDIsNullable(){
				    return true;
				}
				public Boolean RESPUESTA_IDIsKey(){
				    return false;
				}
				public Integer RESPUESTA_IDLength(){
				    return 0;
				}
				public Integer RESPUESTA_IDPrecision(){
				    return 0;
				}
				public String RESPUESTA_IDDefault(){
				
					return null;
				
				}
				public String RESPUESTA_IDComment(){
				
				    return "";
				
				}
				public String RESPUESTA_IDPattern(){
				
					return "";
				
				}
				public String RESPUESTA_IDOriginalDbColumnName(){
				
					return "RESPUESTA_ID";
				
				}

				
			    public Integer AFILIADOS_ID;

				public Integer getAFILIADOS_ID () {
					return this.AFILIADOS_ID;
				}

				public Boolean AFILIADOS_IDIsNullable(){
				    return true;
				}
				public Boolean AFILIADOS_IDIsKey(){
				    return false;
				}
				public Integer AFILIADOS_IDLength(){
				    return 0;
				}
				public Integer AFILIADOS_IDPrecision(){
				    return 0;
				}
				public String AFILIADOS_IDDefault(){
				
					return null;
				
				}
				public String AFILIADOS_IDComment(){
				
				    return "";
				
				}
				public String AFILIADOS_IDPattern(){
				
					return "";
				
				}
				public String AFILIADOS_IDOriginalDbColumnName(){
				
					return "AFILIADOS_ID";
				
				}

				
			    public Integer PREGUNTAS_ID;

				public Integer getPREGUNTAS_ID () {
					return this.PREGUNTAS_ID;
				}

				public Boolean PREGUNTAS_IDIsNullable(){
				    return true;
				}
				public Boolean PREGUNTAS_IDIsKey(){
				    return false;
				}
				public Integer PREGUNTAS_IDLength(){
				    return 0;
				}
				public Integer PREGUNTAS_IDPrecision(){
				    return 0;
				}
				public String PREGUNTAS_IDDefault(){
				
					return null;
				
				}
				public String PREGUNTAS_IDComment(){
				
				    return "";
				
				}
				public String PREGUNTAS_IDPattern(){
				
					return "";
				
				}
				public String PREGUNTAS_IDOriginalDbColumnName(){
				
					return "PREGUNTAS_ID";
				
				}

				
			    public String OPCION1;

				public String getOPCION1 () {
					return this.OPCION1;
				}

				public Boolean OPCION1IsNullable(){
				    return true;
				}
				public Boolean OPCION1IsKey(){
				    return false;
				}
				public Integer OPCION1Length(){
				    return 0;
				}
				public Integer OPCION1Precision(){
				    return 0;
				}
				public String OPCION1Default(){
				
					return null;
				
				}
				public String OPCION1Comment(){
				
				    return "";
				
				}
				public String OPCION1Pattern(){
				
					return "";
				
				}
				public String OPCION1OriginalDbColumnName(){
				
					return "OPCION1";
				
				}

				
			    public String OPCION2;

				public String getOPCION2 () {
					return this.OPCION2;
				}

				public Boolean OPCION2IsNullable(){
				    return true;
				}
				public Boolean OPCION2IsKey(){
				    return false;
				}
				public Integer OPCION2Length(){
				    return 0;
				}
				public Integer OPCION2Precision(){
				    return 0;
				}
				public String OPCION2Default(){
				
					return null;
				
				}
				public String OPCION2Comment(){
				
				    return "";
				
				}
				public String OPCION2Pattern(){
				
					return "";
				
				}
				public String OPCION2OriginalDbColumnName(){
				
					return "OPCION2";
				
				}

				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_PRINCIPAL_Consolidado_Salud.length) {
				if(length < 1024 && commonByteArray_AFI_PRINCIPAL_Consolidado_Salud.length == 0) {
   					commonByteArray_AFI_PRINCIPAL_Consolidado_Salud = new byte[1024];
				} else {
   					commonByteArray_AFI_PRINCIPAL_Consolidado_Salud = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_PRINCIPAL_Consolidado_Salud, 0, length);
			strReturn = new String(commonByteArray_AFI_PRINCIPAL_Consolidado_Salud, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_PRINCIPAL_Consolidado_Salud.length) {
				if(length < 1024 && commonByteArray_AFI_PRINCIPAL_Consolidado_Salud.length == 0) {
   					commonByteArray_AFI_PRINCIPAL_Consolidado_Salud = new byte[1024];
				} else {
   					commonByteArray_AFI_PRINCIPAL_Consolidado_Salud = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_PRINCIPAL_Consolidado_Salud, 0, length);
			strReturn = new String(commonByteArray_AFI_PRINCIPAL_Consolidado_Salud, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_PRINCIPAL_Consolidado_Salud) {

        	try {

        		int length = 0;
		
						this.TIPO_PREGUNTA_ID = readInteger(dis);
					
						this.RESPUESTA_ID = readInteger(dis);
					
						this.AFILIADOS_ID = readInteger(dis);
					
						this.PREGUNTAS_ID = readInteger(dis);
					
					this.OPCION1 = readString(dis);
					
					this.OPCION2 = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_PRINCIPAL_Consolidado_Salud) {

        	try {

        		int length = 0;
		
						this.TIPO_PREGUNTA_ID = readInteger(dis);
					
						this.RESPUESTA_ID = readInteger(dis);
					
						this.AFILIADOS_ID = readInteger(dis);
					
						this.PREGUNTAS_ID = readInteger(dis);
					
					this.OPCION1 = readString(dis);
					
					this.OPCION2 = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.TIPO_PREGUNTA_ID,dos);
					
					// Integer
				
						writeInteger(this.RESPUESTA_ID,dos);
					
					// Integer
				
						writeInteger(this.AFILIADOS_ID,dos);
					
					// Integer
				
						writeInteger(this.PREGUNTAS_ID,dos);
					
					// String
				
						writeString(this.OPCION1,dos);
					
					// String
				
						writeString(this.OPCION2,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.TIPO_PREGUNTA_ID,dos);
					
					// Integer
				
						writeInteger(this.RESPUESTA_ID,dos);
					
					// Integer
				
						writeInteger(this.AFILIADOS_ID,dos);
					
					// Integer
				
						writeInteger(this.PREGUNTAS_ID,dos);
					
					// String
				
						writeString(this.OPCION1,dos);
					
					// String
				
						writeString(this.OPCION2,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("TIPO_PREGUNTA_ID="+String.valueOf(TIPO_PREGUNTA_ID));
		sb.append(",RESPUESTA_ID="+String.valueOf(RESPUESTA_ID));
		sb.append(",AFILIADOS_ID="+String.valueOf(AFILIADOS_ID));
		sb.append(",PREGUNTAS_ID="+String.valueOf(PREGUNTAS_ID));
		sb.append(",OPCION1="+OPCION1);
		sb.append(",OPCION2="+OPCION2);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row13Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tFixedFlowInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFixedFlowInput_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row13Struct row13 = new row13Struct();




	
	/**
	 * [tHashOutput_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashOutput_3", false);
		start_Hash.put("tHashOutput_3", System.currentTimeMillis());
		
	
	currentComponent="tHashOutput_3";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row13");
					}
				
		int tos_count_tHashOutput_3 = 0;
		



org.talend.designer.components.hashfile.common.MapHashFile mf_tHashOutput_3=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();    
		org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row13Struct> tHashFile_tHashOutput_3 = null;
		String hashKey_tHashOutput_3 = "tHashFile_Consolidado_Salud_" + pid + "_tHashOutput_3";
			synchronized(org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.get(hashKey_tHashOutput_3)){
			    if(mf_tHashOutput_3.getResourceMap().get(hashKey_tHashOutput_3) == null){
	      		    mf_tHashOutput_3.getResourceMap().put(hashKey_tHashOutput_3, new org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row13Struct>(org.talend.designer.components.hashfile.common.MATCHING_MODE.KEEP_ALL));
	      		    tHashFile_tHashOutput_3 = mf_tHashOutput_3.getResourceMap().get(hashKey_tHashOutput_3);
			    }else{
			    	tHashFile_tHashOutput_3 = mf_tHashOutput_3.getResourceMap().get(hashKey_tHashOutput_3);
			    }
			}
        int nb_line_tHashOutput_3 = 0;

 



/**
 * [tHashOutput_3 begin ] stop
 */



	
	/**
	 * [tFixedFlowInput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFixedFlowInput_1", false);
		start_Hash.put("tFixedFlowInput_1", System.currentTimeMillis());
		
	
	currentComponent="tFixedFlowInput_1";
	
	
		int tos_count_tFixedFlowInput_1 = 0;
		

	    for (int i_tFixedFlowInput_1 = 0 ; i_tFixedFlowInput_1 < 1 ; i_tFixedFlowInput_1++) {
	                	            	
    	            		row13.TIPO_PREGUNTA_ID = context.TIPO_PREGUNTA_ID;
    	            	        	            	
    	            		row13.RESPUESTA_ID = context.RESPUESTA_ID;
    	            	        	            	
    	            		row13.AFILIADOS_ID = context.AFILIADOS_ID;
    	            	        	            	
    	            		row13.PREGUNTAS_ID = context.PREGUNTAS_ID;
    	            	        	            	
    	            		row13.OPCION1 = context.OPCION1;
    	            	        	            	
    	            		row13.OPCION2 = context.OPCION2;
    	            	

 



/**
 * [tFixedFlowInput_1 begin ] stop
 */
	
	/**
	 * [tFixedFlowInput_1 main ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_1";
	
	

 


	tos_count_tFixedFlowInput_1++;

/**
 * [tFixedFlowInput_1 main ] stop
 */
	
	/**
	 * [tFixedFlowInput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_1";
	
	

 



/**
 * [tFixedFlowInput_1 process_data_begin ] stop
 */

	
	/**
	 * [tHashOutput_3 main ] start
	 */

	

	
	
	currentComponent="tHashOutput_3";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row13"
						
						);
					}
					



    
		row13Struct oneRow_tHashOutput_3 = new row13Struct();
				
					oneRow_tHashOutput_3.TIPO_PREGUNTA_ID = row13.TIPO_PREGUNTA_ID;
					oneRow_tHashOutput_3.RESPUESTA_ID = row13.RESPUESTA_ID;
					oneRow_tHashOutput_3.AFILIADOS_ID = row13.AFILIADOS_ID;
					oneRow_tHashOutput_3.PREGUNTAS_ID = row13.PREGUNTAS_ID;
					oneRow_tHashOutput_3.OPCION1 = row13.OPCION1;
					oneRow_tHashOutput_3.OPCION2 = row13.OPCION2;
		
        tHashFile_tHashOutput_3.put(oneRow_tHashOutput_3);
        nb_line_tHashOutput_3 ++;

 


	tos_count_tHashOutput_3++;

/**
 * [tHashOutput_3 main ] stop
 */
	
	/**
	 * [tHashOutput_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashOutput_3";
	
	

 



/**
 * [tHashOutput_3 process_data_begin ] stop
 */
	
	/**
	 * [tHashOutput_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashOutput_3";
	
	

 



/**
 * [tHashOutput_3 process_data_end ] stop
 */



	
	/**
	 * [tFixedFlowInput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_1";
	
	

 



/**
 * [tFixedFlowInput_1 process_data_end ] stop
 */
	
	/**
	 * [tFixedFlowInput_1 end ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_1";
	
	

        }
        globalMap.put("tFixedFlowInput_1_NB_LINE", 1);        

 

ok_Hash.put("tFixedFlowInput_1", true);
end_Hash.put("tFixedFlowInput_1", System.currentTimeMillis());




/**
 * [tFixedFlowInput_1 end ] stop
 */

	
	/**
	 * [tHashOutput_3 end ] start
	 */

	

	
	
	currentComponent="tHashOutput_3";
	
	
globalMap.put("tHashOutput_3_NB_LINE", nb_line_tHashOutput_3);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row13");
			  	}
			  	
 

ok_Hash.put("tHashOutput_3", true);
end_Hash.put("tHashOutput_3", System.currentTimeMillis());




/**
 * [tHashOutput_3 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFixedFlowInput_1 finally ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_1";
	
	

 



/**
 * [tFixedFlowInput_1 finally ] stop
 */

	
	/**
	 * [tHashOutput_3 finally ] start
	 */

	

	
	
	currentComponent="tHashOutput_3";
	
	

 



/**
 * [tHashOutput_3 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFixedFlowInput_1_SUBPROCESS_STATE", 1);
	}
	


public static class row7Struct implements routines.system.IPersistableRow<row7Struct> {
    final static byte[] commonByteArrayLock_AFI_PRINCIPAL_Consolidado_Salud = new byte[0];
    static byte[] commonByteArray_AFI_PRINCIPAL_Consolidado_Salud = new byte[0];

	
			    public String respuesta1;

				public String getRespuesta1 () {
					return this.respuesta1;
				}

				public Boolean respuesta1IsNullable(){
				    return true;
				}
				public Boolean respuesta1IsKey(){
				    return false;
				}
				public Integer respuesta1Length(){
				    return 0;
				}
				public Integer respuesta1Precision(){
				    return 0;
				}
				public String respuesta1Default(){
				
					return null;
				
				}
				public String respuesta1Comment(){
				
				    return "";
				
				}
				public String respuesta1Pattern(){
				
					return "";
				
				}
				public String respuesta1OriginalDbColumnName(){
				
					return "respuesta1";
				
				}

				
			    public String result;

				public String getResult () {
					return this.result;
				}

				public Boolean resultIsNullable(){
				    return true;
				}
				public Boolean resultIsKey(){
				    return false;
				}
				public Integer resultLength(){
				    return 0;
				}
				public Integer resultPrecision(){
				    return 0;
				}
				public String resultDefault(){
				
					return null;
				
				}
				public String resultComment(){
				
				    return "";
				
				}
				public String resultPattern(){
				
					return "";
				
				}
				public String resultOriginalDbColumnName(){
				
					return "result";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_PRINCIPAL_Consolidado_Salud.length) {
				if(length < 1024 && commonByteArray_AFI_PRINCIPAL_Consolidado_Salud.length == 0) {
   					commonByteArray_AFI_PRINCIPAL_Consolidado_Salud = new byte[1024];
				} else {
   					commonByteArray_AFI_PRINCIPAL_Consolidado_Salud = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_PRINCIPAL_Consolidado_Salud, 0, length);
			strReturn = new String(commonByteArray_AFI_PRINCIPAL_Consolidado_Salud, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_PRINCIPAL_Consolidado_Salud.length) {
				if(length < 1024 && commonByteArray_AFI_PRINCIPAL_Consolidado_Salud.length == 0) {
   					commonByteArray_AFI_PRINCIPAL_Consolidado_Salud = new byte[1024];
				} else {
   					commonByteArray_AFI_PRINCIPAL_Consolidado_Salud = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_PRINCIPAL_Consolidado_Salud, 0, length);
			strReturn = new String(commonByteArray_AFI_PRINCIPAL_Consolidado_Salud, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_PRINCIPAL_Consolidado_Salud) {

        	try {

        		int length = 0;
		
					this.respuesta1 = readString(dis);
					
					this.result = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_PRINCIPAL_Consolidado_Salud) {

        	try {

        		int length = 0;
		
					this.respuesta1 = readString(dis);
					
					this.result = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.respuesta1,dos);
					
					// String
				
						writeString(this.result,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.respuesta1,dos);
					
					// String
				
						writeString(this.result,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("respuesta1="+respuesta1);
		sb.append(",result="+result);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row7Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row9Struct implements routines.system.IPersistableRow<row9Struct> {
    final static byte[] commonByteArrayLock_AFI_PRINCIPAL_Consolidado_Salud = new byte[0];
    static byte[] commonByteArray_AFI_PRINCIPAL_Consolidado_Salud = new byte[0];

	
			    public String respuesta1;

				public String getRespuesta1 () {
					return this.respuesta1;
				}

				public Boolean respuesta1IsNullable(){
				    return true;
				}
				public Boolean respuesta1IsKey(){
				    return false;
				}
				public Integer respuesta1Length(){
				    return 0;
				}
				public Integer respuesta1Precision(){
				    return 0;
				}
				public String respuesta1Default(){
				
					return null;
				
				}
				public String respuesta1Comment(){
				
				    return "";
				
				}
				public String respuesta1Pattern(){
				
					return "";
				
				}
				public String respuesta1OriginalDbColumnName(){
				
					return "respuesta1";
				
				}

				
			    public String result;

				public String getResult () {
					return this.result;
				}

				public Boolean resultIsNullable(){
				    return true;
				}
				public Boolean resultIsKey(){
				    return false;
				}
				public Integer resultLength(){
				    return 0;
				}
				public Integer resultPrecision(){
				    return 0;
				}
				public String resultDefault(){
				
					return null;
				
				}
				public String resultComment(){
				
				    return "";
				
				}
				public String resultPattern(){
				
					return "";
				
				}
				public String resultOriginalDbColumnName(){
				
					return "result";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_PRINCIPAL_Consolidado_Salud.length) {
				if(length < 1024 && commonByteArray_AFI_PRINCIPAL_Consolidado_Salud.length == 0) {
   					commonByteArray_AFI_PRINCIPAL_Consolidado_Salud = new byte[1024];
				} else {
   					commonByteArray_AFI_PRINCIPAL_Consolidado_Salud = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_PRINCIPAL_Consolidado_Salud, 0, length);
			strReturn = new String(commonByteArray_AFI_PRINCIPAL_Consolidado_Salud, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_PRINCIPAL_Consolidado_Salud.length) {
				if(length < 1024 && commonByteArray_AFI_PRINCIPAL_Consolidado_Salud.length == 0) {
   					commonByteArray_AFI_PRINCIPAL_Consolidado_Salud = new byte[1024];
				} else {
   					commonByteArray_AFI_PRINCIPAL_Consolidado_Salud = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_PRINCIPAL_Consolidado_Salud, 0, length);
			strReturn = new String(commonByteArray_AFI_PRINCIPAL_Consolidado_Salud, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_PRINCIPAL_Consolidado_Salud) {

        	try {

        		int length = 0;
		
					this.respuesta1 = readString(dis);
					
					this.result = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_PRINCIPAL_Consolidado_Salud) {

        	try {

        		int length = 0;
		
					this.respuesta1 = readString(dis);
					
					this.result = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.respuesta1,dos);
					
					// String
				
						writeString(this.result,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.respuesta1,dos);
					
					// String
				
						writeString(this.result,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("respuesta1="+respuesta1);
		sb.append(",result="+result);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row9Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row8Struct implements routines.system.IPersistableRow<row8Struct> {
    final static byte[] commonByteArrayLock_AFI_PRINCIPAL_Consolidado_Salud = new byte[0];
    static byte[] commonByteArray_AFI_PRINCIPAL_Consolidado_Salud = new byte[0];

	
			    public Integer TIPO_PREGUNTA_ID;

				public Integer getTIPO_PREGUNTA_ID () {
					return this.TIPO_PREGUNTA_ID;
				}

				public Boolean TIPO_PREGUNTA_IDIsNullable(){
				    return true;
				}
				public Boolean TIPO_PREGUNTA_IDIsKey(){
				    return false;
				}
				public Integer TIPO_PREGUNTA_IDLength(){
				    return 0;
				}
				public Integer TIPO_PREGUNTA_IDPrecision(){
				    return 0;
				}
				public String TIPO_PREGUNTA_IDDefault(){
				
					return null;
				
				}
				public String TIPO_PREGUNTA_IDComment(){
				
				    return "";
				
				}
				public String TIPO_PREGUNTA_IDPattern(){
				
					return "";
				
				}
				public String TIPO_PREGUNTA_IDOriginalDbColumnName(){
				
					return "TIPO_PREGUNTA_ID";
				
				}

				
			    public Integer RESPUESTA_ID;

				public Integer getRESPUESTA_ID () {
					return this.RESPUESTA_ID;
				}

				public Boolean RESPUESTA_IDIsNullable(){
				    return true;
				}
				public Boolean RESPUESTA_IDIsKey(){
				    return false;
				}
				public Integer RESPUESTA_IDLength(){
				    return 0;
				}
				public Integer RESPUESTA_IDPrecision(){
				    return 0;
				}
				public String RESPUESTA_IDDefault(){
				
					return null;
				
				}
				public String RESPUESTA_IDComment(){
				
				    return "";
				
				}
				public String RESPUESTA_IDPattern(){
				
					return "";
				
				}
				public String RESPUESTA_IDOriginalDbColumnName(){
				
					return "RESPUESTA_ID";
				
				}

				
			    public Integer AFILIADOS_ID;

				public Integer getAFILIADOS_ID () {
					return this.AFILIADOS_ID;
				}

				public Boolean AFILIADOS_IDIsNullable(){
				    return true;
				}
				public Boolean AFILIADOS_IDIsKey(){
				    return false;
				}
				public Integer AFILIADOS_IDLength(){
				    return 0;
				}
				public Integer AFILIADOS_IDPrecision(){
				    return 0;
				}
				public String AFILIADOS_IDDefault(){
				
					return null;
				
				}
				public String AFILIADOS_IDComment(){
				
				    return "";
				
				}
				public String AFILIADOS_IDPattern(){
				
					return "";
				
				}
				public String AFILIADOS_IDOriginalDbColumnName(){
				
					return "AFILIADOS_ID";
				
				}

				
			    public Integer PREGUNTAS_ID;

				public Integer getPREGUNTAS_ID () {
					return this.PREGUNTAS_ID;
				}

				public Boolean PREGUNTAS_IDIsNullable(){
				    return true;
				}
				public Boolean PREGUNTAS_IDIsKey(){
				    return false;
				}
				public Integer PREGUNTAS_IDLength(){
				    return 0;
				}
				public Integer PREGUNTAS_IDPrecision(){
				    return 0;
				}
				public String PREGUNTAS_IDDefault(){
				
					return null;
				
				}
				public String PREGUNTAS_IDComment(){
				
				    return "";
				
				}
				public String PREGUNTAS_IDPattern(){
				
					return "";
				
				}
				public String PREGUNTAS_IDOriginalDbColumnName(){
				
					return "PREGUNTAS_ID";
				
				}

				
			    public String OPCION1;

				public String getOPCION1 () {
					return this.OPCION1;
				}

				public Boolean OPCION1IsNullable(){
				    return true;
				}
				public Boolean OPCION1IsKey(){
				    return false;
				}
				public Integer OPCION1Length(){
				    return 0;
				}
				public Integer OPCION1Precision(){
				    return 0;
				}
				public String OPCION1Default(){
				
					return null;
				
				}
				public String OPCION1Comment(){
				
				    return "";
				
				}
				public String OPCION1Pattern(){
				
					return "";
				
				}
				public String OPCION1OriginalDbColumnName(){
				
					return "OPCION1";
				
				}

				
			    public String OPCION2;

				public String getOPCION2 () {
					return this.OPCION2;
				}

				public Boolean OPCION2IsNullable(){
				    return true;
				}
				public Boolean OPCION2IsKey(){
				    return false;
				}
				public Integer OPCION2Length(){
				    return 0;
				}
				public Integer OPCION2Precision(){
				    return 0;
				}
				public String OPCION2Default(){
				
					return null;
				
				}
				public String OPCION2Comment(){
				
				    return "";
				
				}
				public String OPCION2Pattern(){
				
					return "";
				
				}
				public String OPCION2OriginalDbColumnName(){
				
					return "OPCION2";
				
				}

				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_PRINCIPAL_Consolidado_Salud.length) {
				if(length < 1024 && commonByteArray_AFI_PRINCIPAL_Consolidado_Salud.length == 0) {
   					commonByteArray_AFI_PRINCIPAL_Consolidado_Salud = new byte[1024];
				} else {
   					commonByteArray_AFI_PRINCIPAL_Consolidado_Salud = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_PRINCIPAL_Consolidado_Salud, 0, length);
			strReturn = new String(commonByteArray_AFI_PRINCIPAL_Consolidado_Salud, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_PRINCIPAL_Consolidado_Salud.length) {
				if(length < 1024 && commonByteArray_AFI_PRINCIPAL_Consolidado_Salud.length == 0) {
   					commonByteArray_AFI_PRINCIPAL_Consolidado_Salud = new byte[1024];
				} else {
   					commonByteArray_AFI_PRINCIPAL_Consolidado_Salud = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_PRINCIPAL_Consolidado_Salud, 0, length);
			strReturn = new String(commonByteArray_AFI_PRINCIPAL_Consolidado_Salud, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_PRINCIPAL_Consolidado_Salud) {

        	try {

        		int length = 0;
		
						this.TIPO_PREGUNTA_ID = readInteger(dis);
					
						this.RESPUESTA_ID = readInteger(dis);
					
						this.AFILIADOS_ID = readInteger(dis);
					
						this.PREGUNTAS_ID = readInteger(dis);
					
					this.OPCION1 = readString(dis);
					
					this.OPCION2 = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_PRINCIPAL_Consolidado_Salud) {

        	try {

        		int length = 0;
		
						this.TIPO_PREGUNTA_ID = readInteger(dis);
					
						this.RESPUESTA_ID = readInteger(dis);
					
						this.AFILIADOS_ID = readInteger(dis);
					
						this.PREGUNTAS_ID = readInteger(dis);
					
					this.OPCION1 = readString(dis);
					
					this.OPCION2 = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.TIPO_PREGUNTA_ID,dos);
					
					// Integer
				
						writeInteger(this.RESPUESTA_ID,dos);
					
					// Integer
				
						writeInteger(this.AFILIADOS_ID,dos);
					
					// Integer
				
						writeInteger(this.PREGUNTAS_ID,dos);
					
					// String
				
						writeString(this.OPCION1,dos);
					
					// String
				
						writeString(this.OPCION2,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.TIPO_PREGUNTA_ID,dos);
					
					// Integer
				
						writeInteger(this.RESPUESTA_ID,dos);
					
					// Integer
				
						writeInteger(this.AFILIADOS_ID,dos);
					
					// Integer
				
						writeInteger(this.PREGUNTAS_ID,dos);
					
					// String
				
						writeString(this.OPCION1,dos);
					
					// String
				
						writeString(this.OPCION2,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("TIPO_PREGUNTA_ID="+String.valueOf(TIPO_PREGUNTA_ID));
		sb.append(",RESPUESTA_ID="+String.valueOf(RESPUESTA_ID));
		sb.append(",AFILIADOS_ID="+String.valueOf(AFILIADOS_ID));
		sb.append(",PREGUNTAS_ID="+String.valueOf(PREGUNTAS_ID));
		sb.append(",OPCION1="+OPCION1);
		sb.append(",OPCION2="+OPCION2);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row8Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tFixedFlowInput_8Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFixedFlowInput_8_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row8Struct row8 = new row8Struct();
row9Struct row9 = new row9Struct();
row7Struct row7 = new row7Struct();






	
	/**
	 * [tJavaRow_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaRow_2", false);
		start_Hash.put("tJavaRow_2", System.currentTimeMillis());
		
	
	currentComponent="tJavaRow_2";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row7");
					}
				
		int tos_count_tJavaRow_2 = 0;
		

int nb_line_tJavaRow_2 = 0;

 



/**
 * [tJavaRow_2 begin ] stop
 */



	
	/**
	 * [tOracleSP_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleSP_1", false);
		start_Hash.put("tOracleSP_1", System.currentTimeMillis());
		
	
	currentComponent="tOracleSP_1";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row9");
					}
				
		int tos_count_tOracleSP_1 = 0;
		

	java.sql.Connection connection_tOracleSP_1 = null;
	connection_tOracleSP_1 = (java.sql.Connection) globalMap.get("conn_tOracleConnection_1");
	

java.sql.CallableStatement statement_tOracleSP_1 = connection_tOracleSP_1.prepareCall("{? = call " + "AFI.Check4Numbers" + "(?)}");

java.sql.Timestamp tmpDate_tOracleSP_1;
String tmpString_tOracleSP_1;

 



/**
 * [tOracleSP_1 begin ] stop
 */



	
	/**
	 * [tJavaRow_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaRow_1", false);
		start_Hash.put("tJavaRow_1", System.currentTimeMillis());
		
	
	currentComponent="tJavaRow_1";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row8");
					}
				
		int tos_count_tJavaRow_1 = 0;
		

int nb_line_tJavaRow_1 = 0;

 



/**
 * [tJavaRow_1 begin ] stop
 */



	
	/**
	 * [tFixedFlowInput_8 begin ] start
	 */

	

	
		
		ok_Hash.put("tFixedFlowInput_8", false);
		start_Hash.put("tFixedFlowInput_8", System.currentTimeMillis());
		
	
	currentComponent="tFixedFlowInput_8";
	
	
		int tos_count_tFixedFlowInput_8 = 0;
		

	    for (int i_tFixedFlowInput_8 = 0 ; i_tFixedFlowInput_8 < 1 ; i_tFixedFlowInput_8++) {
	                	            	
    	            		row8.TIPO_PREGUNTA_ID = context.TIPO_PREGUNTA_ID;
    	            	        	            	
    	            		row8.RESPUESTA_ID = context.RESPUESTA_ID;
    	            	        	            	
    	            		row8.AFILIADOS_ID = context.AFILIADOS_ID;
    	            	        	            	
    	            		row8.PREGUNTAS_ID = context.PREGUNTAS_ID;
    	            	        	            	
    	            		row8.OPCION1 = context.OPCION1;
    	            	        	            	
    	            		row8.OPCION2 = context.OPCION2;
    	            	

 



/**
 * [tFixedFlowInput_8 begin ] stop
 */
	
	/**
	 * [tFixedFlowInput_8 main ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_8";
	
	

 


	tos_count_tFixedFlowInput_8++;

/**
 * [tFixedFlowInput_8 main ] stop
 */
	
	/**
	 * [tFixedFlowInput_8 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_8";
	
	

 



/**
 * [tFixedFlowInput_8 process_data_begin ] stop
 */

	
	/**
	 * [tJavaRow_1 main ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row8"
						
						);
					}
					

    row9.respuesta1 = row8.OPCION1;
globalMap.put("respuesta1", row8.OPCION1);
    nb_line_tJavaRow_1++;   

 


	tos_count_tJavaRow_1++;

/**
 * [tJavaRow_1 main ] stop
 */
	
	/**
	 * [tJavaRow_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";
	
	

 



/**
 * [tJavaRow_1 process_data_begin ] stop
 */

	
	/**
	 * [tOracleSP_1 main ] start
	 */

	

	
	
	currentComponent="tOracleSP_1";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row9"
						
						);
					}
					

			// code for the argument 1 (result) of type 'OUT AUTOMAPPING'
					statement_tOracleSP_1.registerOutParameter(1, java.sql.Types.VARCHAR);
			// code for the argument 2 (respuesta1) of type 'IN AUTOMAPPING'
    					if (row9.respuesta1 == null) {
    						statement_tOracleSP_1.setNull(2, java.sql.Types.VARCHAR);
    					} else {
    					
                        statement_tOracleSP_1.setString(2, row9.respuesta1);
    					}
    					
		statement_tOracleSP_1.execute();
		
								row7.respuesta1 = row9.respuesta1;
								
									row7.result = statement_tOracleSP_1.getString(1);
									
									if (statement_tOracleSP_1.wasNull()) {
										row7.result = null;
									}
									

 


	tos_count_tOracleSP_1++;

/**
 * [tOracleSP_1 main ] stop
 */
	
	/**
	 * [tOracleSP_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleSP_1";
	
	

 



/**
 * [tOracleSP_1 process_data_begin ] stop
 */

	
	/**
	 * [tJavaRow_2 main ] start
	 */

	

	
	
	currentComponent="tJavaRow_2";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row7"
						
						);
					}
					

    context.AuxOpcion1 = row7.result.equals("Non-Numeric")?1:2;
context.AuxValor = row7.respuesta1;
    nb_line_tJavaRow_2++;   

 


	tos_count_tJavaRow_2++;

/**
 * [tJavaRow_2 main ] stop
 */
	
	/**
	 * [tJavaRow_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJavaRow_2";
	
	

 



/**
 * [tJavaRow_2 process_data_begin ] stop
 */
	
	/**
	 * [tJavaRow_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tJavaRow_2";
	
	

 



/**
 * [tJavaRow_2 process_data_end ] stop
 */



	
	/**
	 * [tOracleSP_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleSP_1";
	
	

 



/**
 * [tOracleSP_1 process_data_end ] stop
 */



	
	/**
	 * [tJavaRow_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";
	
	

 



/**
 * [tJavaRow_1 process_data_end ] stop
 */



	
	/**
	 * [tFixedFlowInput_8 process_data_end ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_8";
	
	

 



/**
 * [tFixedFlowInput_8 process_data_end ] stop
 */
	
	/**
	 * [tFixedFlowInput_8 end ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_8";
	
	

        }
        globalMap.put("tFixedFlowInput_8_NB_LINE", 1);        

 

ok_Hash.put("tFixedFlowInput_8", true);
end_Hash.put("tFixedFlowInput_8", System.currentTimeMillis());




/**
 * [tFixedFlowInput_8 end ] stop
 */

	
	/**
	 * [tJavaRow_1 end ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";
	
	

globalMap.put("tJavaRow_1_NB_LINE",nb_line_tJavaRow_1);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row8");
			  	}
			  	
 

ok_Hash.put("tJavaRow_1", true);
end_Hash.put("tJavaRow_1", System.currentTimeMillis());




/**
 * [tJavaRow_1 end ] stop
 */

	
	/**
	 * [tOracleSP_1 end ] start
	 */

	

	
	
	currentComponent="tOracleSP_1";
	
	


	statement_tOracleSP_1.close();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row9");
			  	}
			  	
 

ok_Hash.put("tOracleSP_1", true);
end_Hash.put("tOracleSP_1", System.currentTimeMillis());




/**
 * [tOracleSP_1 end ] stop
 */

	
	/**
	 * [tJavaRow_2 end ] start
	 */

	

	
	
	currentComponent="tJavaRow_2";
	
	

globalMap.put("tJavaRow_2_NB_LINE",nb_line_tJavaRow_2);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row7");
			  	}
			  	
 

ok_Hash.put("tJavaRow_2", true);
end_Hash.put("tJavaRow_2", System.currentTimeMillis());

   			if (context.AuxOpcion1==1) {
   				
					if(execStat){
   	 					runStat.updateStatOnConnection("If2", 0, "true");
					}
				tFixedFlowInput_1Process(globalMap);
			}

			   
   				else{
					if(execStat){   
   	 					runStat.updateStatOnConnection("If2", 0, "false");
					}   	 
   				}
   			if (context.AuxOpcion1==2) {
   				
					if(execStat){
   	 					runStat.updateStatOnConnection("If3", 0, "true");
					}
				tOracleInput_6Process(globalMap);
			}

			   
   				else{
					if(execStat){   
   	 					runStat.updateStatOnConnection("If3", 0, "false");
					}   	 
   				}



/**
 * [tJavaRow_2 end ] stop
 */









				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFixedFlowInput_8 finally ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_8";
	
	

 



/**
 * [tFixedFlowInput_8 finally ] stop
 */

	
	/**
	 * [tJavaRow_1 finally ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";
	
	

 



/**
 * [tJavaRow_1 finally ] stop
 */

	
	/**
	 * [tOracleSP_1 finally ] start
	 */

	

	
	
	currentComponent="tOracleSP_1";
	
	

 



/**
 * [tOracleSP_1 finally ] stop
 */

	
	/**
	 * [tJavaRow_2 finally ] start
	 */

	

	
	
	currentComponent="tJavaRow_2";
	
	

 



/**
 * [tJavaRow_2 finally ] stop
 */









				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFixedFlowInput_8_SUBPROCESS_STATE", 1);
	}
	


public static class row11Struct implements routines.system.IPersistableRow<row11Struct> {
    final static byte[] commonByteArrayLock_AFI_PRINCIPAL_Consolidado_Salud = new byte[0];
    static byte[] commonByteArray_AFI_PRINCIPAL_Consolidado_Salud = new byte[0];

	
			    public String VrPredeterminado;

				public String getVrPredeterminado () {
					return this.VrPredeterminado;
				}

				public Boolean VrPredeterminadoIsNullable(){
				    return true;
				}
				public Boolean VrPredeterminadoIsKey(){
				    return false;
				}
				public Integer VrPredeterminadoLength(){
				    return 0;
				}
				public Integer VrPredeterminadoPrecision(){
				    return 0;
				}
				public String VrPredeterminadoDefault(){
				
					return null;
				
				}
				public String VrPredeterminadoComment(){
				
				    return "";
				
				}
				public String VrPredeterminadoPattern(){
				
					return "";
				
				}
				public String VrPredeterminadoOriginalDbColumnName(){
				
					return "VrPredeterminado";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_PRINCIPAL_Consolidado_Salud.length) {
				if(length < 1024 && commonByteArray_AFI_PRINCIPAL_Consolidado_Salud.length == 0) {
   					commonByteArray_AFI_PRINCIPAL_Consolidado_Salud = new byte[1024];
				} else {
   					commonByteArray_AFI_PRINCIPAL_Consolidado_Salud = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_PRINCIPAL_Consolidado_Salud, 0, length);
			strReturn = new String(commonByteArray_AFI_PRINCIPAL_Consolidado_Salud, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_PRINCIPAL_Consolidado_Salud.length) {
				if(length < 1024 && commonByteArray_AFI_PRINCIPAL_Consolidado_Salud.length == 0) {
   					commonByteArray_AFI_PRINCIPAL_Consolidado_Salud = new byte[1024];
				} else {
   					commonByteArray_AFI_PRINCIPAL_Consolidado_Salud = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_PRINCIPAL_Consolidado_Salud, 0, length);
			strReturn = new String(commonByteArray_AFI_PRINCIPAL_Consolidado_Salud, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_PRINCIPAL_Consolidado_Salud) {

        	try {

        		int length = 0;
		
					this.VrPredeterminado = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_PRINCIPAL_Consolidado_Salud) {

        	try {

        		int length = 0;
		
					this.VrPredeterminado = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.VrPredeterminado,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.VrPredeterminado,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("VrPredeterminado="+VrPredeterminado);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row11Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_6Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_6_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row11Struct row11 = new row11Struct();




	
	/**
	 * [tJavaRow_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaRow_3", false);
		start_Hash.put("tJavaRow_3", System.currentTimeMillis());
		
	
	currentComponent="tJavaRow_3";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row11");
					}
				
		int tos_count_tJavaRow_3 = 0;
		

int nb_line_tJavaRow_3 = 0;

 



/**
 * [tJavaRow_3 begin ] stop
 */



	
	/**
	 * [tOracleInput_6 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_6", false);
		start_Hash.put("tOracleInput_6", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_6";
	
	
		int tos_count_tOracleInput_6 = 0;
		
	


	
		    int nb_line_tOracleInput_6 = 0;
		    java.sql.Connection conn_tOracleInput_6 = null;
				conn_tOracleInput_6 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");
				
                boolean isTimeZoneNull_tOracleInput_6 = false;
				boolean isConnectionWrapped_tOracleInput_6 = !(conn_tOracleInput_6 instanceof oracle.jdbc.OracleConnection) && conn_tOracleInput_6.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tOracleInput_6 = null;
                if (isConnectionWrapped_tOracleInput_6) {
					unwrappedOraConn_tOracleInput_6 = conn_tOracleInput_6.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tOracleInput_6 != null) {
                        isTimeZoneNull_tOracleInput_6 = (unwrappedOraConn_tOracleInput_6.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tOracleInput_6 = (((oracle.jdbc.OracleConnection)conn_tOracleInput_6).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tOracleInput_6) {
					java.sql.Statement stmtGetTZ_tOracleInput_6 = conn_tOracleInput_6.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_6 = stmtGetTZ_tOracleInput_6.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_6 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tOracleInput_6.next()) {
						sessionTimezone_tOracleInput_6 = rsGetTZ_tOracleInput_6.getString(1);
					}
					if (isConnectionWrapped_tOracleInput_6 && unwrappedOraConn_tOracleInput_6 != null) {
                        unwrappedOraConn_tOracleInput_6.setSessionTimeZone(sessionTimezone_tOracleInput_6);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_6).setSessionTimeZone(sessionTimezone_tOracleInput_6);
                    }
				}
			
		    
			java.sql.Statement stmt_tOracleInput_6 = conn_tOracleInput_6.createStatement();

		    String dbquery_tOracleInput_6 = "SELECT  SALUDSIS.GEN_TRESPUESTAS.VPREDETERMINADO \nFROM SALUDSIS.GEN_TRESPUESTAS\nWHERE  SALUDSIS.GEN_TRESPUESTAS.ID = "
+"" + context.AuxValor;
		    

		    globalMap.put("tOracleInput_6_QUERY",dbquery_tOracleInput_6);

		    java.sql.ResultSet rs_tOracleInput_6 = null;

		    try {
		    	rs_tOracleInput_6 = stmt_tOracleInput_6.executeQuery(dbquery_tOracleInput_6);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_6 = rs_tOracleInput_6.getMetaData();
		    	int colQtyInRs_tOracleInput_6 = rsmd_tOracleInput_6.getColumnCount();

		    String tmpContent_tOracleInput_6 = null;
		    
		    
		    while (rs_tOracleInput_6.next()) {
		        nb_line_tOracleInput_6++;
		        
							if(colQtyInRs_tOracleInput_6 < 1) {
								row11.VrPredeterminado = null;
							} else {
	                         		
        	row11.VrPredeterminado = routines.system.JDBCUtil.getString(rs_tOracleInput_6, 1, false);
		                    }
					




 



/**
 * [tOracleInput_6 begin ] stop
 */
	
	/**
	 * [tOracleInput_6 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_6";
	
	

 


	tos_count_tOracleInput_6++;

/**
 * [tOracleInput_6 main ] stop
 */
	
	/**
	 * [tOracleInput_6 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_6";
	
	

 



/**
 * [tOracleInput_6 process_data_begin ] stop
 */

	
	/**
	 * [tJavaRow_3 main ] start
	 */

	

	
	
	currentComponent="tJavaRow_3";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row11"
						
						);
					}
					

    //Code generate according to input schema and output schema
context.OPCION1 = row11.VrPredeterminado;
    nb_line_tJavaRow_3++;   

 


	tos_count_tJavaRow_3++;

/**
 * [tJavaRow_3 main ] stop
 */
	
	/**
	 * [tJavaRow_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJavaRow_3";
	
	

 



/**
 * [tJavaRow_3 process_data_begin ] stop
 */
	
	/**
	 * [tJavaRow_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tJavaRow_3";
	
	

 



/**
 * [tJavaRow_3 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_6 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_6";
	
	

 



/**
 * [tOracleInput_6 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_6 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_6";
	
	

}
}finally{
	if (rs_tOracleInput_6 != null) {
		rs_tOracleInput_6.close();
	}
	if (stmt_tOracleInput_6 != null) {
		stmt_tOracleInput_6.close();
	}
}

globalMap.put("tOracleInput_6_NB_LINE",nb_line_tOracleInput_6);
 

ok_Hash.put("tOracleInput_6", true);
end_Hash.put("tOracleInput_6", System.currentTimeMillis());




/**
 * [tOracleInput_6 end ] stop
 */

	
	/**
	 * [tJavaRow_3 end ] start
	 */

	

	
	
	currentComponent="tJavaRow_3";
	
	

globalMap.put("tJavaRow_3_NB_LINE",nb_line_tJavaRow_3);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row11");
			  	}
			  	
 

ok_Hash.put("tJavaRow_3", true);
end_Hash.put("tJavaRow_3", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk9", 0, "ok");
				}
				tFixedFlowInput_1Process(globalMap);



/**
 * [tJavaRow_3 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleInput_6 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_6";
	
	

 



/**
 * [tOracleInput_6 finally ] stop
 */

	
	/**
	 * [tJavaRow_3 finally ] start
	 */

	

	
	
	currentComponent="tJavaRow_3";
	
	

 



/**
 * [tJavaRow_3 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_6_SUBPROCESS_STATE", 1);
	}
	


public void tJava_7Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_7_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tJava_7 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_7", false);
		start_Hash.put("tJava_7", System.currentTimeMillis());
		
	
	currentComponent="tJava_7";
	
	
		int tos_count_tJava_7 = 0;
		


System.out.println("Respuesta error: " + globalMap.get("respuesta1"));
 



/**
 * [tJava_7 begin ] stop
 */
	
	/**
	 * [tJava_7 main ] start
	 */

	

	
	
	currentComponent="tJava_7";
	
	

 


	tos_count_tJava_7++;

/**
 * [tJava_7 main ] stop
 */
	
	/**
	 * [tJava_7 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_7";
	
	

 



/**
 * [tJava_7 process_data_begin ] stop
 */
	
	/**
	 * [tJava_7 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_7";
	
	

 



/**
 * [tJava_7 process_data_end ] stop
 */
	
	/**
	 * [tJava_7 end ] start
	 */

	

	
	
	currentComponent="tJava_7";
	
	

 

ok_Hash.put("tJava_7", true);
end_Hash.put("tJava_7", System.currentTimeMillis());




/**
 * [tJava_7 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_7 finally ] start
	 */

	

	
	
	currentComponent="tJava_7";
	
	

 



/**
 * [tJava_7 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_7_SUBPROCESS_STATE", 1);
	}
	


public static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
    final static byte[] commonByteArrayLock_AFI_PRINCIPAL_Consolidado_Salud = new byte[0];
    static byte[] commonByteArray_AFI_PRINCIPAL_Consolidado_Salud = new byte[0];

	
			    public Integer TIPO_PREGUNTA_ID;

				public Integer getTIPO_PREGUNTA_ID () {
					return this.TIPO_PREGUNTA_ID;
				}

				public Boolean TIPO_PREGUNTA_IDIsNullable(){
				    return true;
				}
				public Boolean TIPO_PREGUNTA_IDIsKey(){
				    return false;
				}
				public Integer TIPO_PREGUNTA_IDLength(){
				    return 0;
				}
				public Integer TIPO_PREGUNTA_IDPrecision(){
				    return 0;
				}
				public String TIPO_PREGUNTA_IDDefault(){
				
					return null;
				
				}
				public String TIPO_PREGUNTA_IDComment(){
				
				    return "";
				
				}
				public String TIPO_PREGUNTA_IDPattern(){
				
					return "";
				
				}
				public String TIPO_PREGUNTA_IDOriginalDbColumnName(){
				
					return "TIPO_PREGUNTA_ID";
				
				}

				
			    public Integer RESPUESTA_ID;

				public Integer getRESPUESTA_ID () {
					return this.RESPUESTA_ID;
				}

				public Boolean RESPUESTA_IDIsNullable(){
				    return true;
				}
				public Boolean RESPUESTA_IDIsKey(){
				    return false;
				}
				public Integer RESPUESTA_IDLength(){
				    return 0;
				}
				public Integer RESPUESTA_IDPrecision(){
				    return 0;
				}
				public String RESPUESTA_IDDefault(){
				
					return null;
				
				}
				public String RESPUESTA_IDComment(){
				
				    return "";
				
				}
				public String RESPUESTA_IDPattern(){
				
					return "";
				
				}
				public String RESPUESTA_IDOriginalDbColumnName(){
				
					return "RESPUESTA_ID";
				
				}

				
			    public Integer AFILIADOS_ID;

				public Integer getAFILIADOS_ID () {
					return this.AFILIADOS_ID;
				}

				public Boolean AFILIADOS_IDIsNullable(){
				    return true;
				}
				public Boolean AFILIADOS_IDIsKey(){
				    return false;
				}
				public Integer AFILIADOS_IDLength(){
				    return 0;
				}
				public Integer AFILIADOS_IDPrecision(){
				    return 0;
				}
				public String AFILIADOS_IDDefault(){
				
					return null;
				
				}
				public String AFILIADOS_IDComment(){
				
				    return "";
				
				}
				public String AFILIADOS_IDPattern(){
				
					return "";
				
				}
				public String AFILIADOS_IDOriginalDbColumnName(){
				
					return "AFILIADOS_ID";
				
				}

				
			    public Integer PREGUNTAS_ID;

				public Integer getPREGUNTAS_ID () {
					return this.PREGUNTAS_ID;
				}

				public Boolean PREGUNTAS_IDIsNullable(){
				    return true;
				}
				public Boolean PREGUNTAS_IDIsKey(){
				    return false;
				}
				public Integer PREGUNTAS_IDLength(){
				    return 0;
				}
				public Integer PREGUNTAS_IDPrecision(){
				    return 0;
				}
				public String PREGUNTAS_IDDefault(){
				
					return null;
				
				}
				public String PREGUNTAS_IDComment(){
				
				    return "";
				
				}
				public String PREGUNTAS_IDPattern(){
				
					return "";
				
				}
				public String PREGUNTAS_IDOriginalDbColumnName(){
				
					return "PREGUNTAS_ID";
				
				}

				
			    public String OPCION1;

				public String getOPCION1 () {
					return this.OPCION1;
				}

				public Boolean OPCION1IsNullable(){
				    return true;
				}
				public Boolean OPCION1IsKey(){
				    return false;
				}
				public Integer OPCION1Length(){
				    return 0;
				}
				public Integer OPCION1Precision(){
				    return 0;
				}
				public String OPCION1Default(){
				
					return null;
				
				}
				public String OPCION1Comment(){
				
				    return "";
				
				}
				public String OPCION1Pattern(){
				
					return "";
				
				}
				public String OPCION1OriginalDbColumnName(){
				
					return "OPCION1";
				
				}

				
			    public String OPCION2;

				public String getOPCION2 () {
					return this.OPCION2;
				}

				public Boolean OPCION2IsNullable(){
				    return true;
				}
				public Boolean OPCION2IsKey(){
				    return false;
				}
				public Integer OPCION2Length(){
				    return 0;
				}
				public Integer OPCION2Precision(){
				    return 0;
				}
				public String OPCION2Default(){
				
					return null;
				
				}
				public String OPCION2Comment(){
				
				    return "";
				
				}
				public String OPCION2Pattern(){
				
					return "";
				
				}
				public String OPCION2OriginalDbColumnName(){
				
					return "OPCION2";
				
				}

				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_PRINCIPAL_Consolidado_Salud.length) {
				if(length < 1024 && commonByteArray_AFI_PRINCIPAL_Consolidado_Salud.length == 0) {
   					commonByteArray_AFI_PRINCIPAL_Consolidado_Salud = new byte[1024];
				} else {
   					commonByteArray_AFI_PRINCIPAL_Consolidado_Salud = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_PRINCIPAL_Consolidado_Salud, 0, length);
			strReturn = new String(commonByteArray_AFI_PRINCIPAL_Consolidado_Salud, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_PRINCIPAL_Consolidado_Salud.length) {
				if(length < 1024 && commonByteArray_AFI_PRINCIPAL_Consolidado_Salud.length == 0) {
   					commonByteArray_AFI_PRINCIPAL_Consolidado_Salud = new byte[1024];
				} else {
   					commonByteArray_AFI_PRINCIPAL_Consolidado_Salud = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_PRINCIPAL_Consolidado_Salud, 0, length);
			strReturn = new String(commonByteArray_AFI_PRINCIPAL_Consolidado_Salud, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_PRINCIPAL_Consolidado_Salud) {

        	try {

        		int length = 0;
		
						this.TIPO_PREGUNTA_ID = readInteger(dis);
					
						this.RESPUESTA_ID = readInteger(dis);
					
						this.AFILIADOS_ID = readInteger(dis);
					
						this.PREGUNTAS_ID = readInteger(dis);
					
					this.OPCION1 = readString(dis);
					
					this.OPCION2 = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_PRINCIPAL_Consolidado_Salud) {

        	try {

        		int length = 0;
		
						this.TIPO_PREGUNTA_ID = readInteger(dis);
					
						this.RESPUESTA_ID = readInteger(dis);
					
						this.AFILIADOS_ID = readInteger(dis);
					
						this.PREGUNTAS_ID = readInteger(dis);
					
					this.OPCION1 = readString(dis);
					
					this.OPCION2 = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.TIPO_PREGUNTA_ID,dos);
					
					// Integer
				
						writeInteger(this.RESPUESTA_ID,dos);
					
					// Integer
				
						writeInteger(this.AFILIADOS_ID,dos);
					
					// Integer
				
						writeInteger(this.PREGUNTAS_ID,dos);
					
					// String
				
						writeString(this.OPCION1,dos);
					
					// String
				
						writeString(this.OPCION2,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.TIPO_PREGUNTA_ID,dos);
					
					// Integer
				
						writeInteger(this.RESPUESTA_ID,dos);
					
					// Integer
				
						writeInteger(this.AFILIADOS_ID,dos);
					
					// Integer
				
						writeInteger(this.PREGUNTAS_ID,dos);
					
					// String
				
						writeString(this.OPCION1,dos);
					
					// String
				
						writeString(this.OPCION2,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("TIPO_PREGUNTA_ID="+String.valueOf(TIPO_PREGUNTA_ID));
		sb.append(",RESPUESTA_ID="+String.valueOf(RESPUESTA_ID));
		sb.append(",AFILIADOS_ID="+String.valueOf(AFILIADOS_ID));
		sb.append(",PREGUNTAS_ID="+String.valueOf(PREGUNTAS_ID));
		sb.append(",OPCION1="+OPCION1);
		sb.append(",OPCION2="+OPCION2);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tHashInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tHashInput_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row1Struct row1 = new row1Struct();




	
	/**
	 * [tFlowToIterate_2 begin ] start
	 */

				
			int NB_ITERATE_tJava_1 = 0; //for statistics
			

	
		
		ok_Hash.put("tFlowToIterate_2", false);
		start_Hash.put("tFlowToIterate_2", System.currentTimeMillis());
		
	
	currentComponent="tFlowToIterate_2";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row1");
					}
				
		int tos_count_tFlowToIterate_2 = 0;
		

int nb_line_tFlowToIterate_2 = 0;
int counter_tFlowToIterate_2 = 0;

 



/**
 * [tFlowToIterate_2 begin ] stop
 */



	
	/**
	 * [tHashInput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_1", false);
		start_Hash.put("tHashInput_1", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_1";
	
	
		int tos_count_tHashInput_1 = 0;
		


int nb_line_tHashInput_1 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_1=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row13Struct> tHashFile_tHashInput_1 = mf_tHashInput_1.getAdvancedMemoryHashFile("tHashFile_Consolidado_Salud_" + pid +"_tHashOutput_3");
if(tHashFile_tHashInput_1==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<row13Struct> iterator_tHashInput_1 = tHashFile_tHashInput_1.iterator();
while (iterator_tHashInput_1.hasNext()) {
    row13Struct next_tHashInput_1 = iterator_tHashInput_1.next();

	row1.TIPO_PREGUNTA_ID = next_tHashInput_1.TIPO_PREGUNTA_ID;
	row1.RESPUESTA_ID = next_tHashInput_1.RESPUESTA_ID;
	row1.AFILIADOS_ID = next_tHashInput_1.AFILIADOS_ID;
	row1.PREGUNTAS_ID = next_tHashInput_1.PREGUNTAS_ID;
	row1.OPCION1 = next_tHashInput_1.OPCION1;
	row1.OPCION2 = next_tHashInput_1.OPCION2;

 



/**
 * [tHashInput_1 begin ] stop
 */
	
	/**
	 * [tHashInput_1 main ] start
	 */

	

	
	
	currentComponent="tHashInput_1";
	
	

 


	tos_count_tHashInput_1++;

/**
 * [tHashInput_1 main ] stop
 */
	
	/**
	 * [tHashInput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashInput_1";
	
	

 



/**
 * [tHashInput_1 process_data_begin ] stop
 */

	
	/**
	 * [tFlowToIterate_2 main ] start
	 */

	

	
	
	currentComponent="tFlowToIterate_2";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row1"
						
						);
					}
					


    	            
            globalMap.put("row1.TIPO_PREGUNTA_ID", row1.TIPO_PREGUNTA_ID);
    	            
            globalMap.put("row1.RESPUESTA_ID", row1.RESPUESTA_ID);
    	            
            globalMap.put("row1.AFILIADOS_ID", row1.AFILIADOS_ID);
    	            
            globalMap.put("row1.PREGUNTAS_ID", row1.PREGUNTAS_ID);
    	            
            globalMap.put("row1.OPCION1", row1.OPCION1);
    	            
            globalMap.put("row1.OPCION2", row1.OPCION2);
    	
 
	   nb_line_tFlowToIterate_2++;  
       counter_tFlowToIterate_2++;
       globalMap.put("tFlowToIterate_2_CURRENT_ITERATION", counter_tFlowToIterate_2);
 


	tos_count_tFlowToIterate_2++;

/**
 * [tFlowToIterate_2 main ] stop
 */
	
	/**
	 * [tFlowToIterate_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFlowToIterate_2";
	
	

 



/**
 * [tFlowToIterate_2 process_data_begin ] stop
 */
	NB_ITERATE_tJava_1++;
	
	
					if(execStat){				
	       				runStat.updateStatOnConnection("If18", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("If6", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row17", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row14", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("OnComponentOk10", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row18", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("OnComponentError11", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("If9", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row16", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row22", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row21", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("If7", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("If19", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("OnComponentOk11", 3, 0);
					}           			
				
				if(execStat){
					runStat.updateStatOnConnection("iterate3", 1, "exec" + NB_ITERATE_tJava_1);
					//Thread.sleep(1000);
				}				
			

	
	/**
	 * [tJava_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_1", false);
		start_Hash.put("tJava_1", System.currentTimeMillis());
		
	
	currentComponent="tJava_1";
	
	
		int tos_count_tJava_1 = 0;
		


context.TIPO_PREGUNTA_ID=row1.TIPO_PREGUNTA_ID;
context.RESPUESTA_ID=row1.RESPUESTA_ID;
context.AFILIADOS_ID=row1.AFILIADOS_ID;
context.PREGUNTAS_ID=row1.PREGUNTAS_ID;
context.OPCION1=row1.OPCION1;
context.OPCION2=row1.OPCION2;
 



/**
 * [tJava_1 begin ] stop
 */
	
	/**
	 * [tJava_1 main ] start
	 */

	

	
	
	currentComponent="tJava_1";
	
	

 


	tos_count_tJava_1++;

/**
 * [tJava_1 main ] stop
 */
	
	/**
	 * [tJava_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_1";
	
	

 



/**
 * [tJava_1 process_data_begin ] stop
 */
	
	/**
	 * [tJava_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_1";
	
	

 



/**
 * [tJava_1 process_data_end ] stop
 */
	
	/**
	 * [tJava_1 end ] start
	 */

	

	
	
	currentComponent="tJava_1";
	
	

 

ok_Hash.put("tJava_1", true);
end_Hash.put("tJava_1", System.currentTimeMillis());

   			if (context.TIPO_PREGUNTA_ID != 2 && context.TIPO_PREGUNTA_ID !=  3) {
   				
					if(execStat){
   	 					runStat.updateStatOnConnection("If9", 0, "true");
					}
				tFixedFlowInput_2Process(globalMap);
			}

			   
   				else{
					if(execStat){   
   	 					runStat.updateStatOnConnection("If9", 0, "false");
					}   	 
   				}
   			if (context.TIPO_PREGUNTA_ID == 2) {
   				
					if(execStat){
   	 					runStat.updateStatOnConnection("If6", 0, "true");
					}
				tFixedFlowInput_6Process(globalMap);
			}

			   
   				else{
					if(execStat){   
   	 					runStat.updateStatOnConnection("If6", 0, "false");
					}   	 
   				}
   			if (context.TIPO_PREGUNTA_ID == 3) {
   				
					if(execStat){
   	 					runStat.updateStatOnConnection("If7", 0, "true");
					}
				tFixedFlowInput_5Process(globalMap);
			}

			   
   				else{
					if(execStat){   
   	 					runStat.updateStatOnConnection("If7", 0, "false");
					}   	 
   				}



/**
 * [tJava_1 end ] stop
 */
						if(execStat){
							runStat.updateStatOnConnection("iterate3", 2, "exec" + NB_ITERATE_tJava_1);
						}				
					




	
	/**
	 * [tFlowToIterate_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tFlowToIterate_2";
	
	

 



/**
 * [tFlowToIterate_2 process_data_end ] stop
 */



	
	/**
	 * [tHashInput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashInput_1";
	
	

 



/**
 * [tHashInput_1 process_data_end ] stop
 */
	
	/**
	 * [tHashInput_1 end ] start
	 */

	

	
	
	currentComponent="tHashInput_1";
	
	
    

		
			nb_line_tHashInput_1++;
		}	
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_Consolidado_Salud_" + pid +"_tHashOutput_3");
	


	globalMap.put("tHashInput_1_NB_LINE", nb_line_tHashInput_1);       

 

ok_Hash.put("tHashInput_1", true);
end_Hash.put("tHashInput_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk13", 0, "ok");
				}
				tOracleInput_4Process(globalMap);



/**
 * [tHashInput_1 end ] stop
 */

	
	/**
	 * [tFlowToIterate_2 end ] start
	 */

	

	
	
	currentComponent="tFlowToIterate_2";
	
	

globalMap.put("tFlowToIterate_2_NB_LINE",nb_line_tFlowToIterate_2);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row1");
			  	}
			  	
 

ok_Hash.put("tFlowToIterate_2", true);
end_Hash.put("tFlowToIterate_2", System.currentTimeMillis());




/**
 * [tFlowToIterate_2 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tHashInput_1 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_1";
	
	

 



/**
 * [tHashInput_1 finally ] stop
 */

	
	/**
	 * [tFlowToIterate_2 finally ] start
	 */

	

	
	
	currentComponent="tFlowToIterate_2";
	
	

 



/**
 * [tFlowToIterate_2 finally ] stop
 */

	
	/**
	 * [tJava_1 finally ] start
	 */

	

	
	
	currentComponent="tJava_1";
	
	

 



/**
 * [tJava_1 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tHashInput_1_SUBPROCESS_STATE", 1);
	}
	


public static class row17Struct implements routines.system.IPersistableRow<row17Struct> {
    final static byte[] commonByteArrayLock_AFI_PRINCIPAL_Consolidado_Salud = new byte[0];
    static byte[] commonByteArray_AFI_PRINCIPAL_Consolidado_Salud = new byte[0];

	
			    public Integer TIPO_PREGUNTA_ID;

				public Integer getTIPO_PREGUNTA_ID () {
					return this.TIPO_PREGUNTA_ID;
				}

				public Boolean TIPO_PREGUNTA_IDIsNullable(){
				    return true;
				}
				public Boolean TIPO_PREGUNTA_IDIsKey(){
				    return false;
				}
				public Integer TIPO_PREGUNTA_IDLength(){
				    return 0;
				}
				public Integer TIPO_PREGUNTA_IDPrecision(){
				    return 0;
				}
				public String TIPO_PREGUNTA_IDDefault(){
				
					return null;
				
				}
				public String TIPO_PREGUNTA_IDComment(){
				
				    return "";
				
				}
				public String TIPO_PREGUNTA_IDPattern(){
				
					return "";
				
				}
				public String TIPO_PREGUNTA_IDOriginalDbColumnName(){
				
					return "TIPO_PREGUNTA_ID";
				
				}

				
			    public Integer RESPUESTA_ID;

				public Integer getRESPUESTA_ID () {
					return this.RESPUESTA_ID;
				}

				public Boolean RESPUESTA_IDIsNullable(){
				    return true;
				}
				public Boolean RESPUESTA_IDIsKey(){
				    return false;
				}
				public Integer RESPUESTA_IDLength(){
				    return 0;
				}
				public Integer RESPUESTA_IDPrecision(){
				    return 0;
				}
				public String RESPUESTA_IDDefault(){
				
					return null;
				
				}
				public String RESPUESTA_IDComment(){
				
				    return "";
				
				}
				public String RESPUESTA_IDPattern(){
				
					return "";
				
				}
				public String RESPUESTA_IDOriginalDbColumnName(){
				
					return "RESPUESTA_ID";
				
				}

				
			    public Integer AFILIADOS_ID;

				public Integer getAFILIADOS_ID () {
					return this.AFILIADOS_ID;
				}

				public Boolean AFILIADOS_IDIsNullable(){
				    return true;
				}
				public Boolean AFILIADOS_IDIsKey(){
				    return false;
				}
				public Integer AFILIADOS_IDLength(){
				    return 0;
				}
				public Integer AFILIADOS_IDPrecision(){
				    return 0;
				}
				public String AFILIADOS_IDDefault(){
				
					return null;
				
				}
				public String AFILIADOS_IDComment(){
				
				    return "";
				
				}
				public String AFILIADOS_IDPattern(){
				
					return "";
				
				}
				public String AFILIADOS_IDOriginalDbColumnName(){
				
					return "AFILIADOS_ID";
				
				}

				
			    public Integer PREGUNTAS_ID;

				public Integer getPREGUNTAS_ID () {
					return this.PREGUNTAS_ID;
				}

				public Boolean PREGUNTAS_IDIsNullable(){
				    return true;
				}
				public Boolean PREGUNTAS_IDIsKey(){
				    return false;
				}
				public Integer PREGUNTAS_IDLength(){
				    return 0;
				}
				public Integer PREGUNTAS_IDPrecision(){
				    return 0;
				}
				public String PREGUNTAS_IDDefault(){
				
					return null;
				
				}
				public String PREGUNTAS_IDComment(){
				
				    return "";
				
				}
				public String PREGUNTAS_IDPattern(){
				
					return "";
				
				}
				public String PREGUNTAS_IDOriginalDbColumnName(){
				
					return "PREGUNTAS_ID";
				
				}

				
			    public String OPCION1;

				public String getOPCION1 () {
					return this.OPCION1;
				}

				public Boolean OPCION1IsNullable(){
				    return true;
				}
				public Boolean OPCION1IsKey(){
				    return false;
				}
				public Integer OPCION1Length(){
				    return 0;
				}
				public Integer OPCION1Precision(){
				    return 0;
				}
				public String OPCION1Default(){
				
					return null;
				
				}
				public String OPCION1Comment(){
				
				    return "";
				
				}
				public String OPCION1Pattern(){
				
					return "";
				
				}
				public String OPCION1OriginalDbColumnName(){
				
					return "OPCION1";
				
				}

				
			    public String OPCION2;

				public String getOPCION2 () {
					return this.OPCION2;
				}

				public Boolean OPCION2IsNullable(){
				    return true;
				}
				public Boolean OPCION2IsKey(){
				    return false;
				}
				public Integer OPCION2Length(){
				    return 0;
				}
				public Integer OPCION2Precision(){
				    return 0;
				}
				public String OPCION2Default(){
				
					return null;
				
				}
				public String OPCION2Comment(){
				
				    return "";
				
				}
				public String OPCION2Pattern(){
				
					return "";
				
				}
				public String OPCION2OriginalDbColumnName(){
				
					return "OPCION2";
				
				}

				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_PRINCIPAL_Consolidado_Salud.length) {
				if(length < 1024 && commonByteArray_AFI_PRINCIPAL_Consolidado_Salud.length == 0) {
   					commonByteArray_AFI_PRINCIPAL_Consolidado_Salud = new byte[1024];
				} else {
   					commonByteArray_AFI_PRINCIPAL_Consolidado_Salud = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_PRINCIPAL_Consolidado_Salud, 0, length);
			strReturn = new String(commonByteArray_AFI_PRINCIPAL_Consolidado_Salud, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_PRINCIPAL_Consolidado_Salud.length) {
				if(length < 1024 && commonByteArray_AFI_PRINCIPAL_Consolidado_Salud.length == 0) {
   					commonByteArray_AFI_PRINCIPAL_Consolidado_Salud = new byte[1024];
				} else {
   					commonByteArray_AFI_PRINCIPAL_Consolidado_Salud = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_PRINCIPAL_Consolidado_Salud, 0, length);
			strReturn = new String(commonByteArray_AFI_PRINCIPAL_Consolidado_Salud, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_PRINCIPAL_Consolidado_Salud) {

        	try {

        		int length = 0;
		
						this.TIPO_PREGUNTA_ID = readInteger(dis);
					
						this.RESPUESTA_ID = readInteger(dis);
					
						this.AFILIADOS_ID = readInteger(dis);
					
						this.PREGUNTAS_ID = readInteger(dis);
					
					this.OPCION1 = readString(dis);
					
					this.OPCION2 = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_PRINCIPAL_Consolidado_Salud) {

        	try {

        		int length = 0;
		
						this.TIPO_PREGUNTA_ID = readInteger(dis);
					
						this.RESPUESTA_ID = readInteger(dis);
					
						this.AFILIADOS_ID = readInteger(dis);
					
						this.PREGUNTAS_ID = readInteger(dis);
					
					this.OPCION1 = readString(dis);
					
					this.OPCION2 = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.TIPO_PREGUNTA_ID,dos);
					
					// Integer
				
						writeInteger(this.RESPUESTA_ID,dos);
					
					// Integer
				
						writeInteger(this.AFILIADOS_ID,dos);
					
					// Integer
				
						writeInteger(this.PREGUNTAS_ID,dos);
					
					// String
				
						writeString(this.OPCION1,dos);
					
					// String
				
						writeString(this.OPCION2,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.TIPO_PREGUNTA_ID,dos);
					
					// Integer
				
						writeInteger(this.RESPUESTA_ID,dos);
					
					// Integer
				
						writeInteger(this.AFILIADOS_ID,dos);
					
					// Integer
				
						writeInteger(this.PREGUNTAS_ID,dos);
					
					// String
				
						writeString(this.OPCION1,dos);
					
					// String
				
						writeString(this.OPCION2,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("TIPO_PREGUNTA_ID="+String.valueOf(TIPO_PREGUNTA_ID));
		sb.append(",RESPUESTA_ID="+String.valueOf(RESPUESTA_ID));
		sb.append(",AFILIADOS_ID="+String.valueOf(AFILIADOS_ID));
		sb.append(",PREGUNTAS_ID="+String.valueOf(PREGUNTAS_ID));
		sb.append(",OPCION1="+OPCION1);
		sb.append(",OPCION2="+OPCION2);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row17Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tFixedFlowInput_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFixedFlowInput_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row17Struct row17 = new row17Struct();




	
	/**
	 * [tHashOutput_7 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashOutput_7", false);
		start_Hash.put("tHashOutput_7", System.currentTimeMillis());
		
	
	currentComponent="tHashOutput_7";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row17");
					}
				
		int tos_count_tHashOutput_7 = 0;
		



org.talend.designer.components.hashfile.common.MapHashFile mf_tHashOutput_7=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();    
		org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row17Struct> tHashFile_tHashOutput_7 = null;
		String hashKey_tHashOutput_7 = "tHashFile_Consolidado_Salud_" + pid + "_tHashOutput_7";
			synchronized(org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.get(hashKey_tHashOutput_7)){
			    if(mf_tHashOutput_7.getResourceMap().get(hashKey_tHashOutput_7) == null){
	      		    mf_tHashOutput_7.getResourceMap().put(hashKey_tHashOutput_7, new org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row17Struct>(org.talend.designer.components.hashfile.common.MATCHING_MODE.KEEP_ALL));
	      		    tHashFile_tHashOutput_7 = mf_tHashOutput_7.getResourceMap().get(hashKey_tHashOutput_7);
			    }else{
			    	tHashFile_tHashOutput_7 = mf_tHashOutput_7.getResourceMap().get(hashKey_tHashOutput_7);
			    }
			}
        int nb_line_tHashOutput_7 = 0;

 



/**
 * [tHashOutput_7 begin ] stop
 */



	
	/**
	 * [tFixedFlowInput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tFixedFlowInput_2", false);
		start_Hash.put("tFixedFlowInput_2", System.currentTimeMillis());
		
	
	currentComponent="tFixedFlowInput_2";
	
	
		int tos_count_tFixedFlowInput_2 = 0;
		

	    for (int i_tFixedFlowInput_2 = 0 ; i_tFixedFlowInput_2 < 1 ; i_tFixedFlowInput_2++) {
	                	            	
    	            		row17.TIPO_PREGUNTA_ID = context.TIPO_PREGUNTA_ID;
    	            	        	            	
    	            		row17.RESPUESTA_ID = context.RESPUESTA_ID;
    	            	        	            	
    	            		row17.AFILIADOS_ID = context.AFILIADOS_ID;
    	            	        	            	
    	            		row17.PREGUNTAS_ID = context.PREGUNTAS_ID;
    	            	        	            	
    	            		row17.OPCION1 = context.OPCION1;
    	            	        	            	
    	            		row17.OPCION2 = context.OPCION2;
    	            	

 



/**
 * [tFixedFlowInput_2 begin ] stop
 */
	
	/**
	 * [tFixedFlowInput_2 main ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_2";
	
	

 


	tos_count_tFixedFlowInput_2++;

/**
 * [tFixedFlowInput_2 main ] stop
 */
	
	/**
	 * [tFixedFlowInput_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_2";
	
	

 



/**
 * [tFixedFlowInput_2 process_data_begin ] stop
 */

	
	/**
	 * [tHashOutput_7 main ] start
	 */

	

	
	
	currentComponent="tHashOutput_7";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row17"
						
						);
					}
					



    
		row17Struct oneRow_tHashOutput_7 = new row17Struct();
				
					oneRow_tHashOutput_7.TIPO_PREGUNTA_ID = row17.TIPO_PREGUNTA_ID;
					oneRow_tHashOutput_7.RESPUESTA_ID = row17.RESPUESTA_ID;
					oneRow_tHashOutput_7.AFILIADOS_ID = row17.AFILIADOS_ID;
					oneRow_tHashOutput_7.PREGUNTAS_ID = row17.PREGUNTAS_ID;
					oneRow_tHashOutput_7.OPCION1 = row17.OPCION1;
					oneRow_tHashOutput_7.OPCION2 = row17.OPCION2;
		
        tHashFile_tHashOutput_7.put(oneRow_tHashOutput_7);
        nb_line_tHashOutput_7 ++;

 


	tos_count_tHashOutput_7++;

/**
 * [tHashOutput_7 main ] stop
 */
	
	/**
	 * [tHashOutput_7 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashOutput_7";
	
	

 



/**
 * [tHashOutput_7 process_data_begin ] stop
 */
	
	/**
	 * [tHashOutput_7 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashOutput_7";
	
	

 



/**
 * [tHashOutput_7 process_data_end ] stop
 */



	
	/**
	 * [tFixedFlowInput_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_2";
	
	

 



/**
 * [tFixedFlowInput_2 process_data_end ] stop
 */
	
	/**
	 * [tFixedFlowInput_2 end ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_2";
	
	

        }
        globalMap.put("tFixedFlowInput_2_NB_LINE", 1);        

 

ok_Hash.put("tFixedFlowInput_2", true);
end_Hash.put("tFixedFlowInput_2", System.currentTimeMillis());




/**
 * [tFixedFlowInput_2 end ] stop
 */

	
	/**
	 * [tHashOutput_7 end ] start
	 */

	

	
	
	currentComponent="tHashOutput_7";
	
	
globalMap.put("tHashOutput_7_NB_LINE", nb_line_tHashOutput_7);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row17");
			  	}
			  	
 

ok_Hash.put("tHashOutput_7", true);
end_Hash.put("tHashOutput_7", System.currentTimeMillis());




/**
 * [tHashOutput_7 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFixedFlowInput_2 finally ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_2";
	
	

 



/**
 * [tFixedFlowInput_2 finally ] stop
 */

	
	/**
	 * [tHashOutput_7 finally ] start
	 */

	

	
	
	currentComponent="tHashOutput_7";
	
	

 



/**
 * [tHashOutput_7 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFixedFlowInput_2_SUBPROCESS_STATE", 1);
	}
	


public void tJava_11Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_11_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tJava_11 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_11", false);
		start_Hash.put("tJava_11", System.currentTimeMillis());
		
	
	currentComponent="tJava_11";
	
	
		int tos_count_tJava_11 = 0;
		


System.out.println(context.TIPO_PREGUNTA_ID+"");
System.out.println(context.RESPUESTA_ID+"");
System.out.println(context.AFILIADOS_ID+"");
System.out.println(context.PREGUNTAS_ID+"");
System.out.println(context.OPCION1+"");
System.out.println(context.OPCION2+"");
 



/**
 * [tJava_11 begin ] stop
 */
	
	/**
	 * [tJava_11 main ] start
	 */

	

	
	
	currentComponent="tJava_11";
	
	

 


	tos_count_tJava_11++;

/**
 * [tJava_11 main ] stop
 */
	
	/**
	 * [tJava_11 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_11";
	
	

 



/**
 * [tJava_11 process_data_begin ] stop
 */
	
	/**
	 * [tJava_11 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_11";
	
	

 



/**
 * [tJava_11 process_data_end ] stop
 */
	
	/**
	 * [tJava_11 end ] start
	 */

	

	
	
	currentComponent="tJava_11";
	
	

 

ok_Hash.put("tJava_11", true);
end_Hash.put("tJava_11", System.currentTimeMillis());




/**
 * [tJava_11 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_11 finally ] start
	 */

	

	
	
	currentComponent="tJava_11";
	
	

 



/**
 * [tJava_11 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_11_SUBPROCESS_STATE", 1);
	}
	


public static class row16Struct implements routines.system.IPersistableRow<row16Struct> {
    final static byte[] commonByteArrayLock_AFI_PRINCIPAL_Consolidado_Salud = new byte[0];
    static byte[] commonByteArray_AFI_PRINCIPAL_Consolidado_Salud = new byte[0];

	
			    public Integer TIPO_PREGUNTA_ID;

				public Integer getTIPO_PREGUNTA_ID () {
					return this.TIPO_PREGUNTA_ID;
				}

				public Boolean TIPO_PREGUNTA_IDIsNullable(){
				    return true;
				}
				public Boolean TIPO_PREGUNTA_IDIsKey(){
				    return false;
				}
				public Integer TIPO_PREGUNTA_IDLength(){
				    return 0;
				}
				public Integer TIPO_PREGUNTA_IDPrecision(){
				    return 0;
				}
				public String TIPO_PREGUNTA_IDDefault(){
				
					return null;
				
				}
				public String TIPO_PREGUNTA_IDComment(){
				
				    return "";
				
				}
				public String TIPO_PREGUNTA_IDPattern(){
				
					return "";
				
				}
				public String TIPO_PREGUNTA_IDOriginalDbColumnName(){
				
					return "TIPO_PREGUNTA_ID";
				
				}

				
			    public Integer RESPUESTA_ID;

				public Integer getRESPUESTA_ID () {
					return this.RESPUESTA_ID;
				}

				public Boolean RESPUESTA_IDIsNullable(){
				    return true;
				}
				public Boolean RESPUESTA_IDIsKey(){
				    return false;
				}
				public Integer RESPUESTA_IDLength(){
				    return 0;
				}
				public Integer RESPUESTA_IDPrecision(){
				    return 0;
				}
				public String RESPUESTA_IDDefault(){
				
					return null;
				
				}
				public String RESPUESTA_IDComment(){
				
				    return "";
				
				}
				public String RESPUESTA_IDPattern(){
				
					return "";
				
				}
				public String RESPUESTA_IDOriginalDbColumnName(){
				
					return "RESPUESTA_ID";
				
				}

				
			    public Integer AFILIADOS_ID;

				public Integer getAFILIADOS_ID () {
					return this.AFILIADOS_ID;
				}

				public Boolean AFILIADOS_IDIsNullable(){
				    return true;
				}
				public Boolean AFILIADOS_IDIsKey(){
				    return false;
				}
				public Integer AFILIADOS_IDLength(){
				    return 0;
				}
				public Integer AFILIADOS_IDPrecision(){
				    return 0;
				}
				public String AFILIADOS_IDDefault(){
				
					return null;
				
				}
				public String AFILIADOS_IDComment(){
				
				    return "";
				
				}
				public String AFILIADOS_IDPattern(){
				
					return "";
				
				}
				public String AFILIADOS_IDOriginalDbColumnName(){
				
					return "AFILIADOS_ID";
				
				}

				
			    public Integer PREGUNTAS_ID;

				public Integer getPREGUNTAS_ID () {
					return this.PREGUNTAS_ID;
				}

				public Boolean PREGUNTAS_IDIsNullable(){
				    return true;
				}
				public Boolean PREGUNTAS_IDIsKey(){
				    return false;
				}
				public Integer PREGUNTAS_IDLength(){
				    return 0;
				}
				public Integer PREGUNTAS_IDPrecision(){
				    return 0;
				}
				public String PREGUNTAS_IDDefault(){
				
					return null;
				
				}
				public String PREGUNTAS_IDComment(){
				
				    return "";
				
				}
				public String PREGUNTAS_IDPattern(){
				
					return "";
				
				}
				public String PREGUNTAS_IDOriginalDbColumnName(){
				
					return "PREGUNTAS_ID";
				
				}

				
			    public String OPCION1;

				public String getOPCION1 () {
					return this.OPCION1;
				}

				public Boolean OPCION1IsNullable(){
				    return true;
				}
				public Boolean OPCION1IsKey(){
				    return false;
				}
				public Integer OPCION1Length(){
				    return 0;
				}
				public Integer OPCION1Precision(){
				    return 0;
				}
				public String OPCION1Default(){
				
					return null;
				
				}
				public String OPCION1Comment(){
				
				    return "";
				
				}
				public String OPCION1Pattern(){
				
					return "";
				
				}
				public String OPCION1OriginalDbColumnName(){
				
					return "OPCION1";
				
				}

				
			    public String OPCION2;

				public String getOPCION2 () {
					return this.OPCION2;
				}

				public Boolean OPCION2IsNullable(){
				    return true;
				}
				public Boolean OPCION2IsKey(){
				    return false;
				}
				public Integer OPCION2Length(){
				    return 0;
				}
				public Integer OPCION2Precision(){
				    return 0;
				}
				public String OPCION2Default(){
				
					return null;
				
				}
				public String OPCION2Comment(){
				
				    return "";
				
				}
				public String OPCION2Pattern(){
				
					return "";
				
				}
				public String OPCION2OriginalDbColumnName(){
				
					return "OPCION2";
				
				}

				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_PRINCIPAL_Consolidado_Salud.length) {
				if(length < 1024 && commonByteArray_AFI_PRINCIPAL_Consolidado_Salud.length == 0) {
   					commonByteArray_AFI_PRINCIPAL_Consolidado_Salud = new byte[1024];
				} else {
   					commonByteArray_AFI_PRINCIPAL_Consolidado_Salud = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_PRINCIPAL_Consolidado_Salud, 0, length);
			strReturn = new String(commonByteArray_AFI_PRINCIPAL_Consolidado_Salud, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_PRINCIPAL_Consolidado_Salud.length) {
				if(length < 1024 && commonByteArray_AFI_PRINCIPAL_Consolidado_Salud.length == 0) {
   					commonByteArray_AFI_PRINCIPAL_Consolidado_Salud = new byte[1024];
				} else {
   					commonByteArray_AFI_PRINCIPAL_Consolidado_Salud = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_PRINCIPAL_Consolidado_Salud, 0, length);
			strReturn = new String(commonByteArray_AFI_PRINCIPAL_Consolidado_Salud, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_PRINCIPAL_Consolidado_Salud) {

        	try {

        		int length = 0;
		
						this.TIPO_PREGUNTA_ID = readInteger(dis);
					
						this.RESPUESTA_ID = readInteger(dis);
					
						this.AFILIADOS_ID = readInteger(dis);
					
						this.PREGUNTAS_ID = readInteger(dis);
					
					this.OPCION1 = readString(dis);
					
					this.OPCION2 = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_PRINCIPAL_Consolidado_Salud) {

        	try {

        		int length = 0;
		
						this.TIPO_PREGUNTA_ID = readInteger(dis);
					
						this.RESPUESTA_ID = readInteger(dis);
					
						this.AFILIADOS_ID = readInteger(dis);
					
						this.PREGUNTAS_ID = readInteger(dis);
					
					this.OPCION1 = readString(dis);
					
					this.OPCION2 = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.TIPO_PREGUNTA_ID,dos);
					
					// Integer
				
						writeInteger(this.RESPUESTA_ID,dos);
					
					// Integer
				
						writeInteger(this.AFILIADOS_ID,dos);
					
					// Integer
				
						writeInteger(this.PREGUNTAS_ID,dos);
					
					// String
				
						writeString(this.OPCION1,dos);
					
					// String
				
						writeString(this.OPCION2,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.TIPO_PREGUNTA_ID,dos);
					
					// Integer
				
						writeInteger(this.RESPUESTA_ID,dos);
					
					// Integer
				
						writeInteger(this.AFILIADOS_ID,dos);
					
					// Integer
				
						writeInteger(this.PREGUNTAS_ID,dos);
					
					// String
				
						writeString(this.OPCION1,dos);
					
					// String
				
						writeString(this.OPCION2,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("TIPO_PREGUNTA_ID="+String.valueOf(TIPO_PREGUNTA_ID));
		sb.append(",RESPUESTA_ID="+String.valueOf(RESPUESTA_ID));
		sb.append(",AFILIADOS_ID="+String.valueOf(AFILIADOS_ID));
		sb.append(",PREGUNTAS_ID="+String.valueOf(PREGUNTAS_ID));
		sb.append(",OPCION1="+OPCION1);
		sb.append(",OPCION2="+OPCION2);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row16Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tFixedFlowInput_6Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFixedFlowInput_6_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row16Struct row16 = new row16Struct();




	
	/**
	 * [tJavaRow_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaRow_5", false);
		start_Hash.put("tJavaRow_5", System.currentTimeMillis());
		
	
	currentComponent="tJavaRow_5";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row16");
					}
				
		int tos_count_tJavaRow_5 = 0;
		

int nb_line_tJavaRow_5 = 0;

 



/**
 * [tJavaRow_5 begin ] stop
 */



	
	/**
	 * [tFixedFlowInput_6 begin ] start
	 */

	

	
		
		ok_Hash.put("tFixedFlowInput_6", false);
		start_Hash.put("tFixedFlowInput_6", System.currentTimeMillis());
		
	
	currentComponent="tFixedFlowInput_6";
	
	
		int tos_count_tFixedFlowInput_6 = 0;
		

	    for (int i_tFixedFlowInput_6 = 0 ; i_tFixedFlowInput_6 < 1 ; i_tFixedFlowInput_6++) {
	                	            	
    	            		row16.TIPO_PREGUNTA_ID = context.TIPO_PREGUNTA_ID;
    	            	        	            	
    	            		row16.RESPUESTA_ID = context.RESPUESTA_ID;
    	            	        	            	
    	            		row16.AFILIADOS_ID = context.AFILIADOS_ID;
    	            	        	            	
    	            		row16.PREGUNTAS_ID = context.PREGUNTAS_ID;
    	            	        	            	
    	            		row16.OPCION1 = context.OPCION1;
    	            	        	            	
    	            		row16.OPCION2 = context.OPCION2;
    	            	

 



/**
 * [tFixedFlowInput_6 begin ] stop
 */
	
	/**
	 * [tFixedFlowInput_6 main ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_6";
	
	

 


	tos_count_tFixedFlowInput_6++;

/**
 * [tFixedFlowInput_6 main ] stop
 */
	
	/**
	 * [tFixedFlowInput_6 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_6";
	
	

 



/**
 * [tFixedFlowInput_6 process_data_begin ] stop
 */

	
	/**
	 * [tJavaRow_5 main ] start
	 */

	

	
	
	currentComponent="tJavaRow_5";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row16"
						
						);
					}
					

    //Code generate according to input schema and output schema
context.OPCION2 = row16.OPCION2;
    nb_line_tJavaRow_5++;   

 


	tos_count_tJavaRow_5++;

/**
 * [tJavaRow_5 main ] stop
 */
	
	/**
	 * [tJavaRow_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJavaRow_5";
	
	

 



/**
 * [tJavaRow_5 process_data_begin ] stop
 */
	
	/**
	 * [tJavaRow_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tJavaRow_5";
	
	

 



/**
 * [tJavaRow_5 process_data_end ] stop
 */



	
	/**
	 * [tFixedFlowInput_6 process_data_end ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_6";
	
	

 



/**
 * [tFixedFlowInput_6 process_data_end ] stop
 */
	
	/**
	 * [tFixedFlowInput_6 end ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_6";
	
	

        }
        globalMap.put("tFixedFlowInput_6_NB_LINE", 1);        

 

ok_Hash.put("tFixedFlowInput_6", true);
end_Hash.put("tFixedFlowInput_6", System.currentTimeMillis());




/**
 * [tFixedFlowInput_6 end ] stop
 */

	
	/**
	 * [tJavaRow_5 end ] start
	 */

	

	
	
	currentComponent="tJavaRow_5";
	
	

globalMap.put("tJavaRow_5_NB_LINE",nb_line_tJavaRow_5);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row16");
			  	}
			  	
 

ok_Hash.put("tJavaRow_5", true);
end_Hash.put("tJavaRow_5", System.currentTimeMillis());

   			if (!(StringHandling.LEN(context.OPCION2)>0)) {
   				
					if(execStat){
   	 					runStat.updateStatOnConnection("If19", 0, "true");
					}
				tFixedFlowInput_2Process(globalMap);
			}

			   
   				else{
					if(execStat){   
   	 					runStat.updateStatOnConnection("If19", 0, "false");
					}   	 
   				}
   			if (StringHandling.LEN(context.OPCION2)>0) {
   				
					if(execStat){
   	 					runStat.updateStatOnConnection("If18", 0, "true");
					}
				tOracleInput_7Process(globalMap);
			}

			   
   				else{
					if(execStat){   
   	 					runStat.updateStatOnConnection("If18", 0, "false");
					}   	 
   				}



/**
 * [tJavaRow_5 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFixedFlowInput_6 finally ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_6";
	
	

 



/**
 * [tFixedFlowInput_6 finally ] stop
 */

	
	/**
	 * [tJavaRow_5 finally ] start
	 */

	

	
	
	currentComponent="tJavaRow_5";
	
	

 



/**
 * [tJavaRow_5 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFixedFlowInput_6_SUBPROCESS_STATE", 1);
	}
	


public static class row14Struct implements routines.system.IPersistableRow<row14Struct> {
    final static byte[] commonByteArrayLock_AFI_PRINCIPAL_Consolidado_Salud = new byte[0];
    static byte[] commonByteArray_AFI_PRINCIPAL_Consolidado_Salud = new byte[0];

	
			    public String VrPredeterminado;

				public String getVrPredeterminado () {
					return this.VrPredeterminado;
				}

				public Boolean VrPredeterminadoIsNullable(){
				    return true;
				}
				public Boolean VrPredeterminadoIsKey(){
				    return false;
				}
				public Integer VrPredeterminadoLength(){
				    return 0;
				}
				public Integer VrPredeterminadoPrecision(){
				    return 0;
				}
				public String VrPredeterminadoDefault(){
				
					return null;
				
				}
				public String VrPredeterminadoComment(){
				
				    return "";
				
				}
				public String VrPredeterminadoPattern(){
				
					return "";
				
				}
				public String VrPredeterminadoOriginalDbColumnName(){
				
					return "VrPredeterminado";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_PRINCIPAL_Consolidado_Salud.length) {
				if(length < 1024 && commonByteArray_AFI_PRINCIPAL_Consolidado_Salud.length == 0) {
   					commonByteArray_AFI_PRINCIPAL_Consolidado_Salud = new byte[1024];
				} else {
   					commonByteArray_AFI_PRINCIPAL_Consolidado_Salud = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_PRINCIPAL_Consolidado_Salud, 0, length);
			strReturn = new String(commonByteArray_AFI_PRINCIPAL_Consolidado_Salud, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_PRINCIPAL_Consolidado_Salud.length) {
				if(length < 1024 && commonByteArray_AFI_PRINCIPAL_Consolidado_Salud.length == 0) {
   					commonByteArray_AFI_PRINCIPAL_Consolidado_Salud = new byte[1024];
				} else {
   					commonByteArray_AFI_PRINCIPAL_Consolidado_Salud = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_PRINCIPAL_Consolidado_Salud, 0, length);
			strReturn = new String(commonByteArray_AFI_PRINCIPAL_Consolidado_Salud, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_PRINCIPAL_Consolidado_Salud) {

        	try {

        		int length = 0;
		
					this.VrPredeterminado = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_PRINCIPAL_Consolidado_Salud) {

        	try {

        		int length = 0;
		
					this.VrPredeterminado = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.VrPredeterminado,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.VrPredeterminado,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("VrPredeterminado="+VrPredeterminado);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row14Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_7Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_7_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row14Struct row14 = new row14Struct();




	
	/**
	 * [tJavaRow_6 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaRow_6", false);
		start_Hash.put("tJavaRow_6", System.currentTimeMillis());
		
	
	currentComponent="tJavaRow_6";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row14");
					}
				
		int tos_count_tJavaRow_6 = 0;
		

int nb_line_tJavaRow_6 = 0;

 



/**
 * [tJavaRow_6 begin ] stop
 */



	
	/**
	 * [tOracleInput_7 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_7", false);
		start_Hash.put("tOracleInput_7", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_7";
	
	
		int tos_count_tOracleInput_7 = 0;
		
	


	
		    int nb_line_tOracleInput_7 = 0;
		    java.sql.Connection conn_tOracleInput_7 = null;
				conn_tOracleInput_7 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");
				
                boolean isTimeZoneNull_tOracleInput_7 = false;
				boolean isConnectionWrapped_tOracleInput_7 = !(conn_tOracleInput_7 instanceof oracle.jdbc.OracleConnection) && conn_tOracleInput_7.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tOracleInput_7 = null;
                if (isConnectionWrapped_tOracleInput_7) {
					unwrappedOraConn_tOracleInput_7 = conn_tOracleInput_7.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tOracleInput_7 != null) {
                        isTimeZoneNull_tOracleInput_7 = (unwrappedOraConn_tOracleInput_7.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tOracleInput_7 = (((oracle.jdbc.OracleConnection)conn_tOracleInput_7).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tOracleInput_7) {
					java.sql.Statement stmtGetTZ_tOracleInput_7 = conn_tOracleInput_7.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_7 = stmtGetTZ_tOracleInput_7.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_7 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tOracleInput_7.next()) {
						sessionTimezone_tOracleInput_7 = rsGetTZ_tOracleInput_7.getString(1);
					}
					if (isConnectionWrapped_tOracleInput_7 && unwrappedOraConn_tOracleInput_7 != null) {
                        unwrappedOraConn_tOracleInput_7.setSessionTimeZone(sessionTimezone_tOracleInput_7);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_7).setSessionTimeZone(sessionTimezone_tOracleInput_7);
                    }
				}
			
		    
			java.sql.Statement stmt_tOracleInput_7 = conn_tOracleInput_7.createStatement();

		    String dbquery_tOracleInput_7 = "SELECT SALUDSIS.GEN_TRESPUESTAS.VPREDETERMINADO \nFROM SALUDSIS.GEN_TRESPUESTAS\nWHERE SALUDSIS.GEN_TRESPUESTAS.ID = " +Integer.parseInt(context.OPCION2);
		    

		    globalMap.put("tOracleInput_7_QUERY",dbquery_tOracleInput_7);

		    java.sql.ResultSet rs_tOracleInput_7 = null;

		    try {
		    	rs_tOracleInput_7 = stmt_tOracleInput_7.executeQuery(dbquery_tOracleInput_7);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_7 = rs_tOracleInput_7.getMetaData();
		    	int colQtyInRs_tOracleInput_7 = rsmd_tOracleInput_7.getColumnCount();

		    String tmpContent_tOracleInput_7 = null;
		    
		    
		    while (rs_tOracleInput_7.next()) {
		        nb_line_tOracleInput_7++;
		        
							if(colQtyInRs_tOracleInput_7 < 1) {
								row14.VrPredeterminado = null;
							} else {
	                         		
        	row14.VrPredeterminado = routines.system.JDBCUtil.getString(rs_tOracleInput_7, 1, false);
		                    }
					




 



/**
 * [tOracleInput_7 begin ] stop
 */
	
	/**
	 * [tOracleInput_7 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_7";
	
	

 


	tos_count_tOracleInput_7++;

/**
 * [tOracleInput_7 main ] stop
 */
	
	/**
	 * [tOracleInput_7 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_7";
	
	

 



/**
 * [tOracleInput_7 process_data_begin ] stop
 */

	
	/**
	 * [tJavaRow_6 main ] start
	 */

	

	
	
	currentComponent="tJavaRow_6";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row14"
						
						);
					}
					

    //Code generate according to input schema and output schema
context.OPCION2 = row14.VrPredeterminado;
    nb_line_tJavaRow_6++;   

 


	tos_count_tJavaRow_6++;

/**
 * [tJavaRow_6 main ] stop
 */
	
	/**
	 * [tJavaRow_6 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJavaRow_6";
	
	

 



/**
 * [tJavaRow_6 process_data_begin ] stop
 */
	
	/**
	 * [tJavaRow_6 process_data_end ] start
	 */

	

	
	
	currentComponent="tJavaRow_6";
	
	

 



/**
 * [tJavaRow_6 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_7 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_7";
	
	

 



/**
 * [tOracleInput_7 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_7 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_7";
	
	

}
}finally{
	if (rs_tOracleInput_7 != null) {
		rs_tOracleInput_7.close();
	}
	if (stmt_tOracleInput_7 != null) {
		stmt_tOracleInput_7.close();
	}
}

globalMap.put("tOracleInput_7_NB_LINE",nb_line_tOracleInput_7);
 

ok_Hash.put("tOracleInput_7", true);
end_Hash.put("tOracleInput_7", System.currentTimeMillis());




/**
 * [tOracleInput_7 end ] stop
 */

	
	/**
	 * [tJavaRow_6 end ] start
	 */

	

	
	
	currentComponent="tJavaRow_6";
	
	

globalMap.put("tJavaRow_6_NB_LINE",nb_line_tJavaRow_6);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row14");
			  	}
			  	
 

ok_Hash.put("tJavaRow_6", true);
end_Hash.put("tJavaRow_6", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk10", 0, "ok");
				}
				tFixedFlowInput_2Process(globalMap);



/**
 * [tJavaRow_6 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleInput_7 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_7";
	
	

 



/**
 * [tOracleInput_7 finally ] stop
 */

	
	/**
	 * [tJavaRow_6 finally ] start
	 */

	

	
	
	currentComponent="tJavaRow_6";
	
	

 



/**
 * [tJavaRow_6 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_7_SUBPROCESS_STATE", 1);
	}
	


public static class row22Struct implements routines.system.IPersistableRow<row22Struct> {
    final static byte[] commonByteArrayLock_AFI_PRINCIPAL_Consolidado_Salud = new byte[0];
    static byte[] commonByteArray_AFI_PRINCIPAL_Consolidado_Salud = new byte[0];

	
			    public Integer afiliadosid_;

				public Integer getAfiliadosid_ () {
					return this.afiliadosid_;
				}

				public Boolean afiliadosid_IsNullable(){
				    return true;
				}
				public Boolean afiliadosid_IsKey(){
				    return false;
				}
				public Integer afiliadosid_Length(){
				    return 0;
				}
				public Integer afiliadosid_Precision(){
				    return 0;
				}
				public String afiliadosid_Default(){
				
					return null;
				
				}
				public String afiliadosid_Comment(){
				
				    return "";
				
				}
				public String afiliadosid_Pattern(){
				
					return "";
				
				}
				public String afiliadosid_OriginalDbColumnName(){
				
					return "afiliadosid_";
				
				}

				
			    public Integer idpregunta_;

				public Integer getIdpregunta_ () {
					return this.idpregunta_;
				}

				public Boolean idpregunta_IsNullable(){
				    return true;
				}
				public Boolean idpregunta_IsKey(){
				    return false;
				}
				public Integer idpregunta_Length(){
				    return 0;
				}
				public Integer idpregunta_Precision(){
				    return 0;
				}
				public String idpregunta_Default(){
				
					return null;
				
				}
				public String idpregunta_Comment(){
				
				    return "";
				
				}
				public String idpregunta_Pattern(){
				
					return "";
				
				}
				public String idpregunta_OriginalDbColumnName(){
				
					return "idpregunta_";
				
				}

				
			    public String result;

				public String getResult () {
					return this.result;
				}

				public Boolean resultIsNullable(){
				    return true;
				}
				public Boolean resultIsKey(){
				    return false;
				}
				public Integer resultLength(){
				    return 0;
				}
				public Integer resultPrecision(){
				    return 0;
				}
				public String resultDefault(){
				
					return null;
				
				}
				public String resultComment(){
				
				    return "";
				
				}
				public String resultPattern(){
				
					return "";
				
				}
				public String resultOriginalDbColumnName(){
				
					return "result";
				
				}

				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_PRINCIPAL_Consolidado_Salud.length) {
				if(length < 1024 && commonByteArray_AFI_PRINCIPAL_Consolidado_Salud.length == 0) {
   					commonByteArray_AFI_PRINCIPAL_Consolidado_Salud = new byte[1024];
				} else {
   					commonByteArray_AFI_PRINCIPAL_Consolidado_Salud = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_PRINCIPAL_Consolidado_Salud, 0, length);
			strReturn = new String(commonByteArray_AFI_PRINCIPAL_Consolidado_Salud, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_PRINCIPAL_Consolidado_Salud.length) {
				if(length < 1024 && commonByteArray_AFI_PRINCIPAL_Consolidado_Salud.length == 0) {
   					commonByteArray_AFI_PRINCIPAL_Consolidado_Salud = new byte[1024];
				} else {
   					commonByteArray_AFI_PRINCIPAL_Consolidado_Salud = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_PRINCIPAL_Consolidado_Salud, 0, length);
			strReturn = new String(commonByteArray_AFI_PRINCIPAL_Consolidado_Salud, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_PRINCIPAL_Consolidado_Salud) {

        	try {

        		int length = 0;
		
						this.afiliadosid_ = readInteger(dis);
					
						this.idpregunta_ = readInteger(dis);
					
					this.result = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_PRINCIPAL_Consolidado_Salud) {

        	try {

        		int length = 0;
		
						this.afiliadosid_ = readInteger(dis);
					
						this.idpregunta_ = readInteger(dis);
					
					this.result = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.afiliadosid_,dos);
					
					// Integer
				
						writeInteger(this.idpregunta_,dos);
					
					// String
				
						writeString(this.result,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.afiliadosid_,dos);
					
					// Integer
				
						writeInteger(this.idpregunta_,dos);
					
					// String
				
						writeString(this.result,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("afiliadosid_="+String.valueOf(afiliadosid_));
		sb.append(",idpregunta_="+String.valueOf(idpregunta_));
		sb.append(",result="+result);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row22Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row21Struct implements routines.system.IPersistableRow<row21Struct> {
    final static byte[] commonByteArrayLock_AFI_PRINCIPAL_Consolidado_Salud = new byte[0];
    static byte[] commonByteArray_AFI_PRINCIPAL_Consolidado_Salud = new byte[0];

	
			    public Integer afiliadosid_;

				public Integer getAfiliadosid_ () {
					return this.afiliadosid_;
				}

				public Boolean afiliadosid_IsNullable(){
				    return true;
				}
				public Boolean afiliadosid_IsKey(){
				    return false;
				}
				public Integer afiliadosid_Length(){
				    return 0;
				}
				public Integer afiliadosid_Precision(){
				    return 0;
				}
				public String afiliadosid_Default(){
				
					return null;
				
				}
				public String afiliadosid_Comment(){
				
				    return "";
				
				}
				public String afiliadosid_Pattern(){
				
					return "";
				
				}
				public String afiliadosid_OriginalDbColumnName(){
				
					return "afiliadosid_";
				
				}

				
			    public Integer idpregunta_;

				public Integer getIdpregunta_ () {
					return this.idpregunta_;
				}

				public Boolean idpregunta_IsNullable(){
				    return true;
				}
				public Boolean idpregunta_IsKey(){
				    return false;
				}
				public Integer idpregunta_Length(){
				    return 0;
				}
				public Integer idpregunta_Precision(){
				    return 0;
				}
				public String idpregunta_Default(){
				
					return null;
				
				}
				public String idpregunta_Comment(){
				
				    return "";
				
				}
				public String idpregunta_Pattern(){
				
					return "";
				
				}
				public String idpregunta_OriginalDbColumnName(){
				
					return "idpregunta_";
				
				}

				
			    public String result;

				public String getResult () {
					return this.result;
				}

				public Boolean resultIsNullable(){
				    return true;
				}
				public Boolean resultIsKey(){
				    return false;
				}
				public Integer resultLength(){
				    return 0;
				}
				public Integer resultPrecision(){
				    return 0;
				}
				public String resultDefault(){
				
					return null;
				
				}
				public String resultComment(){
				
				    return "";
				
				}
				public String resultPattern(){
				
					return "";
				
				}
				public String resultOriginalDbColumnName(){
				
					return "result";
				
				}

				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_PRINCIPAL_Consolidado_Salud.length) {
				if(length < 1024 && commonByteArray_AFI_PRINCIPAL_Consolidado_Salud.length == 0) {
   					commonByteArray_AFI_PRINCIPAL_Consolidado_Salud = new byte[1024];
				} else {
   					commonByteArray_AFI_PRINCIPAL_Consolidado_Salud = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_PRINCIPAL_Consolidado_Salud, 0, length);
			strReturn = new String(commonByteArray_AFI_PRINCIPAL_Consolidado_Salud, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_PRINCIPAL_Consolidado_Salud.length) {
				if(length < 1024 && commonByteArray_AFI_PRINCIPAL_Consolidado_Salud.length == 0) {
   					commonByteArray_AFI_PRINCIPAL_Consolidado_Salud = new byte[1024];
				} else {
   					commonByteArray_AFI_PRINCIPAL_Consolidado_Salud = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_PRINCIPAL_Consolidado_Salud, 0, length);
			strReturn = new String(commonByteArray_AFI_PRINCIPAL_Consolidado_Salud, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_PRINCIPAL_Consolidado_Salud) {

        	try {

        		int length = 0;
		
						this.afiliadosid_ = readInteger(dis);
					
						this.idpregunta_ = readInteger(dis);
					
					this.result = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_PRINCIPAL_Consolidado_Salud) {

        	try {

        		int length = 0;
		
						this.afiliadosid_ = readInteger(dis);
					
						this.idpregunta_ = readInteger(dis);
					
					this.result = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.afiliadosid_,dos);
					
					// Integer
				
						writeInteger(this.idpregunta_,dos);
					
					// String
				
						writeString(this.result,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.afiliadosid_,dos);
					
					// Integer
				
						writeInteger(this.idpregunta_,dos);
					
					// String
				
						writeString(this.result,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("afiliadosid_="+String.valueOf(afiliadosid_));
		sb.append(",idpregunta_="+String.valueOf(idpregunta_));
		sb.append(",result="+result);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row21Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row18Struct implements routines.system.IPersistableRow<row18Struct> {
    final static byte[] commonByteArrayLock_AFI_PRINCIPAL_Consolidado_Salud = new byte[0];
    static byte[] commonByteArray_AFI_PRINCIPAL_Consolidado_Salud = new byte[0];

	
			    public Integer TIPO_PREGUNTA_ID;

				public Integer getTIPO_PREGUNTA_ID () {
					return this.TIPO_PREGUNTA_ID;
				}

				public Boolean TIPO_PREGUNTA_IDIsNullable(){
				    return true;
				}
				public Boolean TIPO_PREGUNTA_IDIsKey(){
				    return false;
				}
				public Integer TIPO_PREGUNTA_IDLength(){
				    return 0;
				}
				public Integer TIPO_PREGUNTA_IDPrecision(){
				    return 0;
				}
				public String TIPO_PREGUNTA_IDDefault(){
				
					return null;
				
				}
				public String TIPO_PREGUNTA_IDComment(){
				
				    return "";
				
				}
				public String TIPO_PREGUNTA_IDPattern(){
				
					return "";
				
				}
				public String TIPO_PREGUNTA_IDOriginalDbColumnName(){
				
					return "TIPO_PREGUNTA_ID";
				
				}

				
			    public Integer RESPUESTA_ID;

				public Integer getRESPUESTA_ID () {
					return this.RESPUESTA_ID;
				}

				public Boolean RESPUESTA_IDIsNullable(){
				    return true;
				}
				public Boolean RESPUESTA_IDIsKey(){
				    return false;
				}
				public Integer RESPUESTA_IDLength(){
				    return 0;
				}
				public Integer RESPUESTA_IDPrecision(){
				    return 0;
				}
				public String RESPUESTA_IDDefault(){
				
					return null;
				
				}
				public String RESPUESTA_IDComment(){
				
				    return "";
				
				}
				public String RESPUESTA_IDPattern(){
				
					return "";
				
				}
				public String RESPUESTA_IDOriginalDbColumnName(){
				
					return "RESPUESTA_ID";
				
				}

				
			    public Integer AFILIADOS_ID;

				public Integer getAFILIADOS_ID () {
					return this.AFILIADOS_ID;
				}

				public Boolean AFILIADOS_IDIsNullable(){
				    return true;
				}
				public Boolean AFILIADOS_IDIsKey(){
				    return false;
				}
				public Integer AFILIADOS_IDLength(){
				    return 0;
				}
				public Integer AFILIADOS_IDPrecision(){
				    return 0;
				}
				public String AFILIADOS_IDDefault(){
				
					return null;
				
				}
				public String AFILIADOS_IDComment(){
				
				    return "";
				
				}
				public String AFILIADOS_IDPattern(){
				
					return "";
				
				}
				public String AFILIADOS_IDOriginalDbColumnName(){
				
					return "AFILIADOS_ID";
				
				}

				
			    public Integer PREGUNTAS_ID;

				public Integer getPREGUNTAS_ID () {
					return this.PREGUNTAS_ID;
				}

				public Boolean PREGUNTAS_IDIsNullable(){
				    return true;
				}
				public Boolean PREGUNTAS_IDIsKey(){
				    return false;
				}
				public Integer PREGUNTAS_IDLength(){
				    return 0;
				}
				public Integer PREGUNTAS_IDPrecision(){
				    return 0;
				}
				public String PREGUNTAS_IDDefault(){
				
					return null;
				
				}
				public String PREGUNTAS_IDComment(){
				
				    return "";
				
				}
				public String PREGUNTAS_IDPattern(){
				
					return "";
				
				}
				public String PREGUNTAS_IDOriginalDbColumnName(){
				
					return "PREGUNTAS_ID";
				
				}

				
			    public String OPCION1;

				public String getOPCION1 () {
					return this.OPCION1;
				}

				public Boolean OPCION1IsNullable(){
				    return true;
				}
				public Boolean OPCION1IsKey(){
				    return false;
				}
				public Integer OPCION1Length(){
				    return 0;
				}
				public Integer OPCION1Precision(){
				    return 0;
				}
				public String OPCION1Default(){
				
					return null;
				
				}
				public String OPCION1Comment(){
				
				    return "";
				
				}
				public String OPCION1Pattern(){
				
					return "";
				
				}
				public String OPCION1OriginalDbColumnName(){
				
					return "OPCION1";
				
				}

				
			    public String OPCION2;

				public String getOPCION2 () {
					return this.OPCION2;
				}

				public Boolean OPCION2IsNullable(){
				    return true;
				}
				public Boolean OPCION2IsKey(){
				    return false;
				}
				public Integer OPCION2Length(){
				    return 0;
				}
				public Integer OPCION2Precision(){
				    return 0;
				}
				public String OPCION2Default(){
				
					return null;
				
				}
				public String OPCION2Comment(){
				
				    return "";
				
				}
				public String OPCION2Pattern(){
				
					return "";
				
				}
				public String OPCION2OriginalDbColumnName(){
				
					return "OPCION2";
				
				}

				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_PRINCIPAL_Consolidado_Salud.length) {
				if(length < 1024 && commonByteArray_AFI_PRINCIPAL_Consolidado_Salud.length == 0) {
   					commonByteArray_AFI_PRINCIPAL_Consolidado_Salud = new byte[1024];
				} else {
   					commonByteArray_AFI_PRINCIPAL_Consolidado_Salud = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_PRINCIPAL_Consolidado_Salud, 0, length);
			strReturn = new String(commonByteArray_AFI_PRINCIPAL_Consolidado_Salud, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_PRINCIPAL_Consolidado_Salud.length) {
				if(length < 1024 && commonByteArray_AFI_PRINCIPAL_Consolidado_Salud.length == 0) {
   					commonByteArray_AFI_PRINCIPAL_Consolidado_Salud = new byte[1024];
				} else {
   					commonByteArray_AFI_PRINCIPAL_Consolidado_Salud = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_PRINCIPAL_Consolidado_Salud, 0, length);
			strReturn = new String(commonByteArray_AFI_PRINCIPAL_Consolidado_Salud, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_PRINCIPAL_Consolidado_Salud) {

        	try {

        		int length = 0;
		
						this.TIPO_PREGUNTA_ID = readInteger(dis);
					
						this.RESPUESTA_ID = readInteger(dis);
					
						this.AFILIADOS_ID = readInteger(dis);
					
						this.PREGUNTAS_ID = readInteger(dis);
					
					this.OPCION1 = readString(dis);
					
					this.OPCION2 = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_PRINCIPAL_Consolidado_Salud) {

        	try {

        		int length = 0;
		
						this.TIPO_PREGUNTA_ID = readInteger(dis);
					
						this.RESPUESTA_ID = readInteger(dis);
					
						this.AFILIADOS_ID = readInteger(dis);
					
						this.PREGUNTAS_ID = readInteger(dis);
					
					this.OPCION1 = readString(dis);
					
					this.OPCION2 = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.TIPO_PREGUNTA_ID,dos);
					
					// Integer
				
						writeInteger(this.RESPUESTA_ID,dos);
					
					// Integer
				
						writeInteger(this.AFILIADOS_ID,dos);
					
					// Integer
				
						writeInteger(this.PREGUNTAS_ID,dos);
					
					// String
				
						writeString(this.OPCION1,dos);
					
					// String
				
						writeString(this.OPCION2,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.TIPO_PREGUNTA_ID,dos);
					
					// Integer
				
						writeInteger(this.RESPUESTA_ID,dos);
					
					// Integer
				
						writeInteger(this.AFILIADOS_ID,dos);
					
					// Integer
				
						writeInteger(this.PREGUNTAS_ID,dos);
					
					// String
				
						writeString(this.OPCION1,dos);
					
					// String
				
						writeString(this.OPCION2,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("TIPO_PREGUNTA_ID="+String.valueOf(TIPO_PREGUNTA_ID));
		sb.append(",RESPUESTA_ID="+String.valueOf(RESPUESTA_ID));
		sb.append(",AFILIADOS_ID="+String.valueOf(AFILIADOS_ID));
		sb.append(",PREGUNTAS_ID="+String.valueOf(PREGUNTAS_ID));
		sb.append(",OPCION1="+OPCION1);
		sb.append(",OPCION2="+OPCION2);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row18Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tFixedFlowInput_5Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFixedFlowInput_5_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row18Struct row18 = new row18Struct();
row21Struct row21 = new row21Struct();
row22Struct row22 = new row22Struct();






	
	/**
	 * [tJavaRow_8 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaRow_8", false);
		start_Hash.put("tJavaRow_8", System.currentTimeMillis());
		
	
	currentComponent="tJavaRow_8";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row22");
					}
				
		int tos_count_tJavaRow_8 = 0;
		

int nb_line_tJavaRow_8 = 0;

 



/**
 * [tJavaRow_8 begin ] stop
 */



	
	/**
	 * [tOracleSP_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleSP_2", false);
		start_Hash.put("tOracleSP_2", System.currentTimeMillis());
		
	
	currentComponent="tOracleSP_2";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row21");
					}
				
		int tos_count_tOracleSP_2 = 0;
		

	java.sql.Connection connection_tOracleSP_2 = null;
	connection_tOracleSP_2 = (java.sql.Connection) globalMap.get("conn_tOracleConnection_1");
	

java.sql.CallableStatement statement_tOracleSP_2 = connection_tOracleSP_2.prepareCall("{? = call " + "AFI.GetValoresRespuesta2" + "(?,?)}");

java.sql.Timestamp tmpDate_tOracleSP_2;
String tmpString_tOracleSP_2;

 



/**
 * [tOracleSP_2 begin ] stop
 */



	
	/**
	 * [tJavaRow_7 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaRow_7", false);
		start_Hash.put("tJavaRow_7", System.currentTimeMillis());
		
	
	currentComponent="tJavaRow_7";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row18");
					}
				
		int tos_count_tJavaRow_7 = 0;
		

int nb_line_tJavaRow_7 = 0;

 



/**
 * [tJavaRow_7 begin ] stop
 */



	
	/**
	 * [tFixedFlowInput_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tFixedFlowInput_5", false);
		start_Hash.put("tFixedFlowInput_5", System.currentTimeMillis());
		
	
	currentComponent="tFixedFlowInput_5";
	
	
		int tos_count_tFixedFlowInput_5 = 0;
		

	    for (int i_tFixedFlowInput_5 = 0 ; i_tFixedFlowInput_5 < 1 ; i_tFixedFlowInput_5++) {
	                	            	
    	            		row18.TIPO_PREGUNTA_ID = context.TIPO_PREGUNTA_ID;
    	            	        	            	
    	            		row18.RESPUESTA_ID = context.RESPUESTA_ID;
    	            	        	            	
    	            		row18.AFILIADOS_ID = context.AFILIADOS_ID;
    	            	        	            	
    	            		row18.PREGUNTAS_ID = context.PREGUNTAS_ID;
    	            	        	            	
    	            		row18.OPCION1 = context.OPCION1;
    	            	        	            	
    	            		row18.OPCION2 = context.OPCION2;
    	            	

 



/**
 * [tFixedFlowInput_5 begin ] stop
 */
	
	/**
	 * [tFixedFlowInput_5 main ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_5";
	
	

 


	tos_count_tFixedFlowInput_5++;

/**
 * [tFixedFlowInput_5 main ] stop
 */
	
	/**
	 * [tFixedFlowInput_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_5";
	
	

 



/**
 * [tFixedFlowInput_5 process_data_begin ] stop
 */

	
	/**
	 * [tJavaRow_7 main ] start
	 */

	

	
	
	currentComponent="tJavaRow_7";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row18"
						
						);
					}
					

    //Code generate according to input schema and output schema
row21.afiliadosid_ = row18.AFILIADOS_ID;
row21.idpregunta_ = row18.PREGUNTAS_ID;
    nb_line_tJavaRow_7++;   

 


	tos_count_tJavaRow_7++;

/**
 * [tJavaRow_7 main ] stop
 */
	
	/**
	 * [tJavaRow_7 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJavaRow_7";
	
	

 



/**
 * [tJavaRow_7 process_data_begin ] stop
 */

	
	/**
	 * [tOracleSP_2 main ] start
	 */

	

	
	
	currentComponent="tOracleSP_2";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row21"
						
						);
					}
					

			// code for the argument 1 (result) of type 'OUT AUTOMAPPING'
					statement_tOracleSP_2.registerOutParameter(1, java.sql.Types.VARCHAR);
			// code for the argument 2 (afiliadosid_) of type 'IN AUTOMAPPING'
    					if (row21.afiliadosid_ == null) {
    						statement_tOracleSP_2.setNull(2, java.sql.Types.INTEGER);
    					} else {
    					
                        statement_tOracleSP_2.setInt(2, row21.afiliadosid_);
    					}
    					
			// code for the argument 3 (idpregunta_) of type 'IN AUTOMAPPING'
    					if (row21.idpregunta_ == null) {
    						statement_tOracleSP_2.setNull(3, java.sql.Types.INTEGER);
    					} else {
    					
                        statement_tOracleSP_2.setInt(3, row21.idpregunta_);
    					}
    					
		statement_tOracleSP_2.execute();
		
								row22.afiliadosid_ = row21.afiliadosid_;
								
								row22.idpregunta_ = row21.idpregunta_;
								
									row22.result = statement_tOracleSP_2.getString(1);
									
									if (statement_tOracleSP_2.wasNull()) {
										row22.result = null;
									}
									

 


	tos_count_tOracleSP_2++;

/**
 * [tOracleSP_2 main ] stop
 */
	
	/**
	 * [tOracleSP_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleSP_2";
	
	

 



/**
 * [tOracleSP_2 process_data_begin ] stop
 */

	
	/**
	 * [tJavaRow_8 main ] start
	 */

	

	
	
	currentComponent="tJavaRow_8";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row22"
						
						);
					}
					

    context.OPCION2 = row22.result;

    nb_line_tJavaRow_8++;   

 


	tos_count_tJavaRow_8++;

/**
 * [tJavaRow_8 main ] stop
 */
	
	/**
	 * [tJavaRow_8 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJavaRow_8";
	
	

 



/**
 * [tJavaRow_8 process_data_begin ] stop
 */
	
	/**
	 * [tJavaRow_8 process_data_end ] start
	 */

	

	
	
	currentComponent="tJavaRow_8";
	
	

 



/**
 * [tJavaRow_8 process_data_end ] stop
 */



	
	/**
	 * [tOracleSP_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleSP_2";
	
	

 



/**
 * [tOracleSP_2 process_data_end ] stop
 */



	
	/**
	 * [tJavaRow_7 process_data_end ] start
	 */

	

	
	
	currentComponent="tJavaRow_7";
	
	

 



/**
 * [tJavaRow_7 process_data_end ] stop
 */



	
	/**
	 * [tFixedFlowInput_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_5";
	
	

 



/**
 * [tFixedFlowInput_5 process_data_end ] stop
 */
	
	/**
	 * [tFixedFlowInput_5 end ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_5";
	
	

        }
        globalMap.put("tFixedFlowInput_5_NB_LINE", 1);        

 

ok_Hash.put("tFixedFlowInput_5", true);
end_Hash.put("tFixedFlowInput_5", System.currentTimeMillis());




/**
 * [tFixedFlowInput_5 end ] stop
 */

	
	/**
	 * [tJavaRow_7 end ] start
	 */

	

	
	
	currentComponent="tJavaRow_7";
	
	

globalMap.put("tJavaRow_7_NB_LINE",nb_line_tJavaRow_7);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row18");
			  	}
			  	
 

ok_Hash.put("tJavaRow_7", true);
end_Hash.put("tJavaRow_7", System.currentTimeMillis());




/**
 * [tJavaRow_7 end ] stop
 */

	
	/**
	 * [tOracleSP_2 end ] start
	 */

	

	
	
	currentComponent="tOracleSP_2";
	
	


	statement_tOracleSP_2.close();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row21");
			  	}
			  	
 

ok_Hash.put("tOracleSP_2", true);
end_Hash.put("tOracleSP_2", System.currentTimeMillis());




/**
 * [tOracleSP_2 end ] stop
 */

	
	/**
	 * [tJavaRow_8 end ] start
	 */

	

	
	
	currentComponent="tJavaRow_8";
	
	

globalMap.put("tJavaRow_8_NB_LINE",nb_line_tJavaRow_8);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row22");
			  	}
			  	
 

ok_Hash.put("tJavaRow_8", true);
end_Hash.put("tJavaRow_8", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk11", 0, "ok");
				}
				tFixedFlowInput_2Process(globalMap);



/**
 * [tJavaRow_8 end ] stop
 */









				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFixedFlowInput_5 finally ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_5";
	
	

 



/**
 * [tFixedFlowInput_5 finally ] stop
 */

	
	/**
	 * [tJavaRow_7 finally ] start
	 */

	

	
	
	currentComponent="tJavaRow_7";
	
	

 



/**
 * [tJavaRow_7 finally ] stop
 */

	
	/**
	 * [tOracleSP_2 finally ] start
	 */

	

	
	
	currentComponent="tOracleSP_2";
	
	

 



/**
 * [tOracleSP_2 finally ] stop
 */

	
	/**
	 * [tJavaRow_8 finally ] start
	 */

	

	
	
	currentComponent="tJavaRow_8";
	
	

 



/**
 * [tJavaRow_8 finally ] stop
 */









				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFixedFlowInput_5_SUBPROCESS_STATE", 1);
	}
	


public static class row10Struct implements routines.system.IPersistableRow<row10Struct> {
    final static byte[] commonByteArrayLock_AFI_PRINCIPAL_Consolidado_Salud = new byte[0];
    static byte[] commonByteArray_AFI_PRINCIPAL_Consolidado_Salud = new byte[0];

	
			    public String AFILIADOS_ID;

				public String getAFILIADOS_ID () {
					return this.AFILIADOS_ID;
				}

				public Boolean AFILIADOS_IDIsNullable(){
				    return true;
				}
				public Boolean AFILIADOS_IDIsKey(){
				    return false;
				}
				public Integer AFILIADOS_IDLength(){
				    return 0;
				}
				public Integer AFILIADOS_IDPrecision(){
				    return 0;
				}
				public String AFILIADOS_IDDefault(){
				
					return null;
				
				}
				public String AFILIADOS_IDComment(){
				
				    return "";
				
				}
				public String AFILIADOS_IDPattern(){
				
					return "";
				
				}
				public String AFILIADOS_IDOriginalDbColumnName(){
				
					return "AFILIADOS_ID";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_PRINCIPAL_Consolidado_Salud.length) {
				if(length < 1024 && commonByteArray_AFI_PRINCIPAL_Consolidado_Salud.length == 0) {
   					commonByteArray_AFI_PRINCIPAL_Consolidado_Salud = new byte[1024];
				} else {
   					commonByteArray_AFI_PRINCIPAL_Consolidado_Salud = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_PRINCIPAL_Consolidado_Salud, 0, length);
			strReturn = new String(commonByteArray_AFI_PRINCIPAL_Consolidado_Salud, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_PRINCIPAL_Consolidado_Salud.length) {
				if(length < 1024 && commonByteArray_AFI_PRINCIPAL_Consolidado_Salud.length == 0) {
   					commonByteArray_AFI_PRINCIPAL_Consolidado_Salud = new byte[1024];
				} else {
   					commonByteArray_AFI_PRINCIPAL_Consolidado_Salud = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_PRINCIPAL_Consolidado_Salud, 0, length);
			strReturn = new String(commonByteArray_AFI_PRINCIPAL_Consolidado_Salud, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_PRINCIPAL_Consolidado_Salud) {

        	try {

        		int length = 0;
		
					this.AFILIADOS_ID = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_PRINCIPAL_Consolidado_Salud) {

        	try {

        		int length = 0;
		
					this.AFILIADOS_ID = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.AFILIADOS_ID,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.AFILIADOS_ID,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("AFILIADOS_ID="+AFILIADOS_ID);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row10Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_4Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_4_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row10Struct row10 = new row10Struct();




	
	/**
	 * [tHashOutput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashOutput_2", false);
		start_Hash.put("tHashOutput_2", System.currentTimeMillis());
		
	
	currentComponent="tHashOutput_2";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row10");
					}
				
		int tos_count_tHashOutput_2 = 0;
		



org.talend.designer.components.hashfile.common.MapHashFile mf_tHashOutput_2=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();    
		org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row10Struct> tHashFile_tHashOutput_2 = null;
		String hashKey_tHashOutput_2 = "tHashFile_Consolidado_Salud_" + pid + "_tHashOutput_2";
			synchronized(org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.get(hashKey_tHashOutput_2)){
			    if(mf_tHashOutput_2.getResourceMap().get(hashKey_tHashOutput_2) == null){
	      		    mf_tHashOutput_2.getResourceMap().put(hashKey_tHashOutput_2, new org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row10Struct>(org.talend.designer.components.hashfile.common.MATCHING_MODE.KEEP_ALL));
	      		    tHashFile_tHashOutput_2 = mf_tHashOutput_2.getResourceMap().get(hashKey_tHashOutput_2);
			    }else{
			    	tHashFile_tHashOutput_2 = mf_tHashOutput_2.getResourceMap().get(hashKey_tHashOutput_2);
			    }
			}
        int nb_line_tHashOutput_2 = 0;

 



/**
 * [tHashOutput_2 begin ] stop
 */



	
	/**
	 * [tOracleInput_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_4", false);
		start_Hash.put("tOracleInput_4", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_4";
	
	
		int tos_count_tOracleInput_4 = 0;
		
	


	
		    int nb_line_tOracleInput_4 = 0;
		    java.sql.Connection conn_tOracleInput_4 = null;
				conn_tOracleInput_4 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");
				
                boolean isTimeZoneNull_tOracleInput_4 = false;
				boolean isConnectionWrapped_tOracleInput_4 = !(conn_tOracleInput_4 instanceof oracle.jdbc.OracleConnection) && conn_tOracleInput_4.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tOracleInput_4 = null;
                if (isConnectionWrapped_tOracleInput_4) {
					unwrappedOraConn_tOracleInput_4 = conn_tOracleInput_4.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tOracleInput_4 != null) {
                        isTimeZoneNull_tOracleInput_4 = (unwrappedOraConn_tOracleInput_4.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tOracleInput_4 = (((oracle.jdbc.OracleConnection)conn_tOracleInput_4).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tOracleInput_4) {
					java.sql.Statement stmtGetTZ_tOracleInput_4 = conn_tOracleInput_4.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_4 = stmtGetTZ_tOracleInput_4.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_4 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tOracleInput_4.next()) {
						sessionTimezone_tOracleInput_4 = rsGetTZ_tOracleInput_4.getString(1);
					}
					if (isConnectionWrapped_tOracleInput_4 && unwrappedOraConn_tOracleInput_4 != null) {
                        unwrappedOraConn_tOracleInput_4.setSessionTimeZone(sessionTimezone_tOracleInput_4);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_4).setSessionTimeZone(sessionTimezone_tOracleInput_4);
                    }
				}
			
		    
			java.sql.Statement stmt_tOracleInput_4 = conn_tOracleInput_4.createStatement();

		    String dbquery_tOracleInput_4 = "SELECT\n  DISTINCT(RES.AFILIADOS_ID) AS AFILIADOS_ID\nFROM\n  SALUDSIS.AFI_RESPUESTAS RES\n  INNER JOIN SALUDSIS.GEN_PR"
+"EGUNTAS PRE ON RES.PREGUNTAS_ID=PRE.ID\n  INNER JOIN SALUDSIS.GEN_TPREGUNTAS TPRE ON PRE.TPREGUNTAS_ID=TPRE.ID\nWHERE \n"
+"  RES.FECHA BETWEEN TO_DATE('"+context.AuxFechaInicio+"','DD/MM/YY') AND TO_DATE('"+context.AuxFechaFin+"','DD/MM/YY')  AND\n  RES.ESTREGISTRO_ID=1 AND \n  PRE.ESTREGISTRO_ID=1 AND\n  RES.ESTREGISTRO_ID=1 AND\n  PRE.ESTREGIS"
+"TRO_ID=1 AND\n  TPRE.ESTREGISTRO_ID=1";
		    

		    globalMap.put("tOracleInput_4_QUERY",dbquery_tOracleInput_4);

		    java.sql.ResultSet rs_tOracleInput_4 = null;

		    try {
		    	rs_tOracleInput_4 = stmt_tOracleInput_4.executeQuery(dbquery_tOracleInput_4);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_4 = rs_tOracleInput_4.getMetaData();
		    	int colQtyInRs_tOracleInput_4 = rsmd_tOracleInput_4.getColumnCount();

		    String tmpContent_tOracleInput_4 = null;
		    
		    
		    while (rs_tOracleInput_4.next()) {
		        nb_line_tOracleInput_4++;
		        
							if(colQtyInRs_tOracleInput_4 < 1) {
								row10.AFILIADOS_ID = null;
							} else {
	                         		
        	row10.AFILIADOS_ID = routines.system.JDBCUtil.getString(rs_tOracleInput_4, 1, false);
		                    }
					




 



/**
 * [tOracleInput_4 begin ] stop
 */
	
	/**
	 * [tOracleInput_4 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_4";
	
	

 


	tos_count_tOracleInput_4++;

/**
 * [tOracleInput_4 main ] stop
 */
	
	/**
	 * [tOracleInput_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_4";
	
	

 



/**
 * [tOracleInput_4 process_data_begin ] stop
 */

	
	/**
	 * [tHashOutput_2 main ] start
	 */

	

	
	
	currentComponent="tHashOutput_2";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row10"
						
						);
					}
					



    
		row10Struct oneRow_tHashOutput_2 = new row10Struct();
				
					oneRow_tHashOutput_2.AFILIADOS_ID = row10.AFILIADOS_ID;
		
        tHashFile_tHashOutput_2.put(oneRow_tHashOutput_2);
        nb_line_tHashOutput_2 ++;

 


	tos_count_tHashOutput_2++;

/**
 * [tHashOutput_2 main ] stop
 */
	
	/**
	 * [tHashOutput_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashOutput_2";
	
	

 



/**
 * [tHashOutput_2 process_data_begin ] stop
 */
	
	/**
	 * [tHashOutput_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashOutput_2";
	
	

 



/**
 * [tHashOutput_2 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_4";
	
	

 



/**
 * [tOracleInput_4 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_4 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_4";
	
	

}
}finally{
	if (rs_tOracleInput_4 != null) {
		rs_tOracleInput_4.close();
	}
	if (stmt_tOracleInput_4 != null) {
		stmt_tOracleInput_4.close();
	}
}

globalMap.put("tOracleInput_4_NB_LINE",nb_line_tOracleInput_4);
 

ok_Hash.put("tOracleInput_4", true);
end_Hash.put("tOracleInput_4", System.currentTimeMillis());




/**
 * [tOracleInput_4 end ] stop
 */

	
	/**
	 * [tHashOutput_2 end ] start
	 */

	

	
	
	currentComponent="tHashOutput_2";
	
	
globalMap.put("tHashOutput_2_NB_LINE", nb_line_tHashOutput_2);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row10");
			  	}
			  	
 

ok_Hash.put("tHashOutput_2", true);
end_Hash.put("tHashOutput_2", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk14", 0, "ok");
				}
				tJava_10Process(globalMap);



/**
 * [tHashOutput_2 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleInput_4 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_4";
	
	

 



/**
 * [tOracleInput_4 finally ] stop
 */

	
	/**
	 * [tHashOutput_2 finally ] start
	 */

	

	
	
	currentComponent="tHashOutput_2";
	
	

 



/**
 * [tHashOutput_2 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_4_SUBPROCESS_STATE", 1);
	}
	


public void tJava_10Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_10_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tJava_10 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_10", false);
		start_Hash.put("tJava_10", System.currentTimeMillis());
		
	
	currentComponent="tJava_10";
	
	
		int tos_count_tJava_10 = 0;
		


//****************************************************************************************//
//*** INICIALIZACION VARIABLES DE RANGOS *************************************************//
//****************************************************************************************//
context.auxTotalRegistros=((Integer)globalMap.get("tHashOutput_2_NB_LINE"));
System.out.println(""+context.auxTotalRegistros);
 



/**
 * [tJava_10 begin ] stop
 */
	
	/**
	 * [tJava_10 main ] start
	 */

	

	
	
	currentComponent="tJava_10";
	
	

 


	tos_count_tJava_10++;

/**
 * [tJava_10 main ] stop
 */
	
	/**
	 * [tJava_10 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_10";
	
	

 



/**
 * [tJava_10 process_data_begin ] stop
 */
	
	/**
	 * [tJava_10 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_10";
	
	

 



/**
 * [tJava_10 process_data_end ] stop
 */
	
	/**
	 * [tJava_10 end ] start
	 */

	

	
	
	currentComponent="tJava_10";
	
	

 

ok_Hash.put("tJava_10", true);
end_Hash.put("tJava_10", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk16", 0, "ok");
				}
				tLoop_2Process(globalMap);



/**
 * [tJava_10 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_10 finally ] start
	 */

	

	
	
	currentComponent="tJava_10";
	
	

 



/**
 * [tJava_10 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_10_SUBPROCESS_STATE", 1);
	}
	


public void tLoop_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tLoop_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tLoop_2 begin ] start
	 */

				
			int NB_ITERATE_tJava_9 = 0; //for statistics
			

	
		
		ok_Hash.put("tLoop_2", false);
		start_Hash.put("tLoop_2", System.currentTimeMillis());
		
	
	currentComponent="tLoop_2";
	
	
		int tos_count_tLoop_2 = 0;
		

int current_iteration_tLoop_2 = 0;

;
	
while((Integer)context.auxTotalRegistros>0){
	
current_iteration_tLoop_2++;
globalMap.put("tLoop_2_CURRENT_ITERATION",current_iteration_tLoop_2);


 



/**
 * [tLoop_2 begin ] stop
 */
	
	/**
	 * [tLoop_2 main ] start
	 */

	

	
	
	currentComponent="tLoop_2";
	
	

 


	tos_count_tLoop_2++;

/**
 * [tLoop_2 main ] stop
 */
	
	/**
	 * [tLoop_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLoop_2";
	
	

 



/**
 * [tLoop_2 process_data_begin ] stop
 */
	NB_ITERATE_tJava_9++;
	
	
					if(execStat){				
	       				runStat.updateStatOnConnection("OnComponentOk15", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("after_tHashInput_2", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row_gen_preguntas_in", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row_info_encuesta_in", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row_gen_sexos_in", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row_gen_preguntas_in", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("If16", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row_gen_afiliados_in", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row12", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row_afi_planafiliaciones_in", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row15", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row_gen_afiliados_in", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row_gen_tdocumentos_in", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("after_tHashInput_2", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row_gen_tdocumentos_in", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row_afi_planafiliaciones_in", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("OnRowsEnd", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row19", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row_info_encuestas_out", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("after_tHashInput_2", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row_gen_sexos_in", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("after_tHashInput_2", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("after_tHashInput_2", 3, 0);
					}           			
				
				if(execStat){
					runStat.updateStatOnConnection("iterate5", 1, "exec" + NB_ITERATE_tJava_9);
					//Thread.sleep(1000);
				}				
			

	
	/**
	 * [tJava_9 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_9", false);
		start_Hash.put("tJava_9", System.currentTimeMillis());
		
	
	currentComponent="tJava_9";
	
	
		int tos_count_tJava_9 = 0;
		


//****************************************************************************************//
//*** INICIALIZACION VARIABLES DE RANGOS *************************************************//
//****************************************************************************************//

int rangoInferior=0;

int rangoSuperior=0;

//****************************************************************************************//
//*** ALMACENAMIENTO EN VARIABLES DE CONTEXTO DE LA NUEVA POSICION DE LA CONSULTA     ****//
//****************************************************************************************//

//CUENTA ATRAS TOTAL REGISTROS
context.auxTotalRegistros=context.auxTotalRegistros-context.auxAumentoRegistros;

//AUMENTO POSICION REGISTROS
context.auxPosicionRegistros=(((Integer)globalMap.get("tLoop_2_CURRENT_ITERATION"))-1)*context.auxAumentoRegistros;

rangoInferior=context.auxPosicionRegistros+1;

rangoSuperior=((Integer)globalMap.get("tHashOutput_2_NB_LINE"));

if(context.auxTotalRegistros<0){

	context.auxTotalRegistros=0;
	
}

if(context.auxPosicionRegistros==0){

	rangoInferior=0;
	
}

if((context.auxPosicionRegistros+context.auxAumentoRegistros)<((Integer)globalMap.get("tHashOutput_2_NB_LINE"))){

	rangoSuperior=context.auxPosicionRegistros+context.auxAumentoRegistros;
	
}

context.auxRango=rangoInferior+".."+rangoSuperior;

System.out.println("Rango Loop 01: "+context.auxRango+" de: "+globalMap.get("tHashOutput_2_NB_LINE"));
 



/**
 * [tJava_9 begin ] stop
 */
	
	/**
	 * [tJava_9 main ] start
	 */

	

	
	
	currentComponent="tJava_9";
	
	

 


	tos_count_tJava_9++;

/**
 * [tJava_9 main ] stop
 */
	
	/**
	 * [tJava_9 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_9";
	
	

 



/**
 * [tJava_9 process_data_begin ] stop
 */
	
	/**
	 * [tJava_9 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_9";
	
	

 



/**
 * [tJava_9 process_data_end ] stop
 */
	
	/**
	 * [tJava_9 end ] start
	 */

	

	
	
	currentComponent="tJava_9";
	
	

 

ok_Hash.put("tJava_9", true);
end_Hash.put("tJava_9", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk15", 0, "ok");
				}
				tHashInput_7Process(globalMap);



/**
 * [tJava_9 end ] stop
 */
						if(execStat){
							runStat.updateStatOnConnection("iterate5", 2, "exec" + NB_ITERATE_tJava_9);
						}				
					




	
	/**
	 * [tLoop_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tLoop_2";
	
	

 



/**
 * [tLoop_2 process_data_end ] stop
 */
	
	/**
	 * [tLoop_2 end ] start
	 */

	

	
	
	currentComponent="tLoop_2";
	
	




;


}


 

ok_Hash.put("tLoop_2", true);
end_Hash.put("tLoop_2", System.currentTimeMillis());




/**
 * [tLoop_2 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tLoop_2:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk3", 0, "ok");
								} 
							
							tFixedFlowInput_3Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tLoop_2 finally ] start
	 */

	

	
	
	currentComponent="tLoop_2";
	
	

 



/**
 * [tLoop_2 finally ] stop
 */

	
	/**
	 * [tJava_9 finally ] start
	 */

	

	
	
	currentComponent="tJava_9";
	
	

 



/**
 * [tJava_9 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tLoop_2_SUBPROCESS_STATE", 1);
	}
	


public static class row19Struct implements routines.system.IPersistableRow<row19Struct> {
    final static byte[] commonByteArrayLock_AFI_PRINCIPAL_Consolidado_Salud = new byte[0];
    static byte[] commonByteArray_AFI_PRINCIPAL_Consolidado_Salud = new byte[0];

	
			    public String AFILIADOS_ID;

				public String getAFILIADOS_ID () {
					return this.AFILIADOS_ID;
				}

				public Boolean AFILIADOS_IDIsNullable(){
				    return true;
				}
				public Boolean AFILIADOS_IDIsKey(){
				    return false;
				}
				public Integer AFILIADOS_IDLength(){
				    return 0;
				}
				public Integer AFILIADOS_IDPrecision(){
				    return 0;
				}
				public String AFILIADOS_IDDefault(){
				
					return null;
				
				}
				public String AFILIADOS_IDComment(){
				
				    return "";
				
				}
				public String AFILIADOS_IDPattern(){
				
					return "";
				
				}
				public String AFILIADOS_IDOriginalDbColumnName(){
				
					return "AFILIADOS_ID";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_PRINCIPAL_Consolidado_Salud.length) {
				if(length < 1024 && commonByteArray_AFI_PRINCIPAL_Consolidado_Salud.length == 0) {
   					commonByteArray_AFI_PRINCIPAL_Consolidado_Salud = new byte[1024];
				} else {
   					commonByteArray_AFI_PRINCIPAL_Consolidado_Salud = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_PRINCIPAL_Consolidado_Salud, 0, length);
			strReturn = new String(commonByteArray_AFI_PRINCIPAL_Consolidado_Salud, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_PRINCIPAL_Consolidado_Salud.length) {
				if(length < 1024 && commonByteArray_AFI_PRINCIPAL_Consolidado_Salud.length == 0) {
   					commonByteArray_AFI_PRINCIPAL_Consolidado_Salud = new byte[1024];
				} else {
   					commonByteArray_AFI_PRINCIPAL_Consolidado_Salud = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_PRINCIPAL_Consolidado_Salud, 0, length);
			strReturn = new String(commonByteArray_AFI_PRINCIPAL_Consolidado_Salud, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_PRINCIPAL_Consolidado_Salud) {

        	try {

        		int length = 0;
		
					this.AFILIADOS_ID = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_PRINCIPAL_Consolidado_Salud) {

        	try {

        		int length = 0;
		
					this.AFILIADOS_ID = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.AFILIADOS_ID,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.AFILIADOS_ID,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("AFILIADOS_ID="+AFILIADOS_ID);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row19Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class OnRowsEndStructtDenormalize_1 implements routines.system.IPersistableRow<OnRowsEndStructtDenormalize_1> {
    final static byte[] commonByteArrayLock_AFI_PRINCIPAL_Consolidado_Salud = new byte[0];
    static byte[] commonByteArray_AFI_PRINCIPAL_Consolidado_Salud = new byte[0];

	
			    public String AFILIADOS_ID;

				public String getAFILIADOS_ID () {
					return this.AFILIADOS_ID;
				}

				public Boolean AFILIADOS_IDIsNullable(){
				    return true;
				}
				public Boolean AFILIADOS_IDIsKey(){
				    return false;
				}
				public Integer AFILIADOS_IDLength(){
				    return 0;
				}
				public Integer AFILIADOS_IDPrecision(){
				    return 0;
				}
				public String AFILIADOS_IDDefault(){
				
					return null;
				
				}
				public String AFILIADOS_IDComment(){
				
				    return "";
				
				}
				public String AFILIADOS_IDPattern(){
				
					return "";
				
				}
				public String AFILIADOS_IDOriginalDbColumnName(){
				
					return "AFILIADOS_ID";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_PRINCIPAL_Consolidado_Salud.length) {
				if(length < 1024 && commonByteArray_AFI_PRINCIPAL_Consolidado_Salud.length == 0) {
   					commonByteArray_AFI_PRINCIPAL_Consolidado_Salud = new byte[1024];
				} else {
   					commonByteArray_AFI_PRINCIPAL_Consolidado_Salud = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_PRINCIPAL_Consolidado_Salud, 0, length);
			strReturn = new String(commonByteArray_AFI_PRINCIPAL_Consolidado_Salud, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_PRINCIPAL_Consolidado_Salud.length) {
				if(length < 1024 && commonByteArray_AFI_PRINCIPAL_Consolidado_Salud.length == 0) {
   					commonByteArray_AFI_PRINCIPAL_Consolidado_Salud = new byte[1024];
				} else {
   					commonByteArray_AFI_PRINCIPAL_Consolidado_Salud = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_PRINCIPAL_Consolidado_Salud, 0, length);
			strReturn = new String(commonByteArray_AFI_PRINCIPAL_Consolidado_Salud, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_PRINCIPAL_Consolidado_Salud) {

        	try {

        		int length = 0;
		
					this.AFILIADOS_ID = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_PRINCIPAL_Consolidado_Salud) {

        	try {

        		int length = 0;
		
					this.AFILIADOS_ID = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.AFILIADOS_ID,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.AFILIADOS_ID,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("AFILIADOS_ID="+AFILIADOS_ID);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(OnRowsEndStructtDenormalize_1 other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row15Struct implements routines.system.IPersistableRow<row15Struct> {
    final static byte[] commonByteArrayLock_AFI_PRINCIPAL_Consolidado_Salud = new byte[0];
    static byte[] commonByteArray_AFI_PRINCIPAL_Consolidado_Salud = new byte[0];

	
			    public String AFILIADOS_ID;

				public String getAFILIADOS_ID () {
					return this.AFILIADOS_ID;
				}

				public Boolean AFILIADOS_IDIsNullable(){
				    return true;
				}
				public Boolean AFILIADOS_IDIsKey(){
				    return false;
				}
				public Integer AFILIADOS_IDLength(){
				    return 0;
				}
				public Integer AFILIADOS_IDPrecision(){
				    return 0;
				}
				public String AFILIADOS_IDDefault(){
				
					return null;
				
				}
				public String AFILIADOS_IDComment(){
				
				    return "";
				
				}
				public String AFILIADOS_IDPattern(){
				
					return "";
				
				}
				public String AFILIADOS_IDOriginalDbColumnName(){
				
					return "AFILIADOS_ID";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_PRINCIPAL_Consolidado_Salud.length) {
				if(length < 1024 && commonByteArray_AFI_PRINCIPAL_Consolidado_Salud.length == 0) {
   					commonByteArray_AFI_PRINCIPAL_Consolidado_Salud = new byte[1024];
				} else {
   					commonByteArray_AFI_PRINCIPAL_Consolidado_Salud = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_PRINCIPAL_Consolidado_Salud, 0, length);
			strReturn = new String(commonByteArray_AFI_PRINCIPAL_Consolidado_Salud, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_PRINCIPAL_Consolidado_Salud.length) {
				if(length < 1024 && commonByteArray_AFI_PRINCIPAL_Consolidado_Salud.length == 0) {
   					commonByteArray_AFI_PRINCIPAL_Consolidado_Salud = new byte[1024];
				} else {
   					commonByteArray_AFI_PRINCIPAL_Consolidado_Salud = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_PRINCIPAL_Consolidado_Salud, 0, length);
			strReturn = new String(commonByteArray_AFI_PRINCIPAL_Consolidado_Salud, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_PRINCIPAL_Consolidado_Salud) {

        	try {

        		int length = 0;
		
					this.AFILIADOS_ID = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_PRINCIPAL_Consolidado_Salud) {

        	try {

        		int length = 0;
		
					this.AFILIADOS_ID = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.AFILIADOS_ID,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.AFILIADOS_ID,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("AFILIADOS_ID="+AFILIADOS_ID);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row15Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row12Struct implements routines.system.IPersistableRow<row12Struct> {
    final static byte[] commonByteArrayLock_AFI_PRINCIPAL_Consolidado_Salud = new byte[0];
    static byte[] commonByteArray_AFI_PRINCIPAL_Consolidado_Salud = new byte[0];

	
			    public String AFILIADOS_ID;

				public String getAFILIADOS_ID () {
					return this.AFILIADOS_ID;
				}

				public Boolean AFILIADOS_IDIsNullable(){
				    return true;
				}
				public Boolean AFILIADOS_IDIsKey(){
				    return false;
				}
				public Integer AFILIADOS_IDLength(){
				    return 0;
				}
				public Integer AFILIADOS_IDPrecision(){
				    return 0;
				}
				public String AFILIADOS_IDDefault(){
				
					return null;
				
				}
				public String AFILIADOS_IDComment(){
				
				    return "";
				
				}
				public String AFILIADOS_IDPattern(){
				
					return "";
				
				}
				public String AFILIADOS_IDOriginalDbColumnName(){
				
					return "AFILIADOS_ID";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_PRINCIPAL_Consolidado_Salud.length) {
				if(length < 1024 && commonByteArray_AFI_PRINCIPAL_Consolidado_Salud.length == 0) {
   					commonByteArray_AFI_PRINCIPAL_Consolidado_Salud = new byte[1024];
				} else {
   					commonByteArray_AFI_PRINCIPAL_Consolidado_Salud = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_PRINCIPAL_Consolidado_Salud, 0, length);
			strReturn = new String(commonByteArray_AFI_PRINCIPAL_Consolidado_Salud, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_PRINCIPAL_Consolidado_Salud.length) {
				if(length < 1024 && commonByteArray_AFI_PRINCIPAL_Consolidado_Salud.length == 0) {
   					commonByteArray_AFI_PRINCIPAL_Consolidado_Salud = new byte[1024];
				} else {
   					commonByteArray_AFI_PRINCIPAL_Consolidado_Salud = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_PRINCIPAL_Consolidado_Salud, 0, length);
			strReturn = new String(commonByteArray_AFI_PRINCIPAL_Consolidado_Salud, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_PRINCIPAL_Consolidado_Salud) {

        	try {

        		int length = 0;
		
					this.AFILIADOS_ID = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_PRINCIPAL_Consolidado_Salud) {

        	try {

        		int length = 0;
		
					this.AFILIADOS_ID = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.AFILIADOS_ID,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.AFILIADOS_ID,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("AFILIADOS_ID="+AFILIADOS_ID);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row12Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tHashInput_7Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tHashInput_7_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

		String currentVirtualComponent = null;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row12Struct row12 = new row12Struct();
row15Struct row15 = new row15Struct();
row19Struct row19 = new row19Struct();





	
	/**
	 * [tDenormalize_1_DenormalizeOut begin ] start
	 */

	

	
		
		ok_Hash.put("tDenormalize_1_DenormalizeOut", false);
		start_Hash.put("tDenormalize_1_DenormalizeOut", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tDenormalize_1";
	
	currentComponent="tDenormalize_1_DenormalizeOut";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row15");
					}
				
		int tos_count_tDenormalize_1_DenormalizeOut = 0;
		

class DenormalizeStructtDenormalize_1_DenormalizeOut {
StringBuilder AFILIADOS_ID = new StringBuilder();
}
DenormalizeStructtDenormalize_1_DenormalizeOut denormalize_result_tDenormalize_1_DenormalizeOut = null;

 



/**
 * [tDenormalize_1_DenormalizeOut begin ] stop
 */



	
	/**
	 * [tSampleRow_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tSampleRow_1", false);
		start_Hash.put("tSampleRow_1", System.currentTimeMillis());
		
	
	currentComponent="tSampleRow_1";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row12");
					}
				
		int tos_count_tSampleRow_1 = 0;
		

String[] rangetSampleRow_1 = context.auxRango.split(",");
java.util.Set rangeSettSampleRow_1 = new java.util.HashSet();

Integer nb_line_tSampleRow_1 = 0;

for(int i =0;i<rangetSampleRow_1.length;i++){

	if(rangetSampleRow_1[i].matches("\\d+")){
	
		rangeSettSampleRow_1 .add(Integer.valueOf(rangetSampleRow_1[i]));
		
	}else if(rangetSampleRow_1[i].matches("\\d+\\.\\.\\d+")){
		
		String[] edgetSampleRow_1= rangetSampleRow_1[i].split("\\.\\.");
		
		for(int j=Integer.valueOf(edgetSampleRow_1[0]).intValue();j<Integer.valueOf(edgetSampleRow_1[1]).intValue()+1;j++){			
			rangeSettSampleRow_1 .add(Integer.valueOf(j));			
		}		
	}else{
	
	}
	
}



 



/**
 * [tSampleRow_1 begin ] stop
 */



	
	/**
	 * [tHashInput_7 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_7", false);
		start_Hash.put("tHashInput_7", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_7";
	
	
		int tos_count_tHashInput_7 = 0;
		


int nb_line_tHashInput_7 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_7=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row10Struct> tHashFile_tHashInput_7 = mf_tHashInput_7.getAdvancedMemoryHashFile("tHashFile_Consolidado_Salud_" + pid +"_tHashOutput_2");
if(tHashFile_tHashInput_7==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<row10Struct> iterator_tHashInput_7 = tHashFile_tHashInput_7.iterator();
while (iterator_tHashInput_7.hasNext()) {
    row10Struct next_tHashInput_7 = iterator_tHashInput_7.next();

	row12.AFILIADOS_ID = next_tHashInput_7.AFILIADOS_ID;

 



/**
 * [tHashInput_7 begin ] stop
 */
	
	/**
	 * [tHashInput_7 main ] start
	 */

	

	
	
	currentComponent="tHashInput_7";
	
	

 


	tos_count_tHashInput_7++;

/**
 * [tHashInput_7 main ] stop
 */
	
	/**
	 * [tHashInput_7 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashInput_7";
	
	

 



/**
 * [tHashInput_7 process_data_begin ] stop
 */

	
	/**
	 * [tSampleRow_1 main ] start
	 */

	

	
	
	currentComponent="tSampleRow_1";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row12"
						
						);
					}
					

	
	nb_line_tSampleRow_1++;
	
 	if(!rangeSettSampleRow_1.contains(nb_line_tSampleRow_1)){        
            row15 = null;            	
 	}else{  	
 	   row15 = new row15Struct();
 	   

       row15.AFILIADOS_ID = row12.AFILIADOS_ID;
       
 	
 	}
 
 
 
 
 
 
 
 
 
 
 
 
 


	tos_count_tSampleRow_1++;

/**
 * [tSampleRow_1 main ] stop
 */
	
	/**
	 * [tSampleRow_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tSampleRow_1";
	
	

 



/**
 * [tSampleRow_1 process_data_begin ] stop
 */
// Start of branch "row15"
if(row15 != null) { 



	
	/**
	 * [tDenormalize_1_DenormalizeOut main ] start
	 */

	

	
	
		currentVirtualComponent = "tDenormalize_1";
	
	currentComponent="tDenormalize_1_DenormalizeOut";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row15"
						
						);
					}
					

if(denormalize_result_tDenormalize_1_DenormalizeOut == null){
	denormalize_result_tDenormalize_1_DenormalizeOut = new DenormalizeStructtDenormalize_1_DenormalizeOut();		
	denormalize_result_tDenormalize_1_DenormalizeOut.AFILIADOS_ID.append(row15.AFILIADOS_ID);
			
}else{		
	denormalize_result_tDenormalize_1_DenormalizeOut.AFILIADOS_ID.append(",").append(row15.AFILIADOS_ID);
			
}

 


	tos_count_tDenormalize_1_DenormalizeOut++;

/**
 * [tDenormalize_1_DenormalizeOut main ] stop
 */
	
	/**
	 * [tDenormalize_1_DenormalizeOut process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tDenormalize_1";
	
	currentComponent="tDenormalize_1_DenormalizeOut";
	
	

 



/**
 * [tDenormalize_1_DenormalizeOut process_data_begin ] stop
 */
	
	/**
	 * [tDenormalize_1_DenormalizeOut process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tDenormalize_1";
	
	currentComponent="tDenormalize_1_DenormalizeOut";
	
	

 



/**
 * [tDenormalize_1_DenormalizeOut process_data_end ] stop
 */

} // End of branch "row15"




	
	/**
	 * [tSampleRow_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tSampleRow_1";
	
	

 



/**
 * [tSampleRow_1 process_data_end ] stop
 */



	
	/**
	 * [tHashInput_7 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashInput_7";
	
	

 



/**
 * [tHashInput_7 process_data_end ] stop
 */
	
	/**
	 * [tHashInput_7 end ] start
	 */

	

	
	
	currentComponent="tHashInput_7";
	
	
    

		
			nb_line_tHashInput_7++;
		}	
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_Consolidado_Salud_" + pid +"_tHashOutput_2");
	


	globalMap.put("tHashInput_7_NB_LINE", nb_line_tHashInput_7);       

 

ok_Hash.put("tHashInput_7", true);
end_Hash.put("tHashInput_7", System.currentTimeMillis());




/**
 * [tHashInput_7 end ] stop
 */

	
	/**
	 * [tSampleRow_1 end ] start
	 */

	

	
	
	currentComponent="tSampleRow_1";
	
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row12");
			  	}
			  	
 

ok_Hash.put("tSampleRow_1", true);
end_Hash.put("tSampleRow_1", System.currentTimeMillis());




/**
 * [tSampleRow_1 end ] stop
 */

	
	/**
	 * [tDenormalize_1_DenormalizeOut end ] start
	 */

	

	
	
		currentVirtualComponent = "tDenormalize_1";
	
	currentComponent="tDenormalize_1_DenormalizeOut";
	
	
java.util.List<OnRowsEndStructtDenormalize_1> result_list_tDenormalize_1_DenormalizeOut = new java.util.ArrayList<OnRowsEndStructtDenormalize_1>();
if (denormalize_result_tDenormalize_1_DenormalizeOut != null) {
//generate result begin
	OnRowsEndStructtDenormalize_1 denormalize_row_tDenormalize_1_DenormalizeOut = new OnRowsEndStructtDenormalize_1();
                
	denormalize_row_tDenormalize_1_DenormalizeOut.AFILIADOS_ID = denormalize_result_tDenormalize_1_DenormalizeOut.AFILIADOS_ID.toString();
	
	//in the deepest end
	
	result_list_tDenormalize_1_DenormalizeOut.add(denormalize_row_tDenormalize_1_DenormalizeOut);

}
//generate result end
globalMap.put("tDenormalize_1", result_list_tDenormalize_1_DenormalizeOut);
globalMap.put("tDenormalize_1_DenormalizeOut_NB_LINE", result_list_tDenormalize_1_DenormalizeOut.size()); 

        


				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row15");
			  	}
			  	
 

ok_Hash.put("tDenormalize_1_DenormalizeOut", true);
end_Hash.put("tDenormalize_1_DenormalizeOut", System.currentTimeMillis());




/**
 * [tDenormalize_1_DenormalizeOut end ] stop
 */


	
	/**
	 * [tJavaRow_9 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaRow_9", false);
		start_Hash.put("tJavaRow_9", System.currentTimeMillis());
		
	
	currentComponent="tJavaRow_9";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row19");
					}
				
		int tos_count_tJavaRow_9 = 0;
		

int nb_line_tJavaRow_9 = 0;

 



/**
 * [tJavaRow_9 begin ] stop
 */



	
	/**
	 * [tDenormalize_1_ArrayIn begin ] start
	 */

	

	
		
		ok_Hash.put("tDenormalize_1_ArrayIn", false);
		start_Hash.put("tDenormalize_1_ArrayIn", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tDenormalize_1";
	
	currentComponent="tDenormalize_1_ArrayIn";
	
	
		int tos_count_tDenormalize_1_ArrayIn = 0;
		

        
        int nb_line_tDenormalize_1_ArrayIn = 0;
        java.util.List<OnRowsEndStructtDenormalize_1> list_tDenormalize_1_ArrayIn = (java.util.List<OnRowsEndStructtDenormalize_1>)globalMap.get("tDenormalize_1");
        if(list_tDenormalize_1_ArrayIn == null) {
            list_tDenormalize_1_ArrayIn = new java.util.ArrayList<OnRowsEndStructtDenormalize_1>();
        }        
        for(OnRowsEndStructtDenormalize_1 row_tDenormalize_1_ArrayIn : list_tDenormalize_1_ArrayIn){
        					
    						row19.AFILIADOS_ID = row_tDenormalize_1_ArrayIn.AFILIADOS_ID;
    						

 



/**
 * [tDenormalize_1_ArrayIn begin ] stop
 */
	
	/**
	 * [tDenormalize_1_ArrayIn main ] start
	 */

	

	
	
		currentVirtualComponent = "tDenormalize_1";
	
	currentComponent="tDenormalize_1_ArrayIn";
	
	

 


	tos_count_tDenormalize_1_ArrayIn++;

/**
 * [tDenormalize_1_ArrayIn main ] stop
 */
	
	/**
	 * [tDenormalize_1_ArrayIn process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tDenormalize_1";
	
	currentComponent="tDenormalize_1_ArrayIn";
	
	

 



/**
 * [tDenormalize_1_ArrayIn process_data_begin ] stop
 */

	
	/**
	 * [tJavaRow_9 main ] start
	 */

	

	
	
	currentComponent="tJavaRow_9";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row19"
						
						);
					}
					

    //****************************************************************************************//
//*** REINICIALIZACION DE ID DE AFILIADO *************************************************//
//****************************************************************************************//
context.auxAfiliadosCompendio="";


//****************************************************************************************//
//*** ALMACENAMIENTO DE LOS ID'S DE AFILIADOS EN COLUMNAS PARA LA CONSULTA ***************//
//****************************************************************************************//
context.auxAfiliadosCompendio = row19.AFILIADOS_ID;
    nb_line_tJavaRow_9++;   

 


	tos_count_tJavaRow_9++;

/**
 * [tJavaRow_9 main ] stop
 */
	
	/**
	 * [tJavaRow_9 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJavaRow_9";
	
	

 



/**
 * [tJavaRow_9 process_data_begin ] stop
 */
	
	/**
	 * [tJavaRow_9 process_data_end ] start
	 */

	

	
	
	currentComponent="tJavaRow_9";
	
	

 



/**
 * [tJavaRow_9 process_data_end ] stop
 */



	
	/**
	 * [tDenormalize_1_ArrayIn process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tDenormalize_1";
	
	currentComponent="tDenormalize_1_ArrayIn";
	
	

 



/**
 * [tDenormalize_1_ArrayIn process_data_end ] stop
 */
	
	/**
	 * [tDenormalize_1_ArrayIn end ] start
	 */

	

	
	
		currentVirtualComponent = "tDenormalize_1";
	
	currentComponent="tDenormalize_1_ArrayIn";
	
	
	nb_line_tDenormalize_1_ArrayIn++;
}
globalMap.put("tDenormalize_1_ArrayIn_NB_LINE",nb_line_tDenormalize_1_ArrayIn);
 

ok_Hash.put("tDenormalize_1_ArrayIn", true);
end_Hash.put("tDenormalize_1_ArrayIn", System.currentTimeMillis());




/**
 * [tDenormalize_1_ArrayIn end ] stop
 */

	
	/**
	 * [tJavaRow_9 end ] start
	 */

	

	
	
	currentComponent="tJavaRow_9";
	
	

globalMap.put("tJavaRow_9_NB_LINE",nb_line_tJavaRow_9);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row19");
			  	}
			  	
 

ok_Hash.put("tJavaRow_9", true);
end_Hash.put("tJavaRow_9", System.currentTimeMillis());

   			if (context.auxAfiliadosCompendio.length()>0) {
   				
					if(execStat){
   	 					runStat.updateStatOnConnection("If16", 0, "true");
					}
				tHashInput_2Process(globalMap);
			}

			   
   				else{
					if(execStat){   
   	 					runStat.updateStatOnConnection("If16", 0, "false");
					}   	 
   				}



/**
 * [tJavaRow_9 end ] stop
 */












				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
					te.setVirtualComponentName(currentVirtualComponent);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
							//free memory for "tDenormalize_1_ArrayIn"
							globalMap.remove("tDenormalize_1");
						
				try{
					
	
	/**
	 * [tHashInput_7 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_7";
	
	

 



/**
 * [tHashInput_7 finally ] stop
 */

	
	/**
	 * [tSampleRow_1 finally ] start
	 */

	

	
	
	currentComponent="tSampleRow_1";
	
	

 



/**
 * [tSampleRow_1 finally ] stop
 */

	
	/**
	 * [tDenormalize_1_DenormalizeOut finally ] start
	 */

	

	
	
		currentVirtualComponent = "tDenormalize_1";
	
	currentComponent="tDenormalize_1_DenormalizeOut";
	
	

 



/**
 * [tDenormalize_1_DenormalizeOut finally ] stop
 */

	
	/**
	 * [tDenormalize_1_ArrayIn finally ] start
	 */

	

	
	
		currentVirtualComponent = "tDenormalize_1";
	
	currentComponent="tDenormalize_1_ArrayIn";
	
	

 



/**
 * [tDenormalize_1_ArrayIn finally ] stop
 */

	
	/**
	 * [tJavaRow_9 finally ] start
	 */

	

	
	
	currentComponent="tJavaRow_9";
	
	

 



/**
 * [tJavaRow_9 finally ] stop
 */












				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tHashInput_7_SUBPROCESS_STATE", 1);
	}
	


public static class row_info_encuestas_outStruct implements routines.system.IPersistableRow<row_info_encuestas_outStruct> {
    final static byte[] commonByteArrayLock_AFI_PRINCIPAL_Consolidado_Salud = new byte[0];
    static byte[] commonByteArray_AFI_PRINCIPAL_Consolidado_Salud = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public int AFILIADOS_ID;

				public int getAFILIADOS_ID () {
					return this.AFILIADOS_ID;
				}

				public Boolean AFILIADOS_IDIsNullable(){
				    return false;
				}
				public Boolean AFILIADOS_IDIsKey(){
				    return true;
				}
				public Integer AFILIADOS_IDLength(){
				    return 0;
				}
				public Integer AFILIADOS_IDPrecision(){
				    return 0;
				}
				public String AFILIADOS_IDDefault(){
				
					return null;
				
				}
				public String AFILIADOS_IDComment(){
				
				    return "FK - GEN_AFILIADOS";
				
				}
				public String AFILIADOS_IDPattern(){
				
					return "";
				
				}
				public String AFILIADOS_IDOriginalDbColumnName(){
				
					return "AFILIADOS_ID";
				
				}

				
			    public String PRIMER_NOMBRE;

				public String getPRIMER_NOMBRE () {
					return this.PRIMER_NOMBRE;
				}

				public Boolean PRIMER_NOMBREIsNullable(){
				    return false;
				}
				public Boolean PRIMER_NOMBREIsKey(){
				    return false;
				}
				public Integer PRIMER_NOMBRELength(){
				    return 20;
				}
				public Integer PRIMER_NOMBREPrecision(){
				    return 0;
				}
				public String PRIMER_NOMBREDefault(){
				
					return null;
				
				}
				public String PRIMER_NOMBREComment(){
				
				    return "Primer Nombre de la Persona";
				
				}
				public String PRIMER_NOMBREPattern(){
				
					return "";
				
				}
				public String PRIMER_NOMBREOriginalDbColumnName(){
				
					return "PRIMER_NOMBRE";
				
				}

				
			    public String SEGUNDO_NOMBRE;

				public String getSEGUNDO_NOMBRE () {
					return this.SEGUNDO_NOMBRE;
				}

				public Boolean SEGUNDO_NOMBREIsNullable(){
				    return true;
				}
				public Boolean SEGUNDO_NOMBREIsKey(){
				    return false;
				}
				public Integer SEGUNDO_NOMBRELength(){
				    return 20;
				}
				public Integer SEGUNDO_NOMBREPrecision(){
				    return 0;
				}
				public String SEGUNDO_NOMBREDefault(){
				
					return null;
				
				}
				public String SEGUNDO_NOMBREComment(){
				
				    return "Segundo Nombre de la Persona";
				
				}
				public String SEGUNDO_NOMBREPattern(){
				
					return "";
				
				}
				public String SEGUNDO_NOMBREOriginalDbColumnName(){
				
					return "SEGUNDO_NOMBRE";
				
				}

				
			    public String PRIMER_APELLIDO;

				public String getPRIMER_APELLIDO () {
					return this.PRIMER_APELLIDO;
				}

				public Boolean PRIMER_APELLIDOIsNullable(){
				    return false;
				}
				public Boolean PRIMER_APELLIDOIsKey(){
				    return false;
				}
				public Integer PRIMER_APELLIDOLength(){
				    return 20;
				}
				public Integer PRIMER_APELLIDOPrecision(){
				    return 0;
				}
				public String PRIMER_APELLIDODefault(){
				
					return null;
				
				}
				public String PRIMER_APELLIDOComment(){
				
				    return "Primer Apellido de la Persona";
				
				}
				public String PRIMER_APELLIDOPattern(){
				
					return "";
				
				}
				public String PRIMER_APELLIDOOriginalDbColumnName(){
				
					return "PRIMER_APELLIDO";
				
				}

				
			    public String SEGUNDO_APELLIDO;

				public String getSEGUNDO_APELLIDO () {
					return this.SEGUNDO_APELLIDO;
				}

				public Boolean SEGUNDO_APELLIDOIsNullable(){
				    return true;
				}
				public Boolean SEGUNDO_APELLIDOIsKey(){
				    return false;
				}
				public Integer SEGUNDO_APELLIDOLength(){
				    return 20;
				}
				public Integer SEGUNDO_APELLIDOPrecision(){
				    return 0;
				}
				public String SEGUNDO_APELLIDODefault(){
				
					return null;
				
				}
				public String SEGUNDO_APELLIDOComment(){
				
				    return "Segundo Apellido de la Persona";
				
				}
				public String SEGUNDO_APELLIDOPattern(){
				
					return "";
				
				}
				public String SEGUNDO_APELLIDOOriginalDbColumnName(){
				
					return "SEGUNDO_APELLIDO";
				
				}

				
			    public String TIPO_DOCUMENTO;

				public String getTIPO_DOCUMENTO () {
					return this.TIPO_DOCUMENTO;
				}

				public Boolean TIPO_DOCUMENTOIsNullable(){
				    return false;
				}
				public Boolean TIPO_DOCUMENTOIsKey(){
				    return false;
				}
				public Integer TIPO_DOCUMENTOLength(){
				    return 5;
				}
				public Integer TIPO_DOCUMENTOPrecision(){
				    return 0;
				}
				public String TIPO_DOCUMENTODefault(){
				
					return null;
				
				}
				public String TIPO_DOCUMENTOComment(){
				
				    return "Sigla del documento";
				
				}
				public String TIPO_DOCUMENTOPattern(){
				
					return "";
				
				}
				public String TIPO_DOCUMENTOOriginalDbColumnName(){
				
					return "TIPO_DOCUMENTO";
				
				}

				
			    public String DOCUMENTO;

				public String getDOCUMENTO () {
					return this.DOCUMENTO;
				}

				public Boolean DOCUMENTOIsNullable(){
				    return false;
				}
				public Boolean DOCUMENTOIsKey(){
				    return false;
				}
				public Integer DOCUMENTOLength(){
				    return 20;
				}
				public Integer DOCUMENTOPrecision(){
				    return 0;
				}
				public String DOCUMENTODefault(){
				
					return null;
				
				}
				public String DOCUMENTOComment(){
				
				    return "Documento de la Persona";
				
				}
				public String DOCUMENTOPattern(){
				
					return "";
				
				}
				public String DOCUMENTOOriginalDbColumnName(){
				
					return "DOCUMENTO";
				
				}

				
			    public String SEXO;

				public String getSEXO () {
					return this.SEXO;
				}

				public Boolean SEXOIsNullable(){
				    return false;
				}
				public Boolean SEXOIsKey(){
				    return false;
				}
				public Integer SEXOLength(){
				    return 20;
				}
				public Integer SEXOPrecision(){
				    return 0;
				}
				public String SEXODefault(){
				
					return null;
				
				}
				public String SEXOComment(){
				
				    return "Nombre del Sexo";
				
				}
				public String SEXOPattern(){
				
					return "";
				
				}
				public String SEXOOriginalDbColumnName(){
				
					return "SEXO";
				
				}

				
			    public Integer EDAD;

				public Integer getEDAD () {
					return this.EDAD;
				}

				public Boolean EDADIsNullable(){
				    return true;
				}
				public Boolean EDADIsKey(){
				    return false;
				}
				public Integer EDADLength(){
				    return 7;
				}
				public Integer EDADPrecision(){
				    return 0;
				}
				public String EDADDefault(){
				
					return null;
				
				}
				public String EDADComment(){
				
				    return "Fecha de Nacimiento de la Persona";
				
				}
				public String EDADPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String EDADOriginalDbColumnName(){
				
					return "EDAD";
				
				}

				
			    public String PLAN_AFILIACION;

				public String getPLAN_AFILIACION () {
					return this.PLAN_AFILIACION;
				}

				public Boolean PLAN_AFILIACIONIsNullable(){
				    return false;
				}
				public Boolean PLAN_AFILIACIONIsKey(){
				    return false;
				}
				public Integer PLAN_AFILIACIONLength(){
				    return 250;
				}
				public Integer PLAN_AFILIACIONPrecision(){
				    return 0;
				}
				public String PLAN_AFILIACIONDefault(){
				
					return "'null'";
				
				}
				public String PLAN_AFILIACIONComment(){
				
				    return "Descripcion de la relacion del tipo y la vinculacion";
				
				}
				public String PLAN_AFILIACIONPattern(){
				
					return "";
				
				}
				public String PLAN_AFILIACIONOriginalDbColumnName(){
				
					return "PLAN_AFILIACION";
				
				}

				
			    public String PREGUNTA;

				public String getPREGUNTA () {
					return this.PREGUNTA;
				}

				public Boolean PREGUNTAIsNullable(){
				    return false;
				}
				public Boolean PREGUNTAIsKey(){
				    return false;
				}
				public Integer PREGUNTALength(){
				    return 1024;
				}
				public Integer PREGUNTAPrecision(){
				    return 0;
				}
				public String PREGUNTADefault(){
				
					return null;
				
				}
				public String PREGUNTAComment(){
				
				    return "Preguntas de la encuesta";
				
				}
				public String PREGUNTAPattern(){
				
					return "";
				
				}
				public String PREGUNTAOriginalDbColumnName(){
				
					return "PREGUNTA";
				
				}

				
			    public String OPCION1;

				public String getOPCION1 () {
					return this.OPCION1;
				}

				public Boolean OPCION1IsNullable(){
				    return true;
				}
				public Boolean OPCION1IsKey(){
				    return false;
				}
				public Integer OPCION1Length(){
				    return 150;
				}
				public Integer OPCION1Precision(){
				    return 0;
				}
				public String OPCION1Default(){
				
					return null;
				
				}
				public String OPCION1Comment(){
				
				    return "FK - GEN_TRESPUESTAS (Selecci\u00F3n multiple con unica respuesta)";
				
				}
				public String OPCION1Pattern(){
				
					return "";
				
				}
				public String OPCION1OriginalDbColumnName(){
				
					return "OPCION1";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
							result = prime * result + (int) this.AFILIADOS_ID;
						
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row_info_encuestas_outStruct other = (row_info_encuestas_outStruct) obj;
		
						if (this.AFILIADOS_ID != other.AFILIADOS_ID)
							return false;
					

		return true;
    }

	public void copyDataTo(row_info_encuestas_outStruct other) {

		other.AFILIADOS_ID = this.AFILIADOS_ID;
	            other.PRIMER_NOMBRE = this.PRIMER_NOMBRE;
	            other.SEGUNDO_NOMBRE = this.SEGUNDO_NOMBRE;
	            other.PRIMER_APELLIDO = this.PRIMER_APELLIDO;
	            other.SEGUNDO_APELLIDO = this.SEGUNDO_APELLIDO;
	            other.TIPO_DOCUMENTO = this.TIPO_DOCUMENTO;
	            other.DOCUMENTO = this.DOCUMENTO;
	            other.SEXO = this.SEXO;
	            other.EDAD = this.EDAD;
	            other.PLAN_AFILIACION = this.PLAN_AFILIACION;
	            other.PREGUNTA = this.PREGUNTA;
	            other.OPCION1 = this.OPCION1;
	            
	}

	public void copyKeysDataTo(row_info_encuestas_outStruct other) {

		other.AFILIADOS_ID = this.AFILIADOS_ID;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_PRINCIPAL_Consolidado_Salud.length) {
				if(length < 1024 && commonByteArray_AFI_PRINCIPAL_Consolidado_Salud.length == 0) {
   					commonByteArray_AFI_PRINCIPAL_Consolidado_Salud = new byte[1024];
				} else {
   					commonByteArray_AFI_PRINCIPAL_Consolidado_Salud = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_PRINCIPAL_Consolidado_Salud, 0, length);
			strReturn = new String(commonByteArray_AFI_PRINCIPAL_Consolidado_Salud, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_PRINCIPAL_Consolidado_Salud.length) {
				if(length < 1024 && commonByteArray_AFI_PRINCIPAL_Consolidado_Salud.length == 0) {
   					commonByteArray_AFI_PRINCIPAL_Consolidado_Salud = new byte[1024];
				} else {
   					commonByteArray_AFI_PRINCIPAL_Consolidado_Salud = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_PRINCIPAL_Consolidado_Salud, 0, length);
			strReturn = new String(commonByteArray_AFI_PRINCIPAL_Consolidado_Salud, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_PRINCIPAL_Consolidado_Salud) {

        	try {

        		int length = 0;
		
			        this.AFILIADOS_ID = dis.readInt();
					
					this.PRIMER_NOMBRE = readString(dis);
					
					this.SEGUNDO_NOMBRE = readString(dis);
					
					this.PRIMER_APELLIDO = readString(dis);
					
					this.SEGUNDO_APELLIDO = readString(dis);
					
					this.TIPO_DOCUMENTO = readString(dis);
					
					this.DOCUMENTO = readString(dis);
					
					this.SEXO = readString(dis);
					
						this.EDAD = readInteger(dis);
					
					this.PLAN_AFILIACION = readString(dis);
					
					this.PREGUNTA = readString(dis);
					
					this.OPCION1 = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_PRINCIPAL_Consolidado_Salud) {

        	try {

        		int length = 0;
		
			        this.AFILIADOS_ID = dis.readInt();
					
					this.PRIMER_NOMBRE = readString(dis);
					
					this.SEGUNDO_NOMBRE = readString(dis);
					
					this.PRIMER_APELLIDO = readString(dis);
					
					this.SEGUNDO_APELLIDO = readString(dis);
					
					this.TIPO_DOCUMENTO = readString(dis);
					
					this.DOCUMENTO = readString(dis);
					
					this.SEXO = readString(dis);
					
						this.EDAD = readInteger(dis);
					
					this.PLAN_AFILIACION = readString(dis);
					
					this.PREGUNTA = readString(dis);
					
					this.OPCION1 = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.AFILIADOS_ID);
					
					// String
				
						writeString(this.PRIMER_NOMBRE,dos);
					
					// String
				
						writeString(this.SEGUNDO_NOMBRE,dos);
					
					// String
				
						writeString(this.PRIMER_APELLIDO,dos);
					
					// String
				
						writeString(this.SEGUNDO_APELLIDO,dos);
					
					// String
				
						writeString(this.TIPO_DOCUMENTO,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// String
				
						writeString(this.SEXO,dos);
					
					// Integer
				
						writeInteger(this.EDAD,dos);
					
					// String
				
						writeString(this.PLAN_AFILIACION,dos);
					
					// String
				
						writeString(this.PREGUNTA,dos);
					
					// String
				
						writeString(this.OPCION1,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.AFILIADOS_ID);
					
					// String
				
						writeString(this.PRIMER_NOMBRE,dos);
					
					// String
				
						writeString(this.SEGUNDO_NOMBRE,dos);
					
					// String
				
						writeString(this.PRIMER_APELLIDO,dos);
					
					// String
				
						writeString(this.SEGUNDO_APELLIDO,dos);
					
					// String
				
						writeString(this.TIPO_DOCUMENTO,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// String
				
						writeString(this.SEXO,dos);
					
					// Integer
				
						writeInteger(this.EDAD,dos);
					
					// String
				
						writeString(this.PLAN_AFILIACION,dos);
					
					// String
				
						writeString(this.PREGUNTA,dos);
					
					// String
				
						writeString(this.OPCION1,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("AFILIADOS_ID="+String.valueOf(AFILIADOS_ID));
		sb.append(",PRIMER_NOMBRE="+PRIMER_NOMBRE);
		sb.append(",SEGUNDO_NOMBRE="+SEGUNDO_NOMBRE);
		sb.append(",PRIMER_APELLIDO="+PRIMER_APELLIDO);
		sb.append(",SEGUNDO_APELLIDO="+SEGUNDO_APELLIDO);
		sb.append(",TIPO_DOCUMENTO="+TIPO_DOCUMENTO);
		sb.append(",DOCUMENTO="+DOCUMENTO);
		sb.append(",SEXO="+SEXO);
		sb.append(",EDAD="+String.valueOf(EDAD));
		sb.append(",PLAN_AFILIACION="+PLAN_AFILIACION);
		sb.append(",PREGUNTA="+PREGUNTA);
		sb.append(",OPCION1="+OPCION1);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row_info_encuestas_outStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.AFILIADOS_ID, other.AFILIADOS_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row_info_encuesta_inStruct implements routines.system.IPersistableComparableLookupRow<row_info_encuesta_inStruct> {
    final static byte[] commonByteArrayLock_AFI_PRINCIPAL_Consolidado_Salud = new byte[0];
    static byte[] commonByteArray_AFI_PRINCIPAL_Consolidado_Salud = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public Integer TIPO_PREGUNTA_ID;

				public Integer getTIPO_PREGUNTA_ID () {
					return this.TIPO_PREGUNTA_ID;
				}

				public Boolean TIPO_PREGUNTA_IDIsNullable(){
				    return true;
				}
				public Boolean TIPO_PREGUNTA_IDIsKey(){
				    return false;
				}
				public Integer TIPO_PREGUNTA_IDLength(){
				    return 0;
				}
				public Integer TIPO_PREGUNTA_IDPrecision(){
				    return 0;
				}
				public String TIPO_PREGUNTA_IDDefault(){
				
					return null;
				
				}
				public String TIPO_PREGUNTA_IDComment(){
				
				    return "";
				
				}
				public String TIPO_PREGUNTA_IDPattern(){
				
					return "";
				
				}
				public String TIPO_PREGUNTA_IDOriginalDbColumnName(){
				
					return "TIPO_PREGUNTA_ID";
				
				}

				
			    public Integer RESPUESTA_ID;

				public Integer getRESPUESTA_ID () {
					return this.RESPUESTA_ID;
				}

				public Boolean RESPUESTA_IDIsNullable(){
				    return true;
				}
				public Boolean RESPUESTA_IDIsKey(){
				    return false;
				}
				public Integer RESPUESTA_IDLength(){
				    return 0;
				}
				public Integer RESPUESTA_IDPrecision(){
				    return 0;
				}
				public String RESPUESTA_IDDefault(){
				
					return null;
				
				}
				public String RESPUESTA_IDComment(){
				
				    return "";
				
				}
				public String RESPUESTA_IDPattern(){
				
					return "";
				
				}
				public String RESPUESTA_IDOriginalDbColumnName(){
				
					return "RESPUESTA_ID";
				
				}

				
			    public Integer AFILIADOS_ID;

				public Integer getAFILIADOS_ID () {
					return this.AFILIADOS_ID;
				}

				public Boolean AFILIADOS_IDIsNullable(){
				    return true;
				}
				public Boolean AFILIADOS_IDIsKey(){
				    return false;
				}
				public Integer AFILIADOS_IDLength(){
				    return 0;
				}
				public Integer AFILIADOS_IDPrecision(){
				    return 0;
				}
				public String AFILIADOS_IDDefault(){
				
					return null;
				
				}
				public String AFILIADOS_IDComment(){
				
				    return "";
				
				}
				public String AFILIADOS_IDPattern(){
				
					return "";
				
				}
				public String AFILIADOS_IDOriginalDbColumnName(){
				
					return "AFILIADOS_ID";
				
				}

				
			    public Integer PREGUNTAS_ID;

				public Integer getPREGUNTAS_ID () {
					return this.PREGUNTAS_ID;
				}

				public Boolean PREGUNTAS_IDIsNullable(){
				    return true;
				}
				public Boolean PREGUNTAS_IDIsKey(){
				    return false;
				}
				public Integer PREGUNTAS_IDLength(){
				    return 0;
				}
				public Integer PREGUNTAS_IDPrecision(){
				    return 0;
				}
				public String PREGUNTAS_IDDefault(){
				
					return null;
				
				}
				public String PREGUNTAS_IDComment(){
				
				    return "";
				
				}
				public String PREGUNTAS_IDPattern(){
				
					return "";
				
				}
				public String PREGUNTAS_IDOriginalDbColumnName(){
				
					return "PREGUNTAS_ID";
				
				}

				
			    public String OPCION1;

				public String getOPCION1 () {
					return this.OPCION1;
				}

				public Boolean OPCION1IsNullable(){
				    return true;
				}
				public Boolean OPCION1IsKey(){
				    return false;
				}
				public Integer OPCION1Length(){
				    return 0;
				}
				public Integer OPCION1Precision(){
				    return 0;
				}
				public String OPCION1Default(){
				
					return null;
				
				}
				public String OPCION1Comment(){
				
				    return "";
				
				}
				public String OPCION1Pattern(){
				
					return "";
				
				}
				public String OPCION1OriginalDbColumnName(){
				
					return "OPCION1";
				
				}

				
			    public String OPCION2;

				public String getOPCION2 () {
					return this.OPCION2;
				}

				public Boolean OPCION2IsNullable(){
				    return true;
				}
				public Boolean OPCION2IsKey(){
				    return false;
				}
				public Integer OPCION2Length(){
				    return 0;
				}
				public Integer OPCION2Precision(){
				    return 0;
				}
				public String OPCION2Default(){
				
					return null;
				
				}
				public String OPCION2Comment(){
				
				    return "";
				
				}
				public String OPCION2Pattern(){
				
					return "";
				
				}
				public String OPCION2OriginalDbColumnName(){
				
					return "OPCION2";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.AFILIADOS_ID == null) ? 0 : this.AFILIADOS_ID.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row_info_encuesta_inStruct other = (row_info_encuesta_inStruct) obj;
		
						if (this.AFILIADOS_ID == null) {
							if (other.AFILIADOS_ID != null)
								return false;
						
						} else if (!this.AFILIADOS_ID.equals(other.AFILIADOS_ID))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row_info_encuesta_inStruct other) {

		other.TIPO_PREGUNTA_ID = this.TIPO_PREGUNTA_ID;
	            other.RESPUESTA_ID = this.RESPUESTA_ID;
	            other.AFILIADOS_ID = this.AFILIADOS_ID;
	            other.PREGUNTAS_ID = this.PREGUNTAS_ID;
	            other.OPCION1 = this.OPCION1;
	            other.OPCION2 = this.OPCION2;
	            
	}

	public void copyKeysDataTo(row_info_encuesta_inStruct other) {

		other.AFILIADOS_ID = this.AFILIADOS_ID;
	            	
	}



	private Integer readInteger(DataInputStream dis, ObjectInputStream ois) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
			intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		Integer intReturn;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
			intReturn = unmarshaller.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, DataOutputStream dos,org.jboss.marshalling.Marshaller marshaller ) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}
	
	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			unmarshaller.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private void writeString(String str, DataOutputStream dos, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_PRINCIPAL_Consolidado_Salud) {

        	try {

        		int length = 0;
		
						this.AFILIADOS_ID = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_PRINCIPAL_Consolidado_Salud) {

        	try {

        		int length = 0;
		
						this.AFILIADOS_ID = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.AFILIADOS_ID,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.AFILIADOS_ID,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.TIPO_PREGUNTA_ID = readInteger(dis,ois);
					
						this.RESPUESTA_ID = readInteger(dis,ois);
					
						this.PREGUNTAS_ID = readInteger(dis,ois);
					
						this.OPCION1 = readString(dis,ois);
					
						this.OPCION2 = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		
						this.TIPO_PREGUNTA_ID = readInteger(dis,objectIn);
					
						this.RESPUESTA_ID = readInteger(dis,objectIn);
					
						this.PREGUNTAS_ID = readInteger(dis,objectIn);
					
						this.OPCION1 = readString(dis,objectIn);
					
						this.OPCION2 = readString(dis,objectIn);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
					writeInteger(this.TIPO_PREGUNTA_ID, dos, oos);
					
					writeInteger(this.RESPUESTA_ID, dos, oos);
					
					writeInteger(this.PREGUNTAS_ID, dos, oos);
					
						writeString(this.OPCION1, dos, oos);
					
						writeString(this.OPCION2, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
					writeInteger(this.TIPO_PREGUNTA_ID, dos, objectOut);
					
					writeInteger(this.RESPUESTA_ID, dos, objectOut);
					
					writeInteger(this.PREGUNTAS_ID, dos, objectOut);
					
						writeString(this.OPCION1, dos, objectOut);
					
						writeString(this.OPCION2, dos, objectOut);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("TIPO_PREGUNTA_ID="+String.valueOf(TIPO_PREGUNTA_ID));
		sb.append(",RESPUESTA_ID="+String.valueOf(RESPUESTA_ID));
		sb.append(",AFILIADOS_ID="+String.valueOf(AFILIADOS_ID));
		sb.append(",PREGUNTAS_ID="+String.valueOf(PREGUNTAS_ID));
		sb.append(",OPCION1="+OPCION1);
		sb.append(",OPCION2="+OPCION2);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row_info_encuesta_inStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.AFILIADOS_ID, other.AFILIADOS_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class after_tHashInput_2Struct implements routines.system.IPersistableRow<after_tHashInput_2Struct> {
    final static byte[] commonByteArrayLock_AFI_PRINCIPAL_Consolidado_Salud = new byte[0];
    static byte[] commonByteArray_AFI_PRINCIPAL_Consolidado_Salud = new byte[0];

	
			    public Integer TIPO_PREGUNTA_ID;

				public Integer getTIPO_PREGUNTA_ID () {
					return this.TIPO_PREGUNTA_ID;
				}

				public Boolean TIPO_PREGUNTA_IDIsNullable(){
				    return true;
				}
				public Boolean TIPO_PREGUNTA_IDIsKey(){
				    return false;
				}
				public Integer TIPO_PREGUNTA_IDLength(){
				    return 0;
				}
				public Integer TIPO_PREGUNTA_IDPrecision(){
				    return 0;
				}
				public String TIPO_PREGUNTA_IDDefault(){
				
					return null;
				
				}
				public String TIPO_PREGUNTA_IDComment(){
				
				    return "";
				
				}
				public String TIPO_PREGUNTA_IDPattern(){
				
					return "";
				
				}
				public String TIPO_PREGUNTA_IDOriginalDbColumnName(){
				
					return "TIPO_PREGUNTA_ID";
				
				}

				
			    public Integer RESPUESTA_ID;

				public Integer getRESPUESTA_ID () {
					return this.RESPUESTA_ID;
				}

				public Boolean RESPUESTA_IDIsNullable(){
				    return true;
				}
				public Boolean RESPUESTA_IDIsKey(){
				    return false;
				}
				public Integer RESPUESTA_IDLength(){
				    return 0;
				}
				public Integer RESPUESTA_IDPrecision(){
				    return 0;
				}
				public String RESPUESTA_IDDefault(){
				
					return null;
				
				}
				public String RESPUESTA_IDComment(){
				
				    return "";
				
				}
				public String RESPUESTA_IDPattern(){
				
					return "";
				
				}
				public String RESPUESTA_IDOriginalDbColumnName(){
				
					return "RESPUESTA_ID";
				
				}

				
			    public Integer AFILIADOS_ID;

				public Integer getAFILIADOS_ID () {
					return this.AFILIADOS_ID;
				}

				public Boolean AFILIADOS_IDIsNullable(){
				    return true;
				}
				public Boolean AFILIADOS_IDIsKey(){
				    return false;
				}
				public Integer AFILIADOS_IDLength(){
				    return 0;
				}
				public Integer AFILIADOS_IDPrecision(){
				    return 0;
				}
				public String AFILIADOS_IDDefault(){
				
					return null;
				
				}
				public String AFILIADOS_IDComment(){
				
				    return "";
				
				}
				public String AFILIADOS_IDPattern(){
				
					return "";
				
				}
				public String AFILIADOS_IDOriginalDbColumnName(){
				
					return "AFILIADOS_ID";
				
				}

				
			    public Integer PREGUNTAS_ID;

				public Integer getPREGUNTAS_ID () {
					return this.PREGUNTAS_ID;
				}

				public Boolean PREGUNTAS_IDIsNullable(){
				    return true;
				}
				public Boolean PREGUNTAS_IDIsKey(){
				    return false;
				}
				public Integer PREGUNTAS_IDLength(){
				    return 0;
				}
				public Integer PREGUNTAS_IDPrecision(){
				    return 0;
				}
				public String PREGUNTAS_IDDefault(){
				
					return null;
				
				}
				public String PREGUNTAS_IDComment(){
				
				    return "";
				
				}
				public String PREGUNTAS_IDPattern(){
				
					return "";
				
				}
				public String PREGUNTAS_IDOriginalDbColumnName(){
				
					return "PREGUNTAS_ID";
				
				}

				
			    public String OPCION1;

				public String getOPCION1 () {
					return this.OPCION1;
				}

				public Boolean OPCION1IsNullable(){
				    return true;
				}
				public Boolean OPCION1IsKey(){
				    return false;
				}
				public Integer OPCION1Length(){
				    return 0;
				}
				public Integer OPCION1Precision(){
				    return 0;
				}
				public String OPCION1Default(){
				
					return null;
				
				}
				public String OPCION1Comment(){
				
				    return "";
				
				}
				public String OPCION1Pattern(){
				
					return "";
				
				}
				public String OPCION1OriginalDbColumnName(){
				
					return "OPCION1";
				
				}

				
			    public String OPCION2;

				public String getOPCION2 () {
					return this.OPCION2;
				}

				public Boolean OPCION2IsNullable(){
				    return true;
				}
				public Boolean OPCION2IsKey(){
				    return false;
				}
				public Integer OPCION2Length(){
				    return 0;
				}
				public Integer OPCION2Precision(){
				    return 0;
				}
				public String OPCION2Default(){
				
					return null;
				
				}
				public String OPCION2Comment(){
				
				    return "";
				
				}
				public String OPCION2Pattern(){
				
					return "";
				
				}
				public String OPCION2OriginalDbColumnName(){
				
					return "OPCION2";
				
				}

				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_PRINCIPAL_Consolidado_Salud.length) {
				if(length < 1024 && commonByteArray_AFI_PRINCIPAL_Consolidado_Salud.length == 0) {
   					commonByteArray_AFI_PRINCIPAL_Consolidado_Salud = new byte[1024];
				} else {
   					commonByteArray_AFI_PRINCIPAL_Consolidado_Salud = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_PRINCIPAL_Consolidado_Salud, 0, length);
			strReturn = new String(commonByteArray_AFI_PRINCIPAL_Consolidado_Salud, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_PRINCIPAL_Consolidado_Salud.length) {
				if(length < 1024 && commonByteArray_AFI_PRINCIPAL_Consolidado_Salud.length == 0) {
   					commonByteArray_AFI_PRINCIPAL_Consolidado_Salud = new byte[1024];
				} else {
   					commonByteArray_AFI_PRINCIPAL_Consolidado_Salud = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_PRINCIPAL_Consolidado_Salud, 0, length);
			strReturn = new String(commonByteArray_AFI_PRINCIPAL_Consolidado_Salud, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_PRINCIPAL_Consolidado_Salud) {

        	try {

        		int length = 0;
		
						this.TIPO_PREGUNTA_ID = readInteger(dis);
					
						this.RESPUESTA_ID = readInteger(dis);
					
						this.AFILIADOS_ID = readInteger(dis);
					
						this.PREGUNTAS_ID = readInteger(dis);
					
					this.OPCION1 = readString(dis);
					
					this.OPCION2 = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_PRINCIPAL_Consolidado_Salud) {

        	try {

        		int length = 0;
		
						this.TIPO_PREGUNTA_ID = readInteger(dis);
					
						this.RESPUESTA_ID = readInteger(dis);
					
						this.AFILIADOS_ID = readInteger(dis);
					
						this.PREGUNTAS_ID = readInteger(dis);
					
					this.OPCION1 = readString(dis);
					
					this.OPCION2 = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.TIPO_PREGUNTA_ID,dos);
					
					// Integer
				
						writeInteger(this.RESPUESTA_ID,dos);
					
					// Integer
				
						writeInteger(this.AFILIADOS_ID,dos);
					
					// Integer
				
						writeInteger(this.PREGUNTAS_ID,dos);
					
					// String
				
						writeString(this.OPCION1,dos);
					
					// String
				
						writeString(this.OPCION2,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.TIPO_PREGUNTA_ID,dos);
					
					// Integer
				
						writeInteger(this.RESPUESTA_ID,dos);
					
					// Integer
				
						writeInteger(this.AFILIADOS_ID,dos);
					
					// Integer
				
						writeInteger(this.PREGUNTAS_ID,dos);
					
					// String
				
						writeString(this.OPCION1,dos);
					
					// String
				
						writeString(this.OPCION2,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("TIPO_PREGUNTA_ID="+String.valueOf(TIPO_PREGUNTA_ID));
		sb.append(",RESPUESTA_ID="+String.valueOf(RESPUESTA_ID));
		sb.append(",AFILIADOS_ID="+String.valueOf(AFILIADOS_ID));
		sb.append(",PREGUNTAS_ID="+String.valueOf(PREGUNTAS_ID));
		sb.append(",OPCION1="+OPCION1);
		sb.append(",OPCION2="+OPCION2);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(after_tHashInput_2Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tHashInput_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tHashInput_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;


		tOracleInput_8Process(globalMap);
		tHashInput_4Process(globalMap);
		tHashInput_5Process(globalMap);
		tHashInput_6Process(globalMap);
		tHashInput_3Process(globalMap);

		row_info_encuesta_inStruct row_info_encuesta_in = new row_info_encuesta_inStruct();
row_info_encuestas_outStruct row_info_encuestas_out = new row_info_encuestas_outStruct();





	
	/**
	 * [tPivotToColumnsDelimited_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tPivotToColumnsDelimited_1", false);
		start_Hash.put("tPivotToColumnsDelimited_1", System.currentTimeMillis());
		
	
	currentComponent="tPivotToColumnsDelimited_1";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row_info_encuestas_out");
					}
				
		int tos_count_tPivotToColumnsDelimited_1 = 0;
		


int nb_line_tPivotToColumnsDelimited_1 = 0;
resourceMap.put("nb_line_tPivotToColumnsDelimited_1", nb_line_tPivotToColumnsDelimited_1); 
int nb_line_out_tPivotToColumnsDelimited_1 = 0;

String fileName_tPivotToColumnsDelimited_1 = (new java.io.File(context.fileSystem_Path + "/" + context.fileSystem_Area +"/"+ context.infoNombreArchivo)).getAbsolutePath().replace("\\","/");
resourceMap.put("fileName_tPivotToColumnsDelimited_1", fileName_tPivotToColumnsDelimited_1); 
String fullName_tPivotToColumnsDelimited_1 = null;
String extension_tPivotToColumnsDelimited_1 = null;
String directory_tPivotToColumnsDelimited_1 = null;
if((fileName_tPivotToColumnsDelimited_1.indexOf("/") != -1)) {
    if(fileName_tPivotToColumnsDelimited_1.lastIndexOf(".") < fileName_tPivotToColumnsDelimited_1.lastIndexOf("/")) {
        fullName_tPivotToColumnsDelimited_1 = fileName_tPivotToColumnsDelimited_1;
        extension_tPivotToColumnsDelimited_1 = "";
    } else {
        fullName_tPivotToColumnsDelimited_1 = fileName_tPivotToColumnsDelimited_1.substring(0, fileName_tPivotToColumnsDelimited_1.lastIndexOf("."));
        extension_tPivotToColumnsDelimited_1 = fileName_tPivotToColumnsDelimited_1.substring(fileName_tPivotToColumnsDelimited_1.lastIndexOf("."));
    }           
    directory_tPivotToColumnsDelimited_1 = fileName_tPivotToColumnsDelimited_1.substring(0, fileName_tPivotToColumnsDelimited_1.lastIndexOf("/"));            
} else {
    if(fileName_tPivotToColumnsDelimited_1.lastIndexOf(".") != -1) {
        fullName_tPivotToColumnsDelimited_1 = fileName_tPivotToColumnsDelimited_1.substring(0, fileName_tPivotToColumnsDelimited_1.lastIndexOf("."));
        extension_tPivotToColumnsDelimited_1 = fileName_tPivotToColumnsDelimited_1.substring(fileName_tPivotToColumnsDelimited_1.lastIndexOf("."));
    } else {
        fullName_tPivotToColumnsDelimited_1 = fileName_tPivotToColumnsDelimited_1;
        extension_tPivotToColumnsDelimited_1 = "";
    }
    directory_tPivotToColumnsDelimited_1 = "";
}
	 //create directory only if not exists
	if(directory_tPivotToColumnsDelimited_1 != null && directory_tPivotToColumnsDelimited_1.trim().length() != 0) {
	    java.io.File dir_tPivotToColumnsDelimited_1 = new java.io.File(directory_tPivotToColumnsDelimited_1);
	    if(!dir_tPivotToColumnsDelimited_1.exists()) {
		dir_tPivotToColumnsDelimited_1.mkdirs();
	    }
	}
	java.io.FileOutputStream fos_tPivotToColumnsDelimited_1 = null;
    java.io.OutputStreamWriter osw_tPivotToColumnsDelimited_1 = null;
    java.io.BufferedWriter outtPivotToColumnsDelimited_1 = null;
	outtPivotToColumnsDelimited_1 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(new java.io.FileOutputStream(fileName_tPivotToColumnsDelimited_1, false),"ISO-8859-15"));
	resourceMap.put("outtPivotToColumnsDelimited_1", outtPivotToColumnsDelimited_1);


java.io.File filetPivotToColumnsDelimited_1 = new java.io.File(fileName_tPivotToColumnsDelimited_1);

boolean pivot_ExiststPivotToColumnsDelimited_1 = false;

StringBuilder pivot_KeytPivotToColumnsDelimited_1 = new StringBuilder();

java.util.List<String> pivot_KeystPivotToColumnsDelimited_1 = new java.util.ArrayList<String>();

boolean group_ExiststPivotToColumnsDelimited_1 = false;

StringBuilder group_KeytPivotToColumnsDelimited_1 = new StringBuilder();

java.util.Set<java.util.List<String>> group_KeystPivotToColumnsDelimited_1 = new java.util.LinkedHashSet<java.util.List<String>>();

java.util.List<String> gKvaluetPivotToColumnsDelimited_1 = null;

java.util.List<String> aggValuestPivotToColumnsDelimited_1 = null;

java.util.Map<java.util.List<String>,java.util.List<String>> aggregationtPivotToColumnsDelimited_1 = new java.util.HashMap<java.util.List<String>,java.util.List<String>>();


 



/**
 * [tPivotToColumnsDelimited_1 begin ] stop
 */



	
	/**
	 * [tMap_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_1", false);
		start_Hash.put("tMap_1", System.currentTimeMillis());
		
	
	currentComponent="tMap_1";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row_info_encuesta_in");
					}
				
		int tos_count_tMap_1 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row_gen_afiliados_inStruct> tHash_Lookup_row_gen_afiliados_in = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row_gen_afiliados_inStruct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row_gen_afiliados_inStruct>) 
					globalMap.get( "tHash_Lookup_row_gen_afiliados_in" ))
					;					
					
	
		tHash_Lookup_row_gen_afiliados_in.initGet();
	

row_gen_afiliados_inStruct row_gen_afiliados_inHashKey = new row_gen_afiliados_inStruct();
row_gen_afiliados_inStruct row_gen_afiliados_inDefault = new row_gen_afiliados_inStruct();
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row_gen_preguntas_inStruct> tHash_Lookup_row_gen_preguntas_in = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row_gen_preguntas_inStruct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row_gen_preguntas_inStruct>) 
					globalMap.get( "tHash_Lookup_row_gen_preguntas_in" ))
					;					
					
	

row_gen_preguntas_inStruct row_gen_preguntas_inHashKey = new row_gen_preguntas_inStruct();
row_gen_preguntas_inStruct row_gen_preguntas_inDefault = new row_gen_preguntas_inStruct();
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row_gen_tdocumentos_inStruct> tHash_Lookup_row_gen_tdocumentos_in = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row_gen_tdocumentos_inStruct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row_gen_tdocumentos_inStruct>) 
					globalMap.get( "tHash_Lookup_row_gen_tdocumentos_in" ))
					;					
					
	

row_gen_tdocumentos_inStruct row_gen_tdocumentos_inHashKey = new row_gen_tdocumentos_inStruct();
row_gen_tdocumentos_inStruct row_gen_tdocumentos_inDefault = new row_gen_tdocumentos_inStruct();
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row_afi_planafiliaciones_inStruct> tHash_Lookup_row_afi_planafiliaciones_in = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row_afi_planafiliaciones_inStruct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row_afi_planafiliaciones_inStruct>) 
					globalMap.get( "tHash_Lookup_row_afi_planafiliaciones_in" ))
					;					
					
	

row_afi_planafiliaciones_inStruct row_afi_planafiliaciones_inHashKey = new row_afi_planafiliaciones_inStruct();
row_afi_planafiliaciones_inStruct row_afi_planafiliaciones_inDefault = new row_afi_planafiliaciones_inStruct();
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row_gen_sexos_inStruct> tHash_Lookup_row_gen_sexos_in = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row_gen_sexos_inStruct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row_gen_sexos_inStruct>) 
					globalMap.get( "tHash_Lookup_row_gen_sexos_in" ))
					;					
					
	

row_gen_sexos_inStruct row_gen_sexos_inHashKey = new row_gen_sexos_inStruct();
row_gen_sexos_inStruct row_gen_sexos_inDefault = new row_gen_sexos_inStruct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_1__Struct  {
}
Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
// ###############################

// ###############################
// # Outputs initialization
row_info_encuestas_outStruct row_info_encuestas_out_tmp = new row_info_encuestas_outStruct();
// ###############################

        
        



        









 



/**
 * [tMap_1 begin ] stop
 */



	
	/**
	 * [tHashInput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_2", false);
		start_Hash.put("tHashInput_2", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_2";
	
	
		int tos_count_tHashInput_2 = 0;
		


int nb_line_tHashInput_2 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_2=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row17Struct> tHashFile_tHashInput_2 = mf_tHashInput_2.getAdvancedMemoryHashFile("tHashFile_Consolidado_Salud_" + pid +"_tHashOutput_7");
if(tHashFile_tHashInput_2==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<row17Struct> iterator_tHashInput_2 = tHashFile_tHashInput_2.iterator();
while (iterator_tHashInput_2.hasNext()) {
    row17Struct next_tHashInput_2 = iterator_tHashInput_2.next();

	row_info_encuesta_in.TIPO_PREGUNTA_ID = next_tHashInput_2.TIPO_PREGUNTA_ID;
	row_info_encuesta_in.RESPUESTA_ID = next_tHashInput_2.RESPUESTA_ID;
	row_info_encuesta_in.AFILIADOS_ID = next_tHashInput_2.AFILIADOS_ID;
	row_info_encuesta_in.PREGUNTAS_ID = next_tHashInput_2.PREGUNTAS_ID;
	row_info_encuesta_in.OPCION1 = next_tHashInput_2.OPCION1;
	row_info_encuesta_in.OPCION2 = next_tHashInput_2.OPCION2;

 



/**
 * [tHashInput_2 begin ] stop
 */
	
	/**
	 * [tHashInput_2 main ] start
	 */

	

	
	
	currentComponent="tHashInput_2";
	
	

 


	tos_count_tHashInput_2++;

/**
 * [tHashInput_2 main ] stop
 */
	
	/**
	 * [tHashInput_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashInput_2";
	
	

 



/**
 * [tHashInput_2 process_data_begin ] stop
 */

	
	/**
	 * [tMap_1 main ] start
	 */

	

	
	
	currentComponent="tMap_1";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row_info_encuesta_in"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;
		
						row_gen_afiliados_inStruct row_gen_afiliados_in = null;
					
						row_gen_preguntas_inStruct row_gen_preguntas_in = null;
					
						row_gen_tdocumentos_inStruct row_gen_tdocumentos_in = null;
					
						row_afi_planafiliaciones_inStruct row_afi_planafiliaciones_in = null;
					
						row_gen_sexos_inStruct row_gen_sexos_in = null;
					
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_1 = false;
		boolean mainRowRejected_tMap_1 = false;
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row_gen_afiliados_in" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow_gen_afiliados_in = false;
       		  	    	
       		  	    	
 							row_gen_afiliados_inStruct row_gen_afiliados_inObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_1) { // G_TM_M_020

								

								
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row_gen_afiliados_in.lookup( row_gen_afiliados_inHashKey );

	  							

	  							

 								
								  
								  if(!tHash_Lookup_row_gen_afiliados_in.hasNext()) { // G_TM_M_090

  								
		  				
	  								
						
									
	
		  								forceLooprow_gen_afiliados_in = true;
	  					
  									
  									  		
 								
								  
								  } // G_TM_M_090

  								



							} // G_TM_M_020
			           		  	  
							
								
								else { // G 20 - G 21
   									forceLooprow_gen_afiliados_in = true;
			           		  	} // G 21
                    		  	
                    		

							
                    		  	 
							

								while ((tHash_Lookup_row_gen_afiliados_in != null && tHash_Lookup_row_gen_afiliados_in.hasNext()) || forceLooprow_gen_afiliados_in) { // G_TM_M_043

								
									 // CALL close loop of lookup 'row_gen_afiliados_in'
									
                    		  	 
							   
                    		  	 
	       		  	    	row_gen_afiliados_inStruct fromLookup_row_gen_afiliados_in = null;
							row_gen_afiliados_in = row_gen_afiliados_inDefault;
										 
							
								
								if(!forceLooprow_gen_afiliados_in) { // G 46
								
							
								 
							
								
								fromLookup_row_gen_afiliados_in = tHash_Lookup_row_gen_afiliados_in.next();

							

							if(fromLookup_row_gen_afiliados_in != null) {
								row_gen_afiliados_in = fromLookup_row_gen_afiliados_in;
							}
							
							
							
			  							
								
	                    		  	
		                    
	                    	
	                    		} // G 46
	                    		  	
								forceLooprow_gen_afiliados_in = false;
									 	
							
	            	
	           	
	            	
	            

				///////////////////////////////////////////////
				// Starting Lookup Table "row_gen_preguntas_in" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow_gen_preguntas_in = false;
       		  	    	
       		  	    	
 							row_gen_preguntas_inStruct row_gen_preguntas_inObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_1) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_1 = false;
								
	                        		    	Object exprKeyValue_row_gen_preguntas_in__ID = row_info_encuesta_in.PREGUNTAS_ID ;
	                        		    	if(exprKeyValue_row_gen_preguntas_in__ID == null) {
	                        		    		hasCasePrimitiveKeyWithNull_tMap_1 = true;
	                        		    	} else {
                        		    			row_gen_preguntas_inHashKey.ID = (int)(Integer) exprKeyValue_row_gen_preguntas_in__ID;
                        		    		}
                        		    		

								
		                        	row_gen_preguntas_inHashKey.hashCodeDirty = true;
                        		
	  					
	  							
	
		  							if(!hasCasePrimitiveKeyWithNull_tMap_1) { // G_TM_M_091
		  							
			  					
			  					
			  					
	  					
		  							tHash_Lookup_row_gen_preguntas_in.lookup( row_gen_preguntas_inHashKey );

	  							

	  							

			  						} // G_TM_M_091
			  						
			  					

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row_gen_preguntas_in != null && tHash_Lookup_row_gen_preguntas_in.getCount(row_gen_preguntas_inHashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row_gen_preguntas_in' and it contains more one result from keys :  row_gen_preguntas_in.ID = '" + row_gen_preguntas_inHashKey.ID + "'");
								} // G 071
							

							
                    		  	 
							   
                    		  	 
	       		  	    	row_gen_preguntas_inStruct fromLookup_row_gen_preguntas_in = null;
							row_gen_preguntas_in = row_gen_preguntas_inDefault;
										 
							
								 
							
							
								if (tHash_Lookup_row_gen_preguntas_in !=null && tHash_Lookup_row_gen_preguntas_in.hasNext()) { // G 099
								
							
								
								fromLookup_row_gen_preguntas_in = tHash_Lookup_row_gen_preguntas_in.next();

							
							
								} // G 099
							
							

							if(fromLookup_row_gen_preguntas_in != null) {
								row_gen_preguntas_in = fromLookup_row_gen_preguntas_in;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	           	
	            	
	            

				///////////////////////////////////////////////
				// Starting Lookup Table "row_gen_tdocumentos_in" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow_gen_tdocumentos_in = false;
       		  	    	
       		  	    	
 							row_gen_tdocumentos_inStruct row_gen_tdocumentos_inObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_1) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_1 = false;
								
                        		    		    row_gen_tdocumentos_inHashKey.ID = row_gen_afiliados_in.TDOCUMENTOS_ID ;
                        		    		

								
		                        	row_gen_tdocumentos_inHashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row_gen_tdocumentos_in.lookup( row_gen_tdocumentos_inHashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row_gen_tdocumentos_in != null && tHash_Lookup_row_gen_tdocumentos_in.getCount(row_gen_tdocumentos_inHashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row_gen_tdocumentos_in' and it contains more one result from keys :  row_gen_tdocumentos_in.ID = '" + row_gen_tdocumentos_inHashKey.ID + "'");
								} // G 071
							

							
                    		  	 
							   
                    		  	 
	       		  	    	row_gen_tdocumentos_inStruct fromLookup_row_gen_tdocumentos_in = null;
							row_gen_tdocumentos_in = row_gen_tdocumentos_inDefault;
										 
							
								 
							
							
								if (tHash_Lookup_row_gen_tdocumentos_in !=null && tHash_Lookup_row_gen_tdocumentos_in.hasNext()) { // G 099
								
							
								
								fromLookup_row_gen_tdocumentos_in = tHash_Lookup_row_gen_tdocumentos_in.next();

							
							
								} // G 099
							
							

							if(fromLookup_row_gen_tdocumentos_in != null) {
								row_gen_tdocumentos_in = fromLookup_row_gen_tdocumentos_in;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	           	
	            	
	            

				///////////////////////////////////////////////
				// Starting Lookup Table "row_afi_planafiliaciones_in" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow_afi_planafiliaciones_in = false;
       		  	    	
       		  	    	
 							row_afi_planafiliaciones_inStruct row_afi_planafiliaciones_inObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_1) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_1 = false;
								
                        		    		    row_afi_planafiliaciones_inHashKey.ID = row_gen_afiliados_in.PLANAFILIACIONES_ID ;
                        		    		

								
		                        	row_afi_planafiliaciones_inHashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row_afi_planafiliaciones_in.lookup( row_afi_planafiliaciones_inHashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row_afi_planafiliaciones_in != null && tHash_Lookup_row_afi_planafiliaciones_in.getCount(row_afi_planafiliaciones_inHashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row_afi_planafiliaciones_in' and it contains more one result from keys :  row_afi_planafiliaciones_in.ID = '" + row_afi_planafiliaciones_inHashKey.ID + "'");
								} // G 071
							

							
                    		  	 
							   
                    		  	 
	       		  	    	row_afi_planafiliaciones_inStruct fromLookup_row_afi_planafiliaciones_in = null;
							row_afi_planafiliaciones_in = row_afi_planafiliaciones_inDefault;
										 
							
								 
							
							
								if (tHash_Lookup_row_afi_planafiliaciones_in !=null && tHash_Lookup_row_afi_planafiliaciones_in.hasNext()) { // G 099
								
							
								
								fromLookup_row_afi_planafiliaciones_in = tHash_Lookup_row_afi_planafiliaciones_in.next();

							
							
								} // G 099
							
							

							if(fromLookup_row_afi_planafiliaciones_in != null) {
								row_afi_planafiliaciones_in = fromLookup_row_afi_planafiliaciones_in;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	           	
	            	
	            

				///////////////////////////////////////////////
				// Starting Lookup Table "row_gen_sexos_in" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow_gen_sexos_in = false;
       		  	    	
       		  	    	
 							row_gen_sexos_inStruct row_gen_sexos_inObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_1) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_1 = false;
								
                        		    		    row_gen_sexos_inHashKey.ID = row_gen_afiliados_in.SEXO_ID ;
                        		    		

								
		                        	row_gen_sexos_inHashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row_gen_sexos_in.lookup( row_gen_sexos_inHashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row_gen_sexos_in != null && tHash_Lookup_row_gen_sexos_in.getCount(row_gen_sexos_inHashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row_gen_sexos_in' and it contains more one result from keys :  row_gen_sexos_in.ID = '" + row_gen_sexos_inHashKey.ID + "'");
								} // G 071
							

							
                    		  	 
							   
                    		  	 
	       		  	    	row_gen_sexos_inStruct fromLookup_row_gen_sexos_in = null;
							row_gen_sexos_in = row_gen_sexos_inDefault;
										 
							
								 
							
							
								if (tHash_Lookup_row_gen_sexos_in !=null && tHash_Lookup_row_gen_sexos_in.hasNext()) { // G 099
								
							
								
								fromLookup_row_gen_sexos_in = tHash_Lookup_row_gen_sexos_in.next();

							
							
								} // G 099
							
							

							if(fromLookup_row_gen_sexos_in != null) {
								row_gen_sexos_in = fromLookup_row_gen_sexos_in;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
        // ###############################
        // # Output tables

row_info_encuestas_out = null;


// # Output table : 'row_info_encuestas_out'
row_info_encuestas_out_tmp.AFILIADOS_ID = row_gen_afiliados_in.AFILIADO_ID ;
row_info_encuestas_out_tmp.PRIMER_NOMBRE = row_gen_afiliados_in.PRIMER_NOMBRE ;
row_info_encuestas_out_tmp.SEGUNDO_NOMBRE = StringHandling.LEN(row_gen_afiliados_in.SEGUNDO_NOMBRE)>0?row_gen_afiliados_in.SEGUNDO_NOMBRE:"" ;
row_info_encuestas_out_tmp.PRIMER_APELLIDO = row_gen_afiliados_in.PRIMER_APELLIDO ;
row_info_encuestas_out_tmp.SEGUNDO_APELLIDO = StringHandling.LEN(row_gen_afiliados_in.SEGUNDO_APELLIDO)>0?row_gen_afiliados_in.SEGUNDO_APELLIDO:"" ;
row_info_encuestas_out_tmp.TIPO_DOCUMENTO = row_gen_tdocumentos_in.SIGLA ;
row_info_encuestas_out_tmp.DOCUMENTO = row_gen_afiliados_in.DOCUMENTO ;
row_info_encuestas_out_tmp.SEXO = row_gen_sexos_in.SIGLA ;
row_info_encuestas_out_tmp.EDAD = row_gen_afiliados_in.EDAD ;
row_info_encuestas_out_tmp.PLAN_AFILIACION = row_afi_planafiliaciones_in.DESCRIPCION ;
row_info_encuestas_out_tmp.PREGUNTA = row_gen_preguntas_in.PREGUNTA ;
row_info_encuestas_out_tmp.OPCION1 = StringHandling.LEN(row_info_encuesta_in.OPCION2)>0?row_info_encuesta_in.OPCION1 + " - " + row_info_encuesta_in.OPCION2:row_info_encuesta_in.OPCION1 ;
row_info_encuestas_out = row_info_encuestas_out_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_1 = false;










 


	tos_count_tMap_1++;

/**
 * [tMap_1 main ] stop
 */
	
	/**
	 * [tMap_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_1";
	
	

 



/**
 * [tMap_1 process_data_begin ] stop
 */
// Start of branch "row_info_encuestas_out"
if(row_info_encuestas_out != null) { 



	
	/**
	 * [tPivotToColumnsDelimited_1 main ] start
	 */

	

	
	
	currentComponent="tPivotToColumnsDelimited_1";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row_info_encuestas_out"
						
						);
					}
					
                   
    //pivot key  
    pivot_ExiststPivotToColumnsDelimited_1 = false;
    
    int pivotNumtPivotToColumnsDelimited_1 = 0;
    
    for(int i = 0;i<pivot_KeystPivotToColumnsDelimited_1.size();i++){

	 		if(pivot_KeystPivotToColumnsDelimited_1.get(i).equals(row_info_encuestas_out.PREGUNTA)){
	            pivot_ExiststPivotToColumnsDelimited_1 = true;
	            
	            pivotNumtPivotToColumnsDelimited_1 = i + 1;
	            
	            break;
            
        	 }
    }
    
    if(!pivot_ExiststPivotToColumnsDelimited_1){
        
        pivot_KeytPivotToColumnsDelimited_1.delete(0, pivot_KeytPivotToColumnsDelimited_1.length()); 
            pivot_KeystPivotToColumnsDelimited_1.add(pivot_KeytPivotToColumnsDelimited_1.append(row_info_encuestas_out.PREGUNTA).toString());  

        pivotNumtPivotToColumnsDelimited_1 = pivot_KeystPivotToColumnsDelimited_1.size();
        
    }

    
    //group key
    group_ExiststPivotToColumnsDelimited_1 = false;
    
    gKvaluetPivotToColumnsDelimited_1 = new java.util.ArrayList<String>();
    
    group_KeytPivotToColumnsDelimited_1.delete(0,group_KeytPivotToColumnsDelimited_1.length());
        
					
        		gKvaluetPivotToColumnsDelimited_1.add(group_KeytPivotToColumnsDelimited_1.append(row_info_encuestas_out.PRIMER_NOMBRE).toString());
        
        
        group_KeytPivotToColumnsDelimited_1.delete(0,group_KeytPivotToColumnsDelimited_1.length());
					
        		gKvaluetPivotToColumnsDelimited_1.add(group_KeytPivotToColumnsDelimited_1.append(row_info_encuestas_out.SEGUNDO_NOMBRE).toString());
        
        
        group_KeytPivotToColumnsDelimited_1.delete(0,group_KeytPivotToColumnsDelimited_1.length());
					
        		gKvaluetPivotToColumnsDelimited_1.add(group_KeytPivotToColumnsDelimited_1.append(row_info_encuestas_out.PRIMER_APELLIDO).toString());
        
        
        group_KeytPivotToColumnsDelimited_1.delete(0,group_KeytPivotToColumnsDelimited_1.length());
					
        		gKvaluetPivotToColumnsDelimited_1.add(group_KeytPivotToColumnsDelimited_1.append(row_info_encuestas_out.SEGUNDO_APELLIDO).toString());
        
        
        group_KeytPivotToColumnsDelimited_1.delete(0,group_KeytPivotToColumnsDelimited_1.length());
					
        		gKvaluetPivotToColumnsDelimited_1.add(group_KeytPivotToColumnsDelimited_1.append(row_info_encuestas_out.TIPO_DOCUMENTO).toString());
        
        
        group_KeytPivotToColumnsDelimited_1.delete(0,group_KeytPivotToColumnsDelimited_1.length());
					
        		gKvaluetPivotToColumnsDelimited_1.add(group_KeytPivotToColumnsDelimited_1.append(row_info_encuestas_out.DOCUMENTO).toString());
        
        
        group_KeytPivotToColumnsDelimited_1.delete(0,group_KeytPivotToColumnsDelimited_1.length());
					
        		gKvaluetPivotToColumnsDelimited_1.add(group_KeytPivotToColumnsDelimited_1.append(row_info_encuestas_out.SEXO).toString());
        
        
        group_KeytPivotToColumnsDelimited_1.delete(0,group_KeytPivotToColumnsDelimited_1.length());
					
        		gKvaluetPivotToColumnsDelimited_1.add(group_KeytPivotToColumnsDelimited_1.append(row_info_encuestas_out.EDAD).toString());
        
        
        group_KeytPivotToColumnsDelimited_1.delete(0,group_KeytPivotToColumnsDelimited_1.length());
					
        		gKvaluetPivotToColumnsDelimited_1.add(group_KeytPivotToColumnsDelimited_1.append(row_info_encuestas_out.PLAN_AFILIACION).toString());
        
        
        group_KeytPivotToColumnsDelimited_1.delete(0,group_KeytPivotToColumnsDelimited_1.length());
    
	if (group_KeystPivotToColumnsDelimited_1.contains(gKvaluetPivotToColumnsDelimited_1)) {
                     group_ExiststPivotToColumnsDelimited_1 = true;
	}
	

    if(!group_ExiststPivotToColumnsDelimited_1){
        
        group_KeytPivotToColumnsDelimited_1.delete(0, group_KeytPivotToColumnsDelimited_1.length());
        
        group_KeystPivotToColumnsDelimited_1.add(gKvaluetPivotToColumnsDelimited_1);
        
		aggValuestPivotToColumnsDelimited_1 = new java.util.ArrayList<String>();
        
        for(int i = 0; i<pivotNumtPivotToColumnsDelimited_1-1; i++)
            
            aggValuestPivotToColumnsDelimited_1.add("");
        
        
        		aggValuestPivotToColumnsDelimited_1.add(String.valueOf(row_info_encuestas_out.OPCION1));
        		aggregationtPivotToColumnsDelimited_1.put(gKvaluetPivotToColumnsDelimited_1,aggValuestPivotToColumnsDelimited_1);
        	
    }else{

        java.util.List<String> aggStrtPivotToColumnsDelimited_1 = aggregationtPivotToColumnsDelimited_1.get(gKvaluetPivotToColumnsDelimited_1);
        
        int aggSizetPivotToColumnsDelimited_1 = aggStrtPivotToColumnsDelimited_1.size();
        if(aggSizetPivotToColumnsDelimited_1 < pivotNumtPivotToColumnsDelimited_1){
            

    		for(int i = 0 ; i<pivotNumtPivotToColumnsDelimited_1 - aggSizetPivotToColumnsDelimited_1-1; i++){
                    
				aggStrtPivotToColumnsDelimited_1.add("");
            
            }    
               
            
			aggStrtPivotToColumnsDelimited_1.add(String.valueOf(row_info_encuestas_out.OPCION1));
            
  
        }else{
            
            //step1: get the index of the pivot
            int pivotIndextPivotToColumnsDelimited_1 = 0 ;
            
            for(int i = 0; i<pivot_KeystPivotToColumnsDelimited_1.size(); i++){

	 		if(pivot_KeystPivotToColumnsDelimited_1.get(i).equals(row_info_encuestas_out.PREGUNTA)){
                    pivotIndextPivotToColumnsDelimited_1 = i;
                    
                    break;
                    
                }
                
            }
            
            //step2: process the splitted data according to function
            
            	
                if (("").equals(aggStrtPivotToColumnsDelimited_1.get(pivotIndextPivotToColumnsDelimited_1)))
                
                
                    	aggStrtPivotToColumnsDelimited_1.set(pivotIndextPivotToColumnsDelimited_1, String.valueOf(row_info_encuestas_out.OPCION1));
                    
                    	 
            
        }
        
        } 

    nb_line_tPivotToColumnsDelimited_1++;
    resourceMap.put("nb_line_tPivotToColumnsDelimited_1", nb_line_tPivotToColumnsDelimited_1); 
   

 


	tos_count_tPivotToColumnsDelimited_1++;

/**
 * [tPivotToColumnsDelimited_1 main ] stop
 */
	
	/**
	 * [tPivotToColumnsDelimited_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tPivotToColumnsDelimited_1";
	
	

 



/**
 * [tPivotToColumnsDelimited_1 process_data_begin ] stop
 */
	
	/**
	 * [tPivotToColumnsDelimited_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tPivotToColumnsDelimited_1";
	
	

 



/**
 * [tPivotToColumnsDelimited_1 process_data_end ] stop
 */

} // End of branch "row_info_encuestas_out"



	
		} // close loop of lookup 'row_gen_afiliados_in' // G_TM_M_043
	
	
	/**
	 * [tMap_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_1";
	
	

 



/**
 * [tMap_1 process_data_end ] stop
 */



	
	/**
	 * [tHashInput_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashInput_2";
	
	

 



/**
 * [tHashInput_2 process_data_end ] stop
 */
	
	/**
	 * [tHashInput_2 end ] start
	 */

	

	
	
	currentComponent="tHashInput_2";
	
	
    

		
			nb_line_tHashInput_2++;
		}	
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_Consolidado_Salud_" + pid +"_tHashOutput_7");
	


	globalMap.put("tHashInput_2_NB_LINE", nb_line_tHashInput_2);       

 

ok_Hash.put("tHashInput_2", true);
end_Hash.put("tHashInput_2", System.currentTimeMillis());




/**
 * [tHashInput_2 end ] stop
 */

	
	/**
	 * [tMap_1 end ] start
	 */

	

	
	
	currentComponent="tMap_1";
	
	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_row_gen_afiliados_in != null) {
						tHash_Lookup_row_gen_afiliados_in.endGet();
					}
					globalMap.remove( "tHash_Lookup_row_gen_afiliados_in" );

					
					
				
					if(tHash_Lookup_row_gen_preguntas_in != null) {
						tHash_Lookup_row_gen_preguntas_in.endGet();
					}
					globalMap.remove( "tHash_Lookup_row_gen_preguntas_in" );

					
					
				
					if(tHash_Lookup_row_gen_tdocumentos_in != null) {
						tHash_Lookup_row_gen_tdocumentos_in.endGet();
					}
					globalMap.remove( "tHash_Lookup_row_gen_tdocumentos_in" );

					
					
				
					if(tHash_Lookup_row_afi_planafiliaciones_in != null) {
						tHash_Lookup_row_afi_planafiliaciones_in.endGet();
					}
					globalMap.remove( "tHash_Lookup_row_afi_planafiliaciones_in" );

					
					
				
					if(tHash_Lookup_row_gen_sexos_in != null) {
						tHash_Lookup_row_gen_sexos_in.endGet();
					}
					globalMap.remove( "tHash_Lookup_row_gen_sexos_in" );

					
					
				
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row_info_encuesta_in");
			  	}
			  	
 

ok_Hash.put("tMap_1", true);
end_Hash.put("tMap_1", System.currentTimeMillis());




/**
 * [tMap_1 end ] stop
 */

	
	/**
	 * [tPivotToColumnsDelimited_1 end ] start
	 */

	

	
	
	currentComponent="tPivotToColumnsDelimited_1";
	
	


		nb_line_out_tPivotToColumnsDelimited_1 = group_KeystPivotToColumnsDelimited_1.size();

		
  			////////////////////////////////  Delimited  /////////  
			
			    outtPivotToColumnsDelimited_1.write("PRIMER_NOMBRE");
			    
			    outtPivotToColumnsDelimited_1.write(";");
			
			    outtPivotToColumnsDelimited_1.write("SEGUNDO_NOMBRE");
			    
			    outtPivotToColumnsDelimited_1.write(";");
			
			    outtPivotToColumnsDelimited_1.write("PRIMER_APELLIDO");
			    
			    outtPivotToColumnsDelimited_1.write(";");
			
			    outtPivotToColumnsDelimited_1.write("SEGUNDO_APELLIDO");
			    
			    outtPivotToColumnsDelimited_1.write(";");
			
			    outtPivotToColumnsDelimited_1.write("TIPO_DOCUMENTO");
			    
			    outtPivotToColumnsDelimited_1.write(";");
			
			    outtPivotToColumnsDelimited_1.write("DOCUMENTO");
			    
			    outtPivotToColumnsDelimited_1.write(";");
			
			    outtPivotToColumnsDelimited_1.write("SEXO");
			    
			    outtPivotToColumnsDelimited_1.write(";");
			
			    outtPivotToColumnsDelimited_1.write("EDAD");
			    
			    outtPivotToColumnsDelimited_1.write(";");
			
			    outtPivotToColumnsDelimited_1.write("PLAN_AFILIACION");
			    
			    outtPivotToColumnsDelimited_1.write(";");
			
    
			for(int i = 0; i < pivot_KeystPivotToColumnsDelimited_1.size(); i++) {
				outtPivotToColumnsDelimited_1.write(pivot_KeystPivotToColumnsDelimited_1.get(i));
				if(i == pivot_KeystPivotToColumnsDelimited_1.size()-1) {
					break;
				}
				outtPivotToColumnsDelimited_1.write(";");
			}
    
		    outtPivotToColumnsDelimited_1.write("\n");
		
			java.util.Iterator<List<String>> iterator_tPivotToColumnsDelimited_1 = group_KeystPivotToColumnsDelimited_1.iterator();
		    
			
		    while(iterator_tPivotToColumnsDelimited_1.hasNext()) {
				List<String> next = iterator_tPivotToColumnsDelimited_1.next();
		        for(int j = 0; j < next.size(); j++) {
					outtPivotToColumnsDelimited_1.write(next.get(j));
					outtPivotToColumnsDelimited_1.write(";");
				}
		        
		        java.util.List<String> aggOuttPivotToColumnsDelimited_1 = aggregationtPivotToColumnsDelimited_1.get(next);
		
		        int gaptPivotToColumnsDelimited_1 = aggOuttPivotToColumnsDelimited_1.size() - pivot_KeystPivotToColumnsDelimited_1.size();
		        
		        if(gaptPivotToColumnsDelimited_1 < 0){
		        
		        	for(int k=0;k<-gaptPivotToColumnsDelimited_1;k++)
						aggOuttPivotToColumnsDelimited_1.add("");
			
		        }
		
				for(int j = 0; j < aggOuttPivotToColumnsDelimited_1.size(); j++) {
					outtPivotToColumnsDelimited_1.write(aggOuttPivotToColumnsDelimited_1.get(j));
					if(j == aggOuttPivotToColumnsDelimited_1.size()-1) {
						break;
					}
					outtPivotToColumnsDelimited_1.write(";");
				}
		        
		        outtPivotToColumnsDelimited_1.write("\n");
		
		    }
    

    	
		
			if(outtPivotToColumnsDelimited_1!=null){
			 	outtPivotToColumnsDelimited_1.flush();
			 	outtPivotToColumnsDelimited_1.close();
			}
		
		resourceMap.put("finish_tPivotToColumnsDelimited_1", true);
	

globalMap.put("tPivotToColumnsDelimited_1_NB_LINE", nb_line_tPivotToColumnsDelimited_1);
globalMap.put("tPivotToColumnsDelimited_1_NB_LINE_OUT", nb_line_out_tPivotToColumnsDelimited_1);


				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row_info_encuestas_out");
			  	}
			  	
 

ok_Hash.put("tPivotToColumnsDelimited_1", true);
end_Hash.put("tPivotToColumnsDelimited_1", System.currentTimeMillis());




/**
 * [tPivotToColumnsDelimited_1 end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
					     			//free memory for "tMap_1"
					     			globalMap.remove("tHash_Lookup_row_gen_afiliados_in"); 
				     			
					     			//free memory for "tMap_1"
					     			globalMap.remove("tHash_Lookup_row_afi_planafiliaciones_in"); 
				     			
					     			//free memory for "tMap_1"
					     			globalMap.remove("tHash_Lookup_row_gen_preguntas_in"); 
				     			
					     			//free memory for "tMap_1"
					     			globalMap.remove("tHash_Lookup_row_gen_tdocumentos_in"); 
				     			
					     			//free memory for "tMap_1"
					     			globalMap.remove("tHash_Lookup_row_gen_sexos_in"); 
				     			
				try{
					
	
	/**
	 * [tHashInput_2 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_2";
	
	

 



/**
 * [tHashInput_2 finally ] stop
 */

	
	/**
	 * [tMap_1 finally ] start
	 */

	

	
	
	currentComponent="tMap_1";
	
	

 



/**
 * [tMap_1 finally ] stop
 */

	
	/**
	 * [tPivotToColumnsDelimited_1 finally ] start
	 */

	

	
	
	currentComponent="tPivotToColumnsDelimited_1";
	
	

		if(resourceMap.get("finish_tPivotToColumnsDelimited_1") == null){
			
				if(resourceMap.get("outtPivotToColumnsDelimited_1") != null){
				 	((java.io.BufferedWriter)resourceMap.get("outtPivotToColumnsDelimited_1")).flush();
				 	((java.io.BufferedWriter)resourceMap.get("outtPivotToColumnsDelimited_1")).close();
				}
			
		}
	

 



/**
 * [tPivotToColumnsDelimited_1 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tHashInput_2_SUBPROCESS_STATE", 1);
	}
	


public static class out6Struct implements routines.system.IPersistableRow<out6Struct> {
    final static byte[] commonByteArrayLock_AFI_PRINCIPAL_Consolidado_Salud = new byte[0];
    static byte[] commonByteArray_AFI_PRINCIPAL_Consolidado_Salud = new byte[0];

	
			    public int ESTADO;

				public int getESTADO () {
					return this.ESTADO;
				}

				public Boolean ESTADOIsNullable(){
				    return false;
				}
				public Boolean ESTADOIsKey(){
				    return false;
				}
				public Integer ESTADOLength(){
				    return 22;
				}
				public Integer ESTADOPrecision(){
				    return 0;
				}
				public String ESTADODefault(){
				
					return "1";
				
				}
				public String ESTADOComment(){
				
				    return "Estado del trabajo (1 Activo - 2 Realizado - 3 Fallido - 4 Cancelado)";
				
				}
				public String ESTADOPattern(){
				
					return "";
				
				}
				public String ESTADOOriginalDbColumnName(){
				
					return "ESTADO";
				
				}

				
			    public String ARCHIVO;

				public String getARCHIVO () {
					return this.ARCHIVO;
				}

				public Boolean ARCHIVOIsNullable(){
				    return false;
				}
				public Boolean ARCHIVOIsKey(){
				    return false;
				}
				public Integer ARCHIVOLength(){
				    return 100;
				}
				public Integer ARCHIVOPrecision(){
				    return 0;
				}
				public String ARCHIVODefault(){
				
					return null;
				
				}
				public String ARCHIVOComment(){
				
				    return "Nombre del archivo";
				
				}
				public String ARCHIVOPattern(){
				
					return "";
				
				}
				public String ARCHIVOOriginalDbColumnName(){
				
					return "ARCHIVO";
				
				}

				
			    public int TARCHIVOS_ID;

				public int getTARCHIVOS_ID () {
					return this.TARCHIVOS_ID;
				}

				public Boolean TARCHIVOS_IDIsNullable(){
				    return false;
				}
				public Boolean TARCHIVOS_IDIsKey(){
				    return false;
				}
				public Integer TARCHIVOS_IDLength(){
				    return 22;
				}
				public Integer TARCHIVOS_IDPrecision(){
				    return 0;
				}
				public String TARCHIVOS_IDDefault(){
				
					return null;
				
				}
				public String TARCHIVOS_IDComment(){
				
				    return "FK - AFI_TARCHIVOS";
				
				}
				public String TARCHIVOS_IDPattern(){
				
					return "";
				
				}
				public String TARCHIVOS_IDOriginalDbColumnName(){
				
					return "TARCHIVOS_ID";
				
				}

				
			    public int USUARIOS_ID;

				public int getUSUARIOS_ID () {
					return this.USUARIOS_ID;
				}

				public Boolean USUARIOS_IDIsNullable(){
				    return false;
				}
				public Boolean USUARIOS_IDIsKey(){
				    return false;
				}
				public Integer USUARIOS_IDLength(){
				    return 22;
				}
				public Integer USUARIOS_IDPrecision(){
				    return 0;
				}
				public String USUARIOS_IDDefault(){
				
					return null;
				
				}
				public String USUARIOS_IDComment(){
				
				    return "FK - GEN_USUARIOS (Usuario que subio el archivo)";
				
				}
				public String USUARIOS_IDPattern(){
				
					return "";
				
				}
				public String USUARIOS_IDOriginalDbColumnName(){
				
					return "USUARIOS_ID";
				
				}

				
			    public String CODIGO;

				public String getCODIGO () {
					return this.CODIGO;
				}

				public Boolean CODIGOIsNullable(){
				    return false;
				}
				public Boolean CODIGOIsKey(){
				    return false;
				}
				public Integer CODIGOLength(){
				    return 10;
				}
				public Integer CODIGOPrecision(){
				    return 0;
				}
				public String CODIGODefault(){
				
					return null;
				
				}
				public String CODIGOComment(){
				
				    return "Codigo de identificacion del archivo";
				
				}
				public String CODIGOPattern(){
				
					return "";
				
				}
				public String CODIGOOriginalDbColumnName(){
				
					return "CODIGO";
				
				}

				
			    public String ARCHIVOFS;

				public String getARCHIVOFS () {
					return this.ARCHIVOFS;
				}

				public Boolean ARCHIVOFSIsNullable(){
				    return false;
				}
				public Boolean ARCHIVOFSIsKey(){
				    return false;
				}
				public Integer ARCHIVOFSLength(){
				    return 100;
				}
				public Integer ARCHIVOFSPrecision(){
				    return 0;
				}
				public String ARCHIVOFSDefault(){
				
					return null;
				
				}
				public String ARCHIVOFSComment(){
				
				    return "Nombre del archivo en el File System";
				
				}
				public String ARCHIVOFSPattern(){
				
					return "";
				
				}
				public String ARCHIVOFSOriginalDbColumnName(){
				
					return "ARCHIVOFS";
				
				}

				
			    public java.util.Date FECHA;

				public java.util.Date getFECHA () {
					return this.FECHA;
				}

				public Boolean FECHAIsNullable(){
				    return false;
				}
				public Boolean FECHAIsKey(){
				    return false;
				}
				public Integer FECHALength(){
				    return 7;
				}
				public Integer FECHAPrecision(){
				    return 0;
				}
				public String FECHADefault(){
				
					return null;
				
				}
				public String FECHAComment(){
				
				    return "Fecha y hora del registro";
				
				}
				public String FECHAPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String FECHAOriginalDbColumnName(){
				
					return "FECHA";
				
				}

				
			    public String EXTENSION;

				public String getEXTENSION () {
					return this.EXTENSION;
				}

				public Boolean EXTENSIONIsNullable(){
				    return false;
				}
				public Boolean EXTENSIONIsKey(){
				    return false;
				}
				public Integer EXTENSIONLength(){
				    return 0;
				}
				public Integer EXTENSIONPrecision(){
				    return 0;
				}
				public String EXTENSIONDefault(){
				
					return null;
				
				}
				public String EXTENSIONComment(){
				
				    return "";
				
				}
				public String EXTENSIONPattern(){
				
					return "";
				
				}
				public String EXTENSIONOriginalDbColumnName(){
				
					return "EXTENSION";
				
				}

				
			    public Integer PADRE_ID;

				public Integer getPADRE_ID () {
					return this.PADRE_ID;
				}

				public Boolean PADRE_IDIsNullable(){
				    return true;
				}
				public Boolean PADRE_IDIsKey(){
				    return false;
				}
				public Integer PADRE_IDLength(){
				    return null;
				}
				public Integer PADRE_IDPrecision(){
				    return null;
				}
				public String PADRE_IDDefault(){
				
					return null;
				
				}
				public String PADRE_IDComment(){
				
				    return "";
				
				}
				public String PADRE_IDPattern(){
				
					return "";
				
				}
				public String PADRE_IDOriginalDbColumnName(){
				
					return "PADRE_ID";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_PRINCIPAL_Consolidado_Salud.length) {
				if(length < 1024 && commonByteArray_AFI_PRINCIPAL_Consolidado_Salud.length == 0) {
   					commonByteArray_AFI_PRINCIPAL_Consolidado_Salud = new byte[1024];
				} else {
   					commonByteArray_AFI_PRINCIPAL_Consolidado_Salud = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_PRINCIPAL_Consolidado_Salud, 0, length);
			strReturn = new String(commonByteArray_AFI_PRINCIPAL_Consolidado_Salud, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_PRINCIPAL_Consolidado_Salud.length) {
				if(length < 1024 && commonByteArray_AFI_PRINCIPAL_Consolidado_Salud.length == 0) {
   					commonByteArray_AFI_PRINCIPAL_Consolidado_Salud = new byte[1024];
				} else {
   					commonByteArray_AFI_PRINCIPAL_Consolidado_Salud = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_PRINCIPAL_Consolidado_Salud, 0, length);
			strReturn = new String(commonByteArray_AFI_PRINCIPAL_Consolidado_Salud, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_PRINCIPAL_Consolidado_Salud) {

        	try {

        		int length = 0;
		
			        this.ESTADO = dis.readInt();
					
					this.ARCHIVO = readString(dis);
					
			        this.TARCHIVOS_ID = dis.readInt();
					
			        this.USUARIOS_ID = dis.readInt();
					
					this.CODIGO = readString(dis);
					
					this.ARCHIVOFS = readString(dis);
					
					this.FECHA = readDate(dis);
					
					this.EXTENSION = readString(dis);
					
						this.PADRE_ID = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_PRINCIPAL_Consolidado_Salud) {

        	try {

        		int length = 0;
		
			        this.ESTADO = dis.readInt();
					
					this.ARCHIVO = readString(dis);
					
			        this.TARCHIVOS_ID = dis.readInt();
					
			        this.USUARIOS_ID = dis.readInt();
					
					this.CODIGO = readString(dis);
					
					this.ARCHIVOFS = readString(dis);
					
					this.FECHA = readDate(dis);
					
					this.EXTENSION = readString(dis);
					
						this.PADRE_ID = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.ESTADO);
					
					// String
				
						writeString(this.ARCHIVO,dos);
					
					// int
				
		            	dos.writeInt(this.TARCHIVOS_ID);
					
					// int
				
		            	dos.writeInt(this.USUARIOS_ID);
					
					// String
				
						writeString(this.CODIGO,dos);
					
					// String
				
						writeString(this.ARCHIVOFS,dos);
					
					// java.util.Date
				
						writeDate(this.FECHA,dos);
					
					// String
				
						writeString(this.EXTENSION,dos);
					
					// Integer
				
						writeInteger(this.PADRE_ID,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.ESTADO);
					
					// String
				
						writeString(this.ARCHIVO,dos);
					
					// int
				
		            	dos.writeInt(this.TARCHIVOS_ID);
					
					// int
				
		            	dos.writeInt(this.USUARIOS_ID);
					
					// String
				
						writeString(this.CODIGO,dos);
					
					// String
				
						writeString(this.ARCHIVOFS,dos);
					
					// java.util.Date
				
						writeDate(this.FECHA,dos);
					
					// String
				
						writeString(this.EXTENSION,dos);
					
					// Integer
				
						writeInteger(this.PADRE_ID,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ESTADO="+String.valueOf(ESTADO));
		sb.append(",ARCHIVO="+ARCHIVO);
		sb.append(",TARCHIVOS_ID="+String.valueOf(TARCHIVOS_ID));
		sb.append(",USUARIOS_ID="+String.valueOf(USUARIOS_ID));
		sb.append(",CODIGO="+CODIGO);
		sb.append(",ARCHIVOFS="+ARCHIVOFS);
		sb.append(",FECHA="+String.valueOf(FECHA));
		sb.append(",EXTENSION="+EXTENSION);
		sb.append(",PADRE_ID="+String.valueOf(PADRE_ID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(out6Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row2Struct implements routines.system.IPersistableRow<row2Struct> {
    final static byte[] commonByteArrayLock_AFI_PRINCIPAL_Consolidado_Salud = new byte[0];
    static byte[] commonByteArray_AFI_PRINCIPAL_Consolidado_Salud = new byte[0];

	
			    public int ESTADO;

				public int getESTADO () {
					return this.ESTADO;
				}

				public Boolean ESTADOIsNullable(){
				    return false;
				}
				public Boolean ESTADOIsKey(){
				    return false;
				}
				public Integer ESTADOLength(){
				    return 22;
				}
				public Integer ESTADOPrecision(){
				    return 0;
				}
				public String ESTADODefault(){
				
					return "1";
				
				}
				public String ESTADOComment(){
				
				    return "Estado del trabajo (1 Activo - 2 Realizado - 3 Fallido - 4 Cancelado)";
				
				}
				public String ESTADOPattern(){
				
					return "";
				
				}
				public String ESTADOOriginalDbColumnName(){
				
					return "ESTADO";
				
				}

				
			    public String ARCHIVO;

				public String getARCHIVO () {
					return this.ARCHIVO;
				}

				public Boolean ARCHIVOIsNullable(){
				    return false;
				}
				public Boolean ARCHIVOIsKey(){
				    return false;
				}
				public Integer ARCHIVOLength(){
				    return 100;
				}
				public Integer ARCHIVOPrecision(){
				    return 0;
				}
				public String ARCHIVODefault(){
				
					return null;
				
				}
				public String ARCHIVOComment(){
				
				    return "Nombre del archivo";
				
				}
				public String ARCHIVOPattern(){
				
					return "";
				
				}
				public String ARCHIVOOriginalDbColumnName(){
				
					return "ARCHIVO";
				
				}

				
			    public int TARCHIVOS_ID;

				public int getTARCHIVOS_ID () {
					return this.TARCHIVOS_ID;
				}

				public Boolean TARCHIVOS_IDIsNullable(){
				    return false;
				}
				public Boolean TARCHIVOS_IDIsKey(){
				    return false;
				}
				public Integer TARCHIVOS_IDLength(){
				    return 22;
				}
				public Integer TARCHIVOS_IDPrecision(){
				    return 0;
				}
				public String TARCHIVOS_IDDefault(){
				
					return null;
				
				}
				public String TARCHIVOS_IDComment(){
				
				    return "FK - AFI_TARCHIVOS";
				
				}
				public String TARCHIVOS_IDPattern(){
				
					return "";
				
				}
				public String TARCHIVOS_IDOriginalDbColumnName(){
				
					return "TARCHIVOS_ID";
				
				}

				
			    public int USUARIOS_ID;

				public int getUSUARIOS_ID () {
					return this.USUARIOS_ID;
				}

				public Boolean USUARIOS_IDIsNullable(){
				    return false;
				}
				public Boolean USUARIOS_IDIsKey(){
				    return false;
				}
				public Integer USUARIOS_IDLength(){
				    return 22;
				}
				public Integer USUARIOS_IDPrecision(){
				    return 0;
				}
				public String USUARIOS_IDDefault(){
				
					return null;
				
				}
				public String USUARIOS_IDComment(){
				
				    return "FK - GEN_USUARIOS (Usuario que subio el archivo)";
				
				}
				public String USUARIOS_IDPattern(){
				
					return "";
				
				}
				public String USUARIOS_IDOriginalDbColumnName(){
				
					return "USUARIOS_ID";
				
				}

				
			    public String CODIGO;

				public String getCODIGO () {
					return this.CODIGO;
				}

				public Boolean CODIGOIsNullable(){
				    return false;
				}
				public Boolean CODIGOIsKey(){
				    return false;
				}
				public Integer CODIGOLength(){
				    return 10;
				}
				public Integer CODIGOPrecision(){
				    return 0;
				}
				public String CODIGODefault(){
				
					return null;
				
				}
				public String CODIGOComment(){
				
				    return "Codigo de identificacion del archivo";
				
				}
				public String CODIGOPattern(){
				
					return "";
				
				}
				public String CODIGOOriginalDbColumnName(){
				
					return "CODIGO";
				
				}

				
			    public String ARCHIVOFS;

				public String getARCHIVOFS () {
					return this.ARCHIVOFS;
				}

				public Boolean ARCHIVOFSIsNullable(){
				    return false;
				}
				public Boolean ARCHIVOFSIsKey(){
				    return false;
				}
				public Integer ARCHIVOFSLength(){
				    return 100;
				}
				public Integer ARCHIVOFSPrecision(){
				    return 0;
				}
				public String ARCHIVOFSDefault(){
				
					return null;
				
				}
				public String ARCHIVOFSComment(){
				
				    return "Nombre del archivo en el File System";
				
				}
				public String ARCHIVOFSPattern(){
				
					return "";
				
				}
				public String ARCHIVOFSOriginalDbColumnName(){
				
					return "ARCHIVOFS";
				
				}

				
			    public java.util.Date FECHA;

				public java.util.Date getFECHA () {
					return this.FECHA;
				}

				public Boolean FECHAIsNullable(){
				    return false;
				}
				public Boolean FECHAIsKey(){
				    return false;
				}
				public Integer FECHALength(){
				    return 7;
				}
				public Integer FECHAPrecision(){
				    return 0;
				}
				public String FECHADefault(){
				
					return null;
				
				}
				public String FECHAComment(){
				
				    return "Fecha y hora del registro";
				
				}
				public String FECHAPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String FECHAOriginalDbColumnName(){
				
					return "FECHA";
				
				}

				
			    public String EXTENSION;

				public String getEXTENSION () {
					return this.EXTENSION;
				}

				public Boolean EXTENSIONIsNullable(){
				    return false;
				}
				public Boolean EXTENSIONIsKey(){
				    return false;
				}
				public Integer EXTENSIONLength(){
				    return 0;
				}
				public Integer EXTENSIONPrecision(){
				    return 0;
				}
				public String EXTENSIONDefault(){
				
					return null;
				
				}
				public String EXTENSIONComment(){
				
				    return "";
				
				}
				public String EXTENSIONPattern(){
				
					return "";
				
				}
				public String EXTENSIONOriginalDbColumnName(){
				
					return "EXTENSION";
				
				}

				
			    public Integer PADRE_ID;

				public Integer getPADRE_ID () {
					return this.PADRE_ID;
				}

				public Boolean PADRE_IDIsNullable(){
				    return true;
				}
				public Boolean PADRE_IDIsKey(){
				    return false;
				}
				public Integer PADRE_IDLength(){
				    return null;
				}
				public Integer PADRE_IDPrecision(){
				    return null;
				}
				public String PADRE_IDDefault(){
				
					return null;
				
				}
				public String PADRE_IDComment(){
				
				    return "";
				
				}
				public String PADRE_IDPattern(){
				
					return "";
				
				}
				public String PADRE_IDOriginalDbColumnName(){
				
					return "PADRE_ID";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_PRINCIPAL_Consolidado_Salud.length) {
				if(length < 1024 && commonByteArray_AFI_PRINCIPAL_Consolidado_Salud.length == 0) {
   					commonByteArray_AFI_PRINCIPAL_Consolidado_Salud = new byte[1024];
				} else {
   					commonByteArray_AFI_PRINCIPAL_Consolidado_Salud = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_PRINCIPAL_Consolidado_Salud, 0, length);
			strReturn = new String(commonByteArray_AFI_PRINCIPAL_Consolidado_Salud, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_PRINCIPAL_Consolidado_Salud.length) {
				if(length < 1024 && commonByteArray_AFI_PRINCIPAL_Consolidado_Salud.length == 0) {
   					commonByteArray_AFI_PRINCIPAL_Consolidado_Salud = new byte[1024];
				} else {
   					commonByteArray_AFI_PRINCIPAL_Consolidado_Salud = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_PRINCIPAL_Consolidado_Salud, 0, length);
			strReturn = new String(commonByteArray_AFI_PRINCIPAL_Consolidado_Salud, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_PRINCIPAL_Consolidado_Salud) {

        	try {

        		int length = 0;
		
			        this.ESTADO = dis.readInt();
					
					this.ARCHIVO = readString(dis);
					
			        this.TARCHIVOS_ID = dis.readInt();
					
			        this.USUARIOS_ID = dis.readInt();
					
					this.CODIGO = readString(dis);
					
					this.ARCHIVOFS = readString(dis);
					
					this.FECHA = readDate(dis);
					
					this.EXTENSION = readString(dis);
					
						this.PADRE_ID = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_PRINCIPAL_Consolidado_Salud) {

        	try {

        		int length = 0;
		
			        this.ESTADO = dis.readInt();
					
					this.ARCHIVO = readString(dis);
					
			        this.TARCHIVOS_ID = dis.readInt();
					
			        this.USUARIOS_ID = dis.readInt();
					
					this.CODIGO = readString(dis);
					
					this.ARCHIVOFS = readString(dis);
					
					this.FECHA = readDate(dis);
					
					this.EXTENSION = readString(dis);
					
						this.PADRE_ID = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.ESTADO);
					
					// String
				
						writeString(this.ARCHIVO,dos);
					
					// int
				
		            	dos.writeInt(this.TARCHIVOS_ID);
					
					// int
				
		            	dos.writeInt(this.USUARIOS_ID);
					
					// String
				
						writeString(this.CODIGO,dos);
					
					// String
				
						writeString(this.ARCHIVOFS,dos);
					
					// java.util.Date
				
						writeDate(this.FECHA,dos);
					
					// String
				
						writeString(this.EXTENSION,dos);
					
					// Integer
				
						writeInteger(this.PADRE_ID,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.ESTADO);
					
					// String
				
						writeString(this.ARCHIVO,dos);
					
					// int
				
		            	dos.writeInt(this.TARCHIVOS_ID);
					
					// int
				
		            	dos.writeInt(this.USUARIOS_ID);
					
					// String
				
						writeString(this.CODIGO,dos);
					
					// String
				
						writeString(this.ARCHIVOFS,dos);
					
					// java.util.Date
				
						writeDate(this.FECHA,dos);
					
					// String
				
						writeString(this.EXTENSION,dos);
					
					// Integer
				
						writeInteger(this.PADRE_ID,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ESTADO="+String.valueOf(ESTADO));
		sb.append(",ARCHIVO="+ARCHIVO);
		sb.append(",TARCHIVOS_ID="+String.valueOf(TARCHIVOS_ID));
		sb.append(",USUARIOS_ID="+String.valueOf(USUARIOS_ID));
		sb.append(",CODIGO="+CODIGO);
		sb.append(",ARCHIVOFS="+ARCHIVOFS);
		sb.append(",FECHA="+String.valueOf(FECHA));
		sb.append(",EXTENSION="+EXTENSION);
		sb.append(",PADRE_ID="+String.valueOf(PADRE_ID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row2Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class after_tFixedFlowInput_3Struct implements routines.system.IPersistableRow<after_tFixedFlowInput_3Struct> {
    final static byte[] commonByteArrayLock_AFI_PRINCIPAL_Consolidado_Salud = new byte[0];
    static byte[] commonByteArray_AFI_PRINCIPAL_Consolidado_Salud = new byte[0];

	
			    public int ESTADO;

				public int getESTADO () {
					return this.ESTADO;
				}

				public Boolean ESTADOIsNullable(){
				    return false;
				}
				public Boolean ESTADOIsKey(){
				    return false;
				}
				public Integer ESTADOLength(){
				    return 22;
				}
				public Integer ESTADOPrecision(){
				    return 0;
				}
				public String ESTADODefault(){
				
					return "1";
				
				}
				public String ESTADOComment(){
				
				    return "Estado del trabajo (1 Activo - 2 Realizado - 3 Fallido - 4 Cancelado)";
				
				}
				public String ESTADOPattern(){
				
					return "";
				
				}
				public String ESTADOOriginalDbColumnName(){
				
					return "ESTADO";
				
				}

				
			    public String ARCHIVO;

				public String getARCHIVO () {
					return this.ARCHIVO;
				}

				public Boolean ARCHIVOIsNullable(){
				    return false;
				}
				public Boolean ARCHIVOIsKey(){
				    return false;
				}
				public Integer ARCHIVOLength(){
				    return 100;
				}
				public Integer ARCHIVOPrecision(){
				    return 0;
				}
				public String ARCHIVODefault(){
				
					return null;
				
				}
				public String ARCHIVOComment(){
				
				    return "Nombre del archivo";
				
				}
				public String ARCHIVOPattern(){
				
					return "";
				
				}
				public String ARCHIVOOriginalDbColumnName(){
				
					return "ARCHIVO";
				
				}

				
			    public int TARCHIVOS_ID;

				public int getTARCHIVOS_ID () {
					return this.TARCHIVOS_ID;
				}

				public Boolean TARCHIVOS_IDIsNullable(){
				    return false;
				}
				public Boolean TARCHIVOS_IDIsKey(){
				    return false;
				}
				public Integer TARCHIVOS_IDLength(){
				    return 22;
				}
				public Integer TARCHIVOS_IDPrecision(){
				    return 0;
				}
				public String TARCHIVOS_IDDefault(){
				
					return null;
				
				}
				public String TARCHIVOS_IDComment(){
				
				    return "FK - AFI_TARCHIVOS";
				
				}
				public String TARCHIVOS_IDPattern(){
				
					return "";
				
				}
				public String TARCHIVOS_IDOriginalDbColumnName(){
				
					return "TARCHIVOS_ID";
				
				}

				
			    public int USUARIOS_ID;

				public int getUSUARIOS_ID () {
					return this.USUARIOS_ID;
				}

				public Boolean USUARIOS_IDIsNullable(){
				    return false;
				}
				public Boolean USUARIOS_IDIsKey(){
				    return false;
				}
				public Integer USUARIOS_IDLength(){
				    return 22;
				}
				public Integer USUARIOS_IDPrecision(){
				    return 0;
				}
				public String USUARIOS_IDDefault(){
				
					return null;
				
				}
				public String USUARIOS_IDComment(){
				
				    return "FK - GEN_USUARIOS (Usuario que subio el archivo)";
				
				}
				public String USUARIOS_IDPattern(){
				
					return "";
				
				}
				public String USUARIOS_IDOriginalDbColumnName(){
				
					return "USUARIOS_ID";
				
				}

				
			    public String CODIGO;

				public String getCODIGO () {
					return this.CODIGO;
				}

				public Boolean CODIGOIsNullable(){
				    return false;
				}
				public Boolean CODIGOIsKey(){
				    return false;
				}
				public Integer CODIGOLength(){
				    return 10;
				}
				public Integer CODIGOPrecision(){
				    return 0;
				}
				public String CODIGODefault(){
				
					return null;
				
				}
				public String CODIGOComment(){
				
				    return "Codigo de identificacion del archivo";
				
				}
				public String CODIGOPattern(){
				
					return "";
				
				}
				public String CODIGOOriginalDbColumnName(){
				
					return "CODIGO";
				
				}

				
			    public String ARCHIVOFS;

				public String getARCHIVOFS () {
					return this.ARCHIVOFS;
				}

				public Boolean ARCHIVOFSIsNullable(){
				    return false;
				}
				public Boolean ARCHIVOFSIsKey(){
				    return false;
				}
				public Integer ARCHIVOFSLength(){
				    return 100;
				}
				public Integer ARCHIVOFSPrecision(){
				    return 0;
				}
				public String ARCHIVOFSDefault(){
				
					return null;
				
				}
				public String ARCHIVOFSComment(){
				
				    return "Nombre del archivo en el File System";
				
				}
				public String ARCHIVOFSPattern(){
				
					return "";
				
				}
				public String ARCHIVOFSOriginalDbColumnName(){
				
					return "ARCHIVOFS";
				
				}

				
			    public java.util.Date FECHA;

				public java.util.Date getFECHA () {
					return this.FECHA;
				}

				public Boolean FECHAIsNullable(){
				    return false;
				}
				public Boolean FECHAIsKey(){
				    return false;
				}
				public Integer FECHALength(){
				    return 7;
				}
				public Integer FECHAPrecision(){
				    return 0;
				}
				public String FECHADefault(){
				
					return null;
				
				}
				public String FECHAComment(){
				
				    return "Fecha y hora del registro";
				
				}
				public String FECHAPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String FECHAOriginalDbColumnName(){
				
					return "FECHA";
				
				}

				
			    public String EXTENSION;

				public String getEXTENSION () {
					return this.EXTENSION;
				}

				public Boolean EXTENSIONIsNullable(){
				    return false;
				}
				public Boolean EXTENSIONIsKey(){
				    return false;
				}
				public Integer EXTENSIONLength(){
				    return 0;
				}
				public Integer EXTENSIONPrecision(){
				    return 0;
				}
				public String EXTENSIONDefault(){
				
					return null;
				
				}
				public String EXTENSIONComment(){
				
				    return "";
				
				}
				public String EXTENSIONPattern(){
				
					return "";
				
				}
				public String EXTENSIONOriginalDbColumnName(){
				
					return "EXTENSION";
				
				}

				
			    public Integer PADRE_ID;

				public Integer getPADRE_ID () {
					return this.PADRE_ID;
				}

				public Boolean PADRE_IDIsNullable(){
				    return true;
				}
				public Boolean PADRE_IDIsKey(){
				    return false;
				}
				public Integer PADRE_IDLength(){
				    return null;
				}
				public Integer PADRE_IDPrecision(){
				    return null;
				}
				public String PADRE_IDDefault(){
				
					return null;
				
				}
				public String PADRE_IDComment(){
				
				    return "";
				
				}
				public String PADRE_IDPattern(){
				
					return "";
				
				}
				public String PADRE_IDOriginalDbColumnName(){
				
					return "PADRE_ID";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_PRINCIPAL_Consolidado_Salud.length) {
				if(length < 1024 && commonByteArray_AFI_PRINCIPAL_Consolidado_Salud.length == 0) {
   					commonByteArray_AFI_PRINCIPAL_Consolidado_Salud = new byte[1024];
				} else {
   					commonByteArray_AFI_PRINCIPAL_Consolidado_Salud = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_PRINCIPAL_Consolidado_Salud, 0, length);
			strReturn = new String(commonByteArray_AFI_PRINCIPAL_Consolidado_Salud, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_PRINCIPAL_Consolidado_Salud.length) {
				if(length < 1024 && commonByteArray_AFI_PRINCIPAL_Consolidado_Salud.length == 0) {
   					commonByteArray_AFI_PRINCIPAL_Consolidado_Salud = new byte[1024];
				} else {
   					commonByteArray_AFI_PRINCIPAL_Consolidado_Salud = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_PRINCIPAL_Consolidado_Salud, 0, length);
			strReturn = new String(commonByteArray_AFI_PRINCIPAL_Consolidado_Salud, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_PRINCIPAL_Consolidado_Salud) {

        	try {

        		int length = 0;
		
			        this.ESTADO = dis.readInt();
					
					this.ARCHIVO = readString(dis);
					
			        this.TARCHIVOS_ID = dis.readInt();
					
			        this.USUARIOS_ID = dis.readInt();
					
					this.CODIGO = readString(dis);
					
					this.ARCHIVOFS = readString(dis);
					
					this.FECHA = readDate(dis);
					
					this.EXTENSION = readString(dis);
					
						this.PADRE_ID = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_PRINCIPAL_Consolidado_Salud) {

        	try {

        		int length = 0;
		
			        this.ESTADO = dis.readInt();
					
					this.ARCHIVO = readString(dis);
					
			        this.TARCHIVOS_ID = dis.readInt();
					
			        this.USUARIOS_ID = dis.readInt();
					
					this.CODIGO = readString(dis);
					
					this.ARCHIVOFS = readString(dis);
					
					this.FECHA = readDate(dis);
					
					this.EXTENSION = readString(dis);
					
						this.PADRE_ID = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.ESTADO);
					
					// String
				
						writeString(this.ARCHIVO,dos);
					
					// int
				
		            	dos.writeInt(this.TARCHIVOS_ID);
					
					// int
				
		            	dos.writeInt(this.USUARIOS_ID);
					
					// String
				
						writeString(this.CODIGO,dos);
					
					// String
				
						writeString(this.ARCHIVOFS,dos);
					
					// java.util.Date
				
						writeDate(this.FECHA,dos);
					
					// String
				
						writeString(this.EXTENSION,dos);
					
					// Integer
				
						writeInteger(this.PADRE_ID,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.ESTADO);
					
					// String
				
						writeString(this.ARCHIVO,dos);
					
					// int
				
		            	dos.writeInt(this.TARCHIVOS_ID);
					
					// int
				
		            	dos.writeInt(this.USUARIOS_ID);
					
					// String
				
						writeString(this.CODIGO,dos);
					
					// String
				
						writeString(this.ARCHIVOFS,dos);
					
					// java.util.Date
				
						writeDate(this.FECHA,dos);
					
					// String
				
						writeString(this.EXTENSION,dos);
					
					// Integer
				
						writeInteger(this.PADRE_ID,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ESTADO="+String.valueOf(ESTADO));
		sb.append(",ARCHIVO="+ARCHIVO);
		sb.append(",TARCHIVOS_ID="+String.valueOf(TARCHIVOS_ID));
		sb.append(",USUARIOS_ID="+String.valueOf(USUARIOS_ID));
		sb.append(",CODIGO="+CODIGO);
		sb.append(",ARCHIVOFS="+ARCHIVOFS);
		sb.append(",FECHA="+String.valueOf(FECHA));
		sb.append(",EXTENSION="+EXTENSION);
		sb.append(",PADRE_ID="+String.valueOf(PADRE_ID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(after_tFixedFlowInput_3Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tFixedFlowInput_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFixedFlowInput_3_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;


		tOracleInput_2Process(globalMap);

		row2Struct row2 = new row2Struct();
out6Struct out6 = new out6Struct();





	
	/**
	 * [tOracleOutput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleOutput_1", false);
		start_Hash.put("tOracleOutput_1", System.currentTimeMillis());
		
	
	currentComponent="tOracleOutput_1";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"out6");
					}
				
		int tos_count_tOracleOutput_1 = 0;
		






    
    int nb_line_tOracleOutput_1 = 0;
    int nb_line_update_tOracleOutput_1 = 0;
    int nb_line_inserted_tOracleOutput_1 = 0;
    int nb_line_deleted_tOracleOutput_1 = 0;
    int nb_line_rejected_tOracleOutput_1 = 0;

    int tmp_batchUpdateCount_tOracleOutput_1 = 0;

    int deletedCount_tOracleOutput_1=0;
    int updatedCount_tOracleOutput_1=0;
    int insertedCount_tOracleOutput_1=0;
    int rowsToCommitCount_tOracleOutput_1=0;
    int rejectedCount_tOracleOutput_1=0;

    boolean whetherReject_tOracleOutput_1 = false;

    java.sql.Connection conn_tOracleOutput_1 = null;

    //optional table
    String dbschema_tOracleOutput_1 = null;
    String tableName_tOracleOutput_1 = null;
        dbschema_tOracleOutput_1 = (String)globalMap.get("dbschema_tOracleConnection_1");
		
        conn_tOracleOutput_1 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");
        int count_tOracleOutput_1=0;

        if(dbschema_tOracleOutput_1 == null || dbschema_tOracleOutput_1.trim().length() == 0) {
            tableName_tOracleOutput_1 = ("AFI_ARCHIVOS");
        } else {
            tableName_tOracleOutput_1 = dbschema_tOracleOutput_1 + "." + ("AFI_ARCHIVOS");
        }
                String insert_tOracleOutput_1 = "INSERT INTO " + tableName_tOracleOutput_1 + " (ESTADO,ARCHIVO,TARCHIVOS_ID,USUARIOS_ID,CODIGO,ARCHIVOFS,FECHA,EXTENSION,PADRE_ID) VALUES (?,?,?,?,?,?,?,?,?)";    

                        java.sql.PreparedStatement pstmt_tOracleOutput_1 = conn_tOracleOutput_1.prepareStatement(insert_tOracleOutput_1);
                        resourceMap.put("pstmt_tOracleOutput_1", pstmt_tOracleOutput_1);





 



/**
 * [tOracleOutput_1 begin ] stop
 */



	
	/**
	 * [tMap_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_2", false);
		start_Hash.put("tMap_2", System.currentTimeMillis());
		
	
	currentComponent="tMap_2";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row2");
					}
				
		int tos_count_tMap_2 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row3Struct> tHash_Lookup_row3 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row3Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row3Struct>) 
					globalMap.get( "tHash_Lookup_row3" ))
					;					
					
	

row3Struct row3HashKey = new row3Struct();
row3Struct row3Default = new row3Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_2__Struct  {
}
Var__tMap_2__Struct Var__tMap_2 = new Var__tMap_2__Struct();
// ###############################

// ###############################
// # Outputs initialization
out6Struct out6_tmp = new out6Struct();
// ###############################

        
        



        









 



/**
 * [tMap_2 begin ] stop
 */



	
	/**
	 * [tFixedFlowInput_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tFixedFlowInput_3", false);
		start_Hash.put("tFixedFlowInput_3", System.currentTimeMillis());
		
	
	currentComponent="tFixedFlowInput_3";
	
	
		int tos_count_tFixedFlowInput_3 = 0;
		

	    for (int i_tFixedFlowInput_3 = 0 ; i_tFixedFlowInput_3 < 1 ; i_tFixedFlowInput_3++) {
	                	            	
    	            		row2.ESTADO = context.estArchivoProcesado;
    	            	        	            	
    	            		row2.ARCHIVO = "COMPENDIO DE SALUD GENERADO "+context.idProceso;
    	            	        	            	
    	            		row2.TARCHIVOS_ID = context.tipoArchivoCompendioSaludGenerado;
    	            	        	            	
    	            		row2.USUARIOS_ID = context.infoUsuarioIdArchivo;
    	            	        	            	
    	            		row2.CODIGO = "AFI_"+context.tipoArchivoCompendioSalud + "_"+context.infoUsuarioIdArchivo;
    	            	        	            	
    	            		row2.ARCHIVOFS = context.archivoSalida+".CSV";
    	            	        	            	
    	            		row2.FECHA = TalendDate.getCurrentDate();
    	            	        	            	
    	            		row2.EXTENSION = "CSV";
    	            	        	            	
    	            		row2.PADRE_ID = context.infoIdArchivo;
    	            	

 



/**
 * [tFixedFlowInput_3 begin ] stop
 */
	
	/**
	 * [tFixedFlowInput_3 main ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_3";
	
	

 


	tos_count_tFixedFlowInput_3++;

/**
 * [tFixedFlowInput_3 main ] stop
 */
	
	/**
	 * [tFixedFlowInput_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_3";
	
	

 



/**
 * [tFixedFlowInput_3 process_data_begin ] stop
 */

	
	/**
	 * [tMap_2 main ] start
	 */

	

	
	
	currentComponent="tMap_2";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row2"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_2 = false;
		
						row3Struct row3 = null;
					
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_2 = false;
		boolean mainRowRejected_tMap_2 = false;
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row3" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow3 = false;
       		  	    	
       		  	    	
 							row3Struct row3ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_2) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_2 = false;
								
                        		    		    row3HashKey.CODIGO = row2.TARCHIVOS_ID ;
                        		    		

								
		                        	row3HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row3.lookup( row3HashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row3 != null && tHash_Lookup_row3.getCount(row3HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row3' and it contains more one result from keys :  row3.CODIGO = '" + row3HashKey.CODIGO + "'");
								} // G 071
							

							
                    		  	 
							   
                    		  	 
	       		  	    	row3Struct fromLookup_row3 = null;
							row3 = row3Default;
										 
							
								 
							
							
								if (tHash_Lookup_row3 !=null && tHash_Lookup_row3.hasNext()) { // G 099
								
							
								
								fromLookup_row3 = tHash_Lookup_row3.next();

							
							
								} // G 099
							
							

							if(fromLookup_row3 != null) {
								row3 = fromLookup_row3;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_2__Struct Var = Var__tMap_2;// ###############################
        // ###############################
        // # Output tables

out6 = null;


// # Output table : 'out6'
out6_tmp.ESTADO = row2.ESTADO;
out6_tmp.ARCHIVO = row2.ARCHIVO;
out6_tmp.TARCHIVOS_ID = row3.ID;
out6_tmp.USUARIOS_ID = row2.USUARIOS_ID ;
out6_tmp.CODIGO = row2.CODIGO ;
out6_tmp.ARCHIVOFS = row2.ARCHIVOFS ;
out6_tmp.FECHA = row2.FECHA ;
out6_tmp.EXTENSION = row2.EXTENSION ;
out6_tmp.PADRE_ID = row2.PADRE_ID ;
out6 = out6_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_2 = false;










 


	tos_count_tMap_2++;

/**
 * [tMap_2 main ] stop
 */
	
	/**
	 * [tMap_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_2";
	
	

 



/**
 * [tMap_2 process_data_begin ] stop
 */
// Start of branch "out6"
if(out6 != null) { 



	
	/**
	 * [tOracleOutput_1 main ] start
	 */

	

	
	
	currentComponent="tOracleOutput_1";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"out6"
						
						);
					}
					



        whetherReject_tOracleOutput_1 = false;
                        pstmt_tOracleOutput_1.setInt(1, out6.ESTADO);

                        if(out6.ARCHIVO == null) {
pstmt_tOracleOutput_1.setNull(2, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_1.setString(2, out6.ARCHIVO);
}

                        pstmt_tOracleOutput_1.setInt(3, out6.TARCHIVOS_ID);

                        pstmt_tOracleOutput_1.setInt(4, out6.USUARIOS_ID);

                        if(out6.CODIGO == null) {
pstmt_tOracleOutput_1.setNull(5, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_1.setString(5, out6.CODIGO);
}

                        if(out6.ARCHIVOFS == null) {
pstmt_tOracleOutput_1.setNull(6, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_1.setString(6, out6.ARCHIVOFS);
}

                        if(out6.FECHA != null) {
pstmt_tOracleOutput_1.setObject(7, new java.sql.Timestamp(out6.FECHA.getTime()),java.sql.Types.DATE);
} else {
pstmt_tOracleOutput_1.setNull(7, java.sql.Types.DATE);
}

                        if(out6.EXTENSION == null) {
pstmt_tOracleOutput_1.setNull(8, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_1.setString(8, out6.EXTENSION);
}

                        if(out6.PADRE_ID == null) {
pstmt_tOracleOutput_1.setNull(9, java.sql.Types.INTEGER);
} else {pstmt_tOracleOutput_1.setInt(9, out6.PADRE_ID);
}

                try {
                    nb_line_tOracleOutput_1++;
                    int processedCount_tOracleOutput_1 = pstmt_tOracleOutput_1.executeUpdate();
                    insertedCount_tOracleOutput_1 += processedCount_tOracleOutput_1;
                    rowsToCommitCount_tOracleOutput_1 += processedCount_tOracleOutput_1;
                } catch(java.lang.Exception e_tOracleOutput_1) {
globalMap.put("tOracleOutput_1_ERROR_MESSAGE",e_tOracleOutput_1.getMessage());
                    whetherReject_tOracleOutput_1 = true;
                            System.err.print(e_tOracleOutput_1.getMessage());
                }
            if(!whetherReject_tOracleOutput_1) {
            }

 


	tos_count_tOracleOutput_1++;

/**
 * [tOracleOutput_1 main ] stop
 */
	
	/**
	 * [tOracleOutput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleOutput_1";
	
	

 



/**
 * [tOracleOutput_1 process_data_begin ] stop
 */
	
	/**
	 * [tOracleOutput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_1";
	
	

 



/**
 * [tOracleOutput_1 process_data_end ] stop
 */

} // End of branch "out6"




	
	/**
	 * [tMap_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_2";
	
	

 



/**
 * [tMap_2 process_data_end ] stop
 */



	
	/**
	 * [tFixedFlowInput_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_3";
	
	

 



/**
 * [tFixedFlowInput_3 process_data_end ] stop
 */
	
	/**
	 * [tFixedFlowInput_3 end ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_3";
	
	

        }
        globalMap.put("tFixedFlowInput_3_NB_LINE", 1);        

 

ok_Hash.put("tFixedFlowInput_3", true);
end_Hash.put("tFixedFlowInput_3", System.currentTimeMillis());




/**
 * [tFixedFlowInput_3 end ] stop
 */

	
	/**
	 * [tMap_2 end ] start
	 */

	

	
	
	currentComponent="tMap_2";
	
	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_row3 != null) {
						tHash_Lookup_row3.endGet();
					}
					globalMap.remove( "tHash_Lookup_row3" );

					
					
				
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row2");
			  	}
			  	
 

ok_Hash.put("tMap_2", true);
end_Hash.put("tMap_2", System.currentTimeMillis());




/**
 * [tMap_2 end ] stop
 */

	
	/**
	 * [tOracleOutput_1 end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_1";
	
	
	



	
        if(pstmt_tOracleOutput_1 != null) {
			
				pstmt_tOracleOutput_1.close();
				resourceMap.remove("pstmt_tOracleOutput_1");
			
        }
    resourceMap.put("statementClosed_tOracleOutput_1", true);

	
	nb_line_deleted_tOracleOutput_1=nb_line_deleted_tOracleOutput_1+ deletedCount_tOracleOutput_1;
	nb_line_update_tOracleOutput_1=nb_line_update_tOracleOutput_1 + updatedCount_tOracleOutput_1;
	nb_line_inserted_tOracleOutput_1=nb_line_inserted_tOracleOutput_1 + insertedCount_tOracleOutput_1;
	nb_line_rejected_tOracleOutput_1=nb_line_rejected_tOracleOutput_1 + rejectedCount_tOracleOutput_1;
	
        globalMap.put("tOracleOutput_1_NB_LINE",nb_line_tOracleOutput_1);
        globalMap.put("tOracleOutput_1_NB_LINE_UPDATED",nb_line_update_tOracleOutput_1);
        globalMap.put("tOracleOutput_1_NB_LINE_INSERTED",nb_line_inserted_tOracleOutput_1);
        globalMap.put("tOracleOutput_1_NB_LINE_DELETED",nb_line_deleted_tOracleOutput_1);
        globalMap.put("tOracleOutput_1_NB_LINE_REJECTED", nb_line_rejected_tOracleOutput_1);
    

	



				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"out6");
			  	}
			  	
 

ok_Hash.put("tOracleOutput_1", true);
end_Hash.put("tOracleOutput_1", System.currentTimeMillis());

   			if (((Integer)globalMap.get("tOracleOutput_1_NB_LINE_INSERTED"))>0) {
   				
					if(execStat){
   	 					runStat.updateStatOnConnection("If13", 0, "true");
					}
				tJava_6Process(globalMap);
			}

			   
   				else{
					if(execStat){   
   	 					runStat.updateStatOnConnection("If13", 0, "false");
					}   	 
   				}



/**
 * [tOracleOutput_1 end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
					     			//free memory for "tMap_2"
					     			globalMap.remove("tHash_Lookup_row3"); 
				     			
				try{
					
	
	/**
	 * [tFixedFlowInput_3 finally ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_3";
	
	

 



/**
 * [tFixedFlowInput_3 finally ] stop
 */

	
	/**
	 * [tMap_2 finally ] start
	 */

	

	
	
	currentComponent="tMap_2";
	
	

 



/**
 * [tMap_2 finally ] stop
 */

	
	/**
	 * [tOracleOutput_1 finally ] start
	 */

	

	
	
	currentComponent="tOracleOutput_1";
	
	



    if (resourceMap.get("statementClosed_tOracleOutput_1") == null) {
                java.sql.PreparedStatement pstmtToClose_tOracleOutput_1 = null;
                if ((pstmtToClose_tOracleOutput_1 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tOracleOutput_1")) != null) {
                    pstmtToClose_tOracleOutput_1.close();
                }
    }
 



/**
 * [tOracleOutput_1 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFixedFlowInput_3_SUBPROCESS_STATE", 1);
	}
	


public void tJava_6Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_6_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tJava_6 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_6", false);
		start_Hash.put("tJava_6", System.currentTimeMillis());
		
	
	currentComponent="tJava_6";
	
	
		int tos_count_tJava_6 = 0;
		


context.outCodigo=false;
 



/**
 * [tJava_6 begin ] stop
 */
	
	/**
	 * [tJava_6 main ] start
	 */

	

	
	
	currentComponent="tJava_6";
	
	

 


	tos_count_tJava_6++;

/**
 * [tJava_6 main ] stop
 */
	
	/**
	 * [tJava_6 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_6";
	
	

 



/**
 * [tJava_6 process_data_begin ] stop
 */
	
	/**
	 * [tJava_6 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_6";
	
	

 



/**
 * [tJava_6 process_data_end ] stop
 */
	
	/**
	 * [tJava_6 end ] start
	 */

	

	
	
	currentComponent="tJava_6";
	
	

 

ok_Hash.put("tJava_6", true);
end_Hash.put("tJava_6", System.currentTimeMillis());




/**
 * [tJava_6 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_6 finally ] start
	 */

	

	
	
	currentComponent="tJava_6";
	
	

 



/**
 * [tJava_6 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_6_SUBPROCESS_STATE", 1);
	}
	


public static class row3Struct implements routines.system.IPersistableComparableLookupRow<row3Struct> {
    final static byte[] commonByteArrayLock_AFI_PRINCIPAL_Consolidado_Salud = new byte[0];
    static byte[] commonByteArray_AFI_PRINCIPAL_Consolidado_Salud = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public int ID;

				public int getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return false;
				}
				public Boolean IDIsKey(){
				    return true;
				}
				public Integer IDLength(){
				    return 22;
				}
				public Integer IDPrecision(){
				    return 0;
				}
				public String IDDefault(){
				
					return "SALUDSIS\".\"ISEQ$$_100689\".nextval";
				
				}
				public String IDComment(){
				
				    return "PK- Llave primaria";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public String NOMBRE;

				public String getNOMBRE () {
					return this.NOMBRE;
				}

				public Boolean NOMBREIsNullable(){
				    return false;
				}
				public Boolean NOMBREIsKey(){
				    return false;
				}
				public Integer NOMBRELength(){
				    return 50;
				}
				public Integer NOMBREPrecision(){
				    return 0;
				}
				public String NOMBREDefault(){
				
					return null;
				
				}
				public String NOMBREComment(){
				
				    return "Nombre del tipo de archivo";
				
				}
				public String NOMBREPattern(){
				
					return "";
				
				}
				public String NOMBREOriginalDbColumnName(){
				
					return "NOMBRE";
				
				}

				
			    public Integer CODIGO;

				public Integer getCODIGO () {
					return this.CODIGO;
				}

				public Boolean CODIGOIsNullable(){
				    return true;
				}
				public Boolean CODIGOIsKey(){
				    return false;
				}
				public Integer CODIGOLength(){
				    return 22;
				}
				public Integer CODIGOPrecision(){
				    return 0;
				}
				public String CODIGODefault(){
				
					return null;
				
				}
				public String CODIGOComment(){
				
				    return "Codigo del archivo";
				
				}
				public String CODIGOPattern(){
				
					return "";
				
				}
				public String CODIGOOriginalDbColumnName(){
				
					return "CODIGO";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.CODIGO == null) ? 0 : this.CODIGO.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row3Struct other = (row3Struct) obj;
		
						if (this.CODIGO == null) {
							if (other.CODIGO != null)
								return false;
						
						} else if (!this.CODIGO.equals(other.CODIGO))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row3Struct other) {

		other.ID = this.ID;
	            other.NOMBRE = this.NOMBRE;
	            other.CODIGO = this.CODIGO;
	            
	}

	public void copyKeysDataTo(row3Struct other) {

		other.CODIGO = this.CODIGO;
	            	
	}



	
	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			unmarshaller.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private void writeString(String str, DataOutputStream dos, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_PRINCIPAL_Consolidado_Salud) {

        	try {

        		int length = 0;
		
						this.CODIGO = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_PRINCIPAL_Consolidado_Salud) {

        	try {

        		int length = 0;
		
						this.CODIGO = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.CODIGO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.CODIGO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
			            this.ID = dis.readInt();
					
						this.NOMBRE = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		
			            this.ID = objectIn.readInt();
					
						this.NOMBRE = readString(dis,objectIn);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
		            	dos.writeInt(this.ID);
					
						writeString(this.NOMBRE, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
					objectOut.writeInt(this.ID);
					
						writeString(this.NOMBRE, dos, objectOut);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",NOMBRE="+NOMBRE);
		sb.append(",CODIGO="+String.valueOf(CODIGO));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row3Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.CODIGO, other.CODIGO);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row3Struct row3 = new row3Struct();




	
	/**
	 * [tAdvancedHash_row3 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row3", false);
		start_Hash.put("tAdvancedHash_row3", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row3";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row3");
					}
				
		int tos_count_tAdvancedHash_row3 = 0;
		

			   		// connection name:row3
			   		// source node:tOracleInput_2 - inputs:(after_tFixedFlowInput_3) outputs:(row3,row3) | target node:tAdvancedHash_row3 - inputs:(row3) outputs:()
			   		// linked node: tMap_2 - inputs:(row2,row3) outputs:(out6)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row3 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row3Struct> tHash_Lookup_row3 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row3Struct>getLookup(matchingModeEnum_row3);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row3", tHash_Lookup_row3);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row3 begin ] stop
 */



	
	/**
	 * [tOracleInput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_2", false);
		start_Hash.put("tOracleInput_2", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_2";
	
	
		int tos_count_tOracleInput_2 = 0;
		
	


	
		    int nb_line_tOracleInput_2 = 0;
		    java.sql.Connection conn_tOracleInput_2 = null;
				conn_tOracleInput_2 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");
				
                boolean isTimeZoneNull_tOracleInput_2 = false;
				boolean isConnectionWrapped_tOracleInput_2 = !(conn_tOracleInput_2 instanceof oracle.jdbc.OracleConnection) && conn_tOracleInput_2.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tOracleInput_2 = null;
                if (isConnectionWrapped_tOracleInput_2) {
					unwrappedOraConn_tOracleInput_2 = conn_tOracleInput_2.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tOracleInput_2 != null) {
                        isTimeZoneNull_tOracleInput_2 = (unwrappedOraConn_tOracleInput_2.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tOracleInput_2 = (((oracle.jdbc.OracleConnection)conn_tOracleInput_2).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tOracleInput_2) {
					java.sql.Statement stmtGetTZ_tOracleInput_2 = conn_tOracleInput_2.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_2 = stmtGetTZ_tOracleInput_2.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_2 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tOracleInput_2.next()) {
						sessionTimezone_tOracleInput_2 = rsGetTZ_tOracleInput_2.getString(1);
					}
					if (isConnectionWrapped_tOracleInput_2 && unwrappedOraConn_tOracleInput_2 != null) {
                        unwrappedOraConn_tOracleInput_2.setSessionTimeZone(sessionTimezone_tOracleInput_2);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_2).setSessionTimeZone(sessionTimezone_tOracleInput_2);
                    }
				}
			
		    
			java.sql.Statement stmt_tOracleInput_2 = conn_tOracleInput_2.createStatement();

		    String dbquery_tOracleInput_2 = "SELECT \n	TAR.ID, \n	TAR.NOMBRE, \n	TAR.CODIGO\nFROM\n	SALUDSIS.AFI_TARCHIVOS TAR\nWHERE\n	TAR.ESTREGISTRO_ID = 1";
		    

		    globalMap.put("tOracleInput_2_QUERY",dbquery_tOracleInput_2);

		    java.sql.ResultSet rs_tOracleInput_2 = null;

		    try {
		    	rs_tOracleInput_2 = stmt_tOracleInput_2.executeQuery(dbquery_tOracleInput_2);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_2 = rs_tOracleInput_2.getMetaData();
		    	int colQtyInRs_tOracleInput_2 = rsmd_tOracleInput_2.getColumnCount();

		    String tmpContent_tOracleInput_2 = null;
		    
		    
		    while (rs_tOracleInput_2.next()) {
		        nb_line_tOracleInput_2++;
		        
							if(colQtyInRs_tOracleInput_2 < 1) {
								row3.ID = 0;
							} else {
		                          
					if(rs_tOracleInput_2.getObject(1) != null) {
						row3.ID = rs_tOracleInput_2.getInt(1);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_2 < 2) {
								row3.NOMBRE = null;
							} else {
	                         		
        	row3.NOMBRE = routines.system.JDBCUtil.getString(rs_tOracleInput_2, 2, false);
		                    }
							if(colQtyInRs_tOracleInput_2 < 3) {
								row3.CODIGO = null;
							} else {
		                          
					if(rs_tOracleInput_2.getObject(3) != null) {
						row3.CODIGO = rs_tOracleInput_2.getInt(3);
					} else {
				
						row3.CODIGO = null;
					}
		                    }
					




 



/**
 * [tOracleInput_2 begin ] stop
 */
	
	/**
	 * [tOracleInput_2 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_2";
	
	

 


	tos_count_tOracleInput_2++;

/**
 * [tOracleInput_2 main ] stop
 */
	
	/**
	 * [tOracleInput_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_2";
	
	

 



/**
 * [tOracleInput_2 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row3 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row3";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row3"
						
						);
					}
					


			   
			   

					row3Struct row3_HashRow = new row3Struct();
		   	   	   
				
				row3_HashRow.ID = row3.ID;
				
				row3_HashRow.NOMBRE = row3.NOMBRE;
				
				row3_HashRow.CODIGO = row3.CODIGO;
				
			tHash_Lookup_row3.put(row3_HashRow);
			
            




 


	tos_count_tAdvancedHash_row3++;

/**
 * [tAdvancedHash_row3 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row3";
	
	

 



/**
 * [tAdvancedHash_row3 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row3 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row3";
	
	

 



/**
 * [tAdvancedHash_row3 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_2";
	
	

 



/**
 * [tOracleInput_2 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_2 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_2";
	
	

}
}finally{
	if (rs_tOracleInput_2 != null) {
		rs_tOracleInput_2.close();
	}
	if (stmt_tOracleInput_2 != null) {
		stmt_tOracleInput_2.close();
	}
}

globalMap.put("tOracleInput_2_NB_LINE",nb_line_tOracleInput_2);
 

ok_Hash.put("tOracleInput_2", true);
end_Hash.put("tOracleInput_2", System.currentTimeMillis());




/**
 * [tOracleInput_2 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row3 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row3";
	
	

tHash_Lookup_row3.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row3");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row3", true);
end_Hash.put("tAdvancedHash_row3", System.currentTimeMillis());




/**
 * [tAdvancedHash_row3 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleInput_2 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_2";
	
	

 



/**
 * [tOracleInput_2 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row3 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row3";
	
	

 



/**
 * [tAdvancedHash_row3 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_2_SUBPROCESS_STATE", 1);
	}
	


public static class row_gen_afiliados_inStruct implements routines.system.IPersistableRow<row_gen_afiliados_inStruct> {
    final static byte[] commonByteArrayLock_AFI_PRINCIPAL_Consolidado_Salud = new byte[0];
    static byte[] commonByteArray_AFI_PRINCIPAL_Consolidado_Salud = new byte[0];

	
			    public Integer AFILIADO_ID;

				public Integer getAFILIADO_ID () {
					return this.AFILIADO_ID;
				}

				public Boolean AFILIADO_IDIsNullable(){
				    return true;
				}
				public Boolean AFILIADO_IDIsKey(){
				    return false;
				}
				public Integer AFILIADO_IDLength(){
				    return 0;
				}
				public Integer AFILIADO_IDPrecision(){
				    return 0;
				}
				public String AFILIADO_IDDefault(){
				
					return null;
				
				}
				public String AFILIADO_IDComment(){
				
				    return "";
				
				}
				public String AFILIADO_IDPattern(){
				
					return "";
				
				}
				public String AFILIADO_IDOriginalDbColumnName(){
				
					return "AFILIADO_ID";
				
				}

				
			    public String PERSONA_ID;

				public String getPERSONA_ID () {
					return this.PERSONA_ID;
				}

				public Boolean PERSONA_IDIsNullable(){
				    return true;
				}
				public Boolean PERSONA_IDIsKey(){
				    return false;
				}
				public Integer PERSONA_IDLength(){
				    return 0;
				}
				public Integer PERSONA_IDPrecision(){
				    return 0;
				}
				public String PERSONA_IDDefault(){
				
					return null;
				
				}
				public String PERSONA_IDComment(){
				
				    return "";
				
				}
				public String PERSONA_IDPattern(){
				
					return "";
				
				}
				public String PERSONA_IDOriginalDbColumnName(){
				
					return "PERSONA_ID";
				
				}

				
			    public String PRIMER_NOMBRE;

				public String getPRIMER_NOMBRE () {
					return this.PRIMER_NOMBRE;
				}

				public Boolean PRIMER_NOMBREIsNullable(){
				    return true;
				}
				public Boolean PRIMER_NOMBREIsKey(){
				    return false;
				}
				public Integer PRIMER_NOMBRELength(){
				    return 0;
				}
				public Integer PRIMER_NOMBREPrecision(){
				    return 0;
				}
				public String PRIMER_NOMBREDefault(){
				
					return null;
				
				}
				public String PRIMER_NOMBREComment(){
				
				    return "";
				
				}
				public String PRIMER_NOMBREPattern(){
				
					return "";
				
				}
				public String PRIMER_NOMBREOriginalDbColumnName(){
				
					return "PRIMER_NOMBRE";
				
				}

				
			    public String SEGUNDO_NOMBRE;

				public String getSEGUNDO_NOMBRE () {
					return this.SEGUNDO_NOMBRE;
				}

				public Boolean SEGUNDO_NOMBREIsNullable(){
				    return true;
				}
				public Boolean SEGUNDO_NOMBREIsKey(){
				    return false;
				}
				public Integer SEGUNDO_NOMBRELength(){
				    return 0;
				}
				public Integer SEGUNDO_NOMBREPrecision(){
				    return 0;
				}
				public String SEGUNDO_NOMBREDefault(){
				
					return null;
				
				}
				public String SEGUNDO_NOMBREComment(){
				
				    return "";
				
				}
				public String SEGUNDO_NOMBREPattern(){
				
					return "";
				
				}
				public String SEGUNDO_NOMBREOriginalDbColumnName(){
				
					return "SEGUNDO_NOMBRE";
				
				}

				
			    public String PRIMER_APELLIDO;

				public String getPRIMER_APELLIDO () {
					return this.PRIMER_APELLIDO;
				}

				public Boolean PRIMER_APELLIDOIsNullable(){
				    return true;
				}
				public Boolean PRIMER_APELLIDOIsKey(){
				    return false;
				}
				public Integer PRIMER_APELLIDOLength(){
				    return 0;
				}
				public Integer PRIMER_APELLIDOPrecision(){
				    return 0;
				}
				public String PRIMER_APELLIDODefault(){
				
					return null;
				
				}
				public String PRIMER_APELLIDOComment(){
				
				    return "";
				
				}
				public String PRIMER_APELLIDOPattern(){
				
					return "";
				
				}
				public String PRIMER_APELLIDOOriginalDbColumnName(){
				
					return "PRIMER_APELLIDO";
				
				}

				
			    public String SEGUNDO_APELLIDO;

				public String getSEGUNDO_APELLIDO () {
					return this.SEGUNDO_APELLIDO;
				}

				public Boolean SEGUNDO_APELLIDOIsNullable(){
				    return true;
				}
				public Boolean SEGUNDO_APELLIDOIsKey(){
				    return false;
				}
				public Integer SEGUNDO_APELLIDOLength(){
				    return 0;
				}
				public Integer SEGUNDO_APELLIDOPrecision(){
				    return 0;
				}
				public String SEGUNDO_APELLIDODefault(){
				
					return null;
				
				}
				public String SEGUNDO_APELLIDOComment(){
				
				    return "";
				
				}
				public String SEGUNDO_APELLIDOPattern(){
				
					return "";
				
				}
				public String SEGUNDO_APELLIDOOriginalDbColumnName(){
				
					return "SEGUNDO_APELLIDO";
				
				}

				
			    public Integer TDOCUMENTOS_ID;

				public Integer getTDOCUMENTOS_ID () {
					return this.TDOCUMENTOS_ID;
				}

				public Boolean TDOCUMENTOS_IDIsNullable(){
				    return true;
				}
				public Boolean TDOCUMENTOS_IDIsKey(){
				    return false;
				}
				public Integer TDOCUMENTOS_IDLength(){
				    return 0;
				}
				public Integer TDOCUMENTOS_IDPrecision(){
				    return 0;
				}
				public String TDOCUMENTOS_IDDefault(){
				
					return null;
				
				}
				public String TDOCUMENTOS_IDComment(){
				
				    return "";
				
				}
				public String TDOCUMENTOS_IDPattern(){
				
					return "";
				
				}
				public String TDOCUMENTOS_IDOriginalDbColumnName(){
				
					return "TDOCUMENTOS_ID";
				
				}

				
			    public String DOCUMENTO;

				public String getDOCUMENTO () {
					return this.DOCUMENTO;
				}

				public Boolean DOCUMENTOIsNullable(){
				    return true;
				}
				public Boolean DOCUMENTOIsKey(){
				    return false;
				}
				public Integer DOCUMENTOLength(){
				    return 0;
				}
				public Integer DOCUMENTOPrecision(){
				    return 0;
				}
				public String DOCUMENTODefault(){
				
					return null;
				
				}
				public String DOCUMENTOComment(){
				
				    return "";
				
				}
				public String DOCUMENTOPattern(){
				
					return "";
				
				}
				public String DOCUMENTOOriginalDbColumnName(){
				
					return "DOCUMENTO";
				
				}

				
			    public BigDecimal SEXO_ID;

				public BigDecimal getSEXO_ID () {
					return this.SEXO_ID;
				}

				public Boolean SEXO_IDIsNullable(){
				    return true;
				}
				public Boolean SEXO_IDIsKey(){
				    return false;
				}
				public Integer SEXO_IDLength(){
				    return 0;
				}
				public Integer SEXO_IDPrecision(){
				    return 0;
				}
				public String SEXO_IDDefault(){
				
					return null;
				
				}
				public String SEXO_IDComment(){
				
				    return "";
				
				}
				public String SEXO_IDPattern(){
				
					return "";
				
				}
				public String SEXO_IDOriginalDbColumnName(){
				
					return "SEXO_ID";
				
				}

				
			    public String DIRECCION;

				public String getDIRECCION () {
					return this.DIRECCION;
				}

				public Boolean DIRECCIONIsNullable(){
				    return true;
				}
				public Boolean DIRECCIONIsKey(){
				    return false;
				}
				public Integer DIRECCIONLength(){
				    return 0;
				}
				public Integer DIRECCIONPrecision(){
				    return 0;
				}
				public String DIRECCIONDefault(){
				
					return null;
				
				}
				public String DIRECCIONComment(){
				
				    return "";
				
				}
				public String DIRECCIONPattern(){
				
					return "";
				
				}
				public String DIRECCIONOriginalDbColumnName(){
				
					return "DIRECCION";
				
				}

				
			    public String TELEFONO;

				public String getTELEFONO () {
					return this.TELEFONO;
				}

				public Boolean TELEFONOIsNullable(){
				    return true;
				}
				public Boolean TELEFONOIsKey(){
				    return false;
				}
				public Integer TELEFONOLength(){
				    return 0;
				}
				public Integer TELEFONOPrecision(){
				    return 0;
				}
				public String TELEFONODefault(){
				
					return null;
				
				}
				public String TELEFONOComment(){
				
				    return "";
				
				}
				public String TELEFONOPattern(){
				
					return "";
				
				}
				public String TELEFONOOriginalDbColumnName(){
				
					return "TELEFONO";
				
				}

				
			    public String EMAIL;

				public String getEMAIL () {
					return this.EMAIL;
				}

				public Boolean EMAILIsNullable(){
				    return true;
				}
				public Boolean EMAILIsKey(){
				    return false;
				}
				public Integer EMAILLength(){
				    return 0;
				}
				public Integer EMAILPrecision(){
				    return 0;
				}
				public String EMAILDefault(){
				
					return null;
				
				}
				public String EMAILComment(){
				
				    return "";
				
				}
				public String EMAILPattern(){
				
					return "";
				
				}
				public String EMAILOriginalDbColumnName(){
				
					return "EMAIL";
				
				}

				
			    public java.util.Date FECHA_NACIMIENTO;

				public java.util.Date getFECHA_NACIMIENTO () {
					return this.FECHA_NACIMIENTO;
				}

				public Boolean FECHA_NACIMIENTOIsNullable(){
				    return true;
				}
				public Boolean FECHA_NACIMIENTOIsKey(){
				    return false;
				}
				public Integer FECHA_NACIMIENTOLength(){
				    return 0;
				}
				public Integer FECHA_NACIMIENTOPrecision(){
				    return 0;
				}
				public String FECHA_NACIMIENTODefault(){
				
					return null;
				
				}
				public String FECHA_NACIMIENTOComment(){
				
				    return "";
				
				}
				public String FECHA_NACIMIENTOPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String FECHA_NACIMIENTOOriginalDbColumnName(){
				
					return "FECHA_NACIMIENTO";
				
				}

				
			    public Integer EDAD;

				public Integer getEDAD () {
					return this.EDAD;
				}

				public Boolean EDADIsNullable(){
				    return true;
				}
				public Boolean EDADIsKey(){
				    return false;
				}
				public Integer EDADLength(){
				    return 0;
				}
				public Integer EDADPrecision(){
				    return 0;
				}
				public String EDADDefault(){
				
					return null;
				
				}
				public String EDADComment(){
				
				    return "";
				
				}
				public String EDADPattern(){
				
					return "";
				
				}
				public String EDADOriginalDbColumnName(){
				
					return "EDAD";
				
				}

				
			    public BigDecimal LUGAR_RESIDENCIA;

				public BigDecimal getLUGAR_RESIDENCIA () {
					return this.LUGAR_RESIDENCIA;
				}

				public Boolean LUGAR_RESIDENCIAIsNullable(){
				    return true;
				}
				public Boolean LUGAR_RESIDENCIAIsKey(){
				    return false;
				}
				public Integer LUGAR_RESIDENCIALength(){
				    return 0;
				}
				public Integer LUGAR_RESIDENCIAPrecision(){
				    return 0;
				}
				public String LUGAR_RESIDENCIADefault(){
				
					return null;
				
				}
				public String LUGAR_RESIDENCIAComment(){
				
				    return "";
				
				}
				public String LUGAR_RESIDENCIAPattern(){
				
					return "";
				
				}
				public String LUGAR_RESIDENCIAOriginalDbColumnName(){
				
					return "LUGAR_RESIDENCIA";
				
				}

				
			    public BigDecimal ESMADSCRITO;

				public BigDecimal getESMADSCRITO () {
					return this.ESMADSCRITO;
				}

				public Boolean ESMADSCRITOIsNullable(){
				    return true;
				}
				public Boolean ESMADSCRITOIsKey(){
				    return false;
				}
				public Integer ESMADSCRITOLength(){
				    return 0;
				}
				public Integer ESMADSCRITOPrecision(){
				    return 0;
				}
				public String ESMADSCRITODefault(){
				
					return null;
				
				}
				public String ESMADSCRITOComment(){
				
				    return "";
				
				}
				public String ESMADSCRITOPattern(){
				
					return "";
				
				}
				public String ESMADSCRITOOriginalDbColumnName(){
				
					return "ESMADSCRITO";
				
				}

				
			    public BigDecimal TDISCAPACIDADES_ID;

				public BigDecimal getTDISCAPACIDADES_ID () {
					return this.TDISCAPACIDADES_ID;
				}

				public Boolean TDISCAPACIDADES_IDIsNullable(){
				    return true;
				}
				public Boolean TDISCAPACIDADES_IDIsKey(){
				    return false;
				}
				public Integer TDISCAPACIDADES_IDLength(){
				    return 0;
				}
				public Integer TDISCAPACIDADES_IDPrecision(){
				    return 0;
				}
				public String TDISCAPACIDADES_IDDefault(){
				
					return null;
				
				}
				public String TDISCAPACIDADES_IDComment(){
				
				    return "";
				
				}
				public String TDISCAPACIDADES_IDPattern(){
				
					return "";
				
				}
				public String TDISCAPACIDADES_IDOriginalDbColumnName(){
				
					return "TDISCAPACIDADES_ID";
				
				}

				
			    public java.util.Date FECHAI;

				public java.util.Date getFECHAI () {
					return this.FECHAI;
				}

				public Boolean FECHAIIsNullable(){
				    return true;
				}
				public Boolean FECHAIIsKey(){
				    return false;
				}
				public Integer FECHAILength(){
				    return 0;
				}
				public Integer FECHAIPrecision(){
				    return 0;
				}
				public String FECHAIDefault(){
				
					return null;
				
				}
				public String FECHAIComment(){
				
				    return "";
				
				}
				public String FECHAIPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String FECHAIOriginalDbColumnName(){
				
					return "FECHAI";
				
				}

				
			    public java.util.Date FECHA_INACTIVACION;

				public java.util.Date getFECHA_INACTIVACION () {
					return this.FECHA_INACTIVACION;
				}

				public Boolean FECHA_INACTIVACIONIsNullable(){
				    return true;
				}
				public Boolean FECHA_INACTIVACIONIsKey(){
				    return false;
				}
				public Integer FECHA_INACTIVACIONLength(){
				    return 0;
				}
				public Integer FECHA_INACTIVACIONPrecision(){
				    return 0;
				}
				public String FECHA_INACTIVACIONDefault(){
				
					return null;
				
				}
				public String FECHA_INACTIVACIONComment(){
				
				    return "";
				
				}
				public String FECHA_INACTIVACIONPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String FECHA_INACTIVACIONOriginalDbColumnName(){
				
					return "FECHA_INACTIVACION";
				
				}

				
			    public BigDecimal PARENTESCOS_ID;

				public BigDecimal getPARENTESCOS_ID () {
					return this.PARENTESCOS_ID;
				}

				public Boolean PARENTESCOS_IDIsNullable(){
				    return true;
				}
				public Boolean PARENTESCOS_IDIsKey(){
				    return false;
				}
				public Integer PARENTESCOS_IDLength(){
				    return 0;
				}
				public Integer PARENTESCOS_IDPrecision(){
				    return 0;
				}
				public String PARENTESCOS_IDDefault(){
				
					return null;
				
				}
				public String PARENTESCOS_IDComment(){
				
				    return "";
				
				}
				public String PARENTESCOS_IDPattern(){
				
					return "";
				
				}
				public String PARENTESCOS_IDOriginalDbColumnName(){
				
					return "PARENTESCOS_ID";
				
				}

				
			    public BigDecimal PADRE_ID;

				public BigDecimal getPADRE_ID () {
					return this.PADRE_ID;
				}

				public Boolean PADRE_IDIsNullable(){
				    return true;
				}
				public Boolean PADRE_IDIsKey(){
				    return false;
				}
				public Integer PADRE_IDLength(){
				    return 0;
				}
				public Integer PADRE_IDPrecision(){
				    return 0;
				}
				public String PADRE_IDDefault(){
				
					return null;
				
				}
				public String PADRE_IDComment(){
				
				    return "";
				
				}
				public String PADRE_IDPattern(){
				
					return "";
				
				}
				public String PADRE_IDOriginalDbColumnName(){
				
					return "PADRE_ID";
				
				}

				
			    public BigDecimal PLANAFILIACIONES_ID;

				public BigDecimal getPLANAFILIACIONES_ID () {
					return this.PLANAFILIACIONES_ID;
				}

				public Boolean PLANAFILIACIONES_IDIsNullable(){
				    return true;
				}
				public Boolean PLANAFILIACIONES_IDIsKey(){
				    return false;
				}
				public Integer PLANAFILIACIONES_IDLength(){
				    return 0;
				}
				public Integer PLANAFILIACIONES_IDPrecision(){
				    return 0;
				}
				public String PLANAFILIACIONES_IDDefault(){
				
					return null;
				
				}
				public String PLANAFILIACIONES_IDComment(){
				
				    return "";
				
				}
				public String PLANAFILIACIONES_IDPattern(){
				
					return "";
				
				}
				public String PLANAFILIACIONES_IDOriginalDbColumnName(){
				
					return "PLANAFILIACIONES_ID";
				
				}

				
			    public String ESTADO;

				public String getESTADO () {
					return this.ESTADO;
				}

				public Boolean ESTADOIsNullable(){
				    return true;
				}
				public Boolean ESTADOIsKey(){
				    return false;
				}
				public Integer ESTADOLength(){
				    return 0;
				}
				public Integer ESTADOPrecision(){
				    return 0;
				}
				public String ESTADODefault(){
				
					return null;
				
				}
				public String ESTADOComment(){
				
				    return "";
				
				}
				public String ESTADOPattern(){
				
					return "";
				
				}
				public String ESTADOOriginalDbColumnName(){
				
					return "ESTADO";
				
				}

				
			    public BigDecimal GRDMILITARES_ID;

				public BigDecimal getGRDMILITARES_ID () {
					return this.GRDMILITARES_ID;
				}

				public Boolean GRDMILITARES_IDIsNullable(){
				    return true;
				}
				public Boolean GRDMILITARES_IDIsKey(){
				    return false;
				}
				public Integer GRDMILITARES_IDLength(){
				    return 0;
				}
				public Integer GRDMILITARES_IDPrecision(){
				    return 0;
				}
				public String GRDMILITARES_IDDefault(){
				
					return null;
				
				}
				public String GRDMILITARES_IDComment(){
				
				    return "";
				
				}
				public String GRDMILITARES_IDPattern(){
				
					return "";
				
				}
				public String GRDMILITARES_IDOriginalDbColumnName(){
				
					return "GRDMILITARES_ID";
				
				}

				
			    public BigDecimal FUERZAS_ID;

				public BigDecimal getFUERZAS_ID () {
					return this.FUERZAS_ID;
				}

				public Boolean FUERZAS_IDIsNullable(){
				    return true;
				}
				public Boolean FUERZAS_IDIsKey(){
				    return false;
				}
				public Integer FUERZAS_IDLength(){
				    return 0;
				}
				public Integer FUERZAS_IDPrecision(){
				    return 0;
				}
				public String FUERZAS_IDDefault(){
				
					return null;
				
				}
				public String FUERZAS_IDComment(){
				
				    return "";
				
				}
				public String FUERZAS_IDPattern(){
				
					return "";
				
				}
				public String FUERZAS_IDOriginalDbColumnName(){
				
					return "FUERZAS_ID";
				
				}

				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_PRINCIPAL_Consolidado_Salud.length) {
				if(length < 1024 && commonByteArray_AFI_PRINCIPAL_Consolidado_Salud.length == 0) {
   					commonByteArray_AFI_PRINCIPAL_Consolidado_Salud = new byte[1024];
				} else {
   					commonByteArray_AFI_PRINCIPAL_Consolidado_Salud = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_PRINCIPAL_Consolidado_Salud, 0, length);
			strReturn = new String(commonByteArray_AFI_PRINCIPAL_Consolidado_Salud, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_PRINCIPAL_Consolidado_Salud.length) {
				if(length < 1024 && commonByteArray_AFI_PRINCIPAL_Consolidado_Salud.length == 0) {
   					commonByteArray_AFI_PRINCIPAL_Consolidado_Salud = new byte[1024];
				} else {
   					commonByteArray_AFI_PRINCIPAL_Consolidado_Salud = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_PRINCIPAL_Consolidado_Salud, 0, length);
			strReturn = new String(commonByteArray_AFI_PRINCIPAL_Consolidado_Salud, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_PRINCIPAL_Consolidado_Salud) {

        	try {

        		int length = 0;
		
						this.AFILIADO_ID = readInteger(dis);
					
					this.PERSONA_ID = readString(dis);
					
					this.PRIMER_NOMBRE = readString(dis);
					
					this.SEGUNDO_NOMBRE = readString(dis);
					
					this.PRIMER_APELLIDO = readString(dis);
					
					this.SEGUNDO_APELLIDO = readString(dis);
					
						this.TDOCUMENTOS_ID = readInteger(dis);
					
					this.DOCUMENTO = readString(dis);
					
						this.SEXO_ID = (BigDecimal) dis.readObject();
					
					this.DIRECCION = readString(dis);
					
					this.TELEFONO = readString(dis);
					
					this.EMAIL = readString(dis);
					
					this.FECHA_NACIMIENTO = readDate(dis);
					
						this.EDAD = readInteger(dis);
					
						this.LUGAR_RESIDENCIA = (BigDecimal) dis.readObject();
					
						this.ESMADSCRITO = (BigDecimal) dis.readObject();
					
						this.TDISCAPACIDADES_ID = (BigDecimal) dis.readObject();
					
					this.FECHAI = readDate(dis);
					
					this.FECHA_INACTIVACION = readDate(dis);
					
						this.PARENTESCOS_ID = (BigDecimal) dis.readObject();
					
						this.PADRE_ID = (BigDecimal) dis.readObject();
					
						this.PLANAFILIACIONES_ID = (BigDecimal) dis.readObject();
					
					this.ESTADO = readString(dis);
					
						this.GRDMILITARES_ID = (BigDecimal) dis.readObject();
					
						this.FUERZAS_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_PRINCIPAL_Consolidado_Salud) {

        	try {

        		int length = 0;
		
						this.AFILIADO_ID = readInteger(dis);
					
					this.PERSONA_ID = readString(dis);
					
					this.PRIMER_NOMBRE = readString(dis);
					
					this.SEGUNDO_NOMBRE = readString(dis);
					
					this.PRIMER_APELLIDO = readString(dis);
					
					this.SEGUNDO_APELLIDO = readString(dis);
					
						this.TDOCUMENTOS_ID = readInteger(dis);
					
					this.DOCUMENTO = readString(dis);
					
						this.SEXO_ID = (BigDecimal) dis.readObject();
					
					this.DIRECCION = readString(dis);
					
					this.TELEFONO = readString(dis);
					
					this.EMAIL = readString(dis);
					
					this.FECHA_NACIMIENTO = readDate(dis);
					
						this.EDAD = readInteger(dis);
					
						this.LUGAR_RESIDENCIA = (BigDecimal) dis.readObject();
					
						this.ESMADSCRITO = (BigDecimal) dis.readObject();
					
						this.TDISCAPACIDADES_ID = (BigDecimal) dis.readObject();
					
					this.FECHAI = readDate(dis);
					
					this.FECHA_INACTIVACION = readDate(dis);
					
						this.PARENTESCOS_ID = (BigDecimal) dis.readObject();
					
						this.PADRE_ID = (BigDecimal) dis.readObject();
					
						this.PLANAFILIACIONES_ID = (BigDecimal) dis.readObject();
					
					this.ESTADO = readString(dis);
					
						this.GRDMILITARES_ID = (BigDecimal) dis.readObject();
					
						this.FUERZAS_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.AFILIADO_ID,dos);
					
					// String
				
						writeString(this.PERSONA_ID,dos);
					
					// String
				
						writeString(this.PRIMER_NOMBRE,dos);
					
					// String
				
						writeString(this.SEGUNDO_NOMBRE,dos);
					
					// String
				
						writeString(this.PRIMER_APELLIDO,dos);
					
					// String
				
						writeString(this.SEGUNDO_APELLIDO,dos);
					
					// Integer
				
						writeInteger(this.TDOCUMENTOS_ID,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.SEXO_ID);
					
					// String
				
						writeString(this.DIRECCION,dos);
					
					// String
				
						writeString(this.TELEFONO,dos);
					
					// String
				
						writeString(this.EMAIL,dos);
					
					// java.util.Date
				
						writeDate(this.FECHA_NACIMIENTO,dos);
					
					// Integer
				
						writeInteger(this.EDAD,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.LUGAR_RESIDENCIA);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ESMADSCRITO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TDISCAPACIDADES_ID);
					
					// java.util.Date
				
						writeDate(this.FECHAI,dos);
					
					// java.util.Date
				
						writeDate(this.FECHA_INACTIVACION,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PARENTESCOS_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PADRE_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PLANAFILIACIONES_ID);
					
					// String
				
						writeString(this.ESTADO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.GRDMILITARES_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FUERZAS_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.AFILIADO_ID,dos);
					
					// String
				
						writeString(this.PERSONA_ID,dos);
					
					// String
				
						writeString(this.PRIMER_NOMBRE,dos);
					
					// String
				
						writeString(this.SEGUNDO_NOMBRE,dos);
					
					// String
				
						writeString(this.PRIMER_APELLIDO,dos);
					
					// String
				
						writeString(this.SEGUNDO_APELLIDO,dos);
					
					// Integer
				
						writeInteger(this.TDOCUMENTOS_ID,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.SEXO_ID);
					
					// String
				
						writeString(this.DIRECCION,dos);
					
					// String
				
						writeString(this.TELEFONO,dos);
					
					// String
				
						writeString(this.EMAIL,dos);
					
					// java.util.Date
				
						writeDate(this.FECHA_NACIMIENTO,dos);
					
					// Integer
				
						writeInteger(this.EDAD,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.LUGAR_RESIDENCIA);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ESMADSCRITO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TDISCAPACIDADES_ID);
					
					// java.util.Date
				
						writeDate(this.FECHAI,dos);
					
					// java.util.Date
				
						writeDate(this.FECHA_INACTIVACION,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PARENTESCOS_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PADRE_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PLANAFILIACIONES_ID);
					
					// String
				
						writeString(this.ESTADO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.GRDMILITARES_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.FUERZAS_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("AFILIADO_ID="+String.valueOf(AFILIADO_ID));
		sb.append(",PERSONA_ID="+PERSONA_ID);
		sb.append(",PRIMER_NOMBRE="+PRIMER_NOMBRE);
		sb.append(",SEGUNDO_NOMBRE="+SEGUNDO_NOMBRE);
		sb.append(",PRIMER_APELLIDO="+PRIMER_APELLIDO);
		sb.append(",SEGUNDO_APELLIDO="+SEGUNDO_APELLIDO);
		sb.append(",TDOCUMENTOS_ID="+String.valueOf(TDOCUMENTOS_ID));
		sb.append(",DOCUMENTO="+DOCUMENTO);
		sb.append(",SEXO_ID="+String.valueOf(SEXO_ID));
		sb.append(",DIRECCION="+DIRECCION);
		sb.append(",TELEFONO="+TELEFONO);
		sb.append(",EMAIL="+EMAIL);
		sb.append(",FECHA_NACIMIENTO="+String.valueOf(FECHA_NACIMIENTO));
		sb.append(",EDAD="+String.valueOf(EDAD));
		sb.append(",LUGAR_RESIDENCIA="+String.valueOf(LUGAR_RESIDENCIA));
		sb.append(",ESMADSCRITO="+String.valueOf(ESMADSCRITO));
		sb.append(",TDISCAPACIDADES_ID="+String.valueOf(TDISCAPACIDADES_ID));
		sb.append(",FECHAI="+String.valueOf(FECHAI));
		sb.append(",FECHA_INACTIVACION="+String.valueOf(FECHA_INACTIVACION));
		sb.append(",PARENTESCOS_ID="+String.valueOf(PARENTESCOS_ID));
		sb.append(",PADRE_ID="+String.valueOf(PADRE_ID));
		sb.append(",PLANAFILIACIONES_ID="+String.valueOf(PLANAFILIACIONES_ID));
		sb.append(",ESTADO="+ESTADO);
		sb.append(",GRDMILITARES_ID="+String.valueOf(GRDMILITARES_ID));
		sb.append(",FUERZAS_ID="+String.valueOf(FUERZAS_ID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row_gen_afiliados_inStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_8Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_8_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row_gen_afiliados_inStruct row_gen_afiliados_in = new row_gen_afiliados_inStruct();




	
	/**
	 * [tAdvancedHash_row_gen_afiliados_in begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row_gen_afiliados_in", false);
		start_Hash.put("tAdvancedHash_row_gen_afiliados_in", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row_gen_afiliados_in";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row_gen_afiliados_in");
					}
				
		int tos_count_tAdvancedHash_row_gen_afiliados_in = 0;
		

			   		// connection name:row_gen_afiliados_in
			   		// source node:tOracleInput_8 - inputs:(after_tHashInput_2) outputs:(row_gen_afiliados_in,row_gen_afiliados_in) | target node:tAdvancedHash_row_gen_afiliados_in - inputs:(row_gen_afiliados_in) outputs:()
			   		// linked node: tMap_1 - inputs:(row_info_encuesta_in,row_gen_afiliados_in,row_afi_planafiliaciones_in,row_gen_preguntas_in,row_gen_tdocumentos_in,row_gen_sexos_in) outputs:(row_info_encuestas_out)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row_gen_afiliados_in = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.ALL_ROWS;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row_gen_afiliados_inStruct> tHash_Lookup_row_gen_afiliados_in =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row_gen_afiliados_inStruct>getLookup(matchingModeEnum_row_gen_afiliados_in);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row_gen_afiliados_in", tHash_Lookup_row_gen_afiliados_in);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row_gen_afiliados_in begin ] stop
 */



	
	/**
	 * [tOracleInput_8 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_8", false);
		start_Hash.put("tOracleInput_8", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_8";
	
	
		int tos_count_tOracleInput_8 = 0;
		
	


	
		    int nb_line_tOracleInput_8 = 0;
		    java.sql.Connection conn_tOracleInput_8 = null;
				conn_tOracleInput_8 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");
				
                boolean isTimeZoneNull_tOracleInput_8 = false;
				boolean isConnectionWrapped_tOracleInput_8 = !(conn_tOracleInput_8 instanceof oracle.jdbc.OracleConnection) && conn_tOracleInput_8.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tOracleInput_8 = null;
                if (isConnectionWrapped_tOracleInput_8) {
					unwrappedOraConn_tOracleInput_8 = conn_tOracleInput_8.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tOracleInput_8 != null) {
                        isTimeZoneNull_tOracleInput_8 = (unwrappedOraConn_tOracleInput_8.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tOracleInput_8 = (((oracle.jdbc.OracleConnection)conn_tOracleInput_8).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tOracleInput_8) {
					java.sql.Statement stmtGetTZ_tOracleInput_8 = conn_tOracleInput_8.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_8 = stmtGetTZ_tOracleInput_8.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_8 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tOracleInput_8.next()) {
						sessionTimezone_tOracleInput_8 = rsGetTZ_tOracleInput_8.getString(1);
					}
					if (isConnectionWrapped_tOracleInput_8 && unwrappedOraConn_tOracleInput_8 != null) {
                        unwrappedOraConn_tOracleInput_8.setSessionTimeZone(sessionTimezone_tOracleInput_8);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_8).setSessionTimeZone(sessionTimezone_tOracleInput_8);
                    }
				}
			
		    
			java.sql.Statement stmt_tOracleInput_8 = conn_tOracleInput_8.createStatement();

		    String dbquery_tOracleInput_8 = "SELECT\n	DISTINCT GA.ID AS AFILIADO_ID,\n	GP.ID AS PERSONA_ID,\n	GP.PRIMER_NOMBRE,\n	GP.SEGUNDO_NOMBRE,\n	GP.PRIMER_APE"
+"LLIDO,\n	GP.SEGUNDO_APELLIDO,\n	GP.TDOCUMENTOS_ID,\n	GP.DOCUMENTO,\n	GP.SEXO_ID,\n	GP.DIRECCION,\n	GP.TELEFONO,\n	GP.EMA"
+"IL,\n	GP.FECHA_NACIMIENTO,\n	TRUNC(MONTHS_BETWEEN(SYSDATE,GP.FECHA_NACIMIENTO)/12) AS EDAD,\n	GP.LUGAR_RESIDENCIA,\n	GP."
+"ESMADSCRITO,\n	GP.TDISCAPACIDADES_ID,\n	GA.FECHAI,\n	CASE WHEN GA.ESTAFILIACION = 'Inactivo'THEN  SALUDSIS.AFI.ObtenerFe"
+"chaEstAfiliado(GA.ID)  ELSE NULL END AS FECHA_INACTIVACION,	\n	GA.PARENTESCOS_ID,\n	GA.PADRE_ID,\n	GA.PLANAFILIACIONES_I"
+"D,\n	GA.ESTAFILIACION AS ESTADO,\n	GAEA.GRDMILITARES_ID,\n	GAEA.FUERZAS_ID\nFROM	\n	SALUDSIS.GEN_AFILIADOS  GA\n	INNER J"
+"OIN SALUDSIS.GEN_PERSONAS GP ON GP.ID = GA.PERSONAS_ID\n	LEFT JOIN SALUDSIS.GEN_AFILIADOS_ENTAPORTANTE GAEA ON GA.ID=GAE"
+"A.AFILIADOS_ID\nWHERE\n	GA.ID IN ("+context.auxAfiliadosCompendio+") AND\n	GA.ESTAFILIACION='Activo' AND \n	GA.ESTREGISTRO_ID=1 AND\n	GP.ESTREGISTRO_ID=1";
		    

		    globalMap.put("tOracleInput_8_QUERY",dbquery_tOracleInput_8);

		    java.sql.ResultSet rs_tOracleInput_8 = null;

		    try {
		    	rs_tOracleInput_8 = stmt_tOracleInput_8.executeQuery(dbquery_tOracleInput_8);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_8 = rs_tOracleInput_8.getMetaData();
		    	int colQtyInRs_tOracleInput_8 = rsmd_tOracleInput_8.getColumnCount();

		    String tmpContent_tOracleInput_8 = null;
		    
		    
		    while (rs_tOracleInput_8.next()) {
		        nb_line_tOracleInput_8++;
		        
							if(colQtyInRs_tOracleInput_8 < 1) {
								row_gen_afiliados_in.AFILIADO_ID = null;
							} else {
		                          
					if(rs_tOracleInput_8.getObject(1) != null) {
						row_gen_afiliados_in.AFILIADO_ID = rs_tOracleInput_8.getInt(1);
					} else {
				
						row_gen_afiliados_in.AFILIADO_ID = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_8 < 2) {
								row_gen_afiliados_in.PERSONA_ID = null;
							} else {
	                         		
        	row_gen_afiliados_in.PERSONA_ID = routines.system.JDBCUtil.getString(rs_tOracleInput_8, 2, false);
		                    }
							if(colQtyInRs_tOracleInput_8 < 3) {
								row_gen_afiliados_in.PRIMER_NOMBRE = null;
							} else {
	                         		
        	row_gen_afiliados_in.PRIMER_NOMBRE = routines.system.JDBCUtil.getString(rs_tOracleInput_8, 3, false);
		                    }
							if(colQtyInRs_tOracleInput_8 < 4) {
								row_gen_afiliados_in.SEGUNDO_NOMBRE = null;
							} else {
	                         		
        	row_gen_afiliados_in.SEGUNDO_NOMBRE = routines.system.JDBCUtil.getString(rs_tOracleInput_8, 4, false);
		                    }
							if(colQtyInRs_tOracleInput_8 < 5) {
								row_gen_afiliados_in.PRIMER_APELLIDO = null;
							} else {
	                         		
        	row_gen_afiliados_in.PRIMER_APELLIDO = routines.system.JDBCUtil.getString(rs_tOracleInput_8, 5, false);
		                    }
							if(colQtyInRs_tOracleInput_8 < 6) {
								row_gen_afiliados_in.SEGUNDO_APELLIDO = null;
							} else {
	                         		
        	row_gen_afiliados_in.SEGUNDO_APELLIDO = routines.system.JDBCUtil.getString(rs_tOracleInput_8, 6, false);
		                    }
							if(colQtyInRs_tOracleInput_8 < 7) {
								row_gen_afiliados_in.TDOCUMENTOS_ID = null;
							} else {
		                          
					if(rs_tOracleInput_8.getObject(7) != null) {
						row_gen_afiliados_in.TDOCUMENTOS_ID = rs_tOracleInput_8.getInt(7);
					} else {
				
						row_gen_afiliados_in.TDOCUMENTOS_ID = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_8 < 8) {
								row_gen_afiliados_in.DOCUMENTO = null;
							} else {
	                         		
        	row_gen_afiliados_in.DOCUMENTO = routines.system.JDBCUtil.getString(rs_tOracleInput_8, 8, false);
		                    }
							if(colQtyInRs_tOracleInput_8 < 9) {
								row_gen_afiliados_in.SEXO_ID = null;
							} else {
		                          
					if(rs_tOracleInput_8.getObject(9) != null) {
						row_gen_afiliados_in.SEXO_ID = rs_tOracleInput_8.getBigDecimal(9);
					} else {
				
						row_gen_afiliados_in.SEXO_ID = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_8 < 10) {
								row_gen_afiliados_in.DIRECCION = null;
							} else {
	                         		
        	row_gen_afiliados_in.DIRECCION = routines.system.JDBCUtil.getString(rs_tOracleInput_8, 10, false);
		                    }
							if(colQtyInRs_tOracleInput_8 < 11) {
								row_gen_afiliados_in.TELEFONO = null;
							} else {
	                         		
        	row_gen_afiliados_in.TELEFONO = routines.system.JDBCUtil.getString(rs_tOracleInput_8, 11, false);
		                    }
							if(colQtyInRs_tOracleInput_8 < 12) {
								row_gen_afiliados_in.EMAIL = null;
							} else {
	                         		
        	row_gen_afiliados_in.EMAIL = routines.system.JDBCUtil.getString(rs_tOracleInput_8, 12, false);
		                    }
							if(colQtyInRs_tOracleInput_8 < 13) {
								row_gen_afiliados_in.FECHA_NACIMIENTO = null;
							} else {
										
			row_gen_afiliados_in.FECHA_NACIMIENTO = routines.system.JDBCUtil.getDate(rs_tOracleInput_8, 13);
		                    }
							if(colQtyInRs_tOracleInput_8 < 14) {
								row_gen_afiliados_in.EDAD = null;
							} else {
		                          
					if(rs_tOracleInput_8.getObject(14) != null) {
						row_gen_afiliados_in.EDAD = rs_tOracleInput_8.getInt(14);
					} else {
				
						row_gen_afiliados_in.EDAD = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_8 < 15) {
								row_gen_afiliados_in.LUGAR_RESIDENCIA = null;
							} else {
		                          
					if(rs_tOracleInput_8.getObject(15) != null) {
						row_gen_afiliados_in.LUGAR_RESIDENCIA = rs_tOracleInput_8.getBigDecimal(15);
					} else {
				
						row_gen_afiliados_in.LUGAR_RESIDENCIA = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_8 < 16) {
								row_gen_afiliados_in.ESMADSCRITO = null;
							} else {
		                          
					if(rs_tOracleInput_8.getObject(16) != null) {
						row_gen_afiliados_in.ESMADSCRITO = rs_tOracleInput_8.getBigDecimal(16);
					} else {
				
						row_gen_afiliados_in.ESMADSCRITO = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_8 < 17) {
								row_gen_afiliados_in.TDISCAPACIDADES_ID = null;
							} else {
		                          
					if(rs_tOracleInput_8.getObject(17) != null) {
						row_gen_afiliados_in.TDISCAPACIDADES_ID = rs_tOracleInput_8.getBigDecimal(17);
					} else {
				
						row_gen_afiliados_in.TDISCAPACIDADES_ID = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_8 < 18) {
								row_gen_afiliados_in.FECHAI = null;
							} else {
										
			row_gen_afiliados_in.FECHAI = routines.system.JDBCUtil.getDate(rs_tOracleInput_8, 18);
		                    }
							if(colQtyInRs_tOracleInput_8 < 19) {
								row_gen_afiliados_in.FECHA_INACTIVACION = null;
							} else {
										
			row_gen_afiliados_in.FECHA_INACTIVACION = routines.system.JDBCUtil.getDate(rs_tOracleInput_8, 19);
		                    }
							if(colQtyInRs_tOracleInput_8 < 20) {
								row_gen_afiliados_in.PARENTESCOS_ID = null;
							} else {
		                          
					if(rs_tOracleInput_8.getObject(20) != null) {
						row_gen_afiliados_in.PARENTESCOS_ID = rs_tOracleInput_8.getBigDecimal(20);
					} else {
				
						row_gen_afiliados_in.PARENTESCOS_ID = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_8 < 21) {
								row_gen_afiliados_in.PADRE_ID = null;
							} else {
		                          
					if(rs_tOracleInput_8.getObject(21) != null) {
						row_gen_afiliados_in.PADRE_ID = rs_tOracleInput_8.getBigDecimal(21);
					} else {
				
						row_gen_afiliados_in.PADRE_ID = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_8 < 22) {
								row_gen_afiliados_in.PLANAFILIACIONES_ID = null;
							} else {
		                          
					if(rs_tOracleInput_8.getObject(22) != null) {
						row_gen_afiliados_in.PLANAFILIACIONES_ID = rs_tOracleInput_8.getBigDecimal(22);
					} else {
				
						row_gen_afiliados_in.PLANAFILIACIONES_ID = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_8 < 23) {
								row_gen_afiliados_in.ESTADO = null;
							} else {
	                         		
        	row_gen_afiliados_in.ESTADO = routines.system.JDBCUtil.getString(rs_tOracleInput_8, 23, false);
		                    }
							if(colQtyInRs_tOracleInput_8 < 24) {
								row_gen_afiliados_in.GRDMILITARES_ID = null;
							} else {
		                          
					if(rs_tOracleInput_8.getObject(24) != null) {
						row_gen_afiliados_in.GRDMILITARES_ID = rs_tOracleInput_8.getBigDecimal(24);
					} else {
				
						row_gen_afiliados_in.GRDMILITARES_ID = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_8 < 25) {
								row_gen_afiliados_in.FUERZAS_ID = null;
							} else {
		                          
					if(rs_tOracleInput_8.getObject(25) != null) {
						row_gen_afiliados_in.FUERZAS_ID = rs_tOracleInput_8.getBigDecimal(25);
					} else {
				
						row_gen_afiliados_in.FUERZAS_ID = null;
					}
		                    }
					




 



/**
 * [tOracleInput_8 begin ] stop
 */
	
	/**
	 * [tOracleInput_8 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_8";
	
	

 


	tos_count_tOracleInput_8++;

/**
 * [tOracleInput_8 main ] stop
 */
	
	/**
	 * [tOracleInput_8 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_8";
	
	

 



/**
 * [tOracleInput_8 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row_gen_afiliados_in main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row_gen_afiliados_in";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row_gen_afiliados_in"
						
						);
					}
					


			   
			   

					row_gen_afiliados_inStruct row_gen_afiliados_in_HashRow = new row_gen_afiliados_inStruct();
		   	   	   
				
				row_gen_afiliados_in_HashRow.AFILIADO_ID = row_gen_afiliados_in.AFILIADO_ID;
				
				row_gen_afiliados_in_HashRow.PERSONA_ID = row_gen_afiliados_in.PERSONA_ID;
				
				row_gen_afiliados_in_HashRow.PRIMER_NOMBRE = row_gen_afiliados_in.PRIMER_NOMBRE;
				
				row_gen_afiliados_in_HashRow.SEGUNDO_NOMBRE = row_gen_afiliados_in.SEGUNDO_NOMBRE;
				
				row_gen_afiliados_in_HashRow.PRIMER_APELLIDO = row_gen_afiliados_in.PRIMER_APELLIDO;
				
				row_gen_afiliados_in_HashRow.SEGUNDO_APELLIDO = row_gen_afiliados_in.SEGUNDO_APELLIDO;
				
				row_gen_afiliados_in_HashRow.TDOCUMENTOS_ID = row_gen_afiliados_in.TDOCUMENTOS_ID;
				
				row_gen_afiliados_in_HashRow.DOCUMENTO = row_gen_afiliados_in.DOCUMENTO;
				
				row_gen_afiliados_in_HashRow.SEXO_ID = row_gen_afiliados_in.SEXO_ID;
				
				row_gen_afiliados_in_HashRow.DIRECCION = row_gen_afiliados_in.DIRECCION;
				
				row_gen_afiliados_in_HashRow.TELEFONO = row_gen_afiliados_in.TELEFONO;
				
				row_gen_afiliados_in_HashRow.EMAIL = row_gen_afiliados_in.EMAIL;
				
				row_gen_afiliados_in_HashRow.FECHA_NACIMIENTO = row_gen_afiliados_in.FECHA_NACIMIENTO;
				
				row_gen_afiliados_in_HashRow.EDAD = row_gen_afiliados_in.EDAD;
				
				row_gen_afiliados_in_HashRow.LUGAR_RESIDENCIA = row_gen_afiliados_in.LUGAR_RESIDENCIA;
				
				row_gen_afiliados_in_HashRow.ESMADSCRITO = row_gen_afiliados_in.ESMADSCRITO;
				
				row_gen_afiliados_in_HashRow.TDISCAPACIDADES_ID = row_gen_afiliados_in.TDISCAPACIDADES_ID;
				
				row_gen_afiliados_in_HashRow.FECHAI = row_gen_afiliados_in.FECHAI;
				
				row_gen_afiliados_in_HashRow.FECHA_INACTIVACION = row_gen_afiliados_in.FECHA_INACTIVACION;
				
				row_gen_afiliados_in_HashRow.PARENTESCOS_ID = row_gen_afiliados_in.PARENTESCOS_ID;
				
				row_gen_afiliados_in_HashRow.PADRE_ID = row_gen_afiliados_in.PADRE_ID;
				
				row_gen_afiliados_in_HashRow.PLANAFILIACIONES_ID = row_gen_afiliados_in.PLANAFILIACIONES_ID;
				
				row_gen_afiliados_in_HashRow.ESTADO = row_gen_afiliados_in.ESTADO;
				
				row_gen_afiliados_in_HashRow.GRDMILITARES_ID = row_gen_afiliados_in.GRDMILITARES_ID;
				
				row_gen_afiliados_in_HashRow.FUERZAS_ID = row_gen_afiliados_in.FUERZAS_ID;
				
			tHash_Lookup_row_gen_afiliados_in.put(row_gen_afiliados_in_HashRow);
			
            




 


	tos_count_tAdvancedHash_row_gen_afiliados_in++;

/**
 * [tAdvancedHash_row_gen_afiliados_in main ] stop
 */
	
	/**
	 * [tAdvancedHash_row_gen_afiliados_in process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row_gen_afiliados_in";
	
	

 



/**
 * [tAdvancedHash_row_gen_afiliados_in process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row_gen_afiliados_in process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row_gen_afiliados_in";
	
	

 



/**
 * [tAdvancedHash_row_gen_afiliados_in process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_8 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_8";
	
	

 



/**
 * [tOracleInput_8 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_8 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_8";
	
	

}
}finally{
	if (rs_tOracleInput_8 != null) {
		rs_tOracleInput_8.close();
	}
	if (stmt_tOracleInput_8 != null) {
		stmt_tOracleInput_8.close();
	}
}

globalMap.put("tOracleInput_8_NB_LINE",nb_line_tOracleInput_8);
 

ok_Hash.put("tOracleInput_8", true);
end_Hash.put("tOracleInput_8", System.currentTimeMillis());




/**
 * [tOracleInput_8 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row_gen_afiliados_in end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row_gen_afiliados_in";
	
	

tHash_Lookup_row_gen_afiliados_in.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row_gen_afiliados_in");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row_gen_afiliados_in", true);
end_Hash.put("tAdvancedHash_row_gen_afiliados_in", System.currentTimeMillis());




/**
 * [tAdvancedHash_row_gen_afiliados_in end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleInput_8 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_8";
	
	

 



/**
 * [tOracleInput_8 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row_gen_afiliados_in finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row_gen_afiliados_in";
	
	

 



/**
 * [tAdvancedHash_row_gen_afiliados_in finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_8_SUBPROCESS_STATE", 1);
	}
	


public static class row_afi_planafiliaciones_inStruct implements routines.system.IPersistableComparableLookupRow<row_afi_planafiliaciones_inStruct> {
    final static byte[] commonByteArrayLock_AFI_PRINCIPAL_Consolidado_Salud = new byte[0];
    static byte[] commonByteArray_AFI_PRINCIPAL_Consolidado_Salud = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public BigDecimal ID;

				public BigDecimal getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return false;
				}
				public Boolean IDIsKey(){
				    return true;
				}
				public Integer IDLength(){
				    return 22;
				}
				public Integer IDPrecision(){
				    return 0;
				}
				public String IDDefault(){
				
					return "SALUDSIS\".\"ISEQ$$_100698\".nextval";
				
				}
				public String IDComment(){
				
				    return "PK Llave primaria";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public BigDecimal TAFILIADOS_ID;

				public BigDecimal getTAFILIADOS_ID () {
					return this.TAFILIADOS_ID;
				}

				public Boolean TAFILIADOS_IDIsNullable(){
				    return false;
				}
				public Boolean TAFILIADOS_IDIsKey(){
				    return false;
				}
				public Integer TAFILIADOS_IDLength(){
				    return 22;
				}
				public Integer TAFILIADOS_IDPrecision(){
				    return 0;
				}
				public String TAFILIADOS_IDDefault(){
				
					return null;
				
				}
				public String TAFILIADOS_IDComment(){
				
				    return "FK (AFI_TAFILIADOS)";
				
				}
				public String TAFILIADOS_IDPattern(){
				
					return "";
				
				}
				public String TAFILIADOS_IDOriginalDbColumnName(){
				
					return "TAFILIADOS_ID";
				
				}

				
			    public BigDecimal TAFILIACIONES_ID;

				public BigDecimal getTAFILIACIONES_ID () {
					return this.TAFILIACIONES_ID;
				}

				public Boolean TAFILIACIONES_IDIsNullable(){
				    return false;
				}
				public Boolean TAFILIACIONES_IDIsKey(){
				    return false;
				}
				public Integer TAFILIACIONES_IDLength(){
				    return 22;
				}
				public Integer TAFILIACIONES_IDPrecision(){
				    return 0;
				}
				public String TAFILIACIONES_IDDefault(){
				
					return null;
				
				}
				public String TAFILIACIONES_IDComment(){
				
				    return "FK (AFI_TAFILIACIONES";
				
				}
				public String TAFILIACIONES_IDPattern(){
				
					return "";
				
				}
				public String TAFILIACIONES_IDOriginalDbColumnName(){
				
					return "TAFILIACIONES_ID";
				
				}

				
			    public String DESCRIPCION;

				public String getDESCRIPCION () {
					return this.DESCRIPCION;
				}

				public Boolean DESCRIPCIONIsNullable(){
				    return false;
				}
				public Boolean DESCRIPCIONIsKey(){
				    return false;
				}
				public Integer DESCRIPCIONLength(){
				    return 250;
				}
				public Integer DESCRIPCIONPrecision(){
				    return 0;
				}
				public String DESCRIPCIONDefault(){
				
					return "'null'";
				
				}
				public String DESCRIPCIONComment(){
				
				    return "Descripcion de la relacion del tipo y la vinculacion";
				
				}
				public String DESCRIPCIONPattern(){
				
					return "";
				
				}
				public String DESCRIPCIONOriginalDbColumnName(){
				
					return "DESCRIPCION";
				
				}

				
			    public String PERMITE_BENEFICIARIOS;

				public String getPERMITE_BENEFICIARIOS () {
					return this.PERMITE_BENEFICIARIOS;
				}

				public Boolean PERMITE_BENEFICIARIOSIsNullable(){
				    return false;
				}
				public Boolean PERMITE_BENEFICIARIOSIsKey(){
				    return false;
				}
				public Integer PERMITE_BENEFICIARIOSLength(){
				    return 2;
				}
				public Integer PERMITE_BENEFICIARIOSPrecision(){
				    return 0;
				}
				public String PERMITE_BENEFICIARIOSDefault(){
				
					return "'Si'";
				
				}
				public String PERMITE_BENEFICIARIOSComment(){
				
				    return "Permite beneficiarios";
				
				}
				public String PERMITE_BENEFICIARIOSPattern(){
				
					return "";
				
				}
				public String PERMITE_BENEFICIARIOSOriginalDbColumnName(){
				
					return "PERMITE_BENEFICIARIOS";
				
				}

				
			    public BigDecimal CODIGO;

				public BigDecimal getCODIGO () {
					return this.CODIGO;
				}

				public Boolean CODIGOIsNullable(){
				    return true;
				}
				public Boolean CODIGOIsKey(){
				    return false;
				}
				public Integer CODIGOLength(){
				    return 22;
				}
				public Integer CODIGOPrecision(){
				    return 0;
				}
				public String CODIGODefault(){
				
					return null;
				
				}
				public String CODIGOComment(){
				
				    return "Codigo utilizado para identificar el parentesco en la aplicacion";
				
				}
				public String CODIGOPattern(){
				
					return "";
				
				}
				public String CODIGOOriginalDbColumnName(){
				
					return "CODIGO";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.ID == null) ? 0 : this.ID.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row_afi_planafiliaciones_inStruct other = (row_afi_planafiliaciones_inStruct) obj;
		
						if (this.ID == null) {
							if (other.ID != null)
								return false;
						
						} else if (!this.ID.equals(other.ID))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row_afi_planafiliaciones_inStruct other) {

		other.ID = this.ID;
	            other.TAFILIADOS_ID = this.TAFILIADOS_ID;
	            other.TAFILIACIONES_ID = this.TAFILIACIONES_ID;
	            other.DESCRIPCION = this.DESCRIPCION;
	            other.PERMITE_BENEFICIARIOS = this.PERMITE_BENEFICIARIOS;
	            other.CODIGO = this.CODIGO;
	            
	}

	public void copyKeysDataTo(row_afi_planafiliaciones_inStruct other) {

		other.ID = this.ID;
	            	
	}



	
	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			unmarshaller.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private void writeString(String str, DataOutputStream dos, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_PRINCIPAL_Consolidado_Salud) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_PRINCIPAL_Consolidado_Salud) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
       			    	this.TAFILIADOS_ID = (BigDecimal) ois.readObject();
					
       			    	this.TAFILIACIONES_ID = (BigDecimal) ois.readObject();
					
						this.DESCRIPCION = readString(dis,ois);
					
						this.PERMITE_BENEFICIARIOS = readString(dis,ois);
					
       			    	this.CODIGO = (BigDecimal) ois.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		
       			    	this.TAFILIADOS_ID = (BigDecimal) objectIn.readObject();
					
       			    	this.TAFILIACIONES_ID = (BigDecimal) objectIn.readObject();
					
						this.DESCRIPCION = readString(dis,objectIn);
					
						this.PERMITE_BENEFICIARIOS = readString(dis,objectIn);
					
       			    	this.CODIGO = (BigDecimal) objectIn.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
       			    	oos.writeObject(this.TAFILIADOS_ID);
					
       			    	oos.writeObject(this.TAFILIACIONES_ID);
					
						writeString(this.DESCRIPCION, dos, oos);
					
						writeString(this.PERMITE_BENEFICIARIOS, dos, oos);
					
       			    	oos.writeObject(this.CODIGO);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
						objectOut.clearInstanceCache();
						objectOut.writeObject(this.TAFILIADOS_ID);
					
						objectOut.clearInstanceCache();
						objectOut.writeObject(this.TAFILIACIONES_ID);
					
						writeString(this.DESCRIPCION, dos, objectOut);
					
						writeString(this.PERMITE_BENEFICIARIOS, dos, objectOut);
					
						objectOut.clearInstanceCache();
						objectOut.writeObject(this.CODIGO);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",TAFILIADOS_ID="+String.valueOf(TAFILIADOS_ID));
		sb.append(",TAFILIACIONES_ID="+String.valueOf(TAFILIACIONES_ID));
		sb.append(",DESCRIPCION="+DESCRIPCION);
		sb.append(",PERMITE_BENEFICIARIOS="+PERMITE_BENEFICIARIOS);
		sb.append(",CODIGO="+String.valueOf(CODIGO));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row_afi_planafiliaciones_inStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.ID, other.ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tHashInput_4Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tHashInput_4_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row_afi_planafiliaciones_inStruct row_afi_planafiliaciones_in = new row_afi_planafiliaciones_inStruct();




	
	/**
	 * [tAdvancedHash_row_afi_planafiliaciones_in begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row_afi_planafiliaciones_in", false);
		start_Hash.put("tAdvancedHash_row_afi_planafiliaciones_in", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row_afi_planafiliaciones_in";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row_afi_planafiliaciones_in");
					}
				
		int tos_count_tAdvancedHash_row_afi_planafiliaciones_in = 0;
		

			   		// connection name:row_afi_planafiliaciones_in
			   		// source node:tHashInput_4 - inputs:(after_tHashInput_2) outputs:(row_afi_planafiliaciones_in,row_afi_planafiliaciones_in) | target node:tAdvancedHash_row_afi_planafiliaciones_in - inputs:(row_afi_planafiliaciones_in) outputs:()
			   		// linked node: tMap_1 - inputs:(row_info_encuesta_in,row_gen_afiliados_in,row_afi_planafiliaciones_in,row_gen_preguntas_in,row_gen_tdocumentos_in,row_gen_sexos_in) outputs:(row_info_encuestas_out)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row_afi_planafiliaciones_in = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row_afi_planafiliaciones_inStruct> tHash_Lookup_row_afi_planafiliaciones_in =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row_afi_planafiliaciones_inStruct>getLookup(matchingModeEnum_row_afi_planafiliaciones_in);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row_afi_planafiliaciones_in", tHash_Lookup_row_afi_planafiliaciones_in);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row_afi_planafiliaciones_in begin ] stop
 */



	
	/**
	 * [tHashInput_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_4", false);
		start_Hash.put("tHashInput_4", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_4";
	
	
		int tos_count_tHashInput_4 = 0;
		


int nb_line_tHashInput_4 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_4=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row30Struct> tHashFile_tHashInput_4 = mf_tHashInput_4.getAdvancedMemoryHashFile("tHashFile_Consolidado_Salud_" + pid +"_tHashOutput_6");
if(tHashFile_tHashInput_4==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<row30Struct> iterator_tHashInput_4 = tHashFile_tHashInput_4.iterator();
while (iterator_tHashInput_4.hasNext()) {
    row30Struct next_tHashInput_4 = iterator_tHashInput_4.next();

	row_afi_planafiliaciones_in.ID = next_tHashInput_4.ID;
	row_afi_planafiliaciones_in.TAFILIADOS_ID = next_tHashInput_4.TAFILIADOS_ID;
	row_afi_planafiliaciones_in.TAFILIACIONES_ID = next_tHashInput_4.TAFILIACIONES_ID;
	row_afi_planafiliaciones_in.DESCRIPCION = next_tHashInput_4.DESCRIPCION;
	row_afi_planafiliaciones_in.PERMITE_BENEFICIARIOS = next_tHashInput_4.PERMITE_BENEFICIARIOS;
	row_afi_planafiliaciones_in.CODIGO = next_tHashInput_4.CODIGO;

 



/**
 * [tHashInput_4 begin ] stop
 */
	
	/**
	 * [tHashInput_4 main ] start
	 */

	

	
	
	currentComponent="tHashInput_4";
	
	

 


	tos_count_tHashInput_4++;

/**
 * [tHashInput_4 main ] stop
 */
	
	/**
	 * [tHashInput_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashInput_4";
	
	

 



/**
 * [tHashInput_4 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row_afi_planafiliaciones_in main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row_afi_planafiliaciones_in";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row_afi_planafiliaciones_in"
						
						);
					}
					


			   
			   

					row_afi_planafiliaciones_inStruct row_afi_planafiliaciones_in_HashRow = new row_afi_planafiliaciones_inStruct();
		   	   	   
				
				row_afi_planafiliaciones_in_HashRow.ID = row_afi_planafiliaciones_in.ID;
				
				row_afi_planafiliaciones_in_HashRow.TAFILIADOS_ID = row_afi_planafiliaciones_in.TAFILIADOS_ID;
				
				row_afi_planafiliaciones_in_HashRow.TAFILIACIONES_ID = row_afi_planafiliaciones_in.TAFILIACIONES_ID;
				
				row_afi_planafiliaciones_in_HashRow.DESCRIPCION = row_afi_planafiliaciones_in.DESCRIPCION;
				
				row_afi_planafiliaciones_in_HashRow.PERMITE_BENEFICIARIOS = row_afi_planafiliaciones_in.PERMITE_BENEFICIARIOS;
				
				row_afi_planafiliaciones_in_HashRow.CODIGO = row_afi_planafiliaciones_in.CODIGO;
				
			tHash_Lookup_row_afi_planafiliaciones_in.put(row_afi_planafiliaciones_in_HashRow);
			
            




 


	tos_count_tAdvancedHash_row_afi_planafiliaciones_in++;

/**
 * [tAdvancedHash_row_afi_planafiliaciones_in main ] stop
 */
	
	/**
	 * [tAdvancedHash_row_afi_planafiliaciones_in process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row_afi_planafiliaciones_in";
	
	

 



/**
 * [tAdvancedHash_row_afi_planafiliaciones_in process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row_afi_planafiliaciones_in process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row_afi_planafiliaciones_in";
	
	

 



/**
 * [tAdvancedHash_row_afi_planafiliaciones_in process_data_end ] stop
 */



	
	/**
	 * [tHashInput_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashInput_4";
	
	

 



/**
 * [tHashInput_4 process_data_end ] stop
 */
	
	/**
	 * [tHashInput_4 end ] start
	 */

	

	
	
	currentComponent="tHashInput_4";
	
	
    

		
			nb_line_tHashInput_4++;
		}	
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_Consolidado_Salud_" + pid +"_tHashOutput_6");
	


	globalMap.put("tHashInput_4_NB_LINE", nb_line_tHashInput_4);       

 

ok_Hash.put("tHashInput_4", true);
end_Hash.put("tHashInput_4", System.currentTimeMillis());




/**
 * [tHashInput_4 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row_afi_planafiliaciones_in end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row_afi_planafiliaciones_in";
	
	

tHash_Lookup_row_afi_planafiliaciones_in.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row_afi_planafiliaciones_in");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row_afi_planafiliaciones_in", true);
end_Hash.put("tAdvancedHash_row_afi_planafiliaciones_in", System.currentTimeMillis());




/**
 * [tAdvancedHash_row_afi_planafiliaciones_in end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tHashInput_4 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_4";
	
	

 



/**
 * [tHashInput_4 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row_afi_planafiliaciones_in finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row_afi_planafiliaciones_in";
	
	

 



/**
 * [tAdvancedHash_row_afi_planafiliaciones_in finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tHashInput_4_SUBPROCESS_STATE", 1);
	}
	


public static class row_gen_preguntas_inStruct implements routines.system.IPersistableComparableLookupRow<row_gen_preguntas_inStruct> {
    final static byte[] commonByteArrayLock_AFI_PRINCIPAL_Consolidado_Salud = new byte[0];
    static byte[] commonByteArray_AFI_PRINCIPAL_Consolidado_Salud = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public int ID;

				public int getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return false;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return 0;
				}
				public Integer IDPrecision(){
				    return 0;
				}
				public String IDDefault(){
				
					return "1";
				
				}
				public String IDComment(){
				
				    return "Estado del trabajo (1 Activo - 2 Realizado - 3 Fallido - 4 Cancelado)";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public String PREGUNTA;

				public String getPREGUNTA () {
					return this.PREGUNTA;
				}

				public Boolean PREGUNTAIsNullable(){
				    return false;
				}
				public Boolean PREGUNTAIsKey(){
				    return false;
				}
				public Integer PREGUNTALength(){
				    return 0;
				}
				public Integer PREGUNTAPrecision(){
				    return 0;
				}
				public String PREGUNTADefault(){
				
					return null;
				
				}
				public String PREGUNTAComment(){
				
				    return "Nombre del archivo";
				
				}
				public String PREGUNTAPattern(){
				
					return "";
				
				}
				public String PREGUNTAOriginalDbColumnName(){
				
					return "PREGUNTA";
				
				}

				
			    public int TEMASENCUESTA_ID;

				public int getTEMASENCUESTA_ID () {
					return this.TEMASENCUESTA_ID;
				}

				public Boolean TEMASENCUESTA_IDIsNullable(){
				    return false;
				}
				public Boolean TEMASENCUESTA_IDIsKey(){
				    return false;
				}
				public Integer TEMASENCUESTA_IDLength(){
				    return 0;
				}
				public Integer TEMASENCUESTA_IDPrecision(){
				    return 0;
				}
				public String TEMASENCUESTA_IDDefault(){
				
					return null;
				
				}
				public String TEMASENCUESTA_IDComment(){
				
				    return "FK - AFI_TARCHIVOS";
				
				}
				public String TEMASENCUESTA_IDPattern(){
				
					return "";
				
				}
				public String TEMASENCUESTA_IDOriginalDbColumnName(){
				
					return "TEMASENCUESTA_ID";
				
				}

				
			    public String ESTADO;

				public String getESTADO () {
					return this.ESTADO;
				}

				public Boolean ESTADOIsNullable(){
				    return false;
				}
				public Boolean ESTADOIsKey(){
				    return false;
				}
				public Integer ESTADOLength(){
				    return 0;
				}
				public Integer ESTADOPrecision(){
				    return 0;
				}
				public String ESTADODefault(){
				
					return null;
				
				}
				public String ESTADOComment(){
				
				    return "FK - GEN_USUARIOS (Usuario que subio el archivo)";
				
				}
				public String ESTADOPattern(){
				
					return "";
				
				}
				public String ESTADOOriginalDbColumnName(){
				
					return "ESTADO";
				
				}

				
			    public int ENCUESTAS_ID;

				public int getENCUESTAS_ID () {
					return this.ENCUESTAS_ID;
				}

				public Boolean ENCUESTAS_IDIsNullable(){
				    return false;
				}
				public Boolean ENCUESTAS_IDIsKey(){
				    return false;
				}
				public Integer ENCUESTAS_IDLength(){
				    return 0;
				}
				public Integer ENCUESTAS_IDPrecision(){
				    return 0;
				}
				public String ENCUESTAS_IDDefault(){
				
					return null;
				
				}
				public String ENCUESTAS_IDComment(){
				
				    return "Codigo de identificacion del archivo";
				
				}
				public String ENCUESTAS_IDPattern(){
				
					return "";
				
				}
				public String ENCUESTAS_IDOriginalDbColumnName(){
				
					return "ENCUESTAS_ID";
				
				}

				
			    public int TPREGUNTAS_ID;

				public int getTPREGUNTAS_ID () {
					return this.TPREGUNTAS_ID;
				}

				public Boolean TPREGUNTAS_IDIsNullable(){
				    return false;
				}
				public Boolean TPREGUNTAS_IDIsKey(){
				    return false;
				}
				public Integer TPREGUNTAS_IDLength(){
				    return 0;
				}
				public Integer TPREGUNTAS_IDPrecision(){
				    return 0;
				}
				public String TPREGUNTAS_IDDefault(){
				
					return null;
				
				}
				public String TPREGUNTAS_IDComment(){
				
				    return "Nombre del archivo en el File System";
				
				}
				public String TPREGUNTAS_IDPattern(){
				
					return "";
				
				}
				public String TPREGUNTAS_IDOriginalDbColumnName(){
				
					return "TPREGUNTAS_ID";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
							result = prime * result + (int) this.ID;
						
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row_gen_preguntas_inStruct other = (row_gen_preguntas_inStruct) obj;
		
						if (this.ID != other.ID)
							return false;
					

		return true;
    }

	public void copyDataTo(row_gen_preguntas_inStruct other) {

		other.ID = this.ID;
	            other.PREGUNTA = this.PREGUNTA;
	            other.TEMASENCUESTA_ID = this.TEMASENCUESTA_ID;
	            other.ESTADO = this.ESTADO;
	            other.ENCUESTAS_ID = this.ENCUESTAS_ID;
	            other.TPREGUNTAS_ID = this.TPREGUNTAS_ID;
	            
	}

	public void copyKeysDataTo(row_gen_preguntas_inStruct other) {

		other.ID = this.ID;
	            	
	}



	
	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			unmarshaller.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private void writeString(String str, DataOutputStream dos, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_PRINCIPAL_Consolidado_Salud) {

        	try {

        		int length = 0;
		
			        this.ID = dis.readInt();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_PRINCIPAL_Consolidado_Salud) {

        	try {

        		int length = 0;
		
			        this.ID = dis.readInt();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.PREGUNTA = readString(dis,ois);
					
			            this.TEMASENCUESTA_ID = dis.readInt();
					
						this.ESTADO = readString(dis,ois);
					
			            this.ENCUESTAS_ID = dis.readInt();
					
			            this.TPREGUNTAS_ID = dis.readInt();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		
						this.PREGUNTA = readString(dis,objectIn);
					
			            this.TEMASENCUESTA_ID = objectIn.readInt();
					
						this.ESTADO = readString(dis,objectIn);
					
			            this.ENCUESTAS_ID = objectIn.readInt();
					
			            this.TPREGUNTAS_ID = objectIn.readInt();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeString(this.PREGUNTA, dos, oos);
					
		            	dos.writeInt(this.TEMASENCUESTA_ID);
					
						writeString(this.ESTADO, dos, oos);
					
		            	dos.writeInt(this.ENCUESTAS_ID);
					
		            	dos.writeInt(this.TPREGUNTAS_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
						writeString(this.PREGUNTA, dos, objectOut);
					
					objectOut.writeInt(this.TEMASENCUESTA_ID);
					
						writeString(this.ESTADO, dos, objectOut);
					
					objectOut.writeInt(this.ENCUESTAS_ID);
					
					objectOut.writeInt(this.TPREGUNTAS_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",PREGUNTA="+PREGUNTA);
		sb.append(",TEMASENCUESTA_ID="+String.valueOf(TEMASENCUESTA_ID));
		sb.append(",ESTADO="+ESTADO);
		sb.append(",ENCUESTAS_ID="+String.valueOf(ENCUESTAS_ID));
		sb.append(",TPREGUNTAS_ID="+String.valueOf(TPREGUNTAS_ID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row_gen_preguntas_inStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.ID, other.ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tHashInput_5Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tHashInput_5_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row_gen_preguntas_inStruct row_gen_preguntas_in = new row_gen_preguntas_inStruct();




	
	/**
	 * [tAdvancedHash_row_gen_preguntas_in begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row_gen_preguntas_in", false);
		start_Hash.put("tAdvancedHash_row_gen_preguntas_in", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row_gen_preguntas_in";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row_gen_preguntas_in");
					}
				
		int tos_count_tAdvancedHash_row_gen_preguntas_in = 0;
		

			   		// connection name:row_gen_preguntas_in
			   		// source node:tHashInput_5 - inputs:(after_tHashInput_2) outputs:(row_gen_preguntas_in,row_gen_preguntas_in) | target node:tAdvancedHash_row_gen_preguntas_in - inputs:(row_gen_preguntas_in) outputs:()
			   		// linked node: tMap_1 - inputs:(row_info_encuesta_in,row_gen_afiliados_in,row_afi_planafiliaciones_in,row_gen_preguntas_in,row_gen_tdocumentos_in,row_gen_sexos_in) outputs:(row_info_encuestas_out)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row_gen_preguntas_in = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row_gen_preguntas_inStruct> tHash_Lookup_row_gen_preguntas_in =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row_gen_preguntas_inStruct>getLookup(matchingModeEnum_row_gen_preguntas_in);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row_gen_preguntas_in", tHash_Lookup_row_gen_preguntas_in);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row_gen_preguntas_in begin ] stop
 */



	
	/**
	 * [tHashInput_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_5", false);
		start_Hash.put("tHashInput_5", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_5";
	
	
		int tos_count_tHashInput_5 = 0;
		


int nb_line_tHashInput_5 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_5=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row5Struct> tHashFile_tHashInput_5 = mf_tHashInput_5.getAdvancedMemoryHashFile("tHashFile_Consolidado_Salud_" + pid +"_tHashOutput_1");
if(tHashFile_tHashInput_5==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<row5Struct> iterator_tHashInput_5 = tHashFile_tHashInput_5.iterator();
while (iterator_tHashInput_5.hasNext()) {
    row5Struct next_tHashInput_5 = iterator_tHashInput_5.next();

	row_gen_preguntas_in.ID = next_tHashInput_5.ID;
	row_gen_preguntas_in.PREGUNTA = next_tHashInput_5.PREGUNTA;
	row_gen_preguntas_in.TEMASENCUESTA_ID = next_tHashInput_5.TEMASENCUESTA_ID;
	row_gen_preguntas_in.ESTADO = next_tHashInput_5.ESTADO;
	row_gen_preguntas_in.ENCUESTAS_ID = next_tHashInput_5.ENCUESTAS_ID;
	row_gen_preguntas_in.TPREGUNTAS_ID = next_tHashInput_5.TPREGUNTAS_ID;

 



/**
 * [tHashInput_5 begin ] stop
 */
	
	/**
	 * [tHashInput_5 main ] start
	 */

	

	
	
	currentComponent="tHashInput_5";
	
	

 


	tos_count_tHashInput_5++;

/**
 * [tHashInput_5 main ] stop
 */
	
	/**
	 * [tHashInput_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashInput_5";
	
	

 



/**
 * [tHashInput_5 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row_gen_preguntas_in main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row_gen_preguntas_in";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row_gen_preguntas_in"
						
						);
					}
					


			   
			   

					row_gen_preguntas_inStruct row_gen_preguntas_in_HashRow = new row_gen_preguntas_inStruct();
		   	   	   
				
				row_gen_preguntas_in_HashRow.ID = row_gen_preguntas_in.ID;
				
				row_gen_preguntas_in_HashRow.PREGUNTA = row_gen_preguntas_in.PREGUNTA;
				
				row_gen_preguntas_in_HashRow.TEMASENCUESTA_ID = row_gen_preguntas_in.TEMASENCUESTA_ID;
				
				row_gen_preguntas_in_HashRow.ESTADO = row_gen_preguntas_in.ESTADO;
				
				row_gen_preguntas_in_HashRow.ENCUESTAS_ID = row_gen_preguntas_in.ENCUESTAS_ID;
				
				row_gen_preguntas_in_HashRow.TPREGUNTAS_ID = row_gen_preguntas_in.TPREGUNTAS_ID;
				
			tHash_Lookup_row_gen_preguntas_in.put(row_gen_preguntas_in_HashRow);
			
            




 


	tos_count_tAdvancedHash_row_gen_preguntas_in++;

/**
 * [tAdvancedHash_row_gen_preguntas_in main ] stop
 */
	
	/**
	 * [tAdvancedHash_row_gen_preguntas_in process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row_gen_preguntas_in";
	
	

 



/**
 * [tAdvancedHash_row_gen_preguntas_in process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row_gen_preguntas_in process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row_gen_preguntas_in";
	
	

 



/**
 * [tAdvancedHash_row_gen_preguntas_in process_data_end ] stop
 */



	
	/**
	 * [tHashInput_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashInput_5";
	
	

 



/**
 * [tHashInput_5 process_data_end ] stop
 */
	
	/**
	 * [tHashInput_5 end ] start
	 */

	

	
	
	currentComponent="tHashInput_5";
	
	
    

		
			nb_line_tHashInput_5++;
		}	
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_Consolidado_Salud_" + pid +"_tHashOutput_1");
	


	globalMap.put("tHashInput_5_NB_LINE", nb_line_tHashInput_5);       

 

ok_Hash.put("tHashInput_5", true);
end_Hash.put("tHashInput_5", System.currentTimeMillis());




/**
 * [tHashInput_5 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row_gen_preguntas_in end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row_gen_preguntas_in";
	
	

tHash_Lookup_row_gen_preguntas_in.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row_gen_preguntas_in");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row_gen_preguntas_in", true);
end_Hash.put("tAdvancedHash_row_gen_preguntas_in", System.currentTimeMillis());




/**
 * [tAdvancedHash_row_gen_preguntas_in end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tHashInput_5 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_5";
	
	

 



/**
 * [tHashInput_5 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row_gen_preguntas_in finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row_gen_preguntas_in";
	
	

 



/**
 * [tAdvancedHash_row_gen_preguntas_in finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tHashInput_5_SUBPROCESS_STATE", 1);
	}
	


public static class row_gen_tdocumentos_inStruct implements routines.system.IPersistableComparableLookupRow<row_gen_tdocumentos_inStruct> {
    final static byte[] commonByteArrayLock_AFI_PRINCIPAL_Consolidado_Salud = new byte[0];
    static byte[] commonByteArray_AFI_PRINCIPAL_Consolidado_Salud = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public Integer ID;

				public Integer getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return true;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return 0;
				}
				public Integer IDPrecision(){
				    return 0;
				}
				public String IDDefault(){
				
					return null;
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public String NOMBRE;

				public String getNOMBRE () {
					return this.NOMBRE;
				}

				public Boolean NOMBREIsNullable(){
				    return true;
				}
				public Boolean NOMBREIsKey(){
				    return false;
				}
				public Integer NOMBRELength(){
				    return 0;
				}
				public Integer NOMBREPrecision(){
				    return 0;
				}
				public String NOMBREDefault(){
				
					return null;
				
				}
				public String NOMBREComment(){
				
				    return "";
				
				}
				public String NOMBREPattern(){
				
					return "";
				
				}
				public String NOMBREOriginalDbColumnName(){
				
					return "NOMBRE";
				
				}

				
			    public String SIGLA;

				public String getSIGLA () {
					return this.SIGLA;
				}

				public Boolean SIGLAIsNullable(){
				    return true;
				}
				public Boolean SIGLAIsKey(){
				    return false;
				}
				public Integer SIGLALength(){
				    return 0;
				}
				public Integer SIGLAPrecision(){
				    return 0;
				}
				public String SIGLADefault(){
				
					return null;
				
				}
				public String SIGLAComment(){
				
				    return "";
				
				}
				public String SIGLAPattern(){
				
					return "";
				
				}
				public String SIGLAOriginalDbColumnName(){
				
					return "SIGLA";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.ID == null) ? 0 : this.ID.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row_gen_tdocumentos_inStruct other = (row_gen_tdocumentos_inStruct) obj;
		
						if (this.ID == null) {
							if (other.ID != null)
								return false;
						
						} else if (!this.ID.equals(other.ID))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row_gen_tdocumentos_inStruct other) {

		other.ID = this.ID;
	            other.NOMBRE = this.NOMBRE;
	            other.SIGLA = this.SIGLA;
	            
	}

	public void copyKeysDataTo(row_gen_tdocumentos_inStruct other) {

		other.ID = this.ID;
	            	
	}



	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}
	
	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			unmarshaller.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private void writeString(String str, DataOutputStream dos, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_PRINCIPAL_Consolidado_Salud) {

        	try {

        		int length = 0;
		
						this.ID = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_PRINCIPAL_Consolidado_Salud) {

        	try {

        		int length = 0;
		
						this.ID = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.ID,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.ID,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.NOMBRE = readString(dis,ois);
					
						this.SIGLA = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		
						this.NOMBRE = readString(dis,objectIn);
					
						this.SIGLA = readString(dis,objectIn);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeString(this.NOMBRE, dos, oos);
					
						writeString(this.SIGLA, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
						writeString(this.NOMBRE, dos, objectOut);
					
						writeString(this.SIGLA, dos, objectOut);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",NOMBRE="+NOMBRE);
		sb.append(",SIGLA="+SIGLA);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row_gen_tdocumentos_inStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.ID, other.ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tHashInput_6Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tHashInput_6_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row_gen_tdocumentos_inStruct row_gen_tdocumentos_in = new row_gen_tdocumentos_inStruct();




	
	/**
	 * [tAdvancedHash_row_gen_tdocumentos_in begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row_gen_tdocumentos_in", false);
		start_Hash.put("tAdvancedHash_row_gen_tdocumentos_in", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row_gen_tdocumentos_in";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row_gen_tdocumentos_in");
					}
				
		int tos_count_tAdvancedHash_row_gen_tdocumentos_in = 0;
		

			   		// connection name:row_gen_tdocumentos_in
			   		// source node:tHashInput_6 - inputs:(after_tHashInput_2) outputs:(row_gen_tdocumentos_in,row_gen_tdocumentos_in) | target node:tAdvancedHash_row_gen_tdocumentos_in - inputs:(row_gen_tdocumentos_in) outputs:()
			   		// linked node: tMap_1 - inputs:(row_info_encuesta_in,row_gen_afiliados_in,row_afi_planafiliaciones_in,row_gen_preguntas_in,row_gen_tdocumentos_in,row_gen_sexos_in) outputs:(row_info_encuestas_out)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row_gen_tdocumentos_in = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row_gen_tdocumentos_inStruct> tHash_Lookup_row_gen_tdocumentos_in =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row_gen_tdocumentos_inStruct>getLookup(matchingModeEnum_row_gen_tdocumentos_in);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row_gen_tdocumentos_in", tHash_Lookup_row_gen_tdocumentos_in);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row_gen_tdocumentos_in begin ] stop
 */



	
	/**
	 * [tHashInput_6 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_6", false);
		start_Hash.put("tHashInput_6", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_6";
	
	
		int tos_count_tHashInput_6 = 0;
		


int nb_line_tHashInput_6 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_6=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row35Struct> tHashFile_tHashInput_6 = mf_tHashInput_6.getAdvancedMemoryHashFile("tHashFile_Consolidado_Salud_" + pid +"_tHashOutput_11");
if(tHashFile_tHashInput_6==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<row35Struct> iterator_tHashInput_6 = tHashFile_tHashInput_6.iterator();
while (iterator_tHashInput_6.hasNext()) {
    row35Struct next_tHashInput_6 = iterator_tHashInput_6.next();

	row_gen_tdocumentos_in.ID = next_tHashInput_6.ID;
	row_gen_tdocumentos_in.NOMBRE = next_tHashInput_6.NOMBRE;
	row_gen_tdocumentos_in.SIGLA = next_tHashInput_6.SIGLA;

 



/**
 * [tHashInput_6 begin ] stop
 */
	
	/**
	 * [tHashInput_6 main ] start
	 */

	

	
	
	currentComponent="tHashInput_6";
	
	

 


	tos_count_tHashInput_6++;

/**
 * [tHashInput_6 main ] stop
 */
	
	/**
	 * [tHashInput_6 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashInput_6";
	
	

 



/**
 * [tHashInput_6 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row_gen_tdocumentos_in main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row_gen_tdocumentos_in";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row_gen_tdocumentos_in"
						
						);
					}
					


			   
			   

					row_gen_tdocumentos_inStruct row_gen_tdocumentos_in_HashRow = new row_gen_tdocumentos_inStruct();
		   	   	   
				
				row_gen_tdocumentos_in_HashRow.ID = row_gen_tdocumentos_in.ID;
				
				row_gen_tdocumentos_in_HashRow.NOMBRE = row_gen_tdocumentos_in.NOMBRE;
				
				row_gen_tdocumentos_in_HashRow.SIGLA = row_gen_tdocumentos_in.SIGLA;
				
			tHash_Lookup_row_gen_tdocumentos_in.put(row_gen_tdocumentos_in_HashRow);
			
            




 


	tos_count_tAdvancedHash_row_gen_tdocumentos_in++;

/**
 * [tAdvancedHash_row_gen_tdocumentos_in main ] stop
 */
	
	/**
	 * [tAdvancedHash_row_gen_tdocumentos_in process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row_gen_tdocumentos_in";
	
	

 



/**
 * [tAdvancedHash_row_gen_tdocumentos_in process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row_gen_tdocumentos_in process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row_gen_tdocumentos_in";
	
	

 



/**
 * [tAdvancedHash_row_gen_tdocumentos_in process_data_end ] stop
 */



	
	/**
	 * [tHashInput_6 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashInput_6";
	
	

 



/**
 * [tHashInput_6 process_data_end ] stop
 */
	
	/**
	 * [tHashInput_6 end ] start
	 */

	

	
	
	currentComponent="tHashInput_6";
	
	
    

		
			nb_line_tHashInput_6++;
		}	
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_Consolidado_Salud_" + pid +"_tHashOutput_11");
	


	globalMap.put("tHashInput_6_NB_LINE", nb_line_tHashInput_6);       

 

ok_Hash.put("tHashInput_6", true);
end_Hash.put("tHashInput_6", System.currentTimeMillis());




/**
 * [tHashInput_6 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row_gen_tdocumentos_in end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row_gen_tdocumentos_in";
	
	

tHash_Lookup_row_gen_tdocumentos_in.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row_gen_tdocumentos_in");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row_gen_tdocumentos_in", true);
end_Hash.put("tAdvancedHash_row_gen_tdocumentos_in", System.currentTimeMillis());




/**
 * [tAdvancedHash_row_gen_tdocumentos_in end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tHashInput_6 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_6";
	
	

 



/**
 * [tHashInput_6 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row_gen_tdocumentos_in finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row_gen_tdocumentos_in";
	
	

 



/**
 * [tAdvancedHash_row_gen_tdocumentos_in finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tHashInput_6_SUBPROCESS_STATE", 1);
	}
	


public static class row_gen_sexos_inStruct implements routines.system.IPersistableComparableLookupRow<row_gen_sexos_inStruct> {
    final static byte[] commonByteArrayLock_AFI_PRINCIPAL_Consolidado_Salud = new byte[0];
    static byte[] commonByteArray_AFI_PRINCIPAL_Consolidado_Salud = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public BigDecimal ID;

				public BigDecimal getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return false;
				}
				public Boolean IDIsKey(){
				    return true;
				}
				public Integer IDLength(){
				    return 22;
				}
				public Integer IDPrecision(){
				    return 0;
				}
				public String IDDefault(){
				
					return "SALUDSIS\".\"ISEQ$$_92309\".nextval";
				
				}
				public String IDComment(){
				
				    return "PK - Llave primaria";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public String NOMBRE;

				public String getNOMBRE () {
					return this.NOMBRE;
				}

				public Boolean NOMBREIsNullable(){
				    return false;
				}
				public Boolean NOMBREIsKey(){
				    return false;
				}
				public Integer NOMBRELength(){
				    return 20;
				}
				public Integer NOMBREPrecision(){
				    return 0;
				}
				public String NOMBREDefault(){
				
					return null;
				
				}
				public String NOMBREComment(){
				
				    return "Nombre del Sexo";
				
				}
				public String NOMBREPattern(){
				
					return "";
				
				}
				public String NOMBREOriginalDbColumnName(){
				
					return "NOMBRE";
				
				}

				
			    public String SIGLA;

				public String getSIGLA () {
					return this.SIGLA;
				}

				public Boolean SIGLAIsNullable(){
				    return false;
				}
				public Boolean SIGLAIsKey(){
				    return false;
				}
				public Integer SIGLALength(){
				    return 1;
				}
				public Integer SIGLAPrecision(){
				    return 0;
				}
				public String SIGLADefault(){
				
					return null;
				
				}
				public String SIGLAComment(){
				
				    return "Sigla del Sexo";
				
				}
				public String SIGLAPattern(){
				
					return "";
				
				}
				public String SIGLAOriginalDbColumnName(){
				
					return "SIGLA";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.ID == null) ? 0 : this.ID.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row_gen_sexos_inStruct other = (row_gen_sexos_inStruct) obj;
		
						if (this.ID == null) {
							if (other.ID != null)
								return false;
						
						} else if (!this.ID.equals(other.ID))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row_gen_sexos_inStruct other) {

		other.ID = this.ID;
	            other.NOMBRE = this.NOMBRE;
	            other.SIGLA = this.SIGLA;
	            
	}

	public void copyKeysDataTo(row_gen_sexos_inStruct other) {

		other.ID = this.ID;
	            	
	}



	
	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			unmarshaller.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private void writeString(String str, DataOutputStream dos, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_PRINCIPAL_Consolidado_Salud) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_PRINCIPAL_Consolidado_Salud) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.NOMBRE = readString(dis,ois);
					
						this.SIGLA = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		
						this.NOMBRE = readString(dis,objectIn);
					
						this.SIGLA = readString(dis,objectIn);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeString(this.NOMBRE, dos, oos);
					
						writeString(this.SIGLA, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
						writeString(this.NOMBRE, dos, objectOut);
					
						writeString(this.SIGLA, dos, objectOut);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",NOMBRE="+NOMBRE);
		sb.append(",SIGLA="+SIGLA);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row_gen_sexos_inStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.ID, other.ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tHashInput_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tHashInput_3_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row_gen_sexos_inStruct row_gen_sexos_in = new row_gen_sexos_inStruct();




	
	/**
	 * [tAdvancedHash_row_gen_sexos_in begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row_gen_sexos_in", false);
		start_Hash.put("tAdvancedHash_row_gen_sexos_in", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row_gen_sexos_in";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row_gen_sexos_in");
					}
				
		int tos_count_tAdvancedHash_row_gen_sexos_in = 0;
		

			   		// connection name:row_gen_sexos_in
			   		// source node:tHashInput_3 - inputs:(after_tHashInput_2) outputs:(row_gen_sexos_in,row_gen_sexos_in) | target node:tAdvancedHash_row_gen_sexos_in - inputs:(row_gen_sexos_in) outputs:()
			   		// linked node: tMap_1 - inputs:(row_info_encuesta_in,row_gen_afiliados_in,row_afi_planafiliaciones_in,row_gen_preguntas_in,row_gen_tdocumentos_in,row_gen_sexos_in) outputs:(row_info_encuestas_out)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row_gen_sexos_in = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row_gen_sexos_inStruct> tHash_Lookup_row_gen_sexos_in =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row_gen_sexos_inStruct>getLookup(matchingModeEnum_row_gen_sexos_in);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row_gen_sexos_in", tHash_Lookup_row_gen_sexos_in);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row_gen_sexos_in begin ] stop
 */



	
	/**
	 * [tHashInput_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_3", false);
		start_Hash.put("tHashInput_3", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_3";
	
	
		int tos_count_tHashInput_3 = 0;
		


int nb_line_tHashInput_3 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_3=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row36Struct> tHashFile_tHashInput_3 = mf_tHashInput_3.getAdvancedMemoryHashFile("tHashFile_Consolidado_Salud_" + pid +"_tHashOutput_8");
if(tHashFile_tHashInput_3==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<row36Struct> iterator_tHashInput_3 = tHashFile_tHashInput_3.iterator();
while (iterator_tHashInput_3.hasNext()) {
    row36Struct next_tHashInput_3 = iterator_tHashInput_3.next();

	row_gen_sexos_in.ID = next_tHashInput_3.ID;
	row_gen_sexos_in.NOMBRE = next_tHashInput_3.NOMBRE;
	row_gen_sexos_in.SIGLA = next_tHashInput_3.SIGLA;

 



/**
 * [tHashInput_3 begin ] stop
 */
	
	/**
	 * [tHashInput_3 main ] start
	 */

	

	
	
	currentComponent="tHashInput_3";
	
	

 


	tos_count_tHashInput_3++;

/**
 * [tHashInput_3 main ] stop
 */
	
	/**
	 * [tHashInput_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashInput_3";
	
	

 



/**
 * [tHashInput_3 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row_gen_sexos_in main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row_gen_sexos_in";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row_gen_sexos_in"
						
						);
					}
					


			   
			   

					row_gen_sexos_inStruct row_gen_sexos_in_HashRow = new row_gen_sexos_inStruct();
		   	   	   
				
				row_gen_sexos_in_HashRow.ID = row_gen_sexos_in.ID;
				
				row_gen_sexos_in_HashRow.NOMBRE = row_gen_sexos_in.NOMBRE;
				
				row_gen_sexos_in_HashRow.SIGLA = row_gen_sexos_in.SIGLA;
				
			tHash_Lookup_row_gen_sexos_in.put(row_gen_sexos_in_HashRow);
			
            




 


	tos_count_tAdvancedHash_row_gen_sexos_in++;

/**
 * [tAdvancedHash_row_gen_sexos_in main ] stop
 */
	
	/**
	 * [tAdvancedHash_row_gen_sexos_in process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row_gen_sexos_in";
	
	

 



/**
 * [tAdvancedHash_row_gen_sexos_in process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row_gen_sexos_in process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row_gen_sexos_in";
	
	

 



/**
 * [tAdvancedHash_row_gen_sexos_in process_data_end ] stop
 */



	
	/**
	 * [tHashInput_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashInput_3";
	
	

 



/**
 * [tHashInput_3 process_data_end ] stop
 */
	
	/**
	 * [tHashInput_3 end ] start
	 */

	

	
	
	currentComponent="tHashInput_3";
	
	
    

		
			nb_line_tHashInput_3++;
		}	
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_Consolidado_Salud_" + pid +"_tHashOutput_8");
	


	globalMap.put("tHashInput_3_NB_LINE", nb_line_tHashInput_3);       

 

ok_Hash.put("tHashInput_3", true);
end_Hash.put("tHashInput_3", System.currentTimeMillis());




/**
 * [tHashInput_3 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row_gen_sexos_in end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row_gen_sexos_in";
	
	

tHash_Lookup_row_gen_sexos_in.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row_gen_sexos_in");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row_gen_sexos_in", true);
end_Hash.put("tAdvancedHash_row_gen_sexos_in", System.currentTimeMillis());




/**
 * [tAdvancedHash_row_gen_sexos_in end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tHashInput_3 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_3";
	
	

 



/**
 * [tHashInput_3 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row_gen_sexos_in finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row_gen_sexos_in";
	
	

 



/**
 * [tAdvancedHash_row_gen_sexos_in finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tHashInput_3_SUBPROCESS_STATE", 1);
	}
	


public void tPrejob_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPrejob_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tPrejob_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tPrejob_2", false);
		start_Hash.put("tPrejob_2", System.currentTimeMillis());
		
	
	currentComponent="tPrejob_2";
	
	
		int tos_count_tPrejob_2 = 0;
		

 



/**
 * [tPrejob_2 begin ] stop
 */
	
	/**
	 * [tPrejob_2 main ] start
	 */

	

	
	
	currentComponent="tPrejob_2";
	
	

 


	tos_count_tPrejob_2++;

/**
 * [tPrejob_2 main ] stop
 */
	
	/**
	 * [tPrejob_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tPrejob_2";
	
	

 



/**
 * [tPrejob_2 process_data_begin ] stop
 */
	
	/**
	 * [tPrejob_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tPrejob_2";
	
	

 



/**
 * [tPrejob_2 process_data_end ] stop
 */
	
	/**
	 * [tPrejob_2 end ] start
	 */

	

	
	
	currentComponent="tPrejob_2";
	
	

 

ok_Hash.put("tPrejob_2", true);
end_Hash.put("tPrejob_2", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk18", 0, "ok");
				}
				tFileExist_1Process(globalMap);



/**
 * [tPrejob_2 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPrejob_2 finally ] start
	 */

	

	
	
	currentComponent="tPrejob_2";
	
	

 



/**
 * [tPrejob_2 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPrejob_2_SUBPROCESS_STATE", 1);
	}
	


public void tFileExist_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileExist_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tFileExist_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileExist_1", false);
		start_Hash.put("tFileExist_1", System.currentTimeMillis());
		
	
	currentComponent="tFileExist_1";
	
	
		int tos_count_tFileExist_1 = 0;
		

 



/**
 * [tFileExist_1 begin ] stop
 */
	
	/**
	 * [tFileExist_1 main ] start
	 */

	

	
	
	currentComponent="tFileExist_1";
	
	



java.io.File file_tFileExist_1 = new java.io.File(context.archivoConfiguracion);
if (!file_tFileExist_1.exists()) {
    globalMap.put("tFileExist_1_EXISTS",false);
}else{
	globalMap.put("tFileExist_1_EXISTS",true);
}

globalMap.put("tFileExist_1_FILENAME",context.archivoConfiguracion);


 


	tos_count_tFileExist_1++;

/**
 * [tFileExist_1 main ] stop
 */
	
	/**
	 * [tFileExist_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileExist_1";
	
	

 



/**
 * [tFileExist_1 process_data_begin ] stop
 */
	
	/**
	 * [tFileExist_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileExist_1";
	
	

 



/**
 * [tFileExist_1 process_data_end ] stop
 */
	
	/**
	 * [tFileExist_1 end ] start
	 */

	

	
	
	currentComponent="tFileExist_1";
	
	

 

ok_Hash.put("tFileExist_1", true);
end_Hash.put("tFileExist_1", System.currentTimeMillis());

   			if (((Boolean)globalMap.get("tFileExist_1_EXISTS"))) {
   				
					if(execStat){
   	 					runStat.updateStatOnConnection("If20", 0, "true");
					}
				tFileInputXML_1Process(globalMap);
			}

			   
   				else{
					if(execStat){   
   	 					runStat.updateStatOnConnection("If20", 0, "false");
					}   	 
   				}
   			if (!((Boolean)globalMap.get("tFileExist_1_EXISTS"))) {
   				
					if(execStat){
   	 					runStat.updateStatOnConnection("If21", 0, "true");
					}
				tJava_4Process(globalMap);
			}

			   
   				else{
					if(execStat){   
   	 					runStat.updateStatOnConnection("If21", 0, "false");
					}   	 
   				}



/**
 * [tFileExist_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileExist_1 finally ] start
	 */

	

	
	
	currentComponent="tFileExist_1";
	
	

 



/**
 * [tFileExist_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileExist_1_SUBPROCESS_STATE", 1);
	}
	


public static class row20Struct implements routines.system.IPersistableRow<row20Struct> {
    final static byte[] commonByteArrayLock_AFI_PRINCIPAL_Consolidado_Salud = new byte[0];
    static byte[] commonByteArray_AFI_PRINCIPAL_Consolidado_Salud = new byte[0];

	
			    public String DB_Host;

				public String getDB_Host () {
					return this.DB_Host;
				}

				public Boolean DB_HostIsNullable(){
				    return true;
				}
				public Boolean DB_HostIsKey(){
				    return false;
				}
				public Integer DB_HostLength(){
				    return 13;
				}
				public Integer DB_HostPrecision(){
				    return 0;
				}
				public String DB_HostDefault(){
				
					return null;
				
				}
				public String DB_HostComment(){
				
				    return "";
				
				}
				public String DB_HostPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String DB_HostOriginalDbColumnName(){
				
					return "DB_Host";
				
				}

				
			    public String DB_Port;

				public String getDB_Port () {
					return this.DB_Port;
				}

				public Boolean DB_PortIsNullable(){
				    return true;
				}
				public Boolean DB_PortIsKey(){
				    return false;
				}
				public Integer DB_PortLength(){
				    return 4;
				}
				public Integer DB_PortPrecision(){
				    return 0;
				}
				public String DB_PortDefault(){
				
					return null;
				
				}
				public String DB_PortComment(){
				
				    return "";
				
				}
				public String DB_PortPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String DB_PortOriginalDbColumnName(){
				
					return "DB_Port";
				
				}

				
			    public String DB_Sid;

				public String getDB_Sid () {
					return this.DB_Sid;
				}

				public Boolean DB_SidIsNullable(){
				    return true;
				}
				public Boolean DB_SidIsKey(){
				    return false;
				}
				public Integer DB_SidLength(){
				    return 4;
				}
				public Integer DB_SidPrecision(){
				    return 0;
				}
				public String DB_SidDefault(){
				
					return null;
				
				}
				public String DB_SidComment(){
				
				    return "";
				
				}
				public String DB_SidPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String DB_SidOriginalDbColumnName(){
				
					return "DB_Sid";
				
				}

				
			    public String DB_ServiceName;

				public String getDB_ServiceName () {
					return this.DB_ServiceName;
				}

				public Boolean DB_ServiceNameIsNullable(){
				    return true;
				}
				public Boolean DB_ServiceNameIsKey(){
				    return false;
				}
				public Integer DB_ServiceNameLength(){
				    return 16;
				}
				public Integer DB_ServiceNamePrecision(){
				    return 0;
				}
				public String DB_ServiceNameDefault(){
				
					return null;
				
				}
				public String DB_ServiceNameComment(){
				
				    return "";
				
				}
				public String DB_ServiceNamePattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String DB_ServiceNameOriginalDbColumnName(){
				
					return "DB_ServiceName";
				
				}

				
			    public String DB_Schema;

				public String getDB_Schema () {
					return this.DB_Schema;
				}

				public Boolean DB_SchemaIsNullable(){
				    return true;
				}
				public Boolean DB_SchemaIsKey(){
				    return false;
				}
				public Integer DB_SchemaLength(){
				    return 8;
				}
				public Integer DB_SchemaPrecision(){
				    return 0;
				}
				public String DB_SchemaDefault(){
				
					return null;
				
				}
				public String DB_SchemaComment(){
				
				    return "";
				
				}
				public String DB_SchemaPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String DB_SchemaOriginalDbColumnName(){
				
					return "DB_Schema";
				
				}

				
			    public String DB_User;

				public String getDB_User () {
					return this.DB_User;
				}

				public Boolean DB_UserIsNullable(){
				    return true;
				}
				public Boolean DB_UserIsKey(){
				    return false;
				}
				public Integer DB_UserLength(){
				    return 8;
				}
				public Integer DB_UserPrecision(){
				    return 0;
				}
				public String DB_UserDefault(){
				
					return null;
				
				}
				public String DB_UserComment(){
				
				    return "";
				
				}
				public String DB_UserPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String DB_UserOriginalDbColumnName(){
				
					return "DB_User";
				
				}

				
			    public String DB_Password;

				public String getDB_Password () {
					return this.DB_Password;
				}

				public Boolean DB_PasswordIsNullable(){
				    return true;
				}
				public Boolean DB_PasswordIsKey(){
				    return false;
				}
				public Integer DB_PasswordLength(){
				    return 11;
				}
				public Integer DB_PasswordPrecision(){
				    return 0;
				}
				public String DB_PasswordDefault(){
				
					return null;
				
				}
				public String DB_PasswordComment(){
				
				    return "";
				
				}
				public String DB_PasswordPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String DB_PasswordOriginalDbColumnName(){
				
					return "DB_Password";
				
				}

				
			    public String FS_PathStorage;

				public String getFS_PathStorage () {
					return this.FS_PathStorage;
				}

				public Boolean FS_PathStorageIsNullable(){
				    return true;
				}
				public Boolean FS_PathStorageIsKey(){
				    return false;
				}
				public Integer FS_PathStorageLength(){
				    return 0;
				}
				public Integer FS_PathStoragePrecision(){
				    return 0;
				}
				public String FS_PathStorageDefault(){
				
					return null;
				
				}
				public String FS_PathStorageComment(){
				
				    return "";
				
				}
				public String FS_PathStoragePattern(){
				
					return "";
				
				}
				public String FS_PathStorageOriginalDbColumnName(){
				
					return "FS_PathStorage";
				
				}

				
			    public String ML_SMTPHost;

				public String getML_SMTPHost () {
					return this.ML_SMTPHost;
				}

				public Boolean ML_SMTPHostIsNullable(){
				    return true;
				}
				public Boolean ML_SMTPHostIsKey(){
				    return false;
				}
				public Integer ML_SMTPHostLength(){
				    return 0;
				}
				public Integer ML_SMTPHostPrecision(){
				    return 0;
				}
				public String ML_SMTPHostDefault(){
				
					return null;
				
				}
				public String ML_SMTPHostComment(){
				
				    return "";
				
				}
				public String ML_SMTPHostPattern(){
				
					return "";
				
				}
				public String ML_SMTPHostOriginalDbColumnName(){
				
					return "ML_SMTPHost";
				
				}

				
			    public String ML_SMTPPort;

				public String getML_SMTPPort () {
					return this.ML_SMTPPort;
				}

				public Boolean ML_SMTPPortIsNullable(){
				    return true;
				}
				public Boolean ML_SMTPPortIsKey(){
				    return false;
				}
				public Integer ML_SMTPPortLength(){
				    return 0;
				}
				public Integer ML_SMTPPortPrecision(){
				    return 0;
				}
				public String ML_SMTPPortDefault(){
				
					return null;
				
				}
				public String ML_SMTPPortComment(){
				
				    return "";
				
				}
				public String ML_SMTPPortPattern(){
				
					return "";
				
				}
				public String ML_SMTPPortOriginalDbColumnName(){
				
					return "ML_SMTPPort";
				
				}

				
			    public String ML_UsernameMail;

				public String getML_UsernameMail () {
					return this.ML_UsernameMail;
				}

				public Boolean ML_UsernameMailIsNullable(){
				    return true;
				}
				public Boolean ML_UsernameMailIsKey(){
				    return false;
				}
				public Integer ML_UsernameMailLength(){
				    return 0;
				}
				public Integer ML_UsernameMailPrecision(){
				    return 0;
				}
				public String ML_UsernameMailDefault(){
				
					return null;
				
				}
				public String ML_UsernameMailComment(){
				
				    return "";
				
				}
				public String ML_UsernameMailPattern(){
				
					return "";
				
				}
				public String ML_UsernameMailOriginalDbColumnName(){
				
					return "ML_UsernameMail";
				
				}

				
			    public String ML_PasswordMail;

				public String getML_PasswordMail () {
					return this.ML_PasswordMail;
				}

				public Boolean ML_PasswordMailIsNullable(){
				    return true;
				}
				public Boolean ML_PasswordMailIsKey(){
				    return false;
				}
				public Integer ML_PasswordMailLength(){
				    return 0;
				}
				public Integer ML_PasswordMailPrecision(){
				    return 0;
				}
				public String ML_PasswordMailDefault(){
				
					return null;
				
				}
				public String ML_PasswordMailComment(){
				
				    return "";
				
				}
				public String ML_PasswordMailPattern(){
				
					return "";
				
				}
				public String ML_PasswordMailOriginalDbColumnName(){
				
					return "ML_PasswordMail";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_PRINCIPAL_Consolidado_Salud.length) {
				if(length < 1024 && commonByteArray_AFI_PRINCIPAL_Consolidado_Salud.length == 0) {
   					commonByteArray_AFI_PRINCIPAL_Consolidado_Salud = new byte[1024];
				} else {
   					commonByteArray_AFI_PRINCIPAL_Consolidado_Salud = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_PRINCIPAL_Consolidado_Salud, 0, length);
			strReturn = new String(commonByteArray_AFI_PRINCIPAL_Consolidado_Salud, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_PRINCIPAL_Consolidado_Salud.length) {
				if(length < 1024 && commonByteArray_AFI_PRINCIPAL_Consolidado_Salud.length == 0) {
   					commonByteArray_AFI_PRINCIPAL_Consolidado_Salud = new byte[1024];
				} else {
   					commonByteArray_AFI_PRINCIPAL_Consolidado_Salud = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_PRINCIPAL_Consolidado_Salud, 0, length);
			strReturn = new String(commonByteArray_AFI_PRINCIPAL_Consolidado_Salud, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_PRINCIPAL_Consolidado_Salud) {

        	try {

        		int length = 0;
		
					this.DB_Host = readString(dis);
					
					this.DB_Port = readString(dis);
					
					this.DB_Sid = readString(dis);
					
					this.DB_ServiceName = readString(dis);
					
					this.DB_Schema = readString(dis);
					
					this.DB_User = readString(dis);
					
					this.DB_Password = readString(dis);
					
					this.FS_PathStorage = readString(dis);
					
					this.ML_SMTPHost = readString(dis);
					
					this.ML_SMTPPort = readString(dis);
					
					this.ML_UsernameMail = readString(dis);
					
					this.ML_PasswordMail = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_PRINCIPAL_Consolidado_Salud) {

        	try {

        		int length = 0;
		
					this.DB_Host = readString(dis);
					
					this.DB_Port = readString(dis);
					
					this.DB_Sid = readString(dis);
					
					this.DB_ServiceName = readString(dis);
					
					this.DB_Schema = readString(dis);
					
					this.DB_User = readString(dis);
					
					this.DB_Password = readString(dis);
					
					this.FS_PathStorage = readString(dis);
					
					this.ML_SMTPHost = readString(dis);
					
					this.ML_SMTPPort = readString(dis);
					
					this.ML_UsernameMail = readString(dis);
					
					this.ML_PasswordMail = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.DB_Host,dos);
					
					// String
				
						writeString(this.DB_Port,dos);
					
					// String
				
						writeString(this.DB_Sid,dos);
					
					// String
				
						writeString(this.DB_ServiceName,dos);
					
					// String
				
						writeString(this.DB_Schema,dos);
					
					// String
				
						writeString(this.DB_User,dos);
					
					// String
				
						writeString(this.DB_Password,dos);
					
					// String
				
						writeString(this.FS_PathStorage,dos);
					
					// String
				
						writeString(this.ML_SMTPHost,dos);
					
					// String
				
						writeString(this.ML_SMTPPort,dos);
					
					// String
				
						writeString(this.ML_UsernameMail,dos);
					
					// String
				
						writeString(this.ML_PasswordMail,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.DB_Host,dos);
					
					// String
				
						writeString(this.DB_Port,dos);
					
					// String
				
						writeString(this.DB_Sid,dos);
					
					// String
				
						writeString(this.DB_ServiceName,dos);
					
					// String
				
						writeString(this.DB_Schema,dos);
					
					// String
				
						writeString(this.DB_User,dos);
					
					// String
				
						writeString(this.DB_Password,dos);
					
					// String
				
						writeString(this.FS_PathStorage,dos);
					
					// String
				
						writeString(this.ML_SMTPHost,dos);
					
					// String
				
						writeString(this.ML_SMTPPort,dos);
					
					// String
				
						writeString(this.ML_UsernameMail,dos);
					
					// String
				
						writeString(this.ML_PasswordMail,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("DB_Host="+DB_Host);
		sb.append(",DB_Port="+DB_Port);
		sb.append(",DB_Sid="+DB_Sid);
		sb.append(",DB_ServiceName="+DB_ServiceName);
		sb.append(",DB_Schema="+DB_Schema);
		sb.append(",DB_User="+DB_User);
		sb.append(",DB_Password="+DB_Password);
		sb.append(",FS_PathStorage="+FS_PathStorage);
		sb.append(",ML_SMTPHost="+ML_SMTPHost);
		sb.append(",ML_SMTPPort="+ML_SMTPPort);
		sb.append(",ML_UsernameMail="+ML_UsernameMail);
		sb.append(",ML_PasswordMail="+ML_PasswordMail);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row20Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tFileInputXML_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileInputXML_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row20Struct row20 = new row20Struct();




	
	/**
	 * [tJavaRow_10 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaRow_10", false);
		start_Hash.put("tJavaRow_10", System.currentTimeMillis());
		
	
	currentComponent="tJavaRow_10";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row20");
					}
				
		int tos_count_tJavaRow_10 = 0;
		

int nb_line_tJavaRow_10 = 0;

 



/**
 * [tJavaRow_10 begin ] stop
 */



	
	/**
	 * [tFileInputXML_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputXML_1", false);
		start_Hash.put("tFileInputXML_1", System.currentTimeMillis());
		
	
	currentComponent="tFileInputXML_1";
	
	
		int tos_count_tFileInputXML_1 = 0;
		

	

int nb_line_tFileInputXML_1 = 0;

	String os_tFileInputXML_1 = System.getProperty("os.name").toLowerCase();
	boolean isWindows_tFileInputXML_1=false;
	if(os_tFileInputXML_1.indexOf("windows") > -1 || os_tFileInputXML_1.indexOf("nt") > -1){
		isWindows_tFileInputXML_1=true;
	}
class NameSpaceTool_tFileInputXML_1 {

    public java.util.HashMap<String, String> xmlNameSpaceMap = new java.util.HashMap<String, String>();
    
	private java.util.List<String> defualtNSPath = new java.util.ArrayList<String>();

    public void countNSMap(org.dom4j.Element el) {
        for (org.dom4j.Namespace ns : (java.util.List<org.dom4j.Namespace>) el.declaredNamespaces()) {
            if (ns.getPrefix().trim().length() == 0) {
                xmlNameSpaceMap.put("pre"+defualtNSPath.size(), ns.getURI());
                String path = "";
                org.dom4j.Element elTmp = el;
                while (elTmp != null) {
                	if (elTmp.getNamespacePrefix() != null && elTmp.getNamespacePrefix().length() > 0) {
                        path = "/" + elTmp.getNamespacePrefix() + ":" + elTmp.getName() + path;
                    } else {
                        path = "/" + elTmp.getName() + path;
                    }
                    elTmp = elTmp.getParent();
                }
                defualtNSPath.add(path);
            } else {
                xmlNameSpaceMap.put(ns.getPrefix(), ns.getURI());
            }

        }
        for (org.dom4j.Element e : (java.util.List<org.dom4j.Element>) el.elements()) {
            countNSMap(e);
        }
    }
    
    private final org.talend.xpath.XPathUtil util = new  org.talend.xpath.XPathUtil();
    
    {
    	util.setDefaultNSPath(defualtNSPath);
    }
    
	public String addDefaultNSPrefix(String path) {
		return util.addDefaultNSPrefix(path);
	}
	
	public String addDefaultNSPrefix(String relativeXpression, String basePath) {
		return util.addDefaultNSPrefix(relativeXpression,basePath);
	}
    
}

class XML_API_tFileInputXML_1{
	public boolean isDefNull(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
        if (node != null && node instanceof org.dom4j.Element) {
        	org.dom4j.Attribute attri = ((org.dom4j.Element)node).attribute("nil");
        	if(attri != null && ("true").equals(attri.getText())){
            	return true;
            }
        }
        return false;
    }

    public boolean isMissing(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
        return node == null ? true : false;
    }

    public boolean isEmpty(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
        if (node != null) {
            return node.getStringValue().isEmpty();
        }
        return false;
    }
}


org.dom4j.io.SAXReader reader_tFileInputXML_1 = new org.dom4j.io.SAXReader();
Object filename_tFileInputXML_1 = null;
try {
	filename_tFileInputXML_1 = context.archivoConfiguracion;
} catch(java.lang.Exception e) {
globalMap.put("tFileInputXML_1_ERROR_MESSAGE",e.getMessage());
	
	
	System.err.println(e.getMessage());
	
}
if(filename_tFileInputXML_1 != null && filename_tFileInputXML_1 instanceof String && filename_tFileInputXML_1.toString().startsWith("//")){
	if (!isWindows_tFileInputXML_1){
		filename_tFileInputXML_1 = filename_tFileInputXML_1.toString().replaceFirst("//","/");
	}
}

boolean isValidFile_tFileInputXML_1 = true;
org.dom4j.Document doc_tFileInputXML_1 = null;
java.io.Closeable toClose_tFileInputXML_1 = null;
try{
	if(filename_tFileInputXML_1 instanceof java.io.InputStream){
		java.io.InputStream inputStream_tFileInputXML_1 = (java.io.InputStream)filename_tFileInputXML_1;
		toClose_tFileInputXML_1 = inputStream_tFileInputXML_1;
		doc_tFileInputXML_1 = reader_tFileInputXML_1.read(inputStream_tFileInputXML_1);
	}else{
		java.io.Reader unicodeReader_tFileInputXML_1 = new UnicodeReader(new java.io.FileInputStream(String.valueOf(filename_tFileInputXML_1)),"UTF-8");
		toClose_tFileInputXML_1 = unicodeReader_tFileInputXML_1;
		org.xml.sax.InputSource in_tFileInputXML_1= new org.xml.sax.InputSource(unicodeReader_tFileInputXML_1);
		doc_tFileInputXML_1 = reader_tFileInputXML_1.read(in_tFileInputXML_1);
	}
}catch(java.lang.Exception e){
globalMap.put("tFileInputXML_1_ERROR_MESSAGE",e.getMessage());
	
	System.err.println(e.getMessage());
	isValidFile_tFileInputXML_1 = false;
} finally {
	if(toClose_tFileInputXML_1!=null) {
		toClose_tFileInputXML_1.close();
	}
}
if(isValidFile_tFileInputXML_1){
NameSpaceTool_tFileInputXML_1 nsTool_tFileInputXML_1 = new NameSpaceTool_tFileInputXML_1();
nsTool_tFileInputXML_1.countNSMap(doc_tFileInputXML_1.getRootElement());
java.util.HashMap<String,String> xmlNameSpaceMap_tFileInputXML_1 = nsTool_tFileInputXML_1.xmlNameSpaceMap;  

org.dom4j.XPath x_tFileInputXML_1 = doc_tFileInputXML_1.createXPath(nsTool_tFileInputXML_1.addDefaultNSPrefix("/connectionStrings"));  
x_tFileInputXML_1.setNamespaceURIs(xmlNameSpaceMap_tFileInputXML_1); 

java.util.List<org.dom4j.Node> nodeList_tFileInputXML_1 = (java.util.List<org.dom4j.Node>)x_tFileInputXML_1.selectNodes(doc_tFileInputXML_1);	
XML_API_tFileInputXML_1 xml_api_tFileInputXML_1 = new XML_API_tFileInputXML_1();
String str_tFileInputXML_1 = "";
org.dom4j.Node node_tFileInputXML_1 = null;

//init all mapping xpaths
java.util.Map<Integer,org.dom4j.XPath> xpaths_tFileInputXML_1=new java.util.HashMap<Integer,org.dom4j.XPath>();
	class XPathUtil_tFileInputXML_1{
	
			   public void initXPaths_0(java.util.Map<Integer,org.dom4j.XPath> xpaths,NameSpaceTool_tFileInputXML_1 nsTool,
			       java.util.HashMap<String,String> xmlNameSpaceMap){
			
	org.dom4j.XPath xpath_0 = org.dom4j.DocumentHelper.createXPath(nsTool.addDefaultNSPrefix("Host","/connectionStrings"));
	xpath_0.setNamespaceURIs(xmlNameSpaceMap);
	
			xpaths.put(0,xpath_0);
			
	org.dom4j.XPath xpath_1 = org.dom4j.DocumentHelper.createXPath(nsTool.addDefaultNSPrefix("Port","/connectionStrings"));
	xpath_1.setNamespaceURIs(xmlNameSpaceMap);
	
			xpaths.put(1,xpath_1);
			
	org.dom4j.XPath xpath_2 = org.dom4j.DocumentHelper.createXPath(nsTool.addDefaultNSPrefix("Sid","/connectionStrings"));
	xpath_2.setNamespaceURIs(xmlNameSpaceMap);
	
			xpaths.put(2,xpath_2);
			
	org.dom4j.XPath xpath_3 = org.dom4j.DocumentHelper.createXPath(nsTool.addDefaultNSPrefix("ServiceName","/connectionStrings"));
	xpath_3.setNamespaceURIs(xmlNameSpaceMap);
	
			xpaths.put(3,xpath_3);
			
	org.dom4j.XPath xpath_4 = org.dom4j.DocumentHelper.createXPath(nsTool.addDefaultNSPrefix("Schema","/connectionStrings"));
	xpath_4.setNamespaceURIs(xmlNameSpaceMap);
	
			xpaths.put(4,xpath_4);
			
	org.dom4j.XPath xpath_5 = org.dom4j.DocumentHelper.createXPath(nsTool.addDefaultNSPrefix("User","/connectionStrings"));
	xpath_5.setNamespaceURIs(xmlNameSpaceMap);
	
			xpaths.put(5,xpath_5);
			
	org.dom4j.XPath xpath_6 = org.dom4j.DocumentHelper.createXPath(nsTool.addDefaultNSPrefix("Password","/connectionStrings"));
	xpath_6.setNamespaceURIs(xmlNameSpaceMap);
	
			xpaths.put(6,xpath_6);
			
	org.dom4j.XPath xpath_7 = org.dom4j.DocumentHelper.createXPath(nsTool.addDefaultNSPrefix("PathStorage","/connectionStrings"));
	xpath_7.setNamespaceURIs(xmlNameSpaceMap);
	
			xpaths.put(7,xpath_7);
			
	org.dom4j.XPath xpath_8 = org.dom4j.DocumentHelper.createXPath(nsTool.addDefaultNSPrefix("SMTPHost","/connectionStrings"));
	xpath_8.setNamespaceURIs(xmlNameSpaceMap);
	
			xpaths.put(8,xpath_8);
			
	org.dom4j.XPath xpath_9 = org.dom4j.DocumentHelper.createXPath(nsTool.addDefaultNSPrefix("SMTPPort","/connectionStrings"));
	xpath_9.setNamespaceURIs(xmlNameSpaceMap);
	
			xpaths.put(9,xpath_9);
			
	org.dom4j.XPath xpath_10 = org.dom4j.DocumentHelper.createXPath(nsTool.addDefaultNSPrefix("UsernameMail","/connectionStrings"));
	xpath_10.setNamespaceURIs(xmlNameSpaceMap);
	
			xpaths.put(10,xpath_10);
			
	org.dom4j.XPath xpath_11 = org.dom4j.DocumentHelper.createXPath(nsTool.addDefaultNSPrefix("PasswordMail","/connectionStrings"));
	xpath_11.setNamespaceURIs(xmlNameSpaceMap);
	
			xpaths.put(11,xpath_11);
			
	     }
	   
	      public void initXPaths(java.util.Map<Integer,org.dom4j.XPath> xpaths,NameSpaceTool_tFileInputXML_1 nsTool,
			    java.util.HashMap<String,String> xmlNameSpaceMap){
			    
			        initXPaths_0(xpaths,nsTool, xmlNameSpaceMap);
			    
		   }
	}
	XPathUtil_tFileInputXML_1 xPathUtil_tFileInputXML_1 = new XPathUtil_tFileInputXML_1();
	xPathUtil_tFileInputXML_1.initXPaths(xpaths_tFileInputXML_1, nsTool_tFileInputXML_1, xmlNameSpaceMap_tFileInputXML_1);
for (org.dom4j.Node temp_tFileInputXML_1: nodeList_tFileInputXML_1) {
	if (nb_line_tFileInputXML_1>=50) {
	
		break;
	}
		nb_line_tFileInputXML_1++;
		
	row20 = null;			
	boolean whetherReject_tFileInputXML_1 = false;
	row20 = new row20Struct();
	try{
    Object obj0_tFileInputXML_1 = xpaths_tFileInputXML_1.get(0).evaluate(temp_tFileInputXML_1);
    if(obj0_tFileInputXML_1 == null) {
    	node_tFileInputXML_1 = null;
    	str_tFileInputXML_1 = "";
    	
    } else if(obj0_tFileInputXML_1 instanceof org.dom4j.Node) {
    	node_tFileInputXML_1 = (org.dom4j.Node)obj0_tFileInputXML_1;
    	str_tFileInputXML_1 = org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
    } else if(obj0_tFileInputXML_1 instanceof String || obj0_tFileInputXML_1 instanceof Number){
    	node_tFileInputXML_1 = temp_tFileInputXML_1;
    	str_tFileInputXML_1 = String.valueOf(obj0_tFileInputXML_1);
    } else if(obj0_tFileInputXML_1 instanceof java.util.List){
    	java.util.List<org.dom4j.Node> nodes_tFileInputXML_1 = (java.util.List<org.dom4j.Node>)obj0_tFileInputXML_1;
    	node_tFileInputXML_1 = nodes_tFileInputXML_1.size()>0 ? nodes_tFileInputXML_1.get(0) : null;
    	str_tFileInputXML_1 = node_tFileInputXML_1==null?"":org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
	}
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row20.DB_Host =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row20.DB_Host ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row20.DB_Host =null;
									}else{
		row20.DB_Host = str_tFileInputXML_1;
	}
    Object obj1_tFileInputXML_1 = xpaths_tFileInputXML_1.get(1).evaluate(temp_tFileInputXML_1);
    if(obj1_tFileInputXML_1 == null) {
    	node_tFileInputXML_1 = null;
    	str_tFileInputXML_1 = "";
    	
    } else if(obj1_tFileInputXML_1 instanceof org.dom4j.Node) {
    	node_tFileInputXML_1 = (org.dom4j.Node)obj1_tFileInputXML_1;
    	str_tFileInputXML_1 = org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
    } else if(obj1_tFileInputXML_1 instanceof String || obj1_tFileInputXML_1 instanceof Number){
    	node_tFileInputXML_1 = temp_tFileInputXML_1;
    	str_tFileInputXML_1 = String.valueOf(obj1_tFileInputXML_1);
    } else if(obj1_tFileInputXML_1 instanceof java.util.List){
    	java.util.List<org.dom4j.Node> nodes_tFileInputXML_1 = (java.util.List<org.dom4j.Node>)obj1_tFileInputXML_1;
    	node_tFileInputXML_1 = nodes_tFileInputXML_1.size()>0 ? nodes_tFileInputXML_1.get(0) : null;
    	str_tFileInputXML_1 = node_tFileInputXML_1==null?"":org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
	}
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row20.DB_Port =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row20.DB_Port ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row20.DB_Port =null;
									}else{
		row20.DB_Port = str_tFileInputXML_1;
	}
    Object obj2_tFileInputXML_1 = xpaths_tFileInputXML_1.get(2).evaluate(temp_tFileInputXML_1);
    if(obj2_tFileInputXML_1 == null) {
    	node_tFileInputXML_1 = null;
    	str_tFileInputXML_1 = "";
    	
    } else if(obj2_tFileInputXML_1 instanceof org.dom4j.Node) {
    	node_tFileInputXML_1 = (org.dom4j.Node)obj2_tFileInputXML_1;
    	str_tFileInputXML_1 = org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
    } else if(obj2_tFileInputXML_1 instanceof String || obj2_tFileInputXML_1 instanceof Number){
    	node_tFileInputXML_1 = temp_tFileInputXML_1;
    	str_tFileInputXML_1 = String.valueOf(obj2_tFileInputXML_1);
    } else if(obj2_tFileInputXML_1 instanceof java.util.List){
    	java.util.List<org.dom4j.Node> nodes_tFileInputXML_1 = (java.util.List<org.dom4j.Node>)obj2_tFileInputXML_1;
    	node_tFileInputXML_1 = nodes_tFileInputXML_1.size()>0 ? nodes_tFileInputXML_1.get(0) : null;
    	str_tFileInputXML_1 = node_tFileInputXML_1==null?"":org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
	}
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row20.DB_Sid =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row20.DB_Sid ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row20.DB_Sid =null;
									}else{
		row20.DB_Sid = str_tFileInputXML_1;
	}
    Object obj3_tFileInputXML_1 = xpaths_tFileInputXML_1.get(3).evaluate(temp_tFileInputXML_1);
    if(obj3_tFileInputXML_1 == null) {
    	node_tFileInputXML_1 = null;
    	str_tFileInputXML_1 = "";
    	
    } else if(obj3_tFileInputXML_1 instanceof org.dom4j.Node) {
    	node_tFileInputXML_1 = (org.dom4j.Node)obj3_tFileInputXML_1;
    	str_tFileInputXML_1 = org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
    } else if(obj3_tFileInputXML_1 instanceof String || obj3_tFileInputXML_1 instanceof Number){
    	node_tFileInputXML_1 = temp_tFileInputXML_1;
    	str_tFileInputXML_1 = String.valueOf(obj3_tFileInputXML_1);
    } else if(obj3_tFileInputXML_1 instanceof java.util.List){
    	java.util.List<org.dom4j.Node> nodes_tFileInputXML_1 = (java.util.List<org.dom4j.Node>)obj3_tFileInputXML_1;
    	node_tFileInputXML_1 = nodes_tFileInputXML_1.size()>0 ? nodes_tFileInputXML_1.get(0) : null;
    	str_tFileInputXML_1 = node_tFileInputXML_1==null?"":org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
	}
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row20.DB_ServiceName =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row20.DB_ServiceName ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row20.DB_ServiceName =null;
									}else{
		row20.DB_ServiceName = str_tFileInputXML_1;
	}
    Object obj4_tFileInputXML_1 = xpaths_tFileInputXML_1.get(4).evaluate(temp_tFileInputXML_1);
    if(obj4_tFileInputXML_1 == null) {
    	node_tFileInputXML_1 = null;
    	str_tFileInputXML_1 = "";
    	
    } else if(obj4_tFileInputXML_1 instanceof org.dom4j.Node) {
    	node_tFileInputXML_1 = (org.dom4j.Node)obj4_tFileInputXML_1;
    	str_tFileInputXML_1 = org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
    } else if(obj4_tFileInputXML_1 instanceof String || obj4_tFileInputXML_1 instanceof Number){
    	node_tFileInputXML_1 = temp_tFileInputXML_1;
    	str_tFileInputXML_1 = String.valueOf(obj4_tFileInputXML_1);
    } else if(obj4_tFileInputXML_1 instanceof java.util.List){
    	java.util.List<org.dom4j.Node> nodes_tFileInputXML_1 = (java.util.List<org.dom4j.Node>)obj4_tFileInputXML_1;
    	node_tFileInputXML_1 = nodes_tFileInputXML_1.size()>0 ? nodes_tFileInputXML_1.get(0) : null;
    	str_tFileInputXML_1 = node_tFileInputXML_1==null?"":org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
	}
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row20.DB_Schema =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row20.DB_Schema ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row20.DB_Schema =null;
									}else{
		row20.DB_Schema = str_tFileInputXML_1;
	}
    Object obj5_tFileInputXML_1 = xpaths_tFileInputXML_1.get(5).evaluate(temp_tFileInputXML_1);
    if(obj5_tFileInputXML_1 == null) {
    	node_tFileInputXML_1 = null;
    	str_tFileInputXML_1 = "";
    	
    } else if(obj5_tFileInputXML_1 instanceof org.dom4j.Node) {
    	node_tFileInputXML_1 = (org.dom4j.Node)obj5_tFileInputXML_1;
    	str_tFileInputXML_1 = org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
    } else if(obj5_tFileInputXML_1 instanceof String || obj5_tFileInputXML_1 instanceof Number){
    	node_tFileInputXML_1 = temp_tFileInputXML_1;
    	str_tFileInputXML_1 = String.valueOf(obj5_tFileInputXML_1);
    } else if(obj5_tFileInputXML_1 instanceof java.util.List){
    	java.util.List<org.dom4j.Node> nodes_tFileInputXML_1 = (java.util.List<org.dom4j.Node>)obj5_tFileInputXML_1;
    	node_tFileInputXML_1 = nodes_tFileInputXML_1.size()>0 ? nodes_tFileInputXML_1.get(0) : null;
    	str_tFileInputXML_1 = node_tFileInputXML_1==null?"":org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
	}
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row20.DB_User =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row20.DB_User ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row20.DB_User =null;
									}else{
		row20.DB_User = str_tFileInputXML_1;
	}
    Object obj6_tFileInputXML_1 = xpaths_tFileInputXML_1.get(6).evaluate(temp_tFileInputXML_1);
    if(obj6_tFileInputXML_1 == null) {
    	node_tFileInputXML_1 = null;
    	str_tFileInputXML_1 = "";
    	
    } else if(obj6_tFileInputXML_1 instanceof org.dom4j.Node) {
    	node_tFileInputXML_1 = (org.dom4j.Node)obj6_tFileInputXML_1;
    	str_tFileInputXML_1 = org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
    } else if(obj6_tFileInputXML_1 instanceof String || obj6_tFileInputXML_1 instanceof Number){
    	node_tFileInputXML_1 = temp_tFileInputXML_1;
    	str_tFileInputXML_1 = String.valueOf(obj6_tFileInputXML_1);
    } else if(obj6_tFileInputXML_1 instanceof java.util.List){
    	java.util.List<org.dom4j.Node> nodes_tFileInputXML_1 = (java.util.List<org.dom4j.Node>)obj6_tFileInputXML_1;
    	node_tFileInputXML_1 = nodes_tFileInputXML_1.size()>0 ? nodes_tFileInputXML_1.get(0) : null;
    	str_tFileInputXML_1 = node_tFileInputXML_1==null?"":org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
	}
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row20.DB_Password =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row20.DB_Password ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row20.DB_Password =null;
									}else{
		row20.DB_Password = str_tFileInputXML_1;
	}
    Object obj7_tFileInputXML_1 = xpaths_tFileInputXML_1.get(7).evaluate(temp_tFileInputXML_1);
    if(obj7_tFileInputXML_1 == null) {
    	node_tFileInputXML_1 = null;
    	str_tFileInputXML_1 = "";
    	
    } else if(obj7_tFileInputXML_1 instanceof org.dom4j.Node) {
    	node_tFileInputXML_1 = (org.dom4j.Node)obj7_tFileInputXML_1;
    	str_tFileInputXML_1 = org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
    } else if(obj7_tFileInputXML_1 instanceof String || obj7_tFileInputXML_1 instanceof Number){
    	node_tFileInputXML_1 = temp_tFileInputXML_1;
    	str_tFileInputXML_1 = String.valueOf(obj7_tFileInputXML_1);
    } else if(obj7_tFileInputXML_1 instanceof java.util.List){
    	java.util.List<org.dom4j.Node> nodes_tFileInputXML_1 = (java.util.List<org.dom4j.Node>)obj7_tFileInputXML_1;
    	node_tFileInputXML_1 = nodes_tFileInputXML_1.size()>0 ? nodes_tFileInputXML_1.get(0) : null;
    	str_tFileInputXML_1 = node_tFileInputXML_1==null?"":org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
	}
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row20.FS_PathStorage =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row20.FS_PathStorage ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row20.FS_PathStorage =null;
									}else{
		row20.FS_PathStorage = str_tFileInputXML_1;
	}
    Object obj8_tFileInputXML_1 = xpaths_tFileInputXML_1.get(8).evaluate(temp_tFileInputXML_1);
    if(obj8_tFileInputXML_1 == null) {
    	node_tFileInputXML_1 = null;
    	str_tFileInputXML_1 = "";
    	
    } else if(obj8_tFileInputXML_1 instanceof org.dom4j.Node) {
    	node_tFileInputXML_1 = (org.dom4j.Node)obj8_tFileInputXML_1;
    	str_tFileInputXML_1 = org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
    } else if(obj8_tFileInputXML_1 instanceof String || obj8_tFileInputXML_1 instanceof Number){
    	node_tFileInputXML_1 = temp_tFileInputXML_1;
    	str_tFileInputXML_1 = String.valueOf(obj8_tFileInputXML_1);
    } else if(obj8_tFileInputXML_1 instanceof java.util.List){
    	java.util.List<org.dom4j.Node> nodes_tFileInputXML_1 = (java.util.List<org.dom4j.Node>)obj8_tFileInputXML_1;
    	node_tFileInputXML_1 = nodes_tFileInputXML_1.size()>0 ? nodes_tFileInputXML_1.get(0) : null;
    	str_tFileInputXML_1 = node_tFileInputXML_1==null?"":org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
	}
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row20.ML_SMTPHost =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row20.ML_SMTPHost ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row20.ML_SMTPHost =null;
									}else{
		row20.ML_SMTPHost = str_tFileInputXML_1;
	}
    Object obj9_tFileInputXML_1 = xpaths_tFileInputXML_1.get(9).evaluate(temp_tFileInputXML_1);
    if(obj9_tFileInputXML_1 == null) {
    	node_tFileInputXML_1 = null;
    	str_tFileInputXML_1 = "";
    	
    } else if(obj9_tFileInputXML_1 instanceof org.dom4j.Node) {
    	node_tFileInputXML_1 = (org.dom4j.Node)obj9_tFileInputXML_1;
    	str_tFileInputXML_1 = org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
    } else if(obj9_tFileInputXML_1 instanceof String || obj9_tFileInputXML_1 instanceof Number){
    	node_tFileInputXML_1 = temp_tFileInputXML_1;
    	str_tFileInputXML_1 = String.valueOf(obj9_tFileInputXML_1);
    } else if(obj9_tFileInputXML_1 instanceof java.util.List){
    	java.util.List<org.dom4j.Node> nodes_tFileInputXML_1 = (java.util.List<org.dom4j.Node>)obj9_tFileInputXML_1;
    	node_tFileInputXML_1 = nodes_tFileInputXML_1.size()>0 ? nodes_tFileInputXML_1.get(0) : null;
    	str_tFileInputXML_1 = node_tFileInputXML_1==null?"":org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
	}
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row20.ML_SMTPPort =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row20.ML_SMTPPort ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row20.ML_SMTPPort =null;
									}else{
		row20.ML_SMTPPort = str_tFileInputXML_1;
	}
    Object obj10_tFileInputXML_1 = xpaths_tFileInputXML_1.get(10).evaluate(temp_tFileInputXML_1);
    if(obj10_tFileInputXML_1 == null) {
    	node_tFileInputXML_1 = null;
    	str_tFileInputXML_1 = "";
    	
    } else if(obj10_tFileInputXML_1 instanceof org.dom4j.Node) {
    	node_tFileInputXML_1 = (org.dom4j.Node)obj10_tFileInputXML_1;
    	str_tFileInputXML_1 = org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
    } else if(obj10_tFileInputXML_1 instanceof String || obj10_tFileInputXML_1 instanceof Number){
    	node_tFileInputXML_1 = temp_tFileInputXML_1;
    	str_tFileInputXML_1 = String.valueOf(obj10_tFileInputXML_1);
    } else if(obj10_tFileInputXML_1 instanceof java.util.List){
    	java.util.List<org.dom4j.Node> nodes_tFileInputXML_1 = (java.util.List<org.dom4j.Node>)obj10_tFileInputXML_1;
    	node_tFileInputXML_1 = nodes_tFileInputXML_1.size()>0 ? nodes_tFileInputXML_1.get(0) : null;
    	str_tFileInputXML_1 = node_tFileInputXML_1==null?"":org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
	}
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row20.ML_UsernameMail =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row20.ML_UsernameMail ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row20.ML_UsernameMail =null;
									}else{
		row20.ML_UsernameMail = str_tFileInputXML_1;
	}
    Object obj11_tFileInputXML_1 = xpaths_tFileInputXML_1.get(11).evaluate(temp_tFileInputXML_1);
    if(obj11_tFileInputXML_1 == null) {
    	node_tFileInputXML_1 = null;
    	str_tFileInputXML_1 = "";
    	
    } else if(obj11_tFileInputXML_1 instanceof org.dom4j.Node) {
    	node_tFileInputXML_1 = (org.dom4j.Node)obj11_tFileInputXML_1;
    	str_tFileInputXML_1 = org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
    } else if(obj11_tFileInputXML_1 instanceof String || obj11_tFileInputXML_1 instanceof Number){
    	node_tFileInputXML_1 = temp_tFileInputXML_1;
    	str_tFileInputXML_1 = String.valueOf(obj11_tFileInputXML_1);
    } else if(obj11_tFileInputXML_1 instanceof java.util.List){
    	java.util.List<org.dom4j.Node> nodes_tFileInputXML_1 = (java.util.List<org.dom4j.Node>)obj11_tFileInputXML_1;
    	node_tFileInputXML_1 = nodes_tFileInputXML_1.size()>0 ? nodes_tFileInputXML_1.get(0) : null;
    	str_tFileInputXML_1 = node_tFileInputXML_1==null?"":org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
	}
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row20.ML_PasswordMail =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row20.ML_PasswordMail ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row20.ML_PasswordMail =null;
									}else{
		row20.ML_PasswordMail = str_tFileInputXML_1;
	} 
			
    } catch (java.lang.Exception e) {
globalMap.put("tFileInputXML_1_ERROR_MESSAGE",e.getMessage());
        whetherReject_tFileInputXML_1 = true;
                System.err.println(e.getMessage());
                row20 = null;
    }
			
			

 



/**
 * [tFileInputXML_1 begin ] stop
 */
	
	/**
	 * [tFileInputXML_1 main ] start
	 */

	

	
	
	currentComponent="tFileInputXML_1";
	
	

 


	tos_count_tFileInputXML_1++;

/**
 * [tFileInputXML_1 main ] stop
 */
	
	/**
	 * [tFileInputXML_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileInputXML_1";
	
	

 



/**
 * [tFileInputXML_1 process_data_begin ] stop
 */
// Start of branch "row20"
if(row20 != null) { 



	
	/**
	 * [tJavaRow_10 main ] start
	 */

	

	
	
	currentComponent="tJavaRow_10";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row20"
						
						);
					}
					

    System.out.println(TalendDate.getCurrentDate()+" : Archivo de configuración encontrado.");

//****************************************************************************************//
//*** ALMACENAMIENTO EN VARIABLES DE CONTEXTO DE LA CONFIGURACIÓN DE LA BASE DE DATOS ****//
//****************************************************************************************//
context.oracle_Host=row20.DB_Host;
context.oracle_Port=row20.DB_Port;
context.oracle_Sid=row20.DB_Sid;
context.oracle_ServiceName=row20.DB_ServiceName;
context.oracle_Schema=row20.DB_Schema;
context.oracle_User=row20.DB_User;
context.oracle_Password=row20.DB_Password;

//****************************************************************************************//
//*** ALMACENAMIENTO EN VARIABLES DE CONTEXTO DE LA CONFIGURACIÓN DEL FILE SYSTEM ********//
//****************************************************************************************//
context.fileSystem_Path=row20.FS_PathStorage;

//****************************************************************************************//
//*** ALMACENAMIENTO EN VARIABLES DE CONTEXTO DE LA CONFIGURACIÓN DEL EMAIL **************//
//****************************************************************************************//
context.mail_SMTPHost=row20.ML_SMTPHost;
context.mail_SMTPPort=row20.ML_SMTPPort;
context.mail_UsernameMail=row20.ML_UsernameMail;
context.mail_PasswordMail=row20.ML_PasswordMail;

    nb_line_tJavaRow_10++;   

 


	tos_count_tJavaRow_10++;

/**
 * [tJavaRow_10 main ] stop
 */
	
	/**
	 * [tJavaRow_10 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJavaRow_10";
	
	

 



/**
 * [tJavaRow_10 process_data_begin ] stop
 */
	
	/**
	 * [tJavaRow_10 process_data_end ] start
	 */

	

	
	
	currentComponent="tJavaRow_10";
	
	

 



/**
 * [tJavaRow_10 process_data_end ] stop
 */

} // End of branch "row20"




	
	/**
	 * [tFileInputXML_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileInputXML_1";
	
	

 



/**
 * [tFileInputXML_1 process_data_end ] stop
 */
	
	/**
	 * [tFileInputXML_1 end ] start
	 */

	

	
	
	currentComponent="tFileInputXML_1";
	
	


}
	}
	globalMap.put("tFileInputXML_1_NB_LINE",nb_line_tFileInputXML_1);

	

 

ok_Hash.put("tFileInputXML_1", true);
end_Hash.put("tFileInputXML_1", System.currentTimeMillis());




/**
 * [tFileInputXML_1 end ] stop
 */

	
	/**
	 * [tJavaRow_10 end ] start
	 */

	

	
	
	currentComponent="tJavaRow_10";
	
	

globalMap.put("tJavaRow_10_NB_LINE",nb_line_tJavaRow_10);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row20");
			  	}
			  	
 

ok_Hash.put("tJavaRow_10", true);
end_Hash.put("tJavaRow_10", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk19", 0, "ok");
				}
				tOracleConnection_2Process(globalMap);



/**
 * [tJavaRow_10 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileInputXML_1 finally ] start
	 */

	

	
	
	currentComponent="tFileInputXML_1";
	
	

 



/**
 * [tFileInputXML_1 finally ] stop
 */

	
	/**
	 * [tJavaRow_10 finally ] start
	 */

	

	
	
	currentComponent="tJavaRow_10";
	
	

 



/**
 * [tJavaRow_10 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileInputXML_1_SUBPROCESS_STATE", 1);
	}
	


public void tOracleConnection_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleConnection_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tOracleConnection_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleConnection_2", false);
		start_Hash.put("tOracleConnection_2", System.currentTimeMillis());
		
	
	currentComponent="tOracleConnection_2";
	
	
		int tos_count_tOracleConnection_2 = 0;
		
	

	
        String url_tOracleConnection_2 = "jdbc:oracle:thin:@(description=(address=(protocol=tcp)(host=" + context.oracle_Host + ")(port=" + context.oracle_Port + "))(connect_data=(service_name=" + context.oracle_ServiceName + ")))";
    	globalMap.put("connectionType_" + "tOracleConnection_2", "ORACLE_SERVICE_NAME");
	String dbUser_tOracleConnection_2 = context.oracle_User;
	
	
		
	final String decryptedPassword_tOracleConnection_2 = context.oracle_Password; 
		String dbPwd_tOracleConnection_2 = decryptedPassword_tOracleConnection_2;
	
	
	java.sql.Connection conn_tOracleConnection_2 = null;
	
		
			String driverClass_tOracleConnection_2 = "oracle.jdbc.OracleDriver";
			java.lang.Class jdbcclazz_tOracleConnection_2 = java.lang.Class.forName(driverClass_tOracleConnection_2);
			globalMap.put("driverClass_tOracleConnection_2", driverClass_tOracleConnection_2);
		
			java.util.Properties atnParamsPrope_tOracleConnection_2 = new java.util.Properties();
			    atnParamsPrope_tOracleConnection_2.put("user",dbUser_tOracleConnection_2);
			    atnParamsPrope_tOracleConnection_2.put("password",dbPwd_tOracleConnection_2);
			if(context.oracle_AdditionalParams != null && !"\"\"".equals(context.oracle_AdditionalParams) && !"".equals(context.oracle_AdditionalParams)){
                atnParamsPrope_tOracleConnection_2.load(new java.io.ByteArrayInputStream(context.oracle_AdditionalParams.replace("&", "\n").getBytes()));
            }
         
			conn_tOracleConnection_2 = java.sql.DriverManager.getConnection(url_tOracleConnection_2, atnParamsPrope_tOracleConnection_2);

		globalMap.put("conn_tOracleConnection_2", conn_tOracleConnection_2);
	if (null != conn_tOracleConnection_2) {
		
			conn_tOracleConnection_2.setAutoCommit(true);
	}
        globalMap.put("host_" + "tOracleConnection_2",context.oracle_Host);
        globalMap.put("port_" + "tOracleConnection_2",context.oracle_Port);
        globalMap.put("dbname_" + "tOracleConnection_2",context.oracle_ServiceName);

	globalMap.put("dbschema_" + "tOracleConnection_2", context.oracle_Schema);
	globalMap.put("username_" + "tOracleConnection_2",context.oracle_User);
	globalMap.put("password_" + "tOracleConnection_2",dbPwd_tOracleConnection_2);

 



/**
 * [tOracleConnection_2 begin ] stop
 */
	
	/**
	 * [tOracleConnection_2 main ] start
	 */

	

	
	
	currentComponent="tOracleConnection_2";
	
	

 


	tos_count_tOracleConnection_2++;

/**
 * [tOracleConnection_2 main ] stop
 */
	
	/**
	 * [tOracleConnection_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleConnection_2";
	
	

 



/**
 * [tOracleConnection_2 process_data_begin ] stop
 */
	
	/**
	 * [tOracleConnection_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleConnection_2";
	
	

 



/**
 * [tOracleConnection_2 process_data_end ] stop
 */
	
	/**
	 * [tOracleConnection_2 end ] start
	 */

	

	
	
	currentComponent="tOracleConnection_2";
	
	

 

ok_Hash.put("tOracleConnection_2", true);
end_Hash.put("tOracleConnection_2", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk21", 0, "ok");
				}
				tJava_5Process(globalMap);
				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk22", 0, "ok");
				}
				tRunJob_1Process(globalMap);
				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk23", 0, "ok");
				}
				tOracleConnection_1Process(globalMap);



/**
 * [tOracleConnection_2 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleConnection_2 finally ] start
	 */

	

	
	
	currentComponent="tOracleConnection_2";
	
	

 



/**
 * [tOracleConnection_2 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleConnection_2_SUBPROCESS_STATE", 1);
	}
	


public void tDie_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDie_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tDie_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDie_1", false);
		start_Hash.put("tDie_1", System.currentTimeMillis());
		
	
	currentComponent="tDie_1";
	
	
		int tos_count_tDie_1 = 0;
		

 



/**
 * [tDie_1 begin ] stop
 */
	
	/**
	 * [tDie_1 main ] start
	 */

	

	
	
	currentComponent="tDie_1";
	
	

	try {
	globalMap.put("tDie_1_DIE_PRIORITY", 5);
	System.err.println("the end is near");
	
	globalMap.put("tDie_1_DIE_MESSAGE", "the end is near");
	globalMap.put("tDie_1_DIE_MESSAGES", "the end is near");
	
	} catch (Exception | Error e_tDie_1) {
	    globalMap.put("tDie_1_ERROR_MESSAGE",e_tDie_1.getMessage());
		logIgnoredError(String.format("tDie_1 - tDie failed to log message due to internal error: %s", e_tDie_1), e_tDie_1);
	}
	
	currentComponent = "tDie_1";
	status = "failure";
    	errorCode = new Integer(4);
        ((java.util.Map)threadLocal.get()).put("errorCode", new Integer(4));
        ((java.util.Map)threadLocal.get()).put("status", "failure");
        globalMap.put("tDie_1_DIE_CODE", errorCode);

    
	if(true){	
		TDieException e_tDie_1 = new TDieException();

		

		throw e_tDie_1;
	}

 


	tos_count_tDie_1++;

/**
 * [tDie_1 main ] stop
 */
	
	/**
	 * [tDie_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDie_1";
	
	

 



/**
 * [tDie_1 process_data_begin ] stop
 */
	
	/**
	 * [tDie_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDie_1";
	
	

 



/**
 * [tDie_1 process_data_end ] stop
 */
	
	/**
	 * [tDie_1 end ] start
	 */

	

	
	
	currentComponent="tDie_1";
	
	

 

ok_Hash.put("tDie_1", true);
end_Hash.put("tDie_1", System.currentTimeMillis());




/**
 * [tDie_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDie_1 finally ] start
	 */

	

	
	
	currentComponent="tDie_1";
	
	

 



/**
 * [tDie_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDie_1_SUBPROCESS_STATE", 1);
	}
	


public void tJava_5Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_5_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tJava_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_5", false);
		start_Hash.put("tJava_5", System.currentTimeMillis());
		
	
	currentComponent="tJava_5";
	
	
		int tos_count_tJava_5 = 0;
		


//****************************************************************************************//
System.out.println(TalendDate.getCurrentDate()+" : Conexión realizada correctamente.");
System.out.println("*** PREJOB FINALIZADO ETL PRINCIPAL ****************************************************");
//****************************************************************************************//


 



/**
 * [tJava_5 begin ] stop
 */
	
	/**
	 * [tJava_5 main ] start
	 */

	

	
	
	currentComponent="tJava_5";
	
	

 


	tos_count_tJava_5++;

/**
 * [tJava_5 main ] stop
 */
	
	/**
	 * [tJava_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_5";
	
	

 



/**
 * [tJava_5 process_data_begin ] stop
 */
	
	/**
	 * [tJava_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_5";
	
	

 



/**
 * [tJava_5 process_data_end ] stop
 */
	
	/**
	 * [tJava_5 end ] start
	 */

	

	
	
	currentComponent="tJava_5";
	
	

 

ok_Hash.put("tJava_5", true);
end_Hash.put("tJava_5", System.currentTimeMillis());




/**
 * [tJava_5 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_5 finally ] start
	 */

	

	
	
	currentComponent="tJava_5";
	
	

 



/**
 * [tJava_5 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_5_SUBPROCESS_STATE", 1);
	}
	


public void tRunJob_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tRunJob_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tRunJob_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tRunJob_1", false);
		start_Hash.put("tRunJob_1", System.currentTimeMillis());
		
	
	currentComponent="tRunJob_1";
	
	
		int tos_count_tRunJob_1 = 0;
		


 



/**
 * [tRunJob_1 begin ] stop
 */
	
	/**
	 * [tRunJob_1 main ] start
	 */

	

	
	
	currentComponent="tRunJob_1";
	
	
	java.util.List<String> paraList_tRunJob_1 = new java.util.ArrayList<String>();
	
	        				paraList_tRunJob_1.add("--father_pid="+pid);
	      			
	        				paraList_tRunJob_1.add("--root_pid="+rootPid);
	      			
	        				paraList_tRunJob_1.add("--father_node=tRunJob_1");
	      			
	        				paraList_tRunJob_1.add("--context=Default");
	      			
		if(enableLogStash){
			paraList_tRunJob_1.add("--audit.enabled="+enableLogStash);
		}
		
	//for feature:10589
	
		paraList_tRunJob_1.add("--stat_port=" + portStats);
	

	if(resuming_logs_dir_path != null){
		paraList_tRunJob_1.add("--resuming_logs_dir_path=" + resuming_logs_dir_path);
	}
	String childResumePath_tRunJob_1 = ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path);
	String tRunJobName_tRunJob_1 = ResumeUtil.getRighttRunJob(resuming_checkpoint_path);
	if("tRunJob_1".equals(tRunJobName_tRunJob_1) && childResumePath_tRunJob_1 != null){
		paraList_tRunJob_1.add("--resuming_checkpoint_path=" + ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path));
	}
	paraList_tRunJob_1.add("--parent_part_launcher=JOB:" + jobName + "/NODE:tRunJob_1");
	
	java.util.Map<String, Object> parentContextMap_tRunJob_1 = new java.util.HashMap<String, Object>();

	

	Object obj_tRunJob_1 = null;

	
		obj_tRunJob_1 = context.oracle_Host;
		if(obj_tRunJob_1!=null) {
			if (obj_tRunJob_1.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_1.add("--context_param oracle_Host=" + ((java.util.Date) obj_tRunJob_1).getTime());
			} else {
				
					paraList_tRunJob_1.add("--context_param oracle_Host=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_1));
					
				
			}
		} else {
			paraList_tRunJob_1.add("--context_param oracle_Host=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_1.put("oracle_Host", obj_tRunJob_1);
	
		obj_tRunJob_1 = context.oracle_Port;
		if(obj_tRunJob_1!=null) {
			if (obj_tRunJob_1.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_1.add("--context_param oracle_Port=" + ((java.util.Date) obj_tRunJob_1).getTime());
			} else {
				
					paraList_tRunJob_1.add("--context_param oracle_Port=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_1));
					
				
			}
		} else {
			paraList_tRunJob_1.add("--context_param oracle_Port=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_1.put("oracle_Port", obj_tRunJob_1);
	
		obj_tRunJob_1 = context.oracle_Sid;
		if(obj_tRunJob_1!=null) {
			if (obj_tRunJob_1.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_1.add("--context_param oracle_Sid=" + ((java.util.Date) obj_tRunJob_1).getTime());
			} else {
				
					paraList_tRunJob_1.add("--context_param oracle_Sid=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_1));
					
				
			}
		} else {
			paraList_tRunJob_1.add("--context_param oracle_Sid=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_1.put("oracle_Sid", obj_tRunJob_1);
	
		obj_tRunJob_1 = context.oracle_ServiceName;
		if(obj_tRunJob_1!=null) {
			if (obj_tRunJob_1.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_1.add("--context_param oracle_ServiceName=" + ((java.util.Date) obj_tRunJob_1).getTime());
			} else {
				
					paraList_tRunJob_1.add("--context_param oracle_ServiceName=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_1));
					
				
			}
		} else {
			paraList_tRunJob_1.add("--context_param oracle_ServiceName=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_1.put("oracle_ServiceName", obj_tRunJob_1);
	
		obj_tRunJob_1 = context.oracle_Schema;
		if(obj_tRunJob_1!=null) {
			if (obj_tRunJob_1.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_1.add("--context_param oracle_Schema=" + ((java.util.Date) obj_tRunJob_1).getTime());
			} else {
				
					paraList_tRunJob_1.add("--context_param oracle_Schema=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_1));
					
				
			}
		} else {
			paraList_tRunJob_1.add("--context_param oracle_Schema=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_1.put("oracle_Schema", obj_tRunJob_1);
	
		obj_tRunJob_1 = context.oracle_User;
		if(obj_tRunJob_1!=null) {
			if (obj_tRunJob_1.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_1.add("--context_param oracle_User=" + ((java.util.Date) obj_tRunJob_1).getTime());
			} else {
				
					paraList_tRunJob_1.add("--context_param oracle_User=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_1));
					
				
			}
		} else {
			paraList_tRunJob_1.add("--context_param oracle_User=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_1.put("oracle_User", obj_tRunJob_1);
	
		obj_tRunJob_1 = context.oracle_Password;
		if(obj_tRunJob_1!=null) {
			if (obj_tRunJob_1.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_1.add("--context_param oracle_Password=" + ((java.util.Date) obj_tRunJob_1).getTime());
			} else {
				
					paraList_tRunJob_1.add("--context_param oracle_Password=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_1));
					
				
			}
		} else {
			paraList_tRunJob_1.add("--context_param oracle_Password=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_1.put("oracle_Password", obj_tRunJob_1);
	
	
		afi_principal.desactivararchivos_0_1.DesactivarArchivos childJob_tRunJob_1 = new afi_principal.desactivararchivos_0_1.DesactivarArchivos();
	    // pass DataSources
	    java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_1 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
	            .get(KEY_DB_DATASOURCES);
	    if (null != talendDataSources_tRunJob_1) {
	        java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_1 = new java.util.HashMap<String, javax.sql.DataSource>();
	        for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_1 : talendDataSources_tRunJob_1
			        .entrySet()) {
	            dataSources_tRunJob_1.put(talendDataSourceEntry_tRunJob_1.getKey(),
	                    talendDataSourceEntry_tRunJob_1.getValue().getRawDataSource());
	        }
	        childJob_tRunJob_1.setDataSources(dataSources_tRunJob_1);
	    }
		  
			childJob_tRunJob_1.parentContextMap = parentContextMap_tRunJob_1;
		  
		
		String[][] childReturn_tRunJob_1 = childJob_tRunJob_1.runJob((String[]) paraList_tRunJob_1.toArray(new String[paraList_tRunJob_1.size()]));
		
            if(childJob_tRunJob_1.getErrorCode() == null){
                globalMap.put("tRunJob_1_CHILD_RETURN_CODE", childJob_tRunJob_1.getStatus() != null && ("failure").equals(childJob_tRunJob_1.getStatus()) ? 1 : 0);
            }else{
                globalMap.put("tRunJob_1_CHILD_RETURN_CODE", childJob_tRunJob_1.getErrorCode());
            }
            if (childJob_tRunJob_1.getExceptionStackTrace() != null) {
                globalMap.put("tRunJob_1_CHILD_EXCEPTION_STACKTRACE", childJob_tRunJob_1.getExceptionStackTrace());
            }
                    ((java.util.Map)threadLocal.get()).put("errorCode", childJob_tRunJob_1.getErrorCode());
                if (childJob_tRunJob_1.getErrorCode() != null || ("failure").equals(childJob_tRunJob_1.getStatus())) {
                    java.lang.Exception ce_tRunJob_1 = childJob_tRunJob_1.getException();
                    throw new RuntimeException("Child job running failed.\n" + ((ce_tRunJob_1!=null) ? (ce_tRunJob_1.getClass().getName() + ": " + ce_tRunJob_1.getMessage()) : ""));
                }

 


	tos_count_tRunJob_1++;

/**
 * [tRunJob_1 main ] stop
 */
	
	/**
	 * [tRunJob_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tRunJob_1";
	
	

 



/**
 * [tRunJob_1 process_data_begin ] stop
 */
	
	/**
	 * [tRunJob_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tRunJob_1";
	
	

 



/**
 * [tRunJob_1 process_data_end ] stop
 */
	
	/**
	 * [tRunJob_1 end ] start
	 */

	

	
	
	currentComponent="tRunJob_1";
	
	

 

ok_Hash.put("tRunJob_1", true);
end_Hash.put("tRunJob_1", System.currentTimeMillis());




/**
 * [tRunJob_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tRunJob_1 finally ] start
	 */

	

	
	
	currentComponent="tRunJob_1";
	
	
	
 



/**
 * [tRunJob_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tRunJob_1_SUBPROCESS_STATE", 1);
	}
	


public void tOracleConnection_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleConnection_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tOracleConnection_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleConnection_1", false);
		start_Hash.put("tOracleConnection_1", System.currentTimeMillis());
		
	
	currentComponent="tOracleConnection_1";
	
	
		int tos_count_tOracleConnection_1 = 0;
		
	

	
        String url_tOracleConnection_1 = "jdbc:oracle:thin:@(description=(address=(protocol=tcp)(host=" + context.oracle_Host + ")(port=" + context.oracle_Port + "))(connect_data=(service_name=" + context.oracle_ServiceName + ")))";
    	globalMap.put("connectionType_" + "tOracleConnection_1", "ORACLE_SERVICE_NAME");
	String dbUser_tOracleConnection_1 = context.oracle_User;
	
	
		
	final String decryptedPassword_tOracleConnection_1 = context.oracle_Password; 
		String dbPwd_tOracleConnection_1 = decryptedPassword_tOracleConnection_1;
	
	
	java.sql.Connection conn_tOracleConnection_1 = null;
	
		
			String driverClass_tOracleConnection_1 = "oracle.jdbc.OracleDriver";
			java.lang.Class jdbcclazz_tOracleConnection_1 = java.lang.Class.forName(driverClass_tOracleConnection_1);
			globalMap.put("driverClass_tOracleConnection_1", driverClass_tOracleConnection_1);
		
			java.util.Properties atnParamsPrope_tOracleConnection_1 = new java.util.Properties();
			    atnParamsPrope_tOracleConnection_1.put("user",dbUser_tOracleConnection_1);
			    atnParamsPrope_tOracleConnection_1.put("password",dbPwd_tOracleConnection_1);
			if(context.oracle_AdditionalParams != null && !"\"\"".equals(context.oracle_AdditionalParams) && !"".equals(context.oracle_AdditionalParams)){
                atnParamsPrope_tOracleConnection_1.load(new java.io.ByteArrayInputStream(context.oracle_AdditionalParams.replace("&", "\n").getBytes()));
            }
         
			conn_tOracleConnection_1 = java.sql.DriverManager.getConnection(url_tOracleConnection_1, atnParamsPrope_tOracleConnection_1);

		globalMap.put("conn_tOracleConnection_1", conn_tOracleConnection_1);
	if (null != conn_tOracleConnection_1) {
		
			conn_tOracleConnection_1.setAutoCommit(true);
	}
        globalMap.put("host_" + "tOracleConnection_1",context.oracle_Host);
        globalMap.put("port_" + "tOracleConnection_1",context.oracle_Port);
        globalMap.put("dbname_" + "tOracleConnection_1",context.oracle_ServiceName);

	globalMap.put("dbschema_" + "tOracleConnection_1", context.oracle_Schema);
	globalMap.put("username_" + "tOracleConnection_1",context.oracle_User);
	globalMap.put("password_" + "tOracleConnection_1",dbPwd_tOracleConnection_1);

 



/**
 * [tOracleConnection_1 begin ] stop
 */
	
	/**
	 * [tOracleConnection_1 main ] start
	 */

	

	
	
	currentComponent="tOracleConnection_1";
	
	

 


	tos_count_tOracleConnection_1++;

/**
 * [tOracleConnection_1 main ] stop
 */
	
	/**
	 * [tOracleConnection_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleConnection_1";
	
	

 



/**
 * [tOracleConnection_1 process_data_begin ] stop
 */
	
	/**
	 * [tOracleConnection_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleConnection_1";
	
	

 



/**
 * [tOracleConnection_1 process_data_end ] stop
 */
	
	/**
	 * [tOracleConnection_1 end ] start
	 */

	

	
	
	currentComponent="tOracleConnection_1";
	
	

 

ok_Hash.put("tOracleConnection_1", true);
end_Hash.put("tOracleConnection_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk32", 0, "ok");
				}
				tJava_8Process(globalMap);



/**
 * [tOracleConnection_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleConnection_1 finally ] start
	 */

	

	
	
	currentComponent="tOracleConnection_1";
	
	

 



/**
 * [tOracleConnection_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleConnection_1_SUBPROCESS_STATE", 1);
	}
	


public void tDie_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDie_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tDie_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tDie_2", false);
		start_Hash.put("tDie_2", System.currentTimeMillis());
		
	
	currentComponent="tDie_2";
	
	
		int tos_count_tDie_2 = 0;
		

 



/**
 * [tDie_2 begin ] stop
 */
	
	/**
	 * [tDie_2 main ] start
	 */

	

	
	
	currentComponent="tDie_2";
	
	

	try {
	globalMap.put("tDie_2_DIE_PRIORITY", 5);
	System.err.println("Error en conexión");
	
	globalMap.put("tDie_2_DIE_MESSAGE", "Error en conexión");
	globalMap.put("tDie_2_DIE_MESSAGES", "Error en conexión");
	
	} catch (Exception | Error e_tDie_2) {
	    globalMap.put("tDie_2_ERROR_MESSAGE",e_tDie_2.getMessage());
		logIgnoredError(String.format("tDie_2 - tDie failed to log message due to internal error: %s", e_tDie_2), e_tDie_2);
	}
	
	currentComponent = "tDie_2";
	status = "failure";
    	errorCode = new Integer(1);
        ((java.util.Map)threadLocal.get()).put("errorCode", new Integer(1));
        ((java.util.Map)threadLocal.get()).put("status", "failure");
        globalMap.put("tDie_2_DIE_CODE", errorCode);

    
	if(true){	
		TDieException e_tDie_2 = new TDieException();

		

		throw e_tDie_2;
	}

 


	tos_count_tDie_2++;

/**
 * [tDie_2 main ] stop
 */
	
	/**
	 * [tDie_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDie_2";
	
	

 



/**
 * [tDie_2 process_data_begin ] stop
 */
	
	/**
	 * [tDie_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tDie_2";
	
	

 



/**
 * [tDie_2 process_data_end ] stop
 */
	
	/**
	 * [tDie_2 end ] start
	 */

	

	
	
	currentComponent="tDie_2";
	
	

 

ok_Hash.put("tDie_2", true);
end_Hash.put("tDie_2", System.currentTimeMillis());




/**
 * [tDie_2 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDie_2 finally ] start
	 */

	

	
	
	currentComponent="tDie_2";
	
	

 



/**
 * [tDie_2 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDie_2_SUBPROCESS_STATE", 1);
	}
	


public void tJava_8Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_8_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tJava_8 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_8", false);
		start_Hash.put("tJava_8", System.currentTimeMillis());
		
	
	currentComponent="tJava_8";
	
	
		int tos_count_tJava_8 = 0;
		


//****************************************************************************************//
System.out.println("*** PREJOB FINALIZADO COMPENDIO DE SALUD ***********************************************");
//****************************************************************************************//

//****************************************************************************************//
//*** PRUEBAS ESTO HAY QUE ELIMINARLO ****************************************************//
//****************************************************************************************//
/*context.fileSystem_Path="C:\\Users\\icnovaro\\Desktop\\AFI_FOREVER\\SaludSis\\App_Data\\Storage";
context.fileSystem_Area="AFI";
context.idProceso=1989;
context.infoIdArchivo=1383;
context.infoUsuarioIdArchivo=64;*/
//****************************************************************************************//

//****************************************************************************************//
//*** INICIALIZACIÓN VARIABLES DEL JOB ***************************************************//
//****************************************************************************************//
context.archivoSalida=GenerarUuid.createUUID()  + ".csv";

//****************************************************************************************//
System.out.println("USUARIO ARCHIVO: "+context.infoUsuarioIdArchivo);
System.out.println("ID PROCESO: "+context.idProceso);
System.out.println("ID ARCHIVO: "+context.infoIdArchivo);
//****************************************************************************************//
 



/**
 * [tJava_8 begin ] stop
 */
	
	/**
	 * [tJava_8 main ] start
	 */

	

	
	
	currentComponent="tJava_8";
	
	

 


	tos_count_tJava_8++;

/**
 * [tJava_8 main ] stop
 */
	
	/**
	 * [tJava_8 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_8";
	
	

 



/**
 * [tJava_8 process_data_begin ] stop
 */
	
	/**
	 * [tJava_8 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_8";
	
	

 



/**
 * [tJava_8 process_data_end ] stop
 */
	
	/**
	 * [tJava_8 end ] start
	 */

	

	
	
	currentComponent="tJava_8";
	
	

 

ok_Hash.put("tJava_8", true);
end_Hash.put("tJava_8", System.currentTimeMillis());




/**
 * [tJava_8 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_8 finally ] start
	 */

	

	
	
	currentComponent="tJava_8";
	
	

 



/**
 * [tJava_8 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_8_SUBPROCESS_STATE", 1);
	}
	


public void tJava_4Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_4_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tJava_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_4", false);
		start_Hash.put("tJava_4", System.currentTimeMillis());
		
	
	currentComponent="tJava_4";
	
	
		int tos_count_tJava_4 = 0;
		


//****************************************************************************************//
System.out.println(TalendDate.getCurrentDate()+" : Archivo de configuración no encontrado.");
//****************************************************************************************//





 



/**
 * [tJava_4 begin ] stop
 */
	
	/**
	 * [tJava_4 main ] start
	 */

	

	
	
	currentComponent="tJava_4";
	
	

 


	tos_count_tJava_4++;

/**
 * [tJava_4 main ] stop
 */
	
	/**
	 * [tJava_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_4";
	
	

 



/**
 * [tJava_4 process_data_begin ] stop
 */
	
	/**
	 * [tJava_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_4";
	
	

 



/**
 * [tJava_4 process_data_end ] stop
 */
	
	/**
	 * [tJava_4 end ] start
	 */

	

	
	
	currentComponent="tJava_4";
	
	

 

ok_Hash.put("tJava_4", true);
end_Hash.put("tJava_4", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk20", 0, "ok");
				}
				tDie_1Process(globalMap);



/**
 * [tJava_4 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_4 finally ] start
	 */

	

	
	
	currentComponent="tJava_4";
	
	

 



/**
 * [tJava_4 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_4_SUBPROCESS_STATE", 1);
	}
	
    public String resuming_logs_dir_path = null;
    public String resuming_checkpoint_path = null;
    public String parent_part_launcher = null;
    private String resumeEntryMethodName = null;
    private boolean globalResumeTicket = false;

    public boolean watch = false;
    // portStats is null, it means don't execute the statistics
    public Integer portStats = null;
    public int portTraces = 4334;
    public String clientHost;
    public String defaultClientHost = "localhost";
    public String contextStr = "Default";
    public boolean isDefaultContext = true;
    public String pid = "0";
    public String rootPid = null;
    public String fatherPid = null;
    public String fatherNode = null;
    public long startTime = 0;
    public boolean isChildJob = false;
    public String log4jLevel = "";
    
    private boolean enableLogStash;

    private boolean execStat = true;

    private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
        protected java.util.Map<String, String> initialValue() {
            java.util.Map<String,String> threadRunResultMap = new java.util.HashMap<String, String>();
            threadRunResultMap.put("errorCode", null);
            threadRunResultMap.put("status", "");
            return threadRunResultMap;
        };
    };

    private SyncInt runningThreadCount =new SyncInt();

    private class SyncInt
    {
        private int count = 0;
        public synchronized void add(int i)
        {
            count +=i;
        }

        public synchronized int getCount()
        {
            return count;
        }
    }

    protected PropertiesWithType context_param = new PropertiesWithType();
    public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

    public String status= "";
    
    
    private final static java.util.Properties jobInfo = new java.util.Properties();
    private final static java.util.Map<String,String> mdcInfo = new java.util.HashMap<>();
    private final static java.util.concurrent.atomic.AtomicLong subJobPidCounter = new java.util.concurrent.atomic.AtomicLong();


    public static void main(String[] args){
        final Consolidado_Salud Consolidado_SaludClass = new Consolidado_Salud();

        int exitCode = Consolidado_SaludClass.runJobInTOS(args);

        System.exit(exitCode);
    }
	

	
	
	private void getjobInfo() {
		final String TEMPLATE_PATH = "src/main/templates/jobInfo_template.properties";
		final String BUILD_PATH = "../jobInfo.properties";
		final String path = this.getClass().getResource("").getPath();
		if(path.lastIndexOf("target") > 0) {
			final java.io.File templateFile = new java.io.File(
					path.substring(0, path.lastIndexOf("target")).concat(TEMPLATE_PATH));
			if (templateFile.exists()) {
				readJobInfo(templateFile);
				return;
			}
		}
			readJobInfo(new java.io.File(BUILD_PATH));
	}

    private void readJobInfo(java.io.File jobInfoFile){
	
        if(jobInfoFile.exists()) {
            try (java.io.InputStream is = new java.io.FileInputStream(jobInfoFile)) {
            	jobInfo.load(is);
            } catch (IOException e) {
            	 
                
            }
        }
    }


    public String[][] runJob(String[] args) {

        int exitCode = runJobInTOS(args);
        String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

        return bufferValue;
    }

    public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;
    	
        return hastBufferOutput;
    }

    public int runJobInTOS(String[] args) {
	   	// reset status
	   	status = "";
	   	
        String lastStr = "";
        for (String arg : args) {
            if (arg.equalsIgnoreCase("--context_param")) {
                lastStr = arg;
            } else if (lastStr.equals("")) {
                evalParam(arg);
            } else {
                evalParam(lastStr + " " + arg);
                lastStr = "";
            }
        }
        enableLogStash = "true".equalsIgnoreCase(System.getProperty("audit.enabled"));


		
		

        if(clientHost == null) {
            clientHost = defaultClientHost;
        }

        if(pid == null || "0".equals(pid)) {
            pid = TalendString.getAsciiRandomString(6);
        }


        if (rootPid==null) {
            rootPid = pid;
        }


        if (fatherPid==null) {
            fatherPid = pid;
        }else{
            isChildJob = true;
        }

        if (portStats != null) {
            // portStats = -1; //for testing
            if (portStats < 0 || portStats > 65535) {
                // issue:10869, the portStats is invalid, so this client socket can't open
                System.err.println("The statistics socket port " + portStats + " is invalid.");
                execStat = false;
            }
        } else {
            execStat = false;
        }
        boolean inOSGi = routines.system.BundleUtils.inOSGi();

        try {
            java.util.Dictionary<String, Object> jobProperties = null;
            if (inOSGi) {
                jobProperties = routines.system.BundleUtils.getJobProperties(jobName);
    
                if (jobProperties != null && jobProperties.get("context") != null) {
                    contextStr = (String)jobProperties.get("context");
                }
            }
            //call job/subjob with an existing context, like: --context=production. if without this parameter, there will use the default context instead.
            java.io.InputStream inContext = Consolidado_Salud.class.getClassLoader().getResourceAsStream("afi_principal/consolidado_salud_1_1/contexts/" + contextStr + ".properties");
            if (inContext == null) {
                inContext = Consolidado_Salud.class.getClassLoader().getResourceAsStream("config/contexts/" + contextStr + ".properties");
            }
            if (inContext != null) {
                try {
                    //defaultProps is in order to keep the original context value
                    if(context != null && context.isEmpty()) {
    	                defaultProps.load(inContext);
    	                if (inOSGi && jobProperties != null) {
                             java.util.Enumeration<String> keys = jobProperties.keys();
                             while (keys.hasMoreElements()) {
                                 String propKey = keys.nextElement();
                                 if (defaultProps.containsKey(propKey)) {
                                     defaultProps.put(propKey, (String) jobProperties.get(propKey));
                                 }
                             }
    	                }
    	                context = new ContextProperties(defaultProps);
                    }
                } finally {
                    inContext.close();
                }
            } else if (!isDefaultContext) {
                //print info and job continue to run, for case: context_param is not empty.
                System.err.println("Could not find the context " + contextStr);
            }
            
            if(!context_param.isEmpty()) {
                context.putAll(context_param);
				//set types for params from parentJobs
				for (Object key: context_param.keySet()){
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
            }
            class ContextProcessing {
                private void processContext_0() {
                        context.setContextType("oracle_AdditionalParams", "id_String");
                        if(context.getStringValue("oracle_AdditionalParams") == null) {
                            context.oracle_AdditionalParams = null;
                        } else {
                            context.oracle_AdditionalParams=(String) context.getProperty("oracle_AdditionalParams");
                        }
                        context.setContextType("oracle_ServiceName", "id_String");
                        if(context.getStringValue("oracle_ServiceName") == null) {
                            context.oracle_ServiceName = null;
                        } else {
                            context.oracle_ServiceName=(String) context.getProperty("oracle_ServiceName");
                        }
                        context.setContextType("oracle_Host", "id_String");
                        if(context.getStringValue("oracle_Host") == null) {
                            context.oracle_Host = null;
                        } else {
                            context.oracle_Host=(String) context.getProperty("oracle_Host");
                        }
                        context.setContextType("oracle_Schema", "id_String");
                        if(context.getStringValue("oracle_Schema") == null) {
                            context.oracle_Schema = null;
                        } else {
                            context.oracle_Schema=(String) context.getProperty("oracle_Schema");
                        }
                        context.setContextType("oracle_Password", "id_String");
                        if(context.getStringValue("oracle_Password") == null) {
                            context.oracle_Password = null;
                        } else {
                            context.oracle_Password=(String) context.getProperty("oracle_Password");
                        }
                        context.setContextType("oracle_User", "id_String");
                        if(context.getStringValue("oracle_User") == null) {
                            context.oracle_User = null;
                        } else {
                            context.oracle_User=(String) context.getProperty("oracle_User");
                        }
                        context.setContextType("oracle_Port", "id_String");
                        if(context.getStringValue("oracle_Port") == null) {
                            context.oracle_Port = null;
                        } else {
                            context.oracle_Port=(String) context.getProperty("oracle_Port");
                        }
                        context.setContextType("oracle_Sid", "id_String");
                        if(context.getStringValue("oracle_Sid") == null) {
                            context.oracle_Sid = null;
                        } else {
                            context.oracle_Sid=(String) context.getProperty("oracle_Sid");
                        }
                        context.setContextType("fileSystem_Path", "id_String");
                        if(context.getStringValue("fileSystem_Path") == null) {
                            context.fileSystem_Path = null;
                        } else {
                            context.fileSystem_Path=(String) context.getProperty("fileSystem_Path");
                        }
                        context.setContextType("fileSystem_Area", "id_String");
                        if(context.getStringValue("fileSystem_Area") == null) {
                            context.fileSystem_Area = null;
                        } else {
                            context.fileSystem_Area=(String) context.getProperty("fileSystem_Area");
                        }
                        context.setContextType("infoNombreArchivo", "id_String");
                        if(context.getStringValue("infoNombreArchivo") == null) {
                            context.infoNombreArchivo = null;
                        } else {
                            context.infoNombreArchivo=(String) context.getProperty("infoNombreArchivo");
                        }
                        context.setContextType("infoUsuarioIdArchivo", "id_Integer");
                        if(context.getStringValue("infoUsuarioIdArchivo") == null) {
                            context.infoUsuarioIdArchivo = null;
                        } else {
                            try{
                                context.infoUsuarioIdArchivo=routines.system.ParserUtils.parseTo_Integer (context.getProperty("infoUsuarioIdArchivo"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "infoUsuarioIdArchivo", e.getMessage()));
                                context.infoUsuarioIdArchivo=null;
                            }
                        }
                        context.setContextType("infoIdArchivo", "id_Integer");
                        if(context.getStringValue("infoIdArchivo") == null) {
                            context.infoIdArchivo = null;
                        } else {
                            try{
                                context.infoIdArchivo=routines.system.ParserUtils.parseTo_Integer (context.getProperty("infoIdArchivo"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "infoIdArchivo", e.getMessage()));
                                context.infoIdArchivo=null;
                            }
                        }
                        context.setContextType("infoTipoArchivo", "id_Integer");
                        if(context.getStringValue("infoTipoArchivo") == null) {
                            context.infoTipoArchivo = null;
                        } else {
                            try{
                                context.infoTipoArchivo=routines.system.ParserUtils.parseTo_Integer (context.getProperty("infoTipoArchivo"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "infoTipoArchivo", e.getMessage()));
                                context.infoTipoArchivo=null;
                            }
                        }
                        context.setContextType("tipoJobProceso", "id_Integer");
                        if(context.getStringValue("tipoJobProceso") == null) {
                            context.tipoJobProceso = null;
                        } else {
                            try{
                                context.tipoJobProceso=routines.system.ParserUtils.parseTo_Integer (context.getProperty("tipoJobProceso"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "tipoJobProceso", e.getMessage()));
                                context.tipoJobProceso=null;
                            }
                        }
                        context.setContextType("idProceso", "id_Integer");
                        if(context.getStringValue("idProceso") == null) {
                            context.idProceso = null;
                        } else {
                            try{
                                context.idProceso=routines.system.ParserUtils.parseTo_Integer (context.getProperty("idProceso"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "idProceso", e.getMessage()));
                                context.idProceso=null;
                            }
                        }
                        context.setContextType("tipoProceso", "id_Integer");
                        if(context.getStringValue("tipoProceso") == null) {
                            context.tipoProceso = null;
                        } else {
                            try{
                                context.tipoProceso=routines.system.ParserUtils.parseTo_Integer (context.getProperty("tipoProceso"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "tipoProceso", e.getMessage()));
                                context.tipoProceso=null;
                            }
                        }
                        context.setContextType("descripcionProceso", "id_String");
                        if(context.getStringValue("descripcionProceso") == null) {
                            context.descripcionProceso = null;
                        } else {
                            context.descripcionProceso=(String) context.getProperty("descripcionProceso");
                        }
                        context.setContextType("auxAumentoRegistros", "id_Integer");
                        if(context.getStringValue("auxAumentoRegistros") == null) {
                            context.auxAumentoRegistros = null;
                        } else {
                            try{
                                context.auxAumentoRegistros=routines.system.ParserUtils.parseTo_Integer (context.getProperty("auxAumentoRegistros"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "auxAumentoRegistros", e.getMessage()));
                                context.auxAumentoRegistros=null;
                            }
                        }
                        context.setContextType("archivoConfiguracion", "id_String");
                        if(context.getStringValue("archivoConfiguracion") == null) {
                            context.archivoConfiguracion = null;
                        } else {
                            context.archivoConfiguracion=(String) context.getProperty("archivoConfiguracion");
                        }
                        context.setContextType("outCodigo", "id_Boolean");
                        if(context.getStringValue("outCodigo") == null) {
                            context.outCodigo = null;
                        } else {
                            try{
                                context.outCodigo=routines.system.ParserUtils.parseTo_Boolean (context.getProperty("outCodigo"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "outCodigo", e.getMessage()));
                                context.outCodigo=null;
                            }
                        }
                        context.setContextType("auxPosicionRegistros", "id_Integer");
                        if(context.getStringValue("auxPosicionRegistros") == null) {
                            context.auxPosicionRegistros = null;
                        } else {
                            try{
                                context.auxPosicionRegistros=routines.system.ParserUtils.parseTo_Integer (context.getProperty("auxPosicionRegistros"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "auxPosicionRegistros", e.getMessage()));
                                context.auxPosicionRegistros=null;
                            }
                        }
                        context.setContextType("archivoSalida", "id_String");
                        if(context.getStringValue("archivoSalida") == null) {
                            context.archivoSalida = null;
                        } else {
                            context.archivoSalida=(String) context.getProperty("archivoSalida");
                        }
                        context.setContextType("infoConteoRegistros", "id_Integer");
                        if(context.getStringValue("infoConteoRegistros") == null) {
                            context.infoConteoRegistros = null;
                        } else {
                            try{
                                context.infoConteoRegistros=routines.system.ParserUtils.parseTo_Integer (context.getProperty("infoConteoRegistros"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "infoConteoRegistros", e.getMessage()));
                                context.infoConteoRegistros=null;
                            }
                        }
                        context.setContextType("OPCION2", "id_String");
                        if(context.getStringValue("OPCION2") == null) {
                            context.OPCION2 = null;
                        } else {
                            context.OPCION2=(String) context.getProperty("OPCION2");
                        }
                        context.setContextType("AFILIADOS_ID", "id_Integer");
                        if(context.getStringValue("AFILIADOS_ID") == null) {
                            context.AFILIADOS_ID = null;
                        } else {
                            try{
                                context.AFILIADOS_ID=routines.system.ParserUtils.parseTo_Integer (context.getProperty("AFILIADOS_ID"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "AFILIADOS_ID", e.getMessage()));
                                context.AFILIADOS_ID=null;
                            }
                        }
                        context.setContextType("OPCION1", "id_String");
                        if(context.getStringValue("OPCION1") == null) {
                            context.OPCION1 = null;
                        } else {
                            context.OPCION1=(String) context.getProperty("OPCION1");
                        }
                        context.setContextType("TIPO_PREGUNTA_ID", "id_Integer");
                        if(context.getStringValue("TIPO_PREGUNTA_ID") == null) {
                            context.TIPO_PREGUNTA_ID = null;
                        } else {
                            try{
                                context.TIPO_PREGUNTA_ID=routines.system.ParserUtils.parseTo_Integer (context.getProperty("TIPO_PREGUNTA_ID"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "TIPO_PREGUNTA_ID", e.getMessage()));
                                context.TIPO_PREGUNTA_ID=null;
                            }
                        }
                        context.setContextType("PREGUNTAS_ID", "id_Integer");
                        if(context.getStringValue("PREGUNTAS_ID") == null) {
                            context.PREGUNTAS_ID = null;
                        } else {
                            try{
                                context.PREGUNTAS_ID=routines.system.ParserUtils.parseTo_Integer (context.getProperty("PREGUNTAS_ID"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "PREGUNTAS_ID", e.getMessage()));
                                context.PREGUNTAS_ID=null;
                            }
                        }
                        context.setContextType("RESPUESTA_ID", "id_Integer");
                        if(context.getStringValue("RESPUESTA_ID") == null) {
                            context.RESPUESTA_ID = null;
                        } else {
                            try{
                                context.RESPUESTA_ID=routines.system.ParserUtils.parseTo_Integer (context.getProperty("RESPUESTA_ID"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "RESPUESTA_ID", e.getMessage()));
                                context.RESPUESTA_ID=null;
                            }
                        }
                        context.setContextType("AuxOpcion2", "id_Integer");
                        if(context.getStringValue("AuxOpcion2") == null) {
                            context.AuxOpcion2 = null;
                        } else {
                            try{
                                context.AuxOpcion2=routines.system.ParserUtils.parseTo_Integer (context.getProperty("AuxOpcion2"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "AuxOpcion2", e.getMessage()));
                                context.AuxOpcion2=null;
                            }
                        }
                        context.setContextType("AuxValor", "id_String");
                        if(context.getStringValue("AuxValor") == null) {
                            context.AuxValor = null;
                        } else {
                            context.AuxValor=(String) context.getProperty("AuxValor");
                        }
                        context.setContextType("AuxOpcion1", "id_Integer");
                        if(context.getStringValue("AuxOpcion1") == null) {
                            context.AuxOpcion1 = null;
                        } else {
                            try{
                                context.AuxOpcion1=routines.system.ParserUtils.parseTo_Integer (context.getProperty("AuxOpcion1"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "AuxOpcion1", e.getMessage()));
                                context.AuxOpcion1=null;
                            }
                        }
                        context.setContextType("tipoArchivoMinSaludEtapa3MultiafiliacionGenerado", "id_Integer");
                        if(context.getStringValue("tipoArchivoMinSaludEtapa3MultiafiliacionGenerado") == null) {
                            context.tipoArchivoMinSaludEtapa3MultiafiliacionGenerado = null;
                        } else {
                            try{
                                context.tipoArchivoMinSaludEtapa3MultiafiliacionGenerado=routines.system.ParserUtils.parseTo_Integer (context.getProperty("tipoArchivoMinSaludEtapa3MultiafiliacionGenerado"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "tipoArchivoMinSaludEtapa3MultiafiliacionGenerado", e.getMessage()));
                                context.tipoArchivoMinSaludEtapa3MultiafiliacionGenerado=null;
                            }
                        }
                        context.setContextType("tipoArchivoMinSaludEtapa2NuevosRegistros", "id_Integer");
                        if(context.getStringValue("tipoArchivoMinSaludEtapa2NuevosRegistros") == null) {
                            context.tipoArchivoMinSaludEtapa2NuevosRegistros = null;
                        } else {
                            try{
                                context.tipoArchivoMinSaludEtapa2NuevosRegistros=routines.system.ParserUtils.parseTo_Integer (context.getProperty("tipoArchivoMinSaludEtapa2NuevosRegistros"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "tipoArchivoMinSaludEtapa2NuevosRegistros", e.getMessage()));
                                context.tipoArchivoMinSaludEtapa2NuevosRegistros=null;
                            }
                        }
                        context.setContextType("tipoArchivoEntesTerritoriales", "id_Integer");
                        if(context.getStringValue("tipoArchivoEntesTerritoriales") == null) {
                            context.tipoArchivoEntesTerritoriales = null;
                        } else {
                            try{
                                context.tipoArchivoEntesTerritoriales=routines.system.ParserUtils.parseTo_Integer (context.getProperty("tipoArchivoEntesTerritoriales"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "tipoArchivoEntesTerritoriales", e.getMessage()));
                                context.tipoArchivoEntesTerritoriales=null;
                            }
                        }
                        context.setContextType("tipoArchivoMinSaludEtapa2Novedades", "id_Integer");
                        if(context.getStringValue("tipoArchivoMinSaludEtapa2Novedades") == null) {
                            context.tipoArchivoMinSaludEtapa2Novedades = null;
                        } else {
                            try{
                                context.tipoArchivoMinSaludEtapa2Novedades=routines.system.ParserUtils.parseTo_Integer (context.getProperty("tipoArchivoMinSaludEtapa2Novedades"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "tipoArchivoMinSaludEtapa2Novedades", e.getMessage()));
                                context.tipoArchivoMinSaludEtapa2Novedades=null;
                            }
                        }
                        context.setContextType("tipoArchivoMinSaludEtapa2NovedadesGenerado", "id_Integer");
                        if(context.getStringValue("tipoArchivoMinSaludEtapa2NovedadesGenerado") == null) {
                            context.tipoArchivoMinSaludEtapa2NovedadesGenerado = null;
                        } else {
                            try{
                                context.tipoArchivoMinSaludEtapa2NovedadesGenerado=routines.system.ParserUtils.parseTo_Integer (context.getProperty("tipoArchivoMinSaludEtapa2NovedadesGenerado"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "tipoArchivoMinSaludEtapa2NovedadesGenerado", e.getMessage()));
                                context.tipoArchivoMinSaludEtapa2NovedadesGenerado=null;
                            }
                        }
                        context.setContextType("tipoArchivoMinSaludEtapa2NuevosRegistrosGenerado", "id_Integer");
                        if(context.getStringValue("tipoArchivoMinSaludEtapa2NuevosRegistrosGenerado") == null) {
                            context.tipoArchivoMinSaludEtapa2NuevosRegistrosGenerado = null;
                        } else {
                            try{
                                context.tipoArchivoMinSaludEtapa2NuevosRegistrosGenerado=routines.system.ParserUtils.parseTo_Integer (context.getProperty("tipoArchivoMinSaludEtapa2NuevosRegistrosGenerado"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "tipoArchivoMinSaludEtapa2NuevosRegistrosGenerado", e.getMessage()));
                                context.tipoArchivoMinSaludEtapa2NuevosRegistrosGenerado=null;
                            }
                        }
                        context.setContextType("tipoArchivoMinSaludEtapa3Multiafiliacion", "id_Integer");
                        if(context.getStringValue("tipoArchivoMinSaludEtapa3Multiafiliacion") == null) {
                            context.tipoArchivoMinSaludEtapa3Multiafiliacion = null;
                        } else {
                            try{
                                context.tipoArchivoMinSaludEtapa3Multiafiliacion=routines.system.ParserUtils.parseTo_Integer (context.getProperty("tipoArchivoMinSaludEtapa3Multiafiliacion"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "tipoArchivoMinSaludEtapa3Multiafiliacion", e.getMessage()));
                                context.tipoArchivoMinSaludEtapa3Multiafiliacion=null;
                            }
                        }
                        context.setContextType("tipoArchivoFedevidaGenerado", "id_Integer");
                        if(context.getStringValue("tipoArchivoFedevidaGenerado") == null) {
                            context.tipoArchivoFedevidaGenerado = null;
                        } else {
                            try{
                                context.tipoArchivoFedevidaGenerado=routines.system.ParserUtils.parseTo_Integer (context.getProperty("tipoArchivoFedevidaGenerado"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "tipoArchivoFedevidaGenerado", e.getMessage()));
                                context.tipoArchivoFedevidaGenerado=null;
                            }
                        }
                        context.setContextType("tipoArchivoEntesGenerado", "id_Integer");
                        if(context.getStringValue("tipoArchivoEntesGenerado") == null) {
                            context.tipoArchivoEntesGenerado = null;
                        } else {
                            try{
                                context.tipoArchivoEntesGenerado=routines.system.ParserUtils.parseTo_Integer (context.getProperty("tipoArchivoEntesGenerado"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "tipoArchivoEntesGenerado", e.getMessage()));
                                context.tipoArchivoEntesGenerado=null;
                            }
                        }
                        context.setContextType("tipoArchivoFedevida", "id_Integer");
                        if(context.getStringValue("tipoArchivoFedevida") == null) {
                            context.tipoArchivoFedevida = null;
                        } else {
                            try{
                                context.tipoArchivoFedevida=routines.system.ParserUtils.parseTo_Integer (context.getProperty("tipoArchivoFedevida"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "tipoArchivoFedevida", e.getMessage()));
                                context.tipoArchivoFedevida=null;
                            }
                        }
                        context.setContextType("tipoArchivoCompendioSalud", "id_Integer");
                        if(context.getStringValue("tipoArchivoCompendioSalud") == null) {
                            context.tipoArchivoCompendioSalud = null;
                        } else {
                            try{
                                context.tipoArchivoCompendioSalud=routines.system.ParserUtils.parseTo_Integer (context.getProperty("tipoArchivoCompendioSalud"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "tipoArchivoCompendioSalud", e.getMessage()));
                                context.tipoArchivoCompendioSalud=null;
                            }
                        }
                        context.setContextType("estArchivoErrorArchivo", "id_Integer");
                        if(context.getStringValue("estArchivoErrorArchivo") == null) {
                            context.estArchivoErrorArchivo = null;
                        } else {
                            try{
                                context.estArchivoErrorArchivo=routines.system.ParserUtils.parseTo_Integer (context.getProperty("estArchivoErrorArchivo"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "estArchivoErrorArchivo", e.getMessage()));
                                context.estArchivoErrorArchivo=null;
                            }
                        }
                        context.setContextType("estArchivoEnProceso", "id_Integer");
                        if(context.getStringValue("estArchivoEnProceso") == null) {
                            context.estArchivoEnProceso = null;
                        } else {
                            try{
                                context.estArchivoEnProceso=routines.system.ParserUtils.parseTo_Integer (context.getProperty("estArchivoEnProceso"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "estArchivoEnProceso", e.getMessage()));
                                context.estArchivoEnProceso=null;
                            }
                        }
                        context.setContextType("estArchivoErrorProcesamiento", "id_Integer");
                        if(context.getStringValue("estArchivoErrorProcesamiento") == null) {
                            context.estArchivoErrorProcesamiento = null;
                        } else {
                            try{
                                context.estArchivoErrorProcesamiento=routines.system.ParserUtils.parseTo_Integer (context.getProperty("estArchivoErrorProcesamiento"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "estArchivoErrorProcesamiento", e.getMessage()));
                                context.estArchivoErrorProcesamiento=null;
                            }
                        }
                        context.setContextType("estArchivoProcesado", "id_Integer");
                        if(context.getStringValue("estArchivoProcesado") == null) {
                            context.estArchivoProcesado = null;
                        } else {
                            try{
                                context.estArchivoProcesado=routines.system.ParserUtils.parseTo_Integer (context.getProperty("estArchivoProcesado"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "estArchivoProcesado", e.getMessage()));
                                context.estArchivoProcesado=null;
                            }
                        }
                        context.setContextType("estArchivoPausado", "id_Integer");
                        if(context.getStringValue("estArchivoPausado") == null) {
                            context.estArchivoPausado = null;
                        } else {
                            try{
                                context.estArchivoPausado=routines.system.ParserUtils.parseTo_Integer (context.getProperty("estArchivoPausado"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "estArchivoPausado", e.getMessage()));
                                context.estArchivoPausado=null;
                            }
                        }
                        context.setContextType("estArchivoInactivo", "id_Integer");
                        if(context.getStringValue("estArchivoInactivo") == null) {
                            context.estArchivoInactivo = null;
                        } else {
                            try{
                                context.estArchivoInactivo=routines.system.ParserUtils.parseTo_Integer (context.getProperty("estArchivoInactivo"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "estArchivoInactivo", e.getMessage()));
                                context.estArchivoInactivo=null;
                            }
                        }
                        context.setContextType("estArchivoCancelado", "id_Integer");
                        if(context.getStringValue("estArchivoCancelado") == null) {
                            context.estArchivoCancelado = null;
                        } else {
                            try{
                                context.estArchivoCancelado=routines.system.ParserUtils.parseTo_Integer (context.getProperty("estArchivoCancelado"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "estArchivoCancelado", e.getMessage()));
                                context.estArchivoCancelado=null;
                            }
                        }
                        context.setContextType("estArchivoActivo", "id_Integer");
                        if(context.getStringValue("estArchivoActivo") == null) {
                            context.estArchivoActivo = null;
                        } else {
                            try{
                                context.estArchivoActivo=routines.system.ParserUtils.parseTo_Integer (context.getProperty("estArchivoActivo"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "estArchivoActivo", e.getMessage()));
                                context.estArchivoActivo=null;
                            }
                        }
                        context.setContextType("AuxFechaFin", "id_String");
                        if(context.getStringValue("AuxFechaFin") == null) {
                            context.AuxFechaFin = null;
                        } else {
                            context.AuxFechaFin=(String) context.getProperty("AuxFechaFin");
                        }
                        context.setContextType("AuxFechaInicio", "id_String");
                        if(context.getStringValue("AuxFechaInicio") == null) {
                            context.AuxFechaInicio = null;
                        } else {
                            context.AuxFechaInicio=(String) context.getProperty("AuxFechaInicio");
                        }
                        context.setContextType("auxRango", "id_String");
                        if(context.getStringValue("auxRango") == null) {
                            context.auxRango = null;
                        } else {
                            context.auxRango=(String) context.getProperty("auxRango");
                        }
                        context.setContextType("auxAfiliadosCompendio", "id_String");
                        if(context.getStringValue("auxAfiliadosCompendio") == null) {
                            context.auxAfiliadosCompendio = null;
                        } else {
                            context.auxAfiliadosCompendio=(String) context.getProperty("auxAfiliadosCompendio");
                        }
                        context.setContextType("auxTotalRegistros", "id_Integer");
                        if(context.getStringValue("auxTotalRegistros") == null) {
                            context.auxTotalRegistros = null;
                        } else {
                            try{
                                context.auxTotalRegistros=routines.system.ParserUtils.parseTo_Integer (context.getProperty("auxTotalRegistros"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "auxTotalRegistros", e.getMessage()));
                                context.auxTotalRegistros=null;
                            }
                        }
                        context.setContextType("tipoArchivoCompendioSaludGenerado", "id_Integer");
                        if(context.getStringValue("tipoArchivoCompendioSaludGenerado") == null) {
                            context.tipoArchivoCompendioSaludGenerado = null;
                        } else {
                            try{
                                context.tipoArchivoCompendioSaludGenerado=routines.system.ParserUtils.parseTo_Integer (context.getProperty("tipoArchivoCompendioSaludGenerado"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "tipoArchivoCompendioSaludGenerado", e.getMessage()));
                                context.tipoArchivoCompendioSaludGenerado=null;
                            }
                        }
                        context.setContextType("mail_PasswordMail", "id_String");
                        if(context.getStringValue("mail_PasswordMail") == null) {
                            context.mail_PasswordMail = null;
                        } else {
                            context.mail_PasswordMail=(String) context.getProperty("mail_PasswordMail");
                        }
                        context.setContextType("mail_SMTPPort", "id_String");
                        if(context.getStringValue("mail_SMTPPort") == null) {
                            context.mail_SMTPPort = null;
                        } else {
                            context.mail_SMTPPort=(String) context.getProperty("mail_SMTPPort");
                        }
                        context.setContextType("mail_UsernameMail", "id_String");
                        if(context.getStringValue("mail_UsernameMail") == null) {
                            context.mail_UsernameMail = null;
                        } else {
                            context.mail_UsernameMail=(String) context.getProperty("mail_UsernameMail");
                        }
                        context.setContextType("mail_SMTPHost", "id_String");
                        if(context.getStringValue("mail_SMTPHost") == null) {
                            context.mail_SMTPHost = null;
                        } else {
                            context.mail_SMTPHost=(String) context.getProperty("mail_SMTPHost");
                        }
                } 
                public void processAllContext() {
                        processContext_0();
                }
            }

            new ContextProcessing().processAllContext();
        } catch (java.io.IOException ie) {
            System.err.println("Could not load context "+contextStr);
            ie.printStackTrace();
        }

        // get context value from parent directly
        if (parentContextMap != null && !parentContextMap.isEmpty()) {if (parentContextMap.containsKey("oracle_AdditionalParams")) {
                context.oracle_AdditionalParams = (String) parentContextMap.get("oracle_AdditionalParams");
            }if (parentContextMap.containsKey("oracle_ServiceName")) {
                context.oracle_ServiceName = (String) parentContextMap.get("oracle_ServiceName");
            }if (parentContextMap.containsKey("oracle_Host")) {
                context.oracle_Host = (String) parentContextMap.get("oracle_Host");
            }if (parentContextMap.containsKey("oracle_Schema")) {
                context.oracle_Schema = (String) parentContextMap.get("oracle_Schema");
            }if (parentContextMap.containsKey("oracle_Password")) {
                context.oracle_Password = (String) parentContextMap.get("oracle_Password");
            }if (parentContextMap.containsKey("oracle_User")) {
                context.oracle_User = (String) parentContextMap.get("oracle_User");
            }if (parentContextMap.containsKey("oracle_Port")) {
                context.oracle_Port = (String) parentContextMap.get("oracle_Port");
            }if (parentContextMap.containsKey("oracle_Sid")) {
                context.oracle_Sid = (String) parentContextMap.get("oracle_Sid");
            }if (parentContextMap.containsKey("fileSystem_Path")) {
                context.fileSystem_Path = (String) parentContextMap.get("fileSystem_Path");
            }if (parentContextMap.containsKey("fileSystem_Area")) {
                context.fileSystem_Area = (String) parentContextMap.get("fileSystem_Area");
            }if (parentContextMap.containsKey("infoNombreArchivo")) {
                context.infoNombreArchivo = (String) parentContextMap.get("infoNombreArchivo");
            }if (parentContextMap.containsKey("infoUsuarioIdArchivo")) {
                context.infoUsuarioIdArchivo = (Integer) parentContextMap.get("infoUsuarioIdArchivo");
            }if (parentContextMap.containsKey("infoIdArchivo")) {
                context.infoIdArchivo = (Integer) parentContextMap.get("infoIdArchivo");
            }if (parentContextMap.containsKey("infoTipoArchivo")) {
                context.infoTipoArchivo = (Integer) parentContextMap.get("infoTipoArchivo");
            }if (parentContextMap.containsKey("tipoJobProceso")) {
                context.tipoJobProceso = (Integer) parentContextMap.get("tipoJobProceso");
            }if (parentContextMap.containsKey("idProceso")) {
                context.idProceso = (Integer) parentContextMap.get("idProceso");
            }if (parentContextMap.containsKey("tipoProceso")) {
                context.tipoProceso = (Integer) parentContextMap.get("tipoProceso");
            }if (parentContextMap.containsKey("descripcionProceso")) {
                context.descripcionProceso = (String) parentContextMap.get("descripcionProceso");
            }if (parentContextMap.containsKey("auxAumentoRegistros")) {
                context.auxAumentoRegistros = (Integer) parentContextMap.get("auxAumentoRegistros");
            }if (parentContextMap.containsKey("archivoConfiguracion")) {
                context.archivoConfiguracion = (String) parentContextMap.get("archivoConfiguracion");
            }if (parentContextMap.containsKey("outCodigo")) {
                context.outCodigo = (Boolean) parentContextMap.get("outCodigo");
            }if (parentContextMap.containsKey("auxPosicionRegistros")) {
                context.auxPosicionRegistros = (Integer) parentContextMap.get("auxPosicionRegistros");
            }if (parentContextMap.containsKey("archivoSalida")) {
                context.archivoSalida = (String) parentContextMap.get("archivoSalida");
            }if (parentContextMap.containsKey("infoConteoRegistros")) {
                context.infoConteoRegistros = (Integer) parentContextMap.get("infoConteoRegistros");
            }if (parentContextMap.containsKey("OPCION2")) {
                context.OPCION2 = (String) parentContextMap.get("OPCION2");
            }if (parentContextMap.containsKey("AFILIADOS_ID")) {
                context.AFILIADOS_ID = (Integer) parentContextMap.get("AFILIADOS_ID");
            }if (parentContextMap.containsKey("OPCION1")) {
                context.OPCION1 = (String) parentContextMap.get("OPCION1");
            }if (parentContextMap.containsKey("TIPO_PREGUNTA_ID")) {
                context.TIPO_PREGUNTA_ID = (Integer) parentContextMap.get("TIPO_PREGUNTA_ID");
            }if (parentContextMap.containsKey("PREGUNTAS_ID")) {
                context.PREGUNTAS_ID = (Integer) parentContextMap.get("PREGUNTAS_ID");
            }if (parentContextMap.containsKey("RESPUESTA_ID")) {
                context.RESPUESTA_ID = (Integer) parentContextMap.get("RESPUESTA_ID");
            }if (parentContextMap.containsKey("AuxOpcion2")) {
                context.AuxOpcion2 = (Integer) parentContextMap.get("AuxOpcion2");
            }if (parentContextMap.containsKey("AuxValor")) {
                context.AuxValor = (String) parentContextMap.get("AuxValor");
            }if (parentContextMap.containsKey("AuxOpcion1")) {
                context.AuxOpcion1 = (Integer) parentContextMap.get("AuxOpcion1");
            }if (parentContextMap.containsKey("tipoArchivoMinSaludEtapa3MultiafiliacionGenerado")) {
                context.tipoArchivoMinSaludEtapa3MultiafiliacionGenerado = (Integer) parentContextMap.get("tipoArchivoMinSaludEtapa3MultiafiliacionGenerado");
            }if (parentContextMap.containsKey("tipoArchivoMinSaludEtapa2NuevosRegistros")) {
                context.tipoArchivoMinSaludEtapa2NuevosRegistros = (Integer) parentContextMap.get("tipoArchivoMinSaludEtapa2NuevosRegistros");
            }if (parentContextMap.containsKey("tipoArchivoEntesTerritoriales")) {
                context.tipoArchivoEntesTerritoriales = (Integer) parentContextMap.get("tipoArchivoEntesTerritoriales");
            }if (parentContextMap.containsKey("tipoArchivoMinSaludEtapa2Novedades")) {
                context.tipoArchivoMinSaludEtapa2Novedades = (Integer) parentContextMap.get("tipoArchivoMinSaludEtapa2Novedades");
            }if (parentContextMap.containsKey("tipoArchivoMinSaludEtapa2NovedadesGenerado")) {
                context.tipoArchivoMinSaludEtapa2NovedadesGenerado = (Integer) parentContextMap.get("tipoArchivoMinSaludEtapa2NovedadesGenerado");
            }if (parentContextMap.containsKey("tipoArchivoMinSaludEtapa2NuevosRegistrosGenerado")) {
                context.tipoArchivoMinSaludEtapa2NuevosRegistrosGenerado = (Integer) parentContextMap.get("tipoArchivoMinSaludEtapa2NuevosRegistrosGenerado");
            }if (parentContextMap.containsKey("tipoArchivoMinSaludEtapa3Multiafiliacion")) {
                context.tipoArchivoMinSaludEtapa3Multiafiliacion = (Integer) parentContextMap.get("tipoArchivoMinSaludEtapa3Multiafiliacion");
            }if (parentContextMap.containsKey("tipoArchivoFedevidaGenerado")) {
                context.tipoArchivoFedevidaGenerado = (Integer) parentContextMap.get("tipoArchivoFedevidaGenerado");
            }if (parentContextMap.containsKey("tipoArchivoEntesGenerado")) {
                context.tipoArchivoEntesGenerado = (Integer) parentContextMap.get("tipoArchivoEntesGenerado");
            }if (parentContextMap.containsKey("tipoArchivoFedevida")) {
                context.tipoArchivoFedevida = (Integer) parentContextMap.get("tipoArchivoFedevida");
            }if (parentContextMap.containsKey("tipoArchivoCompendioSalud")) {
                context.tipoArchivoCompendioSalud = (Integer) parentContextMap.get("tipoArchivoCompendioSalud");
            }if (parentContextMap.containsKey("estArchivoErrorArchivo")) {
                context.estArchivoErrorArchivo = (Integer) parentContextMap.get("estArchivoErrorArchivo");
            }if (parentContextMap.containsKey("estArchivoEnProceso")) {
                context.estArchivoEnProceso = (Integer) parentContextMap.get("estArchivoEnProceso");
            }if (parentContextMap.containsKey("estArchivoErrorProcesamiento")) {
                context.estArchivoErrorProcesamiento = (Integer) parentContextMap.get("estArchivoErrorProcesamiento");
            }if (parentContextMap.containsKey("estArchivoProcesado")) {
                context.estArchivoProcesado = (Integer) parentContextMap.get("estArchivoProcesado");
            }if (parentContextMap.containsKey("estArchivoPausado")) {
                context.estArchivoPausado = (Integer) parentContextMap.get("estArchivoPausado");
            }if (parentContextMap.containsKey("estArchivoInactivo")) {
                context.estArchivoInactivo = (Integer) parentContextMap.get("estArchivoInactivo");
            }if (parentContextMap.containsKey("estArchivoCancelado")) {
                context.estArchivoCancelado = (Integer) parentContextMap.get("estArchivoCancelado");
            }if (parentContextMap.containsKey("estArchivoActivo")) {
                context.estArchivoActivo = (Integer) parentContextMap.get("estArchivoActivo");
            }if (parentContextMap.containsKey("AuxFechaFin")) {
                context.AuxFechaFin = (String) parentContextMap.get("AuxFechaFin");
            }if (parentContextMap.containsKey("AuxFechaInicio")) {
                context.AuxFechaInicio = (String) parentContextMap.get("AuxFechaInicio");
            }if (parentContextMap.containsKey("auxRango")) {
                context.auxRango = (String) parentContextMap.get("auxRango");
            }if (parentContextMap.containsKey("auxAfiliadosCompendio")) {
                context.auxAfiliadosCompendio = (String) parentContextMap.get("auxAfiliadosCompendio");
            }if (parentContextMap.containsKey("auxTotalRegistros")) {
                context.auxTotalRegistros = (Integer) parentContextMap.get("auxTotalRegistros");
            }if (parentContextMap.containsKey("tipoArchivoCompendioSaludGenerado")) {
                context.tipoArchivoCompendioSaludGenerado = (Integer) parentContextMap.get("tipoArchivoCompendioSaludGenerado");
            }if (parentContextMap.containsKey("mail_PasswordMail")) {
                context.mail_PasswordMail = (String) parentContextMap.get("mail_PasswordMail");
            }if (parentContextMap.containsKey("mail_SMTPPort")) {
                context.mail_SMTPPort = (String) parentContextMap.get("mail_SMTPPort");
            }if (parentContextMap.containsKey("mail_UsernameMail")) {
                context.mail_UsernameMail = (String) parentContextMap.get("mail_UsernameMail");
            }if (parentContextMap.containsKey("mail_SMTPHost")) {
                context.mail_SMTPHost = (String) parentContextMap.get("mail_SMTPHost");
            }
        }

        //Resume: init the resumeUtil
        resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
        resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
        resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
        //Resume: jobStart
        resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","","","",resumeUtil.convertToJsonText(context,ContextProperties.class,parametersToEncrypt));


if(execStat) {
    try {
        runStat.openSocket(!isChildJob);
        runStat.setAllPID(rootPid, fatherPid, pid, jobName);
        runStat.startThreadStat(clientHost, portStats);
        runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
    } catch (java.io.IOException ioException) {
        ioException.printStackTrace();
    }
}



	
	    java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
	    globalMap.put("concurrentHashMap", concurrentHashMap);
	

    long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
    long endUsedMemory = 0;
    long end = 0;

    startTime = System.currentTimeMillis();


this.globalResumeTicket = true;//to run tPreJob

try {
errorCode = null;tPrejob_2Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tPrejob_2) {
globalMap.put("tPrejob_2_SUBPROCESS_STATE", -1);

e_tPrejob_2.printStackTrace();

}




this.globalResumeTicket = false;//to run others jobs
final Thread launchingThread = Thread.currentThread();
        runningThreadCount.add(1);
        new Thread(){
            public void run() {

                java.util.Map threadRunResultMap = new java.util.HashMap();
                threadRunResultMap.put("errorCode", null);
                threadRunResultMap.put("status", "");
                threadLocal.set(threadRunResultMap);

                try {
((java.util.Map) threadLocal.get()).put("errorCode", null);tOracleInput_19Process(globalMap);
if ( !"failure".equals(((java.util.Map)threadLocal.get()).get("status")) ) {
((java.util.Map) threadLocal.get()).put("status", "end");
}
}catch (TalendException e_tOracleInput_19) {
globalMap.put("tOracleInput_19_SUBPROCESS_STATE", -1);

e_tOracleInput_19.printStackTrace();

}catch (java.lang.Error e_tOracleInput_19) {
globalMap.put("tOracleInput_19_SUBPROCESS_STATE", -1);
((java.util.Map) threadLocal.get()).put("status", "failure");throw e_tOracleInput_19;

}
                finally {
                    Integer localErrorCode = (Integer)(((java.util.Map)threadLocal.get()).get("errorCode"));
                    String localStatus = (String)(((java.util.Map)threadLocal.get()).get("status"));
                    if (localErrorCode != null) {
                        if (errorCode == null || localErrorCode.compareTo(errorCode) > 0) {
                           errorCode = localErrorCode;
                        }
                    }
                    if (!status.equals("failure")){
                        status = localStatus;
                    }

                    if ("true".equals(((java.util.Map) threadLocal.get()).get("JobInterrupted"))) {
                        launchingThread.interrupt();
                    }

                    runningThreadCount.add(-1);
                }
            }
        }.start();

    boolean interrupted = false;
    while (runningThreadCount.getCount() > 0) {
        try {
            Thread.sleep(10);
        } catch (java.lang.InterruptedException e) {
            interrupted = true;
        } catch (java.lang.Exception e) {
            e.printStackTrace();
        }
    }

    if (interrupted) {
        Thread.currentThread().interrupt();
    }



this.globalResumeTicket = true;//to run tPostJob

try {
errorCode = null;tPostjob_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tPostjob_1) {
globalMap.put("tPostjob_1_SUBPROCESS_STATE", -1);

e_tPostjob_1.printStackTrace();

}



        end = System.currentTimeMillis();

        if (watch) {
            System.out.println((end-startTime)+" milliseconds");
        }

        endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
        if (false) {
            System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : Consolidado_Salud");
        }



if (execStat) {
    runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
    runStat.stopThreadStat();
}
    int returnCode = 0;

        Integer localErrorCode = (Integer)(((java.util.Map)threadLocal.get()).get("errorCode"));
        String localStatus = (String)(((java.util.Map)threadLocal.get()).get("status"));
        if (localErrorCode != null) {
            if (errorCode == null || localErrorCode.compareTo(errorCode) > 0) {
                   errorCode = localErrorCode;
            }
        }
        if (localStatus != null && !status.equals("failure")){
            status = localStatus;
        }

    if(errorCode == null) {
         returnCode = status != null && status.equals("failure") ? 1 : 0;
    } else {
         returnCode = errorCode.intValue();
    }
    resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","" + returnCode,"","","");
    resumeUtil.flush();


    return returnCode;

  }

    // only for OSGi env
    public void destroy() {
    closeSqlDbConnections();


    }



    private void closeSqlDbConnections() {
        try {
            Object obj_conn;
            obj_conn = globalMap.remove("conn_tOracleConnection_2");
            if (null != obj_conn) {
                ((java.sql.Connection) obj_conn).close();
            }
            obj_conn = globalMap.remove("conn_tOracleConnection_1");
            if (null != obj_conn) {
                ((java.sql.Connection) obj_conn).close();
            }
        } catch (java.lang.Exception e) {
        }
    }











    private java.util.Map<String, Object> getSharedConnections4REST() {
        java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();
            connections.put("conn_tOracleConnection_2", globalMap.get("conn_tOracleConnection_2"));
            connections.put("conn_tOracleConnection_1", globalMap.get("conn_tOracleConnection_1"));






        return connections;
    }

    private void evalParam(String arg) {
        if (arg.startsWith("--resuming_logs_dir_path")) {
            resuming_logs_dir_path = arg.substring(25);
        } else if (arg.startsWith("--resuming_checkpoint_path")) {
            resuming_checkpoint_path = arg.substring(27);
        } else if (arg.startsWith("--parent_part_launcher")) {
            parent_part_launcher = arg.substring(23);
        } else if (arg.startsWith("--watch")) {
            watch = true;
        } else if (arg.startsWith("--stat_port=")) {
            String portStatsStr = arg.substring(12);
            if (portStatsStr != null && !portStatsStr.equals("null")) {
                portStats = Integer.parseInt(portStatsStr);
            }
        } else if (arg.startsWith("--trace_port=")) {
            portTraces = Integer.parseInt(arg.substring(13));
        } else if (arg.startsWith("--client_host=")) {
            clientHost = arg.substring(14);
        } else if (arg.startsWith("--context=")) {
            contextStr = arg.substring(10);
            isDefaultContext = false;
        } else if (arg.startsWith("--father_pid=")) {
            fatherPid = arg.substring(13);
        } else if (arg.startsWith("--root_pid=")) {
            rootPid = arg.substring(11);
        } else if (arg.startsWith("--father_node=")) {
            fatherNode = arg.substring(14);
        } else if (arg.startsWith("--pid=")) {
            pid = arg.substring(6);
        } else if (arg.startsWith("--context_type")) {
            String keyValue = arg.substring(15);
			int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.setContextType(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }

            }

		} else if (arg.startsWith("--context_param")) {
            String keyValue = arg.substring(16);
            int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }
            }
        } else if (arg.startsWith("--context_file")) {
        	String keyValue = arg.substring(15);
        	String filePath = new String(java.util.Base64.getDecoder().decode(keyValue));
        	java.nio.file.Path contextFile = java.nio.file.Paths.get(filePath);
            try (java.io.BufferedReader reader = java.nio.file.Files.newBufferedReader(contextFile)) {
                String line;
                while ((line = reader.readLine()) != null) {
                    int index = -1;
                    if ( (index = line.indexOf('=')) > -1) {
							if (line.startsWith("--context_param")) {
								if ("id_Password".equals(context_param.getContextType(line.substring(16, index)))) {
									context_param.put(line.substring(16, index), routines.system.PasswordEncryptUtil.decryptPassword(
											line.substring(index + 1)));
								} else {
									context_param.put(line.substring(16, index), line.substring(index + 1));
								}
							}else {//--context_type
								context_param.setContextType(line.substring(15, index), line.substring(index + 1));
							}
                    }
                }
            } catch (java.io.IOException e) {
            	System.err.println("Could not load the context file: " + filePath);
                e.printStackTrace();
            }
        } else if (arg.startsWith("--log4jLevel=")) {
            log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--audit.enabled") && arg.contains("=")) {//for trunjob call
		    final int equal = arg.indexOf('=');
			final String key = arg.substring("--".length(), equal);
			System.setProperty(key, arg.substring(equal + 1));
		}
    }
    
    private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

    private final String[][] escapeChars = {
        {"\\\\","\\"},{"\\n","\n"},{"\\'","\'"},{"\\r","\r"},
        {"\\f","\f"},{"\\b","\b"},{"\\t","\t"}
        };
    private String replaceEscapeChars (String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0],currIndex);
				if (index>=0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0], strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
    }

    public Integer getErrorCode() {
        return errorCode;
    }


    public String getStatus() {
        return status;
    }

    ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 *     937922 characters generated by Talend Open Studio for ESB 
 *     on the October 28, 2024, 2:33:29 PM COT
 ************************************************************************************************/