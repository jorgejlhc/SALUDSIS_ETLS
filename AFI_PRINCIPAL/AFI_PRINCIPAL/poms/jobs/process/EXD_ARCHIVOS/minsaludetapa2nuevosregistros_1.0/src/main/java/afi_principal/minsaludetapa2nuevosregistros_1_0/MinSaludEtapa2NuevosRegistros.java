// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for ESB
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


package afi_principal.minsaludetapa2nuevosregistros_1_0;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.GenerarUuid;
import routines.Mathematical;
import routines.ExtraerBlob;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;
 




	//the import part of tJava_7
	//import java.util.List;

	//the import part of tJava_8
	//import java.util.List;

	//the import part of tJava_1
	//import java.util.List;

	//the import part of tJava_2
	//import java.util.List;


@SuppressWarnings("unused")

/**
 * Job: MinSaludEtapa2NuevosRegistros Purpose: Extincion de derechos, archivo recibido MINSALUD ETAPA 2<br>
 * Description:  <br>
 * @author jorgejlhc@gmail.com
 * @version 8.8.8.20240722_1936-SNAPSHOT
 * @status PROD
 */
public class MinSaludEtapa2NuevosRegistros implements TalendJob {

protected static void logIgnoredError(String message, Throwable cause) {
       System.err.println(message);
       if (cause != null) {
               cause.printStackTrace();
       }

}


	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}
	
	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	
	private final static String utf8Charset = "UTF-8";
	

	//contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String,String> propertyTypes = new java.util.HashMap<>();
		
		public PropertiesWithType(java.util.Properties properties){
			super(properties);
		}
		public PropertiesWithType(){
			super();
		}
		
		public void setContextType(String key, String type) {
			propertyTypes.put(key,type);
		}
	
		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}	
	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();
		

	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties){
			super(properties);
		}
		public ContextProperties(){
			super();
		}

		public void synchronizeContext(){
			
			if(oracle_AdditionalParams != null){
				
					this.setProperty("oracle_AdditionalParams", oracle_AdditionalParams.toString());
				
			}
			
			if(oracle_ServiceName != null){
				
					this.setProperty("oracle_ServiceName", oracle_ServiceName.toString());
				
			}
			
			if(oracle_Host != null){
				
					this.setProperty("oracle_Host", oracle_Host.toString());
				
			}
			
			if(oracle_Schema != null){
				
					this.setProperty("oracle_Schema", oracle_Schema.toString());
				
			}
			
			if(oracle_Password != null){
				
					this.setProperty("oracle_Password", oracle_Password.toString());
				
			}
			
			if(oracle_User != null){
				
					this.setProperty("oracle_User", oracle_User.toString());
				
			}
			
			if(oracle_Port != null){
				
					this.setProperty("oracle_Port", oracle_Port.toString());
				
			}
			
			if(oracle_Sid != null){
				
					this.setProperty("oracle_Sid", oracle_Sid.toString());
				
			}
			
			if(infoNombreArchivo != null){
				
					this.setProperty("infoNombreArchivo", infoNombreArchivo.toString());
				
			}
			
			if(infoUsuarioIdArchivo != null){
				
					this.setProperty("infoUsuarioIdArchivo", infoUsuarioIdArchivo.toString());
				
			}
			
			if(infoIdArchivo != null){
				
					this.setProperty("infoIdArchivo", infoIdArchivo.toString());
				
			}
			
			if(infoTipoArchivo != null){
				
					this.setProperty("infoTipoArchivo", infoTipoArchivo.toString());
				
			}
			
			if(tipoJobProceso != null){
				
					this.setProperty("tipoJobProceso", tipoJobProceso.toString());
				
			}
			
			if(idProceso != null){
				
					this.setProperty("idProceso", idProceso.toString());
				
			}
			
			if(tipoProceso != null){
				
					this.setProperty("tipoProceso", tipoProceso.toString());
				
			}
			
			if(descripcionProceso != null){
				
					this.setProperty("descripcionProceso", descripcionProceso.toString());
				
			}
			
			if(fileSystem_Path != null){
				
					this.setProperty("fileSystem_Path", fileSystem_Path.toString());
				
			}
			
			if(fileSystem_Area != null){
				
					this.setProperty("fileSystem_Area", fileSystem_Area.toString());
				
			}
			
			if(auxAumentoRegistros != null){
				
					this.setProperty("auxAumentoRegistros", auxAumentoRegistros.toString());
				
			}
			
			if(archivoConfiguracion != null){
				
					this.setProperty("archivoConfiguracion", archivoConfiguracion.toString());
				
			}
			
			if(infoConteoRegistros != null){
				
					this.setProperty("infoConteoRegistros", infoConteoRegistros.toString());
				
			}
			
			if(auxPosicionRegistros != null){
				
					this.setProperty("auxPosicionRegistros", auxPosicionRegistros.toString());
				
			}
			
			if(archivoSalida != null){
				
					this.setProperty("archivoSalida", archivoSalida.toString());
				
			}
			
			if(estArchivoErrorArchivo != null){
				
					this.setProperty("estArchivoErrorArchivo", estArchivoErrorArchivo.toString());
				
			}
			
			if(estArchivoEnProceso != null){
				
					this.setProperty("estArchivoEnProceso", estArchivoEnProceso.toString());
				
			}
			
			if(estArchivoErrorProcesamiento != null){
				
					this.setProperty("estArchivoErrorProcesamiento", estArchivoErrorProcesamiento.toString());
				
			}
			
			if(estArchivoProcesado != null){
				
					this.setProperty("estArchivoProcesado", estArchivoProcesado.toString());
				
			}
			
			if(estArchivoPausado != null){
				
					this.setProperty("estArchivoPausado", estArchivoPausado.toString());
				
			}
			
			if(estArchivoInactivo != null){
				
					this.setProperty("estArchivoInactivo", estArchivoInactivo.toString());
				
			}
			
			if(estArchivoCancelado != null){
				
					this.setProperty("estArchivoCancelado", estArchivoCancelado.toString());
				
			}
			
			if(estArchivoActivo != null){
				
					this.setProperty("estArchivoActivo", estArchivoActivo.toString());
				
			}
			
			if(tipoArchivoMinSaludEtapa3MultiafiliacionGenerado != null){
				
					this.setProperty("tipoArchivoMinSaludEtapa3MultiafiliacionGenerado", tipoArchivoMinSaludEtapa3MultiafiliacionGenerado.toString());
				
			}
			
			if(tipoArchivoMinSaludEtapa2NuevosRegistros != null){
				
					this.setProperty("tipoArchivoMinSaludEtapa2NuevosRegistros", tipoArchivoMinSaludEtapa2NuevosRegistros.toString());
				
			}
			
			if(tipoArchivoEntesTerritoriales != null){
				
					this.setProperty("tipoArchivoEntesTerritoriales", tipoArchivoEntesTerritoriales.toString());
				
			}
			
			if(tipoArchivoMinSaludEtapa2Novedades != null){
				
					this.setProperty("tipoArchivoMinSaludEtapa2Novedades", tipoArchivoMinSaludEtapa2Novedades.toString());
				
			}
			
			if(tipoArchivoMinSaludEtapa2NovedadesGenerado != null){
				
					this.setProperty("tipoArchivoMinSaludEtapa2NovedadesGenerado", tipoArchivoMinSaludEtapa2NovedadesGenerado.toString());
				
			}
			
			if(tipoArchivoMinSaludEtapa2NuevosRegistrosGenerado != null){
				
					this.setProperty("tipoArchivoMinSaludEtapa2NuevosRegistrosGenerado", tipoArchivoMinSaludEtapa2NuevosRegistrosGenerado.toString());
				
			}
			
			if(tipoArchivoMinSaludEtapa3Multiafiliacion != null){
				
					this.setProperty("tipoArchivoMinSaludEtapa3Multiafiliacion", tipoArchivoMinSaludEtapa3Multiafiliacion.toString());
				
			}
			
			if(tipoArchivoFedevidaGenerado != null){
				
					this.setProperty("tipoArchivoFedevidaGenerado", tipoArchivoFedevidaGenerado.toString());
				
			}
			
			if(tipoArchivoEntesGenerado != null){
				
					this.setProperty("tipoArchivoEntesGenerado", tipoArchivoEntesGenerado.toString());
				
			}
			
			if(tipoArchivoFedevida != null){
				
					this.setProperty("tipoArchivoFedevida", tipoArchivoFedevida.toString());
				
			}
			
			if(outCodigo != null){
				
					this.setProperty("outCodigo", outCodigo.toString());
				
			}
			
			if(mail_PasswordMail != null){
				
					this.setProperty("mail_PasswordMail", mail_PasswordMail.toString());
				
			}
			
			if(mail_SMTPPort != null){
				
					this.setProperty("mail_SMTPPort", mail_SMTPPort.toString());
				
			}
			
			if(mail_UsernameMail != null){
				
					this.setProperty("mail_UsernameMail", mail_UsernameMail.toString());
				
			}
			
			if(mail_SMTPHost != null){
				
					this.setProperty("mail_SMTPHost", mail_SMTPHost.toString());
				
			}
			
		}
		
		//if the stored or passed value is "<TALEND_NULL>" string, it mean null
		public String getStringValue(String key) {
			String origin_value = this.getProperty(key);
			if(NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY.equals(origin_value)) {
				return null;
			}
			return origin_value;
		}

public String oracle_AdditionalParams;
public String getOracle_AdditionalParams(){
	return this.oracle_AdditionalParams;
}
public String oracle_ServiceName;
public String getOracle_ServiceName(){
	return this.oracle_ServiceName;
}
public String oracle_Host;
public String getOracle_Host(){
	return this.oracle_Host;
}
public String oracle_Schema;
public String getOracle_Schema(){
	return this.oracle_Schema;
}
public String oracle_Password;
public String getOracle_Password(){
	return this.oracle_Password;
}
public String oracle_User;
public String getOracle_User(){
	return this.oracle_User;
}
public String oracle_Port;
public String getOracle_Port(){
	return this.oracle_Port;
}
public String oracle_Sid;
public String getOracle_Sid(){
	return this.oracle_Sid;
}
public String infoNombreArchivo;
public String getInfoNombreArchivo(){
	return this.infoNombreArchivo;
}
public Integer infoUsuarioIdArchivo;
public Integer getInfoUsuarioIdArchivo(){
	return this.infoUsuarioIdArchivo;
}
public Integer infoIdArchivo;
public Integer getInfoIdArchivo(){
	return this.infoIdArchivo;
}
public Integer infoTipoArchivo;
public Integer getInfoTipoArchivo(){
	return this.infoTipoArchivo;
}
public Integer tipoJobProceso;
public Integer getTipoJobProceso(){
	return this.tipoJobProceso;
}
public Integer idProceso;
public Integer getIdProceso(){
	return this.idProceso;
}
public Integer tipoProceso;
public Integer getTipoProceso(){
	return this.tipoProceso;
}
public String descripcionProceso;
public String getDescripcionProceso(){
	return this.descripcionProceso;
}
public String fileSystem_Path;
public String getFileSystem_Path(){
	return this.fileSystem_Path;
}
public String fileSystem_Area;
public String getFileSystem_Area(){
	return this.fileSystem_Area;
}
public Integer auxAumentoRegistros;
public Integer getAuxAumentoRegistros(){
	return this.auxAumentoRegistros;
}
public String archivoConfiguracion;
public String getArchivoConfiguracion(){
	return this.archivoConfiguracion;
}
public Integer infoConteoRegistros;
public Integer getInfoConteoRegistros(){
	return this.infoConteoRegistros;
}
public Integer auxPosicionRegistros;
public Integer getAuxPosicionRegistros(){
	return this.auxPosicionRegistros;
}
public String archivoSalida;
public String getArchivoSalida(){
	return this.archivoSalida;
}
public Integer estArchivoErrorArchivo;
public Integer getEstArchivoErrorArchivo(){
	return this.estArchivoErrorArchivo;
}
public Integer estArchivoEnProceso;
public Integer getEstArchivoEnProceso(){
	return this.estArchivoEnProceso;
}
public Integer estArchivoErrorProcesamiento;
public Integer getEstArchivoErrorProcesamiento(){
	return this.estArchivoErrorProcesamiento;
}
public Integer estArchivoProcesado;
public Integer getEstArchivoProcesado(){
	return this.estArchivoProcesado;
}
public Integer estArchivoPausado;
public Integer getEstArchivoPausado(){
	return this.estArchivoPausado;
}
public Integer estArchivoInactivo;
public Integer getEstArchivoInactivo(){
	return this.estArchivoInactivo;
}
public Integer estArchivoCancelado;
public Integer getEstArchivoCancelado(){
	return this.estArchivoCancelado;
}
public Integer estArchivoActivo;
public Integer getEstArchivoActivo(){
	return this.estArchivoActivo;
}
public Integer tipoArchivoMinSaludEtapa3MultiafiliacionGenerado;
public Integer getTipoArchivoMinSaludEtapa3MultiafiliacionGenerado(){
	return this.tipoArchivoMinSaludEtapa3MultiafiliacionGenerado;
}
public Integer tipoArchivoMinSaludEtapa2NuevosRegistros;
public Integer getTipoArchivoMinSaludEtapa2NuevosRegistros(){
	return this.tipoArchivoMinSaludEtapa2NuevosRegistros;
}
public Integer tipoArchivoEntesTerritoriales;
public Integer getTipoArchivoEntesTerritoriales(){
	return this.tipoArchivoEntesTerritoriales;
}
public Integer tipoArchivoMinSaludEtapa2Novedades;
public Integer getTipoArchivoMinSaludEtapa2Novedades(){
	return this.tipoArchivoMinSaludEtapa2Novedades;
}
public Integer tipoArchivoMinSaludEtapa2NovedadesGenerado;
public Integer getTipoArchivoMinSaludEtapa2NovedadesGenerado(){
	return this.tipoArchivoMinSaludEtapa2NovedadesGenerado;
}
public Integer tipoArchivoMinSaludEtapa2NuevosRegistrosGenerado;
public Integer getTipoArchivoMinSaludEtapa2NuevosRegistrosGenerado(){
	return this.tipoArchivoMinSaludEtapa2NuevosRegistrosGenerado;
}
public Integer tipoArchivoMinSaludEtapa3Multiafiliacion;
public Integer getTipoArchivoMinSaludEtapa3Multiafiliacion(){
	return this.tipoArchivoMinSaludEtapa3Multiafiliacion;
}
public Integer tipoArchivoFedevidaGenerado;
public Integer getTipoArchivoFedevidaGenerado(){
	return this.tipoArchivoFedevidaGenerado;
}
public Integer tipoArchivoEntesGenerado;
public Integer getTipoArchivoEntesGenerado(){
	return this.tipoArchivoEntesGenerado;
}
public Integer tipoArchivoFedevida;
public Integer getTipoArchivoFedevida(){
	return this.tipoArchivoFedevida;
}
public Boolean outCodigo;
public Boolean getOutCodigo(){
	return this.outCodigo;
}
public String mail_PasswordMail;
public String getMail_PasswordMail(){
	return this.mail_PasswordMail;
}
public String mail_SMTPPort;
public String getMail_SMTPPort(){
	return this.mail_SMTPPort;
}
public String mail_UsernameMail;
public String getMail_UsernameMail(){
	return this.mail_UsernameMail;
}
public String mail_SMTPHost;
public String getMail_SMTPHost(){
	return this.mail_SMTPHost;
}
	}
			
	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.
	public ContextProperties getContext() {
		return this.context;
	}
	private final String jobVersion = "1.0";
	private final String jobName = "MinSaludEtapa2NuevosRegistros";
	private final String projectName = "AFI_PRINCIPAL";
	public Integer errorCode = null;
	private String currentComponent = "";
	
	private String cLabel =  null;
	
		private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
        private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();
	
		private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
		public  final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();
	

private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";
	
	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(), new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}
	
	public void setDataSourceReferences(List serviceReferences) throws Exception{
		
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		java.util.Map<String, javax.sql.DataSource> dataSources = new java.util.HashMap<String, javax.sql.DataSource>();
		
		for (java.util.Map.Entry<String, javax.sql.DataSource> entry : BundleUtils.getServices(serviceReferences,  javax.sql.DataSource.class).entrySet()) {
                    dataSources.put(entry.getKey(), entry.getValue());
                    talendDataSources.put(entry.getKey(), new routines.system.TalendDataSource(entry.getValue()));
		}

		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}


private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

public String getExceptionStackTrace() {
	if ("failure".equals(this.getStatus())) {
		errorMessagePS.flush();
		return baos.toString();
	}
	return null;
}

private Exception exception;

public Exception getException() {
	if ("failure".equals(this.getStatus())) {
		return this.exception;
	}
	return null;
}

private class TalendException extends Exception {

	private static final long serialVersionUID = 1L;

	private java.util.Map<String, Object> globalMap = null;
	private Exception e = null;
	
	private String currentComponent = null;
	private String cLabel =  null;
	
	private String virtualComponentName = null;
	
	public void setVirtualComponentName (String virtualComponentName){
		this.virtualComponentName = virtualComponentName;
	}

	private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
		this.currentComponent= errorComponent;
		this.globalMap = globalMap;
		this.e = e;
	}
	
	private TalendException(Exception e, String errorComponent, String errorComponentLabel, final java.util.Map<String, Object> globalMap) {
		this(e, errorComponent, globalMap);
		this.cLabel = errorComponentLabel;
	}

	public Exception getException() {
		return this.e;
	}

	public String getCurrentComponent() {
		return this.currentComponent;
	}

	
    public String getExceptionCauseMessage(Exception e){
        Throwable cause = e;
        String message = null;
        int i = 10;
        while (null != cause && 0 < i--) {
            message = cause.getMessage();
            if (null == message) {
                cause = cause.getCause();
            } else {
                break;          
            }
        }
        if (null == message) {
            message = e.getClass().getName();
        }   
        return message;
    }

	@Override
	public void printStackTrace() {
		if (!(e instanceof TalendException || e instanceof TDieException)) {
			if(virtualComponentName!=null && currentComponent.indexOf(virtualComponentName+"_")==0){
				globalMap.put(virtualComponentName+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			}
			globalMap.put(currentComponent+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
		}
		if (!(e instanceof TDieException)) {
			if(e instanceof TalendException){
				e.printStackTrace();
			} else {
				e.printStackTrace();
				e.printStackTrace(errorMessagePS);
				MinSaludEtapa2NuevosRegistros.this.exception = e;
			}
		}
		if (!(e instanceof TalendException)) {
		try {
			for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
				if (m.getName().compareTo(currentComponent + "_error") == 0) {
					m.invoke(MinSaludEtapa2NuevosRegistros.this, new Object[] { e , currentComponent, globalMap});
					break;
				}
			}

			if(!(e instanceof TDieException)){
			}
		} catch (Exception e) {
			this.e.printStackTrace();
		}
		}
	}
}

			public void tPostjob_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostjob_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleClose_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleClose_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_7_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tJava_7_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPrejob_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPrejob_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleConnection_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
						try {
							
								if(this.execStat){
									runStat.updateStatOnConnection("OnComponentError1", 0, "error");
								}
							
							
								errorCode = null;
								tDie_1Process(globalMap);
								if (!"failure".equals(status)) {
									status = "end";
								}
								

						} catch (Exception e) {
							e.printStackTrace();
						}
						
					tOracleConnection_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDie_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDie_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_8_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tJava_8_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileExist_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileExist_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputDelimited_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
					tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashOutput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
					tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashOutput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashOutput_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLoop_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tLoop_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tLoop_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tLoop_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tLoop_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tNormalize_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tLoop_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tReplicate_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tLoop_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tLoop_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleSP_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tLoop_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tJava_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tLoop_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputDelimited_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tLoop_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFixedFlowInput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFixedFlowInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFixedFlowInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleOutput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFixedFlowInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tJava_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tLoop_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tLoop_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tLoop_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFixedFlowInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row12_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tLoop_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tLoop_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row7_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tLoop_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row8_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFixedFlowInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostjob_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleClose_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_7_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tPrejob_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleConnection_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDie_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_8_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileExist_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileInputDelimited_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "ERROR", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

				try {
					
						if(this.execStat){
							runStat.updateStatOnConnection("OnSubjobError1", 0, "error");
						}
					
					errorCode = null;
					tJava_2Process(globalMap);
					if (!"failure".equals(status)) {
						status = "end";
					}
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
			public void tOracleInput_5_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleInput_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tLoop_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFixedFlowInput_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
	









public void tPostjob_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPostjob_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tPostjob_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostjob_1", false);
		start_Hash.put("tPostjob_1", System.currentTimeMillis());
		
	
	currentComponent="tPostjob_1";
	
	
		int tos_count_tPostjob_1 = 0;
		

 



/**
 * [tPostjob_1 begin ] stop
 */
	
	/**
	 * [tPostjob_1 main ] start
	 */

	

	
	
	currentComponent="tPostjob_1";
	
	

 


	tos_count_tPostjob_1++;

/**
 * [tPostjob_1 main ] stop
 */
	
	/**
	 * [tPostjob_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tPostjob_1";
	
	

 



/**
 * [tPostjob_1 process_data_begin ] stop
 */
	
	/**
	 * [tPostjob_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tPostjob_1";
	
	

 



/**
 * [tPostjob_1 process_data_end ] stop
 */
	
	/**
	 * [tPostjob_1 end ] start
	 */

	

	
	
	currentComponent="tPostjob_1";
	
	

 

ok_Hash.put("tPostjob_1", true);
end_Hash.put("tPostjob_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk2", 0, "ok");
				}
				tOracleClose_1Process(globalMap);



/**
 * [tPostjob_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPostjob_1 finally ] start
	 */

	

	
	
	currentComponent="tPostjob_1";
	
	

 



/**
 * [tPostjob_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPostjob_1_SUBPROCESS_STATE", 1);
	}
	


public void tOracleClose_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleClose_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tOracleClose_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleClose_1", false);
		start_Hash.put("tOracleClose_1", System.currentTimeMillis());
		
	
	currentComponent="tOracleClose_1";
	
	
		int tos_count_tOracleClose_1 = 0;
		

 



/**
 * [tOracleClose_1 begin ] stop
 */
	
	/**
	 * [tOracleClose_1 main ] start
	 */

	

	
	
	currentComponent="tOracleClose_1";
	
	

	java.sql.Connection conn_tOracleClose_1 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");
	
	if(conn_tOracleClose_1 != null && !conn_tOracleClose_1.isClosed())
	{
		
			conn_tOracleClose_1.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_tOracleConnection_1"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
	}

 


	tos_count_tOracleClose_1++;

/**
 * [tOracleClose_1 main ] stop
 */
	
	/**
	 * [tOracleClose_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleClose_1";
	
	

 



/**
 * [tOracleClose_1 process_data_begin ] stop
 */
	
	/**
	 * [tOracleClose_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleClose_1";
	
	

 



/**
 * [tOracleClose_1 process_data_end ] stop
 */
	
	/**
	 * [tOracleClose_1 end ] start
	 */

	

	
	
	currentComponent="tOracleClose_1";
	
	

 

ok_Hash.put("tOracleClose_1", true);
end_Hash.put("tOracleClose_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk39", 0, "ok");
				}
				tJava_7Process(globalMap);



/**
 * [tOracleClose_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleClose_1 finally ] start
	 */

	

	
	
	currentComponent="tOracleClose_1";
	
	

 



/**
 * [tOracleClose_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleClose_1_SUBPROCESS_STATE", 1);
	}
	


public void tJava_7Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_7_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tJava_7 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_7", false);
		start_Hash.put("tJava_7", System.currentTimeMillis());
		
	
	currentComponent="tJava_7";
	
	
		int tos_count_tJava_7 = 0;
		


//***********************************************
System.out.println("*******************POSTJOB FINALIZADO ETAPA NUEVOS REGISTROS*******************");
 



/**
 * [tJava_7 begin ] stop
 */
	
	/**
	 * [tJava_7 main ] start
	 */

	

	
	
	currentComponent="tJava_7";
	
	

 


	tos_count_tJava_7++;

/**
 * [tJava_7 main ] stop
 */
	
	/**
	 * [tJava_7 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_7";
	
	

 



/**
 * [tJava_7 process_data_begin ] stop
 */
	
	/**
	 * [tJava_7 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_7";
	
	

 



/**
 * [tJava_7 process_data_end ] stop
 */
	
	/**
	 * [tJava_7 end ] start
	 */

	

	
	
	currentComponent="tJava_7";
	
	

 

ok_Hash.put("tJava_7", true);
end_Hash.put("tJava_7", System.currentTimeMillis());




/**
 * [tJava_7 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_7 finally ] start
	 */

	

	
	
	currentComponent="tJava_7";
	
	

 



/**
 * [tJava_7 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_7_SUBPROCESS_STATE", 1);
	}
	


public void tPrejob_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPrejob_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tPrejob_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tPrejob_2", false);
		start_Hash.put("tPrejob_2", System.currentTimeMillis());
		
	
	currentComponent="tPrejob_2";
	
	
		int tos_count_tPrejob_2 = 0;
		

 



/**
 * [tPrejob_2 begin ] stop
 */
	
	/**
	 * [tPrejob_2 main ] start
	 */

	

	
	
	currentComponent="tPrejob_2";
	
	

 


	tos_count_tPrejob_2++;

/**
 * [tPrejob_2 main ] stop
 */
	
	/**
	 * [tPrejob_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tPrejob_2";
	
	

 



/**
 * [tPrejob_2 process_data_begin ] stop
 */
	
	/**
	 * [tPrejob_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tPrejob_2";
	
	

 



/**
 * [tPrejob_2 process_data_end ] stop
 */
	
	/**
	 * [tPrejob_2 end ] start
	 */

	

	
	
	currentComponent="tPrejob_2";
	
	

 

ok_Hash.put("tPrejob_2", true);
end_Hash.put("tPrejob_2", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk6", 0, "ok");
				}
				tOracleConnection_1Process(globalMap);



/**
 * [tPrejob_2 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPrejob_2 finally ] start
	 */

	

	
	
	currentComponent="tPrejob_2";
	
	

 



/**
 * [tPrejob_2 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPrejob_2_SUBPROCESS_STATE", 1);
	}
	


public void tOracleConnection_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleConnection_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tOracleConnection_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleConnection_1", false);
		start_Hash.put("tOracleConnection_1", System.currentTimeMillis());
		
	
	currentComponent="tOracleConnection_1";
	
	
		int tos_count_tOracleConnection_1 = 0;
		
	

	
        String url_tOracleConnection_1 = "jdbc:oracle:thin:@(description=(address=(protocol=tcp)(host=" + context.oracle_Host + ")(port=" + context.oracle_Port + "))(connect_data=(service_name=" + context.oracle_ServiceName + ")))";
    	globalMap.put("connectionType_" + "tOracleConnection_1", "ORACLE_SERVICE_NAME");
	String dbUser_tOracleConnection_1 = context.oracle_User;
	
	
		
	final String decryptedPassword_tOracleConnection_1 = context.oracle_Password; 
		String dbPwd_tOracleConnection_1 = decryptedPassword_tOracleConnection_1;
	
	
	java.sql.Connection conn_tOracleConnection_1 = null;
	
		
			String driverClass_tOracleConnection_1 = "oracle.jdbc.OracleDriver";
			java.lang.Class jdbcclazz_tOracleConnection_1 = java.lang.Class.forName(driverClass_tOracleConnection_1);
			globalMap.put("driverClass_tOracleConnection_1", driverClass_tOracleConnection_1);
		
			java.util.Properties atnParamsPrope_tOracleConnection_1 = new java.util.Properties();
			    atnParamsPrope_tOracleConnection_1.put("user",dbUser_tOracleConnection_1);
			    atnParamsPrope_tOracleConnection_1.put("password",dbPwd_tOracleConnection_1);
			if(context.oracle_AdditionalParams != null && !"\"\"".equals(context.oracle_AdditionalParams) && !"".equals(context.oracle_AdditionalParams)){
                atnParamsPrope_tOracleConnection_1.load(new java.io.ByteArrayInputStream(context.oracle_AdditionalParams.replace("&", "\n").getBytes()));
            }
         
			conn_tOracleConnection_1 = java.sql.DriverManager.getConnection(url_tOracleConnection_1, atnParamsPrope_tOracleConnection_1);

		globalMap.put("conn_tOracleConnection_1", conn_tOracleConnection_1);
	if (null != conn_tOracleConnection_1) {
		
			conn_tOracleConnection_1.setAutoCommit(true);
	}
        globalMap.put("host_" + "tOracleConnection_1",context.oracle_Host);
        globalMap.put("port_" + "tOracleConnection_1",context.oracle_Port);
        globalMap.put("dbname_" + "tOracleConnection_1",context.oracle_ServiceName);

	globalMap.put("dbschema_" + "tOracleConnection_1", context.oracle_Schema);
	globalMap.put("username_" + "tOracleConnection_1",context.oracle_User);
	globalMap.put("password_" + "tOracleConnection_1",dbPwd_tOracleConnection_1);

 



/**
 * [tOracleConnection_1 begin ] stop
 */
	
	/**
	 * [tOracleConnection_1 main ] start
	 */

	

	
	
	currentComponent="tOracleConnection_1";
	
	

 


	tos_count_tOracleConnection_1++;

/**
 * [tOracleConnection_1 main ] stop
 */
	
	/**
	 * [tOracleConnection_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleConnection_1";
	
	

 



/**
 * [tOracleConnection_1 process_data_begin ] stop
 */
	
	/**
	 * [tOracleConnection_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleConnection_1";
	
	

 



/**
 * [tOracleConnection_1 process_data_end ] stop
 */
	
	/**
	 * [tOracleConnection_1 end ] start
	 */

	

	
	
	currentComponent="tOracleConnection_1";
	
	

 

ok_Hash.put("tOracleConnection_1", true);
end_Hash.put("tOracleConnection_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk1", 0, "ok");
				}
				tJava_8Process(globalMap);



/**
 * [tOracleConnection_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleConnection_1 finally ] start
	 */

	

	
	
	currentComponent="tOracleConnection_1";
	
	

 



/**
 * [tOracleConnection_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleConnection_1_SUBPROCESS_STATE", 1);
	}
	


public void tDie_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDie_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tDie_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDie_1", false);
		start_Hash.put("tDie_1", System.currentTimeMillis());
		
	
	currentComponent="tDie_1";
	
	
		int tos_count_tDie_1 = 0;
		

 



/**
 * [tDie_1 begin ] stop
 */
	
	/**
	 * [tDie_1 main ] start
	 */

	

	
	
	currentComponent="tDie_1";
	
	

	try {
	globalMap.put("tDie_1_DIE_PRIORITY", 5);
	System.err.println("the end is near");
	
	globalMap.put("tDie_1_DIE_MESSAGE", "the end is near");
	globalMap.put("tDie_1_DIE_MESSAGES", "the end is near");
	
	} catch (Exception | Error e_tDie_1) {
	    globalMap.put("tDie_1_ERROR_MESSAGE",e_tDie_1.getMessage());
		logIgnoredError(String.format("tDie_1 - tDie failed to log message due to internal error: %s", e_tDie_1), e_tDie_1);
	}
	
	currentComponent = "tDie_1";
	status = "failure";
        errorCode = new Integer(4);
        globalMap.put("tDie_1_DIE_CODE", errorCode);        

    
	if(true){	
		TDieException e_tDie_1 = new TDieException();

		

		throw e_tDie_1;
	}

 


	tos_count_tDie_1++;

/**
 * [tDie_1 main ] stop
 */
	
	/**
	 * [tDie_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDie_1";
	
	

 



/**
 * [tDie_1 process_data_begin ] stop
 */
	
	/**
	 * [tDie_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDie_1";
	
	

 



/**
 * [tDie_1 process_data_end ] stop
 */
	
	/**
	 * [tDie_1 end ] start
	 */

	

	
	
	currentComponent="tDie_1";
	
	

 

ok_Hash.put("tDie_1", true);
end_Hash.put("tDie_1", System.currentTimeMillis());




/**
 * [tDie_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDie_1 finally ] start
	 */

	

	
	
	currentComponent="tDie_1";
	
	

 



/**
 * [tDie_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDie_1_SUBPROCESS_STATE", 1);
	}
	


public void tJava_8Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_8_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tJava_8 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_8", false);
		start_Hash.put("tJava_8", System.currentTimeMillis());
		
	
	currentComponent="tJava_8";
	
	
		int tos_count_tJava_8 = 0;
		


//****************************************************************************************//
System.out.println("*** PREJOB FINALIZADO ETAPA 2 NUEVOS REGISTROS *****************************************");
//****************************************************************************************//

//****************************************************************************************//
//*** PRUEBAS ESTO HAY QUE ELIMINARLO ****************************************************//
//****************************************************************************************//
//context.infoNombreArchivo="1fadd033-d075-4f8f-a405-162b14de69ba.NEG";
//context.fileSystem_Path="C:\\Users\\icnovaro\\Desktop\\AFI_FOREVER\\SaludSis\\App_Data\\Storage";
//context.fileSystem_Area="AFI";
//context.idProceso=607;
//context.infoIdArchivo=1361;
//context.infoUsuarioIdArchivo=649;
//****************************************************************************************//

//****************************************************************************************//
//*** INICIALIZACIÓN VARIABLES DEL JOB ***************************************************//
//****************************************************************************************//
context.auxPosicionRegistros=0;
context.infoConteoRegistros=1;
context.archivoSalida=GenerarUuid.createUUID();

//****************************************************************************************//
System.out.println("USUARIO ARCHIVO: "+context.infoUsuarioIdArchivo);
System.out.println("NOMBRE ARCHIVO: "+context.infoNombreArchivo);
System.out.println("ID PROCESO: "+context.idProceso);
System.out.println("ID ARCHIVO: "+context.infoIdArchivo);
System.out.println("DIRECCION: "+context.fileSystem_Path+"/"+context.fileSystem_Area+"/"+context.infoNombreArchivo);
//****************************************************************************************//
 



/**
 * [tJava_8 begin ] stop
 */
	
	/**
	 * [tJava_8 main ] start
	 */

	

	
	
	currentComponent="tJava_8";
	
	

 


	tos_count_tJava_8++;

/**
 * [tJava_8 main ] stop
 */
	
	/**
	 * [tJava_8 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_8";
	
	

 



/**
 * [tJava_8 process_data_begin ] stop
 */
	
	/**
	 * [tJava_8 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_8";
	
	

 



/**
 * [tJava_8 process_data_end ] stop
 */
	
	/**
	 * [tJava_8 end ] start
	 */

	

	
	
	currentComponent="tJava_8";
	
	

 

ok_Hash.put("tJava_8", true);
end_Hash.put("tJava_8", System.currentTimeMillis());




/**
 * [tJava_8 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_8 finally ] start
	 */

	

	
	
	currentComponent="tJava_8";
	
	

 



/**
 * [tJava_8 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_8_SUBPROCESS_STATE", 1);
	}
	


public void tFileExist_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileExist_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tFileExist_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileExist_1", false);
		start_Hash.put("tFileExist_1", System.currentTimeMillis());
		
	
	currentComponent="tFileExist_1";
	
	
		int tos_count_tFileExist_1 = 0;
		

 



/**
 * [tFileExist_1 begin ] stop
 */
	
	/**
	 * [tFileExist_1 main ] start
	 */

	

	
	
	currentComponent="tFileExist_1";
	
	



java.io.File file_tFileExist_1 = new java.io.File(context.fileSystem_Path+"/"+context.fileSystem_Area+"/"+context.infoNombreArchivo);
if (!file_tFileExist_1.exists()) {
    globalMap.put("tFileExist_1_EXISTS",false);
}else{
	globalMap.put("tFileExist_1_EXISTS",true);
}

globalMap.put("tFileExist_1_FILENAME",context.fileSystem_Path+"/"+context.fileSystem_Area+"/"+context.infoNombreArchivo);


 


	tos_count_tFileExist_1++;

/**
 * [tFileExist_1 main ] stop
 */
	
	/**
	 * [tFileExist_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileExist_1";
	
	

 



/**
 * [tFileExist_1 process_data_begin ] stop
 */
	
	/**
	 * [tFileExist_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileExist_1";
	
	

 



/**
 * [tFileExist_1 process_data_end ] stop
 */
	
	/**
	 * [tFileExist_1 end ] start
	 */

	

	
	
	currentComponent="tFileExist_1";
	
	

 

ok_Hash.put("tFileExist_1", true);
end_Hash.put("tFileExist_1", System.currentTimeMillis());

   			if (((Boolean)globalMap.get("tFileExist_1_EXISTS"))) {
   				
					if(execStat){
   	 					runStat.updateStatOnConnection("If1", 0, "true");
					}
				tFileInputDelimited_1Process(globalMap);
			}

			   
   				else{
					if(execStat){   
   	 					runStat.updateStatOnConnection("If1", 0, "false");
					}   	 
   				}



/**
 * [tFileExist_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileExist_1 finally ] start
	 */

	

	
	
	currentComponent="tFileExist_1";
	
	

 



/**
 * [tFileExist_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileExist_1_SUBPROCESS_STATE", 1);
	}
	


public static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
    final static byte[] commonByteArrayLock_AFI_PRINCIPAL_MinSaludEtapa2NuevosRegistros = new byte[0];
    static byte[] commonByteArray_AFI_PRINCIPAL_MinSaludEtapa2NuevosRegistros = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String codFuerza;

				public String getCodFuerza () {
					return this.codFuerza;
				}

				public Boolean codFuerzaIsNullable(){
				    return false;
				}
				public Boolean codFuerzaIsKey(){
				    return false;
				}
				public Integer codFuerzaLength(){
				    return 6;
				}
				public Integer codFuerzaPrecision(){
				    return 0;
				}
				public String codFuerzaDefault(){
				
					return null;
				
				}
				public String codFuerzaComment(){
				
				    return "";
				
				}
				public String codFuerzaPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String codFuerzaOriginalDbColumnName(){
				
					return "codFuerza";
				
				}

				
			    public String tipoDocumentoTitular;

				public String getTipoDocumentoTitular () {
					return this.tipoDocumentoTitular;
				}

				public Boolean tipoDocumentoTitularIsNullable(){
				    return true;
				}
				public Boolean tipoDocumentoTitularIsKey(){
				    return false;
				}
				public Integer tipoDocumentoTitularLength(){
				    return 2;
				}
				public Integer tipoDocumentoTitularPrecision(){
				    return 0;
				}
				public String tipoDocumentoTitularDefault(){
				
					return null;
				
				}
				public String tipoDocumentoTitularComment(){
				
				    return "";
				
				}
				public String tipoDocumentoTitularPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String tipoDocumentoTitularOriginalDbColumnName(){
				
					return "tipoDocumentoTitular";
				
				}

				
			    public String numeroDocumentoTitular;

				public String getNumeroDocumentoTitular () {
					return this.numeroDocumentoTitular;
				}

				public Boolean numeroDocumentoTitularIsNullable(){
				    return true;
				}
				public Boolean numeroDocumentoTitularIsKey(){
				    return false;
				}
				public Integer numeroDocumentoTitularLength(){
				    return 16;
				}
				public Integer numeroDocumentoTitularPrecision(){
				    return 0;
				}
				public String numeroDocumentoTitularDefault(){
				
					return null;
				
				}
				public String numeroDocumentoTitularComment(){
				
				    return "";
				
				}
				public String numeroDocumentoTitularPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String numeroDocumentoTitularOriginalDbColumnName(){
				
					return "numeroDocumentoTitular";
				
				}

				
			    public String tipoIdentificacionAfiliado;

				public String getTipoIdentificacionAfiliado () {
					return this.tipoIdentificacionAfiliado;
				}

				public Boolean tipoIdentificacionAfiliadoIsNullable(){
				    return false;
				}
				public Boolean tipoIdentificacionAfiliadoIsKey(){
				    return false;
				}
				public Integer tipoIdentificacionAfiliadoLength(){
				    return 2;
				}
				public Integer tipoIdentificacionAfiliadoPrecision(){
				    return 0;
				}
				public String tipoIdentificacionAfiliadoDefault(){
				
					return null;
				
				}
				public String tipoIdentificacionAfiliadoComment(){
				
				    return "";
				
				}
				public String tipoIdentificacionAfiliadoPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String tipoIdentificacionAfiliadoOriginalDbColumnName(){
				
					return "tipoIdentificacionAfiliado";
				
				}

				
			    public String numeroIdentificacionAfiliado;

				public String getNumeroIdentificacionAfiliado () {
					return this.numeroIdentificacionAfiliado;
				}

				public Boolean numeroIdentificacionAfiliadoIsNullable(){
				    return false;
				}
				public Boolean numeroIdentificacionAfiliadoIsKey(){
				    return true;
				}
				public Integer numeroIdentificacionAfiliadoLength(){
				    return 16;
				}
				public Integer numeroIdentificacionAfiliadoPrecision(){
				    return 0;
				}
				public String numeroIdentificacionAfiliadoDefault(){
				
					return null;
				
				}
				public String numeroIdentificacionAfiliadoComment(){
				
				    return "";
				
				}
				public String numeroIdentificacionAfiliadoPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String numeroIdentificacionAfiliadoOriginalDbColumnName(){
				
					return "numeroIdentificacionAfiliado";
				
				}

				
			    public String primerApellidoAfiliado;

				public String getPrimerApellidoAfiliado () {
					return this.primerApellidoAfiliado;
				}

				public Boolean primerApellidoAfiliadoIsNullable(){
				    return false;
				}
				public Boolean primerApellidoAfiliadoIsKey(){
				    return false;
				}
				public Integer primerApellidoAfiliadoLength(){
				    return 20;
				}
				public Integer primerApellidoAfiliadoPrecision(){
				    return 0;
				}
				public String primerApellidoAfiliadoDefault(){
				
					return null;
				
				}
				public String primerApellidoAfiliadoComment(){
				
				    return "";
				
				}
				public String primerApellidoAfiliadoPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String primerApellidoAfiliadoOriginalDbColumnName(){
				
					return "primerApellidoAfiliado";
				
				}

				
			    public String segundoApellidoAfiliado;

				public String getSegundoApellidoAfiliado () {
					return this.segundoApellidoAfiliado;
				}

				public Boolean segundoApellidoAfiliadoIsNullable(){
				    return true;
				}
				public Boolean segundoApellidoAfiliadoIsKey(){
				    return false;
				}
				public Integer segundoApellidoAfiliadoLength(){
				    return 30;
				}
				public Integer segundoApellidoAfiliadoPrecision(){
				    return 0;
				}
				public String segundoApellidoAfiliadoDefault(){
				
					return null;
				
				}
				public String segundoApellidoAfiliadoComment(){
				
				    return "";
				
				}
				public String segundoApellidoAfiliadoPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String segundoApellidoAfiliadoOriginalDbColumnName(){
				
					return "segundoApellidoAfiliado";
				
				}

				
			    public String primerNombreAfiliado;

				public String getPrimerNombreAfiliado () {
					return this.primerNombreAfiliado;
				}

				public Boolean primerNombreAfiliadoIsNullable(){
				    return false;
				}
				public Boolean primerNombreAfiliadoIsKey(){
				    return false;
				}
				public Integer primerNombreAfiliadoLength(){
				    return 20;
				}
				public Integer primerNombreAfiliadoPrecision(){
				    return 0;
				}
				public String primerNombreAfiliadoDefault(){
				
					return null;
				
				}
				public String primerNombreAfiliadoComment(){
				
				    return "";
				
				}
				public String primerNombreAfiliadoPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String primerNombreAfiliadoOriginalDbColumnName(){
				
					return "primerNombreAfiliado";
				
				}

				
			    public String segundoNombreAfiliado;

				public String getSegundoNombreAfiliado () {
					return this.segundoNombreAfiliado;
				}

				public Boolean segundoNombreAfiliadoIsNullable(){
				    return true;
				}
				public Boolean segundoNombreAfiliadoIsKey(){
				    return false;
				}
				public Integer segundoNombreAfiliadoLength(){
				    return 30;
				}
				public Integer segundoNombreAfiliadoPrecision(){
				    return 0;
				}
				public String segundoNombreAfiliadoDefault(){
				
					return null;
				
				}
				public String segundoNombreAfiliadoComment(){
				
				    return "";
				
				}
				public String segundoNombreAfiliadoPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String segundoNombreAfiliadoOriginalDbColumnName(){
				
					return "segundoNombreAfiliado";
				
				}

				
			    public java.util.Date fechaNacimientoAfiliado;

				public java.util.Date getFechaNacimientoAfiliado () {
					return this.fechaNacimientoAfiliado;
				}

				public Boolean fechaNacimientoAfiliadoIsNullable(){
				    return false;
				}
				public Boolean fechaNacimientoAfiliadoIsKey(){
				    return false;
				}
				public Integer fechaNacimientoAfiliadoLength(){
				    return 10;
				}
				public Integer fechaNacimientoAfiliadoPrecision(){
				    return 0;
				}
				public String fechaNacimientoAfiliadoDefault(){
				
					return null;
				
				}
				public String fechaNacimientoAfiliadoComment(){
				
				    return "";
				
				}
				public String fechaNacimientoAfiliadoPattern(){
				
					return "dd/MM/yyyy";
				
				}
				public String fechaNacimientoAfiliadoOriginalDbColumnName(){
				
					return "fechaNacimientoAfiliado";
				
				}

				
			    public char generoAfiliado = ' ';

				public char getGeneroAfiliado () {
					return this.generoAfiliado;
				}

				public Boolean generoAfiliadoIsNullable(){
				    return false;
				}
				public Boolean generoAfiliadoIsKey(){
				    return false;
				}
				public Integer generoAfiliadoLength(){
				    return 1;
				}
				public Integer generoAfiliadoPrecision(){
				    return 0;
				}
				public String generoAfiliadoDefault(){
				
					return "";
				
				}
				public String generoAfiliadoComment(){
				
				    return "";
				
				}
				public String generoAfiliadoPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String generoAfiliadoOriginalDbColumnName(){
				
					return "generoAfiliado";
				
				}

				
			    public char tipoAfiliado = ' ';

				public char getTipoAfiliado () {
					return this.tipoAfiliado;
				}

				public Boolean tipoAfiliadoIsNullable(){
				    return false;
				}
				public Boolean tipoAfiliadoIsKey(){
				    return false;
				}
				public Integer tipoAfiliadoLength(){
				    return 1;
				}
				public Integer tipoAfiliadoPrecision(){
				    return 0;
				}
				public String tipoAfiliadoDefault(){
				
					return null;
				
				}
				public String tipoAfiliadoComment(){
				
				    return "";
				
				}
				public String tipoAfiliadoPattern(){
				
					return "";
				
				}
				public String tipoAfiliadoOriginalDbColumnName(){
				
					return "tipoAfiliado";
				
				}

				
			    public int codigoDepartamentoAfiliado;

				public int getCodigoDepartamentoAfiliado () {
					return this.codigoDepartamentoAfiliado;
				}

				public Boolean codigoDepartamentoAfiliadoIsNullable(){
				    return false;
				}
				public Boolean codigoDepartamentoAfiliadoIsKey(){
				    return false;
				}
				public Integer codigoDepartamentoAfiliadoLength(){
				    return 2;
				}
				public Integer codigoDepartamentoAfiliadoPrecision(){
				    return 0;
				}
				public String codigoDepartamentoAfiliadoDefault(){
				
					return null;
				
				}
				public String codigoDepartamentoAfiliadoComment(){
				
				    return "";
				
				}
				public String codigoDepartamentoAfiliadoPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String codigoDepartamentoAfiliadoOriginalDbColumnName(){
				
					return "codigoDepartamentoAfiliado";
				
				}

				
			    public int codigoMunicipioAfiliado;

				public int getCodigoMunicipioAfiliado () {
					return this.codigoMunicipioAfiliado;
				}

				public Boolean codigoMunicipioAfiliadoIsNullable(){
				    return false;
				}
				public Boolean codigoMunicipioAfiliadoIsKey(){
				    return false;
				}
				public Integer codigoMunicipioAfiliadoLength(){
				    return 3;
				}
				public Integer codigoMunicipioAfiliadoPrecision(){
				    return 0;
				}
				public String codigoMunicipioAfiliadoDefault(){
				
					return null;
				
				}
				public String codigoMunicipioAfiliadoComment(){
				
				    return "";
				
				}
				public String codigoMunicipioAfiliadoPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String codigoMunicipioAfiliadoOriginalDbColumnName(){
				
					return "codigoMunicipioAfiliado";
				
				}

				
			    public java.util.Date fechaAfiliacionAfiliado;

				public java.util.Date getFechaAfiliacionAfiliado () {
					return this.fechaAfiliacionAfiliado;
				}

				public Boolean fechaAfiliacionAfiliadoIsNullable(){
				    return false;
				}
				public Boolean fechaAfiliacionAfiliadoIsKey(){
				    return false;
				}
				public Integer fechaAfiliacionAfiliadoLength(){
				    return 10;
				}
				public Integer fechaAfiliacionAfiliadoPrecision(){
				    return 0;
				}
				public String fechaAfiliacionAfiliadoDefault(){
				
					return null;
				
				}
				public String fechaAfiliacionAfiliadoComment(){
				
				    return "";
				
				}
				public String fechaAfiliacionAfiliadoPattern(){
				
					return "dd/MM/yyyy";
				
				}
				public String fechaAfiliacionAfiliadoOriginalDbColumnName(){
				
					return "fechaAfiliacionAfiliado";
				
				}

				
			    public java.util.Date fechaDesafiliacionAfiliado;

				public java.util.Date getFechaDesafiliacionAfiliado () {
					return this.fechaDesafiliacionAfiliado;
				}

				public Boolean fechaDesafiliacionAfiliadoIsNullable(){
				    return false;
				}
				public Boolean fechaDesafiliacionAfiliadoIsKey(){
				    return false;
				}
				public Integer fechaDesafiliacionAfiliadoLength(){
				    return 10;
				}
				public Integer fechaDesafiliacionAfiliadoPrecision(){
				    return 0;
				}
				public String fechaDesafiliacionAfiliadoDefault(){
				
					return null;
				
				}
				public String fechaDesafiliacionAfiliadoComment(){
				
				    return "";
				
				}
				public String fechaDesafiliacionAfiliadoPattern(){
				
					return "dd/MM/yyyy";
				
				}
				public String fechaDesafiliacionAfiliadoOriginalDbColumnName(){
				
					return "fechaDesafiliacionAfiliado";
				
				}

				
			    public String glosaArchivo;

				public String getGlosaArchivo () {
					return this.glosaArchivo;
				}

				public Boolean glosaArchivoIsNullable(){
				    return true;
				}
				public Boolean glosaArchivoIsKey(){
				    return false;
				}
				public Integer glosaArchivoLength(){
				    return 0;
				}
				public Integer glosaArchivoPrecision(){
				    return 0;
				}
				public String glosaArchivoDefault(){
				
					return null;
				
				}
				public String glosaArchivoComment(){
				
				    return "";
				
				}
				public String glosaArchivoPattern(){
				
					return "";
				
				}
				public String glosaArchivoOriginalDbColumnName(){
				
					return "glosaArchivo";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.numeroIdentificacionAfiliado == null) ? 0 : this.numeroIdentificacionAfiliado.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row1Struct other = (row1Struct) obj;
		
						if (this.numeroIdentificacionAfiliado == null) {
							if (other.numeroIdentificacionAfiliado != null)
								return false;
						
						} else if (!this.numeroIdentificacionAfiliado.equals(other.numeroIdentificacionAfiliado))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row1Struct other) {

		other.codFuerza = this.codFuerza;
	            other.tipoDocumentoTitular = this.tipoDocumentoTitular;
	            other.numeroDocumentoTitular = this.numeroDocumentoTitular;
	            other.tipoIdentificacionAfiliado = this.tipoIdentificacionAfiliado;
	            other.numeroIdentificacionAfiliado = this.numeroIdentificacionAfiliado;
	            other.primerApellidoAfiliado = this.primerApellidoAfiliado;
	            other.segundoApellidoAfiliado = this.segundoApellidoAfiliado;
	            other.primerNombreAfiliado = this.primerNombreAfiliado;
	            other.segundoNombreAfiliado = this.segundoNombreAfiliado;
	            other.fechaNacimientoAfiliado = this.fechaNacimientoAfiliado;
	            other.generoAfiliado = this.generoAfiliado;
	            other.tipoAfiliado = this.tipoAfiliado;
	            other.codigoDepartamentoAfiliado = this.codigoDepartamentoAfiliado;
	            other.codigoMunicipioAfiliado = this.codigoMunicipioAfiliado;
	            other.fechaAfiliacionAfiliado = this.fechaAfiliacionAfiliado;
	            other.fechaDesafiliacionAfiliado = this.fechaDesafiliacionAfiliado;
	            other.glosaArchivo = this.glosaArchivo;
	            
	}

	public void copyKeysDataTo(row1Struct other) {

		other.numeroIdentificacionAfiliado = this.numeroIdentificacionAfiliado;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_PRINCIPAL_MinSaludEtapa2NuevosRegistros.length) {
				if(length < 1024 && commonByteArray_AFI_PRINCIPAL_MinSaludEtapa2NuevosRegistros.length == 0) {
   					commonByteArray_AFI_PRINCIPAL_MinSaludEtapa2NuevosRegistros = new byte[1024];
				} else {
   					commonByteArray_AFI_PRINCIPAL_MinSaludEtapa2NuevosRegistros = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_PRINCIPAL_MinSaludEtapa2NuevosRegistros, 0, length);
			strReturn = new String(commonByteArray_AFI_PRINCIPAL_MinSaludEtapa2NuevosRegistros, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_PRINCIPAL_MinSaludEtapa2NuevosRegistros.length) {
				if(length < 1024 && commonByteArray_AFI_PRINCIPAL_MinSaludEtapa2NuevosRegistros.length == 0) {
   					commonByteArray_AFI_PRINCIPAL_MinSaludEtapa2NuevosRegistros = new byte[1024];
				} else {
   					commonByteArray_AFI_PRINCIPAL_MinSaludEtapa2NuevosRegistros = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_PRINCIPAL_MinSaludEtapa2NuevosRegistros, 0, length);
			strReturn = new String(commonByteArray_AFI_PRINCIPAL_MinSaludEtapa2NuevosRegistros, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_PRINCIPAL_MinSaludEtapa2NuevosRegistros) {

        	try {

        		int length = 0;
		
					this.codFuerza = readString(dis);
					
					this.tipoDocumentoTitular = readString(dis);
					
					this.numeroDocumentoTitular = readString(dis);
					
					this.tipoIdentificacionAfiliado = readString(dis);
					
					this.numeroIdentificacionAfiliado = readString(dis);
					
					this.primerApellidoAfiliado = readString(dis);
					
					this.segundoApellidoAfiliado = readString(dis);
					
					this.primerNombreAfiliado = readString(dis);
					
					this.segundoNombreAfiliado = readString(dis);
					
					this.fechaNacimientoAfiliado = readDate(dis);
					
			        this.generoAfiliado = dis.readChar();
					
			        this.tipoAfiliado = dis.readChar();
					
			        this.codigoDepartamentoAfiliado = dis.readInt();
					
			        this.codigoMunicipioAfiliado = dis.readInt();
					
					this.fechaAfiliacionAfiliado = readDate(dis);
					
					this.fechaDesafiliacionAfiliado = readDate(dis);
					
					this.glosaArchivo = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_PRINCIPAL_MinSaludEtapa2NuevosRegistros) {

        	try {

        		int length = 0;
		
					this.codFuerza = readString(dis);
					
					this.tipoDocumentoTitular = readString(dis);
					
					this.numeroDocumentoTitular = readString(dis);
					
					this.tipoIdentificacionAfiliado = readString(dis);
					
					this.numeroIdentificacionAfiliado = readString(dis);
					
					this.primerApellidoAfiliado = readString(dis);
					
					this.segundoApellidoAfiliado = readString(dis);
					
					this.primerNombreAfiliado = readString(dis);
					
					this.segundoNombreAfiliado = readString(dis);
					
					this.fechaNacimientoAfiliado = readDate(dis);
					
			        this.generoAfiliado = dis.readChar();
					
			        this.tipoAfiliado = dis.readChar();
					
			        this.codigoDepartamentoAfiliado = dis.readInt();
					
			        this.codigoMunicipioAfiliado = dis.readInt();
					
					this.fechaAfiliacionAfiliado = readDate(dis);
					
					this.fechaDesafiliacionAfiliado = readDate(dis);
					
					this.glosaArchivo = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.codFuerza,dos);
					
					// String
				
						writeString(this.tipoDocumentoTitular,dos);
					
					// String
				
						writeString(this.numeroDocumentoTitular,dos);
					
					// String
				
						writeString(this.tipoIdentificacionAfiliado,dos);
					
					// String
				
						writeString(this.numeroIdentificacionAfiliado,dos);
					
					// String
				
						writeString(this.primerApellidoAfiliado,dos);
					
					// String
				
						writeString(this.segundoApellidoAfiliado,dos);
					
					// String
				
						writeString(this.primerNombreAfiliado,dos);
					
					// String
				
						writeString(this.segundoNombreAfiliado,dos);
					
					// java.util.Date
				
						writeDate(this.fechaNacimientoAfiliado,dos);
					
					// char
				
		            	dos.writeChar(this.generoAfiliado);
					
					// char
				
		            	dos.writeChar(this.tipoAfiliado);
					
					// int
				
		            	dos.writeInt(this.codigoDepartamentoAfiliado);
					
					// int
				
		            	dos.writeInt(this.codigoMunicipioAfiliado);
					
					// java.util.Date
				
						writeDate(this.fechaAfiliacionAfiliado,dos);
					
					// java.util.Date
				
						writeDate(this.fechaDesafiliacionAfiliado,dos);
					
					// String
				
						writeString(this.glosaArchivo,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.codFuerza,dos);
					
					// String
				
						writeString(this.tipoDocumentoTitular,dos);
					
					// String
				
						writeString(this.numeroDocumentoTitular,dos);
					
					// String
				
						writeString(this.tipoIdentificacionAfiliado,dos);
					
					// String
				
						writeString(this.numeroIdentificacionAfiliado,dos);
					
					// String
				
						writeString(this.primerApellidoAfiliado,dos);
					
					// String
				
						writeString(this.segundoApellidoAfiliado,dos);
					
					// String
				
						writeString(this.primerNombreAfiliado,dos);
					
					// String
				
						writeString(this.segundoNombreAfiliado,dos);
					
					// java.util.Date
				
						writeDate(this.fechaNacimientoAfiliado,dos);
					
					// char
				
		            	dos.writeChar(this.generoAfiliado);
					
					// char
				
		            	dos.writeChar(this.tipoAfiliado);
					
					// int
				
		            	dos.writeInt(this.codigoDepartamentoAfiliado);
					
					// int
				
		            	dos.writeInt(this.codigoMunicipioAfiliado);
					
					// java.util.Date
				
						writeDate(this.fechaAfiliacionAfiliado,dos);
					
					// java.util.Date
				
						writeDate(this.fechaDesafiliacionAfiliado,dos);
					
					// String
				
						writeString(this.glosaArchivo,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("codFuerza="+codFuerza);
		sb.append(",tipoDocumentoTitular="+tipoDocumentoTitular);
		sb.append(",numeroDocumentoTitular="+numeroDocumentoTitular);
		sb.append(",tipoIdentificacionAfiliado="+tipoIdentificacionAfiliado);
		sb.append(",numeroIdentificacionAfiliado="+numeroIdentificacionAfiliado);
		sb.append(",primerApellidoAfiliado="+primerApellidoAfiliado);
		sb.append(",segundoApellidoAfiliado="+segundoApellidoAfiliado);
		sb.append(",primerNombreAfiliado="+primerNombreAfiliado);
		sb.append(",segundoNombreAfiliado="+segundoNombreAfiliado);
		sb.append(",fechaNacimientoAfiliado="+String.valueOf(fechaNacimientoAfiliado));
		sb.append(",generoAfiliado="+String.valueOf(generoAfiliado));
		sb.append(",tipoAfiliado="+String.valueOf(tipoAfiliado));
		sb.append(",codigoDepartamentoAfiliado="+String.valueOf(codigoDepartamentoAfiliado));
		sb.append(",codigoMunicipioAfiliado="+String.valueOf(codigoMunicipioAfiliado));
		sb.append(",fechaAfiliacionAfiliado="+String.valueOf(fechaAfiliacionAfiliado));
		sb.append(",fechaDesafiliacionAfiliado="+String.valueOf(fechaDesafiliacionAfiliado));
		sb.append(",glosaArchivo="+glosaArchivo);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row1Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.numeroIdentificacionAfiliado, other.numeroIdentificacionAfiliado);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tFileInputDelimited_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row1Struct row1 = new row1Struct();




	
	/**
	 * [tHashOutput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashOutput_1", false);
		start_Hash.put("tHashOutput_1", System.currentTimeMillis());
		
	
	currentComponent="tHashOutput_1";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row1");
					}
				
		int tos_count_tHashOutput_1 = 0;
		



org.talend.designer.components.hashfile.common.MapHashFile mf_tHashOutput_1=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();    
		org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row1Struct> tHashFile_tHashOutput_1 = null;
		String hashKey_tHashOutput_1 = "tHashFile_MinSaludEtapa2NuevosRegistros_" + pid + "_tHashOutput_1";
			synchronized(org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.get(hashKey_tHashOutput_1)){
			    if(mf_tHashOutput_1.getResourceMap().get(hashKey_tHashOutput_1) == null){
	      		    mf_tHashOutput_1.getResourceMap().put(hashKey_tHashOutput_1, new org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row1Struct>(org.talend.designer.components.hashfile.common.MATCHING_MODE.KEEP_ALL));
	      		    tHashFile_tHashOutput_1 = mf_tHashOutput_1.getResourceMap().get(hashKey_tHashOutput_1);
			    }else{
			    	tHashFile_tHashOutput_1 = mf_tHashOutput_1.getResourceMap().get(hashKey_tHashOutput_1);
			    }
			}
        int nb_line_tHashOutput_1 = 0;

 



/**
 * [tHashOutput_1 begin ] stop
 */



	
	/**
	 * [tFileInputDelimited_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputDelimited_1", false);
		start_Hash.put("tFileInputDelimited_1", System.currentTimeMillis());
		
	
	currentComponent="tFileInputDelimited_1";
	
	
		int tos_count_tFileInputDelimited_1 = 0;
		
	
	
	
 
	
	
	final routines.system.RowState rowstate_tFileInputDelimited_1 = new routines.system.RowState();
	
	
				int nb_line_tFileInputDelimited_1 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_1 = null;
				int limit_tFileInputDelimited_1 = -1;
				try{
					
						Object filename_tFileInputDelimited_1 = context.fileSystem_Path+"/"+context.fileSystem_Area+"/"+context.infoNombreArchivo;
						if(filename_tFileInputDelimited_1 instanceof java.io.InputStream){
							
			int footer_value_tFileInputDelimited_1 = 0, random_value_tFileInputDelimited_1 = -1;
			if(footer_value_tFileInputDelimited_1 >0 || random_value_tFileInputDelimited_1 > 0){
				throw new java.lang.Exception("When the input source is a stream,footer and random shouldn't be bigger than 0.");				
			}
		
						}
						try {
							fid_tFileInputDelimited_1 = new org.talend.fileprocess.FileInputDelimited(context.fileSystem_Path+"/"+context.fileSystem_Area+"/"+context.infoNombreArchivo, "UTF-8",",","\n",false,0,0,
									limit_tFileInputDelimited_1
								,-1, false);
						} catch(java.lang.Exception e) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",e.getMessage());
							
								
								System.err.println(e.getMessage());
							
						}
					
				    
					while (fid_tFileInputDelimited_1!=null && fid_tFileInputDelimited_1.nextRecord()) {
						rowstate_tFileInputDelimited_1.reset();
						
			    						row1 = null;			
												
									boolean whetherReject_tFileInputDelimited_1 = false;
									row1 = new row1Struct();
									try {
										
				int columnIndexWithD_tFileInputDelimited_1 = 0;
				
					String temp = ""; 
				
					columnIndexWithD_tFileInputDelimited_1 = 0;
					
							row1.codFuerza = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 1;
					
							row1.tipoDocumentoTitular = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 2;
					
							row1.numeroDocumentoTitular = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 3;
					
							row1.tipoIdentificacionAfiliado = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 4;
					
							row1.numeroIdentificacionAfiliado = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 5;
					
							row1.primerApellidoAfiliado = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 6;
					
							row1.segundoApellidoAfiliado = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 7;
					
							row1.primerNombreAfiliado = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 8;
					
							row1.segundoNombreAfiliado = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 9;
					
						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						if(temp.length() > 0) {
							
								try {
								
    									row1.fechaNacimientoAfiliado = ParserUtils.parseTo_Date(temp, "dd/MM/yyyy");
    								
    							} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"fechaNacimientoAfiliado", "row1", temp, ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
								}
    							
						} else {						
							
								
									row1.fechaNacimientoAfiliado = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_1 = 10;
					
						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						if(temp.length() > 0) {
							
								try {
								
    								row1.generoAfiliado = ParserUtils.parseTo_char(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"generoAfiliado", "row1", temp, ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
								}
    							
						} else {						
							
								rowstate_tFileInputDelimited_1.setException(new RuntimeException("Value is empty for column : 'generoAfiliado' in 'row1' connection, value is invalid or this column should be nullable or have a default value."));
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_1 = 11;
					
						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						if(temp.length() > 0) {
							
								try {
								
    								row1.tipoAfiliado = ParserUtils.parseTo_char(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"tipoAfiliado", "row1", temp, ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
								}
    							
						} else {						
							
								rowstate_tFileInputDelimited_1.setException(new RuntimeException("Value is empty for column : 'tipoAfiliado' in 'row1' connection, value is invalid or this column should be nullable or have a default value."));
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_1 = 12;
					
						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						if(temp.length() > 0) {
							
								try {
								
    								row1.codigoDepartamentoAfiliado = ParserUtils.parseTo_int(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"codigoDepartamentoAfiliado", "row1", temp, ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
								}
    							
						} else {						
							
								rowstate_tFileInputDelimited_1.setException(new RuntimeException("Value is empty for column : 'codigoDepartamentoAfiliado' in 'row1' connection, value is invalid or this column should be nullable or have a default value."));
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_1 = 13;
					
						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						if(temp.length() > 0) {
							
								try {
								
    								row1.codigoMunicipioAfiliado = ParserUtils.parseTo_int(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"codigoMunicipioAfiliado", "row1", temp, ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
								}
    							
						} else {						
							
								rowstate_tFileInputDelimited_1.setException(new RuntimeException("Value is empty for column : 'codigoMunicipioAfiliado' in 'row1' connection, value is invalid or this column should be nullable or have a default value."));
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_1 = 14;
					
						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						if(temp.length() > 0) {
							
								try {
								
    									row1.fechaAfiliacionAfiliado = ParserUtils.parseTo_Date(temp, "dd/MM/yyyy");
    								
    							} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"fechaAfiliacionAfiliado", "row1", temp, ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
								}
    							
						} else {						
							
								
									row1.fechaAfiliacionAfiliado = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_1 = 15;
					
						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						if(temp.length() > 0) {
							
								try {
								
    									row1.fechaDesafiliacionAfiliado = ParserUtils.parseTo_Date(temp, "dd/MM/yyyy");
    								
    							} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"fechaDesafiliacionAfiliado", "row1", temp, ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
								}
    							
						} else {						
							
								
									row1.fechaDesafiliacionAfiliado = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_1 = 16;
					
							row1.glosaArchivo = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
				
										
										if(rowstate_tFileInputDelimited_1.getException()!=null) {
											throw rowstate_tFileInputDelimited_1.getException();
										}
										
										
							
			    					} catch (java.lang.Exception e) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",e.getMessage());
			        					whetherReject_tFileInputDelimited_1 = true;
			        					
			                					System.err.println(e.getMessage());
			                					row1 = null;
			                				
										
			    					}
								

 



/**
 * [tFileInputDelimited_1 begin ] stop
 */
	
	/**
	 * [tFileInputDelimited_1 main ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_1";
	
	

 


	tos_count_tFileInputDelimited_1++;

/**
 * [tFileInputDelimited_1 main ] stop
 */
	
	/**
	 * [tFileInputDelimited_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_1";
	
	

 



/**
 * [tFileInputDelimited_1 process_data_begin ] stop
 */
// Start of branch "row1"
if(row1 != null) { 



	
	/**
	 * [tHashOutput_1 main ] start
	 */

	

	
	
	currentComponent="tHashOutput_1";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row1"
						
						);
					}
					



    
		row1Struct oneRow_tHashOutput_1 = new row1Struct();
				
					oneRow_tHashOutput_1.codFuerza = row1.codFuerza;
					oneRow_tHashOutput_1.tipoDocumentoTitular = row1.tipoDocumentoTitular;
					oneRow_tHashOutput_1.numeroDocumentoTitular = row1.numeroDocumentoTitular;
					oneRow_tHashOutput_1.tipoIdentificacionAfiliado = row1.tipoIdentificacionAfiliado;
					oneRow_tHashOutput_1.numeroIdentificacionAfiliado = row1.numeroIdentificacionAfiliado;
					oneRow_tHashOutput_1.primerApellidoAfiliado = row1.primerApellidoAfiliado;
					oneRow_tHashOutput_1.segundoApellidoAfiliado = row1.segundoApellidoAfiliado;
					oneRow_tHashOutput_1.primerNombreAfiliado = row1.primerNombreAfiliado;
					oneRow_tHashOutput_1.segundoNombreAfiliado = row1.segundoNombreAfiliado;
					oneRow_tHashOutput_1.fechaNacimientoAfiliado = row1.fechaNacimientoAfiliado;
					oneRow_tHashOutput_1.generoAfiliado = row1.generoAfiliado;
					oneRow_tHashOutput_1.tipoAfiliado = row1.tipoAfiliado;
					oneRow_tHashOutput_1.codigoDepartamentoAfiliado = row1.codigoDepartamentoAfiliado;
					oneRow_tHashOutput_1.codigoMunicipioAfiliado = row1.codigoMunicipioAfiliado;
					oneRow_tHashOutput_1.fechaAfiliacionAfiliado = row1.fechaAfiliacionAfiliado;
					oneRow_tHashOutput_1.fechaDesafiliacionAfiliado = row1.fechaDesafiliacionAfiliado;
					oneRow_tHashOutput_1.glosaArchivo = row1.glosaArchivo;
		
        tHashFile_tHashOutput_1.put(oneRow_tHashOutput_1);
        nb_line_tHashOutput_1 ++;

 


	tos_count_tHashOutput_1++;

/**
 * [tHashOutput_1 main ] stop
 */
	
	/**
	 * [tHashOutput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashOutput_1";
	
	

 



/**
 * [tHashOutput_1 process_data_begin ] stop
 */
	
	/**
	 * [tHashOutput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashOutput_1";
	
	

 



/**
 * [tHashOutput_1 process_data_end ] stop
 */

} // End of branch "row1"




	
	/**
	 * [tFileInputDelimited_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_1";
	
	

 



/**
 * [tFileInputDelimited_1 process_data_end ] stop
 */
	
	/**
	 * [tFileInputDelimited_1 end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_1";
	
	



            }
            }finally{
                if(!((Object)(context.fileSystem_Path+"/"+context.fileSystem_Area+"/"+context.infoNombreArchivo) instanceof java.io.InputStream)){
                	if(fid_tFileInputDelimited_1!=null){
                		fid_tFileInputDelimited_1.close();
                	}
                }
                if(fid_tFileInputDelimited_1!=null){
                	globalMap.put("tFileInputDelimited_1_NB_LINE", fid_tFileInputDelimited_1.getRowNumber());
					
                }
			}
			  

 

ok_Hash.put("tFileInputDelimited_1", true);
end_Hash.put("tFileInputDelimited_1", System.currentTimeMillis());




/**
 * [tFileInputDelimited_1 end ] stop
 */

	
	/**
	 * [tHashOutput_1 end ] start
	 */

	

	
	
	currentComponent="tHashOutput_1";
	
	
globalMap.put("tHashOutput_1_NB_LINE", nb_line_tHashOutput_1);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row1");
			  	}
			  	
 

ok_Hash.put("tHashOutput_1", true);
end_Hash.put("tHashOutput_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk8", 0, "ok");
				}
				tOracleInput_5Process(globalMap);



/**
 * [tHashOutput_1 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileInputDelimited_1 finally ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_1";
	
	

 



/**
 * [tFileInputDelimited_1 finally ] stop
 */

	
	/**
	 * [tHashOutput_1 finally ] start
	 */

	

	
	
	currentComponent="tHashOutput_1";
	
	

 



/**
 * [tHashOutput_1 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 1);
	}
	


public static class row11Struct implements routines.system.IPersistableRow<row11Struct> {
    final static byte[] commonByteArrayLock_AFI_PRINCIPAL_MinSaludEtapa2NuevosRegistros = new byte[0];
    static byte[] commonByteArray_AFI_PRINCIPAL_MinSaludEtapa2NuevosRegistros = new byte[0];

	
			    public Integer ID;

				public Integer getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return true;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return 0;
				}
				public Integer IDPrecision(){
				    return 0;
				}
				public String IDDefault(){
				
					return null;
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public String NOMBRE;

				public String getNOMBRE () {
					return this.NOMBRE;
				}

				public Boolean NOMBREIsNullable(){
				    return true;
				}
				public Boolean NOMBREIsKey(){
				    return false;
				}
				public Integer NOMBRELength(){
				    return 0;
				}
				public Integer NOMBREPrecision(){
				    return 0;
				}
				public String NOMBREDefault(){
				
					return null;
				
				}
				public String NOMBREComment(){
				
				    return "";
				
				}
				public String NOMBREPattern(){
				
					return "";
				
				}
				public String NOMBREOriginalDbColumnName(){
				
					return "NOMBRE";
				
				}

				
			    public String SIGLA;

				public String getSIGLA () {
					return this.SIGLA;
				}

				public Boolean SIGLAIsNullable(){
				    return true;
				}
				public Boolean SIGLAIsKey(){
				    return false;
				}
				public Integer SIGLALength(){
				    return 0;
				}
				public Integer SIGLAPrecision(){
				    return 0;
				}
				public String SIGLADefault(){
				
					return null;
				
				}
				public String SIGLAComment(){
				
				    return "";
				
				}
				public String SIGLAPattern(){
				
					return "";
				
				}
				public String SIGLAOriginalDbColumnName(){
				
					return "SIGLA";
				
				}

				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_PRINCIPAL_MinSaludEtapa2NuevosRegistros.length) {
				if(length < 1024 && commonByteArray_AFI_PRINCIPAL_MinSaludEtapa2NuevosRegistros.length == 0) {
   					commonByteArray_AFI_PRINCIPAL_MinSaludEtapa2NuevosRegistros = new byte[1024];
				} else {
   					commonByteArray_AFI_PRINCIPAL_MinSaludEtapa2NuevosRegistros = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_PRINCIPAL_MinSaludEtapa2NuevosRegistros, 0, length);
			strReturn = new String(commonByteArray_AFI_PRINCIPAL_MinSaludEtapa2NuevosRegistros, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_PRINCIPAL_MinSaludEtapa2NuevosRegistros.length) {
				if(length < 1024 && commonByteArray_AFI_PRINCIPAL_MinSaludEtapa2NuevosRegistros.length == 0) {
   					commonByteArray_AFI_PRINCIPAL_MinSaludEtapa2NuevosRegistros = new byte[1024];
				} else {
   					commonByteArray_AFI_PRINCIPAL_MinSaludEtapa2NuevosRegistros = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_PRINCIPAL_MinSaludEtapa2NuevosRegistros, 0, length);
			strReturn = new String(commonByteArray_AFI_PRINCIPAL_MinSaludEtapa2NuevosRegistros, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_PRINCIPAL_MinSaludEtapa2NuevosRegistros) {

        	try {

        		int length = 0;
		
						this.ID = readInteger(dis);
					
					this.NOMBRE = readString(dis);
					
					this.SIGLA = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_PRINCIPAL_MinSaludEtapa2NuevosRegistros) {

        	try {

        		int length = 0;
		
						this.ID = readInteger(dis);
					
					this.NOMBRE = readString(dis);
					
					this.SIGLA = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.ID,dos);
					
					// String
				
						writeString(this.NOMBRE,dos);
					
					// String
				
						writeString(this.SIGLA,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.ID,dos);
					
					// String
				
						writeString(this.NOMBRE,dos);
					
					// String
				
						writeString(this.SIGLA,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",NOMBRE="+NOMBRE);
		sb.append(",SIGLA="+SIGLA);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row11Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_5Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_5_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row11Struct row11 = new row11Struct();




	
	/**
	 * [tHashOutput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashOutput_2", false);
		start_Hash.put("tHashOutput_2", System.currentTimeMillis());
		
	
	currentComponent="tHashOutput_2";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row11");
					}
				
		int tos_count_tHashOutput_2 = 0;
		



org.talend.designer.components.hashfile.common.MapHashFile mf_tHashOutput_2=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();    
		org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row11Struct> tHashFile_tHashOutput_2 = null;
		String hashKey_tHashOutput_2 = "tHashFile_MinSaludEtapa2NuevosRegistros_" + pid + "_tHashOutput_2";
			synchronized(org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.get(hashKey_tHashOutput_2)){
			    if(mf_tHashOutput_2.getResourceMap().get(hashKey_tHashOutput_2) == null){
	      		    mf_tHashOutput_2.getResourceMap().put(hashKey_tHashOutput_2, new org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row11Struct>(org.talend.designer.components.hashfile.common.MATCHING_MODE.KEEP_ALL));
	      		    tHashFile_tHashOutput_2 = mf_tHashOutput_2.getResourceMap().get(hashKey_tHashOutput_2);
			    }else{
			    	tHashFile_tHashOutput_2 = mf_tHashOutput_2.getResourceMap().get(hashKey_tHashOutput_2);
			    }
			}
        int nb_line_tHashOutput_2 = 0;

 



/**
 * [tHashOutput_2 begin ] stop
 */



	
	/**
	 * [tOracleInput_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_5", false);
		start_Hash.put("tOracleInput_5", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_5";
	
	
		int tos_count_tOracleInput_5 = 0;
		
	


	
		    int nb_line_tOracleInput_5 = 0;
		    java.sql.Connection conn_tOracleInput_5 = null;
				conn_tOracleInput_5 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");
				
                boolean isTimeZoneNull_tOracleInput_5 = false;
				boolean isConnectionWrapped_tOracleInput_5 = !(conn_tOracleInput_5 instanceof oracle.jdbc.OracleConnection) && conn_tOracleInput_5.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tOracleInput_5 = null;
                if (isConnectionWrapped_tOracleInput_5) {
					unwrappedOraConn_tOracleInput_5 = conn_tOracleInput_5.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tOracleInput_5 != null) {
                        isTimeZoneNull_tOracleInput_5 = (unwrappedOraConn_tOracleInput_5.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tOracleInput_5 = (((oracle.jdbc.OracleConnection)conn_tOracleInput_5).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tOracleInput_5) {
					java.sql.Statement stmtGetTZ_tOracleInput_5 = conn_tOracleInput_5.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_5 = stmtGetTZ_tOracleInput_5.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_5 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tOracleInput_5.next()) {
						sessionTimezone_tOracleInput_5 = rsGetTZ_tOracleInput_5.getString(1);
					}
					if (isConnectionWrapped_tOracleInput_5 && unwrappedOraConn_tOracleInput_5 != null) {
                        unwrappedOraConn_tOracleInput_5.setSessionTimeZone(sessionTimezone_tOracleInput_5);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_5).setSessionTimeZone(sessionTimezone_tOracleInput_5);
                    }
				}
			
		    
			java.sql.Statement stmt_tOracleInput_5 = conn_tOracleInput_5.createStatement();

		    String dbquery_tOracleInput_5 = "SELECT \n	GTD.\"ID\",\n	GTD.NOMBRE,\n	GTD.SIGLA\nFROM\n	SALUDSIS.GEN_TDOCUMENTOS GTD\nWHERE\n	GTD.ESTREGISTRO_ID = 1";
		    

		    globalMap.put("tOracleInput_5_QUERY",dbquery_tOracleInput_5);

		    java.sql.ResultSet rs_tOracleInput_5 = null;

		    try {
		    	rs_tOracleInput_5 = stmt_tOracleInput_5.executeQuery(dbquery_tOracleInput_5);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_5 = rs_tOracleInput_5.getMetaData();
		    	int colQtyInRs_tOracleInput_5 = rsmd_tOracleInput_5.getColumnCount();

		    String tmpContent_tOracleInput_5 = null;
		    
		    
		    while (rs_tOracleInput_5.next()) {
		        nb_line_tOracleInput_5++;
		        
							if(colQtyInRs_tOracleInput_5 < 1) {
								row11.ID = null;
							} else {
		                          
					if(rs_tOracleInput_5.getObject(1) != null) {
						row11.ID = rs_tOracleInput_5.getInt(1);
					} else {
				
						row11.ID = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_5 < 2) {
								row11.NOMBRE = null;
							} else {
	                         		
        	row11.NOMBRE = routines.system.JDBCUtil.getString(rs_tOracleInput_5, 2, false);
		                    }
							if(colQtyInRs_tOracleInput_5 < 3) {
								row11.SIGLA = null;
							} else {
	                         		
        	row11.SIGLA = routines.system.JDBCUtil.getString(rs_tOracleInput_5, 3, false);
		                    }
					




 



/**
 * [tOracleInput_5 begin ] stop
 */
	
	/**
	 * [tOracleInput_5 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_5";
	
	

 


	tos_count_tOracleInput_5++;

/**
 * [tOracleInput_5 main ] stop
 */
	
	/**
	 * [tOracleInput_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_5";
	
	

 



/**
 * [tOracleInput_5 process_data_begin ] stop
 */

	
	/**
	 * [tHashOutput_2 main ] start
	 */

	

	
	
	currentComponent="tHashOutput_2";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row11"
						
						);
					}
					



    
		row11Struct oneRow_tHashOutput_2 = new row11Struct();
				
					oneRow_tHashOutput_2.ID = row11.ID;
					oneRow_tHashOutput_2.NOMBRE = row11.NOMBRE;
					oneRow_tHashOutput_2.SIGLA = row11.SIGLA;
		
        tHashFile_tHashOutput_2.put(oneRow_tHashOutput_2);
        nb_line_tHashOutput_2 ++;

 


	tos_count_tHashOutput_2++;

/**
 * [tHashOutput_2 main ] stop
 */
	
	/**
	 * [tHashOutput_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashOutput_2";
	
	

 



/**
 * [tHashOutput_2 process_data_begin ] stop
 */
	
	/**
	 * [tHashOutput_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashOutput_2";
	
	

 



/**
 * [tHashOutput_2 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_5";
	
	

 



/**
 * [tOracleInput_5 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_5 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_5";
	
	

}
}finally{
	if (rs_tOracleInput_5 != null) {
		rs_tOracleInput_5.close();
	}
	if (stmt_tOracleInput_5 != null) {
		stmt_tOracleInput_5.close();
	}
}

globalMap.put("tOracleInput_5_NB_LINE",nb_line_tOracleInput_5);
 

ok_Hash.put("tOracleInput_5", true);
end_Hash.put("tOracleInput_5", System.currentTimeMillis());




/**
 * [tOracleInput_5 end ] stop
 */

	
	/**
	 * [tHashOutput_2 end ] start
	 */

	

	
	
	currentComponent="tHashOutput_2";
	
	
globalMap.put("tHashOutput_2_NB_LINE", nb_line_tHashOutput_2);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row11");
			  	}
			  	
 

ok_Hash.put("tHashOutput_2", true);
end_Hash.put("tHashOutput_2", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk9", 0, "ok");
				}
				tOracleInput_1Process(globalMap);



/**
 * [tHashOutput_2 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleInput_5 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_5";
	
	

 



/**
 * [tOracleInput_5 finally ] stop
 */

	
	/**
	 * [tHashOutput_2 finally ] start
	 */

	

	
	
	currentComponent="tHashOutput_2";
	
	

 



/**
 * [tHashOutput_2 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_5_SUBPROCESS_STATE", 1);
	}
	


public static class row4Struct implements routines.system.IPersistableRow<row4Struct> {
    final static byte[] commonByteArrayLock_AFI_PRINCIPAL_MinSaludEtapa2NuevosRegistros = new byte[0];
    static byte[] commonByteArray_AFI_PRINCIPAL_MinSaludEtapa2NuevosRegistros = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public BigDecimal ID;

				public BigDecimal getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return false;
				}
				public Boolean IDIsKey(){
				    return true;
				}
				public Integer IDLength(){
				    return 22;
				}
				public Integer IDPrecision(){
				    return 0;
				}
				public String IDDefault(){
				
					return null;
				
				}
				public String IDComment(){
				
				    return "PK - Llave primaria";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public String GLOSA;

				public String getGLOSA () {
					return this.GLOSA;
				}

				public Boolean GLOSAIsNullable(){
				    return false;
				}
				public Boolean GLOSAIsKey(){
				    return false;
				}
				public Integer GLOSALength(){
				    return 6;
				}
				public Integer GLOSAPrecision(){
				    return 0;
				}
				public String GLOSADefault(){
				
					return null;
				
				}
				public String GLOSAComment(){
				
				    return "Codigo de la glosa";
				
				}
				public String GLOSAPattern(){
				
					return "";
				
				}
				public String GLOSAOriginalDbColumnName(){
				
					return "GLOSA";
				
				}

				
			    public String DESCRIPCION;

				public String getDESCRIPCION () {
					return this.DESCRIPCION;
				}

				public Boolean DESCRIPCIONIsNullable(){
				    return false;
				}
				public Boolean DESCRIPCIONIsKey(){
				    return false;
				}
				public Integer DESCRIPCIONLength(){
				    return 500;
				}
				public Integer DESCRIPCIONPrecision(){
				    return 0;
				}
				public String DESCRIPCIONDefault(){
				
					return null;
				
				}
				public String DESCRIPCIONComment(){
				
				    return "Descripcion de la glosa";
				
				}
				public String DESCRIPCIONPattern(){
				
					return "";
				
				}
				public String DESCRIPCIONOriginalDbColumnName(){
				
					return "DESCRIPCION";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.ID == null) ? 0 : this.ID.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row4Struct other = (row4Struct) obj;
		
						if (this.ID == null) {
							if (other.ID != null)
								return false;
						
						} else if (!this.ID.equals(other.ID))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row4Struct other) {

		other.ID = this.ID;
	            other.GLOSA = this.GLOSA;
	            other.DESCRIPCION = this.DESCRIPCION;
	            
	}

	public void copyKeysDataTo(row4Struct other) {

		other.ID = this.ID;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_PRINCIPAL_MinSaludEtapa2NuevosRegistros.length) {
				if(length < 1024 && commonByteArray_AFI_PRINCIPAL_MinSaludEtapa2NuevosRegistros.length == 0) {
   					commonByteArray_AFI_PRINCIPAL_MinSaludEtapa2NuevosRegistros = new byte[1024];
				} else {
   					commonByteArray_AFI_PRINCIPAL_MinSaludEtapa2NuevosRegistros = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_PRINCIPAL_MinSaludEtapa2NuevosRegistros, 0, length);
			strReturn = new String(commonByteArray_AFI_PRINCIPAL_MinSaludEtapa2NuevosRegistros, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_PRINCIPAL_MinSaludEtapa2NuevosRegistros.length) {
				if(length < 1024 && commonByteArray_AFI_PRINCIPAL_MinSaludEtapa2NuevosRegistros.length == 0) {
   					commonByteArray_AFI_PRINCIPAL_MinSaludEtapa2NuevosRegistros = new byte[1024];
				} else {
   					commonByteArray_AFI_PRINCIPAL_MinSaludEtapa2NuevosRegistros = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_PRINCIPAL_MinSaludEtapa2NuevosRegistros, 0, length);
			strReturn = new String(commonByteArray_AFI_PRINCIPAL_MinSaludEtapa2NuevosRegistros, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_PRINCIPAL_MinSaludEtapa2NuevosRegistros) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
					this.GLOSA = readString(dis);
					
					this.DESCRIPCION = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_PRINCIPAL_MinSaludEtapa2NuevosRegistros) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
					this.GLOSA = readString(dis);
					
					this.DESCRIPCION = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.ID);
					
					// String
				
						writeString(this.GLOSA,dos);
					
					// String
				
						writeString(this.DESCRIPCION,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ID);
					
					// String
				
						writeString(this.GLOSA,dos);
					
					// String
				
						writeString(this.DESCRIPCION,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",GLOSA="+GLOSA);
		sb.append(",DESCRIPCION="+DESCRIPCION);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row4Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.ID, other.ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row4Struct row4 = new row4Struct();




	
	/**
	 * [tHashOutput_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashOutput_3", false);
		start_Hash.put("tHashOutput_3", System.currentTimeMillis());
		
	
	currentComponent="tHashOutput_3";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row4");
					}
				
		int tos_count_tHashOutput_3 = 0;
		



org.talend.designer.components.hashfile.common.MapHashFile mf_tHashOutput_3=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();    
		org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row4Struct> tHashFile_tHashOutput_3 = null;
		String hashKey_tHashOutput_3 = "tHashFile_MinSaludEtapa2NuevosRegistros_" + pid + "_tHashOutput_3";
			synchronized(org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.get(hashKey_tHashOutput_3)){
			    if(mf_tHashOutput_3.getResourceMap().get(hashKey_tHashOutput_3) == null){
	      		    mf_tHashOutput_3.getResourceMap().put(hashKey_tHashOutput_3, new org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row4Struct>(org.talend.designer.components.hashfile.common.MATCHING_MODE.KEEP_ALL));
	      		    tHashFile_tHashOutput_3 = mf_tHashOutput_3.getResourceMap().get(hashKey_tHashOutput_3);
			    }else{
			    	tHashFile_tHashOutput_3 = mf_tHashOutput_3.getResourceMap().get(hashKey_tHashOutput_3);
			    }
			}
        int nb_line_tHashOutput_3 = 0;

 



/**
 * [tHashOutput_3 begin ] stop
 */



	
	/**
	 * [tOracleInput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_1", false);
		start_Hash.put("tOracleInput_1", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_1";
	
	
		int tos_count_tOracleInput_1 = 0;
		
	


	
		    int nb_line_tOracleInput_1 = 0;
		    java.sql.Connection conn_tOracleInput_1 = null;
				conn_tOracleInput_1 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");
				
                boolean isTimeZoneNull_tOracleInput_1 = false;
				boolean isConnectionWrapped_tOracleInput_1 = !(conn_tOracleInput_1 instanceof oracle.jdbc.OracleConnection) && conn_tOracleInput_1.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tOracleInput_1 = null;
                if (isConnectionWrapped_tOracleInput_1) {
					unwrappedOraConn_tOracleInput_1 = conn_tOracleInput_1.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tOracleInput_1 != null) {
                        isTimeZoneNull_tOracleInput_1 = (unwrappedOraConn_tOracleInput_1.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tOracleInput_1 = (((oracle.jdbc.OracleConnection)conn_tOracleInput_1).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tOracleInput_1) {
					java.sql.Statement stmtGetTZ_tOracleInput_1 = conn_tOracleInput_1.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_1 = stmtGetTZ_tOracleInput_1.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_1 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tOracleInput_1.next()) {
						sessionTimezone_tOracleInput_1 = rsGetTZ_tOracleInput_1.getString(1);
					}
					if (isConnectionWrapped_tOracleInput_1 && unwrappedOraConn_tOracleInput_1 != null) {
                        unwrappedOraConn_tOracleInput_1.setSessionTimeZone(sessionTimezone_tOracleInput_1);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_1).setSessionTimeZone(sessionTimezone_tOracleInput_1);
                    }
				}
			
		    
			java.sql.Statement stmt_tOracleInput_1 = conn_tOracleInput_1.createStatement();

		    String dbquery_tOracleInput_1 = "SELECT \n	GLOS.\"ID\", \n	GLOS.GLOSA, \n	GLOS.DESCRIPCION  \nFROM\n	SALUDSIS.AFI_GLOSAS GLOS\nWHERE\n	GLOS.ESTREGISTRO_"
+"ID = 1";
		    

		    globalMap.put("tOracleInput_1_QUERY",dbquery_tOracleInput_1);

		    java.sql.ResultSet rs_tOracleInput_1 = null;

		    try {
		    	rs_tOracleInput_1 = stmt_tOracleInput_1.executeQuery(dbquery_tOracleInput_1);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_1 = rs_tOracleInput_1.getMetaData();
		    	int colQtyInRs_tOracleInput_1 = rsmd_tOracleInput_1.getColumnCount();

		    String tmpContent_tOracleInput_1 = null;
		    
		    
		    while (rs_tOracleInput_1.next()) {
		        nb_line_tOracleInput_1++;
		        
							if(colQtyInRs_tOracleInput_1 < 1) {
								row4.ID = null;
							} else {
		                          
					if(rs_tOracleInput_1.getObject(1) != null) {
						row4.ID = rs_tOracleInput_1.getBigDecimal(1);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_1 < 2) {
								row4.GLOSA = null;
							} else {
	                         		
        	row4.GLOSA = routines.system.JDBCUtil.getString(rs_tOracleInput_1, 2, false);
		                    }
							if(colQtyInRs_tOracleInput_1 < 3) {
								row4.DESCRIPCION = null;
							} else {
	                         		
        	row4.DESCRIPCION = routines.system.JDBCUtil.getString(rs_tOracleInput_1, 3, false);
		                    }
					




 



/**
 * [tOracleInput_1 begin ] stop
 */
	
	/**
	 * [tOracleInput_1 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_1";
	
	

 


	tos_count_tOracleInput_1++;

/**
 * [tOracleInput_1 main ] stop
 */
	
	/**
	 * [tOracleInput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_1";
	
	

 



/**
 * [tOracleInput_1 process_data_begin ] stop
 */

	
	/**
	 * [tHashOutput_3 main ] start
	 */

	

	
	
	currentComponent="tHashOutput_3";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row4"
						
						);
					}
					



    
		row4Struct oneRow_tHashOutput_3 = new row4Struct();
				
					oneRow_tHashOutput_3.ID = row4.ID;
					oneRow_tHashOutput_3.GLOSA = row4.GLOSA;
					oneRow_tHashOutput_3.DESCRIPCION = row4.DESCRIPCION;
		
        tHashFile_tHashOutput_3.put(oneRow_tHashOutput_3);
        nb_line_tHashOutput_3 ++;

 


	tos_count_tHashOutput_3++;

/**
 * [tHashOutput_3 main ] stop
 */
	
	/**
	 * [tHashOutput_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashOutput_3";
	
	

 



/**
 * [tHashOutput_3 process_data_begin ] stop
 */
	
	/**
	 * [tHashOutput_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashOutput_3";
	
	

 



/**
 * [tHashOutput_3 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_1";
	
	

 



/**
 * [tOracleInput_1 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_1 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_1";
	
	

}
}finally{
	if (rs_tOracleInput_1 != null) {
		rs_tOracleInput_1.close();
	}
	if (stmt_tOracleInput_1 != null) {
		stmt_tOracleInput_1.close();
	}
}

globalMap.put("tOracleInput_1_NB_LINE",nb_line_tOracleInput_1);
 

ok_Hash.put("tOracleInput_1", true);
end_Hash.put("tOracleInput_1", System.currentTimeMillis());




/**
 * [tOracleInput_1 end ] stop
 */

	
	/**
	 * [tHashOutput_3 end ] start
	 */

	

	
	
	currentComponent="tHashOutput_3";
	
	
globalMap.put("tHashOutput_3_NB_LINE", nb_line_tHashOutput_3);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row4");
			  	}
			  	
 

ok_Hash.put("tHashOutput_3", true);
end_Hash.put("tHashOutput_3", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk12", 0, "ok");
				}
				tLoop_1Process(globalMap);



/**
 * [tHashOutput_3 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleInput_1 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_1";
	
	

 



/**
 * [tOracleInput_1 finally ] stop
 */

	
	/**
	 * [tHashOutput_3 finally ] start
	 */

	

	
	
	currentComponent="tHashOutput_3";
	
	

 



/**
 * [tHashOutput_3 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_1_SUBPROCESS_STATE", 1);
	}
	


public static class out4Struct implements routines.system.IPersistableRow<out4Struct> {
    final static byte[] commonByteArrayLock_AFI_PRINCIPAL_MinSaludEtapa2NuevosRegistros = new byte[0];
    static byte[] commonByteArray_AFI_PRINCIPAL_MinSaludEtapa2NuevosRegistros = new byte[0];

	
			    public String TIPO_DOCUMENTO;

				public String getTIPO_DOCUMENTO () {
					return this.TIPO_DOCUMENTO;
				}

				public Boolean TIPO_DOCUMENTOIsNullable(){
				    return true;
				}
				public Boolean TIPO_DOCUMENTOIsKey(){
				    return false;
				}
				public Integer TIPO_DOCUMENTOLength(){
				    return 0;
				}
				public Integer TIPO_DOCUMENTOPrecision(){
				    return 0;
				}
				public String TIPO_DOCUMENTODefault(){
				
					return null;
				
				}
				public String TIPO_DOCUMENTOComment(){
				
				    return "";
				
				}
				public String TIPO_DOCUMENTOPattern(){
				
					return "";
				
				}
				public String TIPO_DOCUMENTOOriginalDbColumnName(){
				
					return "TIPO_DOCUMENTO";
				
				}

				
			    public String NUMERO_DOCUMENTO;

				public String getNUMERO_DOCUMENTO () {
					return this.NUMERO_DOCUMENTO;
				}

				public Boolean NUMERO_DOCUMENTOIsNullable(){
				    return true;
				}
				public Boolean NUMERO_DOCUMENTOIsKey(){
				    return false;
				}
				public Integer NUMERO_DOCUMENTOLength(){
				    return 0;
				}
				public Integer NUMERO_DOCUMENTOPrecision(){
				    return 0;
				}
				public String NUMERO_DOCUMENTODefault(){
				
					return null;
				
				}
				public String NUMERO_DOCUMENTOComment(){
				
				    return "";
				
				}
				public String NUMERO_DOCUMENTOPattern(){
				
					return "";
				
				}
				public String NUMERO_DOCUMENTOOriginalDbColumnName(){
				
					return "NUMERO_DOCUMENTO";
				
				}

				
			    public String PRIMER_NOMBRE;

				public String getPRIMER_NOMBRE () {
					return this.PRIMER_NOMBRE;
				}

				public Boolean PRIMER_NOMBREIsNullable(){
				    return true;
				}
				public Boolean PRIMER_NOMBREIsKey(){
				    return false;
				}
				public Integer PRIMER_NOMBRELength(){
				    return 0;
				}
				public Integer PRIMER_NOMBREPrecision(){
				    return 0;
				}
				public String PRIMER_NOMBREDefault(){
				
					return null;
				
				}
				public String PRIMER_NOMBREComment(){
				
				    return "";
				
				}
				public String PRIMER_NOMBREPattern(){
				
					return "";
				
				}
				public String PRIMER_NOMBREOriginalDbColumnName(){
				
					return "PRIMER_NOMBRE";
				
				}

				
			    public String SEGUNDO_NOMBRE;

				public String getSEGUNDO_NOMBRE () {
					return this.SEGUNDO_NOMBRE;
				}

				public Boolean SEGUNDO_NOMBREIsNullable(){
				    return true;
				}
				public Boolean SEGUNDO_NOMBREIsKey(){
				    return false;
				}
				public Integer SEGUNDO_NOMBRELength(){
				    return 0;
				}
				public Integer SEGUNDO_NOMBREPrecision(){
				    return 0;
				}
				public String SEGUNDO_NOMBREDefault(){
				
					return null;
				
				}
				public String SEGUNDO_NOMBREComment(){
				
				    return "";
				
				}
				public String SEGUNDO_NOMBREPattern(){
				
					return "";
				
				}
				public String SEGUNDO_NOMBREOriginalDbColumnName(){
				
					return "SEGUNDO_NOMBRE";
				
				}

				
			    public String PRIMER_APELLIDO;

				public String getPRIMER_APELLIDO () {
					return this.PRIMER_APELLIDO;
				}

				public Boolean PRIMER_APELLIDOIsNullable(){
				    return true;
				}
				public Boolean PRIMER_APELLIDOIsKey(){
				    return false;
				}
				public Integer PRIMER_APELLIDOLength(){
				    return 0;
				}
				public Integer PRIMER_APELLIDOPrecision(){
				    return 0;
				}
				public String PRIMER_APELLIDODefault(){
				
					return null;
				
				}
				public String PRIMER_APELLIDOComment(){
				
				    return "";
				
				}
				public String PRIMER_APELLIDOPattern(){
				
					return "";
				
				}
				public String PRIMER_APELLIDOOriginalDbColumnName(){
				
					return "PRIMER_APELLIDO";
				
				}

				
			    public String SEGUNDO_APELLIDO;

				public String getSEGUNDO_APELLIDO () {
					return this.SEGUNDO_APELLIDO;
				}

				public Boolean SEGUNDO_APELLIDOIsNullable(){
				    return true;
				}
				public Boolean SEGUNDO_APELLIDOIsKey(){
				    return false;
				}
				public Integer SEGUNDO_APELLIDOLength(){
				    return 0;
				}
				public Integer SEGUNDO_APELLIDOPrecision(){
				    return 0;
				}
				public String SEGUNDO_APELLIDODefault(){
				
					return null;
				
				}
				public String SEGUNDO_APELLIDOComment(){
				
				    return "";
				
				}
				public String SEGUNDO_APELLIDOPattern(){
				
					return "";
				
				}
				public String SEGUNDO_APELLIDOOriginalDbColumnName(){
				
					return "SEGUNDO_APELLIDO";
				
				}

				
			    public String GLOSA;

				public String getGLOSA () {
					return this.GLOSA;
				}

				public Boolean GLOSAIsNullable(){
				    return false;
				}
				public Boolean GLOSAIsKey(){
				    return false;
				}
				public Integer GLOSALength(){
				    return 0;
				}
				public Integer GLOSAPrecision(){
				    return 0;
				}
				public String GLOSADefault(){
				
					return null;
				
				}
				public String GLOSAComment(){
				
				    return "";
				
				}
				public String GLOSAPattern(){
				
					return "";
				
				}
				public String GLOSAOriginalDbColumnName(){
				
					return "GLOSA";
				
				}

				
			    public String DESCRIPCION;

				public String getDESCRIPCION () {
					return this.DESCRIPCION;
				}

				public Boolean DESCRIPCIONIsNullable(){
				    return false;
				}
				public Boolean DESCRIPCIONIsKey(){
				    return false;
				}
				public Integer DESCRIPCIONLength(){
				    return 500;
				}
				public Integer DESCRIPCIONPrecision(){
				    return 0;
				}
				public String DESCRIPCIONDefault(){
				
					return null;
				
				}
				public String DESCRIPCIONComment(){
				
				    return "Descripcion de la glosa";
				
				}
				public String DESCRIPCIONPattern(){
				
					return "";
				
				}
				public String DESCRIPCIONOriginalDbColumnName(){
				
					return "DESCRIPCION";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_PRINCIPAL_MinSaludEtapa2NuevosRegistros.length) {
				if(length < 1024 && commonByteArray_AFI_PRINCIPAL_MinSaludEtapa2NuevosRegistros.length == 0) {
   					commonByteArray_AFI_PRINCIPAL_MinSaludEtapa2NuevosRegistros = new byte[1024];
				} else {
   					commonByteArray_AFI_PRINCIPAL_MinSaludEtapa2NuevosRegistros = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_PRINCIPAL_MinSaludEtapa2NuevosRegistros, 0, length);
			strReturn = new String(commonByteArray_AFI_PRINCIPAL_MinSaludEtapa2NuevosRegistros, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_PRINCIPAL_MinSaludEtapa2NuevosRegistros.length) {
				if(length < 1024 && commonByteArray_AFI_PRINCIPAL_MinSaludEtapa2NuevosRegistros.length == 0) {
   					commonByteArray_AFI_PRINCIPAL_MinSaludEtapa2NuevosRegistros = new byte[1024];
				} else {
   					commonByteArray_AFI_PRINCIPAL_MinSaludEtapa2NuevosRegistros = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_PRINCIPAL_MinSaludEtapa2NuevosRegistros, 0, length);
			strReturn = new String(commonByteArray_AFI_PRINCIPAL_MinSaludEtapa2NuevosRegistros, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_PRINCIPAL_MinSaludEtapa2NuevosRegistros) {

        	try {

        		int length = 0;
		
					this.TIPO_DOCUMENTO = readString(dis);
					
					this.NUMERO_DOCUMENTO = readString(dis);
					
					this.PRIMER_NOMBRE = readString(dis);
					
					this.SEGUNDO_NOMBRE = readString(dis);
					
					this.PRIMER_APELLIDO = readString(dis);
					
					this.SEGUNDO_APELLIDO = readString(dis);
					
					this.GLOSA = readString(dis);
					
					this.DESCRIPCION = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_PRINCIPAL_MinSaludEtapa2NuevosRegistros) {

        	try {

        		int length = 0;
		
					this.TIPO_DOCUMENTO = readString(dis);
					
					this.NUMERO_DOCUMENTO = readString(dis);
					
					this.PRIMER_NOMBRE = readString(dis);
					
					this.SEGUNDO_NOMBRE = readString(dis);
					
					this.PRIMER_APELLIDO = readString(dis);
					
					this.SEGUNDO_APELLIDO = readString(dis);
					
					this.GLOSA = readString(dis);
					
					this.DESCRIPCION = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.TIPO_DOCUMENTO,dos);
					
					// String
				
						writeString(this.NUMERO_DOCUMENTO,dos);
					
					// String
				
						writeString(this.PRIMER_NOMBRE,dos);
					
					// String
				
						writeString(this.SEGUNDO_NOMBRE,dos);
					
					// String
				
						writeString(this.PRIMER_APELLIDO,dos);
					
					// String
				
						writeString(this.SEGUNDO_APELLIDO,dos);
					
					// String
				
						writeString(this.GLOSA,dos);
					
					// String
				
						writeString(this.DESCRIPCION,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.TIPO_DOCUMENTO,dos);
					
					// String
				
						writeString(this.NUMERO_DOCUMENTO,dos);
					
					// String
				
						writeString(this.PRIMER_NOMBRE,dos);
					
					// String
				
						writeString(this.SEGUNDO_NOMBRE,dos);
					
					// String
				
						writeString(this.PRIMER_APELLIDO,dos);
					
					// String
				
						writeString(this.SEGUNDO_APELLIDO,dos);
					
					// String
				
						writeString(this.GLOSA,dos);
					
					// String
				
						writeString(this.DESCRIPCION,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("TIPO_DOCUMENTO="+TIPO_DOCUMENTO);
		sb.append(",NUMERO_DOCUMENTO="+NUMERO_DOCUMENTO);
		sb.append(",PRIMER_NOMBRE="+PRIMER_NOMBRE);
		sb.append(",SEGUNDO_NOMBRE="+SEGUNDO_NOMBRE);
		sb.append(",PRIMER_APELLIDO="+PRIMER_APELLIDO);
		sb.append(",SEGUNDO_APELLIDO="+SEGUNDO_APELLIDO);
		sb.append(",GLOSA="+GLOSA);
		sb.append(",DESCRIPCION="+DESCRIPCION);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(out4Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class out5Struct implements routines.system.IPersistableRow<out5Struct> {
    final static byte[] commonByteArrayLock_AFI_PRINCIPAL_MinSaludEtapa2NuevosRegistros = new byte[0];
    static byte[] commonByteArray_AFI_PRINCIPAL_MinSaludEtapa2NuevosRegistros = new byte[0];

	
			    public int ProcesoId_;

				public int getProcesoId_ () {
					return this.ProcesoId_;
				}

				public Boolean ProcesoId_IsNullable(){
				    return false;
				}
				public Boolean ProcesoId_IsKey(){
				    return false;
				}
				public Integer ProcesoId_Length(){
				    return 0;
				}
				public Integer ProcesoId_Precision(){
				    return 0;
				}
				public String ProcesoId_Default(){
				
					return "";
				
				}
				public String ProcesoId_Comment(){
				
				    return "";
				
				}
				public String ProcesoId_Pattern(){
				
					return "";
				
				}
				public String ProcesoId_OriginalDbColumnName(){
				
					return "ProcesoId_";
				
				}

				
			    public String DescripcionGlosa_;

				public String getDescripcionGlosa_ () {
					return this.DescripcionGlosa_;
				}

				public Boolean DescripcionGlosa_IsNullable(){
				    return false;
				}
				public Boolean DescripcionGlosa_IsKey(){
				    return false;
				}
				public Integer DescripcionGlosa_Length(){
				    return 0;
				}
				public Integer DescripcionGlosa_Precision(){
				    return 0;
				}
				public String DescripcionGlosa_Default(){
				
					return null;
				
				}
				public String DescripcionGlosa_Comment(){
				
				    return "";
				
				}
				public String DescripcionGlosa_Pattern(){
				
					return "";
				
				}
				public String DescripcionGlosa_OriginalDbColumnName(){
				
					return "DescripcionGlosa_";
				
				}

				
			    public int AfiliadoId_;

				public int getAfiliadoId_ () {
					return this.AfiliadoId_;
				}

				public Boolean AfiliadoId_IsNullable(){
				    return false;
				}
				public Boolean AfiliadoId_IsKey(){
				    return false;
				}
				public Integer AfiliadoId_Length(){
				    return 0;
				}
				public Integer AfiliadoId_Precision(){
				    return 0;
				}
				public String AfiliadoId_Default(){
				
					return "";
				
				}
				public String AfiliadoId_Comment(){
				
				    return "";
				
				}
				public String AfiliadoId_Pattern(){
				
					return "";
				
				}
				public String AfiliadoId_OriginalDbColumnName(){
				
					return "AfiliadoId_";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_PRINCIPAL_MinSaludEtapa2NuevosRegistros.length) {
				if(length < 1024 && commonByteArray_AFI_PRINCIPAL_MinSaludEtapa2NuevosRegistros.length == 0) {
   					commonByteArray_AFI_PRINCIPAL_MinSaludEtapa2NuevosRegistros = new byte[1024];
				} else {
   					commonByteArray_AFI_PRINCIPAL_MinSaludEtapa2NuevosRegistros = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_PRINCIPAL_MinSaludEtapa2NuevosRegistros, 0, length);
			strReturn = new String(commonByteArray_AFI_PRINCIPAL_MinSaludEtapa2NuevosRegistros, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_PRINCIPAL_MinSaludEtapa2NuevosRegistros.length) {
				if(length < 1024 && commonByteArray_AFI_PRINCIPAL_MinSaludEtapa2NuevosRegistros.length == 0) {
   					commonByteArray_AFI_PRINCIPAL_MinSaludEtapa2NuevosRegistros = new byte[1024];
				} else {
   					commonByteArray_AFI_PRINCIPAL_MinSaludEtapa2NuevosRegistros = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_PRINCIPAL_MinSaludEtapa2NuevosRegistros, 0, length);
			strReturn = new String(commonByteArray_AFI_PRINCIPAL_MinSaludEtapa2NuevosRegistros, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_PRINCIPAL_MinSaludEtapa2NuevosRegistros) {

        	try {

        		int length = 0;
		
			        this.ProcesoId_ = dis.readInt();
					
					this.DescripcionGlosa_ = readString(dis);
					
			        this.AfiliadoId_ = dis.readInt();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_PRINCIPAL_MinSaludEtapa2NuevosRegistros) {

        	try {

        		int length = 0;
		
			        this.ProcesoId_ = dis.readInt();
					
					this.DescripcionGlosa_ = readString(dis);
					
			        this.AfiliadoId_ = dis.readInt();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.ProcesoId_);
					
					// String
				
						writeString(this.DescripcionGlosa_,dos);
					
					// int
				
		            	dos.writeInt(this.AfiliadoId_);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.ProcesoId_);
					
					// String
				
						writeString(this.DescripcionGlosa_,dos);
					
					// int
				
		            	dos.writeInt(this.AfiliadoId_);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ProcesoId_="+String.valueOf(ProcesoId_));
		sb.append(",DescripcionGlosa_="+DescripcionGlosa_);
		sb.append(",AfiliadoId_="+String.valueOf(AfiliadoId_));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(out5Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row5Struct implements routines.system.IPersistableRow<row5Struct> {
    final static byte[] commonByteArrayLock_AFI_PRINCIPAL_MinSaludEtapa2NuevosRegistros = new byte[0];
    static byte[] commonByteArray_AFI_PRINCIPAL_MinSaludEtapa2NuevosRegistros = new byte[0];

	
			    public int PROCESO_ID;

				public int getPROCESO_ID () {
					return this.PROCESO_ID;
				}

				public Boolean PROCESO_IDIsNullable(){
				    return false;
				}
				public Boolean PROCESO_IDIsKey(){
				    return false;
				}
				public Integer PROCESO_IDLength(){
				    return 0;
				}
				public Integer PROCESO_IDPrecision(){
				    return 0;
				}
				public String PROCESO_IDDefault(){
				
					return "";
				
				}
				public String PROCESO_IDComment(){
				
				    return "";
				
				}
				public String PROCESO_IDPattern(){
				
					return "";
				
				}
				public String PROCESO_IDOriginalDbColumnName(){
				
					return "PROCESO_ID";
				
				}

				
			    public int AFILIADO_ID;

				public int getAFILIADO_ID () {
					return this.AFILIADO_ID;
				}

				public Boolean AFILIADO_IDIsNullable(){
				    return false;
				}
				public Boolean AFILIADO_IDIsKey(){
				    return false;
				}
				public Integer AFILIADO_IDLength(){
				    return 0;
				}
				public Integer AFILIADO_IDPrecision(){
				    return 0;
				}
				public String AFILIADO_IDDefault(){
				
					return "";
				
				}
				public String AFILIADO_IDComment(){
				
				    return "";
				
				}
				public String AFILIADO_IDPattern(){
				
					return "";
				
				}
				public String AFILIADO_IDOriginalDbColumnName(){
				
					return "AFILIADO_ID";
				
				}

				
			    public String TIPO_DOCUMENTO;

				public String getTIPO_DOCUMENTO () {
					return this.TIPO_DOCUMENTO;
				}

				public Boolean TIPO_DOCUMENTOIsNullable(){
				    return true;
				}
				public Boolean TIPO_DOCUMENTOIsKey(){
				    return false;
				}
				public Integer TIPO_DOCUMENTOLength(){
				    return 0;
				}
				public Integer TIPO_DOCUMENTOPrecision(){
				    return 0;
				}
				public String TIPO_DOCUMENTODefault(){
				
					return null;
				
				}
				public String TIPO_DOCUMENTOComment(){
				
				    return "";
				
				}
				public String TIPO_DOCUMENTOPattern(){
				
					return "";
				
				}
				public String TIPO_DOCUMENTOOriginalDbColumnName(){
				
					return "TIPO_DOCUMENTO";
				
				}

				
			    public String NUMERO_DOCUMENTO;

				public String getNUMERO_DOCUMENTO () {
					return this.NUMERO_DOCUMENTO;
				}

				public Boolean NUMERO_DOCUMENTOIsNullable(){
				    return true;
				}
				public Boolean NUMERO_DOCUMENTOIsKey(){
				    return false;
				}
				public Integer NUMERO_DOCUMENTOLength(){
				    return 0;
				}
				public Integer NUMERO_DOCUMENTOPrecision(){
				    return 0;
				}
				public String NUMERO_DOCUMENTODefault(){
				
					return null;
				
				}
				public String NUMERO_DOCUMENTOComment(){
				
				    return "";
				
				}
				public String NUMERO_DOCUMENTOPattern(){
				
					return "";
				
				}
				public String NUMERO_DOCUMENTOOriginalDbColumnName(){
				
					return "NUMERO_DOCUMENTO";
				
				}

				
			    public String PRIMER_NOMBRE;

				public String getPRIMER_NOMBRE () {
					return this.PRIMER_NOMBRE;
				}

				public Boolean PRIMER_NOMBREIsNullable(){
				    return true;
				}
				public Boolean PRIMER_NOMBREIsKey(){
				    return false;
				}
				public Integer PRIMER_NOMBRELength(){
				    return 0;
				}
				public Integer PRIMER_NOMBREPrecision(){
				    return 0;
				}
				public String PRIMER_NOMBREDefault(){
				
					return null;
				
				}
				public String PRIMER_NOMBREComment(){
				
				    return "";
				
				}
				public String PRIMER_NOMBREPattern(){
				
					return "";
				
				}
				public String PRIMER_NOMBREOriginalDbColumnName(){
				
					return "PRIMER_NOMBRE";
				
				}

				
			    public String SEGUNDO_NOMBRE;

				public String getSEGUNDO_NOMBRE () {
					return this.SEGUNDO_NOMBRE;
				}

				public Boolean SEGUNDO_NOMBREIsNullable(){
				    return true;
				}
				public Boolean SEGUNDO_NOMBREIsKey(){
				    return false;
				}
				public Integer SEGUNDO_NOMBRELength(){
				    return 0;
				}
				public Integer SEGUNDO_NOMBREPrecision(){
				    return 0;
				}
				public String SEGUNDO_NOMBREDefault(){
				
					return null;
				
				}
				public String SEGUNDO_NOMBREComment(){
				
				    return "";
				
				}
				public String SEGUNDO_NOMBREPattern(){
				
					return "";
				
				}
				public String SEGUNDO_NOMBREOriginalDbColumnName(){
				
					return "SEGUNDO_NOMBRE";
				
				}

				
			    public String PRIMER_APELLIDO;

				public String getPRIMER_APELLIDO () {
					return this.PRIMER_APELLIDO;
				}

				public Boolean PRIMER_APELLIDOIsNullable(){
				    return true;
				}
				public Boolean PRIMER_APELLIDOIsKey(){
				    return false;
				}
				public Integer PRIMER_APELLIDOLength(){
				    return 0;
				}
				public Integer PRIMER_APELLIDOPrecision(){
				    return 0;
				}
				public String PRIMER_APELLIDODefault(){
				
					return null;
				
				}
				public String PRIMER_APELLIDOComment(){
				
				    return "";
				
				}
				public String PRIMER_APELLIDOPattern(){
				
					return "";
				
				}
				public String PRIMER_APELLIDOOriginalDbColumnName(){
				
					return "PRIMER_APELLIDO";
				
				}

				
			    public String SEGUNDO_APELLIDO;

				public String getSEGUNDO_APELLIDO () {
					return this.SEGUNDO_APELLIDO;
				}

				public Boolean SEGUNDO_APELLIDOIsNullable(){
				    return true;
				}
				public Boolean SEGUNDO_APELLIDOIsKey(){
				    return false;
				}
				public Integer SEGUNDO_APELLIDOLength(){
				    return 0;
				}
				public Integer SEGUNDO_APELLIDOPrecision(){
				    return 0;
				}
				public String SEGUNDO_APELLIDODefault(){
				
					return null;
				
				}
				public String SEGUNDO_APELLIDOComment(){
				
				    return "";
				
				}
				public String SEGUNDO_APELLIDOPattern(){
				
					return "";
				
				}
				public String SEGUNDO_APELLIDOOriginalDbColumnName(){
				
					return "SEGUNDO_APELLIDO";
				
				}

				
			    public String GLOSA;

				public String getGLOSA () {
					return this.GLOSA;
				}

				public Boolean GLOSAIsNullable(){
				    return false;
				}
				public Boolean GLOSAIsKey(){
				    return false;
				}
				public Integer GLOSALength(){
				    return 0;
				}
				public Integer GLOSAPrecision(){
				    return 0;
				}
				public String GLOSADefault(){
				
					return null;
				
				}
				public String GLOSAComment(){
				
				    return "";
				
				}
				public String GLOSAPattern(){
				
					return "";
				
				}
				public String GLOSAOriginalDbColumnName(){
				
					return "GLOSA";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_PRINCIPAL_MinSaludEtapa2NuevosRegistros.length) {
				if(length < 1024 && commonByteArray_AFI_PRINCIPAL_MinSaludEtapa2NuevosRegistros.length == 0) {
   					commonByteArray_AFI_PRINCIPAL_MinSaludEtapa2NuevosRegistros = new byte[1024];
				} else {
   					commonByteArray_AFI_PRINCIPAL_MinSaludEtapa2NuevosRegistros = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_PRINCIPAL_MinSaludEtapa2NuevosRegistros, 0, length);
			strReturn = new String(commonByteArray_AFI_PRINCIPAL_MinSaludEtapa2NuevosRegistros, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_PRINCIPAL_MinSaludEtapa2NuevosRegistros.length) {
				if(length < 1024 && commonByteArray_AFI_PRINCIPAL_MinSaludEtapa2NuevosRegistros.length == 0) {
   					commonByteArray_AFI_PRINCIPAL_MinSaludEtapa2NuevosRegistros = new byte[1024];
				} else {
   					commonByteArray_AFI_PRINCIPAL_MinSaludEtapa2NuevosRegistros = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_PRINCIPAL_MinSaludEtapa2NuevosRegistros, 0, length);
			strReturn = new String(commonByteArray_AFI_PRINCIPAL_MinSaludEtapa2NuevosRegistros, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_PRINCIPAL_MinSaludEtapa2NuevosRegistros) {

        	try {

        		int length = 0;
		
			        this.PROCESO_ID = dis.readInt();
					
			        this.AFILIADO_ID = dis.readInt();
					
					this.TIPO_DOCUMENTO = readString(dis);
					
					this.NUMERO_DOCUMENTO = readString(dis);
					
					this.PRIMER_NOMBRE = readString(dis);
					
					this.SEGUNDO_NOMBRE = readString(dis);
					
					this.PRIMER_APELLIDO = readString(dis);
					
					this.SEGUNDO_APELLIDO = readString(dis);
					
					this.GLOSA = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_PRINCIPAL_MinSaludEtapa2NuevosRegistros) {

        	try {

        		int length = 0;
		
			        this.PROCESO_ID = dis.readInt();
					
			        this.AFILIADO_ID = dis.readInt();
					
					this.TIPO_DOCUMENTO = readString(dis);
					
					this.NUMERO_DOCUMENTO = readString(dis);
					
					this.PRIMER_NOMBRE = readString(dis);
					
					this.SEGUNDO_NOMBRE = readString(dis);
					
					this.PRIMER_APELLIDO = readString(dis);
					
					this.SEGUNDO_APELLIDO = readString(dis);
					
					this.GLOSA = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.PROCESO_ID);
					
					// int
				
		            	dos.writeInt(this.AFILIADO_ID);
					
					// String
				
						writeString(this.TIPO_DOCUMENTO,dos);
					
					// String
				
						writeString(this.NUMERO_DOCUMENTO,dos);
					
					// String
				
						writeString(this.PRIMER_NOMBRE,dos);
					
					// String
				
						writeString(this.SEGUNDO_NOMBRE,dos);
					
					// String
				
						writeString(this.PRIMER_APELLIDO,dos);
					
					// String
				
						writeString(this.SEGUNDO_APELLIDO,dos);
					
					// String
				
						writeString(this.GLOSA,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.PROCESO_ID);
					
					// int
				
		            	dos.writeInt(this.AFILIADO_ID);
					
					// String
				
						writeString(this.TIPO_DOCUMENTO,dos);
					
					// String
				
						writeString(this.NUMERO_DOCUMENTO,dos);
					
					// String
				
						writeString(this.PRIMER_NOMBRE,dos);
					
					// String
				
						writeString(this.SEGUNDO_NOMBRE,dos);
					
					// String
				
						writeString(this.PRIMER_APELLIDO,dos);
					
					// String
				
						writeString(this.SEGUNDO_APELLIDO,dos);
					
					// String
				
						writeString(this.GLOSA,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("PROCESO_ID="+String.valueOf(PROCESO_ID));
		sb.append(",AFILIADO_ID="+String.valueOf(AFILIADO_ID));
		sb.append(",TIPO_DOCUMENTO="+TIPO_DOCUMENTO);
		sb.append(",NUMERO_DOCUMENTO="+NUMERO_DOCUMENTO);
		sb.append(",PRIMER_NOMBRE="+PRIMER_NOMBRE);
		sb.append(",SEGUNDO_NOMBRE="+SEGUNDO_NOMBRE);
		sb.append(",PRIMER_APELLIDO="+PRIMER_APELLIDO);
		sb.append(",SEGUNDO_APELLIDO="+SEGUNDO_APELLIDO);
		sb.append(",GLOSA="+GLOSA);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row5Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row6Struct implements routines.system.IPersistableRow<row6Struct> {
    final static byte[] commonByteArrayLock_AFI_PRINCIPAL_MinSaludEtapa2NuevosRegistros = new byte[0];
    static byte[] commonByteArray_AFI_PRINCIPAL_MinSaludEtapa2NuevosRegistros = new byte[0];

	
			    public int PROCESO_ID;

				public int getPROCESO_ID () {
					return this.PROCESO_ID;
				}

				public Boolean PROCESO_IDIsNullable(){
				    return false;
				}
				public Boolean PROCESO_IDIsKey(){
				    return false;
				}
				public Integer PROCESO_IDLength(){
				    return 0;
				}
				public Integer PROCESO_IDPrecision(){
				    return 0;
				}
				public String PROCESO_IDDefault(){
				
					return "";
				
				}
				public String PROCESO_IDComment(){
				
				    return "";
				
				}
				public String PROCESO_IDPattern(){
				
					return "";
				
				}
				public String PROCESO_IDOriginalDbColumnName(){
				
					return "PROCESO_ID";
				
				}

				
			    public int AFILIADO_ID;

				public int getAFILIADO_ID () {
					return this.AFILIADO_ID;
				}

				public Boolean AFILIADO_IDIsNullable(){
				    return false;
				}
				public Boolean AFILIADO_IDIsKey(){
				    return false;
				}
				public Integer AFILIADO_IDLength(){
				    return 0;
				}
				public Integer AFILIADO_IDPrecision(){
				    return 0;
				}
				public String AFILIADO_IDDefault(){
				
					return "";
				
				}
				public String AFILIADO_IDComment(){
				
				    return "";
				
				}
				public String AFILIADO_IDPattern(){
				
					return "";
				
				}
				public String AFILIADO_IDOriginalDbColumnName(){
				
					return "AFILIADO_ID";
				
				}

				
			    public String TIPO_DOCUMENTO;

				public String getTIPO_DOCUMENTO () {
					return this.TIPO_DOCUMENTO;
				}

				public Boolean TIPO_DOCUMENTOIsNullable(){
				    return true;
				}
				public Boolean TIPO_DOCUMENTOIsKey(){
				    return false;
				}
				public Integer TIPO_DOCUMENTOLength(){
				    return 0;
				}
				public Integer TIPO_DOCUMENTOPrecision(){
				    return 0;
				}
				public String TIPO_DOCUMENTODefault(){
				
					return null;
				
				}
				public String TIPO_DOCUMENTOComment(){
				
				    return "";
				
				}
				public String TIPO_DOCUMENTOPattern(){
				
					return "";
				
				}
				public String TIPO_DOCUMENTOOriginalDbColumnName(){
				
					return "TIPO_DOCUMENTO";
				
				}

				
			    public String NUMERO_DOCUMENTO;

				public String getNUMERO_DOCUMENTO () {
					return this.NUMERO_DOCUMENTO;
				}

				public Boolean NUMERO_DOCUMENTOIsNullable(){
				    return true;
				}
				public Boolean NUMERO_DOCUMENTOIsKey(){
				    return false;
				}
				public Integer NUMERO_DOCUMENTOLength(){
				    return 0;
				}
				public Integer NUMERO_DOCUMENTOPrecision(){
				    return 0;
				}
				public String NUMERO_DOCUMENTODefault(){
				
					return null;
				
				}
				public String NUMERO_DOCUMENTOComment(){
				
				    return "";
				
				}
				public String NUMERO_DOCUMENTOPattern(){
				
					return "";
				
				}
				public String NUMERO_DOCUMENTOOriginalDbColumnName(){
				
					return "NUMERO_DOCUMENTO";
				
				}

				
			    public String PRIMER_NOMBRE;

				public String getPRIMER_NOMBRE () {
					return this.PRIMER_NOMBRE;
				}

				public Boolean PRIMER_NOMBREIsNullable(){
				    return true;
				}
				public Boolean PRIMER_NOMBREIsKey(){
				    return false;
				}
				public Integer PRIMER_NOMBRELength(){
				    return 0;
				}
				public Integer PRIMER_NOMBREPrecision(){
				    return 0;
				}
				public String PRIMER_NOMBREDefault(){
				
					return null;
				
				}
				public String PRIMER_NOMBREComment(){
				
				    return "";
				
				}
				public String PRIMER_NOMBREPattern(){
				
					return "";
				
				}
				public String PRIMER_NOMBREOriginalDbColumnName(){
				
					return "PRIMER_NOMBRE";
				
				}

				
			    public String SEGUNDO_NOMBRE;

				public String getSEGUNDO_NOMBRE () {
					return this.SEGUNDO_NOMBRE;
				}

				public Boolean SEGUNDO_NOMBREIsNullable(){
				    return true;
				}
				public Boolean SEGUNDO_NOMBREIsKey(){
				    return false;
				}
				public Integer SEGUNDO_NOMBRELength(){
				    return 0;
				}
				public Integer SEGUNDO_NOMBREPrecision(){
				    return 0;
				}
				public String SEGUNDO_NOMBREDefault(){
				
					return null;
				
				}
				public String SEGUNDO_NOMBREComment(){
				
				    return "";
				
				}
				public String SEGUNDO_NOMBREPattern(){
				
					return "";
				
				}
				public String SEGUNDO_NOMBREOriginalDbColumnName(){
				
					return "SEGUNDO_NOMBRE";
				
				}

				
			    public String PRIMER_APELLIDO;

				public String getPRIMER_APELLIDO () {
					return this.PRIMER_APELLIDO;
				}

				public Boolean PRIMER_APELLIDOIsNullable(){
				    return true;
				}
				public Boolean PRIMER_APELLIDOIsKey(){
				    return false;
				}
				public Integer PRIMER_APELLIDOLength(){
				    return 0;
				}
				public Integer PRIMER_APELLIDOPrecision(){
				    return 0;
				}
				public String PRIMER_APELLIDODefault(){
				
					return null;
				
				}
				public String PRIMER_APELLIDOComment(){
				
				    return "";
				
				}
				public String PRIMER_APELLIDOPattern(){
				
					return "";
				
				}
				public String PRIMER_APELLIDOOriginalDbColumnName(){
				
					return "PRIMER_APELLIDO";
				
				}

				
			    public String SEGUNDO_APELLIDO;

				public String getSEGUNDO_APELLIDO () {
					return this.SEGUNDO_APELLIDO;
				}

				public Boolean SEGUNDO_APELLIDOIsNullable(){
				    return true;
				}
				public Boolean SEGUNDO_APELLIDOIsKey(){
				    return false;
				}
				public Integer SEGUNDO_APELLIDOLength(){
				    return 0;
				}
				public Integer SEGUNDO_APELLIDOPrecision(){
				    return 0;
				}
				public String SEGUNDO_APELLIDODefault(){
				
					return null;
				
				}
				public String SEGUNDO_APELLIDOComment(){
				
				    return "";
				
				}
				public String SEGUNDO_APELLIDOPattern(){
				
					return "";
				
				}
				public String SEGUNDO_APELLIDOOriginalDbColumnName(){
				
					return "SEGUNDO_APELLIDO";
				
				}

				
			    public String GLOSA;

				public String getGLOSA () {
					return this.GLOSA;
				}

				public Boolean GLOSAIsNullable(){
				    return false;
				}
				public Boolean GLOSAIsKey(){
				    return false;
				}
				public Integer GLOSALength(){
				    return 0;
				}
				public Integer GLOSAPrecision(){
				    return 0;
				}
				public String GLOSADefault(){
				
					return null;
				
				}
				public String GLOSAComment(){
				
				    return "";
				
				}
				public String GLOSAPattern(){
				
					return "";
				
				}
				public String GLOSAOriginalDbColumnName(){
				
					return "GLOSA";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_PRINCIPAL_MinSaludEtapa2NuevosRegistros.length) {
				if(length < 1024 && commonByteArray_AFI_PRINCIPAL_MinSaludEtapa2NuevosRegistros.length == 0) {
   					commonByteArray_AFI_PRINCIPAL_MinSaludEtapa2NuevosRegistros = new byte[1024];
				} else {
   					commonByteArray_AFI_PRINCIPAL_MinSaludEtapa2NuevosRegistros = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_PRINCIPAL_MinSaludEtapa2NuevosRegistros, 0, length);
			strReturn = new String(commonByteArray_AFI_PRINCIPAL_MinSaludEtapa2NuevosRegistros, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_PRINCIPAL_MinSaludEtapa2NuevosRegistros.length) {
				if(length < 1024 && commonByteArray_AFI_PRINCIPAL_MinSaludEtapa2NuevosRegistros.length == 0) {
   					commonByteArray_AFI_PRINCIPAL_MinSaludEtapa2NuevosRegistros = new byte[1024];
				} else {
   					commonByteArray_AFI_PRINCIPAL_MinSaludEtapa2NuevosRegistros = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_PRINCIPAL_MinSaludEtapa2NuevosRegistros, 0, length);
			strReturn = new String(commonByteArray_AFI_PRINCIPAL_MinSaludEtapa2NuevosRegistros, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_PRINCIPAL_MinSaludEtapa2NuevosRegistros) {

        	try {

        		int length = 0;
		
			        this.PROCESO_ID = dis.readInt();
					
			        this.AFILIADO_ID = dis.readInt();
					
					this.TIPO_DOCUMENTO = readString(dis);
					
					this.NUMERO_DOCUMENTO = readString(dis);
					
					this.PRIMER_NOMBRE = readString(dis);
					
					this.SEGUNDO_NOMBRE = readString(dis);
					
					this.PRIMER_APELLIDO = readString(dis);
					
					this.SEGUNDO_APELLIDO = readString(dis);
					
					this.GLOSA = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_PRINCIPAL_MinSaludEtapa2NuevosRegistros) {

        	try {

        		int length = 0;
		
			        this.PROCESO_ID = dis.readInt();
					
			        this.AFILIADO_ID = dis.readInt();
					
					this.TIPO_DOCUMENTO = readString(dis);
					
					this.NUMERO_DOCUMENTO = readString(dis);
					
					this.PRIMER_NOMBRE = readString(dis);
					
					this.SEGUNDO_NOMBRE = readString(dis);
					
					this.PRIMER_APELLIDO = readString(dis);
					
					this.SEGUNDO_APELLIDO = readString(dis);
					
					this.GLOSA = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.PROCESO_ID);
					
					// int
				
		            	dos.writeInt(this.AFILIADO_ID);
					
					// String
				
						writeString(this.TIPO_DOCUMENTO,dos);
					
					// String
				
						writeString(this.NUMERO_DOCUMENTO,dos);
					
					// String
				
						writeString(this.PRIMER_NOMBRE,dos);
					
					// String
				
						writeString(this.SEGUNDO_NOMBRE,dos);
					
					// String
				
						writeString(this.PRIMER_APELLIDO,dos);
					
					// String
				
						writeString(this.SEGUNDO_APELLIDO,dos);
					
					// String
				
						writeString(this.GLOSA,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.PROCESO_ID);
					
					// int
				
		            	dos.writeInt(this.AFILIADO_ID);
					
					// String
				
						writeString(this.TIPO_DOCUMENTO,dos);
					
					// String
				
						writeString(this.NUMERO_DOCUMENTO,dos);
					
					// String
				
						writeString(this.PRIMER_NOMBRE,dos);
					
					// String
				
						writeString(this.SEGUNDO_NOMBRE,dos);
					
					// String
				
						writeString(this.PRIMER_APELLIDO,dos);
					
					// String
				
						writeString(this.SEGUNDO_APELLIDO,dos);
					
					// String
				
						writeString(this.GLOSA,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("PROCESO_ID="+String.valueOf(PROCESO_ID));
		sb.append(",AFILIADO_ID="+String.valueOf(AFILIADO_ID));
		sb.append(",TIPO_DOCUMENTO="+TIPO_DOCUMENTO);
		sb.append(",NUMERO_DOCUMENTO="+NUMERO_DOCUMENTO);
		sb.append(",PRIMER_NOMBRE="+PRIMER_NOMBRE);
		sb.append(",SEGUNDO_NOMBRE="+SEGUNDO_NOMBRE);
		sb.append(",PRIMER_APELLIDO="+PRIMER_APELLIDO);
		sb.append(",SEGUNDO_APELLIDO="+SEGUNDO_APELLIDO);
		sb.append(",GLOSA="+GLOSA);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row6Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row13Struct implements routines.system.IPersistableRow<row13Struct> {
    final static byte[] commonByteArrayLock_AFI_PRINCIPAL_MinSaludEtapa2NuevosRegistros = new byte[0];
    static byte[] commonByteArray_AFI_PRINCIPAL_MinSaludEtapa2NuevosRegistros = new byte[0];

	
			    public int PROCESO_ID;

				public int getPROCESO_ID () {
					return this.PROCESO_ID;
				}

				public Boolean PROCESO_IDIsNullable(){
				    return false;
				}
				public Boolean PROCESO_IDIsKey(){
				    return false;
				}
				public Integer PROCESO_IDLength(){
				    return 0;
				}
				public Integer PROCESO_IDPrecision(){
				    return 0;
				}
				public String PROCESO_IDDefault(){
				
					return "";
				
				}
				public String PROCESO_IDComment(){
				
				    return "";
				
				}
				public String PROCESO_IDPattern(){
				
					return "";
				
				}
				public String PROCESO_IDOriginalDbColumnName(){
				
					return "PROCESO_ID";
				
				}

				
			    public int AFILIADO_ID;

				public int getAFILIADO_ID () {
					return this.AFILIADO_ID;
				}

				public Boolean AFILIADO_IDIsNullable(){
				    return false;
				}
				public Boolean AFILIADO_IDIsKey(){
				    return false;
				}
				public Integer AFILIADO_IDLength(){
				    return 0;
				}
				public Integer AFILIADO_IDPrecision(){
				    return 0;
				}
				public String AFILIADO_IDDefault(){
				
					return "";
				
				}
				public String AFILIADO_IDComment(){
				
				    return "";
				
				}
				public String AFILIADO_IDPattern(){
				
					return "";
				
				}
				public String AFILIADO_IDOriginalDbColumnName(){
				
					return "AFILIADO_ID";
				
				}

				
			    public String TIPO_DOCUMENTO;

				public String getTIPO_DOCUMENTO () {
					return this.TIPO_DOCUMENTO;
				}

				public Boolean TIPO_DOCUMENTOIsNullable(){
				    return true;
				}
				public Boolean TIPO_DOCUMENTOIsKey(){
				    return false;
				}
				public Integer TIPO_DOCUMENTOLength(){
				    return 0;
				}
				public Integer TIPO_DOCUMENTOPrecision(){
				    return 0;
				}
				public String TIPO_DOCUMENTODefault(){
				
					return null;
				
				}
				public String TIPO_DOCUMENTOComment(){
				
				    return "";
				
				}
				public String TIPO_DOCUMENTOPattern(){
				
					return "";
				
				}
				public String TIPO_DOCUMENTOOriginalDbColumnName(){
				
					return "TIPO_DOCUMENTO";
				
				}

				
			    public String NUMERO_DOCUMENTO;

				public String getNUMERO_DOCUMENTO () {
					return this.NUMERO_DOCUMENTO;
				}

				public Boolean NUMERO_DOCUMENTOIsNullable(){
				    return true;
				}
				public Boolean NUMERO_DOCUMENTOIsKey(){
				    return false;
				}
				public Integer NUMERO_DOCUMENTOLength(){
				    return 0;
				}
				public Integer NUMERO_DOCUMENTOPrecision(){
				    return 0;
				}
				public String NUMERO_DOCUMENTODefault(){
				
					return null;
				
				}
				public String NUMERO_DOCUMENTOComment(){
				
				    return "";
				
				}
				public String NUMERO_DOCUMENTOPattern(){
				
					return "";
				
				}
				public String NUMERO_DOCUMENTOOriginalDbColumnName(){
				
					return "NUMERO_DOCUMENTO";
				
				}

				
			    public String PRIMER_NOMBRE;

				public String getPRIMER_NOMBRE () {
					return this.PRIMER_NOMBRE;
				}

				public Boolean PRIMER_NOMBREIsNullable(){
				    return true;
				}
				public Boolean PRIMER_NOMBREIsKey(){
				    return false;
				}
				public Integer PRIMER_NOMBRELength(){
				    return 0;
				}
				public Integer PRIMER_NOMBREPrecision(){
				    return 0;
				}
				public String PRIMER_NOMBREDefault(){
				
					return null;
				
				}
				public String PRIMER_NOMBREComment(){
				
				    return "";
				
				}
				public String PRIMER_NOMBREPattern(){
				
					return "";
				
				}
				public String PRIMER_NOMBREOriginalDbColumnName(){
				
					return "PRIMER_NOMBRE";
				
				}

				
			    public String SEGUNDO_NOMBRE;

				public String getSEGUNDO_NOMBRE () {
					return this.SEGUNDO_NOMBRE;
				}

				public Boolean SEGUNDO_NOMBREIsNullable(){
				    return true;
				}
				public Boolean SEGUNDO_NOMBREIsKey(){
				    return false;
				}
				public Integer SEGUNDO_NOMBRELength(){
				    return 0;
				}
				public Integer SEGUNDO_NOMBREPrecision(){
				    return 0;
				}
				public String SEGUNDO_NOMBREDefault(){
				
					return null;
				
				}
				public String SEGUNDO_NOMBREComment(){
				
				    return "";
				
				}
				public String SEGUNDO_NOMBREPattern(){
				
					return "";
				
				}
				public String SEGUNDO_NOMBREOriginalDbColumnName(){
				
					return "SEGUNDO_NOMBRE";
				
				}

				
			    public String PRIMER_APELLIDO;

				public String getPRIMER_APELLIDO () {
					return this.PRIMER_APELLIDO;
				}

				public Boolean PRIMER_APELLIDOIsNullable(){
				    return true;
				}
				public Boolean PRIMER_APELLIDOIsKey(){
				    return false;
				}
				public Integer PRIMER_APELLIDOLength(){
				    return 0;
				}
				public Integer PRIMER_APELLIDOPrecision(){
				    return 0;
				}
				public String PRIMER_APELLIDODefault(){
				
					return null;
				
				}
				public String PRIMER_APELLIDOComment(){
				
				    return "";
				
				}
				public String PRIMER_APELLIDOPattern(){
				
					return "";
				
				}
				public String PRIMER_APELLIDOOriginalDbColumnName(){
				
					return "PRIMER_APELLIDO";
				
				}

				
			    public String SEGUNDO_APELLIDO;

				public String getSEGUNDO_APELLIDO () {
					return this.SEGUNDO_APELLIDO;
				}

				public Boolean SEGUNDO_APELLIDOIsNullable(){
				    return true;
				}
				public Boolean SEGUNDO_APELLIDOIsKey(){
				    return false;
				}
				public Integer SEGUNDO_APELLIDOLength(){
				    return 0;
				}
				public Integer SEGUNDO_APELLIDOPrecision(){
				    return 0;
				}
				public String SEGUNDO_APELLIDODefault(){
				
					return null;
				
				}
				public String SEGUNDO_APELLIDOComment(){
				
				    return "";
				
				}
				public String SEGUNDO_APELLIDOPattern(){
				
					return "";
				
				}
				public String SEGUNDO_APELLIDOOriginalDbColumnName(){
				
					return "SEGUNDO_APELLIDO";
				
				}

				
			    public String GLOSA;

				public String getGLOSA () {
					return this.GLOSA;
				}

				public Boolean GLOSAIsNullable(){
				    return false;
				}
				public Boolean GLOSAIsKey(){
				    return false;
				}
				public Integer GLOSALength(){
				    return 0;
				}
				public Integer GLOSAPrecision(){
				    return 0;
				}
				public String GLOSADefault(){
				
					return null;
				
				}
				public String GLOSAComment(){
				
				    return "";
				
				}
				public String GLOSAPattern(){
				
					return "";
				
				}
				public String GLOSAOriginalDbColumnName(){
				
					return "GLOSA";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_PRINCIPAL_MinSaludEtapa2NuevosRegistros.length) {
				if(length < 1024 && commonByteArray_AFI_PRINCIPAL_MinSaludEtapa2NuevosRegistros.length == 0) {
   					commonByteArray_AFI_PRINCIPAL_MinSaludEtapa2NuevosRegistros = new byte[1024];
				} else {
   					commonByteArray_AFI_PRINCIPAL_MinSaludEtapa2NuevosRegistros = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_PRINCIPAL_MinSaludEtapa2NuevosRegistros, 0, length);
			strReturn = new String(commonByteArray_AFI_PRINCIPAL_MinSaludEtapa2NuevosRegistros, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_PRINCIPAL_MinSaludEtapa2NuevosRegistros.length) {
				if(length < 1024 && commonByteArray_AFI_PRINCIPAL_MinSaludEtapa2NuevosRegistros.length == 0) {
   					commonByteArray_AFI_PRINCIPAL_MinSaludEtapa2NuevosRegistros = new byte[1024];
				} else {
   					commonByteArray_AFI_PRINCIPAL_MinSaludEtapa2NuevosRegistros = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_PRINCIPAL_MinSaludEtapa2NuevosRegistros, 0, length);
			strReturn = new String(commonByteArray_AFI_PRINCIPAL_MinSaludEtapa2NuevosRegistros, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_PRINCIPAL_MinSaludEtapa2NuevosRegistros) {

        	try {

        		int length = 0;
		
			        this.PROCESO_ID = dis.readInt();
					
			        this.AFILIADO_ID = dis.readInt();
					
					this.TIPO_DOCUMENTO = readString(dis);
					
					this.NUMERO_DOCUMENTO = readString(dis);
					
					this.PRIMER_NOMBRE = readString(dis);
					
					this.SEGUNDO_NOMBRE = readString(dis);
					
					this.PRIMER_APELLIDO = readString(dis);
					
					this.SEGUNDO_APELLIDO = readString(dis);
					
					this.GLOSA = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_PRINCIPAL_MinSaludEtapa2NuevosRegistros) {

        	try {

        		int length = 0;
		
			        this.PROCESO_ID = dis.readInt();
					
			        this.AFILIADO_ID = dis.readInt();
					
					this.TIPO_DOCUMENTO = readString(dis);
					
					this.NUMERO_DOCUMENTO = readString(dis);
					
					this.PRIMER_NOMBRE = readString(dis);
					
					this.SEGUNDO_NOMBRE = readString(dis);
					
					this.PRIMER_APELLIDO = readString(dis);
					
					this.SEGUNDO_APELLIDO = readString(dis);
					
					this.GLOSA = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.PROCESO_ID);
					
					// int
				
		            	dos.writeInt(this.AFILIADO_ID);
					
					// String
				
						writeString(this.TIPO_DOCUMENTO,dos);
					
					// String
				
						writeString(this.NUMERO_DOCUMENTO,dos);
					
					// String
				
						writeString(this.PRIMER_NOMBRE,dos);
					
					// String
				
						writeString(this.SEGUNDO_NOMBRE,dos);
					
					// String
				
						writeString(this.PRIMER_APELLIDO,dos);
					
					// String
				
						writeString(this.SEGUNDO_APELLIDO,dos);
					
					// String
				
						writeString(this.GLOSA,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.PROCESO_ID);
					
					// int
				
		            	dos.writeInt(this.AFILIADO_ID);
					
					// String
				
						writeString(this.TIPO_DOCUMENTO,dos);
					
					// String
				
						writeString(this.NUMERO_DOCUMENTO,dos);
					
					// String
				
						writeString(this.PRIMER_NOMBRE,dos);
					
					// String
				
						writeString(this.SEGUNDO_NOMBRE,dos);
					
					// String
				
						writeString(this.PRIMER_APELLIDO,dos);
					
					// String
				
						writeString(this.SEGUNDO_APELLIDO,dos);
					
					// String
				
						writeString(this.GLOSA,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("PROCESO_ID="+String.valueOf(PROCESO_ID));
		sb.append(",AFILIADO_ID="+String.valueOf(AFILIADO_ID));
		sb.append(",TIPO_DOCUMENTO="+TIPO_DOCUMENTO);
		sb.append(",NUMERO_DOCUMENTO="+NUMERO_DOCUMENTO);
		sb.append(",PRIMER_NOMBRE="+PRIMER_NOMBRE);
		sb.append(",SEGUNDO_NOMBRE="+SEGUNDO_NOMBRE);
		sb.append(",PRIMER_APELLIDO="+PRIMER_APELLIDO);
		sb.append(",SEGUNDO_APELLIDO="+SEGUNDO_APELLIDO);
		sb.append(",GLOSA="+GLOSA);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row13Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class out3Struct implements routines.system.IPersistableRow<out3Struct> {
    final static byte[] commonByteArrayLock_AFI_PRINCIPAL_MinSaludEtapa2NuevosRegistros = new byte[0];
    static byte[] commonByteArray_AFI_PRINCIPAL_MinSaludEtapa2NuevosRegistros = new byte[0];

	
			    public int PROCESO_ID;

				public int getPROCESO_ID () {
					return this.PROCESO_ID;
				}

				public Boolean PROCESO_IDIsNullable(){
				    return false;
				}
				public Boolean PROCESO_IDIsKey(){
				    return false;
				}
				public Integer PROCESO_IDLength(){
				    return 0;
				}
				public Integer PROCESO_IDPrecision(){
				    return 0;
				}
				public String PROCESO_IDDefault(){
				
					return "";
				
				}
				public String PROCESO_IDComment(){
				
				    return "";
				
				}
				public String PROCESO_IDPattern(){
				
					return "";
				
				}
				public String PROCESO_IDOriginalDbColumnName(){
				
					return "PROCESO_ID";
				
				}

				
			    public int AFILIADO_ID;

				public int getAFILIADO_ID () {
					return this.AFILIADO_ID;
				}

				public Boolean AFILIADO_IDIsNullable(){
				    return false;
				}
				public Boolean AFILIADO_IDIsKey(){
				    return false;
				}
				public Integer AFILIADO_IDLength(){
				    return 0;
				}
				public Integer AFILIADO_IDPrecision(){
				    return 0;
				}
				public String AFILIADO_IDDefault(){
				
					return "";
				
				}
				public String AFILIADO_IDComment(){
				
				    return "";
				
				}
				public String AFILIADO_IDPattern(){
				
					return "";
				
				}
				public String AFILIADO_IDOriginalDbColumnName(){
				
					return "AFILIADO_ID";
				
				}

				
			    public String TIPO_DOCUMENTO;

				public String getTIPO_DOCUMENTO () {
					return this.TIPO_DOCUMENTO;
				}

				public Boolean TIPO_DOCUMENTOIsNullable(){
				    return true;
				}
				public Boolean TIPO_DOCUMENTOIsKey(){
				    return false;
				}
				public Integer TIPO_DOCUMENTOLength(){
				    return null;
				}
				public Integer TIPO_DOCUMENTOPrecision(){
				    return null;
				}
				public String TIPO_DOCUMENTODefault(){
				
					return null;
				
				}
				public String TIPO_DOCUMENTOComment(){
				
				    return "";
				
				}
				public String TIPO_DOCUMENTOPattern(){
				
					return "";
				
				}
				public String TIPO_DOCUMENTOOriginalDbColumnName(){
				
					return "TIPO_DOCUMENTO";
				
				}

				
			    public String NUMERO_DOCUMENTO;

				public String getNUMERO_DOCUMENTO () {
					return this.NUMERO_DOCUMENTO;
				}

				public Boolean NUMERO_DOCUMENTOIsNullable(){
				    return true;
				}
				public Boolean NUMERO_DOCUMENTOIsKey(){
				    return false;
				}
				public Integer NUMERO_DOCUMENTOLength(){
				    return 0;
				}
				public Integer NUMERO_DOCUMENTOPrecision(){
				    return 0;
				}
				public String NUMERO_DOCUMENTODefault(){
				
					return null;
				
				}
				public String NUMERO_DOCUMENTOComment(){
				
				    return "";
				
				}
				public String NUMERO_DOCUMENTOPattern(){
				
					return "";
				
				}
				public String NUMERO_DOCUMENTOOriginalDbColumnName(){
				
					return "NUMERO_DOCUMENTO";
				
				}

				
			    public String PRIMER_NOMBRE;

				public String getPRIMER_NOMBRE () {
					return this.PRIMER_NOMBRE;
				}

				public Boolean PRIMER_NOMBREIsNullable(){
				    return true;
				}
				public Boolean PRIMER_NOMBREIsKey(){
				    return false;
				}
				public Integer PRIMER_NOMBRELength(){
				    return 0;
				}
				public Integer PRIMER_NOMBREPrecision(){
				    return 0;
				}
				public String PRIMER_NOMBREDefault(){
				
					return null;
				
				}
				public String PRIMER_NOMBREComment(){
				
				    return "";
				
				}
				public String PRIMER_NOMBREPattern(){
				
					return "";
				
				}
				public String PRIMER_NOMBREOriginalDbColumnName(){
				
					return "PRIMER_NOMBRE";
				
				}

				
			    public String SEGUNDO_NOMBRE;

				public String getSEGUNDO_NOMBRE () {
					return this.SEGUNDO_NOMBRE;
				}

				public Boolean SEGUNDO_NOMBREIsNullable(){
				    return true;
				}
				public Boolean SEGUNDO_NOMBREIsKey(){
				    return false;
				}
				public Integer SEGUNDO_NOMBRELength(){
				    return 0;
				}
				public Integer SEGUNDO_NOMBREPrecision(){
				    return 0;
				}
				public String SEGUNDO_NOMBREDefault(){
				
					return null;
				
				}
				public String SEGUNDO_NOMBREComment(){
				
				    return "";
				
				}
				public String SEGUNDO_NOMBREPattern(){
				
					return "";
				
				}
				public String SEGUNDO_NOMBREOriginalDbColumnName(){
				
					return "SEGUNDO_NOMBRE";
				
				}

				
			    public String PRIMER_APELLIDO;

				public String getPRIMER_APELLIDO () {
					return this.PRIMER_APELLIDO;
				}

				public Boolean PRIMER_APELLIDOIsNullable(){
				    return true;
				}
				public Boolean PRIMER_APELLIDOIsKey(){
				    return false;
				}
				public Integer PRIMER_APELLIDOLength(){
				    return 0;
				}
				public Integer PRIMER_APELLIDOPrecision(){
				    return 0;
				}
				public String PRIMER_APELLIDODefault(){
				
					return null;
				
				}
				public String PRIMER_APELLIDOComment(){
				
				    return "";
				
				}
				public String PRIMER_APELLIDOPattern(){
				
					return "";
				
				}
				public String PRIMER_APELLIDOOriginalDbColumnName(){
				
					return "PRIMER_APELLIDO";
				
				}

				
			    public String SEGUNDO_APELLIDO;

				public String getSEGUNDO_APELLIDO () {
					return this.SEGUNDO_APELLIDO;
				}

				public Boolean SEGUNDO_APELLIDOIsNullable(){
				    return true;
				}
				public Boolean SEGUNDO_APELLIDOIsKey(){
				    return false;
				}
				public Integer SEGUNDO_APELLIDOLength(){
				    return 0;
				}
				public Integer SEGUNDO_APELLIDOPrecision(){
				    return 0;
				}
				public String SEGUNDO_APELLIDODefault(){
				
					return null;
				
				}
				public String SEGUNDO_APELLIDOComment(){
				
				    return "";
				
				}
				public String SEGUNDO_APELLIDOPattern(){
				
					return "";
				
				}
				public String SEGUNDO_APELLIDOOriginalDbColumnName(){
				
					return "SEGUNDO_APELLIDO";
				
				}

				
			    public String GLOSA;

				public String getGLOSA () {
					return this.GLOSA;
				}

				public Boolean GLOSAIsNullable(){
				    return false;
				}
				public Boolean GLOSAIsKey(){
				    return false;
				}
				public Integer GLOSALength(){
				    return 0;
				}
				public Integer GLOSAPrecision(){
				    return 0;
				}
				public String GLOSADefault(){
				
					return null;
				
				}
				public String GLOSAComment(){
				
				    return "";
				
				}
				public String GLOSAPattern(){
				
					return "";
				
				}
				public String GLOSAOriginalDbColumnName(){
				
					return "GLOSA";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_PRINCIPAL_MinSaludEtapa2NuevosRegistros.length) {
				if(length < 1024 && commonByteArray_AFI_PRINCIPAL_MinSaludEtapa2NuevosRegistros.length == 0) {
   					commonByteArray_AFI_PRINCIPAL_MinSaludEtapa2NuevosRegistros = new byte[1024];
				} else {
   					commonByteArray_AFI_PRINCIPAL_MinSaludEtapa2NuevosRegistros = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_PRINCIPAL_MinSaludEtapa2NuevosRegistros, 0, length);
			strReturn = new String(commonByteArray_AFI_PRINCIPAL_MinSaludEtapa2NuevosRegistros, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_PRINCIPAL_MinSaludEtapa2NuevosRegistros.length) {
				if(length < 1024 && commonByteArray_AFI_PRINCIPAL_MinSaludEtapa2NuevosRegistros.length == 0) {
   					commonByteArray_AFI_PRINCIPAL_MinSaludEtapa2NuevosRegistros = new byte[1024];
				} else {
   					commonByteArray_AFI_PRINCIPAL_MinSaludEtapa2NuevosRegistros = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_PRINCIPAL_MinSaludEtapa2NuevosRegistros, 0, length);
			strReturn = new String(commonByteArray_AFI_PRINCIPAL_MinSaludEtapa2NuevosRegistros, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_PRINCIPAL_MinSaludEtapa2NuevosRegistros) {

        	try {

        		int length = 0;
		
			        this.PROCESO_ID = dis.readInt();
					
			        this.AFILIADO_ID = dis.readInt();
					
					this.TIPO_DOCUMENTO = readString(dis);
					
					this.NUMERO_DOCUMENTO = readString(dis);
					
					this.PRIMER_NOMBRE = readString(dis);
					
					this.SEGUNDO_NOMBRE = readString(dis);
					
					this.PRIMER_APELLIDO = readString(dis);
					
					this.SEGUNDO_APELLIDO = readString(dis);
					
					this.GLOSA = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_PRINCIPAL_MinSaludEtapa2NuevosRegistros) {

        	try {

        		int length = 0;
		
			        this.PROCESO_ID = dis.readInt();
					
			        this.AFILIADO_ID = dis.readInt();
					
					this.TIPO_DOCUMENTO = readString(dis);
					
					this.NUMERO_DOCUMENTO = readString(dis);
					
					this.PRIMER_NOMBRE = readString(dis);
					
					this.SEGUNDO_NOMBRE = readString(dis);
					
					this.PRIMER_APELLIDO = readString(dis);
					
					this.SEGUNDO_APELLIDO = readString(dis);
					
					this.GLOSA = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.PROCESO_ID);
					
					// int
				
		            	dos.writeInt(this.AFILIADO_ID);
					
					// String
				
						writeString(this.TIPO_DOCUMENTO,dos);
					
					// String
				
						writeString(this.NUMERO_DOCUMENTO,dos);
					
					// String
				
						writeString(this.PRIMER_NOMBRE,dos);
					
					// String
				
						writeString(this.SEGUNDO_NOMBRE,dos);
					
					// String
				
						writeString(this.PRIMER_APELLIDO,dos);
					
					// String
				
						writeString(this.SEGUNDO_APELLIDO,dos);
					
					// String
				
						writeString(this.GLOSA,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.PROCESO_ID);
					
					// int
				
		            	dos.writeInt(this.AFILIADO_ID);
					
					// String
				
						writeString(this.TIPO_DOCUMENTO,dos);
					
					// String
				
						writeString(this.NUMERO_DOCUMENTO,dos);
					
					// String
				
						writeString(this.PRIMER_NOMBRE,dos);
					
					// String
				
						writeString(this.SEGUNDO_NOMBRE,dos);
					
					// String
				
						writeString(this.PRIMER_APELLIDO,dos);
					
					// String
				
						writeString(this.SEGUNDO_APELLIDO,dos);
					
					// String
				
						writeString(this.GLOSA,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("PROCESO_ID="+String.valueOf(PROCESO_ID));
		sb.append(",AFILIADO_ID="+String.valueOf(AFILIADO_ID));
		sb.append(",TIPO_DOCUMENTO="+TIPO_DOCUMENTO);
		sb.append(",NUMERO_DOCUMENTO="+NUMERO_DOCUMENTO);
		sb.append(",PRIMER_NOMBRE="+PRIMER_NOMBRE);
		sb.append(",SEGUNDO_NOMBRE="+SEGUNDO_NOMBRE);
		sb.append(",PRIMER_APELLIDO="+PRIMER_APELLIDO);
		sb.append(",SEGUNDO_APELLIDO="+SEGUNDO_APELLIDO);
		sb.append(",GLOSA="+GLOSA);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(out3Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class out1Struct implements routines.system.IPersistableRow<out1Struct> {
    final static byte[] commonByteArrayLock_AFI_PRINCIPAL_MinSaludEtapa2NuevosRegistros = new byte[0];
    static byte[] commonByteArray_AFI_PRINCIPAL_MinSaludEtapa2NuevosRegistros = new byte[0];

	
			    public Integer ID;

				public Integer getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return true;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return 0;
				}
				public Integer IDPrecision(){
				    return 0;
				}
				public String IDDefault(){
				
					return null;
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public String PERSONAS_ID;

				public String getPERSONAS_ID () {
					return this.PERSONAS_ID;
				}

				public Boolean PERSONAS_IDIsNullable(){
				    return true;
				}
				public Boolean PERSONAS_IDIsKey(){
				    return false;
				}
				public Integer PERSONAS_IDLength(){
				    return 0;
				}
				public Integer PERSONAS_IDPrecision(){
				    return 0;
				}
				public String PERSONAS_IDDefault(){
				
					return null;
				
				}
				public String PERSONAS_IDComment(){
				
				    return "";
				
				}
				public String PERSONAS_IDPattern(){
				
					return "";
				
				}
				public String PERSONAS_IDOriginalDbColumnName(){
				
					return "PERSONAS_ID";
				
				}

				
			    public String PRIMER_NOMBRE;

				public String getPRIMER_NOMBRE () {
					return this.PRIMER_NOMBRE;
				}

				public Boolean PRIMER_NOMBREIsNullable(){
				    return true;
				}
				public Boolean PRIMER_NOMBREIsKey(){
				    return false;
				}
				public Integer PRIMER_NOMBRELength(){
				    return 0;
				}
				public Integer PRIMER_NOMBREPrecision(){
				    return 0;
				}
				public String PRIMER_NOMBREDefault(){
				
					return null;
				
				}
				public String PRIMER_NOMBREComment(){
				
				    return "";
				
				}
				public String PRIMER_NOMBREPattern(){
				
					return "";
				
				}
				public String PRIMER_NOMBREOriginalDbColumnName(){
				
					return "PRIMER_NOMBRE";
				
				}

				
			    public String SEGUNDO_NOMBRE;

				public String getSEGUNDO_NOMBRE () {
					return this.SEGUNDO_NOMBRE;
				}

				public Boolean SEGUNDO_NOMBREIsNullable(){
				    return true;
				}
				public Boolean SEGUNDO_NOMBREIsKey(){
				    return false;
				}
				public Integer SEGUNDO_NOMBRELength(){
				    return 0;
				}
				public Integer SEGUNDO_NOMBREPrecision(){
				    return 0;
				}
				public String SEGUNDO_NOMBREDefault(){
				
					return null;
				
				}
				public String SEGUNDO_NOMBREComment(){
				
				    return "";
				
				}
				public String SEGUNDO_NOMBREPattern(){
				
					return "";
				
				}
				public String SEGUNDO_NOMBREOriginalDbColumnName(){
				
					return "SEGUNDO_NOMBRE";
				
				}

				
			    public String PRIMER_APELLIDO;

				public String getPRIMER_APELLIDO () {
					return this.PRIMER_APELLIDO;
				}

				public Boolean PRIMER_APELLIDOIsNullable(){
				    return true;
				}
				public Boolean PRIMER_APELLIDOIsKey(){
				    return false;
				}
				public Integer PRIMER_APELLIDOLength(){
				    return 0;
				}
				public Integer PRIMER_APELLIDOPrecision(){
				    return 0;
				}
				public String PRIMER_APELLIDODefault(){
				
					return null;
				
				}
				public String PRIMER_APELLIDOComment(){
				
				    return "";
				
				}
				public String PRIMER_APELLIDOPattern(){
				
					return "";
				
				}
				public String PRIMER_APELLIDOOriginalDbColumnName(){
				
					return "PRIMER_APELLIDO";
				
				}

				
			    public String SEGUNDO_APELLIDO;

				public String getSEGUNDO_APELLIDO () {
					return this.SEGUNDO_APELLIDO;
				}

				public Boolean SEGUNDO_APELLIDOIsNullable(){
				    return true;
				}
				public Boolean SEGUNDO_APELLIDOIsKey(){
				    return false;
				}
				public Integer SEGUNDO_APELLIDOLength(){
				    return 0;
				}
				public Integer SEGUNDO_APELLIDOPrecision(){
				    return 0;
				}
				public String SEGUNDO_APELLIDODefault(){
				
					return null;
				
				}
				public String SEGUNDO_APELLIDOComment(){
				
				    return "";
				
				}
				public String SEGUNDO_APELLIDOPattern(){
				
					return "";
				
				}
				public String SEGUNDO_APELLIDOOriginalDbColumnName(){
				
					return "SEGUNDO_APELLIDO";
				
				}

				
			    public String NUMERO_DOCUMENTO;

				public String getNUMERO_DOCUMENTO () {
					return this.NUMERO_DOCUMENTO;
				}

				public Boolean NUMERO_DOCUMENTOIsNullable(){
				    return true;
				}
				public Boolean NUMERO_DOCUMENTOIsKey(){
				    return false;
				}
				public Integer NUMERO_DOCUMENTOLength(){
				    return 0;
				}
				public Integer NUMERO_DOCUMENTOPrecision(){
				    return 0;
				}
				public String NUMERO_DOCUMENTODefault(){
				
					return null;
				
				}
				public String NUMERO_DOCUMENTOComment(){
				
				    return "";
				
				}
				public String NUMERO_DOCUMENTOPattern(){
				
					return "";
				
				}
				public String NUMERO_DOCUMENTOOriginalDbColumnName(){
				
					return "NUMERO_DOCUMENTO";
				
				}

				
			    public String SIGLA;

				public String getSIGLA () {
					return this.SIGLA;
				}

				public Boolean SIGLAIsNullable(){
				    return true;
				}
				public Boolean SIGLAIsKey(){
				    return false;
				}
				public Integer SIGLALength(){
				    return 0;
				}
				public Integer SIGLAPrecision(){
				    return 0;
				}
				public String SIGLADefault(){
				
					return null;
				
				}
				public String SIGLAComment(){
				
				    return "";
				
				}
				public String SIGLAPattern(){
				
					return "";
				
				}
				public String SIGLAOriginalDbColumnName(){
				
					return "SIGLA";
				
				}

				
			    public String EMAIL;

				public String getEMAIL () {
					return this.EMAIL;
				}

				public Boolean EMAILIsNullable(){
				    return true;
				}
				public Boolean EMAILIsKey(){
				    return false;
				}
				public Integer EMAILLength(){
				    return 0;
				}
				public Integer EMAILPrecision(){
				    return 0;
				}
				public String EMAILDefault(){
				
					return null;
				
				}
				public String EMAILComment(){
				
				    return "";
				
				}
				public String EMAILPattern(){
				
					return "";
				
				}
				public String EMAILOriginalDbColumnName(){
				
					return "EMAIL";
				
				}

				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_PRINCIPAL_MinSaludEtapa2NuevosRegistros.length) {
				if(length < 1024 && commonByteArray_AFI_PRINCIPAL_MinSaludEtapa2NuevosRegistros.length == 0) {
   					commonByteArray_AFI_PRINCIPAL_MinSaludEtapa2NuevosRegistros = new byte[1024];
				} else {
   					commonByteArray_AFI_PRINCIPAL_MinSaludEtapa2NuevosRegistros = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_PRINCIPAL_MinSaludEtapa2NuevosRegistros, 0, length);
			strReturn = new String(commonByteArray_AFI_PRINCIPAL_MinSaludEtapa2NuevosRegistros, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_PRINCIPAL_MinSaludEtapa2NuevosRegistros.length) {
				if(length < 1024 && commonByteArray_AFI_PRINCIPAL_MinSaludEtapa2NuevosRegistros.length == 0) {
   					commonByteArray_AFI_PRINCIPAL_MinSaludEtapa2NuevosRegistros = new byte[1024];
				} else {
   					commonByteArray_AFI_PRINCIPAL_MinSaludEtapa2NuevosRegistros = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_PRINCIPAL_MinSaludEtapa2NuevosRegistros, 0, length);
			strReturn = new String(commonByteArray_AFI_PRINCIPAL_MinSaludEtapa2NuevosRegistros, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_PRINCIPAL_MinSaludEtapa2NuevosRegistros) {

        	try {

        		int length = 0;
		
						this.ID = readInteger(dis);
					
					this.PERSONAS_ID = readString(dis);
					
					this.PRIMER_NOMBRE = readString(dis);
					
					this.SEGUNDO_NOMBRE = readString(dis);
					
					this.PRIMER_APELLIDO = readString(dis);
					
					this.SEGUNDO_APELLIDO = readString(dis);
					
					this.NUMERO_DOCUMENTO = readString(dis);
					
					this.SIGLA = readString(dis);
					
					this.EMAIL = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_PRINCIPAL_MinSaludEtapa2NuevosRegistros) {

        	try {

        		int length = 0;
		
						this.ID = readInteger(dis);
					
					this.PERSONAS_ID = readString(dis);
					
					this.PRIMER_NOMBRE = readString(dis);
					
					this.SEGUNDO_NOMBRE = readString(dis);
					
					this.PRIMER_APELLIDO = readString(dis);
					
					this.SEGUNDO_APELLIDO = readString(dis);
					
					this.NUMERO_DOCUMENTO = readString(dis);
					
					this.SIGLA = readString(dis);
					
					this.EMAIL = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.ID,dos);
					
					// String
				
						writeString(this.PERSONAS_ID,dos);
					
					// String
				
						writeString(this.PRIMER_NOMBRE,dos);
					
					// String
				
						writeString(this.SEGUNDO_NOMBRE,dos);
					
					// String
				
						writeString(this.PRIMER_APELLIDO,dos);
					
					// String
				
						writeString(this.SEGUNDO_APELLIDO,dos);
					
					// String
				
						writeString(this.NUMERO_DOCUMENTO,dos);
					
					// String
				
						writeString(this.SIGLA,dos);
					
					// String
				
						writeString(this.EMAIL,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.ID,dos);
					
					// String
				
						writeString(this.PERSONAS_ID,dos);
					
					// String
				
						writeString(this.PRIMER_NOMBRE,dos);
					
					// String
				
						writeString(this.SEGUNDO_NOMBRE,dos);
					
					// String
				
						writeString(this.PRIMER_APELLIDO,dos);
					
					// String
				
						writeString(this.SEGUNDO_APELLIDO,dos);
					
					// String
				
						writeString(this.NUMERO_DOCUMENTO,dos);
					
					// String
				
						writeString(this.SIGLA,dos);
					
					// String
				
						writeString(this.EMAIL,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",PERSONAS_ID="+PERSONAS_ID);
		sb.append(",PRIMER_NOMBRE="+PRIMER_NOMBRE);
		sb.append(",SEGUNDO_NOMBRE="+SEGUNDO_NOMBRE);
		sb.append(",PRIMER_APELLIDO="+PRIMER_APELLIDO);
		sb.append(",SEGUNDO_APELLIDO="+SEGUNDO_APELLIDO);
		sb.append(",NUMERO_DOCUMENTO="+NUMERO_DOCUMENTO);
		sb.append(",SIGLA="+SIGLA);
		sb.append(",EMAIL="+EMAIL);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(out1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row2Struct implements routines.system.IPersistableRow<row2Struct> {
    final static byte[] commonByteArrayLock_AFI_PRINCIPAL_MinSaludEtapa2NuevosRegistros = new byte[0];
    static byte[] commonByteArray_AFI_PRINCIPAL_MinSaludEtapa2NuevosRegistros = new byte[0];

	
			    public Integer ID;

				public Integer getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return true;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return 0;
				}
				public Integer IDPrecision(){
				    return 0;
				}
				public String IDDefault(){
				
					return null;
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public String PERSONAS_ID;

				public String getPERSONAS_ID () {
					return this.PERSONAS_ID;
				}

				public Boolean PERSONAS_IDIsNullable(){
				    return true;
				}
				public Boolean PERSONAS_IDIsKey(){
				    return false;
				}
				public Integer PERSONAS_IDLength(){
				    return 0;
				}
				public Integer PERSONAS_IDPrecision(){
				    return 0;
				}
				public String PERSONAS_IDDefault(){
				
					return null;
				
				}
				public String PERSONAS_IDComment(){
				
				    return "";
				
				}
				public String PERSONAS_IDPattern(){
				
					return "";
				
				}
				public String PERSONAS_IDOriginalDbColumnName(){
				
					return "PERSONAS_ID";
				
				}

				
			    public String PRIMER_NOMBRE;

				public String getPRIMER_NOMBRE () {
					return this.PRIMER_NOMBRE;
				}

				public Boolean PRIMER_NOMBREIsNullable(){
				    return true;
				}
				public Boolean PRIMER_NOMBREIsKey(){
				    return false;
				}
				public Integer PRIMER_NOMBRELength(){
				    return 0;
				}
				public Integer PRIMER_NOMBREPrecision(){
				    return 0;
				}
				public String PRIMER_NOMBREDefault(){
				
					return null;
				
				}
				public String PRIMER_NOMBREComment(){
				
				    return "";
				
				}
				public String PRIMER_NOMBREPattern(){
				
					return "";
				
				}
				public String PRIMER_NOMBREOriginalDbColumnName(){
				
					return "PRIMER_NOMBRE";
				
				}

				
			    public String SEGUNDO_NOMBRE;

				public String getSEGUNDO_NOMBRE () {
					return this.SEGUNDO_NOMBRE;
				}

				public Boolean SEGUNDO_NOMBREIsNullable(){
				    return true;
				}
				public Boolean SEGUNDO_NOMBREIsKey(){
				    return false;
				}
				public Integer SEGUNDO_NOMBRELength(){
				    return 0;
				}
				public Integer SEGUNDO_NOMBREPrecision(){
				    return 0;
				}
				public String SEGUNDO_NOMBREDefault(){
				
					return null;
				
				}
				public String SEGUNDO_NOMBREComment(){
				
				    return "";
				
				}
				public String SEGUNDO_NOMBREPattern(){
				
					return "";
				
				}
				public String SEGUNDO_NOMBREOriginalDbColumnName(){
				
					return "SEGUNDO_NOMBRE";
				
				}

				
			    public String PRIMER_APELLIDO;

				public String getPRIMER_APELLIDO () {
					return this.PRIMER_APELLIDO;
				}

				public Boolean PRIMER_APELLIDOIsNullable(){
				    return true;
				}
				public Boolean PRIMER_APELLIDOIsKey(){
				    return false;
				}
				public Integer PRIMER_APELLIDOLength(){
				    return 0;
				}
				public Integer PRIMER_APELLIDOPrecision(){
				    return 0;
				}
				public String PRIMER_APELLIDODefault(){
				
					return null;
				
				}
				public String PRIMER_APELLIDOComment(){
				
				    return "";
				
				}
				public String PRIMER_APELLIDOPattern(){
				
					return "";
				
				}
				public String PRIMER_APELLIDOOriginalDbColumnName(){
				
					return "PRIMER_APELLIDO";
				
				}

				
			    public String SEGUNDO_APELLIDO;

				public String getSEGUNDO_APELLIDO () {
					return this.SEGUNDO_APELLIDO;
				}

				public Boolean SEGUNDO_APELLIDOIsNullable(){
				    return true;
				}
				public Boolean SEGUNDO_APELLIDOIsKey(){
				    return false;
				}
				public Integer SEGUNDO_APELLIDOLength(){
				    return 0;
				}
				public Integer SEGUNDO_APELLIDOPrecision(){
				    return 0;
				}
				public String SEGUNDO_APELLIDODefault(){
				
					return null;
				
				}
				public String SEGUNDO_APELLIDOComment(){
				
				    return "";
				
				}
				public String SEGUNDO_APELLIDOPattern(){
				
					return "";
				
				}
				public String SEGUNDO_APELLIDOOriginalDbColumnName(){
				
					return "SEGUNDO_APELLIDO";
				
				}

				
			    public String NUMERO_DOCUMENTO;

				public String getNUMERO_DOCUMENTO () {
					return this.NUMERO_DOCUMENTO;
				}

				public Boolean NUMERO_DOCUMENTOIsNullable(){
				    return true;
				}
				public Boolean NUMERO_DOCUMENTOIsKey(){
				    return false;
				}
				public Integer NUMERO_DOCUMENTOLength(){
				    return 0;
				}
				public Integer NUMERO_DOCUMENTOPrecision(){
				    return 0;
				}
				public String NUMERO_DOCUMENTODefault(){
				
					return null;
				
				}
				public String NUMERO_DOCUMENTOComment(){
				
				    return "";
				
				}
				public String NUMERO_DOCUMENTOPattern(){
				
					return "";
				
				}
				public String NUMERO_DOCUMENTOOriginalDbColumnName(){
				
					return "NUMERO_DOCUMENTO";
				
				}

				
			    public Integer TDOCUMENTOS_ID;

				public Integer getTDOCUMENTOS_ID () {
					return this.TDOCUMENTOS_ID;
				}

				public Boolean TDOCUMENTOS_IDIsNullable(){
				    return true;
				}
				public Boolean TDOCUMENTOS_IDIsKey(){
				    return false;
				}
				public Integer TDOCUMENTOS_IDLength(){
				    return 0;
				}
				public Integer TDOCUMENTOS_IDPrecision(){
				    return 0;
				}
				public String TDOCUMENTOS_IDDefault(){
				
					return null;
				
				}
				public String TDOCUMENTOS_IDComment(){
				
				    return "";
				
				}
				public String TDOCUMENTOS_IDPattern(){
				
					return "";
				
				}
				public String TDOCUMENTOS_IDOriginalDbColumnName(){
				
					return "TDOCUMENTOS_ID";
				
				}

				
			    public String EMAIL;

				public String getEMAIL () {
					return this.EMAIL;
				}

				public Boolean EMAILIsNullable(){
				    return true;
				}
				public Boolean EMAILIsKey(){
				    return false;
				}
				public Integer EMAILLength(){
				    return 0;
				}
				public Integer EMAILPrecision(){
				    return 0;
				}
				public String EMAILDefault(){
				
					return null;
				
				}
				public String EMAILComment(){
				
				    return "";
				
				}
				public String EMAILPattern(){
				
					return "";
				
				}
				public String EMAILOriginalDbColumnName(){
				
					return "EMAIL";
				
				}

				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_PRINCIPAL_MinSaludEtapa2NuevosRegistros.length) {
				if(length < 1024 && commonByteArray_AFI_PRINCIPAL_MinSaludEtapa2NuevosRegistros.length == 0) {
   					commonByteArray_AFI_PRINCIPAL_MinSaludEtapa2NuevosRegistros = new byte[1024];
				} else {
   					commonByteArray_AFI_PRINCIPAL_MinSaludEtapa2NuevosRegistros = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_PRINCIPAL_MinSaludEtapa2NuevosRegistros, 0, length);
			strReturn = new String(commonByteArray_AFI_PRINCIPAL_MinSaludEtapa2NuevosRegistros, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_PRINCIPAL_MinSaludEtapa2NuevosRegistros.length) {
				if(length < 1024 && commonByteArray_AFI_PRINCIPAL_MinSaludEtapa2NuevosRegistros.length == 0) {
   					commonByteArray_AFI_PRINCIPAL_MinSaludEtapa2NuevosRegistros = new byte[1024];
				} else {
   					commonByteArray_AFI_PRINCIPAL_MinSaludEtapa2NuevosRegistros = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_PRINCIPAL_MinSaludEtapa2NuevosRegistros, 0, length);
			strReturn = new String(commonByteArray_AFI_PRINCIPAL_MinSaludEtapa2NuevosRegistros, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_PRINCIPAL_MinSaludEtapa2NuevosRegistros) {

        	try {

        		int length = 0;
		
						this.ID = readInteger(dis);
					
					this.PERSONAS_ID = readString(dis);
					
					this.PRIMER_NOMBRE = readString(dis);
					
					this.SEGUNDO_NOMBRE = readString(dis);
					
					this.PRIMER_APELLIDO = readString(dis);
					
					this.SEGUNDO_APELLIDO = readString(dis);
					
					this.NUMERO_DOCUMENTO = readString(dis);
					
						this.TDOCUMENTOS_ID = readInteger(dis);
					
					this.EMAIL = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_PRINCIPAL_MinSaludEtapa2NuevosRegistros) {

        	try {

        		int length = 0;
		
						this.ID = readInteger(dis);
					
					this.PERSONAS_ID = readString(dis);
					
					this.PRIMER_NOMBRE = readString(dis);
					
					this.SEGUNDO_NOMBRE = readString(dis);
					
					this.PRIMER_APELLIDO = readString(dis);
					
					this.SEGUNDO_APELLIDO = readString(dis);
					
					this.NUMERO_DOCUMENTO = readString(dis);
					
						this.TDOCUMENTOS_ID = readInteger(dis);
					
					this.EMAIL = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.ID,dos);
					
					// String
				
						writeString(this.PERSONAS_ID,dos);
					
					// String
				
						writeString(this.PRIMER_NOMBRE,dos);
					
					// String
				
						writeString(this.SEGUNDO_NOMBRE,dos);
					
					// String
				
						writeString(this.PRIMER_APELLIDO,dos);
					
					// String
				
						writeString(this.SEGUNDO_APELLIDO,dos);
					
					// String
				
						writeString(this.NUMERO_DOCUMENTO,dos);
					
					// Integer
				
						writeInteger(this.TDOCUMENTOS_ID,dos);
					
					// String
				
						writeString(this.EMAIL,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.ID,dos);
					
					// String
				
						writeString(this.PERSONAS_ID,dos);
					
					// String
				
						writeString(this.PRIMER_NOMBRE,dos);
					
					// String
				
						writeString(this.SEGUNDO_NOMBRE,dos);
					
					// String
				
						writeString(this.PRIMER_APELLIDO,dos);
					
					// String
				
						writeString(this.SEGUNDO_APELLIDO,dos);
					
					// String
				
						writeString(this.NUMERO_DOCUMENTO,dos);
					
					// Integer
				
						writeInteger(this.TDOCUMENTOS_ID,dos);
					
					// String
				
						writeString(this.EMAIL,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",PERSONAS_ID="+PERSONAS_ID);
		sb.append(",PRIMER_NOMBRE="+PRIMER_NOMBRE);
		sb.append(",SEGUNDO_NOMBRE="+SEGUNDO_NOMBRE);
		sb.append(",PRIMER_APELLIDO="+PRIMER_APELLIDO);
		sb.append(",SEGUNDO_APELLIDO="+SEGUNDO_APELLIDO);
		sb.append(",NUMERO_DOCUMENTO="+NUMERO_DOCUMENTO);
		sb.append(",TDOCUMENTOS_ID="+String.valueOf(TDOCUMENTOS_ID));
		sb.append(",EMAIL="+EMAIL);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row2Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class after_tLoop_1Struct implements routines.system.IPersistableRow<after_tLoop_1Struct> {
    final static byte[] commonByteArrayLock_AFI_PRINCIPAL_MinSaludEtapa2NuevosRegistros = new byte[0];
    static byte[] commonByteArray_AFI_PRINCIPAL_MinSaludEtapa2NuevosRegistros = new byte[0];

	



    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_PRINCIPAL_MinSaludEtapa2NuevosRegistros) {

        	try {

        		int length = 0;
		

		

        }

		
			finally {}
		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_PRINCIPAL_MinSaludEtapa2NuevosRegistros) {

        	try {

        		int length = 0;
		

		

        }

		
			finally {}
		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
        }

			finally {}
		

    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
        }

			finally {}
		

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(after_tLoop_1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tLoop_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tLoop_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;


		tHashInput_2Process(globalMap);
		tHashInput_1Process(globalMap);
		tHashInput_3Process(globalMap);

		row2Struct row2 = new row2Struct();
out1Struct out1 = new out1Struct();
out3Struct out3 = new out3Struct();
row13Struct row13 = new row13Struct();
row5Struct row5 = new row5Struct();
out5Struct out5 = new out5Struct();
row6Struct row6 = new row6Struct();
out4Struct out4 = new out4Struct();



	
	/**
	 * [tLoop_1 begin ] start
	 */

				
			int NB_ITERATE_tOracleInput_3 = 0; //for statistics
			

	
		
		ok_Hash.put("tLoop_1", false);
		start_Hash.put("tLoop_1", System.currentTimeMillis());
		
	
	currentComponent="tLoop_1";
	
	
		int tos_count_tLoop_1 = 0;
		

int current_iteration_tLoop_1 = 0;

;
	
while(context.infoConteoRegistros>0){
	
current_iteration_tLoop_1++;
globalMap.put("tLoop_1_CURRENT_ITERATION",current_iteration_tLoop_1);


 



/**
 * [tLoop_1 begin ] stop
 */
	
	/**
	 * [tLoop_1 main ] start
	 */

	

	
	
	currentComponent="tLoop_1";
	
	

 


	tos_count_tLoop_1++;

/**
 * [tLoop_1 main ] stop
 */
	
	/**
	 * [tLoop_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLoop_1";
	
	

 



/**
 * [tLoop_1 process_data_begin ] stop
 */
	NB_ITERATE_tOracleInput_3++;
	
	
					if(execStat){				
	       				runStat.updateStatOnConnection("out1", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("out3", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("out4", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row2", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row5", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("out5", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row6", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("OnComponentOk10", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row13", 3, 0);
					}           			
				
				if(execStat){
					runStat.updateStatOnConnection("iterate1", 1, "exec" + NB_ITERATE_tOracleInput_3);
					//Thread.sleep(1000);
				}				
			







	
	/**
	 * [tOracleSP_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleSP_3", false);
		start_Hash.put("tOracleSP_3", System.currentTimeMillis());
		
	
	currentComponent="tOracleSP_3";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"out5");
					}
				
		int tos_count_tOracleSP_3 = 0;
		

	java.sql.Connection connection_tOracleSP_3 = null;
	connection_tOracleSP_3 = (java.sql.Connection) globalMap.get("conn_tOracleConnection_1");
	

java.sql.CallableStatement statement_tOracleSP_3 = connection_tOracleSP_3.prepareCall("{call " + "EXD.InsCruceArchivoGlosa" + "(?,?,?)}");

java.sql.Timestamp tmpDate_tOracleSP_3;
String tmpString_tOracleSP_3;

 



/**
 * [tOracleSP_3 begin ] stop
 */



	
	/**
	 * [tMap_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_2", false);
		start_Hash.put("tMap_2", System.currentTimeMillis());
		
	
	currentComponent="tMap_2";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row5");
					}
				
		int tos_count_tMap_2 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_2__Struct  {
}
Var__tMap_2__Struct Var__tMap_2 = new Var__tMap_2__Struct();
// ###############################

// ###############################
// # Outputs initialization
out5Struct out5_tmp = new out5Struct();
// ###############################

        
        



        









 



/**
 * [tMap_2 begin ] stop
 */





	
	/**
	 * [tFileOutputDelimited_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputDelimited_1", false);
		start_Hash.put("tFileOutputDelimited_1", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputDelimited_1";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"out4");
					}
				
		int tos_count_tFileOutputDelimited_1 = 0;
		

String fileName_tFileOutputDelimited_1 = "";
    fileName_tFileOutputDelimited_1 = (new java.io.File(context.fileSystem_Path+"/"+context.fileSystem_Area+"/"+context.archivoSalida+".CSV")).getAbsolutePath().replace("\\","/");
    String fullName_tFileOutputDelimited_1 = null;
    String extension_tFileOutputDelimited_1 = null;
    String directory_tFileOutputDelimited_1 = null;
    if((fileName_tFileOutputDelimited_1.indexOf("/") != -1)) {
        if(fileName_tFileOutputDelimited_1.lastIndexOf(".") < fileName_tFileOutputDelimited_1.lastIndexOf("/")) {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
            extension_tFileOutputDelimited_1 = "";
        } else {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0, fileName_tFileOutputDelimited_1.lastIndexOf("."));
            extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(fileName_tFileOutputDelimited_1.lastIndexOf("."));
        }
        directory_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0, fileName_tFileOutputDelimited_1.lastIndexOf("/"));
    } else {
        if(fileName_tFileOutputDelimited_1.lastIndexOf(".") != -1) {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0, fileName_tFileOutputDelimited_1.lastIndexOf("."));
            extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(fileName_tFileOutputDelimited_1.lastIndexOf("."));
        } else {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
            extension_tFileOutputDelimited_1 = "";
        }
        directory_tFileOutputDelimited_1 = "";
    }
    boolean isFileGenerated_tFileOutputDelimited_1 = true;
    java.io.File filetFileOutputDelimited_1 = new java.io.File(fileName_tFileOutputDelimited_1);
    globalMap.put("tFileOutputDelimited_1_FILE_NAME",fileName_tFileOutputDelimited_1);
        if(filetFileOutputDelimited_1.exists()){
            isFileGenerated_tFileOutputDelimited_1 = false;
        }
            int nb_line_tFileOutputDelimited_1 = 0;
            int splitedFileNo_tFileOutputDelimited_1 = 0;
            int currentRow_tFileOutputDelimited_1 = 0;

            final String OUT_DELIM_tFileOutputDelimited_1 = /** Start field tFileOutputDelimited_1:FIELDSEPARATOR */";"/** End field tFileOutputDelimited_1:FIELDSEPARATOR */;

            final String OUT_DELIM_ROWSEP_tFileOutputDelimited_1 = /** Start field tFileOutputDelimited_1:ROWSEPARATOR */"\n"/** End field tFileOutputDelimited_1:ROWSEPARATOR */;

                    //create directory only if not exists
                    if(directory_tFileOutputDelimited_1 != null && directory_tFileOutputDelimited_1.trim().length() != 0) {
                        java.io.File dir_tFileOutputDelimited_1 = new java.io.File(directory_tFileOutputDelimited_1);
                        if(!dir_tFileOutputDelimited_1.exists()) {
                            dir_tFileOutputDelimited_1.mkdirs();
                        }
                    }

                        //routines.system.Row
                        java.io.Writer outtFileOutputDelimited_1 = null;

                        outtFileOutputDelimited_1 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
                        new java.io.FileOutputStream(fileName_tFileOutputDelimited_1, true),"ISO-8859-15"));
                resourceMap.put("out_tFileOutputDelimited_1", outtFileOutputDelimited_1);
                                    if(filetFileOutputDelimited_1.length()==0){
                                        outtFileOutputDelimited_1.write("TIPO_DOCUMENTO");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("NUMERO_DOCUMENTO");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("PRIMER_NOMBRE");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("SEGUNDO_NOMBRE");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("PRIMER_APELLIDO");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("SEGUNDO_APELLIDO");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("GLOSA");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("DESCRIPCION");
                                        outtFileOutputDelimited_1.write(OUT_DELIM_ROWSEP_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.flush();
                                    }


resourceMap.put("nb_line_tFileOutputDelimited_1", nb_line_tFileOutputDelimited_1);

 



/**
 * [tFileOutputDelimited_1 begin ] stop
 */



	
	/**
	 * [tMap_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_1", false);
		start_Hash.put("tMap_1", System.currentTimeMillis());
		
	
	currentComponent="tMap_1";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row6");
					}
				
		int tos_count_tMap_1 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row7Struct> tHash_Lookup_row7 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row7Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row7Struct>) 
					globalMap.get( "tHash_Lookup_row7" ))
					;					
					
	

row7Struct row7HashKey = new row7Struct();
row7Struct row7Default = new row7Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_1__Struct  {
}
Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
// ###############################

// ###############################
// # Outputs initialization
out4Struct out4_tmp = new out4Struct();
// ###############################

        
        



        









 



/**
 * [tMap_1 begin ] stop
 */



	
	/**
	 * [tReplicate_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tReplicate_1", false);
		start_Hash.put("tReplicate_1", System.currentTimeMillis());
		
	
	currentComponent="tReplicate_1";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row13");
					}
				
		int tos_count_tReplicate_1 = 0;
		

 



/**
 * [tReplicate_1 begin ] stop
 */



	
	/**
	 * [tNormalize_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tNormalize_3", false);
		start_Hash.put("tNormalize_3", System.currentTimeMillis());
		
	
	currentComponent="tNormalize_3";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"out3");
					}
				
		int tos_count_tNormalize_3 = 0;
		

	int lastNoEmptyIndex_tNormalize_3 = 0;
    int nb_line_tNormalize_3 = 0;
        String tmp_tNormalize_3 = null;
        StringBuilder currentRecord_tNormalize_3 = null;
        String [] normalizeRecord_tNormalize_3 = null;
        java.util.Set<String> recordSet_tNormalize_3 = new java.util.HashSet<String>();
        
				if ( ((String)";").length() == 0 ){
					throw new IllegalArgumentException("Field Separator must be assigned a char."); 
				}
				

 



/**
 * [tNormalize_3 begin ] stop
 */



	
	/**
	 * [tMap_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_5", false);
		start_Hash.put("tMap_5", System.currentTimeMillis());
		
	
	currentComponent="tMap_5";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"out1");
					}
				
		int tos_count_tMap_5 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row3Struct> tHash_Lookup_row3 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row3Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row3Struct>) 
					globalMap.get( "tHash_Lookup_row3" ))
					;					
					
	

row3Struct row3HashKey = new row3Struct();
row3Struct row3Default = new row3Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_5__Struct  {
	int PROCESO_ID;
}
Var__tMap_5__Struct Var__tMap_5 = new Var__tMap_5__Struct();
// ###############################

// ###############################
// # Outputs initialization
out3Struct out3_tmp = new out3Struct();
// ###############################

        
        



        









 



/**
 * [tMap_5 begin ] stop
 */



	
	/**
	 * [tMap_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_3", false);
		start_Hash.put("tMap_3", System.currentTimeMillis());
		
	
	currentComponent="tMap_3";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row2");
					}
				
		int tos_count_tMap_3 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row12Struct> tHash_Lookup_row12 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row12Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row12Struct>) 
					globalMap.get( "tHash_Lookup_row12" ))
					;					
					
	

row12Struct row12HashKey = new row12Struct();
row12Struct row12Default = new row12Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_3__Struct  {
}
Var__tMap_3__Struct Var__tMap_3 = new Var__tMap_3__Struct();
// ###############################

// ###############################
// # Outputs initialization
out1Struct out1_tmp = new out1Struct();
// ###############################

        
        



        









 



/**
 * [tMap_3 begin ] stop
 */



	
	/**
	 * [tOracleInput_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_3", false);
		start_Hash.put("tOracleInput_3", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_3";
	
	
		int tos_count_tOracleInput_3 = 0;
		
	


	
		    int nb_line_tOracleInput_3 = 0;
		    java.sql.Connection conn_tOracleInput_3 = null;
				conn_tOracleInput_3 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");
				
                boolean isTimeZoneNull_tOracleInput_3 = false;
				boolean isConnectionWrapped_tOracleInput_3 = !(conn_tOracleInput_3 instanceof oracle.jdbc.OracleConnection) && conn_tOracleInput_3.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tOracleInput_3 = null;
                if (isConnectionWrapped_tOracleInput_3) {
					unwrappedOraConn_tOracleInput_3 = conn_tOracleInput_3.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tOracleInput_3 != null) {
                        isTimeZoneNull_tOracleInput_3 = (unwrappedOraConn_tOracleInput_3.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tOracleInput_3 = (((oracle.jdbc.OracleConnection)conn_tOracleInput_3).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tOracleInput_3) {
					java.sql.Statement stmtGetTZ_tOracleInput_3 = conn_tOracleInput_3.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_3 = stmtGetTZ_tOracleInput_3.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_3 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tOracleInput_3.next()) {
						sessionTimezone_tOracleInput_3 = rsGetTZ_tOracleInput_3.getString(1);
					}
					if (isConnectionWrapped_tOracleInput_3 && unwrappedOraConn_tOracleInput_3 != null) {
                        unwrappedOraConn_tOracleInput_3.setSessionTimeZone(sessionTimezone_tOracleInput_3);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_3).setSessionTimeZone(sessionTimezone_tOracleInput_3);
                    }
				}
			
		    
			java.sql.Statement stmt_tOracleInput_3 = conn_tOracleInput_3.createStatement();

		    String dbquery_tOracleInput_3 = "SELECT\n	DISTINCT GA.ID,\n	GA.PERSONAS_ID,\n	GP.PRIMER_NOMBRE,\n	GP.SEGUNDO_NOMBRE,\n	GP.PRIMER_APELLIDO,\n	GP.SEGUNDO_"
+"APELLIDO,\n	GP.DOCUMENTO AS NUMERO_DOCUMENTO,\n	GP.TDOCUMENTOS_ID,\n	GP.EMAIL\nFROM\n	SALUDSIS.GEN_AFILIADOS GA\n	INNER "
+"JOIN SALUDSIS.GEN_PERSONAS GP ON GA.PERSONAS_ID = GP.ID\nWHERE\n	GA.ESTAFILIACION='Activo' AND \n	GA.ESTREGISTRO_ID=1 AN"
+"D\n	GP.ESTREGISTRO_ID=1\nOFFSET "+context.auxPosicionRegistros+" ROWS FETCH NEXT "+context.auxAumentoRegistros+" ROWS ONLY";
		    

		    globalMap.put("tOracleInput_3_QUERY",dbquery_tOracleInput_3);

		    java.sql.ResultSet rs_tOracleInput_3 = null;

		    try {
		    	rs_tOracleInput_3 = stmt_tOracleInput_3.executeQuery(dbquery_tOracleInput_3);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_3 = rs_tOracleInput_3.getMetaData();
		    	int colQtyInRs_tOracleInput_3 = rsmd_tOracleInput_3.getColumnCount();

		    String tmpContent_tOracleInput_3 = null;
		    
		    
		    while (rs_tOracleInput_3.next()) {
		        nb_line_tOracleInput_3++;
		        
							if(colQtyInRs_tOracleInput_3 < 1) {
								row2.ID = null;
							} else {
		                          
					if(rs_tOracleInput_3.getObject(1) != null) {
						row2.ID = rs_tOracleInput_3.getInt(1);
					} else {
				
						row2.ID = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_3 < 2) {
								row2.PERSONAS_ID = null;
							} else {
	                         		
        	row2.PERSONAS_ID = routines.system.JDBCUtil.getString(rs_tOracleInput_3, 2, false);
		                    }
							if(colQtyInRs_tOracleInput_3 < 3) {
								row2.PRIMER_NOMBRE = null;
							} else {
	                         		
        	row2.PRIMER_NOMBRE = routines.system.JDBCUtil.getString(rs_tOracleInput_3, 3, false);
		                    }
							if(colQtyInRs_tOracleInput_3 < 4) {
								row2.SEGUNDO_NOMBRE = null;
							} else {
	                         		
        	row2.SEGUNDO_NOMBRE = routines.system.JDBCUtil.getString(rs_tOracleInput_3, 4, false);
		                    }
							if(colQtyInRs_tOracleInput_3 < 5) {
								row2.PRIMER_APELLIDO = null;
							} else {
	                         		
        	row2.PRIMER_APELLIDO = routines.system.JDBCUtil.getString(rs_tOracleInput_3, 5, false);
		                    }
							if(colQtyInRs_tOracleInput_3 < 6) {
								row2.SEGUNDO_APELLIDO = null;
							} else {
	                         		
        	row2.SEGUNDO_APELLIDO = routines.system.JDBCUtil.getString(rs_tOracleInput_3, 6, false);
		                    }
							if(colQtyInRs_tOracleInput_3 < 7) {
								row2.NUMERO_DOCUMENTO = null;
							} else {
	                         		
        	row2.NUMERO_DOCUMENTO = routines.system.JDBCUtil.getString(rs_tOracleInput_3, 7, false);
		                    }
							if(colQtyInRs_tOracleInput_3 < 8) {
								row2.TDOCUMENTOS_ID = null;
							} else {
		                          
					if(rs_tOracleInput_3.getObject(8) != null) {
						row2.TDOCUMENTOS_ID = rs_tOracleInput_3.getInt(8);
					} else {
				
						row2.TDOCUMENTOS_ID = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_3 < 9) {
								row2.EMAIL = null;
							} else {
	                         		
        	row2.EMAIL = routines.system.JDBCUtil.getString(rs_tOracleInput_3, 9, false);
		                    }
					




 



/**
 * [tOracleInput_3 begin ] stop
 */
	
	/**
	 * [tOracleInput_3 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_3";
	
	

 


	tos_count_tOracleInput_3++;

/**
 * [tOracleInput_3 main ] stop
 */
	
	/**
	 * [tOracleInput_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_3";
	
	

 



/**
 * [tOracleInput_3 process_data_begin ] stop
 */

	
	/**
	 * [tMap_3 main ] start
	 */

	

	
	
	currentComponent="tMap_3";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row2"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_3 = false;
		
						row12Struct row12 = null;
					
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_3 = false;
		boolean mainRowRejected_tMap_3 = false;
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row12" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow12 = false;
       		  	    	
       		  	    	
 							row12Struct row12ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_3) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_3 = false;
								
                        		    		    row12HashKey.ID = row2.TDOCUMENTOS_ID ;
                        		    		

								
		                        	row12HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row12.lookup( row12HashKey );

	  							

	  							

 								
								  
								  if(!tHash_Lookup_row12.hasNext()) { // G_TM_M_090

  								
		  				
	  								
			  							rejectedInnerJoin_tMap_3 = true;
	  								
						
									
  									  		
 								
								  
								  } // G_TM_M_090

  								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row12 != null && tHash_Lookup_row12.getCount(row12HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row12' and it contains more one result from keys :  row12.ID = '" + row12HashKey.ID + "'");
								} // G 071
							

							
                    		  	 
							   
                    		  	 
	       		  	    	row12Struct fromLookup_row12 = null;
							row12 = row12Default;
										 
							
								 
							
							
								if (tHash_Lookup_row12 !=null && tHash_Lookup_row12.hasNext()) { // G 099
								
							
								
								fromLookup_row12 = tHash_Lookup_row12.next();

							
							
								} // G 099
							
							

							if(fromLookup_row12 != null) {
								row12 = fromLookup_row12;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_3__Struct Var = Var__tMap_3;// ###############################
        // ###############################
        // # Output tables

out1 = null;

if(!rejectedInnerJoin_tMap_3 ) {

// # Output table : 'out1'
out1_tmp.ID = row2.ID ;
out1_tmp.PERSONAS_ID = row2.PERSONAS_ID ;
out1_tmp.PRIMER_NOMBRE = row2.PRIMER_NOMBRE ;
out1_tmp.SEGUNDO_NOMBRE = row2.SEGUNDO_NOMBRE ;
out1_tmp.PRIMER_APELLIDO = row2.PRIMER_APELLIDO ;
out1_tmp.SEGUNDO_APELLIDO = row2.SEGUNDO_APELLIDO ;
out1_tmp.NUMERO_DOCUMENTO = row2.NUMERO_DOCUMENTO ;
out1_tmp.SIGLA = row12.SIGLA;
out1_tmp.EMAIL = row2.EMAIL ;
out1 = out1_tmp;
}  // closing inner join bracket (2)
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_3 = false;










 


	tos_count_tMap_3++;

/**
 * [tMap_3 main ] stop
 */
	
	/**
	 * [tMap_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_3";
	
	

 



/**
 * [tMap_3 process_data_begin ] stop
 */
// Start of branch "out1"
if(out1 != null) { 



	
	/**
	 * [tMap_5 main ] start
	 */

	

	
	
	currentComponent="tMap_5";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"out1"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_5 = false;
		
						row3Struct row3 = null;
					
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_5 = false;
		boolean mainRowRejected_tMap_5 = false;
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row3" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow3 = false;
       		  	    	
       		  	    	
 							row3Struct row3ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_5) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_5 = false;
								
                        		    		    row3HashKey.tipoIdentificacionAfiliado = out1.SIGLA ;
                        		    		
                        		    		    row3HashKey.numeroIdentificacionAfiliado = out1.NUMERO_DOCUMENTO ;
                        		    		
                        		    		    row3HashKey.primerApellidoAfiliado = out1.PRIMER_APELLIDO ;
                        		    		
                        		    		    row3HashKey.primerNombreAfiliado = out1.PRIMER_NOMBRE ;
                        		    		

								
		                        	row3HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row3.lookup( row3HashKey );

	  							

	  							

 								
								  
								  if(!tHash_Lookup_row3.hasNext()) { // G_TM_M_090

  								
		  				
	  								
			  							rejectedInnerJoin_tMap_5 = true;
	  								
						
									
  									  		
 								
								  
								  } // G_TM_M_090

  								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row3 != null && tHash_Lookup_row3.getCount(row3HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row3' and it contains more one result from keys :  row3.tipoIdentificacionAfiliado = '" + row3HashKey.tipoIdentificacionAfiliado + "', row3.numeroIdentificacionAfiliado = '" + row3HashKey.numeroIdentificacionAfiliado + "', row3.primerApellidoAfiliado = '" + row3HashKey.primerApellidoAfiliado + "', row3.primerNombreAfiliado = '" + row3HashKey.primerNombreAfiliado + "'");
								} // G 071
							

							
                    		  	 
							   
                    		  	 
	       		  	    	row3Struct fromLookup_row3 = null;
							row3 = row3Default;
										 
							
								 
							
							
								if (tHash_Lookup_row3 !=null && tHash_Lookup_row3.hasNext()) { // G 099
								
							
								
								fromLookup_row3 = tHash_Lookup_row3.next();

							
							
								} // G 099
							
							

							if(fromLookup_row3 != null) {
								row3 = fromLookup_row3;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_5__Struct Var = Var__tMap_5;
Var.PROCESO_ID = context.idProceso;// ###############################
        // ###############################
        // # Output tables

out3 = null;

if(!rejectedInnerJoin_tMap_5 ) {

// # Output table : 'out3'
out3_tmp.PROCESO_ID = Var.PROCESO_ID ;
out3_tmp.AFILIADO_ID = out1.ID;
out3_tmp.TIPO_DOCUMENTO = out1.SIGLA ;
out3_tmp.NUMERO_DOCUMENTO = out1.NUMERO_DOCUMENTO ;
out3_tmp.PRIMER_NOMBRE = out1.PRIMER_NOMBRE ;
out3_tmp.SEGUNDO_NOMBRE = out1.SEGUNDO_NOMBRE ;
out3_tmp.PRIMER_APELLIDO = out1.PRIMER_APELLIDO ;
out3_tmp.SEGUNDO_APELLIDO = out1.SEGUNDO_APELLIDO ;
out3_tmp.GLOSA = StringHandling.LEFT(row3.glosaArchivo,StringHandling.LEN(row3.glosaArchivo)-1) ;
out3 = out3_tmp;
}  // closing inner join bracket (2)
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_5 = false;










 


	tos_count_tMap_5++;

/**
 * [tMap_5 main ] stop
 */
	
	/**
	 * [tMap_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_5";
	
	

 



/**
 * [tMap_5 process_data_begin ] stop
 */
// Start of branch "out3"
if(out3 != null) { 



	
	/**
	 * [tNormalize_3 main ] start
	 */

	

	
	
	currentComponent="tNormalize_3";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"out3"
						
						);
					}
					

            normalizeRecord_tNormalize_3 = new String[1];
            if(out3.GLOSA != null) {
				if("".equals(out3.GLOSA)){
		        	normalizeRecord_tNormalize_3[0] = "";
		        }else{
	                
	                		normalizeRecord_tNormalize_3 = out3.GLOSA.split(";",-1);
	                        
                }           
            }
             		lastNoEmptyIndex_tNormalize_3=normalizeRecord_tNormalize_3.length;
	             	
            	
            	for(int i_tNormalize_3 = 0 ; i_tNormalize_3 < lastNoEmptyIndex_tNormalize_3 ; i_tNormalize_3++) {
		  			
	                currentRecord_tNormalize_3 = new StringBuilder();
	                nb_line_tNormalize_3++;               
	                
	                        	row13.PROCESO_ID = out3.PROCESO_ID;
	                        
	                        	row13.AFILIADO_ID = out3.AFILIADO_ID;
	                        
	                        	row13.TIPO_DOCUMENTO = out3.TIPO_DOCUMENTO;
	                        
	                        	row13.NUMERO_DOCUMENTO = out3.NUMERO_DOCUMENTO;
	                        
	                        	row13.PRIMER_NOMBRE = out3.PRIMER_NOMBRE;
	                        
	                        	row13.SEGUNDO_NOMBRE = out3.SEGUNDO_NOMBRE;
	                        
	                        	row13.PRIMER_APELLIDO = out3.PRIMER_APELLIDO;
	                        
	                        	row13.SEGUNDO_APELLIDO = out3.SEGUNDO_APELLIDO;
	                        
	                        	row13.GLOSA = normalizeRecord_tNormalize_3[i_tNormalize_3];
		                    

 


	tos_count_tNormalize_3++;

/**
 * [tNormalize_3 main ] stop
 */
	
	/**
	 * [tNormalize_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tNormalize_3";
	
	

 



/**
 * [tNormalize_3 process_data_begin ] stop
 */

	
	/**
	 * [tReplicate_1 main ] start
	 */

	

	
	
	currentComponent="tReplicate_1";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row13"
						
						);
					}
					


	row5 = new row5Struct();
						
	row5.PROCESO_ID = row13.PROCESO_ID;								
	row5.AFILIADO_ID = row13.AFILIADO_ID;								
	row5.TIPO_DOCUMENTO = row13.TIPO_DOCUMENTO;								
	row5.NUMERO_DOCUMENTO = row13.NUMERO_DOCUMENTO;								
	row5.PRIMER_NOMBRE = row13.PRIMER_NOMBRE;								
	row5.SEGUNDO_NOMBRE = row13.SEGUNDO_NOMBRE;								
	row5.PRIMER_APELLIDO = row13.PRIMER_APELLIDO;								
	row5.SEGUNDO_APELLIDO = row13.SEGUNDO_APELLIDO;								
	row5.GLOSA = row13.GLOSA;			
	row6 = new row6Struct();
						
	row6.PROCESO_ID = row13.PROCESO_ID;								
	row6.AFILIADO_ID = row13.AFILIADO_ID;								
	row6.TIPO_DOCUMENTO = row13.TIPO_DOCUMENTO;								
	row6.NUMERO_DOCUMENTO = row13.NUMERO_DOCUMENTO;								
	row6.PRIMER_NOMBRE = row13.PRIMER_NOMBRE;								
	row6.SEGUNDO_NOMBRE = row13.SEGUNDO_NOMBRE;								
	row6.PRIMER_APELLIDO = row13.PRIMER_APELLIDO;								
	row6.SEGUNDO_APELLIDO = row13.SEGUNDO_APELLIDO;								
	row6.GLOSA = row13.GLOSA;			


 


	tos_count_tReplicate_1++;

/**
 * [tReplicate_1 main ] stop
 */
	
	/**
	 * [tReplicate_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tReplicate_1";
	
	

 



/**
 * [tReplicate_1 process_data_begin ] stop
 */

	
	/**
	 * [tMap_2 main ] start
	 */

	

	
	
	currentComponent="tMap_2";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row5"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_2 = false;
		
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_2 = false;
		boolean mainRowRejected_tMap_2 = false;
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_2__Struct Var = Var__tMap_2;// ###############################
        // ###############################
        // # Output tables

out5 = null;


// # Output table : 'out5'
out5_tmp.ProcesoId_ = row5.PROCESO_ID ;
out5_tmp.DescripcionGlosa_ = row5.GLOSA ;
out5_tmp.AfiliadoId_ = row5.AFILIADO_ID ;
out5 = out5_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_2 = false;










 


	tos_count_tMap_2++;

/**
 * [tMap_2 main ] stop
 */
	
	/**
	 * [tMap_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_2";
	
	

 



/**
 * [tMap_2 process_data_begin ] stop
 */
// Start of branch "out5"
if(out5 != null) { 



	
	/**
	 * [tOracleSP_3 main ] start
	 */

	

	
	
	currentComponent="tOracleSP_3";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"out5"
						
						);
					}
					

			// code for the argument 1 (ProcesoId_) of type 'IN AUTOMAPPING'
                        statement_tOracleSP_3.setInt(1, out5.ProcesoId_);
			// code for the argument 2 (DescripcionGlosa_) of type 'IN AUTOMAPPING'
                        statement_tOracleSP_3.setString(2, out5.DescripcionGlosa_);
			// code for the argument 3 (AfiliadoId_) of type 'IN AUTOMAPPING'
                        statement_tOracleSP_3.setInt(3, out5.AfiliadoId_);
		statement_tOracleSP_3.execute();
		

 


	tos_count_tOracleSP_3++;

/**
 * [tOracleSP_3 main ] stop
 */
	
	/**
	 * [tOracleSP_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleSP_3";
	
	

 



/**
 * [tOracleSP_3 process_data_begin ] stop
 */
	
	/**
	 * [tOracleSP_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleSP_3";
	
	

 



/**
 * [tOracleSP_3 process_data_end ] stop
 */

} // End of branch "out5"




	
	/**
	 * [tMap_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_2";
	
	

 



/**
 * [tMap_2 process_data_end ] stop
 */




	
	/**
	 * [tMap_1 main ] start
	 */

	

	
	
	currentComponent="tMap_1";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row6"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;
		
						row7Struct row7 = null;
					
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_1 = false;
		boolean mainRowRejected_tMap_1 = false;
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row7" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow7 = false;
       		  	    	
       		  	    	
 							row7Struct row7ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_1) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_1 = false;
								
                        		    		    row7HashKey.GLOSA = StringHandling.LEFT(StringHandling.BTRIM(row6.GLOSA),6) ;
                        		    		

								
		                        	row7HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row7.lookup( row7HashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row7 != null && tHash_Lookup_row7.getCount(row7HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row7' and it contains more one result from keys :  row7.GLOSA = '" + row7HashKey.GLOSA + "'");
								} // G 071
							

							
                    		  	 
							   
                    		  	 
	       		  	    	row7Struct fromLookup_row7 = null;
							row7 = row7Default;
										 
							
								 
							
							
								if (tHash_Lookup_row7 !=null && tHash_Lookup_row7.hasNext()) { // G 099
								
							
								
								fromLookup_row7 = tHash_Lookup_row7.next();

							
							
								} // G 099
							
							

							if(fromLookup_row7 != null) {
								row7 = fromLookup_row7;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
        // ###############################
        // # Output tables

out4 = null;


// # Output table : 'out4'
out4_tmp.TIPO_DOCUMENTO = row6.TIPO_DOCUMENTO ;
out4_tmp.NUMERO_DOCUMENTO = row6.NUMERO_DOCUMENTO ;
out4_tmp.PRIMER_NOMBRE = row6.PRIMER_NOMBRE ;
out4_tmp.SEGUNDO_NOMBRE = row6.SEGUNDO_NOMBRE ;
out4_tmp.PRIMER_APELLIDO = row6.PRIMER_APELLIDO ;
out4_tmp.SEGUNDO_APELLIDO = row6.SEGUNDO_APELLIDO ;
out4_tmp.GLOSA = row6.GLOSA ;
out4_tmp.DESCRIPCION = row7.DESCRIPCION ;
out4 = out4_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_1 = false;










 


	tos_count_tMap_1++;

/**
 * [tMap_1 main ] stop
 */
	
	/**
	 * [tMap_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_1";
	
	

 



/**
 * [tMap_1 process_data_begin ] stop
 */
// Start of branch "out4"
if(out4 != null) { 



	
	/**
	 * [tFileOutputDelimited_1 main ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"out4"
						
						);
					}
					


                    StringBuilder sb_tFileOutputDelimited_1 = new StringBuilder();
                            if(out4.TIPO_DOCUMENTO != null) {
                        sb_tFileOutputDelimited_1.append(
                            out4.TIPO_DOCUMENTO
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(out4.NUMERO_DOCUMENTO != null) {
                        sb_tFileOutputDelimited_1.append(
                            out4.NUMERO_DOCUMENTO
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(out4.PRIMER_NOMBRE != null) {
                        sb_tFileOutputDelimited_1.append(
                            out4.PRIMER_NOMBRE
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(out4.SEGUNDO_NOMBRE != null) {
                        sb_tFileOutputDelimited_1.append(
                            out4.SEGUNDO_NOMBRE
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(out4.PRIMER_APELLIDO != null) {
                        sb_tFileOutputDelimited_1.append(
                            out4.PRIMER_APELLIDO
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(out4.SEGUNDO_APELLIDO != null) {
                        sb_tFileOutputDelimited_1.append(
                            out4.SEGUNDO_APELLIDO
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(out4.GLOSA != null) {
                        sb_tFileOutputDelimited_1.append(
                            out4.GLOSA
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(out4.DESCRIPCION != null) {
                        sb_tFileOutputDelimited_1.append(
                            out4.DESCRIPCION
                        );
                            }
                    sb_tFileOutputDelimited_1.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_1);


                    nb_line_tFileOutputDelimited_1++;
                    resourceMap.put("nb_line_tFileOutputDelimited_1", nb_line_tFileOutputDelimited_1);

                        outtFileOutputDelimited_1.write(sb_tFileOutputDelimited_1.toString());




 


	tos_count_tFileOutputDelimited_1++;

/**
 * [tFileOutputDelimited_1 main ] stop
 */
	
	/**
	 * [tFileOutputDelimited_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";
	
	

 



/**
 * [tFileOutputDelimited_1 process_data_begin ] stop
 */
	
	/**
	 * [tFileOutputDelimited_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";
	
	

 



/**
 * [tFileOutputDelimited_1 process_data_end ] stop
 */

} // End of branch "out4"




	
	/**
	 * [tMap_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_1";
	
	

 



/**
 * [tMap_1 process_data_end ] stop
 */



	
	/**
	 * [tReplicate_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tReplicate_1";
	
	

 



/**
 * [tReplicate_1 process_data_end ] stop
 */
		// end for
	}



	
	/**
	 * [tNormalize_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tNormalize_3";
	
	

 



/**
 * [tNormalize_3 process_data_end ] stop
 */

} // End of branch "out3"




	
	/**
	 * [tMap_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_5";
	
	

 



/**
 * [tMap_5 process_data_end ] stop
 */

} // End of branch "out1"




	
	/**
	 * [tMap_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_3";
	
	

 



/**
 * [tMap_3 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_3";
	
	

 



/**
 * [tOracleInput_3 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_3 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_3";
	
	

}
}finally{
	if (rs_tOracleInput_3 != null) {
		rs_tOracleInput_3.close();
	}
	if (stmt_tOracleInput_3 != null) {
		stmt_tOracleInput_3.close();
	}
}

globalMap.put("tOracleInput_3_NB_LINE",nb_line_tOracleInput_3);
 

ok_Hash.put("tOracleInput_3", true);
end_Hash.put("tOracleInput_3", System.currentTimeMillis());




/**
 * [tOracleInput_3 end ] stop
 */

	
	/**
	 * [tMap_3 end ] start
	 */

	

	
	
	currentComponent="tMap_3";
	
	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row2");
			  	}
			  	
 

ok_Hash.put("tMap_3", true);
end_Hash.put("tMap_3", System.currentTimeMillis());




/**
 * [tMap_3 end ] stop
 */

	
	/**
	 * [tMap_5 end ] start
	 */

	

	
	
	currentComponent="tMap_5";
	
	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"out1");
			  	}
			  	
 

ok_Hash.put("tMap_5", true);
end_Hash.put("tMap_5", System.currentTimeMillis());




/**
 * [tMap_5 end ] stop
 */

	
	/**
	 * [tNormalize_3 end ] start
	 */

	

	
	
	currentComponent="tNormalize_3";
	
	

    globalMap.put("tNormalize_3_NB_LINE", nb_line_tNormalize_3);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"out3");
			  	}
			  	
 

ok_Hash.put("tNormalize_3", true);
end_Hash.put("tNormalize_3", System.currentTimeMillis());




/**
 * [tNormalize_3 end ] stop
 */

	
	/**
	 * [tReplicate_1 end ] start
	 */

	

	
	
	currentComponent="tReplicate_1";
	
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row13");
			  	}
			  	
 

ok_Hash.put("tReplicate_1", true);
end_Hash.put("tReplicate_1", System.currentTimeMillis());




/**
 * [tReplicate_1 end ] stop
 */

	
	/**
	 * [tMap_2 end ] start
	 */

	

	
	
	currentComponent="tMap_2";
	
	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row5");
			  	}
			  	
 

ok_Hash.put("tMap_2", true);
end_Hash.put("tMap_2", System.currentTimeMillis());




/**
 * [tMap_2 end ] stop
 */

	
	/**
	 * [tOracleSP_3 end ] start
	 */

	

	
	
	currentComponent="tOracleSP_3";
	
	


	statement_tOracleSP_3.close();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"out5");
			  	}
			  	
 

ok_Hash.put("tOracleSP_3", true);
end_Hash.put("tOracleSP_3", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk10", 0, "ok");
				}
				tJava_1Process(globalMap);



/**
 * [tOracleSP_3 end ] stop
 */







	
	/**
	 * [tMap_1 end ] start
	 */

	

	
	
	currentComponent="tMap_1";
	
	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row6");
			  	}
			  	
 

ok_Hash.put("tMap_1", true);
end_Hash.put("tMap_1", System.currentTimeMillis());




/**
 * [tMap_1 end ] stop
 */

	
	/**
	 * [tFileOutputDelimited_1 end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";
	
	



		
			
					if(outtFileOutputDelimited_1!=null) {
						outtFileOutputDelimited_1.flush();
						outtFileOutputDelimited_1.close();
					}
				
				globalMap.put("tFileOutputDelimited_1_NB_LINE",nb_line_tFileOutputDelimited_1);
				globalMap.put("tFileOutputDelimited_1_FILE_NAME",fileName_tFileOutputDelimited_1);
			
		
		
		resourceMap.put("finish_tFileOutputDelimited_1", true);
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"out4");
			  	}
			  	
 

ok_Hash.put("tFileOutputDelimited_1", true);
end_Hash.put("tFileOutputDelimited_1", System.currentTimeMillis());




/**
 * [tFileOutputDelimited_1 end ] stop
 */


















						if(execStat){
							runStat.updateStatOnConnection("iterate1", 2, "exec" + NB_ITERATE_tOracleInput_3);
						}				
					




	
	/**
	 * [tLoop_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tLoop_1";
	
	

 



/**
 * [tLoop_1 process_data_end ] stop
 */
	
	/**
	 * [tLoop_1 end ] start
	 */

	

	
	
	currentComponent="tLoop_1";
	
	




;


}


 

ok_Hash.put("tLoop_1", true);
end_Hash.put("tLoop_1", System.currentTimeMillis());




/**
 * [tLoop_1 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tLoop_1:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk1", 0, "ok");
								} 
							
							tFixedFlowInput_2Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
					     			//free memory for "tMap_1"
					     			globalMap.remove("tHash_Lookup_row7"); 
				     			
					     			//free memory for "tMap_5"
					     			globalMap.remove("tHash_Lookup_row3"); 
				     			
					     			//free memory for "tMap_3"
					     			globalMap.remove("tHash_Lookup_row12"); 
				     			
				try{
					
	
	/**
	 * [tLoop_1 finally ] start
	 */

	

	
	
	currentComponent="tLoop_1";
	
	

 



/**
 * [tLoop_1 finally ] stop
 */

	
	/**
	 * [tOracleInput_3 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_3";
	
	

 



/**
 * [tOracleInput_3 finally ] stop
 */

	
	/**
	 * [tMap_3 finally ] start
	 */

	

	
	
	currentComponent="tMap_3";
	
	

 



/**
 * [tMap_3 finally ] stop
 */

	
	/**
	 * [tMap_5 finally ] start
	 */

	

	
	
	currentComponent="tMap_5";
	
	

 



/**
 * [tMap_5 finally ] stop
 */

	
	/**
	 * [tNormalize_3 finally ] start
	 */

	

	
	
	currentComponent="tNormalize_3";
	
	

 



/**
 * [tNormalize_3 finally ] stop
 */

	
	/**
	 * [tReplicate_1 finally ] start
	 */

	

	
	
	currentComponent="tReplicate_1";
	
	

 



/**
 * [tReplicate_1 finally ] stop
 */

	
	/**
	 * [tMap_2 finally ] start
	 */

	

	
	
	currentComponent="tMap_2";
	
	

 



/**
 * [tMap_2 finally ] stop
 */

	
	/**
	 * [tOracleSP_3 finally ] start
	 */

	

	
	
	currentComponent="tOracleSP_3";
	
	

 



/**
 * [tOracleSP_3 finally ] stop
 */







	
	/**
	 * [tMap_1 finally ] start
	 */

	

	
	
	currentComponent="tMap_1";
	
	

 



/**
 * [tMap_1 finally ] stop
 */

	
	/**
	 * [tFileOutputDelimited_1 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";
	
	


		if(resourceMap.get("finish_tFileOutputDelimited_1") == null){ 
			
				
						java.io.Writer outtFileOutputDelimited_1 = (java.io.Writer)resourceMap.get("out_tFileOutputDelimited_1");
						if(outtFileOutputDelimited_1!=null) {
							outtFileOutputDelimited_1.flush();
							outtFileOutputDelimited_1.close();
						}
					
				
			
		}
	

 



/**
 * [tFileOutputDelimited_1 finally ] stop
 */





















				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tLoop_1_SUBPROCESS_STATE", 1);
	}
	


public void tJava_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tJava_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_1", false);
		start_Hash.put("tJava_1", System.currentTimeMillis());
		
	
	currentComponent="tJava_1";
	
	
		int tos_count_tJava_1 = 0;
		


//****************************************************************************************//
//*** ALMACENAMIENTO EN VARIABLES DE CONTEXTO DE LA NUEVA POSICION DE LA CONSULTA     ****//
//****************************************************************************************//
context.auxPosicionRegistros=context.auxPosicionRegistros+context.auxAumentoRegistros;

//****************************************************************************************//
//*** ALMACENAMIENTO EN VARIABLES DE CONTEXTO DE LOS DATOS OBTENIDOS DE LA CONSULTA   ****//
//****************************************************************************************//
context.infoConteoRegistros=(Integer)globalMap.get("tOracleInput_3_NB_LINE");
 



/**
 * [tJava_1 begin ] stop
 */
	
	/**
	 * [tJava_1 main ] start
	 */

	

	
	
	currentComponent="tJava_1";
	
	

 


	tos_count_tJava_1++;

/**
 * [tJava_1 main ] stop
 */
	
	/**
	 * [tJava_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_1";
	
	

 



/**
 * [tJava_1 process_data_begin ] stop
 */
	
	/**
	 * [tJava_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_1";
	
	

 



/**
 * [tJava_1 process_data_end ] stop
 */
	
	/**
	 * [tJava_1 end ] start
	 */

	

	
	
	currentComponent="tJava_1";
	
	

 

ok_Hash.put("tJava_1", true);
end_Hash.put("tJava_1", System.currentTimeMillis());




/**
 * [tJava_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_1 finally ] start
	 */

	

	
	
	currentComponent="tJava_1";
	
	

 



/**
 * [tJava_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_1_SUBPROCESS_STATE", 1);
	}
	


public static class out6Struct implements routines.system.IPersistableRow<out6Struct> {
    final static byte[] commonByteArrayLock_AFI_PRINCIPAL_MinSaludEtapa2NuevosRegistros = new byte[0];
    static byte[] commonByteArray_AFI_PRINCIPAL_MinSaludEtapa2NuevosRegistros = new byte[0];

	
			    public int ESTADO;

				public int getESTADO () {
					return this.ESTADO;
				}

				public Boolean ESTADOIsNullable(){
				    return false;
				}
				public Boolean ESTADOIsKey(){
				    return false;
				}
				public Integer ESTADOLength(){
				    return 22;
				}
				public Integer ESTADOPrecision(){
				    return 0;
				}
				public String ESTADODefault(){
				
					return "1";
				
				}
				public String ESTADOComment(){
				
				    return "Estado del trabajo (1 Activo - 2 Realizado - 3 Fallido - 4 Cancelado)";
				
				}
				public String ESTADOPattern(){
				
					return "";
				
				}
				public String ESTADOOriginalDbColumnName(){
				
					return "ESTADO";
				
				}

				
			    public String ARCHIVO;

				public String getARCHIVO () {
					return this.ARCHIVO;
				}

				public Boolean ARCHIVOIsNullable(){
				    return false;
				}
				public Boolean ARCHIVOIsKey(){
				    return false;
				}
				public Integer ARCHIVOLength(){
				    return 100;
				}
				public Integer ARCHIVOPrecision(){
				    return 0;
				}
				public String ARCHIVODefault(){
				
					return null;
				
				}
				public String ARCHIVOComment(){
				
				    return "Nombre del archivo";
				
				}
				public String ARCHIVOPattern(){
				
					return "";
				
				}
				public String ARCHIVOOriginalDbColumnName(){
				
					return "ARCHIVO";
				
				}

				
			    public int TARCHIVOS_ID;

				public int getTARCHIVOS_ID () {
					return this.TARCHIVOS_ID;
				}

				public Boolean TARCHIVOS_IDIsNullable(){
				    return false;
				}
				public Boolean TARCHIVOS_IDIsKey(){
				    return false;
				}
				public Integer TARCHIVOS_IDLength(){
				    return 22;
				}
				public Integer TARCHIVOS_IDPrecision(){
				    return 0;
				}
				public String TARCHIVOS_IDDefault(){
				
					return null;
				
				}
				public String TARCHIVOS_IDComment(){
				
				    return "FK - AFI_TARCHIVOS";
				
				}
				public String TARCHIVOS_IDPattern(){
				
					return "";
				
				}
				public String TARCHIVOS_IDOriginalDbColumnName(){
				
					return "TARCHIVOS_ID";
				
				}

				
			    public int USUARIOS_ID;

				public int getUSUARIOS_ID () {
					return this.USUARIOS_ID;
				}

				public Boolean USUARIOS_IDIsNullable(){
				    return false;
				}
				public Boolean USUARIOS_IDIsKey(){
				    return false;
				}
				public Integer USUARIOS_IDLength(){
				    return 22;
				}
				public Integer USUARIOS_IDPrecision(){
				    return 0;
				}
				public String USUARIOS_IDDefault(){
				
					return null;
				
				}
				public String USUARIOS_IDComment(){
				
				    return "FK - GEN_USUARIOS (Usuario que subio el archivo)";
				
				}
				public String USUARIOS_IDPattern(){
				
					return "";
				
				}
				public String USUARIOS_IDOriginalDbColumnName(){
				
					return "USUARIOS_ID";
				
				}

				
			    public String CODIGO;

				public String getCODIGO () {
					return this.CODIGO;
				}

				public Boolean CODIGOIsNullable(){
				    return false;
				}
				public Boolean CODIGOIsKey(){
				    return false;
				}
				public Integer CODIGOLength(){
				    return 10;
				}
				public Integer CODIGOPrecision(){
				    return 0;
				}
				public String CODIGODefault(){
				
					return null;
				
				}
				public String CODIGOComment(){
				
				    return "Codigo de identificacion del archivo";
				
				}
				public String CODIGOPattern(){
				
					return "";
				
				}
				public String CODIGOOriginalDbColumnName(){
				
					return "CODIGO";
				
				}

				
			    public String ARCHIVOFS;

				public String getARCHIVOFS () {
					return this.ARCHIVOFS;
				}

				public Boolean ARCHIVOFSIsNullable(){
				    return false;
				}
				public Boolean ARCHIVOFSIsKey(){
				    return false;
				}
				public Integer ARCHIVOFSLength(){
				    return 100;
				}
				public Integer ARCHIVOFSPrecision(){
				    return 0;
				}
				public String ARCHIVOFSDefault(){
				
					return null;
				
				}
				public String ARCHIVOFSComment(){
				
				    return "Nombre del archivo en el File System";
				
				}
				public String ARCHIVOFSPattern(){
				
					return "";
				
				}
				public String ARCHIVOFSOriginalDbColumnName(){
				
					return "ARCHIVOFS";
				
				}

				
			    public java.util.Date FECHA;

				public java.util.Date getFECHA () {
					return this.FECHA;
				}

				public Boolean FECHAIsNullable(){
				    return false;
				}
				public Boolean FECHAIsKey(){
				    return false;
				}
				public Integer FECHALength(){
				    return 7;
				}
				public Integer FECHAPrecision(){
				    return 0;
				}
				public String FECHADefault(){
				
					return null;
				
				}
				public String FECHAComment(){
				
				    return "Fecha y hora del registro";
				
				}
				public String FECHAPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String FECHAOriginalDbColumnName(){
				
					return "FECHA";
				
				}

				
			    public String EXTENSION;

				public String getEXTENSION () {
					return this.EXTENSION;
				}

				public Boolean EXTENSIONIsNullable(){
				    return false;
				}
				public Boolean EXTENSIONIsKey(){
				    return false;
				}
				public Integer EXTENSIONLength(){
				    return 0;
				}
				public Integer EXTENSIONPrecision(){
				    return 0;
				}
				public String EXTENSIONDefault(){
				
					return null;
				
				}
				public String EXTENSIONComment(){
				
				    return "";
				
				}
				public String EXTENSIONPattern(){
				
					return "";
				
				}
				public String EXTENSIONOriginalDbColumnName(){
				
					return "EXTENSION";
				
				}

				
			    public int PADRE_ID;

				public int getPADRE_ID () {
					return this.PADRE_ID;
				}

				public Boolean PADRE_IDIsNullable(){
				    return false;
				}
				public Boolean PADRE_IDIsKey(){
				    return false;
				}
				public Integer PADRE_IDLength(){
				    return 0;
				}
				public Integer PADRE_IDPrecision(){
				    return 0;
				}
				public String PADRE_IDDefault(){
				
					return null;
				
				}
				public String PADRE_IDComment(){
				
				    return "";
				
				}
				public String PADRE_IDPattern(){
				
					return "";
				
				}
				public String PADRE_IDOriginalDbColumnName(){
				
					return "PADRE_ID";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_PRINCIPAL_MinSaludEtapa2NuevosRegistros.length) {
				if(length < 1024 && commonByteArray_AFI_PRINCIPAL_MinSaludEtapa2NuevosRegistros.length == 0) {
   					commonByteArray_AFI_PRINCIPAL_MinSaludEtapa2NuevosRegistros = new byte[1024];
				} else {
   					commonByteArray_AFI_PRINCIPAL_MinSaludEtapa2NuevosRegistros = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_PRINCIPAL_MinSaludEtapa2NuevosRegistros, 0, length);
			strReturn = new String(commonByteArray_AFI_PRINCIPAL_MinSaludEtapa2NuevosRegistros, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_PRINCIPAL_MinSaludEtapa2NuevosRegistros.length) {
				if(length < 1024 && commonByteArray_AFI_PRINCIPAL_MinSaludEtapa2NuevosRegistros.length == 0) {
   					commonByteArray_AFI_PRINCIPAL_MinSaludEtapa2NuevosRegistros = new byte[1024];
				} else {
   					commonByteArray_AFI_PRINCIPAL_MinSaludEtapa2NuevosRegistros = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_PRINCIPAL_MinSaludEtapa2NuevosRegistros, 0, length);
			strReturn = new String(commonByteArray_AFI_PRINCIPAL_MinSaludEtapa2NuevosRegistros, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_PRINCIPAL_MinSaludEtapa2NuevosRegistros) {

        	try {

        		int length = 0;
		
			        this.ESTADO = dis.readInt();
					
					this.ARCHIVO = readString(dis);
					
			        this.TARCHIVOS_ID = dis.readInt();
					
			        this.USUARIOS_ID = dis.readInt();
					
					this.CODIGO = readString(dis);
					
					this.ARCHIVOFS = readString(dis);
					
					this.FECHA = readDate(dis);
					
					this.EXTENSION = readString(dis);
					
			        this.PADRE_ID = dis.readInt();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_PRINCIPAL_MinSaludEtapa2NuevosRegistros) {

        	try {

        		int length = 0;
		
			        this.ESTADO = dis.readInt();
					
					this.ARCHIVO = readString(dis);
					
			        this.TARCHIVOS_ID = dis.readInt();
					
			        this.USUARIOS_ID = dis.readInt();
					
					this.CODIGO = readString(dis);
					
					this.ARCHIVOFS = readString(dis);
					
					this.FECHA = readDate(dis);
					
					this.EXTENSION = readString(dis);
					
			        this.PADRE_ID = dis.readInt();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.ESTADO);
					
					// String
				
						writeString(this.ARCHIVO,dos);
					
					// int
				
		            	dos.writeInt(this.TARCHIVOS_ID);
					
					// int
				
		            	dos.writeInt(this.USUARIOS_ID);
					
					// String
				
						writeString(this.CODIGO,dos);
					
					// String
				
						writeString(this.ARCHIVOFS,dos);
					
					// java.util.Date
				
						writeDate(this.FECHA,dos);
					
					// String
				
						writeString(this.EXTENSION,dos);
					
					// int
				
		            	dos.writeInt(this.PADRE_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.ESTADO);
					
					// String
				
						writeString(this.ARCHIVO,dos);
					
					// int
				
		            	dos.writeInt(this.TARCHIVOS_ID);
					
					// int
				
		            	dos.writeInt(this.USUARIOS_ID);
					
					// String
				
						writeString(this.CODIGO,dos);
					
					// String
				
						writeString(this.ARCHIVOFS,dos);
					
					// java.util.Date
				
						writeDate(this.FECHA,dos);
					
					// String
				
						writeString(this.EXTENSION,dos);
					
					// int
				
		            	dos.writeInt(this.PADRE_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ESTADO="+String.valueOf(ESTADO));
		sb.append(",ARCHIVO="+ARCHIVO);
		sb.append(",TARCHIVOS_ID="+String.valueOf(TARCHIVOS_ID));
		sb.append(",USUARIOS_ID="+String.valueOf(USUARIOS_ID));
		sb.append(",CODIGO="+CODIGO);
		sb.append(",ARCHIVOFS="+ARCHIVOFS);
		sb.append(",FECHA="+String.valueOf(FECHA));
		sb.append(",EXTENSION="+EXTENSION);
		sb.append(",PADRE_ID="+String.valueOf(PADRE_ID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(out6Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row9Struct implements routines.system.IPersistableRow<row9Struct> {
    final static byte[] commonByteArrayLock_AFI_PRINCIPAL_MinSaludEtapa2NuevosRegistros = new byte[0];
    static byte[] commonByteArray_AFI_PRINCIPAL_MinSaludEtapa2NuevosRegistros = new byte[0];

	
			    public int ESTADO;

				public int getESTADO () {
					return this.ESTADO;
				}

				public Boolean ESTADOIsNullable(){
				    return false;
				}
				public Boolean ESTADOIsKey(){
				    return false;
				}
				public Integer ESTADOLength(){
				    return 22;
				}
				public Integer ESTADOPrecision(){
				    return 0;
				}
				public String ESTADODefault(){
				
					return "1";
				
				}
				public String ESTADOComment(){
				
				    return "Estado del trabajo (1 Activo - 2 Realizado - 3 Fallido - 4 Cancelado)";
				
				}
				public String ESTADOPattern(){
				
					return "";
				
				}
				public String ESTADOOriginalDbColumnName(){
				
					return "ESTADO";
				
				}

				
			    public String ARCHIVO;

				public String getARCHIVO () {
					return this.ARCHIVO;
				}

				public Boolean ARCHIVOIsNullable(){
				    return false;
				}
				public Boolean ARCHIVOIsKey(){
				    return false;
				}
				public Integer ARCHIVOLength(){
				    return 100;
				}
				public Integer ARCHIVOPrecision(){
				    return 0;
				}
				public String ARCHIVODefault(){
				
					return null;
				
				}
				public String ARCHIVOComment(){
				
				    return "Nombre del archivo";
				
				}
				public String ARCHIVOPattern(){
				
					return "";
				
				}
				public String ARCHIVOOriginalDbColumnName(){
				
					return "ARCHIVO";
				
				}

				
			    public int TARCHIVOS_ID;

				public int getTARCHIVOS_ID () {
					return this.TARCHIVOS_ID;
				}

				public Boolean TARCHIVOS_IDIsNullable(){
				    return false;
				}
				public Boolean TARCHIVOS_IDIsKey(){
				    return false;
				}
				public Integer TARCHIVOS_IDLength(){
				    return 22;
				}
				public Integer TARCHIVOS_IDPrecision(){
				    return 0;
				}
				public String TARCHIVOS_IDDefault(){
				
					return null;
				
				}
				public String TARCHIVOS_IDComment(){
				
				    return "FK - AFI_TARCHIVOS";
				
				}
				public String TARCHIVOS_IDPattern(){
				
					return "";
				
				}
				public String TARCHIVOS_IDOriginalDbColumnName(){
				
					return "TARCHIVOS_ID";
				
				}

				
			    public int USUARIOS_ID;

				public int getUSUARIOS_ID () {
					return this.USUARIOS_ID;
				}

				public Boolean USUARIOS_IDIsNullable(){
				    return false;
				}
				public Boolean USUARIOS_IDIsKey(){
				    return false;
				}
				public Integer USUARIOS_IDLength(){
				    return 22;
				}
				public Integer USUARIOS_IDPrecision(){
				    return 0;
				}
				public String USUARIOS_IDDefault(){
				
					return null;
				
				}
				public String USUARIOS_IDComment(){
				
				    return "FK - GEN_USUARIOS (Usuario que subio el archivo)";
				
				}
				public String USUARIOS_IDPattern(){
				
					return "";
				
				}
				public String USUARIOS_IDOriginalDbColumnName(){
				
					return "USUARIOS_ID";
				
				}

				
			    public String CODIGO;

				public String getCODIGO () {
					return this.CODIGO;
				}

				public Boolean CODIGOIsNullable(){
				    return false;
				}
				public Boolean CODIGOIsKey(){
				    return false;
				}
				public Integer CODIGOLength(){
				    return 10;
				}
				public Integer CODIGOPrecision(){
				    return 0;
				}
				public String CODIGODefault(){
				
					return null;
				
				}
				public String CODIGOComment(){
				
				    return "Codigo de identificacion del archivo";
				
				}
				public String CODIGOPattern(){
				
					return "";
				
				}
				public String CODIGOOriginalDbColumnName(){
				
					return "CODIGO";
				
				}

				
			    public String ARCHIVOFS;

				public String getARCHIVOFS () {
					return this.ARCHIVOFS;
				}

				public Boolean ARCHIVOFSIsNullable(){
				    return false;
				}
				public Boolean ARCHIVOFSIsKey(){
				    return false;
				}
				public Integer ARCHIVOFSLength(){
				    return 100;
				}
				public Integer ARCHIVOFSPrecision(){
				    return 0;
				}
				public String ARCHIVOFSDefault(){
				
					return null;
				
				}
				public String ARCHIVOFSComment(){
				
				    return "Nombre del archivo en el File System";
				
				}
				public String ARCHIVOFSPattern(){
				
					return "";
				
				}
				public String ARCHIVOFSOriginalDbColumnName(){
				
					return "ARCHIVOFS";
				
				}

				
			    public java.util.Date FECHA;

				public java.util.Date getFECHA () {
					return this.FECHA;
				}

				public Boolean FECHAIsNullable(){
				    return false;
				}
				public Boolean FECHAIsKey(){
				    return false;
				}
				public Integer FECHALength(){
				    return 7;
				}
				public Integer FECHAPrecision(){
				    return 0;
				}
				public String FECHADefault(){
				
					return null;
				
				}
				public String FECHAComment(){
				
				    return "Fecha y hora del registro";
				
				}
				public String FECHAPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String FECHAOriginalDbColumnName(){
				
					return "FECHA";
				
				}

				
			    public String EXTENSION;

				public String getEXTENSION () {
					return this.EXTENSION;
				}

				public Boolean EXTENSIONIsNullable(){
				    return false;
				}
				public Boolean EXTENSIONIsKey(){
				    return false;
				}
				public Integer EXTENSIONLength(){
				    return 0;
				}
				public Integer EXTENSIONPrecision(){
				    return 0;
				}
				public String EXTENSIONDefault(){
				
					return null;
				
				}
				public String EXTENSIONComment(){
				
				    return "";
				
				}
				public String EXTENSIONPattern(){
				
					return "";
				
				}
				public String EXTENSIONOriginalDbColumnName(){
				
					return "EXTENSION";
				
				}

				
			    public int PADRE_ID;

				public int getPADRE_ID () {
					return this.PADRE_ID;
				}

				public Boolean PADRE_IDIsNullable(){
				    return false;
				}
				public Boolean PADRE_IDIsKey(){
				    return false;
				}
				public Integer PADRE_IDLength(){
				    return 0;
				}
				public Integer PADRE_IDPrecision(){
				    return 0;
				}
				public String PADRE_IDDefault(){
				
					return null;
				
				}
				public String PADRE_IDComment(){
				
				    return "";
				
				}
				public String PADRE_IDPattern(){
				
					return "";
				
				}
				public String PADRE_IDOriginalDbColumnName(){
				
					return "PADRE_ID";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_PRINCIPAL_MinSaludEtapa2NuevosRegistros.length) {
				if(length < 1024 && commonByteArray_AFI_PRINCIPAL_MinSaludEtapa2NuevosRegistros.length == 0) {
   					commonByteArray_AFI_PRINCIPAL_MinSaludEtapa2NuevosRegistros = new byte[1024];
				} else {
   					commonByteArray_AFI_PRINCIPAL_MinSaludEtapa2NuevosRegistros = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_PRINCIPAL_MinSaludEtapa2NuevosRegistros, 0, length);
			strReturn = new String(commonByteArray_AFI_PRINCIPAL_MinSaludEtapa2NuevosRegistros, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_PRINCIPAL_MinSaludEtapa2NuevosRegistros.length) {
				if(length < 1024 && commonByteArray_AFI_PRINCIPAL_MinSaludEtapa2NuevosRegistros.length == 0) {
   					commonByteArray_AFI_PRINCIPAL_MinSaludEtapa2NuevosRegistros = new byte[1024];
				} else {
   					commonByteArray_AFI_PRINCIPAL_MinSaludEtapa2NuevosRegistros = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_PRINCIPAL_MinSaludEtapa2NuevosRegistros, 0, length);
			strReturn = new String(commonByteArray_AFI_PRINCIPAL_MinSaludEtapa2NuevosRegistros, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_PRINCIPAL_MinSaludEtapa2NuevosRegistros) {

        	try {

        		int length = 0;
		
			        this.ESTADO = dis.readInt();
					
					this.ARCHIVO = readString(dis);
					
			        this.TARCHIVOS_ID = dis.readInt();
					
			        this.USUARIOS_ID = dis.readInt();
					
					this.CODIGO = readString(dis);
					
					this.ARCHIVOFS = readString(dis);
					
					this.FECHA = readDate(dis);
					
					this.EXTENSION = readString(dis);
					
			        this.PADRE_ID = dis.readInt();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_PRINCIPAL_MinSaludEtapa2NuevosRegistros) {

        	try {

        		int length = 0;
		
			        this.ESTADO = dis.readInt();
					
					this.ARCHIVO = readString(dis);
					
			        this.TARCHIVOS_ID = dis.readInt();
					
			        this.USUARIOS_ID = dis.readInt();
					
					this.CODIGO = readString(dis);
					
					this.ARCHIVOFS = readString(dis);
					
					this.FECHA = readDate(dis);
					
					this.EXTENSION = readString(dis);
					
			        this.PADRE_ID = dis.readInt();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.ESTADO);
					
					// String
				
						writeString(this.ARCHIVO,dos);
					
					// int
				
		            	dos.writeInt(this.TARCHIVOS_ID);
					
					// int
				
		            	dos.writeInt(this.USUARIOS_ID);
					
					// String
				
						writeString(this.CODIGO,dos);
					
					// String
				
						writeString(this.ARCHIVOFS,dos);
					
					// java.util.Date
				
						writeDate(this.FECHA,dos);
					
					// String
				
						writeString(this.EXTENSION,dos);
					
					// int
				
		            	dos.writeInt(this.PADRE_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.ESTADO);
					
					// String
				
						writeString(this.ARCHIVO,dos);
					
					// int
				
		            	dos.writeInt(this.TARCHIVOS_ID);
					
					// int
				
		            	dos.writeInt(this.USUARIOS_ID);
					
					// String
				
						writeString(this.CODIGO,dos);
					
					// String
				
						writeString(this.ARCHIVOFS,dos);
					
					// java.util.Date
				
						writeDate(this.FECHA,dos);
					
					// String
				
						writeString(this.EXTENSION,dos);
					
					// int
				
		            	dos.writeInt(this.PADRE_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ESTADO="+String.valueOf(ESTADO));
		sb.append(",ARCHIVO="+ARCHIVO);
		sb.append(",TARCHIVOS_ID="+String.valueOf(TARCHIVOS_ID));
		sb.append(",USUARIOS_ID="+String.valueOf(USUARIOS_ID));
		sb.append(",CODIGO="+CODIGO);
		sb.append(",ARCHIVOFS="+ARCHIVOFS);
		sb.append(",FECHA="+String.valueOf(FECHA));
		sb.append(",EXTENSION="+EXTENSION);
		sb.append(",PADRE_ID="+String.valueOf(PADRE_ID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row9Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class after_tFixedFlowInput_2Struct implements routines.system.IPersistableRow<after_tFixedFlowInput_2Struct> {
    final static byte[] commonByteArrayLock_AFI_PRINCIPAL_MinSaludEtapa2NuevosRegistros = new byte[0];
    static byte[] commonByteArray_AFI_PRINCIPAL_MinSaludEtapa2NuevosRegistros = new byte[0];

	
			    public int ESTADO;

				public int getESTADO () {
					return this.ESTADO;
				}

				public Boolean ESTADOIsNullable(){
				    return false;
				}
				public Boolean ESTADOIsKey(){
				    return false;
				}
				public Integer ESTADOLength(){
				    return 22;
				}
				public Integer ESTADOPrecision(){
				    return 0;
				}
				public String ESTADODefault(){
				
					return "1";
				
				}
				public String ESTADOComment(){
				
				    return "Estado del trabajo (1 Activo - 2 Realizado - 3 Fallido - 4 Cancelado)";
				
				}
				public String ESTADOPattern(){
				
					return "";
				
				}
				public String ESTADOOriginalDbColumnName(){
				
					return "ESTADO";
				
				}

				
			    public String ARCHIVO;

				public String getARCHIVO () {
					return this.ARCHIVO;
				}

				public Boolean ARCHIVOIsNullable(){
				    return false;
				}
				public Boolean ARCHIVOIsKey(){
				    return false;
				}
				public Integer ARCHIVOLength(){
				    return 100;
				}
				public Integer ARCHIVOPrecision(){
				    return 0;
				}
				public String ARCHIVODefault(){
				
					return null;
				
				}
				public String ARCHIVOComment(){
				
				    return "Nombre del archivo";
				
				}
				public String ARCHIVOPattern(){
				
					return "";
				
				}
				public String ARCHIVOOriginalDbColumnName(){
				
					return "ARCHIVO";
				
				}

				
			    public int TARCHIVOS_ID;

				public int getTARCHIVOS_ID () {
					return this.TARCHIVOS_ID;
				}

				public Boolean TARCHIVOS_IDIsNullable(){
				    return false;
				}
				public Boolean TARCHIVOS_IDIsKey(){
				    return false;
				}
				public Integer TARCHIVOS_IDLength(){
				    return 22;
				}
				public Integer TARCHIVOS_IDPrecision(){
				    return 0;
				}
				public String TARCHIVOS_IDDefault(){
				
					return null;
				
				}
				public String TARCHIVOS_IDComment(){
				
				    return "FK - AFI_TARCHIVOS";
				
				}
				public String TARCHIVOS_IDPattern(){
				
					return "";
				
				}
				public String TARCHIVOS_IDOriginalDbColumnName(){
				
					return "TARCHIVOS_ID";
				
				}

				
			    public int USUARIOS_ID;

				public int getUSUARIOS_ID () {
					return this.USUARIOS_ID;
				}

				public Boolean USUARIOS_IDIsNullable(){
				    return false;
				}
				public Boolean USUARIOS_IDIsKey(){
				    return false;
				}
				public Integer USUARIOS_IDLength(){
				    return 22;
				}
				public Integer USUARIOS_IDPrecision(){
				    return 0;
				}
				public String USUARIOS_IDDefault(){
				
					return null;
				
				}
				public String USUARIOS_IDComment(){
				
				    return "FK - GEN_USUARIOS (Usuario que subio el archivo)";
				
				}
				public String USUARIOS_IDPattern(){
				
					return "";
				
				}
				public String USUARIOS_IDOriginalDbColumnName(){
				
					return "USUARIOS_ID";
				
				}

				
			    public String CODIGO;

				public String getCODIGO () {
					return this.CODIGO;
				}

				public Boolean CODIGOIsNullable(){
				    return false;
				}
				public Boolean CODIGOIsKey(){
				    return false;
				}
				public Integer CODIGOLength(){
				    return 10;
				}
				public Integer CODIGOPrecision(){
				    return 0;
				}
				public String CODIGODefault(){
				
					return null;
				
				}
				public String CODIGOComment(){
				
				    return "Codigo de identificacion del archivo";
				
				}
				public String CODIGOPattern(){
				
					return "";
				
				}
				public String CODIGOOriginalDbColumnName(){
				
					return "CODIGO";
				
				}

				
			    public String ARCHIVOFS;

				public String getARCHIVOFS () {
					return this.ARCHIVOFS;
				}

				public Boolean ARCHIVOFSIsNullable(){
				    return false;
				}
				public Boolean ARCHIVOFSIsKey(){
				    return false;
				}
				public Integer ARCHIVOFSLength(){
				    return 100;
				}
				public Integer ARCHIVOFSPrecision(){
				    return 0;
				}
				public String ARCHIVOFSDefault(){
				
					return null;
				
				}
				public String ARCHIVOFSComment(){
				
				    return "Nombre del archivo en el File System";
				
				}
				public String ARCHIVOFSPattern(){
				
					return "";
				
				}
				public String ARCHIVOFSOriginalDbColumnName(){
				
					return "ARCHIVOFS";
				
				}

				
			    public java.util.Date FECHA;

				public java.util.Date getFECHA () {
					return this.FECHA;
				}

				public Boolean FECHAIsNullable(){
				    return false;
				}
				public Boolean FECHAIsKey(){
				    return false;
				}
				public Integer FECHALength(){
				    return 7;
				}
				public Integer FECHAPrecision(){
				    return 0;
				}
				public String FECHADefault(){
				
					return null;
				
				}
				public String FECHAComment(){
				
				    return "Fecha y hora del registro";
				
				}
				public String FECHAPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String FECHAOriginalDbColumnName(){
				
					return "FECHA";
				
				}

				
			    public String EXTENSION;

				public String getEXTENSION () {
					return this.EXTENSION;
				}

				public Boolean EXTENSIONIsNullable(){
				    return false;
				}
				public Boolean EXTENSIONIsKey(){
				    return false;
				}
				public Integer EXTENSIONLength(){
				    return 0;
				}
				public Integer EXTENSIONPrecision(){
				    return 0;
				}
				public String EXTENSIONDefault(){
				
					return null;
				
				}
				public String EXTENSIONComment(){
				
				    return "";
				
				}
				public String EXTENSIONPattern(){
				
					return "";
				
				}
				public String EXTENSIONOriginalDbColumnName(){
				
					return "EXTENSION";
				
				}

				
			    public int PADRE_ID;

				public int getPADRE_ID () {
					return this.PADRE_ID;
				}

				public Boolean PADRE_IDIsNullable(){
				    return false;
				}
				public Boolean PADRE_IDIsKey(){
				    return false;
				}
				public Integer PADRE_IDLength(){
				    return 0;
				}
				public Integer PADRE_IDPrecision(){
				    return 0;
				}
				public String PADRE_IDDefault(){
				
					return null;
				
				}
				public String PADRE_IDComment(){
				
				    return "";
				
				}
				public String PADRE_IDPattern(){
				
					return "";
				
				}
				public String PADRE_IDOriginalDbColumnName(){
				
					return "PADRE_ID";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_PRINCIPAL_MinSaludEtapa2NuevosRegistros.length) {
				if(length < 1024 && commonByteArray_AFI_PRINCIPAL_MinSaludEtapa2NuevosRegistros.length == 0) {
   					commonByteArray_AFI_PRINCIPAL_MinSaludEtapa2NuevosRegistros = new byte[1024];
				} else {
   					commonByteArray_AFI_PRINCIPAL_MinSaludEtapa2NuevosRegistros = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_PRINCIPAL_MinSaludEtapa2NuevosRegistros, 0, length);
			strReturn = new String(commonByteArray_AFI_PRINCIPAL_MinSaludEtapa2NuevosRegistros, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_PRINCIPAL_MinSaludEtapa2NuevosRegistros.length) {
				if(length < 1024 && commonByteArray_AFI_PRINCIPAL_MinSaludEtapa2NuevosRegistros.length == 0) {
   					commonByteArray_AFI_PRINCIPAL_MinSaludEtapa2NuevosRegistros = new byte[1024];
				} else {
   					commonByteArray_AFI_PRINCIPAL_MinSaludEtapa2NuevosRegistros = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_PRINCIPAL_MinSaludEtapa2NuevosRegistros, 0, length);
			strReturn = new String(commonByteArray_AFI_PRINCIPAL_MinSaludEtapa2NuevosRegistros, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_PRINCIPAL_MinSaludEtapa2NuevosRegistros) {

        	try {

        		int length = 0;
		
			        this.ESTADO = dis.readInt();
					
					this.ARCHIVO = readString(dis);
					
			        this.TARCHIVOS_ID = dis.readInt();
					
			        this.USUARIOS_ID = dis.readInt();
					
					this.CODIGO = readString(dis);
					
					this.ARCHIVOFS = readString(dis);
					
					this.FECHA = readDate(dis);
					
					this.EXTENSION = readString(dis);
					
			        this.PADRE_ID = dis.readInt();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_PRINCIPAL_MinSaludEtapa2NuevosRegistros) {

        	try {

        		int length = 0;
		
			        this.ESTADO = dis.readInt();
					
					this.ARCHIVO = readString(dis);
					
			        this.TARCHIVOS_ID = dis.readInt();
					
			        this.USUARIOS_ID = dis.readInt();
					
					this.CODIGO = readString(dis);
					
					this.ARCHIVOFS = readString(dis);
					
					this.FECHA = readDate(dis);
					
					this.EXTENSION = readString(dis);
					
			        this.PADRE_ID = dis.readInt();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.ESTADO);
					
					// String
				
						writeString(this.ARCHIVO,dos);
					
					// int
				
		            	dos.writeInt(this.TARCHIVOS_ID);
					
					// int
				
		            	dos.writeInt(this.USUARIOS_ID);
					
					// String
				
						writeString(this.CODIGO,dos);
					
					// String
				
						writeString(this.ARCHIVOFS,dos);
					
					// java.util.Date
				
						writeDate(this.FECHA,dos);
					
					// String
				
						writeString(this.EXTENSION,dos);
					
					// int
				
		            	dos.writeInt(this.PADRE_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.ESTADO);
					
					// String
				
						writeString(this.ARCHIVO,dos);
					
					// int
				
		            	dos.writeInt(this.TARCHIVOS_ID);
					
					// int
				
		            	dos.writeInt(this.USUARIOS_ID);
					
					// String
				
						writeString(this.CODIGO,dos);
					
					// String
				
						writeString(this.ARCHIVOFS,dos);
					
					// java.util.Date
				
						writeDate(this.FECHA,dos);
					
					// String
				
						writeString(this.EXTENSION,dos);
					
					// int
				
		            	dos.writeInt(this.PADRE_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ESTADO="+String.valueOf(ESTADO));
		sb.append(",ARCHIVO="+ARCHIVO);
		sb.append(",TARCHIVOS_ID="+String.valueOf(TARCHIVOS_ID));
		sb.append(",USUARIOS_ID="+String.valueOf(USUARIOS_ID));
		sb.append(",CODIGO="+CODIGO);
		sb.append(",ARCHIVOFS="+ARCHIVOFS);
		sb.append(",FECHA="+String.valueOf(FECHA));
		sb.append(",EXTENSION="+EXTENSION);
		sb.append(",PADRE_ID="+String.valueOf(PADRE_ID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(after_tFixedFlowInput_2Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tFixedFlowInput_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFixedFlowInput_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;


		tOracleInput_2Process(globalMap);

		row9Struct row9 = new row9Struct();
out6Struct out6 = new out6Struct();





	
	/**
	 * [tOracleOutput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleOutput_2", false);
		start_Hash.put("tOracleOutput_2", System.currentTimeMillis());
		
	
	currentComponent="tOracleOutput_2";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"out6");
					}
				
		int tos_count_tOracleOutput_2 = 0;
		






    
    int nb_line_tOracleOutput_2 = 0;
    int nb_line_update_tOracleOutput_2 = 0;
    int nb_line_inserted_tOracleOutput_2 = 0;
    int nb_line_deleted_tOracleOutput_2 = 0;
    int nb_line_rejected_tOracleOutput_2 = 0;

    int tmp_batchUpdateCount_tOracleOutput_2 = 0;

    int deletedCount_tOracleOutput_2=0;
    int updatedCount_tOracleOutput_2=0;
    int insertedCount_tOracleOutput_2=0;
    int rowsToCommitCount_tOracleOutput_2=0;
    int rejectedCount_tOracleOutput_2=0;

    boolean whetherReject_tOracleOutput_2 = false;

    java.sql.Connection conn_tOracleOutput_2 = null;

    //optional table
    String dbschema_tOracleOutput_2 = null;
    String tableName_tOracleOutput_2 = null;
        dbschema_tOracleOutput_2 = (String)globalMap.get("dbschema_tOracleConnection_1");
		
        conn_tOracleOutput_2 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");
        int count_tOracleOutput_2=0;

        if(dbschema_tOracleOutput_2 == null || dbschema_tOracleOutput_2.trim().length() == 0) {
            tableName_tOracleOutput_2 = ("AFI_ARCHIVOS");
        } else {
            tableName_tOracleOutput_2 = dbschema_tOracleOutput_2 + "." + ("AFI_ARCHIVOS");
        }
                String insert_tOracleOutput_2 = "INSERT INTO " + tableName_tOracleOutput_2 + " (ESTADO,ARCHIVO,TARCHIVOS_ID,USUARIOS_ID,CODIGO,ARCHIVOFS,FECHA,EXTENSION,PADRE_ID) VALUES (?,?,?,?,?,?,?,?,?)";    

                        java.sql.PreparedStatement pstmt_tOracleOutput_2 = conn_tOracleOutput_2.prepareStatement(insert_tOracleOutput_2);
                        resourceMap.put("pstmt_tOracleOutput_2", pstmt_tOracleOutput_2);





 



/**
 * [tOracleOutput_2 begin ] stop
 */



	
	/**
	 * [tMap_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_4", false);
		start_Hash.put("tMap_4", System.currentTimeMillis());
		
	
	currentComponent="tMap_4";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row9");
					}
				
		int tos_count_tMap_4 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row8Struct> tHash_Lookup_row8 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row8Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row8Struct>) 
					globalMap.get( "tHash_Lookup_row8" ))
					;					
					
	

row8Struct row8HashKey = new row8Struct();
row8Struct row8Default = new row8Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_4__Struct  {
}
Var__tMap_4__Struct Var__tMap_4 = new Var__tMap_4__Struct();
// ###############################

// ###############################
// # Outputs initialization
out6Struct out6_tmp = new out6Struct();
// ###############################

        
        



        









 



/**
 * [tMap_4 begin ] stop
 */



	
	/**
	 * [tFixedFlowInput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tFixedFlowInput_2", false);
		start_Hash.put("tFixedFlowInput_2", System.currentTimeMillis());
		
	
	currentComponent="tFixedFlowInput_2";
	
	
		int tos_count_tFixedFlowInput_2 = 0;
		

	    for (int i_tFixedFlowInput_2 = 0 ; i_tFixedFlowInput_2 < 1 ; i_tFixedFlowInput_2++) {
	                	            	
    	            		row9.ESTADO = context.estArchivoProcesado;
    	            	        	            	
    	            		row9.ARCHIVO = "MINSALUD ETAPA 2 NUEVOS REGISTROS GENERADO "+context.idProceso;
    	            	        	            	
    	            		row9.TARCHIVOS_ID = context.tipoArchivoMinSaludEtapa2NuevosRegistrosGenerado;
    	            	        	            	
    	            		row9.USUARIOS_ID = context.infoUsuarioIdArchivo;
    	            	        	            	
    	            		row9.CODIGO = "AFI_"+context.tipoArchivoMinSaludEtapa2NuevosRegistrosGenerado + "_"+context.infoUsuarioIdArchivo;
    	            	        	            	
    	            		row9.ARCHIVOFS = context.archivoSalida+".CSV";
    	            	        	            	
    	            		row9.FECHA = TalendDate.getCurrentDate();
    	            	        	            	
    	            		row9.EXTENSION = "CSV";
    	            	        	            	
    	            		row9.PADRE_ID = context.infoIdArchivo;
    	            	

 



/**
 * [tFixedFlowInput_2 begin ] stop
 */
	
	/**
	 * [tFixedFlowInput_2 main ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_2";
	
	

 


	tos_count_tFixedFlowInput_2++;

/**
 * [tFixedFlowInput_2 main ] stop
 */
	
	/**
	 * [tFixedFlowInput_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_2";
	
	

 



/**
 * [tFixedFlowInput_2 process_data_begin ] stop
 */

	
	/**
	 * [tMap_4 main ] start
	 */

	

	
	
	currentComponent="tMap_4";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row9"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_4 = false;
		
						row8Struct row8 = null;
					
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_4 = false;
		boolean mainRowRejected_tMap_4 = false;
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row8" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow8 = false;
       		  	    	
       		  	    	
 							row8Struct row8ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_4) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_4 = false;
								
                        		    		    row8HashKey.CODIGO = row9.TARCHIVOS_ID ;
                        		    		

								
		                        	row8HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row8.lookup( row8HashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row8 != null && tHash_Lookup_row8.getCount(row8HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row8' and it contains more one result from keys :  row8.CODIGO = '" + row8HashKey.CODIGO + "'");
								} // G 071
							

							
                    		  	 
							   
                    		  	 
	       		  	    	row8Struct fromLookup_row8 = null;
							row8 = row8Default;
										 
							
								 
							
							
								if (tHash_Lookup_row8 !=null && tHash_Lookup_row8.hasNext()) { // G 099
								
							
								
								fromLookup_row8 = tHash_Lookup_row8.next();

							
							
								} // G 099
							
							

							if(fromLookup_row8 != null) {
								row8 = fromLookup_row8;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_4__Struct Var = Var__tMap_4;// ###############################
        // ###############################
        // # Output tables

out6 = null;


// # Output table : 'out6'
out6_tmp.ESTADO = row9.ESTADO;
out6_tmp.ARCHIVO = row9.ARCHIVO;
out6_tmp.TARCHIVOS_ID = row8.ID;
out6_tmp.USUARIOS_ID = row9.USUARIOS_ID ;
out6_tmp.CODIGO = row9.CODIGO ;
out6_tmp.ARCHIVOFS = row9.ARCHIVOFS ;
out6_tmp.FECHA = row9.FECHA ;
out6_tmp.EXTENSION = row9.EXTENSION ;
out6_tmp.PADRE_ID = row9.PADRE_ID ;
out6 = out6_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_4 = false;










 


	tos_count_tMap_4++;

/**
 * [tMap_4 main ] stop
 */
	
	/**
	 * [tMap_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_4";
	
	

 



/**
 * [tMap_4 process_data_begin ] stop
 */
// Start of branch "out6"
if(out6 != null) { 



	
	/**
	 * [tOracleOutput_2 main ] start
	 */

	

	
	
	currentComponent="tOracleOutput_2";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"out6"
						
						);
					}
					



        whetherReject_tOracleOutput_2 = false;
                        pstmt_tOracleOutput_2.setInt(1, out6.ESTADO);

                        if(out6.ARCHIVO == null) {
pstmt_tOracleOutput_2.setNull(2, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_2.setString(2, out6.ARCHIVO);
}

                        pstmt_tOracleOutput_2.setInt(3, out6.TARCHIVOS_ID);

                        pstmt_tOracleOutput_2.setInt(4, out6.USUARIOS_ID);

                        if(out6.CODIGO == null) {
pstmt_tOracleOutput_2.setNull(5, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_2.setString(5, out6.CODIGO);
}

                        if(out6.ARCHIVOFS == null) {
pstmt_tOracleOutput_2.setNull(6, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_2.setString(6, out6.ARCHIVOFS);
}

                        if(out6.FECHA != null) {
pstmt_tOracleOutput_2.setObject(7, new java.sql.Timestamp(out6.FECHA.getTime()),java.sql.Types.DATE);
} else {
pstmt_tOracleOutput_2.setNull(7, java.sql.Types.DATE);
}

                        if(out6.EXTENSION == null) {
pstmt_tOracleOutput_2.setNull(8, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_2.setString(8, out6.EXTENSION);
}

                        pstmt_tOracleOutput_2.setInt(9, out6.PADRE_ID);

                try {
                    nb_line_tOracleOutput_2++;
                    int processedCount_tOracleOutput_2 = pstmt_tOracleOutput_2.executeUpdate();
                    insertedCount_tOracleOutput_2 += processedCount_tOracleOutput_2;
                    rowsToCommitCount_tOracleOutput_2 += processedCount_tOracleOutput_2;
                } catch(java.lang.Exception e_tOracleOutput_2) {
globalMap.put("tOracleOutput_2_ERROR_MESSAGE",e_tOracleOutput_2.getMessage());
                    whetherReject_tOracleOutput_2 = true;
                            System.err.print(e_tOracleOutput_2.getMessage());
                }

 


	tos_count_tOracleOutput_2++;

/**
 * [tOracleOutput_2 main ] stop
 */
	
	/**
	 * [tOracleOutput_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleOutput_2";
	
	

 



/**
 * [tOracleOutput_2 process_data_begin ] stop
 */
	
	/**
	 * [tOracleOutput_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_2";
	
	

 



/**
 * [tOracleOutput_2 process_data_end ] stop
 */

} // End of branch "out6"




	
	/**
	 * [tMap_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_4";
	
	

 



/**
 * [tMap_4 process_data_end ] stop
 */



	
	/**
	 * [tFixedFlowInput_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_2";
	
	

 



/**
 * [tFixedFlowInput_2 process_data_end ] stop
 */
	
	/**
	 * [tFixedFlowInput_2 end ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_2";
	
	

        }
        globalMap.put("tFixedFlowInput_2_NB_LINE", 1);        

 

ok_Hash.put("tFixedFlowInput_2", true);
end_Hash.put("tFixedFlowInput_2", System.currentTimeMillis());




/**
 * [tFixedFlowInput_2 end ] stop
 */

	
	/**
	 * [tMap_4 end ] start
	 */

	

	
	
	currentComponent="tMap_4";
	
	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_row8 != null) {
						tHash_Lookup_row8.endGet();
					}
					globalMap.remove( "tHash_Lookup_row8" );

					
					
				
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row9");
			  	}
			  	
 

ok_Hash.put("tMap_4", true);
end_Hash.put("tMap_4", System.currentTimeMillis());




/**
 * [tMap_4 end ] stop
 */

	
	/**
	 * [tOracleOutput_2 end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_2";
	
	
	



	
        if(pstmt_tOracleOutput_2 != null) {
			
				pstmt_tOracleOutput_2.close();
				resourceMap.remove("pstmt_tOracleOutput_2");
			
        }
    resourceMap.put("statementClosed_tOracleOutput_2", true);

	
	nb_line_deleted_tOracleOutput_2=nb_line_deleted_tOracleOutput_2+ deletedCount_tOracleOutput_2;
	nb_line_update_tOracleOutput_2=nb_line_update_tOracleOutput_2 + updatedCount_tOracleOutput_2;
	nb_line_inserted_tOracleOutput_2=nb_line_inserted_tOracleOutput_2 + insertedCount_tOracleOutput_2;
	nb_line_rejected_tOracleOutput_2=nb_line_rejected_tOracleOutput_2 + rejectedCount_tOracleOutput_2;
	
        globalMap.put("tOracleOutput_2_NB_LINE",nb_line_tOracleOutput_2);
        globalMap.put("tOracleOutput_2_NB_LINE_UPDATED",nb_line_update_tOracleOutput_2);
        globalMap.put("tOracleOutput_2_NB_LINE_INSERTED",nb_line_inserted_tOracleOutput_2);
        globalMap.put("tOracleOutput_2_NB_LINE_DELETED",nb_line_deleted_tOracleOutput_2);
        globalMap.put("tOracleOutput_2_NB_LINE_REJECTED", nb_line_rejected_tOracleOutput_2);
    

	



				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"out6");
			  	}
			  	
 

ok_Hash.put("tOracleOutput_2", true);
end_Hash.put("tOracleOutput_2", System.currentTimeMillis());




/**
 * [tOracleOutput_2 end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
					     			//free memory for "tMap_4"
					     			globalMap.remove("tHash_Lookup_row8"); 
				     			
				try{
					
	
	/**
	 * [tFixedFlowInput_2 finally ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_2";
	
	

 



/**
 * [tFixedFlowInput_2 finally ] stop
 */

	
	/**
	 * [tMap_4 finally ] start
	 */

	

	
	
	currentComponent="tMap_4";
	
	

 



/**
 * [tMap_4 finally ] stop
 */

	
	/**
	 * [tOracleOutput_2 finally ] start
	 */

	

	
	
	currentComponent="tOracleOutput_2";
	
	



    if (resourceMap.get("statementClosed_tOracleOutput_2") == null) {
                java.sql.PreparedStatement pstmtToClose_tOracleOutput_2 = null;
                if ((pstmtToClose_tOracleOutput_2 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tOracleOutput_2")) != null) {
                    pstmtToClose_tOracleOutput_2.close();
                }
    }
 



/**
 * [tOracleOutput_2 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFixedFlowInput_2_SUBPROCESS_STATE", 1);
	}
	


public void tJava_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tJava_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_2", false);
		start_Hash.put("tJava_2", System.currentTimeMillis());
		
	
	currentComponent="tJava_2";
	
	
		int tos_count_tJava_2 = 0;
		


context.outCodigo=false;
 



/**
 * [tJava_2 begin ] stop
 */
	
	/**
	 * [tJava_2 main ] start
	 */

	

	
	
	currentComponent="tJava_2";
	
	

 


	tos_count_tJava_2++;

/**
 * [tJava_2 main ] stop
 */
	
	/**
	 * [tJava_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_2";
	
	

 



/**
 * [tJava_2 process_data_begin ] stop
 */
	
	/**
	 * [tJava_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_2";
	
	

 



/**
 * [tJava_2 process_data_end ] stop
 */
	
	/**
	 * [tJava_2 end ] start
	 */

	

	
	
	currentComponent="tJava_2";
	
	

 

ok_Hash.put("tJava_2", true);
end_Hash.put("tJava_2", System.currentTimeMillis());




/**
 * [tJava_2 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_2 finally ] start
	 */

	

	
	
	currentComponent="tJava_2";
	
	

 



/**
 * [tJava_2 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_2_SUBPROCESS_STATE", 1);
	}
	


public static class row12Struct implements routines.system.IPersistableComparableLookupRow<row12Struct> {
    final static byte[] commonByteArrayLock_AFI_PRINCIPAL_MinSaludEtapa2NuevosRegistros = new byte[0];
    static byte[] commonByteArray_AFI_PRINCIPAL_MinSaludEtapa2NuevosRegistros = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public Integer ID;

				public Integer getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return true;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return 0;
				}
				public Integer IDPrecision(){
				    return 0;
				}
				public String IDDefault(){
				
					return null;
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public String NOMBRE;

				public String getNOMBRE () {
					return this.NOMBRE;
				}

				public Boolean NOMBREIsNullable(){
				    return true;
				}
				public Boolean NOMBREIsKey(){
				    return false;
				}
				public Integer NOMBRELength(){
				    return 0;
				}
				public Integer NOMBREPrecision(){
				    return 0;
				}
				public String NOMBREDefault(){
				
					return null;
				
				}
				public String NOMBREComment(){
				
				    return "";
				
				}
				public String NOMBREPattern(){
				
					return "";
				
				}
				public String NOMBREOriginalDbColumnName(){
				
					return "NOMBRE";
				
				}

				
			    public String SIGLA;

				public String getSIGLA () {
					return this.SIGLA;
				}

				public Boolean SIGLAIsNullable(){
				    return true;
				}
				public Boolean SIGLAIsKey(){
				    return false;
				}
				public Integer SIGLALength(){
				    return 0;
				}
				public Integer SIGLAPrecision(){
				    return 0;
				}
				public String SIGLADefault(){
				
					return null;
				
				}
				public String SIGLAComment(){
				
				    return "";
				
				}
				public String SIGLAPattern(){
				
					return "";
				
				}
				public String SIGLAOriginalDbColumnName(){
				
					return "SIGLA";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.ID == null) ? 0 : this.ID.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row12Struct other = (row12Struct) obj;
		
						if (this.ID == null) {
							if (other.ID != null)
								return false;
						
						} else if (!this.ID.equals(other.ID))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row12Struct other) {

		other.ID = this.ID;
	            other.NOMBRE = this.NOMBRE;
	            other.SIGLA = this.SIGLA;
	            
	}

	public void copyKeysDataTo(row12Struct other) {

		other.ID = this.ID;
	            	
	}



	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}
	
	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			unmarshaller.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private void writeString(String str, DataOutputStream dos, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_PRINCIPAL_MinSaludEtapa2NuevosRegistros) {

        	try {

        		int length = 0;
		
						this.ID = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_PRINCIPAL_MinSaludEtapa2NuevosRegistros) {

        	try {

        		int length = 0;
		
						this.ID = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.ID,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.ID,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.NOMBRE = readString(dis,ois);
					
						this.SIGLA = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		
						this.NOMBRE = readString(dis,objectIn);
					
						this.SIGLA = readString(dis,objectIn);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeString(this.NOMBRE, dos, oos);
					
						writeString(this.SIGLA, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
						writeString(this.NOMBRE, dos, objectOut);
					
						writeString(this.SIGLA, dos, objectOut);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",NOMBRE="+NOMBRE);
		sb.append(",SIGLA="+SIGLA);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row12Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.ID, other.ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tHashInput_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tHashInput_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row12Struct row12 = new row12Struct();




	
	/**
	 * [tAdvancedHash_row12 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row12", false);
		start_Hash.put("tAdvancedHash_row12", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row12";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row12");
					}
				
		int tos_count_tAdvancedHash_row12 = 0;
		

			   		// connection name:row12
			   		// source node:tHashInput_2 - inputs:(after_tLoop_1) outputs:(row12,row12) | target node:tAdvancedHash_row12 - inputs:(row12) outputs:()
			   		// linked node: tMap_3 - inputs:(row2,row12) outputs:(out1)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row12 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row12Struct> tHash_Lookup_row12 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row12Struct>getLookup(matchingModeEnum_row12);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row12", tHash_Lookup_row12);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row12 begin ] stop
 */



	
	/**
	 * [tHashInput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_2", false);
		start_Hash.put("tHashInput_2", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_2";
	
	
		int tos_count_tHashInput_2 = 0;
		


int nb_line_tHashInput_2 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_2=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row11Struct> tHashFile_tHashInput_2 = mf_tHashInput_2.getAdvancedMemoryHashFile("tHashFile_MinSaludEtapa2NuevosRegistros_" + pid +"_tHashOutput_2");
if(tHashFile_tHashInput_2==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<row11Struct> iterator_tHashInput_2 = tHashFile_tHashInput_2.iterator();
while (iterator_tHashInput_2.hasNext()) {
    row11Struct next_tHashInput_2 = iterator_tHashInput_2.next();

	row12.ID = next_tHashInput_2.ID;
	row12.NOMBRE = next_tHashInput_2.NOMBRE;
	row12.SIGLA = next_tHashInput_2.SIGLA;

 



/**
 * [tHashInput_2 begin ] stop
 */
	
	/**
	 * [tHashInput_2 main ] start
	 */

	

	
	
	currentComponent="tHashInput_2";
	
	

 


	tos_count_tHashInput_2++;

/**
 * [tHashInput_2 main ] stop
 */
	
	/**
	 * [tHashInput_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashInput_2";
	
	

 



/**
 * [tHashInput_2 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row12 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row12";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row12"
						
						);
					}
					


			   
			   

					row12Struct row12_HashRow = new row12Struct();
		   	   	   
				
				row12_HashRow.ID = row12.ID;
				
				row12_HashRow.NOMBRE = row12.NOMBRE;
				
				row12_HashRow.SIGLA = row12.SIGLA;
				
			tHash_Lookup_row12.put(row12_HashRow);
			
            




 


	tos_count_tAdvancedHash_row12++;

/**
 * [tAdvancedHash_row12 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row12 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row12";
	
	

 



/**
 * [tAdvancedHash_row12 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row12 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row12";
	
	

 



/**
 * [tAdvancedHash_row12 process_data_end ] stop
 */



	
	/**
	 * [tHashInput_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashInput_2";
	
	

 



/**
 * [tHashInput_2 process_data_end ] stop
 */
	
	/**
	 * [tHashInput_2 end ] start
	 */

	

	
	
	currentComponent="tHashInput_2";
	
	
    

		
			nb_line_tHashInput_2++;
		}	
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_MinSaludEtapa2NuevosRegistros_" + pid +"_tHashOutput_2");
	


	globalMap.put("tHashInput_2_NB_LINE", nb_line_tHashInput_2);       

 

ok_Hash.put("tHashInput_2", true);
end_Hash.put("tHashInput_2", System.currentTimeMillis());




/**
 * [tHashInput_2 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row12 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row12";
	
	

tHash_Lookup_row12.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row12");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row12", true);
end_Hash.put("tAdvancedHash_row12", System.currentTimeMillis());




/**
 * [tAdvancedHash_row12 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tHashInput_2 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_2";
	
	

 



/**
 * [tHashInput_2 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row12 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row12";
	
	

 



/**
 * [tAdvancedHash_row12 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tHashInput_2_SUBPROCESS_STATE", 1);
	}
	


public static class row3Struct implements routines.system.IPersistableComparableLookupRow<row3Struct> {
    final static byte[] commonByteArrayLock_AFI_PRINCIPAL_MinSaludEtapa2NuevosRegistros = new byte[0];
    static byte[] commonByteArray_AFI_PRINCIPAL_MinSaludEtapa2NuevosRegistros = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String codFuerza;

				public String getCodFuerza () {
					return this.codFuerza;
				}

				public Boolean codFuerzaIsNullable(){
				    return false;
				}
				public Boolean codFuerzaIsKey(){
				    return false;
				}
				public Integer codFuerzaLength(){
				    return 6;
				}
				public Integer codFuerzaPrecision(){
				    return 0;
				}
				public String codFuerzaDefault(){
				
					return null;
				
				}
				public String codFuerzaComment(){
				
				    return "";
				
				}
				public String codFuerzaPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String codFuerzaOriginalDbColumnName(){
				
					return "codFuerza";
				
				}

				
			    public String tipoDocumentoTitular;

				public String getTipoDocumentoTitular () {
					return this.tipoDocumentoTitular;
				}

				public Boolean tipoDocumentoTitularIsNullable(){
				    return true;
				}
				public Boolean tipoDocumentoTitularIsKey(){
				    return false;
				}
				public Integer tipoDocumentoTitularLength(){
				    return 2;
				}
				public Integer tipoDocumentoTitularPrecision(){
				    return 0;
				}
				public String tipoDocumentoTitularDefault(){
				
					return null;
				
				}
				public String tipoDocumentoTitularComment(){
				
				    return "";
				
				}
				public String tipoDocumentoTitularPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String tipoDocumentoTitularOriginalDbColumnName(){
				
					return "tipoDocumentoTitular";
				
				}

				
			    public String numeroDocumentoTitular;

				public String getNumeroDocumentoTitular () {
					return this.numeroDocumentoTitular;
				}

				public Boolean numeroDocumentoTitularIsNullable(){
				    return true;
				}
				public Boolean numeroDocumentoTitularIsKey(){
				    return false;
				}
				public Integer numeroDocumentoTitularLength(){
				    return 16;
				}
				public Integer numeroDocumentoTitularPrecision(){
				    return 0;
				}
				public String numeroDocumentoTitularDefault(){
				
					return null;
				
				}
				public String numeroDocumentoTitularComment(){
				
				    return "";
				
				}
				public String numeroDocumentoTitularPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String numeroDocumentoTitularOriginalDbColumnName(){
				
					return "numeroDocumentoTitular";
				
				}

				
			    public String tipoIdentificacionAfiliado;

				public String getTipoIdentificacionAfiliado () {
					return this.tipoIdentificacionAfiliado;
				}

				public Boolean tipoIdentificacionAfiliadoIsNullable(){
				    return false;
				}
				public Boolean tipoIdentificacionAfiliadoIsKey(){
				    return false;
				}
				public Integer tipoIdentificacionAfiliadoLength(){
				    return 2;
				}
				public Integer tipoIdentificacionAfiliadoPrecision(){
				    return 0;
				}
				public String tipoIdentificacionAfiliadoDefault(){
				
					return null;
				
				}
				public String tipoIdentificacionAfiliadoComment(){
				
				    return "";
				
				}
				public String tipoIdentificacionAfiliadoPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String tipoIdentificacionAfiliadoOriginalDbColumnName(){
				
					return "tipoIdentificacionAfiliado";
				
				}

				
			    public String numeroIdentificacionAfiliado;

				public String getNumeroIdentificacionAfiliado () {
					return this.numeroIdentificacionAfiliado;
				}

				public Boolean numeroIdentificacionAfiliadoIsNullable(){
				    return false;
				}
				public Boolean numeroIdentificacionAfiliadoIsKey(){
				    return true;
				}
				public Integer numeroIdentificacionAfiliadoLength(){
				    return 16;
				}
				public Integer numeroIdentificacionAfiliadoPrecision(){
				    return 0;
				}
				public String numeroIdentificacionAfiliadoDefault(){
				
					return null;
				
				}
				public String numeroIdentificacionAfiliadoComment(){
				
				    return "";
				
				}
				public String numeroIdentificacionAfiliadoPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String numeroIdentificacionAfiliadoOriginalDbColumnName(){
				
					return "numeroIdentificacionAfiliado";
				
				}

				
			    public String primerApellidoAfiliado;

				public String getPrimerApellidoAfiliado () {
					return this.primerApellidoAfiliado;
				}

				public Boolean primerApellidoAfiliadoIsNullable(){
				    return false;
				}
				public Boolean primerApellidoAfiliadoIsKey(){
				    return false;
				}
				public Integer primerApellidoAfiliadoLength(){
				    return 20;
				}
				public Integer primerApellidoAfiliadoPrecision(){
				    return 0;
				}
				public String primerApellidoAfiliadoDefault(){
				
					return null;
				
				}
				public String primerApellidoAfiliadoComment(){
				
				    return "";
				
				}
				public String primerApellidoAfiliadoPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String primerApellidoAfiliadoOriginalDbColumnName(){
				
					return "primerApellidoAfiliado";
				
				}

				
			    public String segundoApellidoAfiliado;

				public String getSegundoApellidoAfiliado () {
					return this.segundoApellidoAfiliado;
				}

				public Boolean segundoApellidoAfiliadoIsNullable(){
				    return true;
				}
				public Boolean segundoApellidoAfiliadoIsKey(){
				    return false;
				}
				public Integer segundoApellidoAfiliadoLength(){
				    return 30;
				}
				public Integer segundoApellidoAfiliadoPrecision(){
				    return 0;
				}
				public String segundoApellidoAfiliadoDefault(){
				
					return null;
				
				}
				public String segundoApellidoAfiliadoComment(){
				
				    return "";
				
				}
				public String segundoApellidoAfiliadoPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String segundoApellidoAfiliadoOriginalDbColumnName(){
				
					return "segundoApellidoAfiliado";
				
				}

				
			    public String primerNombreAfiliado;

				public String getPrimerNombreAfiliado () {
					return this.primerNombreAfiliado;
				}

				public Boolean primerNombreAfiliadoIsNullable(){
				    return false;
				}
				public Boolean primerNombreAfiliadoIsKey(){
				    return false;
				}
				public Integer primerNombreAfiliadoLength(){
				    return 20;
				}
				public Integer primerNombreAfiliadoPrecision(){
				    return 0;
				}
				public String primerNombreAfiliadoDefault(){
				
					return null;
				
				}
				public String primerNombreAfiliadoComment(){
				
				    return "";
				
				}
				public String primerNombreAfiliadoPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String primerNombreAfiliadoOriginalDbColumnName(){
				
					return "primerNombreAfiliado";
				
				}

				
			    public String segundoNombreAfiliado;

				public String getSegundoNombreAfiliado () {
					return this.segundoNombreAfiliado;
				}

				public Boolean segundoNombreAfiliadoIsNullable(){
				    return true;
				}
				public Boolean segundoNombreAfiliadoIsKey(){
				    return false;
				}
				public Integer segundoNombreAfiliadoLength(){
				    return 30;
				}
				public Integer segundoNombreAfiliadoPrecision(){
				    return 0;
				}
				public String segundoNombreAfiliadoDefault(){
				
					return null;
				
				}
				public String segundoNombreAfiliadoComment(){
				
				    return "";
				
				}
				public String segundoNombreAfiliadoPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String segundoNombreAfiliadoOriginalDbColumnName(){
				
					return "segundoNombreAfiliado";
				
				}

				
			    public java.util.Date fechaNacimientoAfiliado;

				public java.util.Date getFechaNacimientoAfiliado () {
					return this.fechaNacimientoAfiliado;
				}

				public Boolean fechaNacimientoAfiliadoIsNullable(){
				    return false;
				}
				public Boolean fechaNacimientoAfiliadoIsKey(){
				    return false;
				}
				public Integer fechaNacimientoAfiliadoLength(){
				    return 10;
				}
				public Integer fechaNacimientoAfiliadoPrecision(){
				    return 0;
				}
				public String fechaNacimientoAfiliadoDefault(){
				
					return null;
				
				}
				public String fechaNacimientoAfiliadoComment(){
				
				    return "";
				
				}
				public String fechaNacimientoAfiliadoPattern(){
				
					return "dd/MM/yyyy";
				
				}
				public String fechaNacimientoAfiliadoOriginalDbColumnName(){
				
					return "fechaNacimientoAfiliado";
				
				}

				
			    public char generoAfiliado = ' ';

				public char getGeneroAfiliado () {
					return this.generoAfiliado;
				}

				public Boolean generoAfiliadoIsNullable(){
				    return false;
				}
				public Boolean generoAfiliadoIsKey(){
				    return false;
				}
				public Integer generoAfiliadoLength(){
				    return 1;
				}
				public Integer generoAfiliadoPrecision(){
				    return 0;
				}
				public String generoAfiliadoDefault(){
				
					return "";
				
				}
				public String generoAfiliadoComment(){
				
				    return "";
				
				}
				public String generoAfiliadoPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String generoAfiliadoOriginalDbColumnName(){
				
					return "generoAfiliado";
				
				}

				
			    public char tipoAfiliado = ' ';

				public char getTipoAfiliado () {
					return this.tipoAfiliado;
				}

				public Boolean tipoAfiliadoIsNullable(){
				    return false;
				}
				public Boolean tipoAfiliadoIsKey(){
				    return false;
				}
				public Integer tipoAfiliadoLength(){
				    return 1;
				}
				public Integer tipoAfiliadoPrecision(){
				    return 0;
				}
				public String tipoAfiliadoDefault(){
				
					return null;
				
				}
				public String tipoAfiliadoComment(){
				
				    return "";
				
				}
				public String tipoAfiliadoPattern(){
				
					return "";
				
				}
				public String tipoAfiliadoOriginalDbColumnName(){
				
					return "tipoAfiliado";
				
				}

				
			    public int codigoDepartamentoAfiliado;

				public int getCodigoDepartamentoAfiliado () {
					return this.codigoDepartamentoAfiliado;
				}

				public Boolean codigoDepartamentoAfiliadoIsNullable(){
				    return false;
				}
				public Boolean codigoDepartamentoAfiliadoIsKey(){
				    return false;
				}
				public Integer codigoDepartamentoAfiliadoLength(){
				    return 2;
				}
				public Integer codigoDepartamentoAfiliadoPrecision(){
				    return 0;
				}
				public String codigoDepartamentoAfiliadoDefault(){
				
					return null;
				
				}
				public String codigoDepartamentoAfiliadoComment(){
				
				    return "";
				
				}
				public String codigoDepartamentoAfiliadoPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String codigoDepartamentoAfiliadoOriginalDbColumnName(){
				
					return "codigoDepartamentoAfiliado";
				
				}

				
			    public int codigoMunicipioAfiliado;

				public int getCodigoMunicipioAfiliado () {
					return this.codigoMunicipioAfiliado;
				}

				public Boolean codigoMunicipioAfiliadoIsNullable(){
				    return false;
				}
				public Boolean codigoMunicipioAfiliadoIsKey(){
				    return false;
				}
				public Integer codigoMunicipioAfiliadoLength(){
				    return 3;
				}
				public Integer codigoMunicipioAfiliadoPrecision(){
				    return 0;
				}
				public String codigoMunicipioAfiliadoDefault(){
				
					return null;
				
				}
				public String codigoMunicipioAfiliadoComment(){
				
				    return "";
				
				}
				public String codigoMunicipioAfiliadoPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String codigoMunicipioAfiliadoOriginalDbColumnName(){
				
					return "codigoMunicipioAfiliado";
				
				}

				
			    public java.util.Date fechaAfiliacionAfiliado;

				public java.util.Date getFechaAfiliacionAfiliado () {
					return this.fechaAfiliacionAfiliado;
				}

				public Boolean fechaAfiliacionAfiliadoIsNullable(){
				    return false;
				}
				public Boolean fechaAfiliacionAfiliadoIsKey(){
				    return false;
				}
				public Integer fechaAfiliacionAfiliadoLength(){
				    return 10;
				}
				public Integer fechaAfiliacionAfiliadoPrecision(){
				    return 0;
				}
				public String fechaAfiliacionAfiliadoDefault(){
				
					return null;
				
				}
				public String fechaAfiliacionAfiliadoComment(){
				
				    return "";
				
				}
				public String fechaAfiliacionAfiliadoPattern(){
				
					return "dd/MM/yyyy";
				
				}
				public String fechaAfiliacionAfiliadoOriginalDbColumnName(){
				
					return "fechaAfiliacionAfiliado";
				
				}

				
			    public java.util.Date fechaDesafiliacionAfiliado;

				public java.util.Date getFechaDesafiliacionAfiliado () {
					return this.fechaDesafiliacionAfiliado;
				}

				public Boolean fechaDesafiliacionAfiliadoIsNullable(){
				    return false;
				}
				public Boolean fechaDesafiliacionAfiliadoIsKey(){
				    return false;
				}
				public Integer fechaDesafiliacionAfiliadoLength(){
				    return 10;
				}
				public Integer fechaDesafiliacionAfiliadoPrecision(){
				    return 0;
				}
				public String fechaDesafiliacionAfiliadoDefault(){
				
					return null;
				
				}
				public String fechaDesafiliacionAfiliadoComment(){
				
				    return "";
				
				}
				public String fechaDesafiliacionAfiliadoPattern(){
				
					return "dd/MM/yyyy";
				
				}
				public String fechaDesafiliacionAfiliadoOriginalDbColumnName(){
				
					return "fechaDesafiliacionAfiliado";
				
				}

				
			    public String glosaArchivo;

				public String getGlosaArchivo () {
					return this.glosaArchivo;
				}

				public Boolean glosaArchivoIsNullable(){
				    return true;
				}
				public Boolean glosaArchivoIsKey(){
				    return false;
				}
				public Integer glosaArchivoLength(){
				    return 0;
				}
				public Integer glosaArchivoPrecision(){
				    return 0;
				}
				public String glosaArchivoDefault(){
				
					return null;
				
				}
				public String glosaArchivoComment(){
				
				    return "";
				
				}
				public String glosaArchivoPattern(){
				
					return "";
				
				}
				public String glosaArchivoOriginalDbColumnName(){
				
					return "glosaArchivo";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.tipoIdentificacionAfiliado == null) ? 0 : this.tipoIdentificacionAfiliado.hashCode());
					
						result = prime * result + ((this.numeroIdentificacionAfiliado == null) ? 0 : this.numeroIdentificacionAfiliado.hashCode());
					
						result = prime * result + ((this.primerApellidoAfiliado == null) ? 0 : this.primerApellidoAfiliado.hashCode());
					
						result = prime * result + ((this.primerNombreAfiliado == null) ? 0 : this.primerNombreAfiliado.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row3Struct other = (row3Struct) obj;
		
						if (this.tipoIdentificacionAfiliado == null) {
							if (other.tipoIdentificacionAfiliado != null)
								return false;
						
						} else if (!this.tipoIdentificacionAfiliado.equals(other.tipoIdentificacionAfiliado))
						
							return false;
					
						if (this.numeroIdentificacionAfiliado == null) {
							if (other.numeroIdentificacionAfiliado != null)
								return false;
						
						} else if (!this.numeroIdentificacionAfiliado.equals(other.numeroIdentificacionAfiliado))
						
							return false;
					
						if (this.primerApellidoAfiliado == null) {
							if (other.primerApellidoAfiliado != null)
								return false;
						
						} else if (!this.primerApellidoAfiliado.equals(other.primerApellidoAfiliado))
						
							return false;
					
						if (this.primerNombreAfiliado == null) {
							if (other.primerNombreAfiliado != null)
								return false;
						
						} else if (!this.primerNombreAfiliado.equals(other.primerNombreAfiliado))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row3Struct other) {

		other.codFuerza = this.codFuerza;
	            other.tipoDocumentoTitular = this.tipoDocumentoTitular;
	            other.numeroDocumentoTitular = this.numeroDocumentoTitular;
	            other.tipoIdentificacionAfiliado = this.tipoIdentificacionAfiliado;
	            other.numeroIdentificacionAfiliado = this.numeroIdentificacionAfiliado;
	            other.primerApellidoAfiliado = this.primerApellidoAfiliado;
	            other.segundoApellidoAfiliado = this.segundoApellidoAfiliado;
	            other.primerNombreAfiliado = this.primerNombreAfiliado;
	            other.segundoNombreAfiliado = this.segundoNombreAfiliado;
	            other.fechaNacimientoAfiliado = this.fechaNacimientoAfiliado;
	            other.generoAfiliado = this.generoAfiliado;
	            other.tipoAfiliado = this.tipoAfiliado;
	            other.codigoDepartamentoAfiliado = this.codigoDepartamentoAfiliado;
	            other.codigoMunicipioAfiliado = this.codigoMunicipioAfiliado;
	            other.fechaAfiliacionAfiliado = this.fechaAfiliacionAfiliado;
	            other.fechaDesafiliacionAfiliado = this.fechaDesafiliacionAfiliado;
	            other.glosaArchivo = this.glosaArchivo;
	            
	}

	public void copyKeysDataTo(row3Struct other) {

		other.tipoIdentificacionAfiliado = this.tipoIdentificacionAfiliado;
	            	other.numeroIdentificacionAfiliado = this.numeroIdentificacionAfiliado;
	            	other.primerApellidoAfiliado = this.primerApellidoAfiliado;
	            	other.primerNombreAfiliado = this.primerNombreAfiliado;
	            	
	}



	
	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			unmarshaller.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private void writeString(String str, DataOutputStream dos, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_PRINCIPAL_MinSaludEtapa2NuevosRegistros.length) {
				if(length < 1024 && commonByteArray_AFI_PRINCIPAL_MinSaludEtapa2NuevosRegistros.length == 0) {
   					commonByteArray_AFI_PRINCIPAL_MinSaludEtapa2NuevosRegistros = new byte[1024];
				} else {
   					commonByteArray_AFI_PRINCIPAL_MinSaludEtapa2NuevosRegistros = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_PRINCIPAL_MinSaludEtapa2NuevosRegistros, 0, length);
			strReturn = new String(commonByteArray_AFI_PRINCIPAL_MinSaludEtapa2NuevosRegistros, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_PRINCIPAL_MinSaludEtapa2NuevosRegistros.length) {
				if(length < 1024 && commonByteArray_AFI_PRINCIPAL_MinSaludEtapa2NuevosRegistros.length == 0) {
   					commonByteArray_AFI_PRINCIPAL_MinSaludEtapa2NuevosRegistros = new byte[1024];
				} else {
   					commonByteArray_AFI_PRINCIPAL_MinSaludEtapa2NuevosRegistros = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_PRINCIPAL_MinSaludEtapa2NuevosRegistros, 0, length);
			strReturn = new String(commonByteArray_AFI_PRINCIPAL_MinSaludEtapa2NuevosRegistros, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(DataInputStream dis, ObjectInputStream ois) throws IOException{
		java.util.Date dateReturn = null;
		int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller ) throws IOException{
		java.util.Date dateReturn = null;
		int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

	private void writeDate(java.util.Date date1, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
	}
	
	private void writeDate(java.util.Date date1, DataOutputStream dos, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_PRINCIPAL_MinSaludEtapa2NuevosRegistros) {

        	try {

        		int length = 0;
		
					this.tipoIdentificacionAfiliado = readString(dis);
					
					this.numeroIdentificacionAfiliado = readString(dis);
					
					this.primerApellidoAfiliado = readString(dis);
					
					this.primerNombreAfiliado = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_PRINCIPAL_MinSaludEtapa2NuevosRegistros) {

        	try {

        		int length = 0;
		
					this.tipoIdentificacionAfiliado = readString(dis);
					
					this.numeroIdentificacionAfiliado = readString(dis);
					
					this.primerApellidoAfiliado = readString(dis);
					
					this.primerNombreAfiliado = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.tipoIdentificacionAfiliado,dos);
					
					// String
				
						writeString(this.numeroIdentificacionAfiliado,dos);
					
					// String
				
						writeString(this.primerApellidoAfiliado,dos);
					
					// String
				
						writeString(this.primerNombreAfiliado,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.tipoIdentificacionAfiliado,dos);
					
					// String
				
						writeString(this.numeroIdentificacionAfiliado,dos);
					
					// String
				
						writeString(this.primerApellidoAfiliado,dos);
					
					// String
				
						writeString(this.primerNombreAfiliado,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.codFuerza = readString(dis,ois);
					
						this.tipoDocumentoTitular = readString(dis,ois);
					
						this.numeroDocumentoTitular = readString(dis,ois);
					
						this.segundoApellidoAfiliado = readString(dis,ois);
					
						this.segundoNombreAfiliado = readString(dis,ois);
					
						this.fechaNacimientoAfiliado = readDate(dis,ois);
					
			            this.generoAfiliado = dis.readChar();
					
			            this.tipoAfiliado = dis.readChar();
					
			            this.codigoDepartamentoAfiliado = dis.readInt();
					
			            this.codigoMunicipioAfiliado = dis.readInt();
					
						this.fechaAfiliacionAfiliado = readDate(dis,ois);
					
						this.fechaDesafiliacionAfiliado = readDate(dis,ois);
					
						this.glosaArchivo = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		
						this.codFuerza = readString(dis,objectIn);
					
						this.tipoDocumentoTitular = readString(dis,objectIn);
					
						this.numeroDocumentoTitular = readString(dis,objectIn);
					
						this.segundoApellidoAfiliado = readString(dis,objectIn);
					
						this.segundoNombreAfiliado = readString(dis,objectIn);
					
						this.fechaNacimientoAfiliado = readDate(dis,objectIn);
					
			            this.generoAfiliado = objectIn.readChar();
					
			            this.tipoAfiliado = objectIn.readChar();
					
			            this.codigoDepartamentoAfiliado = objectIn.readInt();
					
			            this.codigoMunicipioAfiliado = objectIn.readInt();
					
						this.fechaAfiliacionAfiliado = readDate(dis,objectIn);
					
						this.fechaDesafiliacionAfiliado = readDate(dis,objectIn);
					
						this.glosaArchivo = readString(dis,objectIn);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeString(this.codFuerza, dos, oos);
					
						writeString(this.tipoDocumentoTitular, dos, oos);
					
						writeString(this.numeroDocumentoTitular, dos, oos);
					
						writeString(this.segundoApellidoAfiliado, dos, oos);
					
						writeString(this.segundoNombreAfiliado, dos, oos);
					
						writeDate(this.fechaNacimientoAfiliado, dos, oos);
					
		            	dos.writeChar(this.generoAfiliado);
					
		            	dos.writeChar(this.tipoAfiliado);
					
		            	dos.writeInt(this.codigoDepartamentoAfiliado);
					
		            	dos.writeInt(this.codigoMunicipioAfiliado);
					
						writeDate(this.fechaAfiliacionAfiliado, dos, oos);
					
						writeDate(this.fechaDesafiliacionAfiliado, dos, oos);
					
						writeString(this.glosaArchivo, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
						writeString(this.codFuerza, dos, objectOut);
					
						writeString(this.tipoDocumentoTitular, dos, objectOut);
					
						writeString(this.numeroDocumentoTitular, dos, objectOut);
					
						writeString(this.segundoApellidoAfiliado, dos, objectOut);
					
						writeString(this.segundoNombreAfiliado, dos, objectOut);
					
						writeDate(this.fechaNacimientoAfiliado, dos, objectOut);
					
					objectOut.writeChar(this.generoAfiliado);
					
					objectOut.writeChar(this.tipoAfiliado);
					
					objectOut.writeInt(this.codigoDepartamentoAfiliado);
					
					objectOut.writeInt(this.codigoMunicipioAfiliado);
					
						writeDate(this.fechaAfiliacionAfiliado, dos, objectOut);
					
						writeDate(this.fechaDesafiliacionAfiliado, dos, objectOut);
					
						writeString(this.glosaArchivo, dos, objectOut);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("codFuerza="+codFuerza);
		sb.append(",tipoDocumentoTitular="+tipoDocumentoTitular);
		sb.append(",numeroDocumentoTitular="+numeroDocumentoTitular);
		sb.append(",tipoIdentificacionAfiliado="+tipoIdentificacionAfiliado);
		sb.append(",numeroIdentificacionAfiliado="+numeroIdentificacionAfiliado);
		sb.append(",primerApellidoAfiliado="+primerApellidoAfiliado);
		sb.append(",segundoApellidoAfiliado="+segundoApellidoAfiliado);
		sb.append(",primerNombreAfiliado="+primerNombreAfiliado);
		sb.append(",segundoNombreAfiliado="+segundoNombreAfiliado);
		sb.append(",fechaNacimientoAfiliado="+String.valueOf(fechaNacimientoAfiliado));
		sb.append(",generoAfiliado="+String.valueOf(generoAfiliado));
		sb.append(",tipoAfiliado="+String.valueOf(tipoAfiliado));
		sb.append(",codigoDepartamentoAfiliado="+String.valueOf(codigoDepartamentoAfiliado));
		sb.append(",codigoMunicipioAfiliado="+String.valueOf(codigoMunicipioAfiliado));
		sb.append(",fechaAfiliacionAfiliado="+String.valueOf(fechaAfiliacionAfiliado));
		sb.append(",fechaDesafiliacionAfiliado="+String.valueOf(fechaDesafiliacionAfiliado));
		sb.append(",glosaArchivo="+glosaArchivo);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row3Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.tipoIdentificacionAfiliado, other.tipoIdentificacionAfiliado);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.numeroIdentificacionAfiliado, other.numeroIdentificacionAfiliado);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.primerApellidoAfiliado, other.primerApellidoAfiliado);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.primerNombreAfiliado, other.primerNombreAfiliado);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tHashInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tHashInput_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row3Struct row3 = new row3Struct();




	
	/**
	 * [tAdvancedHash_row3 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row3", false);
		start_Hash.put("tAdvancedHash_row3", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row3";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row3");
					}
				
		int tos_count_tAdvancedHash_row3 = 0;
		

			   		// connection name:row3
			   		// source node:tHashInput_1 - inputs:(after_tLoop_1) outputs:(row3,row3) | target node:tAdvancedHash_row3 - inputs:(row3) outputs:()
			   		// linked node: tMap_5 - inputs:(out1,row3) outputs:(out3)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row3 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row3Struct> tHash_Lookup_row3 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row3Struct>getLookup(matchingModeEnum_row3);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row3", tHash_Lookup_row3);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row3 begin ] stop
 */



	
	/**
	 * [tHashInput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_1", false);
		start_Hash.put("tHashInput_1", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_1";
	
	
		int tos_count_tHashInput_1 = 0;
		


int nb_line_tHashInput_1 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_1=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row1Struct> tHashFile_tHashInput_1 = mf_tHashInput_1.getAdvancedMemoryHashFile("tHashFile_MinSaludEtapa2NuevosRegistros_" + pid +"_tHashOutput_1");
if(tHashFile_tHashInput_1==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<row1Struct> iterator_tHashInput_1 = tHashFile_tHashInput_1.iterator();
while (iterator_tHashInput_1.hasNext()) {
    row1Struct next_tHashInput_1 = iterator_tHashInput_1.next();

	row3.codFuerza = next_tHashInput_1.codFuerza;
	row3.tipoDocumentoTitular = next_tHashInput_1.tipoDocumentoTitular;
	row3.numeroDocumentoTitular = next_tHashInput_1.numeroDocumentoTitular;
	row3.tipoIdentificacionAfiliado = next_tHashInput_1.tipoIdentificacionAfiliado;
	row3.numeroIdentificacionAfiliado = next_tHashInput_1.numeroIdentificacionAfiliado;
	row3.primerApellidoAfiliado = next_tHashInput_1.primerApellidoAfiliado;
	row3.segundoApellidoAfiliado = next_tHashInput_1.segundoApellidoAfiliado;
	row3.primerNombreAfiliado = next_tHashInput_1.primerNombreAfiliado;
	row3.segundoNombreAfiliado = next_tHashInput_1.segundoNombreAfiliado;
	row3.fechaNacimientoAfiliado = next_tHashInput_1.fechaNacimientoAfiliado;
	row3.generoAfiliado = next_tHashInput_1.generoAfiliado;
	row3.tipoAfiliado = next_tHashInput_1.tipoAfiliado;
	row3.codigoDepartamentoAfiliado = next_tHashInput_1.codigoDepartamentoAfiliado;
	row3.codigoMunicipioAfiliado = next_tHashInput_1.codigoMunicipioAfiliado;
	row3.fechaAfiliacionAfiliado = next_tHashInput_1.fechaAfiliacionAfiliado;
	row3.fechaDesafiliacionAfiliado = next_tHashInput_1.fechaDesafiliacionAfiliado;
	row3.glosaArchivo = next_tHashInput_1.glosaArchivo;

 



/**
 * [tHashInput_1 begin ] stop
 */
	
	/**
	 * [tHashInput_1 main ] start
	 */

	

	
	
	currentComponent="tHashInput_1";
	
	

 


	tos_count_tHashInput_1++;

/**
 * [tHashInput_1 main ] stop
 */
	
	/**
	 * [tHashInput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashInput_1";
	
	

 



/**
 * [tHashInput_1 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row3 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row3";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row3"
						
						);
					}
					


			   
			   

					row3Struct row3_HashRow = new row3Struct();
		   	   	   
				
				row3_HashRow.codFuerza = row3.codFuerza;
				
				row3_HashRow.tipoDocumentoTitular = row3.tipoDocumentoTitular;
				
				row3_HashRow.numeroDocumentoTitular = row3.numeroDocumentoTitular;
				
				row3_HashRow.tipoIdentificacionAfiliado = row3.tipoIdentificacionAfiliado;
				
				row3_HashRow.numeroIdentificacionAfiliado = row3.numeroIdentificacionAfiliado;
				
				row3_HashRow.primerApellidoAfiliado = row3.primerApellidoAfiliado;
				
				row3_HashRow.segundoApellidoAfiliado = row3.segundoApellidoAfiliado;
				
				row3_HashRow.primerNombreAfiliado = row3.primerNombreAfiliado;
				
				row3_HashRow.segundoNombreAfiliado = row3.segundoNombreAfiliado;
				
				row3_HashRow.fechaNacimientoAfiliado = row3.fechaNacimientoAfiliado;
				
				row3_HashRow.generoAfiliado = row3.generoAfiliado;
				
				row3_HashRow.tipoAfiliado = row3.tipoAfiliado;
				
				row3_HashRow.codigoDepartamentoAfiliado = row3.codigoDepartamentoAfiliado;
				
				row3_HashRow.codigoMunicipioAfiliado = row3.codigoMunicipioAfiliado;
				
				row3_HashRow.fechaAfiliacionAfiliado = row3.fechaAfiliacionAfiliado;
				
				row3_HashRow.fechaDesafiliacionAfiliado = row3.fechaDesafiliacionAfiliado;
				
				row3_HashRow.glosaArchivo = row3.glosaArchivo;
				
			tHash_Lookup_row3.put(row3_HashRow);
			
            




 


	tos_count_tAdvancedHash_row3++;

/**
 * [tAdvancedHash_row3 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row3";
	
	

 



/**
 * [tAdvancedHash_row3 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row3 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row3";
	
	

 



/**
 * [tAdvancedHash_row3 process_data_end ] stop
 */



	
	/**
	 * [tHashInput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashInput_1";
	
	

 



/**
 * [tHashInput_1 process_data_end ] stop
 */
	
	/**
	 * [tHashInput_1 end ] start
	 */

	

	
	
	currentComponent="tHashInput_1";
	
	
    

		
			nb_line_tHashInput_1++;
		}	
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_MinSaludEtapa2NuevosRegistros_" + pid +"_tHashOutput_1");
	


	globalMap.put("tHashInput_1_NB_LINE", nb_line_tHashInput_1);       

 

ok_Hash.put("tHashInput_1", true);
end_Hash.put("tHashInput_1", System.currentTimeMillis());




/**
 * [tHashInput_1 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row3 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row3";
	
	

tHash_Lookup_row3.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row3");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row3", true);
end_Hash.put("tAdvancedHash_row3", System.currentTimeMillis());




/**
 * [tAdvancedHash_row3 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tHashInput_1 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_1";
	
	

 



/**
 * [tHashInput_1 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row3 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row3";
	
	

 



/**
 * [tAdvancedHash_row3 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tHashInput_1_SUBPROCESS_STATE", 1);
	}
	


public static class row7Struct implements routines.system.IPersistableComparableLookupRow<row7Struct> {
    final static byte[] commonByteArrayLock_AFI_PRINCIPAL_MinSaludEtapa2NuevosRegistros = new byte[0];
    static byte[] commonByteArray_AFI_PRINCIPAL_MinSaludEtapa2NuevosRegistros = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public BigDecimal ID;

				public BigDecimal getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return false;
				}
				public Boolean IDIsKey(){
				    return true;
				}
				public Integer IDLength(){
				    return 22;
				}
				public Integer IDPrecision(){
				    return 0;
				}
				public String IDDefault(){
				
					return null;
				
				}
				public String IDComment(){
				
				    return "PK - Llave primaria";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public String GLOSA;

				public String getGLOSA () {
					return this.GLOSA;
				}

				public Boolean GLOSAIsNullable(){
				    return false;
				}
				public Boolean GLOSAIsKey(){
				    return false;
				}
				public Integer GLOSALength(){
				    return 6;
				}
				public Integer GLOSAPrecision(){
				    return 0;
				}
				public String GLOSADefault(){
				
					return null;
				
				}
				public String GLOSAComment(){
				
				    return "Codigo de la glosa";
				
				}
				public String GLOSAPattern(){
				
					return "";
				
				}
				public String GLOSAOriginalDbColumnName(){
				
					return "GLOSA";
				
				}

				
			    public String DESCRIPCION;

				public String getDESCRIPCION () {
					return this.DESCRIPCION;
				}

				public Boolean DESCRIPCIONIsNullable(){
				    return false;
				}
				public Boolean DESCRIPCIONIsKey(){
				    return false;
				}
				public Integer DESCRIPCIONLength(){
				    return 500;
				}
				public Integer DESCRIPCIONPrecision(){
				    return 0;
				}
				public String DESCRIPCIONDefault(){
				
					return null;
				
				}
				public String DESCRIPCIONComment(){
				
				    return "Descripcion de la glosa";
				
				}
				public String DESCRIPCIONPattern(){
				
					return "";
				
				}
				public String DESCRIPCIONOriginalDbColumnName(){
				
					return "DESCRIPCION";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.GLOSA == null) ? 0 : this.GLOSA.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row7Struct other = (row7Struct) obj;
		
						if (this.GLOSA == null) {
							if (other.GLOSA != null)
								return false;
						
						} else if (!this.GLOSA.equals(other.GLOSA))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row7Struct other) {

		other.ID = this.ID;
	            other.GLOSA = this.GLOSA;
	            other.DESCRIPCION = this.DESCRIPCION;
	            
	}

	public void copyKeysDataTo(row7Struct other) {

		other.GLOSA = this.GLOSA;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_PRINCIPAL_MinSaludEtapa2NuevosRegistros.length) {
				if(length < 1024 && commonByteArray_AFI_PRINCIPAL_MinSaludEtapa2NuevosRegistros.length == 0) {
   					commonByteArray_AFI_PRINCIPAL_MinSaludEtapa2NuevosRegistros = new byte[1024];
				} else {
   					commonByteArray_AFI_PRINCIPAL_MinSaludEtapa2NuevosRegistros = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_PRINCIPAL_MinSaludEtapa2NuevosRegistros, 0, length);
			strReturn = new String(commonByteArray_AFI_PRINCIPAL_MinSaludEtapa2NuevosRegistros, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_PRINCIPAL_MinSaludEtapa2NuevosRegistros.length) {
				if(length < 1024 && commonByteArray_AFI_PRINCIPAL_MinSaludEtapa2NuevosRegistros.length == 0) {
   					commonByteArray_AFI_PRINCIPAL_MinSaludEtapa2NuevosRegistros = new byte[1024];
				} else {
   					commonByteArray_AFI_PRINCIPAL_MinSaludEtapa2NuevosRegistros = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_PRINCIPAL_MinSaludEtapa2NuevosRegistros, 0, length);
			strReturn = new String(commonByteArray_AFI_PRINCIPAL_MinSaludEtapa2NuevosRegistros, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	
	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			unmarshaller.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private void writeString(String str, DataOutputStream dos, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_PRINCIPAL_MinSaludEtapa2NuevosRegistros) {

        	try {

        		int length = 0;
		
					this.GLOSA = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_PRINCIPAL_MinSaludEtapa2NuevosRegistros) {

        	try {

        		int length = 0;
		
					this.GLOSA = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.GLOSA,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.GLOSA,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
       			    	this.ID = (BigDecimal) ois.readObject();
					
						this.DESCRIPCION = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		
       			    	this.ID = (BigDecimal) objectIn.readObject();
					
						this.DESCRIPCION = readString(dis,objectIn);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
       			    	oos.writeObject(this.ID);
					
						writeString(this.DESCRIPCION, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
						objectOut.clearInstanceCache();
						objectOut.writeObject(this.ID);
					
						writeString(this.DESCRIPCION, dos, objectOut);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",GLOSA="+GLOSA);
		sb.append(",DESCRIPCION="+DESCRIPCION);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row7Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.GLOSA, other.GLOSA);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tHashInput_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tHashInput_3_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row7Struct row7 = new row7Struct();




	
	/**
	 * [tAdvancedHash_row7 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row7", false);
		start_Hash.put("tAdvancedHash_row7", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row7";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row7");
					}
				
		int tos_count_tAdvancedHash_row7 = 0;
		

			   		// connection name:row7
			   		// source node:tHashInput_3 - inputs:(after_tLoop_1) outputs:(row7,row7) | target node:tAdvancedHash_row7 - inputs:(row7) outputs:()
			   		// linked node: tMap_1 - inputs:(row6,row7) outputs:(out4)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row7 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row7Struct> tHash_Lookup_row7 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row7Struct>getLookup(matchingModeEnum_row7);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row7", tHash_Lookup_row7);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row7 begin ] stop
 */



	
	/**
	 * [tHashInput_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_3", false);
		start_Hash.put("tHashInput_3", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_3";
	
	
		int tos_count_tHashInput_3 = 0;
		


int nb_line_tHashInput_3 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_3=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row4Struct> tHashFile_tHashInput_3 = mf_tHashInput_3.getAdvancedMemoryHashFile("tHashFile_MinSaludEtapa2NuevosRegistros_" + pid +"_tHashOutput_3");
if(tHashFile_tHashInput_3==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<row4Struct> iterator_tHashInput_3 = tHashFile_tHashInput_3.iterator();
while (iterator_tHashInput_3.hasNext()) {
    row4Struct next_tHashInput_3 = iterator_tHashInput_3.next();

	row7.ID = next_tHashInput_3.ID;
	row7.GLOSA = next_tHashInput_3.GLOSA;
	row7.DESCRIPCION = next_tHashInput_3.DESCRIPCION;

 



/**
 * [tHashInput_3 begin ] stop
 */
	
	/**
	 * [tHashInput_3 main ] start
	 */

	

	
	
	currentComponent="tHashInput_3";
	
	

 


	tos_count_tHashInput_3++;

/**
 * [tHashInput_3 main ] stop
 */
	
	/**
	 * [tHashInput_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashInput_3";
	
	

 



/**
 * [tHashInput_3 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row7 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row7";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row7"
						
						);
					}
					


			   
			   

					row7Struct row7_HashRow = new row7Struct();
		   	   	   
				
				row7_HashRow.ID = row7.ID;
				
				row7_HashRow.GLOSA = row7.GLOSA;
				
				row7_HashRow.DESCRIPCION = row7.DESCRIPCION;
				
			tHash_Lookup_row7.put(row7_HashRow);
			
            




 


	tos_count_tAdvancedHash_row7++;

/**
 * [tAdvancedHash_row7 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row7 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row7";
	
	

 



/**
 * [tAdvancedHash_row7 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row7 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row7";
	
	

 



/**
 * [tAdvancedHash_row7 process_data_end ] stop
 */



	
	/**
	 * [tHashInput_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashInput_3";
	
	

 



/**
 * [tHashInput_3 process_data_end ] stop
 */
	
	/**
	 * [tHashInput_3 end ] start
	 */

	

	
	
	currentComponent="tHashInput_3";
	
	
    

		
			nb_line_tHashInput_3++;
		}	
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_MinSaludEtapa2NuevosRegistros_" + pid +"_tHashOutput_3");
	


	globalMap.put("tHashInput_3_NB_LINE", nb_line_tHashInput_3);       

 

ok_Hash.put("tHashInput_3", true);
end_Hash.put("tHashInput_3", System.currentTimeMillis());




/**
 * [tHashInput_3 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row7 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row7";
	
	

tHash_Lookup_row7.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row7");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row7", true);
end_Hash.put("tAdvancedHash_row7", System.currentTimeMillis());




/**
 * [tAdvancedHash_row7 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tHashInput_3 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_3";
	
	

 



/**
 * [tHashInput_3 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row7 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row7";
	
	

 



/**
 * [tAdvancedHash_row7 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tHashInput_3_SUBPROCESS_STATE", 1);
	}
	


public static class row8Struct implements routines.system.IPersistableComparableLookupRow<row8Struct> {
    final static byte[] commonByteArrayLock_AFI_PRINCIPAL_MinSaludEtapa2NuevosRegistros = new byte[0];
    static byte[] commonByteArray_AFI_PRINCIPAL_MinSaludEtapa2NuevosRegistros = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public int ID;

				public int getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return false;
				}
				public Boolean IDIsKey(){
				    return true;
				}
				public Integer IDLength(){
				    return 22;
				}
				public Integer IDPrecision(){
				    return 0;
				}
				public String IDDefault(){
				
					return "SALUDSIS\".\"ISEQ$$_100689\".nextval";
				
				}
				public String IDComment(){
				
				    return "PK- Llave primaria";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public String NOMBRE;

				public String getNOMBRE () {
					return this.NOMBRE;
				}

				public Boolean NOMBREIsNullable(){
				    return false;
				}
				public Boolean NOMBREIsKey(){
				    return false;
				}
				public Integer NOMBRELength(){
				    return 50;
				}
				public Integer NOMBREPrecision(){
				    return 0;
				}
				public String NOMBREDefault(){
				
					return null;
				
				}
				public String NOMBREComment(){
				
				    return "Nombre del tipo de archivo";
				
				}
				public String NOMBREPattern(){
				
					return "";
				
				}
				public String NOMBREOriginalDbColumnName(){
				
					return "NOMBRE";
				
				}

				
			    public Integer CODIGO;

				public Integer getCODIGO () {
					return this.CODIGO;
				}

				public Boolean CODIGOIsNullable(){
				    return true;
				}
				public Boolean CODIGOIsKey(){
				    return false;
				}
				public Integer CODIGOLength(){
				    return 22;
				}
				public Integer CODIGOPrecision(){
				    return 0;
				}
				public String CODIGODefault(){
				
					return null;
				
				}
				public String CODIGOComment(){
				
				    return "Codigo del archivo";
				
				}
				public String CODIGOPattern(){
				
					return "";
				
				}
				public String CODIGOOriginalDbColumnName(){
				
					return "CODIGO";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.CODIGO == null) ? 0 : this.CODIGO.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row8Struct other = (row8Struct) obj;
		
						if (this.CODIGO == null) {
							if (other.CODIGO != null)
								return false;
						
						} else if (!this.CODIGO.equals(other.CODIGO))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row8Struct other) {

		other.ID = this.ID;
	            other.NOMBRE = this.NOMBRE;
	            other.CODIGO = this.CODIGO;
	            
	}

	public void copyKeysDataTo(row8Struct other) {

		other.CODIGO = this.CODIGO;
	            	
	}



	
	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			unmarshaller.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private void writeString(String str, DataOutputStream dos, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_PRINCIPAL_MinSaludEtapa2NuevosRegistros) {

        	try {

        		int length = 0;
		
						this.CODIGO = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_PRINCIPAL_MinSaludEtapa2NuevosRegistros) {

        	try {

        		int length = 0;
		
						this.CODIGO = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.CODIGO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.CODIGO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
			            this.ID = dis.readInt();
					
						this.NOMBRE = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		
			            this.ID = objectIn.readInt();
					
						this.NOMBRE = readString(dis,objectIn);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
		            	dos.writeInt(this.ID);
					
						writeString(this.NOMBRE, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
					objectOut.writeInt(this.ID);
					
						writeString(this.NOMBRE, dos, objectOut);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",NOMBRE="+NOMBRE);
		sb.append(",CODIGO="+String.valueOf(CODIGO));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row8Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.CODIGO, other.CODIGO);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row8Struct row8 = new row8Struct();




	
	/**
	 * [tAdvancedHash_row8 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row8", false);
		start_Hash.put("tAdvancedHash_row8", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row8";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row8");
					}
				
		int tos_count_tAdvancedHash_row8 = 0;
		

			   		// connection name:row8
			   		// source node:tOracleInput_2 - inputs:(after_tFixedFlowInput_2) outputs:(row8,row8) | target node:tAdvancedHash_row8 - inputs:(row8) outputs:()
			   		// linked node: tMap_4 - inputs:(row9,row8) outputs:(out6)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row8 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row8Struct> tHash_Lookup_row8 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row8Struct>getLookup(matchingModeEnum_row8);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row8", tHash_Lookup_row8);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row8 begin ] stop
 */



	
	/**
	 * [tOracleInput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_2", false);
		start_Hash.put("tOracleInput_2", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_2";
	
	
		int tos_count_tOracleInput_2 = 0;
		
	


	
		    int nb_line_tOracleInput_2 = 0;
		    java.sql.Connection conn_tOracleInput_2 = null;
				conn_tOracleInput_2 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");
				
                boolean isTimeZoneNull_tOracleInput_2 = false;
				boolean isConnectionWrapped_tOracleInput_2 = !(conn_tOracleInput_2 instanceof oracle.jdbc.OracleConnection) && conn_tOracleInput_2.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tOracleInput_2 = null;
                if (isConnectionWrapped_tOracleInput_2) {
					unwrappedOraConn_tOracleInput_2 = conn_tOracleInput_2.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tOracleInput_2 != null) {
                        isTimeZoneNull_tOracleInput_2 = (unwrappedOraConn_tOracleInput_2.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tOracleInput_2 = (((oracle.jdbc.OracleConnection)conn_tOracleInput_2).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tOracleInput_2) {
					java.sql.Statement stmtGetTZ_tOracleInput_2 = conn_tOracleInput_2.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_2 = stmtGetTZ_tOracleInput_2.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_2 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tOracleInput_2.next()) {
						sessionTimezone_tOracleInput_2 = rsGetTZ_tOracleInput_2.getString(1);
					}
					if (isConnectionWrapped_tOracleInput_2 && unwrappedOraConn_tOracleInput_2 != null) {
                        unwrappedOraConn_tOracleInput_2.setSessionTimeZone(sessionTimezone_tOracleInput_2);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_2).setSessionTimeZone(sessionTimezone_tOracleInput_2);
                    }
				}
			
		    
			java.sql.Statement stmt_tOracleInput_2 = conn_tOracleInput_2.createStatement();

		    String dbquery_tOracleInput_2 = "SELECT \n	TAR.ID, \n	TAR.NOMBRE, \n	TAR.CODIGO\nFROM\n	SALUDSIS.AFI_TARCHIVOS TAR\nWHERE\n	TAR.ESTREGISTRO_ID = 1";
		    

		    globalMap.put("tOracleInput_2_QUERY",dbquery_tOracleInput_2);

		    java.sql.ResultSet rs_tOracleInput_2 = null;

		    try {
		    	rs_tOracleInput_2 = stmt_tOracleInput_2.executeQuery(dbquery_tOracleInput_2);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_2 = rs_tOracleInput_2.getMetaData();
		    	int colQtyInRs_tOracleInput_2 = rsmd_tOracleInput_2.getColumnCount();

		    String tmpContent_tOracleInput_2 = null;
		    
		    
		    while (rs_tOracleInput_2.next()) {
		        nb_line_tOracleInput_2++;
		        
							if(colQtyInRs_tOracleInput_2 < 1) {
								row8.ID = 0;
							} else {
		                          
					if(rs_tOracleInput_2.getObject(1) != null) {
						row8.ID = rs_tOracleInput_2.getInt(1);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_2 < 2) {
								row8.NOMBRE = null;
							} else {
	                         		
        	row8.NOMBRE = routines.system.JDBCUtil.getString(rs_tOracleInput_2, 2, false);
		                    }
							if(colQtyInRs_tOracleInput_2 < 3) {
								row8.CODIGO = null;
							} else {
		                          
					if(rs_tOracleInput_2.getObject(3) != null) {
						row8.CODIGO = rs_tOracleInput_2.getInt(3);
					} else {
				
						row8.CODIGO = null;
					}
		                    }
					




 



/**
 * [tOracleInput_2 begin ] stop
 */
	
	/**
	 * [tOracleInput_2 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_2";
	
	

 


	tos_count_tOracleInput_2++;

/**
 * [tOracleInput_2 main ] stop
 */
	
	/**
	 * [tOracleInput_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_2";
	
	

 



/**
 * [tOracleInput_2 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row8 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row8";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row8"
						
						);
					}
					


			   
			   

					row8Struct row8_HashRow = new row8Struct();
		   	   	   
				
				row8_HashRow.ID = row8.ID;
				
				row8_HashRow.NOMBRE = row8.NOMBRE;
				
				row8_HashRow.CODIGO = row8.CODIGO;
				
			tHash_Lookup_row8.put(row8_HashRow);
			
            




 


	tos_count_tAdvancedHash_row8++;

/**
 * [tAdvancedHash_row8 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row8 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row8";
	
	

 



/**
 * [tAdvancedHash_row8 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row8 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row8";
	
	

 



/**
 * [tAdvancedHash_row8 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_2";
	
	

 



/**
 * [tOracleInput_2 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_2 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_2";
	
	

}
}finally{
	if (rs_tOracleInput_2 != null) {
		rs_tOracleInput_2.close();
	}
	if (stmt_tOracleInput_2 != null) {
		stmt_tOracleInput_2.close();
	}
}

globalMap.put("tOracleInput_2_NB_LINE",nb_line_tOracleInput_2);
 

ok_Hash.put("tOracleInput_2", true);
end_Hash.put("tOracleInput_2", System.currentTimeMillis());




/**
 * [tOracleInput_2 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row8 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row8";
	
	

tHash_Lookup_row8.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row8");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row8", true);
end_Hash.put("tAdvancedHash_row8", System.currentTimeMillis());




/**
 * [tAdvancedHash_row8 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleInput_2 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_2";
	
	

 



/**
 * [tOracleInput_2 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row8 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row8";
	
	

 



/**
 * [tAdvancedHash_row8 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_2_SUBPROCESS_STATE", 1);
	}
	
    public String resuming_logs_dir_path = null;
    public String resuming_checkpoint_path = null;
    public String parent_part_launcher = null;
    private String resumeEntryMethodName = null;
    private boolean globalResumeTicket = false;

    public boolean watch = false;
    // portStats is null, it means don't execute the statistics
    public Integer portStats = null;
    public int portTraces = 4334;
    public String clientHost;
    public String defaultClientHost = "localhost";
    public String contextStr = "Default";
    public boolean isDefaultContext = true;
    public String pid = "0";
    public String rootPid = null;
    public String fatherPid = null;
    public String fatherNode = null;
    public long startTime = 0;
    public boolean isChildJob = false;
    public String log4jLevel = "";
    
    private boolean enableLogStash;

    private boolean execStat = true;

    private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
        protected java.util.Map<String, String> initialValue() {
            java.util.Map<String,String> threadRunResultMap = new java.util.HashMap<String, String>();
            threadRunResultMap.put("errorCode", null);
            threadRunResultMap.put("status", "");
            return threadRunResultMap;
        };
    };


    protected PropertiesWithType context_param = new PropertiesWithType();
    public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

    public String status= "";
    
    
    private final static java.util.Properties jobInfo = new java.util.Properties();
    private final static java.util.Map<String,String> mdcInfo = new java.util.HashMap<>();
    private final static java.util.concurrent.atomic.AtomicLong subJobPidCounter = new java.util.concurrent.atomic.AtomicLong();


    public static void main(String[] args){
        final MinSaludEtapa2NuevosRegistros MinSaludEtapa2NuevosRegistrosClass = new MinSaludEtapa2NuevosRegistros();

        int exitCode = MinSaludEtapa2NuevosRegistrosClass.runJobInTOS(args);

        System.exit(exitCode);
    }
	

	
	
	private void getjobInfo() {
		final String TEMPLATE_PATH = "src/main/templates/jobInfo_template.properties";
		final String BUILD_PATH = "../jobInfo.properties";
		final String path = this.getClass().getResource("").getPath();
		if(path.lastIndexOf("target") > 0) {
			final java.io.File templateFile = new java.io.File(
					path.substring(0, path.lastIndexOf("target")).concat(TEMPLATE_PATH));
			if (templateFile.exists()) {
				readJobInfo(templateFile);
				return;
			}
		}
			readJobInfo(new java.io.File(BUILD_PATH));
	}

    private void readJobInfo(java.io.File jobInfoFile){
	
        if(jobInfoFile.exists()) {
            try (java.io.InputStream is = new java.io.FileInputStream(jobInfoFile)) {
            	jobInfo.load(is);
            } catch (IOException e) {
            	 
                
            }
        }
    }


    public String[][] runJob(String[] args) {

        int exitCode = runJobInTOS(args);
        String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

        return bufferValue;
    }

    public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;
    	
        return hastBufferOutput;
    }

    public int runJobInTOS(String[] args) {
	   	// reset status
	   	status = "";
	   	
        String lastStr = "";
        for (String arg : args) {
            if (arg.equalsIgnoreCase("--context_param")) {
                lastStr = arg;
            } else if (lastStr.equals("")) {
                evalParam(arg);
            } else {
                evalParam(lastStr + " " + arg);
                lastStr = "";
            }
        }
        enableLogStash = "true".equalsIgnoreCase(System.getProperty("audit.enabled"));


		
		

        if(clientHost == null) {
            clientHost = defaultClientHost;
        }

        if(pid == null || "0".equals(pid)) {
            pid = TalendString.getAsciiRandomString(6);
        }


        if (rootPid==null) {
            rootPid = pid;
        }


        if (fatherPid==null) {
            fatherPid = pid;
        }else{
            isChildJob = true;
        }

        if (portStats != null) {
            // portStats = -1; //for testing
            if (portStats < 0 || portStats > 65535) {
                // issue:10869, the portStats is invalid, so this client socket can't open
                System.err.println("The statistics socket port " + portStats + " is invalid.");
                execStat = false;
            }
        } else {
            execStat = false;
        }
        boolean inOSGi = routines.system.BundleUtils.inOSGi();

        try {
            java.util.Dictionary<String, Object> jobProperties = null;
            if (inOSGi) {
                jobProperties = routines.system.BundleUtils.getJobProperties(jobName);
    
                if (jobProperties != null && jobProperties.get("context") != null) {
                    contextStr = (String)jobProperties.get("context");
                }
            }
            //call job/subjob with an existing context, like: --context=production. if without this parameter, there will use the default context instead.
            java.io.InputStream inContext = MinSaludEtapa2NuevosRegistros.class.getClassLoader().getResourceAsStream("afi_principal/minsaludetapa2nuevosregistros_1_0/contexts/" + contextStr + ".properties");
            if (inContext == null) {
                inContext = MinSaludEtapa2NuevosRegistros.class.getClassLoader().getResourceAsStream("config/contexts/" + contextStr + ".properties");
            }
            if (inContext != null) {
                try {
                    //defaultProps is in order to keep the original context value
                    if(context != null && context.isEmpty()) {
    	                defaultProps.load(inContext);
    	                if (inOSGi && jobProperties != null) {
                             java.util.Enumeration<String> keys = jobProperties.keys();
                             while (keys.hasMoreElements()) {
                                 String propKey = keys.nextElement();
                                 if (defaultProps.containsKey(propKey)) {
                                     defaultProps.put(propKey, (String) jobProperties.get(propKey));
                                 }
                             }
    	                }
    	                context = new ContextProperties(defaultProps);
                    }
                } finally {
                    inContext.close();
                }
            } else if (!isDefaultContext) {
                //print info and job continue to run, for case: context_param is not empty.
                System.err.println("Could not find the context " + contextStr);
            }
            
            if(!context_param.isEmpty()) {
                context.putAll(context_param);
				//set types for params from parentJobs
				for (Object key: context_param.keySet()){
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
            }
            class ContextProcessing {
                private void processContext_0() {
                        context.setContextType("oracle_AdditionalParams", "id_String");
                        if(context.getStringValue("oracle_AdditionalParams") == null) {
                            context.oracle_AdditionalParams = null;
                        } else {
                            context.oracle_AdditionalParams=(String) context.getProperty("oracle_AdditionalParams");
                        }
                        context.setContextType("oracle_ServiceName", "id_String");
                        if(context.getStringValue("oracle_ServiceName") == null) {
                            context.oracle_ServiceName = null;
                        } else {
                            context.oracle_ServiceName=(String) context.getProperty("oracle_ServiceName");
                        }
                        context.setContextType("oracle_Host", "id_String");
                        if(context.getStringValue("oracle_Host") == null) {
                            context.oracle_Host = null;
                        } else {
                            context.oracle_Host=(String) context.getProperty("oracle_Host");
                        }
                        context.setContextType("oracle_Schema", "id_String");
                        if(context.getStringValue("oracle_Schema") == null) {
                            context.oracle_Schema = null;
                        } else {
                            context.oracle_Schema=(String) context.getProperty("oracle_Schema");
                        }
                        context.setContextType("oracle_Password", "id_String");
                        if(context.getStringValue("oracle_Password") == null) {
                            context.oracle_Password = null;
                        } else {
                            context.oracle_Password=(String) context.getProperty("oracle_Password");
                        }
                        context.setContextType("oracle_User", "id_String");
                        if(context.getStringValue("oracle_User") == null) {
                            context.oracle_User = null;
                        } else {
                            context.oracle_User=(String) context.getProperty("oracle_User");
                        }
                        context.setContextType("oracle_Port", "id_String");
                        if(context.getStringValue("oracle_Port") == null) {
                            context.oracle_Port = null;
                        } else {
                            context.oracle_Port=(String) context.getProperty("oracle_Port");
                        }
                        context.setContextType("oracle_Sid", "id_String");
                        if(context.getStringValue("oracle_Sid") == null) {
                            context.oracle_Sid = null;
                        } else {
                            context.oracle_Sid=(String) context.getProperty("oracle_Sid");
                        }
                        context.setContextType("infoNombreArchivo", "id_String");
                        if(context.getStringValue("infoNombreArchivo") == null) {
                            context.infoNombreArchivo = null;
                        } else {
                            context.infoNombreArchivo=(String) context.getProperty("infoNombreArchivo");
                        }
                        context.setContextType("infoUsuarioIdArchivo", "id_Integer");
                        if(context.getStringValue("infoUsuarioIdArchivo") == null) {
                            context.infoUsuarioIdArchivo = null;
                        } else {
                            try{
                                context.infoUsuarioIdArchivo=routines.system.ParserUtils.parseTo_Integer (context.getProperty("infoUsuarioIdArchivo"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "infoUsuarioIdArchivo", e.getMessage()));
                                context.infoUsuarioIdArchivo=null;
                            }
                        }
                        context.setContextType("infoIdArchivo", "id_Integer");
                        if(context.getStringValue("infoIdArchivo") == null) {
                            context.infoIdArchivo = null;
                        } else {
                            try{
                                context.infoIdArchivo=routines.system.ParserUtils.parseTo_Integer (context.getProperty("infoIdArchivo"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "infoIdArchivo", e.getMessage()));
                                context.infoIdArchivo=null;
                            }
                        }
                        context.setContextType("infoTipoArchivo", "id_Integer");
                        if(context.getStringValue("infoTipoArchivo") == null) {
                            context.infoTipoArchivo = null;
                        } else {
                            try{
                                context.infoTipoArchivo=routines.system.ParserUtils.parseTo_Integer (context.getProperty("infoTipoArchivo"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "infoTipoArchivo", e.getMessage()));
                                context.infoTipoArchivo=null;
                            }
                        }
                        context.setContextType("tipoJobProceso", "id_Integer");
                        if(context.getStringValue("tipoJobProceso") == null) {
                            context.tipoJobProceso = null;
                        } else {
                            try{
                                context.tipoJobProceso=routines.system.ParserUtils.parseTo_Integer (context.getProperty("tipoJobProceso"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "tipoJobProceso", e.getMessage()));
                                context.tipoJobProceso=null;
                            }
                        }
                        context.setContextType("idProceso", "id_Integer");
                        if(context.getStringValue("idProceso") == null) {
                            context.idProceso = null;
                        } else {
                            try{
                                context.idProceso=routines.system.ParserUtils.parseTo_Integer (context.getProperty("idProceso"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "idProceso", e.getMessage()));
                                context.idProceso=null;
                            }
                        }
                        context.setContextType("tipoProceso", "id_Integer");
                        if(context.getStringValue("tipoProceso") == null) {
                            context.tipoProceso = null;
                        } else {
                            try{
                                context.tipoProceso=routines.system.ParserUtils.parseTo_Integer (context.getProperty("tipoProceso"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "tipoProceso", e.getMessage()));
                                context.tipoProceso=null;
                            }
                        }
                        context.setContextType("descripcionProceso", "id_String");
                        if(context.getStringValue("descripcionProceso") == null) {
                            context.descripcionProceso = null;
                        } else {
                            context.descripcionProceso=(String) context.getProperty("descripcionProceso");
                        }
                        context.setContextType("fileSystem_Path", "id_String");
                        if(context.getStringValue("fileSystem_Path") == null) {
                            context.fileSystem_Path = null;
                        } else {
                            context.fileSystem_Path=(String) context.getProperty("fileSystem_Path");
                        }
                        context.setContextType("fileSystem_Area", "id_String");
                        if(context.getStringValue("fileSystem_Area") == null) {
                            context.fileSystem_Area = null;
                        } else {
                            context.fileSystem_Area=(String) context.getProperty("fileSystem_Area");
                        }
                        context.setContextType("auxAumentoRegistros", "id_Integer");
                        if(context.getStringValue("auxAumentoRegistros") == null) {
                            context.auxAumentoRegistros = null;
                        } else {
                            try{
                                context.auxAumentoRegistros=routines.system.ParserUtils.parseTo_Integer (context.getProperty("auxAumentoRegistros"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "auxAumentoRegistros", e.getMessage()));
                                context.auxAumentoRegistros=null;
                            }
                        }
                        context.setContextType("archivoConfiguracion", "id_String");
                        if(context.getStringValue("archivoConfiguracion") == null) {
                            context.archivoConfiguracion = null;
                        } else {
                            context.archivoConfiguracion=(String) context.getProperty("archivoConfiguracion");
                        }
                        context.setContextType("infoConteoRegistros", "id_Integer");
                        if(context.getStringValue("infoConteoRegistros") == null) {
                            context.infoConteoRegistros = null;
                        } else {
                            try{
                                context.infoConteoRegistros=routines.system.ParserUtils.parseTo_Integer (context.getProperty("infoConteoRegistros"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "infoConteoRegistros", e.getMessage()));
                                context.infoConteoRegistros=null;
                            }
                        }
                        context.setContextType("auxPosicionRegistros", "id_Integer");
                        if(context.getStringValue("auxPosicionRegistros") == null) {
                            context.auxPosicionRegistros = null;
                        } else {
                            try{
                                context.auxPosicionRegistros=routines.system.ParserUtils.parseTo_Integer (context.getProperty("auxPosicionRegistros"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "auxPosicionRegistros", e.getMessage()));
                                context.auxPosicionRegistros=null;
                            }
                        }
                        context.setContextType("archivoSalida", "id_String");
                        if(context.getStringValue("archivoSalida") == null) {
                            context.archivoSalida = null;
                        } else {
                            context.archivoSalida=(String) context.getProperty("archivoSalida");
                        }
                        context.setContextType("estArchivoErrorArchivo", "id_Integer");
                        if(context.getStringValue("estArchivoErrorArchivo") == null) {
                            context.estArchivoErrorArchivo = null;
                        } else {
                            try{
                                context.estArchivoErrorArchivo=routines.system.ParserUtils.parseTo_Integer (context.getProperty("estArchivoErrorArchivo"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "estArchivoErrorArchivo", e.getMessage()));
                                context.estArchivoErrorArchivo=null;
                            }
                        }
                        context.setContextType("estArchivoEnProceso", "id_Integer");
                        if(context.getStringValue("estArchivoEnProceso") == null) {
                            context.estArchivoEnProceso = null;
                        } else {
                            try{
                                context.estArchivoEnProceso=routines.system.ParserUtils.parseTo_Integer (context.getProperty("estArchivoEnProceso"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "estArchivoEnProceso", e.getMessage()));
                                context.estArchivoEnProceso=null;
                            }
                        }
                        context.setContextType("estArchivoErrorProcesamiento", "id_Integer");
                        if(context.getStringValue("estArchivoErrorProcesamiento") == null) {
                            context.estArchivoErrorProcesamiento = null;
                        } else {
                            try{
                                context.estArchivoErrorProcesamiento=routines.system.ParserUtils.parseTo_Integer (context.getProperty("estArchivoErrorProcesamiento"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "estArchivoErrorProcesamiento", e.getMessage()));
                                context.estArchivoErrorProcesamiento=null;
                            }
                        }
                        context.setContextType("estArchivoProcesado", "id_Integer");
                        if(context.getStringValue("estArchivoProcesado") == null) {
                            context.estArchivoProcesado = null;
                        } else {
                            try{
                                context.estArchivoProcesado=routines.system.ParserUtils.parseTo_Integer (context.getProperty("estArchivoProcesado"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "estArchivoProcesado", e.getMessage()));
                                context.estArchivoProcesado=null;
                            }
                        }
                        context.setContextType("estArchivoPausado", "id_Integer");
                        if(context.getStringValue("estArchivoPausado") == null) {
                            context.estArchivoPausado = null;
                        } else {
                            try{
                                context.estArchivoPausado=routines.system.ParserUtils.parseTo_Integer (context.getProperty("estArchivoPausado"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "estArchivoPausado", e.getMessage()));
                                context.estArchivoPausado=null;
                            }
                        }
                        context.setContextType("estArchivoInactivo", "id_Integer");
                        if(context.getStringValue("estArchivoInactivo") == null) {
                            context.estArchivoInactivo = null;
                        } else {
                            try{
                                context.estArchivoInactivo=routines.system.ParserUtils.parseTo_Integer (context.getProperty("estArchivoInactivo"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "estArchivoInactivo", e.getMessage()));
                                context.estArchivoInactivo=null;
                            }
                        }
                        context.setContextType("estArchivoCancelado", "id_Integer");
                        if(context.getStringValue("estArchivoCancelado") == null) {
                            context.estArchivoCancelado = null;
                        } else {
                            try{
                                context.estArchivoCancelado=routines.system.ParserUtils.parseTo_Integer (context.getProperty("estArchivoCancelado"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "estArchivoCancelado", e.getMessage()));
                                context.estArchivoCancelado=null;
                            }
                        }
                        context.setContextType("estArchivoActivo", "id_Integer");
                        if(context.getStringValue("estArchivoActivo") == null) {
                            context.estArchivoActivo = null;
                        } else {
                            try{
                                context.estArchivoActivo=routines.system.ParserUtils.parseTo_Integer (context.getProperty("estArchivoActivo"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "estArchivoActivo", e.getMessage()));
                                context.estArchivoActivo=null;
                            }
                        }
                        context.setContextType("tipoArchivoMinSaludEtapa3MultiafiliacionGenerado", "id_Integer");
                        if(context.getStringValue("tipoArchivoMinSaludEtapa3MultiafiliacionGenerado") == null) {
                            context.tipoArchivoMinSaludEtapa3MultiafiliacionGenerado = null;
                        } else {
                            try{
                                context.tipoArchivoMinSaludEtapa3MultiafiliacionGenerado=routines.system.ParserUtils.parseTo_Integer (context.getProperty("tipoArchivoMinSaludEtapa3MultiafiliacionGenerado"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "tipoArchivoMinSaludEtapa3MultiafiliacionGenerado", e.getMessage()));
                                context.tipoArchivoMinSaludEtapa3MultiafiliacionGenerado=null;
                            }
                        }
                        context.setContextType("tipoArchivoMinSaludEtapa2NuevosRegistros", "id_Integer");
                        if(context.getStringValue("tipoArchivoMinSaludEtapa2NuevosRegistros") == null) {
                            context.tipoArchivoMinSaludEtapa2NuevosRegistros = null;
                        } else {
                            try{
                                context.tipoArchivoMinSaludEtapa2NuevosRegistros=routines.system.ParserUtils.parseTo_Integer (context.getProperty("tipoArchivoMinSaludEtapa2NuevosRegistros"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "tipoArchivoMinSaludEtapa2NuevosRegistros", e.getMessage()));
                                context.tipoArchivoMinSaludEtapa2NuevosRegistros=null;
                            }
                        }
                        context.setContextType("tipoArchivoEntesTerritoriales", "id_Integer");
                        if(context.getStringValue("tipoArchivoEntesTerritoriales") == null) {
                            context.tipoArchivoEntesTerritoriales = null;
                        } else {
                            try{
                                context.tipoArchivoEntesTerritoriales=routines.system.ParserUtils.parseTo_Integer (context.getProperty("tipoArchivoEntesTerritoriales"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "tipoArchivoEntesTerritoriales", e.getMessage()));
                                context.tipoArchivoEntesTerritoriales=null;
                            }
                        }
                        context.setContextType("tipoArchivoMinSaludEtapa2Novedades", "id_Integer");
                        if(context.getStringValue("tipoArchivoMinSaludEtapa2Novedades") == null) {
                            context.tipoArchivoMinSaludEtapa2Novedades = null;
                        } else {
                            try{
                                context.tipoArchivoMinSaludEtapa2Novedades=routines.system.ParserUtils.parseTo_Integer (context.getProperty("tipoArchivoMinSaludEtapa2Novedades"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "tipoArchivoMinSaludEtapa2Novedades", e.getMessage()));
                                context.tipoArchivoMinSaludEtapa2Novedades=null;
                            }
                        }
                        context.setContextType("tipoArchivoMinSaludEtapa2NovedadesGenerado", "id_Integer");
                        if(context.getStringValue("tipoArchivoMinSaludEtapa2NovedadesGenerado") == null) {
                            context.tipoArchivoMinSaludEtapa2NovedadesGenerado = null;
                        } else {
                            try{
                                context.tipoArchivoMinSaludEtapa2NovedadesGenerado=routines.system.ParserUtils.parseTo_Integer (context.getProperty("tipoArchivoMinSaludEtapa2NovedadesGenerado"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "tipoArchivoMinSaludEtapa2NovedadesGenerado", e.getMessage()));
                                context.tipoArchivoMinSaludEtapa2NovedadesGenerado=null;
                            }
                        }
                        context.setContextType("tipoArchivoMinSaludEtapa2NuevosRegistrosGenerado", "id_Integer");
                        if(context.getStringValue("tipoArchivoMinSaludEtapa2NuevosRegistrosGenerado") == null) {
                            context.tipoArchivoMinSaludEtapa2NuevosRegistrosGenerado = null;
                        } else {
                            try{
                                context.tipoArchivoMinSaludEtapa2NuevosRegistrosGenerado=routines.system.ParserUtils.parseTo_Integer (context.getProperty("tipoArchivoMinSaludEtapa2NuevosRegistrosGenerado"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "tipoArchivoMinSaludEtapa2NuevosRegistrosGenerado", e.getMessage()));
                                context.tipoArchivoMinSaludEtapa2NuevosRegistrosGenerado=null;
                            }
                        }
                        context.setContextType("tipoArchivoMinSaludEtapa3Multiafiliacion", "id_Integer");
                        if(context.getStringValue("tipoArchivoMinSaludEtapa3Multiafiliacion") == null) {
                            context.tipoArchivoMinSaludEtapa3Multiafiliacion = null;
                        } else {
                            try{
                                context.tipoArchivoMinSaludEtapa3Multiafiliacion=routines.system.ParserUtils.parseTo_Integer (context.getProperty("tipoArchivoMinSaludEtapa3Multiafiliacion"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "tipoArchivoMinSaludEtapa3Multiafiliacion", e.getMessage()));
                                context.tipoArchivoMinSaludEtapa3Multiafiliacion=null;
                            }
                        }
                        context.setContextType("tipoArchivoFedevidaGenerado", "id_Integer");
                        if(context.getStringValue("tipoArchivoFedevidaGenerado") == null) {
                            context.tipoArchivoFedevidaGenerado = null;
                        } else {
                            try{
                                context.tipoArchivoFedevidaGenerado=routines.system.ParserUtils.parseTo_Integer (context.getProperty("tipoArchivoFedevidaGenerado"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "tipoArchivoFedevidaGenerado", e.getMessage()));
                                context.tipoArchivoFedevidaGenerado=null;
                            }
                        }
                        context.setContextType("tipoArchivoEntesGenerado", "id_Integer");
                        if(context.getStringValue("tipoArchivoEntesGenerado") == null) {
                            context.tipoArchivoEntesGenerado = null;
                        } else {
                            try{
                                context.tipoArchivoEntesGenerado=routines.system.ParserUtils.parseTo_Integer (context.getProperty("tipoArchivoEntesGenerado"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "tipoArchivoEntesGenerado", e.getMessage()));
                                context.tipoArchivoEntesGenerado=null;
                            }
                        }
                        context.setContextType("tipoArchivoFedevida", "id_Integer");
                        if(context.getStringValue("tipoArchivoFedevida") == null) {
                            context.tipoArchivoFedevida = null;
                        } else {
                            try{
                                context.tipoArchivoFedevida=routines.system.ParserUtils.parseTo_Integer (context.getProperty("tipoArchivoFedevida"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "tipoArchivoFedevida", e.getMessage()));
                                context.tipoArchivoFedevida=null;
                            }
                        }
                        context.setContextType("outCodigo", "id_Boolean");
                        if(context.getStringValue("outCodigo") == null) {
                            context.outCodigo = null;
                        } else {
                            try{
                                context.outCodigo=routines.system.ParserUtils.parseTo_Boolean (context.getProperty("outCodigo"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "outCodigo", e.getMessage()));
                                context.outCodigo=null;
                            }
                        }
                        context.setContextType("mail_PasswordMail", "id_String");
                        if(context.getStringValue("mail_PasswordMail") == null) {
                            context.mail_PasswordMail = null;
                        } else {
                            context.mail_PasswordMail=(String) context.getProperty("mail_PasswordMail");
                        }
                        context.setContextType("mail_SMTPPort", "id_String");
                        if(context.getStringValue("mail_SMTPPort") == null) {
                            context.mail_SMTPPort = null;
                        } else {
                            context.mail_SMTPPort=(String) context.getProperty("mail_SMTPPort");
                        }
                        context.setContextType("mail_UsernameMail", "id_String");
                        if(context.getStringValue("mail_UsernameMail") == null) {
                            context.mail_UsernameMail = null;
                        } else {
                            context.mail_UsernameMail=(String) context.getProperty("mail_UsernameMail");
                        }
                        context.setContextType("mail_SMTPHost", "id_String");
                        if(context.getStringValue("mail_SMTPHost") == null) {
                            context.mail_SMTPHost = null;
                        } else {
                            context.mail_SMTPHost=(String) context.getProperty("mail_SMTPHost");
                        }
                } 
                public void processAllContext() {
                        processContext_0();
                }
            }

            new ContextProcessing().processAllContext();
        } catch (java.io.IOException ie) {
            System.err.println("Could not load context "+contextStr);
            ie.printStackTrace();
        }

        // get context value from parent directly
        if (parentContextMap != null && !parentContextMap.isEmpty()) {if (parentContextMap.containsKey("oracle_AdditionalParams")) {
                context.oracle_AdditionalParams = (String) parentContextMap.get("oracle_AdditionalParams");
            }if (parentContextMap.containsKey("oracle_ServiceName")) {
                context.oracle_ServiceName = (String) parentContextMap.get("oracle_ServiceName");
            }if (parentContextMap.containsKey("oracle_Host")) {
                context.oracle_Host = (String) parentContextMap.get("oracle_Host");
            }if (parentContextMap.containsKey("oracle_Schema")) {
                context.oracle_Schema = (String) parentContextMap.get("oracle_Schema");
            }if (parentContextMap.containsKey("oracle_Password")) {
                context.oracle_Password = (String) parentContextMap.get("oracle_Password");
            }if (parentContextMap.containsKey("oracle_User")) {
                context.oracle_User = (String) parentContextMap.get("oracle_User");
            }if (parentContextMap.containsKey("oracle_Port")) {
                context.oracle_Port = (String) parentContextMap.get("oracle_Port");
            }if (parentContextMap.containsKey("oracle_Sid")) {
                context.oracle_Sid = (String) parentContextMap.get("oracle_Sid");
            }if (parentContextMap.containsKey("infoNombreArchivo")) {
                context.infoNombreArchivo = (String) parentContextMap.get("infoNombreArchivo");
            }if (parentContextMap.containsKey("infoUsuarioIdArchivo")) {
                context.infoUsuarioIdArchivo = (Integer) parentContextMap.get("infoUsuarioIdArchivo");
            }if (parentContextMap.containsKey("infoIdArchivo")) {
                context.infoIdArchivo = (Integer) parentContextMap.get("infoIdArchivo");
            }if (parentContextMap.containsKey("infoTipoArchivo")) {
                context.infoTipoArchivo = (Integer) parentContextMap.get("infoTipoArchivo");
            }if (parentContextMap.containsKey("tipoJobProceso")) {
                context.tipoJobProceso = (Integer) parentContextMap.get("tipoJobProceso");
            }if (parentContextMap.containsKey("idProceso")) {
                context.idProceso = (Integer) parentContextMap.get("idProceso");
            }if (parentContextMap.containsKey("tipoProceso")) {
                context.tipoProceso = (Integer) parentContextMap.get("tipoProceso");
            }if (parentContextMap.containsKey("descripcionProceso")) {
                context.descripcionProceso = (String) parentContextMap.get("descripcionProceso");
            }if (parentContextMap.containsKey("fileSystem_Path")) {
                context.fileSystem_Path = (String) parentContextMap.get("fileSystem_Path");
            }if (parentContextMap.containsKey("fileSystem_Area")) {
                context.fileSystem_Area = (String) parentContextMap.get("fileSystem_Area");
            }if (parentContextMap.containsKey("auxAumentoRegistros")) {
                context.auxAumentoRegistros = (Integer) parentContextMap.get("auxAumentoRegistros");
            }if (parentContextMap.containsKey("archivoConfiguracion")) {
                context.archivoConfiguracion = (String) parentContextMap.get("archivoConfiguracion");
            }if (parentContextMap.containsKey("infoConteoRegistros")) {
                context.infoConteoRegistros = (Integer) parentContextMap.get("infoConteoRegistros");
            }if (parentContextMap.containsKey("auxPosicionRegistros")) {
                context.auxPosicionRegistros = (Integer) parentContextMap.get("auxPosicionRegistros");
            }if (parentContextMap.containsKey("archivoSalida")) {
                context.archivoSalida = (String) parentContextMap.get("archivoSalida");
            }if (parentContextMap.containsKey("estArchivoErrorArchivo")) {
                context.estArchivoErrorArchivo = (Integer) parentContextMap.get("estArchivoErrorArchivo");
            }if (parentContextMap.containsKey("estArchivoEnProceso")) {
                context.estArchivoEnProceso = (Integer) parentContextMap.get("estArchivoEnProceso");
            }if (parentContextMap.containsKey("estArchivoErrorProcesamiento")) {
                context.estArchivoErrorProcesamiento = (Integer) parentContextMap.get("estArchivoErrorProcesamiento");
            }if (parentContextMap.containsKey("estArchivoProcesado")) {
                context.estArchivoProcesado = (Integer) parentContextMap.get("estArchivoProcesado");
            }if (parentContextMap.containsKey("estArchivoPausado")) {
                context.estArchivoPausado = (Integer) parentContextMap.get("estArchivoPausado");
            }if (parentContextMap.containsKey("estArchivoInactivo")) {
                context.estArchivoInactivo = (Integer) parentContextMap.get("estArchivoInactivo");
            }if (parentContextMap.containsKey("estArchivoCancelado")) {
                context.estArchivoCancelado = (Integer) parentContextMap.get("estArchivoCancelado");
            }if (parentContextMap.containsKey("estArchivoActivo")) {
                context.estArchivoActivo = (Integer) parentContextMap.get("estArchivoActivo");
            }if (parentContextMap.containsKey("tipoArchivoMinSaludEtapa3MultiafiliacionGenerado")) {
                context.tipoArchivoMinSaludEtapa3MultiafiliacionGenerado = (Integer) parentContextMap.get("tipoArchivoMinSaludEtapa3MultiafiliacionGenerado");
            }if (parentContextMap.containsKey("tipoArchivoMinSaludEtapa2NuevosRegistros")) {
                context.tipoArchivoMinSaludEtapa2NuevosRegistros = (Integer) parentContextMap.get("tipoArchivoMinSaludEtapa2NuevosRegistros");
            }if (parentContextMap.containsKey("tipoArchivoEntesTerritoriales")) {
                context.tipoArchivoEntesTerritoriales = (Integer) parentContextMap.get("tipoArchivoEntesTerritoriales");
            }if (parentContextMap.containsKey("tipoArchivoMinSaludEtapa2Novedades")) {
                context.tipoArchivoMinSaludEtapa2Novedades = (Integer) parentContextMap.get("tipoArchivoMinSaludEtapa2Novedades");
            }if (parentContextMap.containsKey("tipoArchivoMinSaludEtapa2NovedadesGenerado")) {
                context.tipoArchivoMinSaludEtapa2NovedadesGenerado = (Integer) parentContextMap.get("tipoArchivoMinSaludEtapa2NovedadesGenerado");
            }if (parentContextMap.containsKey("tipoArchivoMinSaludEtapa2NuevosRegistrosGenerado")) {
                context.tipoArchivoMinSaludEtapa2NuevosRegistrosGenerado = (Integer) parentContextMap.get("tipoArchivoMinSaludEtapa2NuevosRegistrosGenerado");
            }if (parentContextMap.containsKey("tipoArchivoMinSaludEtapa3Multiafiliacion")) {
                context.tipoArchivoMinSaludEtapa3Multiafiliacion = (Integer) parentContextMap.get("tipoArchivoMinSaludEtapa3Multiafiliacion");
            }if (parentContextMap.containsKey("tipoArchivoFedevidaGenerado")) {
                context.tipoArchivoFedevidaGenerado = (Integer) parentContextMap.get("tipoArchivoFedevidaGenerado");
            }if (parentContextMap.containsKey("tipoArchivoEntesGenerado")) {
                context.tipoArchivoEntesGenerado = (Integer) parentContextMap.get("tipoArchivoEntesGenerado");
            }if (parentContextMap.containsKey("tipoArchivoFedevida")) {
                context.tipoArchivoFedevida = (Integer) parentContextMap.get("tipoArchivoFedevida");
            }if (parentContextMap.containsKey("outCodigo")) {
                context.outCodigo = (Boolean) parentContextMap.get("outCodigo");
            }if (parentContextMap.containsKey("mail_PasswordMail")) {
                context.mail_PasswordMail = (String) parentContextMap.get("mail_PasswordMail");
            }if (parentContextMap.containsKey("mail_SMTPPort")) {
                context.mail_SMTPPort = (String) parentContextMap.get("mail_SMTPPort");
            }if (parentContextMap.containsKey("mail_UsernameMail")) {
                context.mail_UsernameMail = (String) parentContextMap.get("mail_UsernameMail");
            }if (parentContextMap.containsKey("mail_SMTPHost")) {
                context.mail_SMTPHost = (String) parentContextMap.get("mail_SMTPHost");
            }
        }

        //Resume: init the resumeUtil
        resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
        resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
        resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
        //Resume: jobStart
        resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","","","",resumeUtil.convertToJsonText(context,ContextProperties.class,parametersToEncrypt));


if(execStat) {
    try {
        runStat.openSocket(!isChildJob);
        runStat.setAllPID(rootPid, fatherPid, pid, jobName);
        runStat.startThreadStat(clientHost, portStats);
        runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
    } catch (java.io.IOException ioException) {
        ioException.printStackTrace();
    }
}



	
	    java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
	    globalMap.put("concurrentHashMap", concurrentHashMap);
	

    long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
    long endUsedMemory = 0;
    long end = 0;

    startTime = System.currentTimeMillis();


this.globalResumeTicket = true;//to run tPreJob

try {
errorCode = null;tPrejob_2Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tPrejob_2) {
globalMap.put("tPrejob_2_SUBPROCESS_STATE", -1);

e_tPrejob_2.printStackTrace();

}




this.globalResumeTicket = false;//to run others jobs

try {
errorCode = null;tFileExist_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tFileExist_1) {
globalMap.put("tFileExist_1_SUBPROCESS_STATE", -1);

e_tFileExist_1.printStackTrace();

}

this.globalResumeTicket = true;//to run tPostJob

try {
errorCode = null;tPostjob_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tPostjob_1) {
globalMap.put("tPostjob_1_SUBPROCESS_STATE", -1);

e_tPostjob_1.printStackTrace();

}



        end = System.currentTimeMillis();

        if (watch) {
            System.out.println((end-startTime)+" milliseconds");
        }

        endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
        if (false) {
            System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : MinSaludEtapa2NuevosRegistros");
        }



if (execStat) {
    runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
    runStat.stopThreadStat();
}
    int returnCode = 0;


    if(errorCode == null) {
         returnCode = status != null && status.equals("failure") ? 1 : 0;
    } else {
         returnCode = errorCode.intValue();
    }
    resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","" + returnCode,"","","");
    resumeUtil.flush();


    return returnCode;

  }

    // only for OSGi env
    public void destroy() {
    closeSqlDbConnections();


    }



    private void closeSqlDbConnections() {
        try {
            Object obj_conn;
            obj_conn = globalMap.remove("conn_tOracleConnection_1");
            if (null != obj_conn) {
                ((java.sql.Connection) obj_conn).close();
            }
        } catch (java.lang.Exception e) {
        }
    }











    private java.util.Map<String, Object> getSharedConnections4REST() {
        java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();
            connections.put("conn_tOracleConnection_1", globalMap.get("conn_tOracleConnection_1"));






        return connections;
    }

    private void evalParam(String arg) {
        if (arg.startsWith("--resuming_logs_dir_path")) {
            resuming_logs_dir_path = arg.substring(25);
        } else if (arg.startsWith("--resuming_checkpoint_path")) {
            resuming_checkpoint_path = arg.substring(27);
        } else if (arg.startsWith("--parent_part_launcher")) {
            parent_part_launcher = arg.substring(23);
        } else if (arg.startsWith("--watch")) {
            watch = true;
        } else if (arg.startsWith("--stat_port=")) {
            String portStatsStr = arg.substring(12);
            if (portStatsStr != null && !portStatsStr.equals("null")) {
                portStats = Integer.parseInt(portStatsStr);
            }
        } else if (arg.startsWith("--trace_port=")) {
            portTraces = Integer.parseInt(arg.substring(13));
        } else if (arg.startsWith("--client_host=")) {
            clientHost = arg.substring(14);
        } else if (arg.startsWith("--context=")) {
            contextStr = arg.substring(10);
            isDefaultContext = false;
        } else if (arg.startsWith("--father_pid=")) {
            fatherPid = arg.substring(13);
        } else if (arg.startsWith("--root_pid=")) {
            rootPid = arg.substring(11);
        } else if (arg.startsWith("--father_node=")) {
            fatherNode = arg.substring(14);
        } else if (arg.startsWith("--pid=")) {
            pid = arg.substring(6);
        } else if (arg.startsWith("--context_type")) {
            String keyValue = arg.substring(15);
			int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.setContextType(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }

            }

		} else if (arg.startsWith("--context_param")) {
            String keyValue = arg.substring(16);
            int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }
            }
        } else if (arg.startsWith("--context_file")) {
        	String keyValue = arg.substring(15);
        	String filePath = new String(java.util.Base64.getDecoder().decode(keyValue));
        	java.nio.file.Path contextFile = java.nio.file.Paths.get(filePath);
            try (java.io.BufferedReader reader = java.nio.file.Files.newBufferedReader(contextFile)) {
                String line;
                while ((line = reader.readLine()) != null) {
                    int index = -1;
                    if ( (index = line.indexOf('=')) > -1) {
							if (line.startsWith("--context_param")) {
								if ("id_Password".equals(context_param.getContextType(line.substring(16, index)))) {
									context_param.put(line.substring(16, index), routines.system.PasswordEncryptUtil.decryptPassword(
											line.substring(index + 1)));
								} else {
									context_param.put(line.substring(16, index), line.substring(index + 1));
								}
							}else {//--context_type
								context_param.setContextType(line.substring(15, index), line.substring(index + 1));
							}
                    }
                }
            } catch (java.io.IOException e) {
            	System.err.println("Could not load the context file: " + filePath);
                e.printStackTrace();
            }
        } else if (arg.startsWith("--log4jLevel=")) {
            log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--audit.enabled") && arg.contains("=")) {//for trunjob call
		    final int equal = arg.indexOf('=');
			final String key = arg.substring("--".length(), equal);
			System.setProperty(key, arg.substring(equal + 1));
		}
    }
    
    private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

    private final String[][] escapeChars = {
        {"\\\\","\\"},{"\\n","\n"},{"\\'","\'"},{"\\r","\r"},
        {"\\f","\f"},{"\\b","\b"},{"\\t","\t"}
        };
    private String replaceEscapeChars (String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0],currIndex);
				if (index>=0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0], strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
    }

    public Integer getErrorCode() {
        return errorCode;
    }


    public String getStatus() {
        return status;
    }

    ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 *     542306 characters generated by Talend Open Studio for ESB 
 *     on the October 28, 2024, 2:33:25 PM COT
 ************************************************************************************************/