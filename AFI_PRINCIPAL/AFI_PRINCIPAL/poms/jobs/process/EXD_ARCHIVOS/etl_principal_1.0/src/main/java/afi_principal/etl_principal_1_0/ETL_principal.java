// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for ESB
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


package afi_principal.etl_principal_1_0;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;
 




	//the import part of tJavaRow_3
	//import java.util.List;

	//the import part of tJava_7
	//import java.util.List;

	//the import part of tJava_6
	//import java.util.List;

	//the import part of tJava_16
	//import java.util.List;

	//the import part of tJava_17
	//import java.util.List;

	//the import part of tJavaRow_1
	//import java.util.List;

	//the import part of tJava_2
	//import java.util.List;

	//the import part of tJava_11
	//import java.util.List;

	//the import part of tJava_13
	//import java.util.List;

	//the import part of tJavaRow_2
	//import java.util.List;

	//the import part of tJava_3
	//import java.util.List;

	//the import part of tJava_8
	//import java.util.List;

	//the import part of tJava_14
	//import java.util.List;

	//the import part of tJava_15
	//import java.util.List;

	//the import part of tJava_1
	//import java.util.List;

	//the import part of tJava_9
	//import java.util.List;

	//the import part of tJava_12
	//import java.util.List;

	//the import part of tJava_5
	//import java.util.List;

	//the import part of tJava_10
	//import java.util.List;


@SuppressWarnings("unused")

/**
 * Job: ETL_principal Purpose: Procesador de archivos para doble afiliacion y Glosas de fallos<br>
 * Description: ETL que gestiona y procesa los archivos de MINSALUD ETAPA 2 y 3, y FEDEVIDA <br>
 * @author jorgejlhc@gmail.com
 * @version 8.8.8.20240722_1936-SNAPSHOT
 * @status PROD
 */
public class ETL_principal implements TalendJob {

protected static void logIgnoredError(String message, Throwable cause) {
       System.err.println(message);
       if (cause != null) {
               cause.printStackTrace();
       }

}


	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}
	
	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	
	private final static String utf8Charset = "UTF-8";
	

	//contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String,String> propertyTypes = new java.util.HashMap<>();
		
		public PropertiesWithType(java.util.Properties properties){
			super(properties);
		}
		public PropertiesWithType(){
			super();
		}
		
		public void setContextType(String key, String type) {
			propertyTypes.put(key,type);
		}
	
		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}	
	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();
		

	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties){
			super(properties);
		}
		public ContextProperties(){
			super();
		}

		public void synchronizeContext(){
			
			if(fileSystem_Path != null){
				
					this.setProperty("fileSystem_Path", fileSystem_Path.toString());
				
			}
			
			if(fileSystem_Area != null){
				
					this.setProperty("fileSystem_Area", fileSystem_Area.toString());
				
			}
			
			if(archivoSalida != null){
				
					this.setProperty("archivoSalida", archivoSalida.toString());
				
			}
			
			if(mail_UsernameMail != null){
				
					this.setProperty("mail_UsernameMail", mail_UsernameMail.toString());
				
			}
			
			if(mail_SMTPPort != null){
				
					this.setProperty("mail_SMTPPort", mail_SMTPPort.toString());
				
			}
			
			if(mail_PasswordMail != null){
				
					this.setProperty("mail_PasswordMail", mail_PasswordMail.toString());
				
			}
			
			if(mail_SMTPHost != null){
				
					this.setProperty("mail_SMTPHost", mail_SMTPHost.toString());
				
			}
			
			if(oracle_Password != null){
				
					this.setProperty("oracle_Password", oracle_Password.toString());
				
			}
			
			if(oracle_User != null){
				
					this.setProperty("oracle_User", oracle_User.toString());
				
			}
			
			if(oracle_ServiceName != null){
				
					this.setProperty("oracle_ServiceName", oracle_ServiceName.toString());
				
			}
			
			if(oracle_Schema != null){
				
					this.setProperty("oracle_Schema", oracle_Schema.toString());
				
			}
			
			if(oracle_Port != null){
				
					this.setProperty("oracle_Port", oracle_Port.toString());
				
			}
			
			if(oracle_AdditionalParams != null){
				
					this.setProperty("oracle_AdditionalParams", oracle_AdditionalParams.toString());
				
			}
			
			if(oracle_Host != null){
				
					this.setProperty("oracle_Host", oracle_Host.toString());
				
			}
			
			if(oracle_Sid != null){
				
					this.setProperty("oracle_Sid", oracle_Sid.toString());
				
			}
			
			if(estArchivoInactivo != null){
				
					this.setProperty("estArchivoInactivo", estArchivoInactivo.toString());
				
			}
			
			if(estArchivoProcesado != null){
				
					this.setProperty("estArchivoProcesado", estArchivoProcesado.toString());
				
			}
			
			if(estArchivoEnProceso != null){
				
					this.setProperty("estArchivoEnProceso", estArchivoEnProceso.toString());
				
			}
			
			if(estArchivoCancelado != null){
				
					this.setProperty("estArchivoCancelado", estArchivoCancelado.toString());
				
			}
			
			if(estArchivoActivo != null){
				
					this.setProperty("estArchivoActivo", estArchivoActivo.toString());
				
			}
			
			if(estArchivoPausado != null){
				
					this.setProperty("estArchivoPausado", estArchivoPausado.toString());
				
			}
			
			if(estArchivoErrorArchivo != null){
				
					this.setProperty("estArchivoErrorArchivo", estArchivoErrorArchivo.toString());
				
			}
			
			if(estArchivoErrorProcesamiento != null){
				
					this.setProperty("estArchivoErrorProcesamiento", estArchivoErrorProcesamiento.toString());
				
			}
			
			if(estRegistroActivo != null){
				
					this.setProperty("estRegistroActivo", estRegistroActivo.toString());
				
			}
			
			if(estRegistroInactivo != null){
				
					this.setProperty("estRegistroInactivo", estRegistroInactivo.toString());
				
			}
			
			if(infoNombreArchivo != null){
				
					this.setProperty("infoNombreArchivo", infoNombreArchivo.toString());
				
			}
			
			if(infoTipoArchivoRespuesta != null){
				
					this.setProperty("infoTipoArchivoRespuesta", infoTipoArchivoRespuesta.toString());
				
			}
			
			if(infoIdArchivo != null){
				
					this.setProperty("infoIdArchivo", infoIdArchivo.toString());
				
			}
			
			if(infoUsuarioIdArchivo != null){
				
					this.setProperty("infoUsuarioIdArchivo", infoUsuarioIdArchivo.toString());
				
			}
			
			if(infoTipoArchivo != null){
				
					this.setProperty("infoTipoArchivo", infoTipoArchivo.toString());
				
			}
			
			if(tipoArchivoMinSaludEtapa2Novedades != null){
				
					this.setProperty("tipoArchivoMinSaludEtapa2Novedades", tipoArchivoMinSaludEtapa2Novedades.toString());
				
			}
			
			if(tipoArchivoMinSaludEtapa3MultiafiliacionGenerado != null){
				
					this.setProperty("tipoArchivoMinSaludEtapa3MultiafiliacionGenerado", tipoArchivoMinSaludEtapa3MultiafiliacionGenerado.toString());
				
			}
			
			if(tipoArchivoCruceErrores != null){
				
					this.setProperty("tipoArchivoCruceErrores", tipoArchivoCruceErrores.toString());
				
			}
			
			if(tipoArchivoMinSaludEtapa2NuevosRegistrosGenerado != null){
				
					this.setProperty("tipoArchivoMinSaludEtapa2NuevosRegistrosGenerado", tipoArchivoMinSaludEtapa2NuevosRegistrosGenerado.toString());
				
			}
			
			if(tipoArchivoMinSaludEtapa3Multiafiliacion != null){
				
					this.setProperty("tipoArchivoMinSaludEtapa3Multiafiliacion", tipoArchivoMinSaludEtapa3Multiafiliacion.toString());
				
			}
			
			if(tipoArchivoFedevidaGenerado != null){
				
					this.setProperty("tipoArchivoFedevidaGenerado", tipoArchivoFedevidaGenerado.toString());
				
			}
			
			if(tipoArchivoEntesGenerado != null){
				
					this.setProperty("tipoArchivoEntesGenerado", tipoArchivoEntesGenerado.toString());
				
			}
			
			if(tipoArchivoEntesTerritoriales != null){
				
					this.setProperty("tipoArchivoEntesTerritoriales", tipoArchivoEntesTerritoriales.toString());
				
			}
			
			if(tipoArchivoCompendioSaludGenerado != null){
				
					this.setProperty("tipoArchivoCompendioSaludGenerado", tipoArchivoCompendioSaludGenerado.toString());
				
			}
			
			if(tipoArchivoCompendioSalud != null){
				
					this.setProperty("tipoArchivoCompendioSalud", tipoArchivoCompendioSalud.toString());
				
			}
			
			if(tipoArchivoMinSaludEtapa2NuevosRegistros != null){
				
					this.setProperty("tipoArchivoMinSaludEtapa2NuevosRegistros", tipoArchivoMinSaludEtapa2NuevosRegistros.toString());
				
			}
			
			if(tipoArchivoFedevida != null){
				
					this.setProperty("tipoArchivoFedevida", tipoArchivoFedevida.toString());
				
			}
			
			if(tipoArchivoMinSaludEtapa2NovedadesGenerado != null){
				
					this.setProperty("tipoArchivoMinSaludEtapa2NovedadesGenerado", tipoArchivoMinSaludEtapa2NovedadesGenerado.toString());
				
			}
			
			if(suma != null){
				
					this.setProperty("suma", suma.toString());
				
			}
			
			if(archivoConfiguracion != null){
				
					this.setProperty("archivoConfiguracion", archivoConfiguracion.toString());
				
			}
			
			if(auxAumentoRegistros != null){
				
					this.setProperty("auxAumentoRegistros", auxAumentoRegistros.toString());
				
			}
			
			if(auxRango != null){
				
					this.setProperty("auxRango", auxRango.toString());
				
			}
			
			if(auxAfiliadosCriterioInact != null){
				
					this.setProperty("auxAfiliadosCriterioInact", auxAfiliadosCriterioInact.toString());
				
			}
			
			if(auxCriterioActual != null){
				
					this.setProperty("auxCriterioActual", auxCriterioActual.toString());
				
			}
			
			if(auxPrimerLoop != null){
				
					this.setProperty("auxPrimerLoop", auxPrimerLoop.toString());
				
			}
			
			if(auxPosicionRegistros != null){
				
					this.setProperty("auxPosicionRegistros", auxPosicionRegistros.toString());
				
			}
			
			if(auxAfiliadosCriterio != null){
				
					this.setProperty("auxAfiliadosCriterio", auxAfiliadosCriterio.toString());
				
			}
			
			if(auxAfiliadosCriterioAct != null){
				
					this.setProperty("auxAfiliadosCriterioAct", auxAfiliadosCriterioAct.toString());
				
			}
			
			if(tipoJobEntesTerritoriales != null){
				
					this.setProperty("tipoJobEntesTerritoriales", tipoJobEntesTerritoriales.toString());
				
			}
			
			if(tipoJobMinsaludEtapa2Novedades != null){
				
					this.setProperty("tipoJobMinsaludEtapa2Novedades", tipoJobMinsaludEtapa2Novedades.toString());
				
			}
			
			if(tipoJobMinsaludEtapa2NuevosRegistros != null){
				
					this.setProperty("tipoJobMinsaludEtapa2NuevosRegistros", tipoJobMinsaludEtapa2NuevosRegistros.toString());
				
			}
			
			if(tipoJobMinsaludEtapa3Multiafiliacion != null){
				
					this.setProperty("tipoJobMinsaludEtapa3Multiafiliacion", tipoJobMinsaludEtapa3Multiafiliacion.toString());
				
			}
			
			if(tipoJobFedevida != null){
				
					this.setProperty("tipoJobFedevida", tipoJobFedevida.toString());
				
			}
			
			if(descripcionProceso != null){
				
					this.setProperty("descripcionProceso", descripcionProceso.toString());
				
			}
			
			if(idProceso != null){
				
					this.setProperty("idProceso", idProceso.toString());
				
			}
			
			if(tipoJobProceso != null){
				
					this.setProperty("tipoJobProceso", tipoJobProceso.toString());
				
			}
			
			if(tipoProceso != null){
				
					this.setProperty("tipoProceso", tipoProceso.toString());
				
			}
			
			if(tipoJobCompendioSalud != null){
				
					this.setProperty("tipoJobCompendioSalud", tipoJobCompendioSalud.toString());
				
			}
			
		}
		
		//if the stored or passed value is "<TALEND_NULL>" string, it mean null
		public String getStringValue(String key) {
			String origin_value = this.getProperty(key);
			if(NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY.equals(origin_value)) {
				return null;
			}
			return origin_value;
		}

public String fileSystem_Path;
public String getFileSystem_Path(){
	return this.fileSystem_Path;
}
public String fileSystem_Area;
public String getFileSystem_Area(){
	return this.fileSystem_Area;
}
public String archivoSalida;
public String getArchivoSalida(){
	return this.archivoSalida;
}
public String mail_UsernameMail;
public String getMail_UsernameMail(){
	return this.mail_UsernameMail;
}
public String mail_SMTPPort;
public String getMail_SMTPPort(){
	return this.mail_SMTPPort;
}
public String mail_PasswordMail;
public String getMail_PasswordMail(){
	return this.mail_PasswordMail;
}
public String mail_SMTPHost;
public String getMail_SMTPHost(){
	return this.mail_SMTPHost;
}
public String oracle_Password;
public String getOracle_Password(){
	return this.oracle_Password;
}
public String oracle_User;
public String getOracle_User(){
	return this.oracle_User;
}
public String oracle_ServiceName;
public String getOracle_ServiceName(){
	return this.oracle_ServiceName;
}
public String oracle_Schema;
public String getOracle_Schema(){
	return this.oracle_Schema;
}
public String oracle_Port;
public String getOracle_Port(){
	return this.oracle_Port;
}
public String oracle_AdditionalParams;
public String getOracle_AdditionalParams(){
	return this.oracle_AdditionalParams;
}
public String oracle_Host;
public String getOracle_Host(){
	return this.oracle_Host;
}
public String oracle_Sid;
public String getOracle_Sid(){
	return this.oracle_Sid;
}
public Integer estArchivoInactivo;
public Integer getEstArchivoInactivo(){
	return this.estArchivoInactivo;
}
public Integer estArchivoProcesado;
public Integer getEstArchivoProcesado(){
	return this.estArchivoProcesado;
}
public Integer estArchivoEnProceso;
public Integer getEstArchivoEnProceso(){
	return this.estArchivoEnProceso;
}
public Integer estArchivoCancelado;
public Integer getEstArchivoCancelado(){
	return this.estArchivoCancelado;
}
public Integer estArchivoActivo;
public Integer getEstArchivoActivo(){
	return this.estArchivoActivo;
}
public Integer estArchivoPausado;
public Integer getEstArchivoPausado(){
	return this.estArchivoPausado;
}
public Integer estArchivoErrorArchivo;
public Integer getEstArchivoErrorArchivo(){
	return this.estArchivoErrorArchivo;
}
public Integer estArchivoErrorProcesamiento;
public Integer getEstArchivoErrorProcesamiento(){
	return this.estArchivoErrorProcesamiento;
}
public Integer estRegistroActivo;
public Integer getEstRegistroActivo(){
	return this.estRegistroActivo;
}
public Integer estRegistroInactivo;
public Integer getEstRegistroInactivo(){
	return this.estRegistroInactivo;
}
public String infoNombreArchivo;
public String getInfoNombreArchivo(){
	return this.infoNombreArchivo;
}
public Integer infoTipoArchivoRespuesta;
public Integer getInfoTipoArchivoRespuesta(){
	return this.infoTipoArchivoRespuesta;
}
public Integer infoIdArchivo;
public Integer getInfoIdArchivo(){
	return this.infoIdArchivo;
}
public Integer infoUsuarioIdArchivo;
public Integer getInfoUsuarioIdArchivo(){
	return this.infoUsuarioIdArchivo;
}
public Integer infoTipoArchivo;
public Integer getInfoTipoArchivo(){
	return this.infoTipoArchivo;
}
public Integer tipoArchivoMinSaludEtapa2Novedades;
public Integer getTipoArchivoMinSaludEtapa2Novedades(){
	return this.tipoArchivoMinSaludEtapa2Novedades;
}
public Integer tipoArchivoMinSaludEtapa3MultiafiliacionGenerado;
public Integer getTipoArchivoMinSaludEtapa3MultiafiliacionGenerado(){
	return this.tipoArchivoMinSaludEtapa3MultiafiliacionGenerado;
}
public Integer tipoArchivoCruceErrores;
public Integer getTipoArchivoCruceErrores(){
	return this.tipoArchivoCruceErrores;
}
public Integer tipoArchivoMinSaludEtapa2NuevosRegistrosGenerado;
public Integer getTipoArchivoMinSaludEtapa2NuevosRegistrosGenerado(){
	return this.tipoArchivoMinSaludEtapa2NuevosRegistrosGenerado;
}
public Integer tipoArchivoMinSaludEtapa3Multiafiliacion;
public Integer getTipoArchivoMinSaludEtapa3Multiafiliacion(){
	return this.tipoArchivoMinSaludEtapa3Multiafiliacion;
}
public Integer tipoArchivoFedevidaGenerado;
public Integer getTipoArchivoFedevidaGenerado(){
	return this.tipoArchivoFedevidaGenerado;
}
public Integer tipoArchivoEntesGenerado;
public Integer getTipoArchivoEntesGenerado(){
	return this.tipoArchivoEntesGenerado;
}
public Integer tipoArchivoEntesTerritoriales;
public Integer getTipoArchivoEntesTerritoriales(){
	return this.tipoArchivoEntesTerritoriales;
}
public Integer tipoArchivoCompendioSaludGenerado;
public Integer getTipoArchivoCompendioSaludGenerado(){
	return this.tipoArchivoCompendioSaludGenerado;
}
public Integer tipoArchivoCompendioSalud;
public Integer getTipoArchivoCompendioSalud(){
	return this.tipoArchivoCompendioSalud;
}
public Integer tipoArchivoMinSaludEtapa2NuevosRegistros;
public Integer getTipoArchivoMinSaludEtapa2NuevosRegistros(){
	return this.tipoArchivoMinSaludEtapa2NuevosRegistros;
}
public Integer tipoArchivoFedevida;
public Integer getTipoArchivoFedevida(){
	return this.tipoArchivoFedevida;
}
public Integer tipoArchivoMinSaludEtapa2NovedadesGenerado;
public Integer getTipoArchivoMinSaludEtapa2NovedadesGenerado(){
	return this.tipoArchivoMinSaludEtapa2NovedadesGenerado;
}
public Integer suma;
public Integer getSuma(){
	return this.suma;
}
public String archivoConfiguracion;
public String getArchivoConfiguracion(){
	return this.archivoConfiguracion;
}
public Integer auxAumentoRegistros;
public Integer getAuxAumentoRegistros(){
	return this.auxAumentoRegistros;
}
public String auxRango;
public String getAuxRango(){
	return this.auxRango;
}
public String auxAfiliadosCriterioInact;
public String getAuxAfiliadosCriterioInact(){
	return this.auxAfiliadosCriterioInact;
}
public Integer auxCriterioActual;
public Integer getAuxCriterioActual(){
	return this.auxCriterioActual;
}
public Boolean auxPrimerLoop;
public Boolean getAuxPrimerLoop(){
	return this.auxPrimerLoop;
}
public Integer auxPosicionRegistros;
public Integer getAuxPosicionRegistros(){
	return this.auxPosicionRegistros;
}
public String auxAfiliadosCriterio;
public String getAuxAfiliadosCriterio(){
	return this.auxAfiliadosCriterio;
}
public String auxAfiliadosCriterioAct;
public String getAuxAfiliadosCriterioAct(){
	return this.auxAfiliadosCriterioAct;
}
public Integer tipoJobEntesTerritoriales;
public Integer getTipoJobEntesTerritoriales(){
	return this.tipoJobEntesTerritoriales;
}
public Integer tipoJobMinsaludEtapa2Novedades;
public Integer getTipoJobMinsaludEtapa2Novedades(){
	return this.tipoJobMinsaludEtapa2Novedades;
}
public Integer tipoJobMinsaludEtapa2NuevosRegistros;
public Integer getTipoJobMinsaludEtapa2NuevosRegistros(){
	return this.tipoJobMinsaludEtapa2NuevosRegistros;
}
public Integer tipoJobMinsaludEtapa3Multiafiliacion;
public Integer getTipoJobMinsaludEtapa3Multiafiliacion(){
	return this.tipoJobMinsaludEtapa3Multiafiliacion;
}
public Integer tipoJobFedevida;
public Integer getTipoJobFedevida(){
	return this.tipoJobFedevida;
}
public String descripcionProceso;
public String getDescripcionProceso(){
	return this.descripcionProceso;
}
public Integer idProceso;
public Integer getIdProceso(){
	return this.idProceso;
}
public Integer tipoJobProceso;
public Integer getTipoJobProceso(){
	return this.tipoJobProceso;
}
public Integer tipoProceso;
public Integer getTipoProceso(){
	return this.tipoProceso;
}
public Integer tipoJobCompendioSalud;
public Integer getTipoJobCompendioSalud(){
	return this.tipoJobCompendioSalud;
}
	}
			
	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.
	public ContextProperties getContext() {
		return this.context;
	}
	private final String jobVersion = "1.0";
	private final String jobName = "ETL_principal";
	private final String projectName = "AFI_PRINCIPAL";
	public Integer errorCode = null;
	private String currentComponent = "";
	
	private String cLabel =  null;
	
		private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
        private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();
	
		private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
		public  final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();
	

private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";
	
	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(), new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}
	
	public void setDataSourceReferences(List serviceReferences) throws Exception{
		
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		java.util.Map<String, javax.sql.DataSource> dataSources = new java.util.HashMap<String, javax.sql.DataSource>();
		
		for (java.util.Map.Entry<String, javax.sql.DataSource> entry : BundleUtils.getServices(serviceReferences,  javax.sql.DataSource.class).entrySet()) {
                    dataSources.put(entry.getKey(), entry.getValue());
                    talendDataSources.put(entry.getKey(), new routines.system.TalendDataSource(entry.getValue()));
		}

		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}


private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

public String getExceptionStackTrace() {
	if ("failure".equals(this.getStatus())) {
		errorMessagePS.flush();
		return baos.toString();
	}
	return null;
}

private Exception exception;

public Exception getException() {
	if ("failure".equals(this.getStatus())) {
		return this.exception;
	}
	return null;
}

private class TalendException extends Exception {

	private static final long serialVersionUID = 1L;

	private java.util.Map<String, Object> globalMap = null;
	private Exception e = null;
	
	private String currentComponent = null;
	private String cLabel =  null;
	
	private String virtualComponentName = null;
	
	public void setVirtualComponentName (String virtualComponentName){
		this.virtualComponentName = virtualComponentName;
	}

	private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
		this.currentComponent= errorComponent;
		this.globalMap = globalMap;
		this.e = e;
	}
	
	private TalendException(Exception e, String errorComponent, String errorComponentLabel, final java.util.Map<String, Object> globalMap) {
		this(e, errorComponent, globalMap);
		this.cLabel = errorComponentLabel;
	}

	public Exception getException() {
		return this.e;
	}

	public String getCurrentComponent() {
		return this.currentComponent;
	}

	
    public String getExceptionCauseMessage(Exception e){
        Throwable cause = e;
        String message = null;
        int i = 10;
        while (null != cause && 0 < i--) {
            message = cause.getMessage();
            if (null == message) {
                cause = cause.getCause();
            } else {
                break;          
            }
        }
        if (null == message) {
            message = e.getClass().getName();
        }   
        return message;
    }

	@Override
	public void printStackTrace() {
		if (!(e instanceof TalendException || e instanceof TDieException)) {
			if(virtualComponentName!=null && currentComponent.indexOf(virtualComponentName+"_")==0){
				globalMap.put(virtualComponentName+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			}
			globalMap.put(currentComponent+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
		}
		if (!(e instanceof TDieException)) {
			if(e instanceof TalendException){
				e.printStackTrace();
			} else {
				e.printStackTrace();
				e.printStackTrace(errorMessagePS);
				ETL_principal.this.exception = e;
			}
		}
		if (!(e instanceof TalendException)) {
		try {
			for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
				if (m.getName().compareTo(currentComponent + "_error") == 0) {
					m.invoke(ETL_principal.this, new Object[] { e , currentComponent, globalMap});
					break;
				}
			}

			if(!(e instanceof TDieException)){
			}
		} catch (Exception e) {
			this.e.printStackTrace();
		}
		}
	}
}

			public void tPrejob_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPrejob_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileExist_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileExist_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputXML_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputXML_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaRow_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputXML_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleConnection_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
						try {
							
								if(this.execStat){
									runStat.updateStatOnConnection("OnComponentError1", 0, "error");
								}
							
							
								errorCode = null;
								tDie_1Process(globalMap);
								if (!"failure".equals(status)) {
									status = "end";
								}
								

						} catch (Exception e) {
							e.printStackTrace();
						}
						
					tOracleConnection_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRunJob_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRunJob_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_7_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tJava_7_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDie_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDie_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFixedFlowInput_7_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFixedFlowInput_7_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleSP_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFixedFlowInput_7_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tJava_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostjob_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostjob_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleClose_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleClose_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_16_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tJava_16_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFlowToIterate_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_17_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaRow_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tJava_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFixedFlowInput_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFixedFlowInput_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleOutput_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFixedFlowInput_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_11_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tJava_11_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFixedFlowInput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFixedFlowInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleOutput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFixedFlowInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_13_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tJava_13_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFixedFlowInput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFixedFlowInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleSP_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFixedFlowInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaRow_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFixedFlowInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tJava_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRunJob_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
						try {
							
								if(this.execStat){
									runStat.updateStatOnConnection("OnComponentError8", 0, "error");
								}
							
							
								errorCode = null;
								tFixedFlowInput_3Process(globalMap);
								if (!"failure".equals(status)) {
									status = "end";
								}
								

						} catch (Exception e) {
							e.printStackTrace();
						}
						
					tRunJob_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFixedFlowInput_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFixedFlowInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleOutput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFixedFlowInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_8_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tJava_8_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFixedFlowInput_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFixedFlowInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleOutput_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFixedFlowInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_14_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tJava_14_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFixedFlowInput_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFixedFlowInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleOutput_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFixedFlowInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_15_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tJava_15_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tJava_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRunJob_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
						try {
							
								if(this.execStat){
									runStat.updateStatOnConnection("OnComponentError4", 0, "error");
								}
							
							
								errorCode = null;
								tFixedFlowInput_3Process(globalMap);
								if (!"failure".equals(status)) {
									status = "end";
								}
								

						} catch (Exception e) {
							e.printStackTrace();
						}
						
					tRunJob_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_9_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tJava_9_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRunJob_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
						try {
							
								if(this.execStat){
									runStat.updateStatOnConnection("OnComponentError6", 0, "error");
								}
							
							
								errorCode = null;
								tFixedFlowInput_3Process(globalMap);
								if (!"failure".equals(status)) {
									status = "end";
								}
								

						} catch (Exception e) {
							e.printStackTrace();
						}
						
					tRunJob_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_12_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tJava_12_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRunJob_7_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
						try {
							
								if(this.execStat){
									runStat.updateStatOnConnection("OnComponentError10", 0, "error");
								}
							
							
								errorCode = null;
								tFixedFlowInput_3Process(globalMap);
								if (!"failure".equals(status)) {
									status = "end";
								}
								

						} catch (Exception e) {
							e.printStackTrace();
						}
						
					tRunJob_7_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tJava_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRunJob_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
						try {
							
								if(this.execStat){
									runStat.updateStatOnConnection("OnComponentError5", 0, "error");
								}
							
							
								errorCode = null;
								tFixedFlowInput_3Process(globalMap);
								if (!"failure".equals(status)) {
									status = "end";
								}
								

						} catch (Exception e) {
							e.printStackTrace();
						}
						
					tRunJob_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_10_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tJava_10_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRunJob_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
						try {
							
								if(this.execStat){
									runStat.updateStatOnConnection("OnComponentError7", 0, "error");
								}
							
							
								errorCode = null;
								tFixedFlowInput_3Process(globalMap);
								if (!"failure".equals(status)) {
									status = "end";
								}
								

						} catch (Exception e) {
							e.printStackTrace();
						}
						
					tRunJob_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPrejob_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileExist_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileInputXML_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleConnection_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tRunJob_6_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_7_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDie_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFixedFlowInput_7_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_6_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tPostjob_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleClose_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_16_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleInput_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleInput_3_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFixedFlowInput_6_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_11_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFixedFlowInput_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_13_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFixedFlowInput_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_3_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tRunJob_5_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFixedFlowInput_3_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_8_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFixedFlowInput_4_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_14_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFixedFlowInput_5_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_15_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tRunJob_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_9_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tRunJob_3_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_12_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tRunJob_7_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_5_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tRunJob_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_10_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tRunJob_4_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
	









public void tPrejob_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPrejob_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tPrejob_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tPrejob_1", false);
		start_Hash.put("tPrejob_1", System.currentTimeMillis());
		
	
	currentComponent="tPrejob_1";
	
	
		int tos_count_tPrejob_1 = 0;
		

 



/**
 * [tPrejob_1 begin ] stop
 */
	
	/**
	 * [tPrejob_1 main ] start
	 */

	

	
	
	currentComponent="tPrejob_1";
	
	

 


	tos_count_tPrejob_1++;

/**
 * [tPrejob_1 main ] stop
 */
	
	/**
	 * [tPrejob_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tPrejob_1";
	
	

 



/**
 * [tPrejob_1 process_data_begin ] stop
 */
	
	/**
	 * [tPrejob_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tPrejob_1";
	
	

 



/**
 * [tPrejob_1 process_data_end ] stop
 */
	
	/**
	 * [tPrejob_1 end ] start
	 */

	

	
	
	currentComponent="tPrejob_1";
	
	

 

ok_Hash.put("tPrejob_1", true);
end_Hash.put("tPrejob_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk13", 0, "ok");
				}
				tFileExist_1Process(globalMap);



/**
 * [tPrejob_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPrejob_1 finally ] start
	 */

	

	
	
	currentComponent="tPrejob_1";
	
	

 



/**
 * [tPrejob_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPrejob_1_SUBPROCESS_STATE", 1);
	}
	


public void tFileExist_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileExist_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tFileExist_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileExist_1", false);
		start_Hash.put("tFileExist_1", System.currentTimeMillis());
		
	
	currentComponent="tFileExist_1";
	
	
		int tos_count_tFileExist_1 = 0;
		

 



/**
 * [tFileExist_1 begin ] stop
 */
	
	/**
	 * [tFileExist_1 main ] start
	 */

	

	
	
	currentComponent="tFileExist_1";
	
	



java.io.File file_tFileExist_1 = new java.io.File(context.archivoConfiguracion);
if (!file_tFileExist_1.exists()) {
    globalMap.put("tFileExist_1_EXISTS",false);
}else{
	globalMap.put("tFileExist_1_EXISTS",true);
}

globalMap.put("tFileExist_1_FILENAME",context.archivoConfiguracion);


 


	tos_count_tFileExist_1++;

/**
 * [tFileExist_1 main ] stop
 */
	
	/**
	 * [tFileExist_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileExist_1";
	
	

 



/**
 * [tFileExist_1 process_data_begin ] stop
 */
	
	/**
	 * [tFileExist_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileExist_1";
	
	

 



/**
 * [tFileExist_1 process_data_end ] stop
 */
	
	/**
	 * [tFileExist_1 end ] start
	 */

	

	
	
	currentComponent="tFileExist_1";
	
	

 

ok_Hash.put("tFileExist_1", true);
end_Hash.put("tFileExist_1", System.currentTimeMillis());

   			if (((Boolean)globalMap.get("tFileExist_1_EXISTS"))) {
   				
					if(execStat){
   	 					runStat.updateStatOnConnection("If20", 0, "true");
					}
				tFileInputXML_1Process(globalMap);
			}

			   
   				else{
					if(execStat){   
   	 					runStat.updateStatOnConnection("If20", 0, "false");
					}   	 
   				}
   			if (!((Boolean)globalMap.get("tFileExist_1_EXISTS"))) {
   				
					if(execStat){
   	 					runStat.updateStatOnConnection("If35", 0, "true");
					}
				tJava_6Process(globalMap);
			}

			   
   				else{
					if(execStat){   
   	 					runStat.updateStatOnConnection("If35", 0, "false");
					}   	 
   				}



/**
 * [tFileExist_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileExist_1 finally ] start
	 */

	

	
	
	currentComponent="tFileExist_1";
	
	

 



/**
 * [tFileExist_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileExist_1_SUBPROCESS_STATE", 1);
	}
	


public static class row3Struct implements routines.system.IPersistableRow<row3Struct> {
    final static byte[] commonByteArrayLock_AFI_PRINCIPAL_ETL_principal = new byte[0];
    static byte[] commonByteArray_AFI_PRINCIPAL_ETL_principal = new byte[0];

	
			    public String DB_Host;

				public String getDB_Host () {
					return this.DB_Host;
				}

				public Boolean DB_HostIsNullable(){
				    return true;
				}
				public Boolean DB_HostIsKey(){
				    return false;
				}
				public Integer DB_HostLength(){
				    return 13;
				}
				public Integer DB_HostPrecision(){
				    return 0;
				}
				public String DB_HostDefault(){
				
					return null;
				
				}
				public String DB_HostComment(){
				
				    return "";
				
				}
				public String DB_HostPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String DB_HostOriginalDbColumnName(){
				
					return "DB_Host";
				
				}

				
			    public String DB_Port;

				public String getDB_Port () {
					return this.DB_Port;
				}

				public Boolean DB_PortIsNullable(){
				    return true;
				}
				public Boolean DB_PortIsKey(){
				    return false;
				}
				public Integer DB_PortLength(){
				    return 4;
				}
				public Integer DB_PortPrecision(){
				    return 0;
				}
				public String DB_PortDefault(){
				
					return null;
				
				}
				public String DB_PortComment(){
				
				    return "";
				
				}
				public String DB_PortPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String DB_PortOriginalDbColumnName(){
				
					return "DB_Port";
				
				}

				
			    public String DB_Sid;

				public String getDB_Sid () {
					return this.DB_Sid;
				}

				public Boolean DB_SidIsNullable(){
				    return true;
				}
				public Boolean DB_SidIsKey(){
				    return false;
				}
				public Integer DB_SidLength(){
				    return 4;
				}
				public Integer DB_SidPrecision(){
				    return 0;
				}
				public String DB_SidDefault(){
				
					return null;
				
				}
				public String DB_SidComment(){
				
				    return "";
				
				}
				public String DB_SidPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String DB_SidOriginalDbColumnName(){
				
					return "DB_Sid";
				
				}

				
			    public String DB_ServiceName;

				public String getDB_ServiceName () {
					return this.DB_ServiceName;
				}

				public Boolean DB_ServiceNameIsNullable(){
				    return true;
				}
				public Boolean DB_ServiceNameIsKey(){
				    return false;
				}
				public Integer DB_ServiceNameLength(){
				    return 16;
				}
				public Integer DB_ServiceNamePrecision(){
				    return 0;
				}
				public String DB_ServiceNameDefault(){
				
					return null;
				
				}
				public String DB_ServiceNameComment(){
				
				    return "";
				
				}
				public String DB_ServiceNamePattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String DB_ServiceNameOriginalDbColumnName(){
				
					return "DB_ServiceName";
				
				}

				
			    public String DB_Schema;

				public String getDB_Schema () {
					return this.DB_Schema;
				}

				public Boolean DB_SchemaIsNullable(){
				    return true;
				}
				public Boolean DB_SchemaIsKey(){
				    return false;
				}
				public Integer DB_SchemaLength(){
				    return 8;
				}
				public Integer DB_SchemaPrecision(){
				    return 0;
				}
				public String DB_SchemaDefault(){
				
					return null;
				
				}
				public String DB_SchemaComment(){
				
				    return "";
				
				}
				public String DB_SchemaPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String DB_SchemaOriginalDbColumnName(){
				
					return "DB_Schema";
				
				}

				
			    public String DB_User;

				public String getDB_User () {
					return this.DB_User;
				}

				public Boolean DB_UserIsNullable(){
				    return true;
				}
				public Boolean DB_UserIsKey(){
				    return false;
				}
				public Integer DB_UserLength(){
				    return 8;
				}
				public Integer DB_UserPrecision(){
				    return 0;
				}
				public String DB_UserDefault(){
				
					return null;
				
				}
				public String DB_UserComment(){
				
				    return "";
				
				}
				public String DB_UserPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String DB_UserOriginalDbColumnName(){
				
					return "DB_User";
				
				}

				
			    public String DB_Password;

				public String getDB_Password () {
					return this.DB_Password;
				}

				public Boolean DB_PasswordIsNullable(){
				    return true;
				}
				public Boolean DB_PasswordIsKey(){
				    return false;
				}
				public Integer DB_PasswordLength(){
				    return 11;
				}
				public Integer DB_PasswordPrecision(){
				    return 0;
				}
				public String DB_PasswordDefault(){
				
					return null;
				
				}
				public String DB_PasswordComment(){
				
				    return "";
				
				}
				public String DB_PasswordPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String DB_PasswordOriginalDbColumnName(){
				
					return "DB_Password";
				
				}

				
			    public String FS_PathStorage;

				public String getFS_PathStorage () {
					return this.FS_PathStorage;
				}

				public Boolean FS_PathStorageIsNullable(){
				    return true;
				}
				public Boolean FS_PathStorageIsKey(){
				    return false;
				}
				public Integer FS_PathStorageLength(){
				    return 0;
				}
				public Integer FS_PathStoragePrecision(){
				    return 0;
				}
				public String FS_PathStorageDefault(){
				
					return null;
				
				}
				public String FS_PathStorageComment(){
				
				    return "";
				
				}
				public String FS_PathStoragePattern(){
				
					return "";
				
				}
				public String FS_PathStorageOriginalDbColumnName(){
				
					return "FS_PathStorage";
				
				}

				
			    public String ML_SMTPHost;

				public String getML_SMTPHost () {
					return this.ML_SMTPHost;
				}

				public Boolean ML_SMTPHostIsNullable(){
				    return true;
				}
				public Boolean ML_SMTPHostIsKey(){
				    return false;
				}
				public Integer ML_SMTPHostLength(){
				    return 0;
				}
				public Integer ML_SMTPHostPrecision(){
				    return 0;
				}
				public String ML_SMTPHostDefault(){
				
					return null;
				
				}
				public String ML_SMTPHostComment(){
				
				    return "";
				
				}
				public String ML_SMTPHostPattern(){
				
					return "";
				
				}
				public String ML_SMTPHostOriginalDbColumnName(){
				
					return "ML_SMTPHost";
				
				}

				
			    public String ML_SMTPPort;

				public String getML_SMTPPort () {
					return this.ML_SMTPPort;
				}

				public Boolean ML_SMTPPortIsNullable(){
				    return true;
				}
				public Boolean ML_SMTPPortIsKey(){
				    return false;
				}
				public Integer ML_SMTPPortLength(){
				    return 0;
				}
				public Integer ML_SMTPPortPrecision(){
				    return 0;
				}
				public String ML_SMTPPortDefault(){
				
					return null;
				
				}
				public String ML_SMTPPortComment(){
				
				    return "";
				
				}
				public String ML_SMTPPortPattern(){
				
					return "";
				
				}
				public String ML_SMTPPortOriginalDbColumnName(){
				
					return "ML_SMTPPort";
				
				}

				
			    public String ML_UsernameMail;

				public String getML_UsernameMail () {
					return this.ML_UsernameMail;
				}

				public Boolean ML_UsernameMailIsNullable(){
				    return true;
				}
				public Boolean ML_UsernameMailIsKey(){
				    return false;
				}
				public Integer ML_UsernameMailLength(){
				    return 0;
				}
				public Integer ML_UsernameMailPrecision(){
				    return 0;
				}
				public String ML_UsernameMailDefault(){
				
					return null;
				
				}
				public String ML_UsernameMailComment(){
				
				    return "";
				
				}
				public String ML_UsernameMailPattern(){
				
					return "";
				
				}
				public String ML_UsernameMailOriginalDbColumnName(){
				
					return "ML_UsernameMail";
				
				}

				
			    public String ML_PasswordMail;

				public String getML_PasswordMail () {
					return this.ML_PasswordMail;
				}

				public Boolean ML_PasswordMailIsNullable(){
				    return true;
				}
				public Boolean ML_PasswordMailIsKey(){
				    return false;
				}
				public Integer ML_PasswordMailLength(){
				    return 0;
				}
				public Integer ML_PasswordMailPrecision(){
				    return 0;
				}
				public String ML_PasswordMailDefault(){
				
					return null;
				
				}
				public String ML_PasswordMailComment(){
				
				    return "";
				
				}
				public String ML_PasswordMailPattern(){
				
					return "";
				
				}
				public String ML_PasswordMailOriginalDbColumnName(){
				
					return "ML_PasswordMail";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_PRINCIPAL_ETL_principal.length) {
				if(length < 1024 && commonByteArray_AFI_PRINCIPAL_ETL_principal.length == 0) {
   					commonByteArray_AFI_PRINCIPAL_ETL_principal = new byte[1024];
				} else {
   					commonByteArray_AFI_PRINCIPAL_ETL_principal = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_PRINCIPAL_ETL_principal, 0, length);
			strReturn = new String(commonByteArray_AFI_PRINCIPAL_ETL_principal, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_PRINCIPAL_ETL_principal.length) {
				if(length < 1024 && commonByteArray_AFI_PRINCIPAL_ETL_principal.length == 0) {
   					commonByteArray_AFI_PRINCIPAL_ETL_principal = new byte[1024];
				} else {
   					commonByteArray_AFI_PRINCIPAL_ETL_principal = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_PRINCIPAL_ETL_principal, 0, length);
			strReturn = new String(commonByteArray_AFI_PRINCIPAL_ETL_principal, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_PRINCIPAL_ETL_principal) {

        	try {

        		int length = 0;
		
					this.DB_Host = readString(dis);
					
					this.DB_Port = readString(dis);
					
					this.DB_Sid = readString(dis);
					
					this.DB_ServiceName = readString(dis);
					
					this.DB_Schema = readString(dis);
					
					this.DB_User = readString(dis);
					
					this.DB_Password = readString(dis);
					
					this.FS_PathStorage = readString(dis);
					
					this.ML_SMTPHost = readString(dis);
					
					this.ML_SMTPPort = readString(dis);
					
					this.ML_UsernameMail = readString(dis);
					
					this.ML_PasswordMail = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_PRINCIPAL_ETL_principal) {

        	try {

        		int length = 0;
		
					this.DB_Host = readString(dis);
					
					this.DB_Port = readString(dis);
					
					this.DB_Sid = readString(dis);
					
					this.DB_ServiceName = readString(dis);
					
					this.DB_Schema = readString(dis);
					
					this.DB_User = readString(dis);
					
					this.DB_Password = readString(dis);
					
					this.FS_PathStorage = readString(dis);
					
					this.ML_SMTPHost = readString(dis);
					
					this.ML_SMTPPort = readString(dis);
					
					this.ML_UsernameMail = readString(dis);
					
					this.ML_PasswordMail = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.DB_Host,dos);
					
					// String
				
						writeString(this.DB_Port,dos);
					
					// String
				
						writeString(this.DB_Sid,dos);
					
					// String
				
						writeString(this.DB_ServiceName,dos);
					
					// String
				
						writeString(this.DB_Schema,dos);
					
					// String
				
						writeString(this.DB_User,dos);
					
					// String
				
						writeString(this.DB_Password,dos);
					
					// String
				
						writeString(this.FS_PathStorage,dos);
					
					// String
				
						writeString(this.ML_SMTPHost,dos);
					
					// String
				
						writeString(this.ML_SMTPPort,dos);
					
					// String
				
						writeString(this.ML_UsernameMail,dos);
					
					// String
				
						writeString(this.ML_PasswordMail,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.DB_Host,dos);
					
					// String
				
						writeString(this.DB_Port,dos);
					
					// String
				
						writeString(this.DB_Sid,dos);
					
					// String
				
						writeString(this.DB_ServiceName,dos);
					
					// String
				
						writeString(this.DB_Schema,dos);
					
					// String
				
						writeString(this.DB_User,dos);
					
					// String
				
						writeString(this.DB_Password,dos);
					
					// String
				
						writeString(this.FS_PathStorage,dos);
					
					// String
				
						writeString(this.ML_SMTPHost,dos);
					
					// String
				
						writeString(this.ML_SMTPPort,dos);
					
					// String
				
						writeString(this.ML_UsernameMail,dos);
					
					// String
				
						writeString(this.ML_PasswordMail,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("DB_Host="+DB_Host);
		sb.append(",DB_Port="+DB_Port);
		sb.append(",DB_Sid="+DB_Sid);
		sb.append(",DB_ServiceName="+DB_ServiceName);
		sb.append(",DB_Schema="+DB_Schema);
		sb.append(",DB_User="+DB_User);
		sb.append(",DB_Password="+DB_Password);
		sb.append(",FS_PathStorage="+FS_PathStorage);
		sb.append(",ML_SMTPHost="+ML_SMTPHost);
		sb.append(",ML_SMTPPort="+ML_SMTPPort);
		sb.append(",ML_UsernameMail="+ML_UsernameMail);
		sb.append(",ML_PasswordMail="+ML_PasswordMail);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row3Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tFileInputXML_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileInputXML_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row3Struct row3 = new row3Struct();




	
	/**
	 * [tJavaRow_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaRow_3", false);
		start_Hash.put("tJavaRow_3", System.currentTimeMillis());
		
	
	currentComponent="tJavaRow_3";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row3");
					}
				
		int tos_count_tJavaRow_3 = 0;
		

int nb_line_tJavaRow_3 = 0;

 



/**
 * [tJavaRow_3 begin ] stop
 */



	
	/**
	 * [tFileInputXML_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputXML_1", false);
		start_Hash.put("tFileInputXML_1", System.currentTimeMillis());
		
	
	currentComponent="tFileInputXML_1";
	
	
		int tos_count_tFileInputXML_1 = 0;
		

	

int nb_line_tFileInputXML_1 = 0;

	String os_tFileInputXML_1 = System.getProperty("os.name").toLowerCase();
	boolean isWindows_tFileInputXML_1=false;
	if(os_tFileInputXML_1.indexOf("windows") > -1 || os_tFileInputXML_1.indexOf("nt") > -1){
		isWindows_tFileInputXML_1=true;
	}
class NameSpaceTool_tFileInputXML_1 {

    public java.util.HashMap<String, String> xmlNameSpaceMap = new java.util.HashMap<String, String>();
    
	private java.util.List<String> defualtNSPath = new java.util.ArrayList<String>();

    public void countNSMap(org.dom4j.Element el) {
        for (org.dom4j.Namespace ns : (java.util.List<org.dom4j.Namespace>) el.declaredNamespaces()) {
            if (ns.getPrefix().trim().length() == 0) {
                xmlNameSpaceMap.put("pre"+defualtNSPath.size(), ns.getURI());
                String path = "";
                org.dom4j.Element elTmp = el;
                while (elTmp != null) {
                	if (elTmp.getNamespacePrefix() != null && elTmp.getNamespacePrefix().length() > 0) {
                        path = "/" + elTmp.getNamespacePrefix() + ":" + elTmp.getName() + path;
                    } else {
                        path = "/" + elTmp.getName() + path;
                    }
                    elTmp = elTmp.getParent();
                }
                defualtNSPath.add(path);
            } else {
                xmlNameSpaceMap.put(ns.getPrefix(), ns.getURI());
            }

        }
        for (org.dom4j.Element e : (java.util.List<org.dom4j.Element>) el.elements()) {
            countNSMap(e);
        }
    }
    
    private final org.talend.xpath.XPathUtil util = new  org.talend.xpath.XPathUtil();
    
    {
    	util.setDefaultNSPath(defualtNSPath);
    }
    
	public String addDefaultNSPrefix(String path) {
		return util.addDefaultNSPrefix(path);
	}
	
	public String addDefaultNSPrefix(String relativeXpression, String basePath) {
		return util.addDefaultNSPrefix(relativeXpression,basePath);
	}
    
}

class XML_API_tFileInputXML_1{
	public boolean isDefNull(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
        if (node != null && node instanceof org.dom4j.Element) {
        	org.dom4j.Attribute attri = ((org.dom4j.Element)node).attribute("nil");
        	if(attri != null && ("true").equals(attri.getText())){
            	return true;
            }
        }
        return false;
    }

    public boolean isMissing(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
        return node == null ? true : false;
    }

    public boolean isEmpty(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
        if (node != null) {
            return node.getStringValue().isEmpty();
        }
        return false;
    }
}


org.dom4j.io.SAXReader reader_tFileInputXML_1 = new org.dom4j.io.SAXReader();
Object filename_tFileInputXML_1 = null;
try {
	filename_tFileInputXML_1 = context.archivoConfiguracion;
} catch(java.lang.Exception e) {
globalMap.put("tFileInputXML_1_ERROR_MESSAGE",e.getMessage());
	
	
	System.err.println(e.getMessage());
	
}
if(filename_tFileInputXML_1 != null && filename_tFileInputXML_1 instanceof String && filename_tFileInputXML_1.toString().startsWith("//")){
	if (!isWindows_tFileInputXML_1){
		filename_tFileInputXML_1 = filename_tFileInputXML_1.toString().replaceFirst("//","/");
	}
}

boolean isValidFile_tFileInputXML_1 = true;
org.dom4j.Document doc_tFileInputXML_1 = null;
java.io.Closeable toClose_tFileInputXML_1 = null;
try{
	if(filename_tFileInputXML_1 instanceof java.io.InputStream){
		java.io.InputStream inputStream_tFileInputXML_1 = (java.io.InputStream)filename_tFileInputXML_1;
		toClose_tFileInputXML_1 = inputStream_tFileInputXML_1;
		doc_tFileInputXML_1 = reader_tFileInputXML_1.read(inputStream_tFileInputXML_1);
	}else{
		java.io.Reader unicodeReader_tFileInputXML_1 = new UnicodeReader(new java.io.FileInputStream(String.valueOf(filename_tFileInputXML_1)),"UTF-8");
		toClose_tFileInputXML_1 = unicodeReader_tFileInputXML_1;
		org.xml.sax.InputSource in_tFileInputXML_1= new org.xml.sax.InputSource(unicodeReader_tFileInputXML_1);
		doc_tFileInputXML_1 = reader_tFileInputXML_1.read(in_tFileInputXML_1);
	}
}catch(java.lang.Exception e){
globalMap.put("tFileInputXML_1_ERROR_MESSAGE",e.getMessage());
	
	System.err.println(e.getMessage());
	isValidFile_tFileInputXML_1 = false;
} finally {
	if(toClose_tFileInputXML_1!=null) {
		toClose_tFileInputXML_1.close();
	}
}
if(isValidFile_tFileInputXML_1){
NameSpaceTool_tFileInputXML_1 nsTool_tFileInputXML_1 = new NameSpaceTool_tFileInputXML_1();
nsTool_tFileInputXML_1.countNSMap(doc_tFileInputXML_1.getRootElement());
java.util.HashMap<String,String> xmlNameSpaceMap_tFileInputXML_1 = nsTool_tFileInputXML_1.xmlNameSpaceMap;  

org.dom4j.XPath x_tFileInputXML_1 = doc_tFileInputXML_1.createXPath(nsTool_tFileInputXML_1.addDefaultNSPrefix("/connectionStrings"));  
x_tFileInputXML_1.setNamespaceURIs(xmlNameSpaceMap_tFileInputXML_1); 

java.util.List<org.dom4j.Node> nodeList_tFileInputXML_1 = (java.util.List<org.dom4j.Node>)x_tFileInputXML_1.selectNodes(doc_tFileInputXML_1);	
XML_API_tFileInputXML_1 xml_api_tFileInputXML_1 = new XML_API_tFileInputXML_1();
String str_tFileInputXML_1 = "";
org.dom4j.Node node_tFileInputXML_1 = null;

//init all mapping xpaths
java.util.Map<Integer,org.dom4j.XPath> xpaths_tFileInputXML_1=new java.util.HashMap<Integer,org.dom4j.XPath>();
	class XPathUtil_tFileInputXML_1{
	
			   public void initXPaths_0(java.util.Map<Integer,org.dom4j.XPath> xpaths,NameSpaceTool_tFileInputXML_1 nsTool,
			       java.util.HashMap<String,String> xmlNameSpaceMap){
			
	org.dom4j.XPath xpath_0 = org.dom4j.DocumentHelper.createXPath(nsTool.addDefaultNSPrefix("Host","/connectionStrings"));
	xpath_0.setNamespaceURIs(xmlNameSpaceMap);
	
			xpaths.put(0,xpath_0);
			
	org.dom4j.XPath xpath_1 = org.dom4j.DocumentHelper.createXPath(nsTool.addDefaultNSPrefix("Port","/connectionStrings"));
	xpath_1.setNamespaceURIs(xmlNameSpaceMap);
	
			xpaths.put(1,xpath_1);
			
	org.dom4j.XPath xpath_2 = org.dom4j.DocumentHelper.createXPath(nsTool.addDefaultNSPrefix("Sid","/connectionStrings"));
	xpath_2.setNamespaceURIs(xmlNameSpaceMap);
	
			xpaths.put(2,xpath_2);
			
	org.dom4j.XPath xpath_3 = org.dom4j.DocumentHelper.createXPath(nsTool.addDefaultNSPrefix("ServiceName","/connectionStrings"));
	xpath_3.setNamespaceURIs(xmlNameSpaceMap);
	
			xpaths.put(3,xpath_3);
			
	org.dom4j.XPath xpath_4 = org.dom4j.DocumentHelper.createXPath(nsTool.addDefaultNSPrefix("Schema","/connectionStrings"));
	xpath_4.setNamespaceURIs(xmlNameSpaceMap);
	
			xpaths.put(4,xpath_4);
			
	org.dom4j.XPath xpath_5 = org.dom4j.DocumentHelper.createXPath(nsTool.addDefaultNSPrefix("User","/connectionStrings"));
	xpath_5.setNamespaceURIs(xmlNameSpaceMap);
	
			xpaths.put(5,xpath_5);
			
	org.dom4j.XPath xpath_6 = org.dom4j.DocumentHelper.createXPath(nsTool.addDefaultNSPrefix("Password","/connectionStrings"));
	xpath_6.setNamespaceURIs(xmlNameSpaceMap);
	
			xpaths.put(6,xpath_6);
			
	org.dom4j.XPath xpath_7 = org.dom4j.DocumentHelper.createXPath(nsTool.addDefaultNSPrefix("PathStorage","/connectionStrings"));
	xpath_7.setNamespaceURIs(xmlNameSpaceMap);
	
			xpaths.put(7,xpath_7);
			
	org.dom4j.XPath xpath_8 = org.dom4j.DocumentHelper.createXPath(nsTool.addDefaultNSPrefix("SMTPHost","/connectionStrings"));
	xpath_8.setNamespaceURIs(xmlNameSpaceMap);
	
			xpaths.put(8,xpath_8);
			
	org.dom4j.XPath xpath_9 = org.dom4j.DocumentHelper.createXPath(nsTool.addDefaultNSPrefix("SMTPPort","/connectionStrings"));
	xpath_9.setNamespaceURIs(xmlNameSpaceMap);
	
			xpaths.put(9,xpath_9);
			
	org.dom4j.XPath xpath_10 = org.dom4j.DocumentHelper.createXPath(nsTool.addDefaultNSPrefix("UsernameMail","/connectionStrings"));
	xpath_10.setNamespaceURIs(xmlNameSpaceMap);
	
			xpaths.put(10,xpath_10);
			
	org.dom4j.XPath xpath_11 = org.dom4j.DocumentHelper.createXPath(nsTool.addDefaultNSPrefix("PasswordMail","/connectionStrings"));
	xpath_11.setNamespaceURIs(xmlNameSpaceMap);
	
			xpaths.put(11,xpath_11);
			
	     }
	   
	      public void initXPaths(java.util.Map<Integer,org.dom4j.XPath> xpaths,NameSpaceTool_tFileInputXML_1 nsTool,
			    java.util.HashMap<String,String> xmlNameSpaceMap){
			    
			        initXPaths_0(xpaths,nsTool, xmlNameSpaceMap);
			    
		   }
	}
	XPathUtil_tFileInputXML_1 xPathUtil_tFileInputXML_1 = new XPathUtil_tFileInputXML_1();
	xPathUtil_tFileInputXML_1.initXPaths(xpaths_tFileInputXML_1, nsTool_tFileInputXML_1, xmlNameSpaceMap_tFileInputXML_1);
for (org.dom4j.Node temp_tFileInputXML_1: nodeList_tFileInputXML_1) {
	if (nb_line_tFileInputXML_1>=50) {
	
		break;
	}
		nb_line_tFileInputXML_1++;
		
	row3 = null;			
	boolean whetherReject_tFileInputXML_1 = false;
	row3 = new row3Struct();
	try{
    Object obj0_tFileInputXML_1 = xpaths_tFileInputXML_1.get(0).evaluate(temp_tFileInputXML_1);
    if(obj0_tFileInputXML_1 == null) {
    	node_tFileInputXML_1 = null;
    	str_tFileInputXML_1 = "";
    	
    } else if(obj0_tFileInputXML_1 instanceof org.dom4j.Node) {
    	node_tFileInputXML_1 = (org.dom4j.Node)obj0_tFileInputXML_1;
    	str_tFileInputXML_1 = org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
    } else if(obj0_tFileInputXML_1 instanceof String || obj0_tFileInputXML_1 instanceof Number){
    	node_tFileInputXML_1 = temp_tFileInputXML_1;
    	str_tFileInputXML_1 = String.valueOf(obj0_tFileInputXML_1);
    } else if(obj0_tFileInputXML_1 instanceof java.util.List){
    	java.util.List<org.dom4j.Node> nodes_tFileInputXML_1 = (java.util.List<org.dom4j.Node>)obj0_tFileInputXML_1;
    	node_tFileInputXML_1 = nodes_tFileInputXML_1.size()>0 ? nodes_tFileInputXML_1.get(0) : null;
    	str_tFileInputXML_1 = node_tFileInputXML_1==null?"":org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
	}
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row3.DB_Host =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row3.DB_Host ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row3.DB_Host =null;
									}else{
		row3.DB_Host = str_tFileInputXML_1;
	}
    Object obj1_tFileInputXML_1 = xpaths_tFileInputXML_1.get(1).evaluate(temp_tFileInputXML_1);
    if(obj1_tFileInputXML_1 == null) {
    	node_tFileInputXML_1 = null;
    	str_tFileInputXML_1 = "";
    	
    } else if(obj1_tFileInputXML_1 instanceof org.dom4j.Node) {
    	node_tFileInputXML_1 = (org.dom4j.Node)obj1_tFileInputXML_1;
    	str_tFileInputXML_1 = org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
    } else if(obj1_tFileInputXML_1 instanceof String || obj1_tFileInputXML_1 instanceof Number){
    	node_tFileInputXML_1 = temp_tFileInputXML_1;
    	str_tFileInputXML_1 = String.valueOf(obj1_tFileInputXML_1);
    } else if(obj1_tFileInputXML_1 instanceof java.util.List){
    	java.util.List<org.dom4j.Node> nodes_tFileInputXML_1 = (java.util.List<org.dom4j.Node>)obj1_tFileInputXML_1;
    	node_tFileInputXML_1 = nodes_tFileInputXML_1.size()>0 ? nodes_tFileInputXML_1.get(0) : null;
    	str_tFileInputXML_1 = node_tFileInputXML_1==null?"":org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
	}
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row3.DB_Port =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row3.DB_Port ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row3.DB_Port =null;
									}else{
		row3.DB_Port = str_tFileInputXML_1;
	}
    Object obj2_tFileInputXML_1 = xpaths_tFileInputXML_1.get(2).evaluate(temp_tFileInputXML_1);
    if(obj2_tFileInputXML_1 == null) {
    	node_tFileInputXML_1 = null;
    	str_tFileInputXML_1 = "";
    	
    } else if(obj2_tFileInputXML_1 instanceof org.dom4j.Node) {
    	node_tFileInputXML_1 = (org.dom4j.Node)obj2_tFileInputXML_1;
    	str_tFileInputXML_1 = org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
    } else if(obj2_tFileInputXML_1 instanceof String || obj2_tFileInputXML_1 instanceof Number){
    	node_tFileInputXML_1 = temp_tFileInputXML_1;
    	str_tFileInputXML_1 = String.valueOf(obj2_tFileInputXML_1);
    } else if(obj2_tFileInputXML_1 instanceof java.util.List){
    	java.util.List<org.dom4j.Node> nodes_tFileInputXML_1 = (java.util.List<org.dom4j.Node>)obj2_tFileInputXML_1;
    	node_tFileInputXML_1 = nodes_tFileInputXML_1.size()>0 ? nodes_tFileInputXML_1.get(0) : null;
    	str_tFileInputXML_1 = node_tFileInputXML_1==null?"":org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
	}
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row3.DB_Sid =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row3.DB_Sid ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row3.DB_Sid =null;
									}else{
		row3.DB_Sid = str_tFileInputXML_1;
	}
    Object obj3_tFileInputXML_1 = xpaths_tFileInputXML_1.get(3).evaluate(temp_tFileInputXML_1);
    if(obj3_tFileInputXML_1 == null) {
    	node_tFileInputXML_1 = null;
    	str_tFileInputXML_1 = "";
    	
    } else if(obj3_tFileInputXML_1 instanceof org.dom4j.Node) {
    	node_tFileInputXML_1 = (org.dom4j.Node)obj3_tFileInputXML_1;
    	str_tFileInputXML_1 = org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
    } else if(obj3_tFileInputXML_1 instanceof String || obj3_tFileInputXML_1 instanceof Number){
    	node_tFileInputXML_1 = temp_tFileInputXML_1;
    	str_tFileInputXML_1 = String.valueOf(obj3_tFileInputXML_1);
    } else if(obj3_tFileInputXML_1 instanceof java.util.List){
    	java.util.List<org.dom4j.Node> nodes_tFileInputXML_1 = (java.util.List<org.dom4j.Node>)obj3_tFileInputXML_1;
    	node_tFileInputXML_1 = nodes_tFileInputXML_1.size()>0 ? nodes_tFileInputXML_1.get(0) : null;
    	str_tFileInputXML_1 = node_tFileInputXML_1==null?"":org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
	}
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row3.DB_ServiceName =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row3.DB_ServiceName ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row3.DB_ServiceName =null;
									}else{
		row3.DB_ServiceName = str_tFileInputXML_1;
	}
    Object obj4_tFileInputXML_1 = xpaths_tFileInputXML_1.get(4).evaluate(temp_tFileInputXML_1);
    if(obj4_tFileInputXML_1 == null) {
    	node_tFileInputXML_1 = null;
    	str_tFileInputXML_1 = "";
    	
    } else if(obj4_tFileInputXML_1 instanceof org.dom4j.Node) {
    	node_tFileInputXML_1 = (org.dom4j.Node)obj4_tFileInputXML_1;
    	str_tFileInputXML_1 = org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
    } else if(obj4_tFileInputXML_1 instanceof String || obj4_tFileInputXML_1 instanceof Number){
    	node_tFileInputXML_1 = temp_tFileInputXML_1;
    	str_tFileInputXML_1 = String.valueOf(obj4_tFileInputXML_1);
    } else if(obj4_tFileInputXML_1 instanceof java.util.List){
    	java.util.List<org.dom4j.Node> nodes_tFileInputXML_1 = (java.util.List<org.dom4j.Node>)obj4_tFileInputXML_1;
    	node_tFileInputXML_1 = nodes_tFileInputXML_1.size()>0 ? nodes_tFileInputXML_1.get(0) : null;
    	str_tFileInputXML_1 = node_tFileInputXML_1==null?"":org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
	}
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row3.DB_Schema =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row3.DB_Schema ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row3.DB_Schema =null;
									}else{
		row3.DB_Schema = str_tFileInputXML_1;
	}
    Object obj5_tFileInputXML_1 = xpaths_tFileInputXML_1.get(5).evaluate(temp_tFileInputXML_1);
    if(obj5_tFileInputXML_1 == null) {
    	node_tFileInputXML_1 = null;
    	str_tFileInputXML_1 = "";
    	
    } else if(obj5_tFileInputXML_1 instanceof org.dom4j.Node) {
    	node_tFileInputXML_1 = (org.dom4j.Node)obj5_tFileInputXML_1;
    	str_tFileInputXML_1 = org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
    } else if(obj5_tFileInputXML_1 instanceof String || obj5_tFileInputXML_1 instanceof Number){
    	node_tFileInputXML_1 = temp_tFileInputXML_1;
    	str_tFileInputXML_1 = String.valueOf(obj5_tFileInputXML_1);
    } else if(obj5_tFileInputXML_1 instanceof java.util.List){
    	java.util.List<org.dom4j.Node> nodes_tFileInputXML_1 = (java.util.List<org.dom4j.Node>)obj5_tFileInputXML_1;
    	node_tFileInputXML_1 = nodes_tFileInputXML_1.size()>0 ? nodes_tFileInputXML_1.get(0) : null;
    	str_tFileInputXML_1 = node_tFileInputXML_1==null?"":org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
	}
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row3.DB_User =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row3.DB_User ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row3.DB_User =null;
									}else{
		row3.DB_User = str_tFileInputXML_1;
	}
    Object obj6_tFileInputXML_1 = xpaths_tFileInputXML_1.get(6).evaluate(temp_tFileInputXML_1);
    if(obj6_tFileInputXML_1 == null) {
    	node_tFileInputXML_1 = null;
    	str_tFileInputXML_1 = "";
    	
    } else if(obj6_tFileInputXML_1 instanceof org.dom4j.Node) {
    	node_tFileInputXML_1 = (org.dom4j.Node)obj6_tFileInputXML_1;
    	str_tFileInputXML_1 = org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
    } else if(obj6_tFileInputXML_1 instanceof String || obj6_tFileInputXML_1 instanceof Number){
    	node_tFileInputXML_1 = temp_tFileInputXML_1;
    	str_tFileInputXML_1 = String.valueOf(obj6_tFileInputXML_1);
    } else if(obj6_tFileInputXML_1 instanceof java.util.List){
    	java.util.List<org.dom4j.Node> nodes_tFileInputXML_1 = (java.util.List<org.dom4j.Node>)obj6_tFileInputXML_1;
    	node_tFileInputXML_1 = nodes_tFileInputXML_1.size()>0 ? nodes_tFileInputXML_1.get(0) : null;
    	str_tFileInputXML_1 = node_tFileInputXML_1==null?"":org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
	}
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row3.DB_Password =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row3.DB_Password ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row3.DB_Password =null;
									}else{
		row3.DB_Password = str_tFileInputXML_1;
	}
    Object obj7_tFileInputXML_1 = xpaths_tFileInputXML_1.get(7).evaluate(temp_tFileInputXML_1);
    if(obj7_tFileInputXML_1 == null) {
    	node_tFileInputXML_1 = null;
    	str_tFileInputXML_1 = "";
    	
    } else if(obj7_tFileInputXML_1 instanceof org.dom4j.Node) {
    	node_tFileInputXML_1 = (org.dom4j.Node)obj7_tFileInputXML_1;
    	str_tFileInputXML_1 = org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
    } else if(obj7_tFileInputXML_1 instanceof String || obj7_tFileInputXML_1 instanceof Number){
    	node_tFileInputXML_1 = temp_tFileInputXML_1;
    	str_tFileInputXML_1 = String.valueOf(obj7_tFileInputXML_1);
    } else if(obj7_tFileInputXML_1 instanceof java.util.List){
    	java.util.List<org.dom4j.Node> nodes_tFileInputXML_1 = (java.util.List<org.dom4j.Node>)obj7_tFileInputXML_1;
    	node_tFileInputXML_1 = nodes_tFileInputXML_1.size()>0 ? nodes_tFileInputXML_1.get(0) : null;
    	str_tFileInputXML_1 = node_tFileInputXML_1==null?"":org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
	}
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row3.FS_PathStorage =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row3.FS_PathStorage ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row3.FS_PathStorage =null;
									}else{
		row3.FS_PathStorage = str_tFileInputXML_1;
	}
    Object obj8_tFileInputXML_1 = xpaths_tFileInputXML_1.get(8).evaluate(temp_tFileInputXML_1);
    if(obj8_tFileInputXML_1 == null) {
    	node_tFileInputXML_1 = null;
    	str_tFileInputXML_1 = "";
    	
    } else if(obj8_tFileInputXML_1 instanceof org.dom4j.Node) {
    	node_tFileInputXML_1 = (org.dom4j.Node)obj8_tFileInputXML_1;
    	str_tFileInputXML_1 = org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
    } else if(obj8_tFileInputXML_1 instanceof String || obj8_tFileInputXML_1 instanceof Number){
    	node_tFileInputXML_1 = temp_tFileInputXML_1;
    	str_tFileInputXML_1 = String.valueOf(obj8_tFileInputXML_1);
    } else if(obj8_tFileInputXML_1 instanceof java.util.List){
    	java.util.List<org.dom4j.Node> nodes_tFileInputXML_1 = (java.util.List<org.dom4j.Node>)obj8_tFileInputXML_1;
    	node_tFileInputXML_1 = nodes_tFileInputXML_1.size()>0 ? nodes_tFileInputXML_1.get(0) : null;
    	str_tFileInputXML_1 = node_tFileInputXML_1==null?"":org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
	}
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row3.ML_SMTPHost =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row3.ML_SMTPHost ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row3.ML_SMTPHost =null;
									}else{
		row3.ML_SMTPHost = str_tFileInputXML_1;
	}
    Object obj9_tFileInputXML_1 = xpaths_tFileInputXML_1.get(9).evaluate(temp_tFileInputXML_1);
    if(obj9_tFileInputXML_1 == null) {
    	node_tFileInputXML_1 = null;
    	str_tFileInputXML_1 = "";
    	
    } else if(obj9_tFileInputXML_1 instanceof org.dom4j.Node) {
    	node_tFileInputXML_1 = (org.dom4j.Node)obj9_tFileInputXML_1;
    	str_tFileInputXML_1 = org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
    } else if(obj9_tFileInputXML_1 instanceof String || obj9_tFileInputXML_1 instanceof Number){
    	node_tFileInputXML_1 = temp_tFileInputXML_1;
    	str_tFileInputXML_1 = String.valueOf(obj9_tFileInputXML_1);
    } else if(obj9_tFileInputXML_1 instanceof java.util.List){
    	java.util.List<org.dom4j.Node> nodes_tFileInputXML_1 = (java.util.List<org.dom4j.Node>)obj9_tFileInputXML_1;
    	node_tFileInputXML_1 = nodes_tFileInputXML_1.size()>0 ? nodes_tFileInputXML_1.get(0) : null;
    	str_tFileInputXML_1 = node_tFileInputXML_1==null?"":org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
	}
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row3.ML_SMTPPort =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row3.ML_SMTPPort ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row3.ML_SMTPPort =null;
									}else{
		row3.ML_SMTPPort = str_tFileInputXML_1;
	}
    Object obj10_tFileInputXML_1 = xpaths_tFileInputXML_1.get(10).evaluate(temp_tFileInputXML_1);
    if(obj10_tFileInputXML_1 == null) {
    	node_tFileInputXML_1 = null;
    	str_tFileInputXML_1 = "";
    	
    } else if(obj10_tFileInputXML_1 instanceof org.dom4j.Node) {
    	node_tFileInputXML_1 = (org.dom4j.Node)obj10_tFileInputXML_1;
    	str_tFileInputXML_1 = org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
    } else if(obj10_tFileInputXML_1 instanceof String || obj10_tFileInputXML_1 instanceof Number){
    	node_tFileInputXML_1 = temp_tFileInputXML_1;
    	str_tFileInputXML_1 = String.valueOf(obj10_tFileInputXML_1);
    } else if(obj10_tFileInputXML_1 instanceof java.util.List){
    	java.util.List<org.dom4j.Node> nodes_tFileInputXML_1 = (java.util.List<org.dom4j.Node>)obj10_tFileInputXML_1;
    	node_tFileInputXML_1 = nodes_tFileInputXML_1.size()>0 ? nodes_tFileInputXML_1.get(0) : null;
    	str_tFileInputXML_1 = node_tFileInputXML_1==null?"":org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
	}
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row3.ML_UsernameMail =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row3.ML_UsernameMail ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row3.ML_UsernameMail =null;
									}else{
		row3.ML_UsernameMail = str_tFileInputXML_1;
	}
    Object obj11_tFileInputXML_1 = xpaths_tFileInputXML_1.get(11).evaluate(temp_tFileInputXML_1);
    if(obj11_tFileInputXML_1 == null) {
    	node_tFileInputXML_1 = null;
    	str_tFileInputXML_1 = "";
    	
    } else if(obj11_tFileInputXML_1 instanceof org.dom4j.Node) {
    	node_tFileInputXML_1 = (org.dom4j.Node)obj11_tFileInputXML_1;
    	str_tFileInputXML_1 = org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
    } else if(obj11_tFileInputXML_1 instanceof String || obj11_tFileInputXML_1 instanceof Number){
    	node_tFileInputXML_1 = temp_tFileInputXML_1;
    	str_tFileInputXML_1 = String.valueOf(obj11_tFileInputXML_1);
    } else if(obj11_tFileInputXML_1 instanceof java.util.List){
    	java.util.List<org.dom4j.Node> nodes_tFileInputXML_1 = (java.util.List<org.dom4j.Node>)obj11_tFileInputXML_1;
    	node_tFileInputXML_1 = nodes_tFileInputXML_1.size()>0 ? nodes_tFileInputXML_1.get(0) : null;
    	str_tFileInputXML_1 = node_tFileInputXML_1==null?"":org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
	}
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row3.ML_PasswordMail =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row3.ML_PasswordMail ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row3.ML_PasswordMail =null;
									}else{
		row3.ML_PasswordMail = str_tFileInputXML_1;
	} 
			
    } catch (java.lang.Exception e) {
globalMap.put("tFileInputXML_1_ERROR_MESSAGE",e.getMessage());
        whetherReject_tFileInputXML_1 = true;
                System.err.println(e.getMessage());
                row3 = null;
    }
			
			

 



/**
 * [tFileInputXML_1 begin ] stop
 */
	
	/**
	 * [tFileInputXML_1 main ] start
	 */

	

	
	
	currentComponent="tFileInputXML_1";
	
	

 


	tos_count_tFileInputXML_1++;

/**
 * [tFileInputXML_1 main ] stop
 */
	
	/**
	 * [tFileInputXML_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileInputXML_1";
	
	

 



/**
 * [tFileInputXML_1 process_data_begin ] stop
 */
// Start of branch "row3"
if(row3 != null) { 



	
	/**
	 * [tJavaRow_3 main ] start
	 */

	

	
	
	currentComponent="tJavaRow_3";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row3"
						
						);
					}
					

    System.out.println(TalendDate.getCurrentDate()+" : Archivo de configuración encontrado.");

//****************************************************************************************//
//*** ALMACENAMIENTO EN VARIABLES DE CONTEXTO DE LA CONFIGURACIÓN DE LA BASE DE DATOS ****//
//****************************************************************************************//
context.oracle_Host=row3.DB_Host;
context.oracle_Port=row3.DB_Port;
context.oracle_Sid=row3.DB_Sid;
context.oracle_ServiceName=row3.DB_ServiceName;
context.oracle_Schema=row3.DB_Schema;
context.oracle_User=row3.DB_User;
context.oracle_Password=row3.DB_Password;


System.out.println(context.oracle_ServiceName);

//****************************************************************************************//
//*** ALMACENAMIENTO EN VARIABLES DE CONTEXTO DE LA CONFIGURACIÓN DEL FILE SYSTEM ********//
//****************************************************************************************//
context.fileSystem_Path=row3.FS_PathStorage;

System.out.println(context.fileSystem_Path);
//****************************************************************************************//
//*** ALMACENAMIENTO EN VARIABLES DE CONTEXTO DE LA CONFIGURACIÓN DEL EMAIL **************//
//****************************************************************************************//
context.mail_SMTPHost=row3.ML_SMTPHost;
context.mail_SMTPPort=row3.ML_SMTPPort;
context.mail_UsernameMail=row3.ML_UsernameMail;
context.mail_PasswordMail=row3.ML_PasswordMail;

    nb_line_tJavaRow_3++;   

 


	tos_count_tJavaRow_3++;

/**
 * [tJavaRow_3 main ] stop
 */
	
	/**
	 * [tJavaRow_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJavaRow_3";
	
	

 



/**
 * [tJavaRow_3 process_data_begin ] stop
 */
	
	/**
	 * [tJavaRow_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tJavaRow_3";
	
	

 



/**
 * [tJavaRow_3 process_data_end ] stop
 */

} // End of branch "row3"




	
	/**
	 * [tFileInputXML_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileInputXML_1";
	
	

 



/**
 * [tFileInputXML_1 process_data_end ] stop
 */
	
	/**
	 * [tFileInputXML_1 end ] start
	 */

	

	
	
	currentComponent="tFileInputXML_1";
	
	


}
	}
	globalMap.put("tFileInputXML_1_NB_LINE",nb_line_tFileInputXML_1);

	

 

ok_Hash.put("tFileInputXML_1", true);
end_Hash.put("tFileInputXML_1", System.currentTimeMillis());




/**
 * [tFileInputXML_1 end ] stop
 */

	
	/**
	 * [tJavaRow_3 end ] start
	 */

	

	
	
	currentComponent="tJavaRow_3";
	
	

globalMap.put("tJavaRow_3_NB_LINE",nb_line_tJavaRow_3);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row3");
			  	}
			  	
 

ok_Hash.put("tJavaRow_3", true);
end_Hash.put("tJavaRow_3", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk19", 0, "ok");
				}
				tOracleConnection_1Process(globalMap);



/**
 * [tJavaRow_3 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileInputXML_1 finally ] start
	 */

	

	
	
	currentComponent="tFileInputXML_1";
	
	

 



/**
 * [tFileInputXML_1 finally ] stop
 */

	
	/**
	 * [tJavaRow_3 finally ] start
	 */

	

	
	
	currentComponent="tJavaRow_3";
	
	

 



/**
 * [tJavaRow_3 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileInputXML_1_SUBPROCESS_STATE", 1);
	}
	


public void tOracleConnection_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleConnection_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tOracleConnection_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleConnection_1", false);
		start_Hash.put("tOracleConnection_1", System.currentTimeMillis());
		
	
	currentComponent="tOracleConnection_1";
	
	
		int tos_count_tOracleConnection_1 = 0;
		
	

	
        String url_tOracleConnection_1 = "jdbc:oracle:thin:@(description=(address=(protocol=tcp)(host=" + context.oracle_Host + ")(port=" + context.oracle_Port + "))(connect_data=(service_name=" + context.oracle_ServiceName + ")))";
    	globalMap.put("connectionType_" + "tOracleConnection_1", "ORACLE_SERVICE_NAME");
	String dbUser_tOracleConnection_1 = context.oracle_User;
	
	
		
	final String decryptedPassword_tOracleConnection_1 = context.oracle_Password; 
		String dbPwd_tOracleConnection_1 = decryptedPassword_tOracleConnection_1;
	
	
	java.sql.Connection conn_tOracleConnection_1 = null;
	
		
			String driverClass_tOracleConnection_1 = "oracle.jdbc.OracleDriver";
			java.lang.Class jdbcclazz_tOracleConnection_1 = java.lang.Class.forName(driverClass_tOracleConnection_1);
			globalMap.put("driverClass_tOracleConnection_1", driverClass_tOracleConnection_1);
		
			java.util.Properties atnParamsPrope_tOracleConnection_1 = new java.util.Properties();
			    atnParamsPrope_tOracleConnection_1.put("user",dbUser_tOracleConnection_1);
			    atnParamsPrope_tOracleConnection_1.put("password",dbPwd_tOracleConnection_1);
			if(context.oracle_AdditionalParams != null && !"\"\"".equals(context.oracle_AdditionalParams) && !"".equals(context.oracle_AdditionalParams)){
                atnParamsPrope_tOracleConnection_1.load(new java.io.ByteArrayInputStream(context.oracle_AdditionalParams.replace("&", "\n").getBytes()));
            }
         
			conn_tOracleConnection_1 = java.sql.DriverManager.getConnection(url_tOracleConnection_1, atnParamsPrope_tOracleConnection_1);

		globalMap.put("conn_tOracleConnection_1", conn_tOracleConnection_1);
	if (null != conn_tOracleConnection_1) {
		
			conn_tOracleConnection_1.setAutoCommit(true);
	}
        globalMap.put("host_" + "tOracleConnection_1",context.oracle_Host);
        globalMap.put("port_" + "tOracleConnection_1",context.oracle_Port);
        globalMap.put("dbname_" + "tOracleConnection_1",context.oracle_ServiceName);

	globalMap.put("dbschema_" + "tOracleConnection_1", context.oracle_Schema);
	globalMap.put("username_" + "tOracleConnection_1",context.oracle_User);
	globalMap.put("password_" + "tOracleConnection_1",dbPwd_tOracleConnection_1);

 



/**
 * [tOracleConnection_1 begin ] stop
 */
	
	/**
	 * [tOracleConnection_1 main ] start
	 */

	

	
	
	currentComponent="tOracleConnection_1";
	
	

 


	tos_count_tOracleConnection_1++;

/**
 * [tOracleConnection_1 main ] stop
 */
	
	/**
	 * [tOracleConnection_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleConnection_1";
	
	

 



/**
 * [tOracleConnection_1 process_data_begin ] stop
 */
	
	/**
	 * [tOracleConnection_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleConnection_1";
	
	

 



/**
 * [tOracleConnection_1 process_data_end ] stop
 */
	
	/**
	 * [tOracleConnection_1 end ] start
	 */

	

	
	
	currentComponent="tOracleConnection_1";
	
	

 

ok_Hash.put("tOracleConnection_1", true);
end_Hash.put("tOracleConnection_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk21", 0, "ok");
				}
				tRunJob_6Process(globalMap);
				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk23", 0, "ok");
				}
				tJava_7Process(globalMap);
				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk35", 0, "ok");
				}
				tFixedFlowInput_7Process(globalMap);



/**
 * [tOracleConnection_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleConnection_1 finally ] start
	 */

	

	
	
	currentComponent="tOracleConnection_1";
	
	

 



/**
 * [tOracleConnection_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleConnection_1_SUBPROCESS_STATE", 1);
	}
	


public void tRunJob_6Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tRunJob_6_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tRunJob_6 begin ] start
	 */

	

	
		
		ok_Hash.put("tRunJob_6", false);
		start_Hash.put("tRunJob_6", System.currentTimeMillis());
		
	
	currentComponent="tRunJob_6";
	
	
		int tos_count_tRunJob_6 = 0;
		


 



/**
 * [tRunJob_6 begin ] stop
 */
	
	/**
	 * [tRunJob_6 main ] start
	 */

	

	
	
	currentComponent="tRunJob_6";
	
	
	java.util.List<String> paraList_tRunJob_6 = new java.util.ArrayList<String>();
	
	        				paraList_tRunJob_6.add("--father_pid="+pid);
	      			
	        				paraList_tRunJob_6.add("--root_pid="+rootPid);
	      			
	        				paraList_tRunJob_6.add("--father_node=tRunJob_6");
	      			
	        				paraList_tRunJob_6.add("--context=Default");
	      			
		if(enableLogStash){
			paraList_tRunJob_6.add("--audit.enabled="+enableLogStash);
		}
		
	//for feature:10589
	
		paraList_tRunJob_6.add("--stat_port=" + portStats);
	

	if(resuming_logs_dir_path != null){
		paraList_tRunJob_6.add("--resuming_logs_dir_path=" + resuming_logs_dir_path);
	}
	String childResumePath_tRunJob_6 = ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path);
	String tRunJobName_tRunJob_6 = ResumeUtil.getRighttRunJob(resuming_checkpoint_path);
	if("tRunJob_6".equals(tRunJobName_tRunJob_6) && childResumePath_tRunJob_6 != null){
		paraList_tRunJob_6.add("--resuming_checkpoint_path=" + ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path));
	}
	paraList_tRunJob_6.add("--parent_part_launcher=JOB:" + jobName + "/NODE:tRunJob_6");
	
	java.util.Map<String, Object> parentContextMap_tRunJob_6 = new java.util.HashMap<String, Object>();

	

	Object obj_tRunJob_6 = null;

	
		obj_tRunJob_6 = context.oracle_Host;
		if(obj_tRunJob_6!=null) {
			if (obj_tRunJob_6.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_6.add("--context_param oracle_Host=" + ((java.util.Date) obj_tRunJob_6).getTime());
			} else {
				
					paraList_tRunJob_6.add("--context_param oracle_Host=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_6));
					
				
			}
		} else {
			paraList_tRunJob_6.add("--context_param oracle_Host=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_6.put("oracle_Host", obj_tRunJob_6);
	
		obj_tRunJob_6 = context.oracle_Port;
		if(obj_tRunJob_6!=null) {
			if (obj_tRunJob_6.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_6.add("--context_param oracle_Port=" + ((java.util.Date) obj_tRunJob_6).getTime());
			} else {
				
					paraList_tRunJob_6.add("--context_param oracle_Port=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_6));
					
				
			}
		} else {
			paraList_tRunJob_6.add("--context_param oracle_Port=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_6.put("oracle_Port", obj_tRunJob_6);
	
		obj_tRunJob_6 = context.oracle_Sid;
		if(obj_tRunJob_6!=null) {
			if (obj_tRunJob_6.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_6.add("--context_param oracle_Sid=" + ((java.util.Date) obj_tRunJob_6).getTime());
			} else {
				
					paraList_tRunJob_6.add("--context_param oracle_Sid=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_6));
					
				
			}
		} else {
			paraList_tRunJob_6.add("--context_param oracle_Sid=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_6.put("oracle_Sid", obj_tRunJob_6);
	
		obj_tRunJob_6 = context.oracle_ServiceName;
		if(obj_tRunJob_6!=null) {
			if (obj_tRunJob_6.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_6.add("--context_param oracle_ServiceName=" + ((java.util.Date) obj_tRunJob_6).getTime());
			} else {
				
					paraList_tRunJob_6.add("--context_param oracle_ServiceName=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_6));
					
				
			}
		} else {
			paraList_tRunJob_6.add("--context_param oracle_ServiceName=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_6.put("oracle_ServiceName", obj_tRunJob_6);
	
		obj_tRunJob_6 = context.oracle_Schema;
		if(obj_tRunJob_6!=null) {
			if (obj_tRunJob_6.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_6.add("--context_param oracle_Schema=" + ((java.util.Date) obj_tRunJob_6).getTime());
			} else {
				
					paraList_tRunJob_6.add("--context_param oracle_Schema=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_6));
					
				
			}
		} else {
			paraList_tRunJob_6.add("--context_param oracle_Schema=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_6.put("oracle_Schema", obj_tRunJob_6);
	
		obj_tRunJob_6 = context.oracle_User;
		if(obj_tRunJob_6!=null) {
			if (obj_tRunJob_6.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_6.add("--context_param oracle_User=" + ((java.util.Date) obj_tRunJob_6).getTime());
			} else {
				
					paraList_tRunJob_6.add("--context_param oracle_User=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_6));
					
				
			}
		} else {
			paraList_tRunJob_6.add("--context_param oracle_User=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_6.put("oracle_User", obj_tRunJob_6);
	
		obj_tRunJob_6 = context.oracle_Password;
		if(obj_tRunJob_6!=null) {
			if (obj_tRunJob_6.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_6.add("--context_param oracle_Password=" + ((java.util.Date) obj_tRunJob_6).getTime());
			} else {
				
					paraList_tRunJob_6.add("--context_param oracle_Password=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_6));
					
				
			}
		} else {
			paraList_tRunJob_6.add("--context_param oracle_Password=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_6.put("oracle_Password", obj_tRunJob_6);
	
	
		afi_principal.desactivararchivos_0_1.DesactivarArchivos childJob_tRunJob_6 = new afi_principal.desactivararchivos_0_1.DesactivarArchivos();
	    // pass DataSources
	    java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_6 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
	            .get(KEY_DB_DATASOURCES);
	    if (null != talendDataSources_tRunJob_6) {
	        java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_6 = new java.util.HashMap<String, javax.sql.DataSource>();
	        for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_6 : talendDataSources_tRunJob_6
			        .entrySet()) {
	            dataSources_tRunJob_6.put(talendDataSourceEntry_tRunJob_6.getKey(),
	                    talendDataSourceEntry_tRunJob_6.getValue().getRawDataSource());
	        }
	        childJob_tRunJob_6.setDataSources(dataSources_tRunJob_6);
	    }
		  
			childJob_tRunJob_6.parentContextMap = parentContextMap_tRunJob_6;
		  
		
		String[][] childReturn_tRunJob_6 = childJob_tRunJob_6.runJob((String[]) paraList_tRunJob_6.toArray(new String[paraList_tRunJob_6.size()]));
		
            if(childJob_tRunJob_6.getErrorCode() == null){
                globalMap.put("tRunJob_6_CHILD_RETURN_CODE", childJob_tRunJob_6.getStatus() != null && ("failure").equals(childJob_tRunJob_6.getStatus()) ? 1 : 0);
            }else{
                globalMap.put("tRunJob_6_CHILD_RETURN_CODE", childJob_tRunJob_6.getErrorCode());
            }
            if (childJob_tRunJob_6.getExceptionStackTrace() != null) {
                globalMap.put("tRunJob_6_CHILD_EXCEPTION_STACKTRACE", childJob_tRunJob_6.getExceptionStackTrace());
            }
                    errorCode = childJob_tRunJob_6.getErrorCode();
                if (childJob_tRunJob_6.getErrorCode() != null || ("failure").equals(childJob_tRunJob_6.getStatus())) {
                    java.lang.Exception ce_tRunJob_6 = childJob_tRunJob_6.getException();
                    throw new RuntimeException("Child job running failed.\n" + ((ce_tRunJob_6!=null) ? (ce_tRunJob_6.getClass().getName() + ": " + ce_tRunJob_6.getMessage()) : ""));
                }

 


	tos_count_tRunJob_6++;

/**
 * [tRunJob_6 main ] stop
 */
	
	/**
	 * [tRunJob_6 process_data_begin ] start
	 */

	

	
	
	currentComponent="tRunJob_6";
	
	

 



/**
 * [tRunJob_6 process_data_begin ] stop
 */
	
	/**
	 * [tRunJob_6 process_data_end ] start
	 */

	

	
	
	currentComponent="tRunJob_6";
	
	

 



/**
 * [tRunJob_6 process_data_end ] stop
 */
	
	/**
	 * [tRunJob_6 end ] start
	 */

	

	
	
	currentComponent="tRunJob_6";
	
	

 

ok_Hash.put("tRunJob_6", true);
end_Hash.put("tRunJob_6", System.currentTimeMillis());




/**
 * [tRunJob_6 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tRunJob_6 finally ] start
	 */

	

	
	
	currentComponent="tRunJob_6";
	
	
	
 



/**
 * [tRunJob_6 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tRunJob_6_SUBPROCESS_STATE", 1);
	}
	


public void tJava_7Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_7_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tJava_7 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_7", false);
		start_Hash.put("tJava_7", System.currentTimeMillis());
		
	
	currentComponent="tJava_7";
	
	
		int tos_count_tJava_7 = 0;
		


//****************************************************************************************//
System.out.println(TalendDate.getCurrentDate()+" : Conexión realizada correctamente.");
System.out.println("*** PREJOB FINALIZADO ETL PRINCIPAL ****************************************************");
//****************************************************************************************//


 



/**
 * [tJava_7 begin ] stop
 */
	
	/**
	 * [tJava_7 main ] start
	 */

	

	
	
	currentComponent="tJava_7";
	
	

 


	tos_count_tJava_7++;

/**
 * [tJava_7 main ] stop
 */
	
	/**
	 * [tJava_7 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_7";
	
	

 



/**
 * [tJava_7 process_data_begin ] stop
 */
	
	/**
	 * [tJava_7 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_7";
	
	

 



/**
 * [tJava_7 process_data_end ] stop
 */
	
	/**
	 * [tJava_7 end ] start
	 */

	

	
	
	currentComponent="tJava_7";
	
	

 

ok_Hash.put("tJava_7", true);
end_Hash.put("tJava_7", System.currentTimeMillis());




/**
 * [tJava_7 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_7 finally ] start
	 */

	

	
	
	currentComponent="tJava_7";
	
	

 



/**
 * [tJava_7 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_7_SUBPROCESS_STATE", 1);
	}
	


public void tDie_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDie_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tDie_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDie_1", false);
		start_Hash.put("tDie_1", System.currentTimeMillis());
		
	
	currentComponent="tDie_1";
	
	
		int tos_count_tDie_1 = 0;
		

 



/**
 * [tDie_1 begin ] stop
 */
	
	/**
	 * [tDie_1 main ] start
	 */

	

	
	
	currentComponent="tDie_1";
	
	

	try {
	globalMap.put("tDie_1_DIE_PRIORITY", 5);
	System.err.println("the end is near");
	
	globalMap.put("tDie_1_DIE_MESSAGE", "the end is near");
	globalMap.put("tDie_1_DIE_MESSAGES", "the end is near");
	
	} catch (Exception | Error e_tDie_1) {
	    globalMap.put("tDie_1_ERROR_MESSAGE",e_tDie_1.getMessage());
		logIgnoredError(String.format("tDie_1 - tDie failed to log message due to internal error: %s", e_tDie_1), e_tDie_1);
	}
	
	currentComponent = "tDie_1";
	status = "failure";
        errorCode = new Integer(4);
        globalMap.put("tDie_1_DIE_CODE", errorCode);        

    
	if(true){	
		TDieException e_tDie_1 = new TDieException();

		

		throw e_tDie_1;
	}

 


	tos_count_tDie_1++;

/**
 * [tDie_1 main ] stop
 */
	
	/**
	 * [tDie_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDie_1";
	
	

 



/**
 * [tDie_1 process_data_begin ] stop
 */
	
	/**
	 * [tDie_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDie_1";
	
	

 



/**
 * [tDie_1 process_data_end ] stop
 */
	
	/**
	 * [tDie_1 end ] start
	 */

	

	
	
	currentComponent="tDie_1";
	
	

 

ok_Hash.put("tDie_1", true);
end_Hash.put("tDie_1", System.currentTimeMillis());




/**
 * [tDie_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDie_1 finally ] start
	 */

	

	
	
	currentComponent="tDie_1";
	
	

 



/**
 * [tDie_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDie_1_SUBPROCESS_STATE", 1);
	}
	


public static class row10Struct implements routines.system.IPersistableRow<row10Struct> {
    final static byte[] commonByteArrayLock_AFI_PRINCIPAL_ETL_principal = new byte[0];
    static byte[] commonByteArray_AFI_PRINCIPAL_ETL_principal = new byte[0];

	
			    public String tipo_archivos_;

				public String getTipo_archivos_ () {
					return this.tipo_archivos_;
				}

				public Boolean tipo_archivos_IsNullable(){
				    return true;
				}
				public Boolean tipo_archivos_IsKey(){
				    return false;
				}
				public Integer tipo_archivos_Length(){
				    return null;
				}
				public Integer tipo_archivos_Precision(){
				    return null;
				}
				public String tipo_archivos_Default(){
				
					return null;
				
				}
				public String tipo_archivos_Comment(){
				
				    return "";
				
				}
				public String tipo_archivos_Pattern(){
				
					return "";
				
				}
				public String tipo_archivos_OriginalDbColumnName(){
				
					return "tipo_archivos_";
				
				}

				
			    public Object Sproc;

				public Object getSproc () {
					return this.Sproc;
				}

				public Boolean SprocIsNullable(){
				    return true;
				}
				public Boolean SprocIsKey(){
				    return false;
				}
				public Integer SprocLength(){
				    return null;
				}
				public Integer SprocPrecision(){
				    return null;
				}
				public String SprocDefault(){
				
					return null;
				
				}
				public String SprocComment(){
				
				    return "";
				
				}
				public String SprocPattern(){
				
					return "";
				
				}
				public String SprocOriginalDbColumnName(){
				
					return "Sproc";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_PRINCIPAL_ETL_principal.length) {
				if(length < 1024 && commonByteArray_AFI_PRINCIPAL_ETL_principal.length == 0) {
   					commonByteArray_AFI_PRINCIPAL_ETL_principal = new byte[1024];
				} else {
   					commonByteArray_AFI_PRINCIPAL_ETL_principal = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_PRINCIPAL_ETL_principal, 0, length);
			strReturn = new String(commonByteArray_AFI_PRINCIPAL_ETL_principal, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_PRINCIPAL_ETL_principal.length) {
				if(length < 1024 && commonByteArray_AFI_PRINCIPAL_ETL_principal.length == 0) {
   					commonByteArray_AFI_PRINCIPAL_ETL_principal = new byte[1024];
				} else {
   					commonByteArray_AFI_PRINCIPAL_ETL_principal = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_PRINCIPAL_ETL_principal, 0, length);
			strReturn = new String(commonByteArray_AFI_PRINCIPAL_ETL_principal, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_PRINCIPAL_ETL_principal) {

        	try {

        		int length = 0;
		
					this.tipo_archivos_ = readString(dis);
					
						this.Sproc = (Object) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_PRINCIPAL_ETL_principal) {

        	try {

        		int length = 0;
		
					this.tipo_archivos_ = readString(dis);
					
						this.Sproc = (Object) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.tipo_archivos_,dos);
					
					// Object
				
       			    	dos.writeObject(this.Sproc);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.tipo_archivos_,dos);
					
					// Object
				
						dos.clearInstanceCache();
						dos.writeObject(this.Sproc);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("tipo_archivos_="+tipo_archivos_);
		sb.append(",Sproc="+String.valueOf(Sproc));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row10Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tFixedFlowInput_7Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFixedFlowInput_7_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row10Struct row10 = new row10Struct();




	
	/**
	 * [tOracleSP_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleSP_2", false);
		start_Hash.put("tOracleSP_2", System.currentTimeMillis());
		
	
	currentComponent="tOracleSP_2";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row10");
					}
				
		int tos_count_tOracleSP_2 = 0;
		

	java.sql.Connection connection_tOracleSP_2 = null;
	connection_tOracleSP_2 = (java.sql.Connection) globalMap.get("conn_tOracleConnection_1");
	

java.sql.CallableStatement statement_tOracleSP_2 = connection_tOracleSP_2.prepareCall("{call " + "REP.Trunc_AFI_CARCHIVOS" + "(?,?)}");

java.sql.Timestamp tmpDate_tOracleSP_2;
String tmpString_tOracleSP_2;

 



/**
 * [tOracleSP_2 begin ] stop
 */



	
	/**
	 * [tFixedFlowInput_7 begin ] start
	 */

	

	
		
		ok_Hash.put("tFixedFlowInput_7", false);
		start_Hash.put("tFixedFlowInput_7", System.currentTimeMillis());
		
	
	currentComponent="tFixedFlowInput_7";
	
	
		int tos_count_tFixedFlowInput_7 = 0;
		

	    for (int i_tFixedFlowInput_7 = 0 ; i_tFixedFlowInput_7 < 1 ; i_tFixedFlowInput_7++) {
	                	            	
    	            		row10.tipo_archivos_ = context.tipoArchivoEntesTerritoriales+" , "+context.tipoArchivoFedevida;
    	            	        	            	
    	            		row10.Sproc = null;        	            	
    	            	

 



/**
 * [tFixedFlowInput_7 begin ] stop
 */
	
	/**
	 * [tFixedFlowInput_7 main ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_7";
	
	

 


	tos_count_tFixedFlowInput_7++;

/**
 * [tFixedFlowInput_7 main ] stop
 */
	
	/**
	 * [tFixedFlowInput_7 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_7";
	
	

 



/**
 * [tFixedFlowInput_7 process_data_begin ] stop
 */

	
	/**
	 * [tOracleSP_2 main ] start
	 */

	

	
	
	currentComponent="tOracleSP_2";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row10"
						
						);
					}
					

			// code for the argument 1 (tipo_archivos_) of type 'IN AUTOMAPPING'
    					if (row10.tipo_archivos_ == null) {
    						statement_tOracleSP_2.setNull(1, java.sql.Types.VARCHAR);
    					} else {
    					
                        statement_tOracleSP_2.setString(1, row10.tipo_archivos_);
    					}
    					
			// code for the argument 2 (Sproc) of type 'OUT CLOB'
					statement_tOracleSP_2.registerOutParameter(2, java.sql.Types.CLOB);
		statement_tOracleSP_2.execute();
		

 


	tos_count_tOracleSP_2++;

/**
 * [tOracleSP_2 main ] stop
 */
	
	/**
	 * [tOracleSP_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleSP_2";
	
	

 



/**
 * [tOracleSP_2 process_data_begin ] stop
 */
	
	/**
	 * [tOracleSP_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleSP_2";
	
	

 



/**
 * [tOracleSP_2 process_data_end ] stop
 */



	
	/**
	 * [tFixedFlowInput_7 process_data_end ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_7";
	
	

 



/**
 * [tFixedFlowInput_7 process_data_end ] stop
 */
	
	/**
	 * [tFixedFlowInput_7 end ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_7";
	
	

        }
        globalMap.put("tFixedFlowInput_7_NB_LINE", 1);        

 

ok_Hash.put("tFixedFlowInput_7", true);
end_Hash.put("tFixedFlowInput_7", System.currentTimeMillis());




/**
 * [tFixedFlowInput_7 end ] stop
 */

	
	/**
	 * [tOracleSP_2 end ] start
	 */

	

	
	
	currentComponent="tOracleSP_2";
	
	


	statement_tOracleSP_2.close();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row10");
			  	}
			  	
 

ok_Hash.put("tOracleSP_2", true);
end_Hash.put("tOracleSP_2", System.currentTimeMillis());




/**
 * [tOracleSP_2 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFixedFlowInput_7 finally ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_7";
	
	

 



/**
 * [tFixedFlowInput_7 finally ] stop
 */

	
	/**
	 * [tOracleSP_2 finally ] start
	 */

	

	
	
	currentComponent="tOracleSP_2";
	
	

 



/**
 * [tOracleSP_2 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFixedFlowInput_7_SUBPROCESS_STATE", 1);
	}
	


public void tJava_6Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_6_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tJava_6 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_6", false);
		start_Hash.put("tJava_6", System.currentTimeMillis());
		
	
	currentComponent="tJava_6";
	
	
		int tos_count_tJava_6 = 0;
		


//****************************************************************************************//
System.out.println(TalendDate.getCurrentDate()+" : Archivo de configuración no encontrado.");
//****************************************************************************************//





 



/**
 * [tJava_6 begin ] stop
 */
	
	/**
	 * [tJava_6 main ] start
	 */

	

	
	
	currentComponent="tJava_6";
	
	

 


	tos_count_tJava_6++;

/**
 * [tJava_6 main ] stop
 */
	
	/**
	 * [tJava_6 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_6";
	
	

 



/**
 * [tJava_6 process_data_begin ] stop
 */
	
	/**
	 * [tJava_6 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_6";
	
	

 



/**
 * [tJava_6 process_data_end ] stop
 */
	
	/**
	 * [tJava_6 end ] start
	 */

	

	
	
	currentComponent="tJava_6";
	
	

 

ok_Hash.put("tJava_6", true);
end_Hash.put("tJava_6", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk20", 0, "ok");
				}
				tDie_1Process(globalMap);



/**
 * [tJava_6 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_6 finally ] start
	 */

	

	
	
	currentComponent="tJava_6";
	
	

 



/**
 * [tJava_6 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_6_SUBPROCESS_STATE", 1);
	}
	


public void tPostjob_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPostjob_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tPostjob_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostjob_1", false);
		start_Hash.put("tPostjob_1", System.currentTimeMillis());
		
	
	currentComponent="tPostjob_1";
	
	
		int tos_count_tPostjob_1 = 0;
		

 



/**
 * [tPostjob_1 begin ] stop
 */
	
	/**
	 * [tPostjob_1 main ] start
	 */

	

	
	
	currentComponent="tPostjob_1";
	
	

 


	tos_count_tPostjob_1++;

/**
 * [tPostjob_1 main ] stop
 */
	
	/**
	 * [tPostjob_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tPostjob_1";
	
	

 



/**
 * [tPostjob_1 process_data_begin ] stop
 */
	
	/**
	 * [tPostjob_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tPostjob_1";
	
	

 



/**
 * [tPostjob_1 process_data_end ] stop
 */
	
	/**
	 * [tPostjob_1 end ] start
	 */

	

	
	
	currentComponent="tPostjob_1";
	
	

 

ok_Hash.put("tPostjob_1", true);
end_Hash.put("tPostjob_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk15", 0, "ok");
				}
				tOracleClose_1Process(globalMap);



/**
 * [tPostjob_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPostjob_1 finally ] start
	 */

	

	
	
	currentComponent="tPostjob_1";
	
	

 



/**
 * [tPostjob_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPostjob_1_SUBPROCESS_STATE", 1);
	}
	


public void tOracleClose_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleClose_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tOracleClose_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleClose_1", false);
		start_Hash.put("tOracleClose_1", System.currentTimeMillis());
		
	
	currentComponent="tOracleClose_1";
	
	
		int tos_count_tOracleClose_1 = 0;
		

 



/**
 * [tOracleClose_1 begin ] stop
 */
	
	/**
	 * [tOracleClose_1 main ] start
	 */

	

	
	
	currentComponent="tOracleClose_1";
	
	

	java.sql.Connection conn_tOracleClose_1 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");
	
	if(conn_tOracleClose_1 != null && !conn_tOracleClose_1.isClosed())
	{
		
			conn_tOracleClose_1.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_tOracleConnection_1"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
	}

 


	tos_count_tOracleClose_1++;

/**
 * [tOracleClose_1 main ] stop
 */
	
	/**
	 * [tOracleClose_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleClose_1";
	
	

 



/**
 * [tOracleClose_1 process_data_begin ] stop
 */
	
	/**
	 * [tOracleClose_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleClose_1";
	
	

 



/**
 * [tOracleClose_1 process_data_end ] stop
 */
	
	/**
	 * [tOracleClose_1 end ] start
	 */

	

	
	
	currentComponent="tOracleClose_1";
	
	

 

ok_Hash.put("tOracleClose_1", true);
end_Hash.put("tOracleClose_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk34", 0, "ok");
				}
				tJava_16Process(globalMap);



/**
 * [tOracleClose_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleClose_1 finally ] start
	 */

	

	
	
	currentComponent="tOracleClose_1";
	
	

 



/**
 * [tOracleClose_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleClose_1_SUBPROCESS_STATE", 1);
	}
	


public void tJava_16Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_16_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tJava_16 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_16", false);
		start_Hash.put("tJava_16", System.currentTimeMillis());
		
	
	currentComponent="tJava_16";
	
	
		int tos_count_tJava_16 = 0;
		


//****************************************************************************************//
System.out.println("*** POSTJOB FINALIZADO ETL PRINCIPAL ****************************************************");
//****************************************************************************************//


 



/**
 * [tJava_16 begin ] stop
 */
	
	/**
	 * [tJava_16 main ] start
	 */

	

	
	
	currentComponent="tJava_16";
	
	

 


	tos_count_tJava_16++;

/**
 * [tJava_16 main ] stop
 */
	
	/**
	 * [tJava_16 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_16";
	
	

 



/**
 * [tJava_16 process_data_begin ] stop
 */
	
	/**
	 * [tJava_16 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_16";
	
	

 



/**
 * [tJava_16 process_data_end ] stop
 */
	
	/**
	 * [tJava_16 end ] start
	 */

	

	
	
	currentComponent="tJava_16";
	
	

 

ok_Hash.put("tJava_16", true);
end_Hash.put("tJava_16", System.currentTimeMillis());




/**
 * [tJava_16 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_16 finally ] start
	 */

	

	
	
	currentComponent="tJava_16";
	
	

 



/**
 * [tJava_16 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_16_SUBPROCESS_STATE", 1);
	}
	


public static class ESTADOSStruct implements routines.system.IPersistableRow<ESTADOSStruct> {
    final static byte[] commonByteArrayLock_AFI_PRINCIPAL_ETL_principal = new byte[0];
    static byte[] commonByteArray_AFI_PRINCIPAL_ETL_principal = new byte[0];

	
			    public Integer ID;

				public Integer getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return true;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return 0;
				}
				public Integer IDPrecision(){
				    return 0;
				}
				public String IDDefault(){
				
					return null;
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public Integer CODIGO;

				public Integer getCODIGO () {
					return this.CODIGO;
				}

				public Boolean CODIGOIsNullable(){
				    return true;
				}
				public Boolean CODIGOIsKey(){
				    return false;
				}
				public Integer CODIGOLength(){
				    return 0;
				}
				public Integer CODIGOPrecision(){
				    return 0;
				}
				public String CODIGODefault(){
				
					return null;
				
				}
				public String CODIGOComment(){
				
				    return "";
				
				}
				public String CODIGOPattern(){
				
					return "";
				
				}
				public String CODIGOOriginalDbColumnName(){
				
					return "CODIGO";
				
				}

				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_PRINCIPAL_ETL_principal) {

        	try {

        		int length = 0;
		
						this.ID = readInteger(dis);
					
						this.CODIGO = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_PRINCIPAL_ETL_principal) {

        	try {

        		int length = 0;
		
						this.ID = readInteger(dis);
					
						this.CODIGO = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.ID,dos);
					
					// Integer
				
						writeInteger(this.CODIGO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.ID,dos);
					
					// Integer
				
						writeInteger(this.CODIGO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",CODIGO="+String.valueOf(CODIGO));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(ESTADOSStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		ESTADOSStruct ESTADOS = new ESTADOSStruct();




	
	/**
	 * [tFlowToIterate_1 begin ] start
	 */

				
			int NB_ITERATE_tJava_17 = 0; //for statistics
			

	
		
		ok_Hash.put("tFlowToIterate_1", false);
		start_Hash.put("tFlowToIterate_1", System.currentTimeMillis());
		
	
	currentComponent="tFlowToIterate_1";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"ESTADOS");
					}
				
		int tos_count_tFlowToIterate_1 = 0;
		

int nb_line_tFlowToIterate_1 = 0;
int counter_tFlowToIterate_1 = 0;

 



/**
 * [tFlowToIterate_1 begin ] stop
 */



	
	/**
	 * [tOracleInput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_1", false);
		start_Hash.put("tOracleInput_1", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_1";
	
	
		int tos_count_tOracleInput_1 = 0;
		
	


	
		    int nb_line_tOracleInput_1 = 0;
		    java.sql.Connection conn_tOracleInput_1 = null;
				conn_tOracleInput_1 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");
				
                boolean isTimeZoneNull_tOracleInput_1 = false;
				boolean isConnectionWrapped_tOracleInput_1 = !(conn_tOracleInput_1 instanceof oracle.jdbc.OracleConnection) && conn_tOracleInput_1.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tOracleInput_1 = null;
                if (isConnectionWrapped_tOracleInput_1) {
					unwrappedOraConn_tOracleInput_1 = conn_tOracleInput_1.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tOracleInput_1 != null) {
                        isTimeZoneNull_tOracleInput_1 = (unwrappedOraConn_tOracleInput_1.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tOracleInput_1 = (((oracle.jdbc.OracleConnection)conn_tOracleInput_1).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tOracleInput_1) {
					java.sql.Statement stmtGetTZ_tOracleInput_1 = conn_tOracleInput_1.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_1 = stmtGetTZ_tOracleInput_1.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_1 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tOracleInput_1.next()) {
						sessionTimezone_tOracleInput_1 = rsGetTZ_tOracleInput_1.getString(1);
					}
					if (isConnectionWrapped_tOracleInput_1 && unwrappedOraConn_tOracleInput_1 != null) {
                        unwrappedOraConn_tOracleInput_1.setSessionTimeZone(sessionTimezone_tOracleInput_1);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_1).setSessionTimeZone(sessionTimezone_tOracleInput_1);
                    }
				}
			
		    
			java.sql.Statement stmt_tOracleInput_1 = conn_tOracleInput_1.createStatement();

		    String dbquery_tOracleInput_1 = "SELECT\n  ID, CODIGO\nFROM\n  AFI_ESTEXTDERECHOS";
		    

		    globalMap.put("tOracleInput_1_QUERY",dbquery_tOracleInput_1);

		    java.sql.ResultSet rs_tOracleInput_1 = null;

		    try {
		    	rs_tOracleInput_1 = stmt_tOracleInput_1.executeQuery(dbquery_tOracleInput_1);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_1 = rs_tOracleInput_1.getMetaData();
		    	int colQtyInRs_tOracleInput_1 = rsmd_tOracleInput_1.getColumnCount();

		    String tmpContent_tOracleInput_1 = null;
		    
		    
		    while (rs_tOracleInput_1.next()) {
		        nb_line_tOracleInput_1++;
		        
							if(colQtyInRs_tOracleInput_1 < 1) {
								ESTADOS.ID = null;
							} else {
		                          
					if(rs_tOracleInput_1.getObject(1) != null) {
						ESTADOS.ID = rs_tOracleInput_1.getInt(1);
					} else {
				
						ESTADOS.ID = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_1 < 2) {
								ESTADOS.CODIGO = null;
							} else {
		                          
					if(rs_tOracleInput_1.getObject(2) != null) {
						ESTADOS.CODIGO = rs_tOracleInput_1.getInt(2);
					} else {
				
						ESTADOS.CODIGO = null;
					}
		                    }
					




 



/**
 * [tOracleInput_1 begin ] stop
 */
	
	/**
	 * [tOracleInput_1 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_1";
	
	

 


	tos_count_tOracleInput_1++;

/**
 * [tOracleInput_1 main ] stop
 */
	
	/**
	 * [tOracleInput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_1";
	
	

 



/**
 * [tOracleInput_1 process_data_begin ] stop
 */

	
	/**
	 * [tFlowToIterate_1 main ] start
	 */

	

	
	
	currentComponent="tFlowToIterate_1";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"ESTADOS"
						
						);
					}
					


    	            
            globalMap.put("ESTADOS.ID", ESTADOS.ID);
    	            
            globalMap.put("ESTADOS.CODIGO", ESTADOS.CODIGO);
    	
 
	   nb_line_tFlowToIterate_1++;  
       counter_tFlowToIterate_1++;
       globalMap.put("tFlowToIterate_1_CURRENT_ITERATION", counter_tFlowToIterate_1);
 


	tos_count_tFlowToIterate_1++;

/**
 * [tFlowToIterate_1 main ] stop
 */
	
	/**
	 * [tFlowToIterate_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFlowToIterate_1";
	
	

 



/**
 * [tFlowToIterate_1 process_data_begin ] stop
 */
	NB_ITERATE_tJava_17++;
	
	
				if(execStat){
					runStat.updateStatOnConnection("iterate1", 1, "exec" + NB_ITERATE_tJava_17);
					//Thread.sleep(1000);
				}				
			

	
	/**
	 * [tJava_17 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_17", false);
		start_Hash.put("tJava_17", System.currentTimeMillis());
		
	
	currentComponent="tJava_17";
	
	
		int tos_count_tJava_17 = 0;
		


switch(ESTADOS.CODIGO){
	
	case 1:
		context.estArchivoActivo=ESTADOS.ID;
	break;
	
	case 2:
		context.estArchivoInactivo=ESTADOS.ID;
	break;
	
	case 3:
		context.estArchivoPausado=ESTADOS.ID;
	break;
	
	case 4:
		context.estArchivoCancelado=ESTADOS.ID;
	break;
	
	case 5:
		context.estArchivoEnProceso=ESTADOS.ID;
	break;
	
	case 6:
		context.estArchivoProcesado=ESTADOS.ID;
	break;
	
	case 7:
		context.estArchivoErrorArchivo=ESTADOS.ID;
	break;
		
	case 8:
		context.estArchivoErrorProcesamiento=ESTADOS.ID;
	break;
	
}
 



/**
 * [tJava_17 begin ] stop
 */
	
	/**
	 * [tJava_17 main ] start
	 */

	

	
	
	currentComponent="tJava_17";
	
	

 


	tos_count_tJava_17++;

/**
 * [tJava_17 main ] stop
 */
	
	/**
	 * [tJava_17 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_17";
	
	

 



/**
 * [tJava_17 process_data_begin ] stop
 */
	
	/**
	 * [tJava_17 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_17";
	
	

 



/**
 * [tJava_17 process_data_end ] stop
 */
	
	/**
	 * [tJava_17 end ] start
	 */

	

	
	
	currentComponent="tJava_17";
	
	

 

ok_Hash.put("tJava_17", true);
end_Hash.put("tJava_17", System.currentTimeMillis());




/**
 * [tJava_17 end ] stop
 */
						if(execStat){
							runStat.updateStatOnConnection("iterate1", 2, "exec" + NB_ITERATE_tJava_17);
						}				
					




	
	/**
	 * [tFlowToIterate_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFlowToIterate_1";
	
	

 



/**
 * [tFlowToIterate_1 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_1";
	
	

 



/**
 * [tOracleInput_1 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_1 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_1";
	
	

}
}finally{
	if (rs_tOracleInput_1 != null) {
		rs_tOracleInput_1.close();
	}
	if (stmt_tOracleInput_1 != null) {
		stmt_tOracleInput_1.close();
	}
}

globalMap.put("tOracleInput_1_NB_LINE",nb_line_tOracleInput_1);
 

ok_Hash.put("tOracleInput_1", true);
end_Hash.put("tOracleInput_1", System.currentTimeMillis());




/**
 * [tOracleInput_1 end ] stop
 */

	
	/**
	 * [tFlowToIterate_1 end ] start
	 */

	

	
	
	currentComponent="tFlowToIterate_1";
	
	

globalMap.put("tFlowToIterate_1_NB_LINE",nb_line_tFlowToIterate_1);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"ESTADOS");
			  	}
			  	
 

ok_Hash.put("tFlowToIterate_1", true);
end_Hash.put("tFlowToIterate_1", System.currentTimeMillis());




/**
 * [tFlowToIterate_1 end ] stop
 */



				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tOracleInput_1:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk1", 0, "ok");
								} 
							
							tOracleInput_3Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleInput_1 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_1";
	
	

 



/**
 * [tOracleInput_1 finally ] stop
 */

	
	/**
	 * [tFlowToIterate_1 finally ] start
	 */

	

	
	
	currentComponent="tFlowToIterate_1";
	
	

 



/**
 * [tFlowToIterate_1 finally ] stop
 */

	
	/**
	 * [tJava_17 finally ] start
	 */

	

	
	
	currentComponent="tJava_17";
	
	

 



/**
 * [tJava_17 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_1_SUBPROCESS_STATE", 1);
	}
	


public static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
    final static byte[] commonByteArrayLock_AFI_PRINCIPAL_ETL_principal = new byte[0];
    static byte[] commonByteArray_AFI_PRINCIPAL_ETL_principal = new byte[0];

	
			    public String ARCHIVOFS;

				public String getARCHIVOFS () {
					return this.ARCHIVOFS;
				}

				public Boolean ARCHIVOFSIsNullable(){
				    return true;
				}
				public Boolean ARCHIVOFSIsKey(){
				    return false;
				}
				public Integer ARCHIVOFSLength(){
				    return 0;
				}
				public Integer ARCHIVOFSPrecision(){
				    return 0;
				}
				public String ARCHIVOFSDefault(){
				
					return null;
				
				}
				public String ARCHIVOFSComment(){
				
				    return "";
				
				}
				public String ARCHIVOFSPattern(){
				
					return "";
				
				}
				public String ARCHIVOFSOriginalDbColumnName(){
				
					return "ARCHIVOFS";
				
				}

				
			    public Integer USUARIOS_ID;

				public Integer getUSUARIOS_ID () {
					return this.USUARIOS_ID;
				}

				public Boolean USUARIOS_IDIsNullable(){
				    return true;
				}
				public Boolean USUARIOS_IDIsKey(){
				    return false;
				}
				public Integer USUARIOS_IDLength(){
				    return 0;
				}
				public Integer USUARIOS_IDPrecision(){
				    return null;
				}
				public String USUARIOS_IDDefault(){
				
					return "";
				
				}
				public String USUARIOS_IDComment(){
				
				    return "";
				
				}
				public String USUARIOS_IDPattern(){
				
					return "";
				
				}
				public String USUARIOS_IDOriginalDbColumnName(){
				
					return "USUARIOS_ID";
				
				}

				
			    public Integer TIPO_ARCHIVO;

				public Integer getTIPO_ARCHIVO () {
					return this.TIPO_ARCHIVO;
				}

				public Boolean TIPO_ARCHIVOIsNullable(){
				    return true;
				}
				public Boolean TIPO_ARCHIVOIsKey(){
				    return false;
				}
				public Integer TIPO_ARCHIVOLength(){
				    return 0;
				}
				public Integer TIPO_ARCHIVOPrecision(){
				    return null;
				}
				public String TIPO_ARCHIVODefault(){
				
					return null;
				
				}
				public String TIPO_ARCHIVOComment(){
				
				    return "";
				
				}
				public String TIPO_ARCHIVOPattern(){
				
					return "";
				
				}
				public String TIPO_ARCHIVOOriginalDbColumnName(){
				
					return "TIPO_ARCHIVO";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_PRINCIPAL_ETL_principal.length) {
				if(length < 1024 && commonByteArray_AFI_PRINCIPAL_ETL_principal.length == 0) {
   					commonByteArray_AFI_PRINCIPAL_ETL_principal = new byte[1024];
				} else {
   					commonByteArray_AFI_PRINCIPAL_ETL_principal = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_PRINCIPAL_ETL_principal, 0, length);
			strReturn = new String(commonByteArray_AFI_PRINCIPAL_ETL_principal, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_PRINCIPAL_ETL_principal.length) {
				if(length < 1024 && commonByteArray_AFI_PRINCIPAL_ETL_principal.length == 0) {
   					commonByteArray_AFI_PRINCIPAL_ETL_principal = new byte[1024];
				} else {
   					commonByteArray_AFI_PRINCIPAL_ETL_principal = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_PRINCIPAL_ETL_principal, 0, length);
			strReturn = new String(commonByteArray_AFI_PRINCIPAL_ETL_principal, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_PRINCIPAL_ETL_principal) {

        	try {

        		int length = 0;
		
					this.ARCHIVOFS = readString(dis);
					
						this.USUARIOS_ID = readInteger(dis);
					
						this.TIPO_ARCHIVO = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_PRINCIPAL_ETL_principal) {

        	try {

        		int length = 0;
		
					this.ARCHIVOFS = readString(dis);
					
						this.USUARIOS_ID = readInteger(dis);
					
						this.TIPO_ARCHIVO = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.ARCHIVOFS,dos);
					
					// Integer
				
						writeInteger(this.USUARIOS_ID,dos);
					
					// Integer
				
						writeInteger(this.TIPO_ARCHIVO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.ARCHIVOFS,dos);
					
					// Integer
				
						writeInteger(this.USUARIOS_ID,dos);
					
					// Integer
				
						writeInteger(this.TIPO_ARCHIVO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ARCHIVOFS="+ARCHIVOFS);
		sb.append(",USUARIOS_ID="+String.valueOf(USUARIOS_ID));
		sb.append(",TIPO_ARCHIVO="+String.valueOf(TIPO_ARCHIVO));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_3_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row1Struct row1 = new row1Struct();




	
	/**
	 * [tJavaRow_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaRow_1", false);
		start_Hash.put("tJavaRow_1", System.currentTimeMillis());
		
	
	currentComponent="tJavaRow_1";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row1");
					}
				
		int tos_count_tJavaRow_1 = 0;
		

int nb_line_tJavaRow_1 = 0;

 



/**
 * [tJavaRow_1 begin ] stop
 */



	
	/**
	 * [tOracleInput_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_3", false);
		start_Hash.put("tOracleInput_3", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_3";
	
	
		int tos_count_tOracleInput_3 = 0;
		
	


	
		    int nb_line_tOracleInput_3 = 0;
		    java.sql.Connection conn_tOracleInput_3 = null;
				conn_tOracleInput_3 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");
				
                boolean isTimeZoneNull_tOracleInput_3 = false;
				boolean isConnectionWrapped_tOracleInput_3 = !(conn_tOracleInput_3 instanceof oracle.jdbc.OracleConnection) && conn_tOracleInput_3.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tOracleInput_3 = null;
                if (isConnectionWrapped_tOracleInput_3) {
					unwrappedOraConn_tOracleInput_3 = conn_tOracleInput_3.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tOracleInput_3 != null) {
                        isTimeZoneNull_tOracleInput_3 = (unwrappedOraConn_tOracleInput_3.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tOracleInput_3 = (((oracle.jdbc.OracleConnection)conn_tOracleInput_3).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tOracleInput_3) {
					java.sql.Statement stmtGetTZ_tOracleInput_3 = conn_tOracleInput_3.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_3 = stmtGetTZ_tOracleInput_3.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_3 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tOracleInput_3.next()) {
						sessionTimezone_tOracleInput_3 = rsGetTZ_tOracleInput_3.getString(1);
					}
					if (isConnectionWrapped_tOracleInput_3 && unwrappedOraConn_tOracleInput_3 != null) {
                        unwrappedOraConn_tOracleInput_3.setSessionTimeZone(sessionTimezone_tOracleInput_3);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_3).setSessionTimeZone(sessionTimezone_tOracleInput_3);
                    }
				}
			
		    
			java.sql.Statement stmt_tOracleInput_3 = conn_tOracleInput_3.createStatement();

		    String dbquery_tOracleInput_3 = "SELECT \n	AAR.ARCHIVOFS,\n	AAR.USUARIOS_ID,\n	ATA.CODIGO AS TIPO_ARCHIVO\nFROM\n	SALUDSIS.AFI_ARCHIVOS AAR\n	INNER JOIN"
+" SALUDSIS.AFI_TARCHIVOS ATA ON AAR.TARCHIVOS_ID=ATA.ID\nWHERE\n	AAR.ID = " + context.infoIdArchivo;
		    

		    globalMap.put("tOracleInput_3_QUERY",dbquery_tOracleInput_3);

		    java.sql.ResultSet rs_tOracleInput_3 = null;

		    try {
		    	rs_tOracleInput_3 = stmt_tOracleInput_3.executeQuery(dbquery_tOracleInput_3);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_3 = rs_tOracleInput_3.getMetaData();
		    	int colQtyInRs_tOracleInput_3 = rsmd_tOracleInput_3.getColumnCount();

		    String tmpContent_tOracleInput_3 = null;
		    
		    
		    while (rs_tOracleInput_3.next()) {
		        nb_line_tOracleInput_3++;
		        
							if(colQtyInRs_tOracleInput_3 < 1) {
								row1.ARCHIVOFS = null;
							} else {
	                         		
        	row1.ARCHIVOFS = routines.system.JDBCUtil.getString(rs_tOracleInput_3, 1, false);
		                    }
							if(colQtyInRs_tOracleInput_3 < 2) {
								row1.USUARIOS_ID = null;
							} else {
		                          
					if(rs_tOracleInput_3.getObject(2) != null) {
						row1.USUARIOS_ID = rs_tOracleInput_3.getInt(2);
					} else {
				
						row1.USUARIOS_ID = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_3 < 3) {
								row1.TIPO_ARCHIVO = null;
							} else {
		                          
					if(rs_tOracleInput_3.getObject(3) != null) {
						row1.TIPO_ARCHIVO = rs_tOracleInput_3.getInt(3);
					} else {
				
						row1.TIPO_ARCHIVO = null;
					}
		                    }
					




 



/**
 * [tOracleInput_3 begin ] stop
 */
	
	/**
	 * [tOracleInput_3 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_3";
	
	

 


	tos_count_tOracleInput_3++;

/**
 * [tOracleInput_3 main ] stop
 */
	
	/**
	 * [tOracleInput_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_3";
	
	

 



/**
 * [tOracleInput_3 process_data_begin ] stop
 */

	
	/**
	 * [tJavaRow_1 main ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row1"
						
						);
					}
					

    //****************************************************************************************//
//*** ALMACENAMIENTO EN VARIABLES DE CONTEXTO DE LA INFORMACIÓN DE LOS ARCHIVOS **********//
//****************************************************************************************//
context.infoNombreArchivo=row1.ARCHIVOFS;
context.infoTipoArchivo=row1.TIPO_ARCHIVO;
context.infoUsuarioIdArchivo = row1.USUARIOS_ID;

//****************************************************************************************//
//*** SELECCIONA EL TIPO DE PROCESO A EJECUTAR *******************************************//
//****************************************************************************************//
switch(row1.TIPO_ARCHIVO){
	
	case 1:
		//Tipo de archivo Minsalud Etapa 2 Nuevos Registros
		context.tipoJobProceso=context.tipoJobMinsaludEtapa2NuevosRegistros;
	break;
	
	case 4:
		//Tipo de archivo Minsalud Etapa 2 Novedades
		context.tipoJobProceso=context.tipoJobMinsaludEtapa2Novedades;
	break;
	
	case 2:
		//Tipo de archivo Minsalud Etapa 3 Multiafiliacion
		context.tipoJobProceso=context.tipoJobMinsaludEtapa3Multiafiliacion;
	break;
	
	case 3:
		//Tipo de archivo Fedevida
		context.tipoJobProceso=context.tipoJobFedevida;
	break;
	
	case 5:
		//Tipo de archivo Entes territoriales
		context.tipoJobProceso=context.tipoJobEntesTerritoriales;
	break;
	
	case 8:
		//Tipo de archivo Entes territoriales
		context.tipoJobProceso=context.tipoJobCompendioSalud;
	break;
	
	case 25:
		//Tipo de archivo Entes territoriales para actualización masiva
		context.tipoJobProceso=context.tipoJobEntesTerritoriales;
	break;
	
	case 26:
		//Tipo de archivo Entes territoriales para actualización masiva
		context.tipoJobProceso=context.tipoJobEntesTerritoriales;
	break;
	
	case 27:
		//Tipo de archivo Entes territoriales para actualización masiva
		context.tipoJobProceso=context.tipoJobEntesTerritoriales;
	break;
	
	default:
		//Tipo de archivo Entes territoriales
		context.tipoJobProceso=0;
	break;
	
}
    nb_line_tJavaRow_1++;   

 


	tos_count_tJavaRow_1++;

/**
 * [tJavaRow_1 main ] stop
 */
	
	/**
	 * [tJavaRow_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";
	
	

 



/**
 * [tJavaRow_1 process_data_begin ] stop
 */
	
	/**
	 * [tJavaRow_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";
	
	

 



/**
 * [tJavaRow_1 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_3";
	
	

 



/**
 * [tOracleInput_3 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_3 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_3";
	
	

}
}finally{
	if (rs_tOracleInput_3 != null) {
		rs_tOracleInput_3.close();
	}
	if (stmt_tOracleInput_3 != null) {
		stmt_tOracleInput_3.close();
	}
}

globalMap.put("tOracleInput_3_NB_LINE",nb_line_tOracleInput_3);
 

ok_Hash.put("tOracleInput_3", true);
end_Hash.put("tOracleInput_3", System.currentTimeMillis());




/**
 * [tOracleInput_3 end ] stop
 */

	
	/**
	 * [tJavaRow_1 end ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";
	
	

globalMap.put("tJavaRow_1_NB_LINE",nb_line_tJavaRow_1);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row1");
			  	}
			  	
 

ok_Hash.put("tJavaRow_1", true);
end_Hash.put("tJavaRow_1", System.currentTimeMillis());

   			if (context.infoTipoArchivo==0 && context.tipoJobProceso==0) {
   				
					if(execStat){
   	 					runStat.updateStatOnConnection("If8", 0, "true");
					}
				tJava_2Process(globalMap);
			}

			   
   				else{
					if(execStat){   
   	 					runStat.updateStatOnConnection("If8", 0, "false");
					}   	 
   				}
   			if (context.infoTipoArchivo!=0 && context.tipoJobProceso!=0) {
   				
					if(execStat){
   	 					runStat.updateStatOnConnection("If6", 0, "true");
					}
				tFixedFlowInput_1Process(globalMap);
			}

			   
   				else{
					if(execStat){   
   	 					runStat.updateStatOnConnection("If6", 0, "false");
					}   	 
   				}



/**
 * [tJavaRow_1 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleInput_3 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_3";
	
	

 



/**
 * [tOracleInput_3 finally ] stop
 */

	
	/**
	 * [tJavaRow_1 finally ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";
	
	

 



/**
 * [tJavaRow_1 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_3_SUBPROCESS_STATE", 1);
	}
	


public void tJava_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tJava_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_2", false);
		start_Hash.put("tJava_2", System.currentTimeMillis());
		
	
	currentComponent="tJava_2";
	
	
		int tos_count_tJava_2 = 0;
		


//****************************************************************************************//
System.out.println(TalendDate.getCurrentDate()+" : Registro no encontrado");
//****************************************************************************************//
 



/**
 * [tJava_2 begin ] stop
 */
	
	/**
	 * [tJava_2 main ] start
	 */

	

	
	
	currentComponent="tJava_2";
	
	

 


	tos_count_tJava_2++;

/**
 * [tJava_2 main ] stop
 */
	
	/**
	 * [tJava_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_2";
	
	

 



/**
 * [tJava_2 process_data_begin ] stop
 */
	
	/**
	 * [tJava_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_2";
	
	

 



/**
 * [tJava_2 process_data_end ] stop
 */
	
	/**
	 * [tJava_2 end ] start
	 */

	

	
	
	currentComponent="tJava_2";
	
	

 

ok_Hash.put("tJava_2", true);
end_Hash.put("tJava_2", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk4", 0, "ok");
				}
				tFixedFlowInput_6Process(globalMap);



/**
 * [tJava_2 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_2 finally ] start
	 */

	

	
	
	currentComponent="tJava_2";
	
	

 



/**
 * [tJava_2 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_2_SUBPROCESS_STATE", 1);
	}
	


public static class row9Struct implements routines.system.IPersistableRow<row9Struct> {
    final static byte[] commonByteArrayLock_AFI_PRINCIPAL_ETL_principal = new byte[0];
    static byte[] commonByteArray_AFI_PRINCIPAL_ETL_principal = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public Integer ID;

				public Integer getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return true;
				}
				public Boolean IDIsKey(){
				    return true;
				}
				public Integer IDLength(){
				    return 0;
				}
				public Integer IDPrecision(){
				    return 0;
				}
				public String IDDefault(){
				
					return null;
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public Integer ESTADO;

				public Integer getESTADO () {
					return this.ESTADO;
				}

				public Boolean ESTADOIsNullable(){
				    return true;
				}
				public Boolean ESTADOIsKey(){
				    return false;
				}
				public Integer ESTADOLength(){
				    return 0;
				}
				public Integer ESTADOPrecision(){
				    return 0;
				}
				public String ESTADODefault(){
				
					return null;
				
				}
				public String ESTADOComment(){
				
				    return "";
				
				}
				public String ESTADOPattern(){
				
					return "";
				
				}
				public String ESTADOOriginalDbColumnName(){
				
					return "ESTADO";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.ID == null) ? 0 : this.ID.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row9Struct other = (row9Struct) obj;
		
						if (this.ID == null) {
							if (other.ID != null)
								return false;
						
						} else if (!this.ID.equals(other.ID))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row9Struct other) {

		other.ID = this.ID;
	            other.ESTADO = this.ESTADO;
	            
	}

	public void copyKeysDataTo(row9Struct other) {

		other.ID = this.ID;
	            	
	}



	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_PRINCIPAL_ETL_principal) {

        	try {

        		int length = 0;
		
						this.ID = readInteger(dis);
					
						this.ESTADO = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_PRINCIPAL_ETL_principal) {

        	try {

        		int length = 0;
		
						this.ID = readInteger(dis);
					
						this.ESTADO = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.ID,dos);
					
					// Integer
				
						writeInteger(this.ESTADO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.ID,dos);
					
					// Integer
				
						writeInteger(this.ESTADO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",ESTADO="+String.valueOf(ESTADO));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row9Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.ID, other.ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tFixedFlowInput_6Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFixedFlowInput_6_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row9Struct row9 = new row9Struct();




	
	/**
	 * [tOracleOutput_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleOutput_5", false);
		start_Hash.put("tOracleOutput_5", System.currentTimeMillis());
		
	
	currentComponent="tOracleOutput_5";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row9");
					}
				
		int tos_count_tOracleOutput_5 = 0;
		






        int updateKeyCount_tOracleOutput_5 = 1;
        if(updateKeyCount_tOracleOutput_5 < 1) {
            throw new RuntimeException("For update, Schema must have a key");
        } else if (updateKeyCount_tOracleOutput_5 == 2 && true) {        
                throw new RuntimeException("For update, every Schema column can not be a key");
        }
    
    int nb_line_tOracleOutput_5 = 0;
    int nb_line_update_tOracleOutput_5 = 0;
    int nb_line_inserted_tOracleOutput_5 = 0;
    int nb_line_deleted_tOracleOutput_5 = 0;
    int nb_line_rejected_tOracleOutput_5 = 0;

    int tmp_batchUpdateCount_tOracleOutput_5 = 0;

    int deletedCount_tOracleOutput_5=0;
    int updatedCount_tOracleOutput_5=0;
    int insertedCount_tOracleOutput_5=0;
    int rowsToCommitCount_tOracleOutput_5=0;
    int rejectedCount_tOracleOutput_5=0;

    boolean whetherReject_tOracleOutput_5 = false;

    java.sql.Connection conn_tOracleOutput_5 = null;

    //optional table
    String dbschema_tOracleOutput_5 = null;
    String tableName_tOracleOutput_5 = null;
        dbschema_tOracleOutput_5 = (String)globalMap.get("dbschema_tOracleConnection_1");
		
        conn_tOracleOutput_5 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");
        int count_tOracleOutput_5=0;

        if(dbschema_tOracleOutput_5 == null || dbschema_tOracleOutput_5.trim().length() == 0) {
            tableName_tOracleOutput_5 = ("AFI_ARCHIVOS");
        } else {
            tableName_tOracleOutput_5 = dbschema_tOracleOutput_5 + "." + ("AFI_ARCHIVOS");
        }
                String update_tOracleOutput_5 = "UPDATE " + tableName_tOracleOutput_5 + " SET ESTADO = ? WHERE ID = ?";
                java.sql.PreparedStatement pstmt_tOracleOutput_5 = conn_tOracleOutput_5.prepareStatement(update_tOracleOutput_5);
                resourceMap.put("pstmt_tOracleOutput_5", pstmt_tOracleOutput_5);





 



/**
 * [tOracleOutput_5 begin ] stop
 */



	
	/**
	 * [tFixedFlowInput_6 begin ] start
	 */

	

	
		
		ok_Hash.put("tFixedFlowInput_6", false);
		start_Hash.put("tFixedFlowInput_6", System.currentTimeMillis());
		
	
	currentComponent="tFixedFlowInput_6";
	
	
		int tos_count_tFixedFlowInput_6 = 0;
		

	    for (int i_tFixedFlowInput_6 = 0 ; i_tFixedFlowInput_6 < 1 ; i_tFixedFlowInput_6++) {
	                	            	
    	            		row9.ID = context.infoIdArchivo;
    	            	        	            	
    	            		row9.ESTADO = context.estArchivoErrorArchivo;
    	            	

 



/**
 * [tFixedFlowInput_6 begin ] stop
 */
	
	/**
	 * [tFixedFlowInput_6 main ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_6";
	
	

 


	tos_count_tFixedFlowInput_6++;

/**
 * [tFixedFlowInput_6 main ] stop
 */
	
	/**
	 * [tFixedFlowInput_6 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_6";
	
	

 



/**
 * [tFixedFlowInput_6 process_data_begin ] stop
 */

	
	/**
	 * [tOracleOutput_5 main ] start
	 */

	

	
	
	currentComponent="tOracleOutput_5";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row9"
						
						);
					}
					



        whetherReject_tOracleOutput_5 = false;
                    if(row9.ESTADO == null) {
pstmt_tOracleOutput_5.setNull(1, java.sql.Types.INTEGER);
} else {pstmt_tOracleOutput_5.setInt(1, row9.ESTADO);
}


                    if(row9.ID == null) {
pstmt_tOracleOutput_5.setNull(2 + count_tOracleOutput_5, java.sql.Types.INTEGER);
} else {pstmt_tOracleOutput_5.setInt(2 + count_tOracleOutput_5, row9.ID);
}

                try {
                    nb_line_tOracleOutput_5++;
                    int processedCount_tOracleOutput_5 = pstmt_tOracleOutput_5.executeUpdate();
                    updatedCount_tOracleOutput_5 += processedCount_tOracleOutput_5;
                    rowsToCommitCount_tOracleOutput_5 += processedCount_tOracleOutput_5;
                } catch(java.lang.Exception e_tOracleOutput_5) {
globalMap.put("tOracleOutput_5_ERROR_MESSAGE",e_tOracleOutput_5.getMessage());
                    whetherReject_tOracleOutput_5 = true;
                            System.err.print(e_tOracleOutput_5.getMessage());
                }
            if(!whetherReject_tOracleOutput_5) {
            }

 


	tos_count_tOracleOutput_5++;

/**
 * [tOracleOutput_5 main ] stop
 */
	
	/**
	 * [tOracleOutput_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleOutput_5";
	
	

 



/**
 * [tOracleOutput_5 process_data_begin ] stop
 */
	
	/**
	 * [tOracleOutput_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_5";
	
	

 



/**
 * [tOracleOutput_5 process_data_end ] stop
 */



	
	/**
	 * [tFixedFlowInput_6 process_data_end ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_6";
	
	

 



/**
 * [tFixedFlowInput_6 process_data_end ] stop
 */
	
	/**
	 * [tFixedFlowInput_6 end ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_6";
	
	

        }
        globalMap.put("tFixedFlowInput_6_NB_LINE", 1);        

 

ok_Hash.put("tFixedFlowInput_6", true);
end_Hash.put("tFixedFlowInput_6", System.currentTimeMillis());




/**
 * [tFixedFlowInput_6 end ] stop
 */

	
	/**
	 * [tOracleOutput_5 end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_5";
	
	
	



	
        if(pstmt_tOracleOutput_5 != null) {
			
				pstmt_tOracleOutput_5.close();
				resourceMap.remove("pstmt_tOracleOutput_5");
			
        }
    resourceMap.put("statementClosed_tOracleOutput_5", true);

	
	nb_line_deleted_tOracleOutput_5=nb_line_deleted_tOracleOutput_5+ deletedCount_tOracleOutput_5;
	nb_line_update_tOracleOutput_5=nb_line_update_tOracleOutput_5 + updatedCount_tOracleOutput_5;
	nb_line_inserted_tOracleOutput_5=nb_line_inserted_tOracleOutput_5 + insertedCount_tOracleOutput_5;
	nb_line_rejected_tOracleOutput_5=nb_line_rejected_tOracleOutput_5 + rejectedCount_tOracleOutput_5;
	
        globalMap.put("tOracleOutput_5_NB_LINE",nb_line_tOracleOutput_5);
        globalMap.put("tOracleOutput_5_NB_LINE_UPDATED",nb_line_update_tOracleOutput_5);
        globalMap.put("tOracleOutput_5_NB_LINE_INSERTED",nb_line_inserted_tOracleOutput_5);
        globalMap.put("tOracleOutput_5_NB_LINE_DELETED",nb_line_deleted_tOracleOutput_5);
        globalMap.put("tOracleOutput_5_NB_LINE_REJECTED", nb_line_rejected_tOracleOutput_5);
    

	



				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row9");
			  	}
			  	
 

ok_Hash.put("tOracleOutput_5", true);
end_Hash.put("tOracleOutput_5", System.currentTimeMillis());

   			if ((Integer)globalMap.get("tOracleOutput_5_NB_LINE_UPDATED")>0) {
   				
					if(execStat){
   	 					runStat.updateStatOnConnection("If36", 0, "true");
					}
				tJava_11Process(globalMap);
			}

			   
   				else{
					if(execStat){   
   	 					runStat.updateStatOnConnection("If36", 0, "false");
					}   	 
   				}



/**
 * [tOracleOutput_5 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFixedFlowInput_6 finally ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_6";
	
	

 



/**
 * [tFixedFlowInput_6 finally ] stop
 */

	
	/**
	 * [tOracleOutput_5 finally ] start
	 */

	

	
	
	currentComponent="tOracleOutput_5";
	
	



    if (resourceMap.get("statementClosed_tOracleOutput_5") == null) {
                java.sql.PreparedStatement pstmtToClose_tOracleOutput_5 = null;
                if ((pstmtToClose_tOracleOutput_5 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tOracleOutput_5")) != null) {
                    pstmtToClose_tOracleOutput_5.close();
                }
    }
 



/**
 * [tOracleOutput_5 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFixedFlowInput_6_SUBPROCESS_STATE", 1);
	}
	


public void tJava_11Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_11_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tJava_11 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_11", false);
		start_Hash.put("tJava_11", System.currentTimeMillis());
		
	
	currentComponent="tJava_11";
	
	
		int tos_count_tJava_11 = 0;
		


//****************************************************************************************//
System.out.println(TalendDate.getCurrentDate()+"Estado Archivo: Actualizado a Error en archivo");
System.out.println("*******************Finalizando ejecucion JOB*******************");
//****************************************************************************************//
 



/**
 * [tJava_11 begin ] stop
 */
	
	/**
	 * [tJava_11 main ] start
	 */

	

	
	
	currentComponent="tJava_11";
	
	

 


	tos_count_tJava_11++;

/**
 * [tJava_11 main ] stop
 */
	
	/**
	 * [tJava_11 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_11";
	
	

 



/**
 * [tJava_11 process_data_begin ] stop
 */
	
	/**
	 * [tJava_11 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_11";
	
	

 



/**
 * [tJava_11 process_data_end ] stop
 */
	
	/**
	 * [tJava_11 end ] start
	 */

	

	
	
	currentComponent="tJava_11";
	
	

 

ok_Hash.put("tJava_11", true);
end_Hash.put("tJava_11", System.currentTimeMillis());




/**
 * [tJava_11 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_11 finally ] start
	 */

	

	
	
	currentComponent="tJava_11";
	
	

 



/**
 * [tJava_11 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_11_SUBPROCESS_STATE", 1);
	}
	


public static class row2Struct implements routines.system.IPersistableRow<row2Struct> {
    final static byte[] commonByteArrayLock_AFI_PRINCIPAL_ETL_principal = new byte[0];
    static byte[] commonByteArray_AFI_PRINCIPAL_ETL_principal = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public Integer ID;

				public Integer getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return true;
				}
				public Boolean IDIsKey(){
				    return true;
				}
				public Integer IDLength(){
				    return 0;
				}
				public Integer IDPrecision(){
				    return 0;
				}
				public String IDDefault(){
				
					return null;
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public Integer ESTADO;

				public Integer getESTADO () {
					return this.ESTADO;
				}

				public Boolean ESTADOIsNullable(){
				    return true;
				}
				public Boolean ESTADOIsKey(){
				    return false;
				}
				public Integer ESTADOLength(){
				    return 0;
				}
				public Integer ESTADOPrecision(){
				    return 0;
				}
				public String ESTADODefault(){
				
					return null;
				
				}
				public String ESTADOComment(){
				
				    return "";
				
				}
				public String ESTADOPattern(){
				
					return "";
				
				}
				public String ESTADOOriginalDbColumnName(){
				
					return "ESTADO";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.ID == null) ? 0 : this.ID.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row2Struct other = (row2Struct) obj;
		
						if (this.ID == null) {
							if (other.ID != null)
								return false;
						
						} else if (!this.ID.equals(other.ID))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row2Struct other) {

		other.ID = this.ID;
	            other.ESTADO = this.ESTADO;
	            
	}

	public void copyKeysDataTo(row2Struct other) {

		other.ID = this.ID;
	            	
	}



	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_PRINCIPAL_ETL_principal) {

        	try {

        		int length = 0;
		
						this.ID = readInteger(dis);
					
						this.ESTADO = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_PRINCIPAL_ETL_principal) {

        	try {

        		int length = 0;
		
						this.ID = readInteger(dis);
					
						this.ESTADO = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.ID,dos);
					
					// Integer
				
						writeInteger(this.ESTADO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.ID,dos);
					
					// Integer
				
						writeInteger(this.ESTADO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",ESTADO="+String.valueOf(ESTADO));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row2Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.ID, other.ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tFixedFlowInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFixedFlowInput_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row2Struct row2 = new row2Struct();




	
	/**
	 * [tOracleOutput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleOutput_2", false);
		start_Hash.put("tOracleOutput_2", System.currentTimeMillis());
		
	
	currentComponent="tOracleOutput_2";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row2");
					}
				
		int tos_count_tOracleOutput_2 = 0;
		






        int updateKeyCount_tOracleOutput_2 = 1;
        if(updateKeyCount_tOracleOutput_2 < 1) {
            throw new RuntimeException("For update, Schema must have a key");
        } else if (updateKeyCount_tOracleOutput_2 == 2 && true) {        
                throw new RuntimeException("For update, every Schema column can not be a key");
        }
    
    int nb_line_tOracleOutput_2 = 0;
    int nb_line_update_tOracleOutput_2 = 0;
    int nb_line_inserted_tOracleOutput_2 = 0;
    int nb_line_deleted_tOracleOutput_2 = 0;
    int nb_line_rejected_tOracleOutput_2 = 0;

    int tmp_batchUpdateCount_tOracleOutput_2 = 0;

    int deletedCount_tOracleOutput_2=0;
    int updatedCount_tOracleOutput_2=0;
    int insertedCount_tOracleOutput_2=0;
    int rowsToCommitCount_tOracleOutput_2=0;
    int rejectedCount_tOracleOutput_2=0;

    boolean whetherReject_tOracleOutput_2 = false;

    java.sql.Connection conn_tOracleOutput_2 = null;

    //optional table
    String dbschema_tOracleOutput_2 = null;
    String tableName_tOracleOutput_2 = null;
        dbschema_tOracleOutput_2 = (String)globalMap.get("dbschema_tOracleConnection_1");
		
        conn_tOracleOutput_2 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");
        int count_tOracleOutput_2=0;

        if(dbschema_tOracleOutput_2 == null || dbschema_tOracleOutput_2.trim().length() == 0) {
            tableName_tOracleOutput_2 = ("AFI_ARCHIVOS");
        } else {
            tableName_tOracleOutput_2 = dbschema_tOracleOutput_2 + "." + ("AFI_ARCHIVOS");
        }
                String update_tOracleOutput_2 = "UPDATE " + tableName_tOracleOutput_2 + " SET ESTADO = ? WHERE ID = ?";
                java.sql.PreparedStatement pstmt_tOracleOutput_2 = conn_tOracleOutput_2.prepareStatement(update_tOracleOutput_2);
                resourceMap.put("pstmt_tOracleOutput_2", pstmt_tOracleOutput_2);





 



/**
 * [tOracleOutput_2 begin ] stop
 */



	
	/**
	 * [tFixedFlowInput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFixedFlowInput_1", false);
		start_Hash.put("tFixedFlowInput_1", System.currentTimeMillis());
		
	
	currentComponent="tFixedFlowInput_1";
	
	
		int tos_count_tFixedFlowInput_1 = 0;
		

	    for (int i_tFixedFlowInput_1 = 0 ; i_tFixedFlowInput_1 < 1 ; i_tFixedFlowInput_1++) {
	                	            	
    	            		row2.ID = context.infoIdArchivo;
    	            	        	            	
    	            		row2.ESTADO = context.estArchivoEnProceso;
    	            	

 



/**
 * [tFixedFlowInput_1 begin ] stop
 */
	
	/**
	 * [tFixedFlowInput_1 main ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_1";
	
	

 


	tos_count_tFixedFlowInput_1++;

/**
 * [tFixedFlowInput_1 main ] stop
 */
	
	/**
	 * [tFixedFlowInput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_1";
	
	

 



/**
 * [tFixedFlowInput_1 process_data_begin ] stop
 */

	
	/**
	 * [tOracleOutput_2 main ] start
	 */

	

	
	
	currentComponent="tOracleOutput_2";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row2"
						
						);
					}
					



        whetherReject_tOracleOutput_2 = false;
                    if(row2.ESTADO == null) {
pstmt_tOracleOutput_2.setNull(1, java.sql.Types.INTEGER);
} else {pstmt_tOracleOutput_2.setInt(1, row2.ESTADO);
}


                    if(row2.ID == null) {
pstmt_tOracleOutput_2.setNull(2 + count_tOracleOutput_2, java.sql.Types.INTEGER);
} else {pstmt_tOracleOutput_2.setInt(2 + count_tOracleOutput_2, row2.ID);
}

                try {
                    nb_line_tOracleOutput_2++;
                    int processedCount_tOracleOutput_2 = pstmt_tOracleOutput_2.executeUpdate();
                    updatedCount_tOracleOutput_2 += processedCount_tOracleOutput_2;
                    rowsToCommitCount_tOracleOutput_2 += processedCount_tOracleOutput_2;
                } catch(java.lang.Exception e_tOracleOutput_2) {
globalMap.put("tOracleOutput_2_ERROR_MESSAGE",e_tOracleOutput_2.getMessage());
                    whetherReject_tOracleOutput_2 = true;
                        throw(e_tOracleOutput_2);
                }
            if(!whetherReject_tOracleOutput_2) {
            }

 


	tos_count_tOracleOutput_2++;

/**
 * [tOracleOutput_2 main ] stop
 */
	
	/**
	 * [tOracleOutput_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleOutput_2";
	
	

 



/**
 * [tOracleOutput_2 process_data_begin ] stop
 */
	
	/**
	 * [tOracleOutput_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_2";
	
	

 



/**
 * [tOracleOutput_2 process_data_end ] stop
 */



	
	/**
	 * [tFixedFlowInput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_1";
	
	

 



/**
 * [tFixedFlowInput_1 process_data_end ] stop
 */
	
	/**
	 * [tFixedFlowInput_1 end ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_1";
	
	

        }
        globalMap.put("tFixedFlowInput_1_NB_LINE", 1);        

 

ok_Hash.put("tFixedFlowInput_1", true);
end_Hash.put("tFixedFlowInput_1", System.currentTimeMillis());




/**
 * [tFixedFlowInput_1 end ] stop
 */

	
	/**
	 * [tOracleOutput_2 end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_2";
	
	
	



	
        if(pstmt_tOracleOutput_2 != null) {
			
				pstmt_tOracleOutput_2.close();
				resourceMap.remove("pstmt_tOracleOutput_2");
			
        }
    resourceMap.put("statementClosed_tOracleOutput_2", true);

	
	nb_line_deleted_tOracleOutput_2=nb_line_deleted_tOracleOutput_2+ deletedCount_tOracleOutput_2;
	nb_line_update_tOracleOutput_2=nb_line_update_tOracleOutput_2 + updatedCount_tOracleOutput_2;
	nb_line_inserted_tOracleOutput_2=nb_line_inserted_tOracleOutput_2 + insertedCount_tOracleOutput_2;
	nb_line_rejected_tOracleOutput_2=nb_line_rejected_tOracleOutput_2 + rejectedCount_tOracleOutput_2;
	
        globalMap.put("tOracleOutput_2_NB_LINE",nb_line_tOracleOutput_2);
        globalMap.put("tOracleOutput_2_NB_LINE_UPDATED",nb_line_update_tOracleOutput_2);
        globalMap.put("tOracleOutput_2_NB_LINE_INSERTED",nb_line_inserted_tOracleOutput_2);
        globalMap.put("tOracleOutput_2_NB_LINE_DELETED",nb_line_deleted_tOracleOutput_2);
        globalMap.put("tOracleOutput_2_NB_LINE_REJECTED", nb_line_rejected_tOracleOutput_2);
    

	



				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row2");
			  	}
			  	
 

ok_Hash.put("tOracleOutput_2", true);
end_Hash.put("tOracleOutput_2", System.currentTimeMillis());

   			if ((Integer)globalMap.get("tOracleOutput_2_NB_LINE_UPDATED")>0) {
   				
					if(execStat){
   	 					runStat.updateStatOnConnection("If4", 0, "true");
					}
				tJava_13Process(globalMap);
			}

			   
   				else{
					if(execStat){   
   	 					runStat.updateStatOnConnection("If4", 0, "false");
					}   	 
   				}



/**
 * [tOracleOutput_2 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFixedFlowInput_1 finally ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_1";
	
	

 



/**
 * [tFixedFlowInput_1 finally ] stop
 */

	
	/**
	 * [tOracleOutput_2 finally ] start
	 */

	

	
	
	currentComponent="tOracleOutput_2";
	
	



    if (resourceMap.get("statementClosed_tOracleOutput_2") == null) {
                java.sql.PreparedStatement pstmtToClose_tOracleOutput_2 = null;
                if ((pstmtToClose_tOracleOutput_2 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tOracleOutput_2")) != null) {
                    pstmtToClose_tOracleOutput_2.close();
                }
    }
 



/**
 * [tOracleOutput_2 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFixedFlowInput_1_SUBPROCESS_STATE", 1);
	}
	


public void tJava_13Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_13_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tJava_13 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_13", false);
		start_Hash.put("tJava_13", System.currentTimeMillis());
		
	
	currentComponent="tJava_13";
	
	
		int tos_count_tJava_13 = 0;
		


//****************************************************************************************//
System.out.println(TalendDate.getCurrentDate()+"Estado Archivo: Actualizado a En proceso");
//****************************************************************************************//
 



/**
 * [tJava_13 begin ] stop
 */
	
	/**
	 * [tJava_13 main ] start
	 */

	

	
	
	currentComponent="tJava_13";
	
	

 


	tos_count_tJava_13++;

/**
 * [tJava_13 main ] stop
 */
	
	/**
	 * [tJava_13 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_13";
	
	

 



/**
 * [tJava_13 process_data_begin ] stop
 */
	
	/**
	 * [tJava_13 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_13";
	
	

 



/**
 * [tJava_13 process_data_end ] stop
 */
	
	/**
	 * [tJava_13 end ] start
	 */

	

	
	
	currentComponent="tJava_13";
	
	

 

ok_Hash.put("tJava_13", true);
end_Hash.put("tJava_13", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk1", 0, "ok");
				}
				tFixedFlowInput_2Process(globalMap);



/**
 * [tJava_13 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_13 finally ] start
	 */

	

	
	
	currentComponent="tJava_13";
	
	

 



/**
 * [tJava_13 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_13_SUBPROCESS_STATE", 1);
	}
	


public static class row4Struct implements routines.system.IPersistableRow<row4Struct> {
    final static byte[] commonByteArrayLock_AFI_PRINCIPAL_ETL_principal = new byte[0];
    static byte[] commonByteArray_AFI_PRINCIPAL_ETL_principal = new byte[0];

	
			    public Integer TipoJobEvaluar_;

				public Integer getTipoJobEvaluar_ () {
					return this.TipoJobEvaluar_;
				}

				public Boolean TipoJobEvaluar_IsNullable(){
				    return true;
				}
				public Boolean TipoJobEvaluar_IsKey(){
				    return false;
				}
				public Integer TipoJobEvaluar_Length(){
				    return 0;
				}
				public Integer TipoJobEvaluar_Precision(){
				    return 0;
				}
				public String TipoJobEvaluar_Default(){
				
					return null;
				
				}
				public String TipoJobEvaluar_Comment(){
				
				    return "";
				
				}
				public String TipoJobEvaluar_Pattern(){
				
					return "";
				
				}
				public String TipoJobEvaluar_OriginalDbColumnName(){
				
					return "TipoJobEvaluar_";
				
				}

				
			    public Integer IdJobEvaluar;

				public Integer getIdJobEvaluar () {
					return this.IdJobEvaluar;
				}

				public Boolean IdJobEvaluarIsNullable(){
				    return true;
				}
				public Boolean IdJobEvaluarIsKey(){
				    return false;
				}
				public Integer IdJobEvaluarLength(){
				    return 0;
				}
				public Integer IdJobEvaluarPrecision(){
				    return 0;
				}
				public String IdJobEvaluarDefault(){
				
					return null;
				
				}
				public String IdJobEvaluarComment(){
				
				    return "";
				
				}
				public String IdJobEvaluarPattern(){
				
					return "";
				
				}
				public String IdJobEvaluarOriginalDbColumnName(){
				
					return "IdJobEvaluar";
				
				}

				
			    public Integer IdArchivoEvaluar_;

				public Integer getIdArchivoEvaluar_ () {
					return this.IdArchivoEvaluar_;
				}

				public Boolean IdArchivoEvaluar_IsNullable(){
				    return true;
				}
				public Boolean IdArchivoEvaluar_IsKey(){
				    return false;
				}
				public Integer IdArchivoEvaluar_Length(){
				    return 0;
				}
				public Integer IdArchivoEvaluar_Precision(){
				    return 0;
				}
				public String IdArchivoEvaluar_Default(){
				
					return null;
				
				}
				public String IdArchivoEvaluar_Comment(){
				
				    return "";
				
				}
				public String IdArchivoEvaluar_Pattern(){
				
					return "";
				
				}
				public String IdArchivoEvaluar_OriginalDbColumnName(){
				
					return "IdArchivoEvaluar_";
				
				}

				
			    public Integer UsuarioSistema_;

				public Integer getUsuarioSistema_ () {
					return this.UsuarioSistema_;
				}

				public Boolean UsuarioSistema_IsNullable(){
				    return true;
				}
				public Boolean UsuarioSistema_IsKey(){
				    return false;
				}
				public Integer UsuarioSistema_Length(){
				    return 0;
				}
				public Integer UsuarioSistema_Precision(){
				    return 0;
				}
				public String UsuarioSistema_Default(){
				
					return null;
				
				}
				public String UsuarioSistema_Comment(){
				
				    return "";
				
				}
				public String UsuarioSistema_Pattern(){
				
					return "";
				
				}
				public String UsuarioSistema_OriginalDbColumnName(){
				
					return "UsuarioSistema_";
				
				}

				
			    public Integer TipoProceso_;

				public Integer getTipoProceso_ () {
					return this.TipoProceso_;
				}

				public Boolean TipoProceso_IsNullable(){
				    return true;
				}
				public Boolean TipoProceso_IsKey(){
				    return false;
				}
				public Integer TipoProceso_Length(){
				    return 0;
				}
				public Integer TipoProceso_Precision(){
				    return 0;
				}
				public String TipoProceso_Default(){
				
					return null;
				
				}
				public String TipoProceso_Comment(){
				
				    return "";
				
				}
				public String TipoProceso_Pattern(){
				
					return "";
				
				}
				public String TipoProceso_OriginalDbColumnName(){
				
					return "TipoProceso_";
				
				}

				
			    public Integer ProcesoId_;

				public Integer getProcesoId_ () {
					return this.ProcesoId_;
				}

				public Boolean ProcesoId_IsNullable(){
				    return true;
				}
				public Boolean ProcesoId_IsKey(){
				    return false;
				}
				public Integer ProcesoId_Length(){
				    return 0;
				}
				public Integer ProcesoId_Precision(){
				    return 0;
				}
				public String ProcesoId_Default(){
				
					return null;
				
				}
				public String ProcesoId_Comment(){
				
				    return "";
				
				}
				public String ProcesoId_Pattern(){
				
					return "";
				
				}
				public String ProcesoId_OriginalDbColumnName(){
				
					return "ProcesoId_";
				
				}

				
			    public String DescripcionProceso_;

				public String getDescripcionProceso_ () {
					return this.DescripcionProceso_;
				}

				public Boolean DescripcionProceso_IsNullable(){
				    return true;
				}
				public Boolean DescripcionProceso_IsKey(){
				    return false;
				}
				public Integer DescripcionProceso_Length(){
				    return 0;
				}
				public Integer DescripcionProceso_Precision(){
				    return 0;
				}
				public String DescripcionProceso_Default(){
				
					return null;
				
				}
				public String DescripcionProceso_Comment(){
				
				    return "";
				
				}
				public String DescripcionProceso_Pattern(){
				
					return "";
				
				}
				public String DescripcionProceso_OriginalDbColumnName(){
				
					return "DescripcionProceso_";
				
				}

				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_PRINCIPAL_ETL_principal.length) {
				if(length < 1024 && commonByteArray_AFI_PRINCIPAL_ETL_principal.length == 0) {
   					commonByteArray_AFI_PRINCIPAL_ETL_principal = new byte[1024];
				} else {
   					commonByteArray_AFI_PRINCIPAL_ETL_principal = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_PRINCIPAL_ETL_principal, 0, length);
			strReturn = new String(commonByteArray_AFI_PRINCIPAL_ETL_principal, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_PRINCIPAL_ETL_principal.length) {
				if(length < 1024 && commonByteArray_AFI_PRINCIPAL_ETL_principal.length == 0) {
   					commonByteArray_AFI_PRINCIPAL_ETL_principal = new byte[1024];
				} else {
   					commonByteArray_AFI_PRINCIPAL_ETL_principal = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_PRINCIPAL_ETL_principal, 0, length);
			strReturn = new String(commonByteArray_AFI_PRINCIPAL_ETL_principal, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_PRINCIPAL_ETL_principal) {

        	try {

        		int length = 0;
		
						this.TipoJobEvaluar_ = readInteger(dis);
					
						this.IdJobEvaluar = readInteger(dis);
					
						this.IdArchivoEvaluar_ = readInteger(dis);
					
						this.UsuarioSistema_ = readInteger(dis);
					
						this.TipoProceso_ = readInteger(dis);
					
						this.ProcesoId_ = readInteger(dis);
					
					this.DescripcionProceso_ = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_PRINCIPAL_ETL_principal) {

        	try {

        		int length = 0;
		
						this.TipoJobEvaluar_ = readInteger(dis);
					
						this.IdJobEvaluar = readInteger(dis);
					
						this.IdArchivoEvaluar_ = readInteger(dis);
					
						this.UsuarioSistema_ = readInteger(dis);
					
						this.TipoProceso_ = readInteger(dis);
					
						this.ProcesoId_ = readInteger(dis);
					
					this.DescripcionProceso_ = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.TipoJobEvaluar_,dos);
					
					// Integer
				
						writeInteger(this.IdJobEvaluar,dos);
					
					// Integer
				
						writeInteger(this.IdArchivoEvaluar_,dos);
					
					// Integer
				
						writeInteger(this.UsuarioSistema_,dos);
					
					// Integer
				
						writeInteger(this.TipoProceso_,dos);
					
					// Integer
				
						writeInteger(this.ProcesoId_,dos);
					
					// String
				
						writeString(this.DescripcionProceso_,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.TipoJobEvaluar_,dos);
					
					// Integer
				
						writeInteger(this.IdJobEvaluar,dos);
					
					// Integer
				
						writeInteger(this.IdArchivoEvaluar_,dos);
					
					// Integer
				
						writeInteger(this.UsuarioSistema_,dos);
					
					// Integer
				
						writeInteger(this.TipoProceso_,dos);
					
					// Integer
				
						writeInteger(this.ProcesoId_,dos);
					
					// String
				
						writeString(this.DescripcionProceso_,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("TipoJobEvaluar_="+String.valueOf(TipoJobEvaluar_));
		sb.append(",IdJobEvaluar="+String.valueOf(IdJobEvaluar));
		sb.append(",IdArchivoEvaluar_="+String.valueOf(IdArchivoEvaluar_));
		sb.append(",UsuarioSistema_="+String.valueOf(UsuarioSistema_));
		sb.append(",TipoProceso_="+String.valueOf(TipoProceso_));
		sb.append(",ProcesoId_="+String.valueOf(ProcesoId_));
		sb.append(",DescripcionProceso_="+DescripcionProceso_);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row4Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row5Struct implements routines.system.IPersistableRow<row5Struct> {
    final static byte[] commonByteArrayLock_AFI_PRINCIPAL_ETL_principal = new byte[0];
    static byte[] commonByteArray_AFI_PRINCIPAL_ETL_principal = new byte[0];

	
			    public Integer TipoJobEvaluar_;

				public Integer getTipoJobEvaluar_ () {
					return this.TipoJobEvaluar_;
				}

				public Boolean TipoJobEvaluar_IsNullable(){
				    return true;
				}
				public Boolean TipoJobEvaluar_IsKey(){
				    return false;
				}
				public Integer TipoJobEvaluar_Length(){
				    return 0;
				}
				public Integer TipoJobEvaluar_Precision(){
				    return 0;
				}
				public String TipoJobEvaluar_Default(){
				
					return null;
				
				}
				public String TipoJobEvaluar_Comment(){
				
				    return "";
				
				}
				public String TipoJobEvaluar_Pattern(){
				
					return "";
				
				}
				public String TipoJobEvaluar_OriginalDbColumnName(){
				
					return "TipoJobEvaluar_";
				
				}

				
			    public Integer IdJobEvaluar;

				public Integer getIdJobEvaluar () {
					return this.IdJobEvaluar;
				}

				public Boolean IdJobEvaluarIsNullable(){
				    return true;
				}
				public Boolean IdJobEvaluarIsKey(){
				    return false;
				}
				public Integer IdJobEvaluarLength(){
				    return 0;
				}
				public Integer IdJobEvaluarPrecision(){
				    return 0;
				}
				public String IdJobEvaluarDefault(){
				
					return null;
				
				}
				public String IdJobEvaluarComment(){
				
				    return "";
				
				}
				public String IdJobEvaluarPattern(){
				
					return "";
				
				}
				public String IdJobEvaluarOriginalDbColumnName(){
				
					return "IdJobEvaluar";
				
				}

				
			    public Integer IdArchivoEvaluar_;

				public Integer getIdArchivoEvaluar_ () {
					return this.IdArchivoEvaluar_;
				}

				public Boolean IdArchivoEvaluar_IsNullable(){
				    return true;
				}
				public Boolean IdArchivoEvaluar_IsKey(){
				    return false;
				}
				public Integer IdArchivoEvaluar_Length(){
				    return 0;
				}
				public Integer IdArchivoEvaluar_Precision(){
				    return 0;
				}
				public String IdArchivoEvaluar_Default(){
				
					return null;
				
				}
				public String IdArchivoEvaluar_Comment(){
				
				    return "";
				
				}
				public String IdArchivoEvaluar_Pattern(){
				
					return "";
				
				}
				public String IdArchivoEvaluar_OriginalDbColumnName(){
				
					return "IdArchivoEvaluar_";
				
				}

				
			    public Integer UsuarioSistema_;

				public Integer getUsuarioSistema_ () {
					return this.UsuarioSistema_;
				}

				public Boolean UsuarioSistema_IsNullable(){
				    return true;
				}
				public Boolean UsuarioSistema_IsKey(){
				    return false;
				}
				public Integer UsuarioSistema_Length(){
				    return 0;
				}
				public Integer UsuarioSistema_Precision(){
				    return 0;
				}
				public String UsuarioSistema_Default(){
				
					return null;
				
				}
				public String UsuarioSistema_Comment(){
				
				    return "";
				
				}
				public String UsuarioSistema_Pattern(){
				
					return "";
				
				}
				public String UsuarioSistema_OriginalDbColumnName(){
				
					return "UsuarioSistema_";
				
				}

				
			    public Integer TipoProceso_;

				public Integer getTipoProceso_ () {
					return this.TipoProceso_;
				}

				public Boolean TipoProceso_IsNullable(){
				    return true;
				}
				public Boolean TipoProceso_IsKey(){
				    return false;
				}
				public Integer TipoProceso_Length(){
				    return 0;
				}
				public Integer TipoProceso_Precision(){
				    return 0;
				}
				public String TipoProceso_Default(){
				
					return null;
				
				}
				public String TipoProceso_Comment(){
				
				    return "";
				
				}
				public String TipoProceso_Pattern(){
				
					return "";
				
				}
				public String TipoProceso_OriginalDbColumnName(){
				
					return "TipoProceso_";
				
				}

				
			    public Integer ProcesoId_;

				public Integer getProcesoId_ () {
					return this.ProcesoId_;
				}

				public Boolean ProcesoId_IsNullable(){
				    return true;
				}
				public Boolean ProcesoId_IsKey(){
				    return false;
				}
				public Integer ProcesoId_Length(){
				    return 0;
				}
				public Integer ProcesoId_Precision(){
				    return 0;
				}
				public String ProcesoId_Default(){
				
					return null;
				
				}
				public String ProcesoId_Comment(){
				
				    return "";
				
				}
				public String ProcesoId_Pattern(){
				
					return "";
				
				}
				public String ProcesoId_OriginalDbColumnName(){
				
					return "ProcesoId_";
				
				}

				
			    public String DescripcionProceso_;

				public String getDescripcionProceso_ () {
					return this.DescripcionProceso_;
				}

				public Boolean DescripcionProceso_IsNullable(){
				    return true;
				}
				public Boolean DescripcionProceso_IsKey(){
				    return false;
				}
				public Integer DescripcionProceso_Length(){
				    return 0;
				}
				public Integer DescripcionProceso_Precision(){
				    return 0;
				}
				public String DescripcionProceso_Default(){
				
					return null;
				
				}
				public String DescripcionProceso_Comment(){
				
				    return "";
				
				}
				public String DescripcionProceso_Pattern(){
				
					return "";
				
				}
				public String DescripcionProceso_OriginalDbColumnName(){
				
					return "DescripcionProceso_";
				
				}

				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_PRINCIPAL_ETL_principal.length) {
				if(length < 1024 && commonByteArray_AFI_PRINCIPAL_ETL_principal.length == 0) {
   					commonByteArray_AFI_PRINCIPAL_ETL_principal = new byte[1024];
				} else {
   					commonByteArray_AFI_PRINCIPAL_ETL_principal = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_PRINCIPAL_ETL_principal, 0, length);
			strReturn = new String(commonByteArray_AFI_PRINCIPAL_ETL_principal, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_PRINCIPAL_ETL_principal.length) {
				if(length < 1024 && commonByteArray_AFI_PRINCIPAL_ETL_principal.length == 0) {
   					commonByteArray_AFI_PRINCIPAL_ETL_principal = new byte[1024];
				} else {
   					commonByteArray_AFI_PRINCIPAL_ETL_principal = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_PRINCIPAL_ETL_principal, 0, length);
			strReturn = new String(commonByteArray_AFI_PRINCIPAL_ETL_principal, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_PRINCIPAL_ETL_principal) {

        	try {

        		int length = 0;
		
						this.TipoJobEvaluar_ = readInteger(dis);
					
						this.IdJobEvaluar = readInteger(dis);
					
						this.IdArchivoEvaluar_ = readInteger(dis);
					
						this.UsuarioSistema_ = readInteger(dis);
					
						this.TipoProceso_ = readInteger(dis);
					
						this.ProcesoId_ = readInteger(dis);
					
					this.DescripcionProceso_ = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_PRINCIPAL_ETL_principal) {

        	try {

        		int length = 0;
		
						this.TipoJobEvaluar_ = readInteger(dis);
					
						this.IdJobEvaluar = readInteger(dis);
					
						this.IdArchivoEvaluar_ = readInteger(dis);
					
						this.UsuarioSistema_ = readInteger(dis);
					
						this.TipoProceso_ = readInteger(dis);
					
						this.ProcesoId_ = readInteger(dis);
					
					this.DescripcionProceso_ = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.TipoJobEvaluar_,dos);
					
					// Integer
				
						writeInteger(this.IdJobEvaluar,dos);
					
					// Integer
				
						writeInteger(this.IdArchivoEvaluar_,dos);
					
					// Integer
				
						writeInteger(this.UsuarioSistema_,dos);
					
					// Integer
				
						writeInteger(this.TipoProceso_,dos);
					
					// Integer
				
						writeInteger(this.ProcesoId_,dos);
					
					// String
				
						writeString(this.DescripcionProceso_,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.TipoJobEvaluar_,dos);
					
					// Integer
				
						writeInteger(this.IdJobEvaluar,dos);
					
					// Integer
				
						writeInteger(this.IdArchivoEvaluar_,dos);
					
					// Integer
				
						writeInteger(this.UsuarioSistema_,dos);
					
					// Integer
				
						writeInteger(this.TipoProceso_,dos);
					
					// Integer
				
						writeInteger(this.ProcesoId_,dos);
					
					// String
				
						writeString(this.DescripcionProceso_,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("TipoJobEvaluar_="+String.valueOf(TipoJobEvaluar_));
		sb.append(",IdJobEvaluar="+String.valueOf(IdJobEvaluar));
		sb.append(",IdArchivoEvaluar_="+String.valueOf(IdArchivoEvaluar_));
		sb.append(",UsuarioSistema_="+String.valueOf(UsuarioSistema_));
		sb.append(",TipoProceso_="+String.valueOf(TipoProceso_));
		sb.append(",ProcesoId_="+String.valueOf(ProcesoId_));
		sb.append(",DescripcionProceso_="+DescripcionProceso_);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row5Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tFixedFlowInput_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFixedFlowInput_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row5Struct row5 = new row5Struct();
row4Struct row4 = new row4Struct();





	
	/**
	 * [tJavaRow_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaRow_2", false);
		start_Hash.put("tJavaRow_2", System.currentTimeMillis());
		
	
	currentComponent="tJavaRow_2";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row4");
					}
				
		int tos_count_tJavaRow_2 = 0;
		

int nb_line_tJavaRow_2 = 0;

 



/**
 * [tJavaRow_2 begin ] stop
 */



	
	/**
	 * [tOracleSP_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleSP_1", false);
		start_Hash.put("tOracleSP_1", System.currentTimeMillis());
		
	
	currentComponent="tOracleSP_1";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row5");
					}
				
		int tos_count_tOracleSP_1 = 0;
		

	java.sql.Connection connection_tOracleSP_1 = null;
	connection_tOracleSP_1 = (java.sql.Connection) globalMap.get("conn_tOracleConnection_1");
	

java.sql.CallableStatement statement_tOracleSP_1 = connection_tOracleSP_1.prepareCall("{call " + "EXD.InsProceso" + "(?,?,?,?,?,?,?)}");

java.sql.Timestamp tmpDate_tOracleSP_1;
String tmpString_tOracleSP_1;

 



/**
 * [tOracleSP_1 begin ] stop
 */



	
	/**
	 * [tFixedFlowInput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tFixedFlowInput_2", false);
		start_Hash.put("tFixedFlowInput_2", System.currentTimeMillis());
		
	
	currentComponent="tFixedFlowInput_2";
	
	
		int tos_count_tFixedFlowInput_2 = 0;
		

	    for (int i_tFixedFlowInput_2 = 0 ; i_tFixedFlowInput_2 < 1 ; i_tFixedFlowInput_2++) {
	                	            	
    	            		row5.TipoJobEvaluar_ = context.tipoJobProceso;
    	            	        	            	
    	            		row5.IdJobEvaluar = null;
    	            	        	            	
    	            		row5.IdArchivoEvaluar_ = context.infoIdArchivo;
    	            	        	            	
    	            		row5.UsuarioSistema_ = context.infoUsuarioIdArchivo;
    	            	        	            	
    	            		row5.TipoProceso_ = context.tipoProceso;
    	            	        	            	
    	            		row5.ProcesoId_ = null;        	            	
    	            	        	            	
    	            		row5.DescripcionProceso_ = null;        	            	
    	            	

 



/**
 * [tFixedFlowInput_2 begin ] stop
 */
	
	/**
	 * [tFixedFlowInput_2 main ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_2";
	
	

 


	tos_count_tFixedFlowInput_2++;

/**
 * [tFixedFlowInput_2 main ] stop
 */
	
	/**
	 * [tFixedFlowInput_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_2";
	
	

 



/**
 * [tFixedFlowInput_2 process_data_begin ] stop
 */

	
	/**
	 * [tOracleSP_1 main ] start
	 */

	

	
	
	currentComponent="tOracleSP_1";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row5"
						
						);
					}
					

			// code for the argument 1 (TipoJobEvaluar_) of type 'IN AUTOMAPPING'
    					if (row5.TipoJobEvaluar_ == null) {
    						statement_tOracleSP_1.setNull(1, java.sql.Types.INTEGER);
    					} else {
    					
                        statement_tOracleSP_1.setInt(1, row5.TipoJobEvaluar_);
    					}
    					
			// code for the argument 2 (IdJobEvaluar) of type 'IN AUTOMAPPING'
    					if (row5.IdJobEvaluar == null) {
    						statement_tOracleSP_1.setNull(2, java.sql.Types.INTEGER);
    					} else {
    					
                        statement_tOracleSP_1.setInt(2, row5.IdJobEvaluar);
    					}
    					
			// code for the argument 3 (IdArchivoEvaluar_) of type 'IN AUTOMAPPING'
    					if (row5.IdArchivoEvaluar_ == null) {
    						statement_tOracleSP_1.setNull(3, java.sql.Types.INTEGER);
    					} else {
    					
                        statement_tOracleSP_1.setInt(3, row5.IdArchivoEvaluar_);
    					}
    					
			// code for the argument 4 (UsuarioSistema_) of type 'IN AUTOMAPPING'
    					if (row5.UsuarioSistema_ == null) {
    						statement_tOracleSP_1.setNull(4, java.sql.Types.INTEGER);
    					} else {
    					
                        statement_tOracleSP_1.setInt(4, row5.UsuarioSistema_);
    					}
    					
			// code for the argument 5 (TipoProceso_) of type 'IN AUTOMAPPING'
    					if (row5.TipoProceso_ == null) {
    						statement_tOracleSP_1.setNull(5, java.sql.Types.INTEGER);
    					} else {
    					
                        statement_tOracleSP_1.setInt(5, row5.TipoProceso_);
    					}
    					
			// code for the argument 6 (ProcesoId_) of type 'OUT AUTOMAPPING'
					statement_tOracleSP_1.registerOutParameter(6, java.sql.Types.INTEGER);
			// code for the argument 7 (DescripcionProceso_) of type 'OUT AUTOMAPPING'
					statement_tOracleSP_1.registerOutParameter(7, java.sql.Types.VARCHAR);
		statement_tOracleSP_1.execute();
		
								row4.TipoJobEvaluar_ = row5.TipoJobEvaluar_;
								
								row4.IdJobEvaluar = row5.IdJobEvaluar;
								
								row4.IdArchivoEvaluar_ = row5.IdArchivoEvaluar_;
								
								row4.UsuarioSistema_ = row5.UsuarioSistema_;
								
								row4.TipoProceso_ = row5.TipoProceso_;
								
									row4.ProcesoId_ = statement_tOracleSP_1.getInt(6);
									
									if (statement_tOracleSP_1.wasNull()) {
										row4.ProcesoId_ = null;
									}
									
									row4.DescripcionProceso_ = statement_tOracleSP_1.getString(7);
									
									if (statement_tOracleSP_1.wasNull()) {
										row4.DescripcionProceso_ = null;
									}
									

 


	tos_count_tOracleSP_1++;

/**
 * [tOracleSP_1 main ] stop
 */
	
	/**
	 * [tOracleSP_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleSP_1";
	
	

 



/**
 * [tOracleSP_1 process_data_begin ] stop
 */

	
	/**
	 * [tJavaRow_2 main ] start
	 */

	

	
	
	currentComponent="tJavaRow_2";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row4"
						
						);
					}
					

    //****************************************************************************************//
//*** ALMACENAMIENTO EN VARIABLES DE CONTEXTO DE LA INFORMACIÓN DEL PROCESO **************//
//****************************************************************************************//
context.idProceso = row4.ProcesoId_;
context.descripcionProceso = row4.DescripcionProceso_;

System.out.println(TalendDate.getCurrentDate()+" : Id Proceso: "+context.idProceso);
System.out.println(TalendDate.getCurrentDate()+" : Descripcion Proceso: "+context.descripcionProceso);
    nb_line_tJavaRow_2++;   

 


	tos_count_tJavaRow_2++;

/**
 * [tJavaRow_2 main ] stop
 */
	
	/**
	 * [tJavaRow_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJavaRow_2";
	
	

 



/**
 * [tJavaRow_2 process_data_begin ] stop
 */
	
	/**
	 * [tJavaRow_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tJavaRow_2";
	
	

 



/**
 * [tJavaRow_2 process_data_end ] stop
 */



	
	/**
	 * [tOracleSP_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleSP_1";
	
	

 



/**
 * [tOracleSP_1 process_data_end ] stop
 */



	
	/**
	 * [tFixedFlowInput_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_2";
	
	

 



/**
 * [tFixedFlowInput_2 process_data_end ] stop
 */
	
	/**
	 * [tFixedFlowInput_2 end ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_2";
	
	

        }
        globalMap.put("tFixedFlowInput_2_NB_LINE", 1);        

 

ok_Hash.put("tFixedFlowInput_2", true);
end_Hash.put("tFixedFlowInput_2", System.currentTimeMillis());




/**
 * [tFixedFlowInput_2 end ] stop
 */

	
	/**
	 * [tOracleSP_1 end ] start
	 */

	

	
	
	currentComponent="tOracleSP_1";
	
	


	statement_tOracleSP_1.close();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row5");
			  	}
			  	
 

ok_Hash.put("tOracleSP_1", true);
end_Hash.put("tOracleSP_1", System.currentTimeMillis());




/**
 * [tOracleSP_1 end ] stop
 */

	
	/**
	 * [tJavaRow_2 end ] start
	 */

	

	
	
	currentComponent="tJavaRow_2";
	
	

globalMap.put("tJavaRow_2_NB_LINE",nb_line_tJavaRow_2);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row4");
			  	}
			  	
 

ok_Hash.put("tJavaRow_2", true);
end_Hash.put("tJavaRow_2", System.currentTimeMillis());

   			if (((context.idProceso>0) && (context.tipoJobProceso == context.tipoJobEntesTerritoriales))) {
   				
					if(execStat){
   	 					runStat.updateStatOnConnection("If19", 0, "true");
					}
				tJava_3Process(globalMap);
			}

			   
   				else{
					if(execStat){   
   	 					runStat.updateStatOnConnection("If19", 0, "false");
					}   	 
   				}
   			if (context.idProceso==0) {
   				
					if(execStat){
   	 					runStat.updateStatOnConnection("If26", 0, "true");
					}
				tFixedFlowInput_5Process(globalMap);
			}

			   
   				else{
					if(execStat){   
   	 					runStat.updateStatOnConnection("If26", 0, "false");
					}   	 
   				}
   			if (((context.idProceso>0) && (context.tipoJobProceso == context.tipoJobMinsaludEtapa2NuevosRegistros))) {
   				
					if(execStat){
   	 					runStat.updateStatOnConnection("If24", 0, "true");
					}
				tJava_1Process(globalMap);
			}

			   
   				else{
					if(execStat){   
   	 					runStat.updateStatOnConnection("If24", 0, "false");
					}   	 
   				}
   			if (((context.idProceso>0) && (context.tipoJobProceso == context.tipoJobMinsaludEtapa3Multiafiliacion))) {
   				
					if(execStat){
   	 					runStat.updateStatOnConnection("If14", 0, "true");
					}
				tJava_9Process(globalMap);
			}

			   
   				else{
					if(execStat){   
   	 					runStat.updateStatOnConnection("If14", 0, "false");
					}   	 
   				}
   			if (((context.idProceso>0) && (context.tipoJobProceso == context.tipoJobCompendioSalud))) {
   				
					if(execStat){
   	 					runStat.updateStatOnConnection("If27", 0, "true");
					}
				tJava_12Process(globalMap);
			}

			   
   				else{
					if(execStat){   
   	 					runStat.updateStatOnConnection("If27", 0, "false");
					}   	 
   				}
   			if (((context.idProceso>0) && (context.tipoJobProceso == context.tipoJobMinsaludEtapa2Novedades))) {
   				
					if(execStat){
   	 					runStat.updateStatOnConnection("If13", 0, "true");
					}
				tJava_5Process(globalMap);
			}

			   
   				else{
					if(execStat){   
   	 					runStat.updateStatOnConnection("If13", 0, "false");
					}   	 
   				}
   			if (((context.idProceso>0) && (context.tipoJobProceso == context.tipoJobFedevida))) {
   				
					if(execStat){
   	 					runStat.updateStatOnConnection("If15", 0, "true");
					}
				tJava_10Process(globalMap);
			}

			   
   				else{
					if(execStat){   
   	 					runStat.updateStatOnConnection("If15", 0, "false");
					}   	 
   				}



/**
 * [tJavaRow_2 end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFixedFlowInput_2 finally ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_2";
	
	

 



/**
 * [tFixedFlowInput_2 finally ] stop
 */

	
	/**
	 * [tOracleSP_1 finally ] start
	 */

	

	
	
	currentComponent="tOracleSP_1";
	
	

 



/**
 * [tOracleSP_1 finally ] stop
 */

	
	/**
	 * [tJavaRow_2 finally ] start
	 */

	

	
	
	currentComponent="tJavaRow_2";
	
	

 



/**
 * [tJavaRow_2 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFixedFlowInput_2_SUBPROCESS_STATE", 1);
	}
	


public void tJava_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_3_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tJava_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_3", false);
		start_Hash.put("tJava_3", System.currentTimeMillis());
		
	
	currentComponent="tJava_3";
	
	
		int tos_count_tJava_3 = 0;
		


try
	{
		int nb_line=((Integer)globalMap.get("tOracleOutput_2_NB_LINE_UPDATED"));
		if(nb_line>0)
			{				
				//****************************************************************************************//
				System.out.println("*** INICIANDO EJECUCION JOB ENTES TERRITORIALES ****************************************");
				//****************************************************************************************//
			}		
	}
catch(Exception e)
	{
		//****************************************************************************************//
		System.out.println("Excepción: " + e);
		//****************************************************************************************//
	}
 



/**
 * [tJava_3 begin ] stop
 */
	
	/**
	 * [tJava_3 main ] start
	 */

	

	
	
	currentComponent="tJava_3";
	
	

 


	tos_count_tJava_3++;

/**
 * [tJava_3 main ] stop
 */
	
	/**
	 * [tJava_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_3";
	
	

 



/**
 * [tJava_3 process_data_begin ] stop
 */
	
	/**
	 * [tJava_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_3";
	
	

 



/**
 * [tJava_3 process_data_end ] stop
 */
	
	/**
	 * [tJava_3 end ] start
	 */

	

	
	
	currentComponent="tJava_3";
	
	

 

ok_Hash.put("tJava_3", true);
end_Hash.put("tJava_3", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk17", 0, "ok");
				}
				tRunJob_5Process(globalMap);



/**
 * [tJava_3 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_3 finally ] start
	 */

	

	
	
	currentComponent="tJava_3";
	
	

 



/**
 * [tJava_3 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_3_SUBPROCESS_STATE", 1);
	}
	


public void tRunJob_5Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tRunJob_5_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tRunJob_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tRunJob_5", false);
		start_Hash.put("tRunJob_5", System.currentTimeMillis());
		
	
	currentComponent="tRunJob_5";
	
	
		int tos_count_tRunJob_5 = 0;
		


 



/**
 * [tRunJob_5 begin ] stop
 */
	
	/**
	 * [tRunJob_5 main ] start
	 */

	

	
	
	currentComponent="tRunJob_5";
	
	
	java.util.List<String> paraList_tRunJob_5 = new java.util.ArrayList<String>();
	
	        				paraList_tRunJob_5.add("--father_pid="+pid);
	      			
	        				paraList_tRunJob_5.add("--root_pid="+rootPid);
	      			
	        				paraList_tRunJob_5.add("--father_node=tRunJob_5");
	      			
	        				paraList_tRunJob_5.add("--context=Default");
	      			
		if(enableLogStash){
			paraList_tRunJob_5.add("--audit.enabled="+enableLogStash);
		}
		
	//for feature:10589
	
		paraList_tRunJob_5.add("--stat_port=" + portStats);
	

	if(resuming_logs_dir_path != null){
		paraList_tRunJob_5.add("--resuming_logs_dir_path=" + resuming_logs_dir_path);
	}
	String childResumePath_tRunJob_5 = ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path);
	String tRunJobName_tRunJob_5 = ResumeUtil.getRighttRunJob(resuming_checkpoint_path);
	if("tRunJob_5".equals(tRunJobName_tRunJob_5) && childResumePath_tRunJob_5 != null){
		paraList_tRunJob_5.add("--resuming_checkpoint_path=" + ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path));
	}
	paraList_tRunJob_5.add("--parent_part_launcher=JOB:" + jobName + "/NODE:tRunJob_5");
	
	java.util.Map<String, Object> parentContextMap_tRunJob_5 = new java.util.HashMap<String, Object>();

	

	Object obj_tRunJob_5 = null;

	
		obj_tRunJob_5 = context.infoNombreArchivo;
		if(obj_tRunJob_5!=null) {
			if (obj_tRunJob_5.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_5.add("--context_param infoNombreArchivo=" + ((java.util.Date) obj_tRunJob_5).getTime());
			} else {
				
					paraList_tRunJob_5.add("--context_param infoNombreArchivo=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_5));
					
				
			}
		} else {
			paraList_tRunJob_5.add("--context_param infoNombreArchivo=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_5.put("infoNombreArchivo", obj_tRunJob_5);
	
		obj_tRunJob_5 = context.infoUsuarioIdArchivo;
		if(obj_tRunJob_5!=null) {
			if (obj_tRunJob_5.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_5.add("--context_param infoUsuarioIdArchivo=" + ((java.util.Date) obj_tRunJob_5).getTime());
			} else {
				
					paraList_tRunJob_5.add("--context_param infoUsuarioIdArchivo=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_5));
					
				
			}
		} else {
			paraList_tRunJob_5.add("--context_param infoUsuarioIdArchivo=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_5.put("infoUsuarioIdArchivo", obj_tRunJob_5);
	
		obj_tRunJob_5 = context.infoIdArchivo;
		if(obj_tRunJob_5!=null) {
			if (obj_tRunJob_5.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_5.add("--context_param infoIdArchivo=" + ((java.util.Date) obj_tRunJob_5).getTime());
			} else {
				
					paraList_tRunJob_5.add("--context_param infoIdArchivo=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_5));
					
				
			}
		} else {
			paraList_tRunJob_5.add("--context_param infoIdArchivo=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_5.put("infoIdArchivo", obj_tRunJob_5);
	
		obj_tRunJob_5 = context.infoTipoArchivo;
		if(obj_tRunJob_5!=null) {
			if (obj_tRunJob_5.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_5.add("--context_param infoTipoArchivo=" + ((java.util.Date) obj_tRunJob_5).getTime());
			} else {
				
					paraList_tRunJob_5.add("--context_param infoTipoArchivo=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_5));
					
				
			}
		} else {
			paraList_tRunJob_5.add("--context_param infoTipoArchivo=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_5.put("infoTipoArchivo", obj_tRunJob_5);
	
		obj_tRunJob_5 = context.tipoJobProceso;
		if(obj_tRunJob_5!=null) {
			if (obj_tRunJob_5.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_5.add("--context_param tipoJobProceso=" + ((java.util.Date) obj_tRunJob_5).getTime());
			} else {
				
					paraList_tRunJob_5.add("--context_param tipoJobProceso=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_5));
					
				
			}
		} else {
			paraList_tRunJob_5.add("--context_param tipoJobProceso=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_5.put("tipoJobProceso", obj_tRunJob_5);
	
		obj_tRunJob_5 = context.idProceso;
		if(obj_tRunJob_5!=null) {
			if (obj_tRunJob_5.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_5.add("--context_param idProceso=" + ((java.util.Date) obj_tRunJob_5).getTime());
			} else {
				
					paraList_tRunJob_5.add("--context_param idProceso=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_5));
					
				
			}
		} else {
			paraList_tRunJob_5.add("--context_param idProceso=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_5.put("idProceso", obj_tRunJob_5);
	
		obj_tRunJob_5 = context.tipoProceso;
		if(obj_tRunJob_5!=null) {
			if (obj_tRunJob_5.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_5.add("--context_param tipoProceso=" + ((java.util.Date) obj_tRunJob_5).getTime());
			} else {
				
					paraList_tRunJob_5.add("--context_param tipoProceso=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_5));
					
				
			}
		} else {
			paraList_tRunJob_5.add("--context_param tipoProceso=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_5.put("tipoProceso", obj_tRunJob_5);
	
		obj_tRunJob_5 = context.descripcionProceso;
		if(obj_tRunJob_5!=null) {
			if (obj_tRunJob_5.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_5.add("--context_param descripcionProceso=" + ((java.util.Date) obj_tRunJob_5).getTime());
			} else {
				
					paraList_tRunJob_5.add("--context_param descripcionProceso=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_5));
					
				
			}
		} else {
			paraList_tRunJob_5.add("--context_param descripcionProceso=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_5.put("descripcionProceso", obj_tRunJob_5);
	
		obj_tRunJob_5 = context.fileSystem_Path;
		if(obj_tRunJob_5!=null) {
			if (obj_tRunJob_5.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_5.add("--context_param fileSystem_Path=" + ((java.util.Date) obj_tRunJob_5).getTime());
			} else {
				
					paraList_tRunJob_5.add("--context_param fileSystem_Path=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_5));
					
				
			}
		} else {
			paraList_tRunJob_5.add("--context_param fileSystem_Path=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_5.put("fileSystem_Path", obj_tRunJob_5);
	
		obj_tRunJob_5 = context.fileSystem_Area;
		if(obj_tRunJob_5!=null) {
			if (obj_tRunJob_5.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_5.add("--context_param fileSystem_Area=" + ((java.util.Date) obj_tRunJob_5).getTime());
			} else {
				
					paraList_tRunJob_5.add("--context_param fileSystem_Area=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_5));
					
				
			}
		} else {
			paraList_tRunJob_5.add("--context_param fileSystem_Area=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_5.put("fileSystem_Area", obj_tRunJob_5);
	
		obj_tRunJob_5 = context.oracle_AdditionalParams;
		if(obj_tRunJob_5!=null) {
			if (obj_tRunJob_5.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_5.add("--context_param oracle_AdditionalParams=" + ((java.util.Date) obj_tRunJob_5).getTime());
			} else {
				
					paraList_tRunJob_5.add("--context_param oracle_AdditionalParams=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_5));
					
				
			}
		} else {
			paraList_tRunJob_5.add("--context_param oracle_AdditionalParams=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_5.put("oracle_AdditionalParams", obj_tRunJob_5);
	
		obj_tRunJob_5 = context.oracle_Host;
		if(obj_tRunJob_5!=null) {
			if (obj_tRunJob_5.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_5.add("--context_param oracle_Host=" + ((java.util.Date) obj_tRunJob_5).getTime());
			} else {
				
					paraList_tRunJob_5.add("--context_param oracle_Host=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_5));
					
				
			}
		} else {
			paraList_tRunJob_5.add("--context_param oracle_Host=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_5.put("oracle_Host", obj_tRunJob_5);
	
		obj_tRunJob_5 = context.oracle_Port;
		if(obj_tRunJob_5!=null) {
			if (obj_tRunJob_5.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_5.add("--context_param oracle_Port=" + ((java.util.Date) obj_tRunJob_5).getTime());
			} else {
				
					paraList_tRunJob_5.add("--context_param oracle_Port=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_5));
					
				
			}
		} else {
			paraList_tRunJob_5.add("--context_param oracle_Port=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_5.put("oracle_Port", obj_tRunJob_5);
	
		obj_tRunJob_5 = context.oracle_Sid;
		if(obj_tRunJob_5!=null) {
			if (obj_tRunJob_5.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_5.add("--context_param oracle_Sid=" + ((java.util.Date) obj_tRunJob_5).getTime());
			} else {
				
					paraList_tRunJob_5.add("--context_param oracle_Sid=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_5));
					
				
			}
		} else {
			paraList_tRunJob_5.add("--context_param oracle_Sid=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_5.put("oracle_Sid", obj_tRunJob_5);
	
		obj_tRunJob_5 = context.oracle_ServiceName;
		if(obj_tRunJob_5!=null) {
			if (obj_tRunJob_5.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_5.add("--context_param oracle_ServiceName=" + ((java.util.Date) obj_tRunJob_5).getTime());
			} else {
				
					paraList_tRunJob_5.add("--context_param oracle_ServiceName=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_5));
					
				
			}
		} else {
			paraList_tRunJob_5.add("--context_param oracle_ServiceName=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_5.put("oracle_ServiceName", obj_tRunJob_5);
	
		obj_tRunJob_5 = context.oracle_Schema;
		if(obj_tRunJob_5!=null) {
			if (obj_tRunJob_5.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_5.add("--context_param oracle_Schema=" + ((java.util.Date) obj_tRunJob_5).getTime());
			} else {
				
					paraList_tRunJob_5.add("--context_param oracle_Schema=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_5));
					
				
			}
		} else {
			paraList_tRunJob_5.add("--context_param oracle_Schema=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_5.put("oracle_Schema", obj_tRunJob_5);
	
		obj_tRunJob_5 = context.oracle_User;
		if(obj_tRunJob_5!=null) {
			if (obj_tRunJob_5.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_5.add("--context_param oracle_User=" + ((java.util.Date) obj_tRunJob_5).getTime());
			} else {
				
					paraList_tRunJob_5.add("--context_param oracle_User=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_5));
					
				
			}
		} else {
			paraList_tRunJob_5.add("--context_param oracle_User=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_5.put("oracle_User", obj_tRunJob_5);
	
		obj_tRunJob_5 = context.oracle_Password;
		if(obj_tRunJob_5!=null) {
			if (obj_tRunJob_5.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_5.add("--context_param oracle_Password=" + ((java.util.Date) obj_tRunJob_5).getTime());
			} else {
				
					paraList_tRunJob_5.add("--context_param oracle_Password=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_5));
					
				
			}
		} else {
			paraList_tRunJob_5.add("--context_param oracle_Password=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_5.put("oracle_Password", obj_tRunJob_5);
	
		obj_tRunJob_5 = context.estArchivoActivo;
		if(obj_tRunJob_5!=null) {
			if (obj_tRunJob_5.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_5.add("--context_param estArchivoActivo=" + ((java.util.Date) obj_tRunJob_5).getTime());
			} else {
				
					paraList_tRunJob_5.add("--context_param estArchivoActivo=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_5));
					
				
			}
		} else {
			paraList_tRunJob_5.add("--context_param estArchivoActivo=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_5.put("estArchivoActivo", obj_tRunJob_5);
	
		obj_tRunJob_5 = context.estArchivoInactivo;
		if(obj_tRunJob_5!=null) {
			if (obj_tRunJob_5.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_5.add("--context_param estArchivoInactivo=" + ((java.util.Date) obj_tRunJob_5).getTime());
			} else {
				
					paraList_tRunJob_5.add("--context_param estArchivoInactivo=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_5));
					
				
			}
		} else {
			paraList_tRunJob_5.add("--context_param estArchivoInactivo=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_5.put("estArchivoInactivo", obj_tRunJob_5);
	
		obj_tRunJob_5 = context.estArchivoPausado;
		if(obj_tRunJob_5!=null) {
			if (obj_tRunJob_5.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_5.add("--context_param estArchivoPausado=" + ((java.util.Date) obj_tRunJob_5).getTime());
			} else {
				
					paraList_tRunJob_5.add("--context_param estArchivoPausado=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_5));
					
				
			}
		} else {
			paraList_tRunJob_5.add("--context_param estArchivoPausado=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_5.put("estArchivoPausado", obj_tRunJob_5);
	
		obj_tRunJob_5 = context.estArchivoErrorArchivo;
		if(obj_tRunJob_5!=null) {
			if (obj_tRunJob_5.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_5.add("--context_param estArchivoErrorArchivo=" + ((java.util.Date) obj_tRunJob_5).getTime());
			} else {
				
					paraList_tRunJob_5.add("--context_param estArchivoErrorArchivo=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_5));
					
				
			}
		} else {
			paraList_tRunJob_5.add("--context_param estArchivoErrorArchivo=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_5.put("estArchivoErrorArchivo", obj_tRunJob_5);
	
		obj_tRunJob_5 = context.estArchivoEnProceso;
		if(obj_tRunJob_5!=null) {
			if (obj_tRunJob_5.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_5.add("--context_param estArchivoEnProceso=" + ((java.util.Date) obj_tRunJob_5).getTime());
			} else {
				
					paraList_tRunJob_5.add("--context_param estArchivoEnProceso=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_5));
					
				
			}
		} else {
			paraList_tRunJob_5.add("--context_param estArchivoEnProceso=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_5.put("estArchivoEnProceso", obj_tRunJob_5);
	
		obj_tRunJob_5 = context.estArchivoErrorProcesamiento;
		if(obj_tRunJob_5!=null) {
			if (obj_tRunJob_5.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_5.add("--context_param estArchivoErrorProcesamiento=" + ((java.util.Date) obj_tRunJob_5).getTime());
			} else {
				
					paraList_tRunJob_5.add("--context_param estArchivoErrorProcesamiento=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_5));
					
				
			}
		} else {
			paraList_tRunJob_5.add("--context_param estArchivoErrorProcesamiento=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_5.put("estArchivoErrorProcesamiento", obj_tRunJob_5);
	
		obj_tRunJob_5 = context.estArchivoProcesado;
		if(obj_tRunJob_5!=null) {
			if (obj_tRunJob_5.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_5.add("--context_param estArchivoProcesado=" + ((java.util.Date) obj_tRunJob_5).getTime());
			} else {
				
					paraList_tRunJob_5.add("--context_param estArchivoProcesado=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_5));
					
				
			}
		} else {
			paraList_tRunJob_5.add("--context_param estArchivoProcesado=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_5.put("estArchivoProcesado", obj_tRunJob_5);
	
		obj_tRunJob_5 = context.estArchivoCancelado;
		if(obj_tRunJob_5!=null) {
			if (obj_tRunJob_5.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_5.add("--context_param estArchivoCancelado=" + ((java.util.Date) obj_tRunJob_5).getTime());
			} else {
				
					paraList_tRunJob_5.add("--context_param estArchivoCancelado=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_5));
					
				
			}
		} else {
			paraList_tRunJob_5.add("--context_param estArchivoCancelado=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_5.put("estArchivoCancelado", obj_tRunJob_5);
	
	
		afi_principal.entes_territoriales_0_3.Entes_Territoriales childJob_tRunJob_5 = new afi_principal.entes_territoriales_0_3.Entes_Territoriales();
	    // pass DataSources
	    java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_5 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
	            .get(KEY_DB_DATASOURCES);
	    if (null != talendDataSources_tRunJob_5) {
	        java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_5 = new java.util.HashMap<String, javax.sql.DataSource>();
	        for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_5 : talendDataSources_tRunJob_5
			        .entrySet()) {
	            dataSources_tRunJob_5.put(talendDataSourceEntry_tRunJob_5.getKey(),
	                    talendDataSourceEntry_tRunJob_5.getValue().getRawDataSource());
	        }
	        childJob_tRunJob_5.setDataSources(dataSources_tRunJob_5);
	    }
		  
			childJob_tRunJob_5.parentContextMap = parentContextMap_tRunJob_5;
		  
		
		String[][] childReturn_tRunJob_5 = childJob_tRunJob_5.runJob((String[]) paraList_tRunJob_5.toArray(new String[paraList_tRunJob_5.size()]));
		
            if(childJob_tRunJob_5.getErrorCode() == null){
                globalMap.put("tRunJob_5_CHILD_RETURN_CODE", childJob_tRunJob_5.getStatus() != null && ("failure").equals(childJob_tRunJob_5.getStatus()) ? 1 : 0);
            }else{
                globalMap.put("tRunJob_5_CHILD_RETURN_CODE", childJob_tRunJob_5.getErrorCode());
            }
            if (childJob_tRunJob_5.getExceptionStackTrace() != null) {
                globalMap.put("tRunJob_5_CHILD_EXCEPTION_STACKTRACE", childJob_tRunJob_5.getExceptionStackTrace());
            }
                    errorCode = childJob_tRunJob_5.getErrorCode();
                if (childJob_tRunJob_5.getErrorCode() != null || ("failure").equals(childJob_tRunJob_5.getStatus())) {
                    java.lang.Exception ce_tRunJob_5 = childJob_tRunJob_5.getException();
                    throw new RuntimeException("Child job running failed.\n" + ((ce_tRunJob_5!=null) ? (ce_tRunJob_5.getClass().getName() + ": " + ce_tRunJob_5.getMessage()) : ""));
                }

 


	tos_count_tRunJob_5++;

/**
 * [tRunJob_5 main ] stop
 */
	
	/**
	 * [tRunJob_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tRunJob_5";
	
	

 



/**
 * [tRunJob_5 process_data_begin ] stop
 */
	
	/**
	 * [tRunJob_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tRunJob_5";
	
	

 



/**
 * [tRunJob_5 process_data_end ] stop
 */
	
	/**
	 * [tRunJob_5 end ] start
	 */

	

	
	
	currentComponent="tRunJob_5";
	
	

 

ok_Hash.put("tRunJob_5", true);
end_Hash.put("tRunJob_5", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk27", 0, "ok");
				}
				tFixedFlowInput_4Process(globalMap);



/**
 * [tRunJob_5 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tRunJob_5 finally ] start
	 */

	

	
	
	currentComponent="tRunJob_5";
	
	
	
 



/**
 * [tRunJob_5 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tRunJob_5_SUBPROCESS_STATE", 1);
	}
	


public static class row8Struct implements routines.system.IPersistableRow<row8Struct> {
    final static byte[] commonByteArrayLock_AFI_PRINCIPAL_ETL_principal = new byte[0];
    static byte[] commonByteArray_AFI_PRINCIPAL_ETL_principal = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public Integer ID;

				public Integer getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return true;
				}
				public Boolean IDIsKey(){
				    return true;
				}
				public Integer IDLength(){
				    return 0;
				}
				public Integer IDPrecision(){
				    return 0;
				}
				public String IDDefault(){
				
					return null;
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public Integer ESTADO;

				public Integer getESTADO () {
					return this.ESTADO;
				}

				public Boolean ESTADOIsNullable(){
				    return true;
				}
				public Boolean ESTADOIsKey(){
				    return false;
				}
				public Integer ESTADOLength(){
				    return 0;
				}
				public Integer ESTADOPrecision(){
				    return 0;
				}
				public String ESTADODefault(){
				
					return null;
				
				}
				public String ESTADOComment(){
				
				    return "";
				
				}
				public String ESTADOPattern(){
				
					return "";
				
				}
				public String ESTADOOriginalDbColumnName(){
				
					return "ESTADO";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.ID == null) ? 0 : this.ID.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row8Struct other = (row8Struct) obj;
		
						if (this.ID == null) {
							if (other.ID != null)
								return false;
						
						} else if (!this.ID.equals(other.ID))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row8Struct other) {

		other.ID = this.ID;
	            other.ESTADO = this.ESTADO;
	            
	}

	public void copyKeysDataTo(row8Struct other) {

		other.ID = this.ID;
	            	
	}



	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_PRINCIPAL_ETL_principal) {

        	try {

        		int length = 0;
		
						this.ID = readInteger(dis);
					
						this.ESTADO = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_PRINCIPAL_ETL_principal) {

        	try {

        		int length = 0;
		
						this.ID = readInteger(dis);
					
						this.ESTADO = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.ID,dos);
					
					// Integer
				
						writeInteger(this.ESTADO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.ID,dos);
					
					// Integer
				
						writeInteger(this.ESTADO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",ESTADO="+String.valueOf(ESTADO));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row8Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.ID, other.ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tFixedFlowInput_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFixedFlowInput_3_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row8Struct row8 = new row8Struct();




	
	/**
	 * [tOracleOutput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleOutput_1", false);
		start_Hash.put("tOracleOutput_1", System.currentTimeMillis());
		
	
	currentComponent="tOracleOutput_1";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row8");
					}
				
		int tos_count_tOracleOutput_1 = 0;
		






        int updateKeyCount_tOracleOutput_1 = 1;
        if(updateKeyCount_tOracleOutput_1 < 1) {
            throw new RuntimeException("For update, Schema must have a key");
        } else if (updateKeyCount_tOracleOutput_1 == 2 && true) {        
                throw new RuntimeException("For update, every Schema column can not be a key");
        }
    
    int nb_line_tOracleOutput_1 = 0;
    int nb_line_update_tOracleOutput_1 = 0;
    int nb_line_inserted_tOracleOutput_1 = 0;
    int nb_line_deleted_tOracleOutput_1 = 0;
    int nb_line_rejected_tOracleOutput_1 = 0;

    int tmp_batchUpdateCount_tOracleOutput_1 = 0;

    int deletedCount_tOracleOutput_1=0;
    int updatedCount_tOracleOutput_1=0;
    int insertedCount_tOracleOutput_1=0;
    int rowsToCommitCount_tOracleOutput_1=0;
    int rejectedCount_tOracleOutput_1=0;

    boolean whetherReject_tOracleOutput_1 = false;

    java.sql.Connection conn_tOracleOutput_1 = null;

    //optional table
    String dbschema_tOracleOutput_1 = null;
    String tableName_tOracleOutput_1 = null;
        dbschema_tOracleOutput_1 = (String)globalMap.get("dbschema_tOracleConnection_1");
		
        conn_tOracleOutput_1 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");
        int count_tOracleOutput_1=0;

        if(dbschema_tOracleOutput_1 == null || dbschema_tOracleOutput_1.trim().length() == 0) {
            tableName_tOracleOutput_1 = ("AFI_ARCHIVOS");
        } else {
            tableName_tOracleOutput_1 = dbschema_tOracleOutput_1 + "." + ("AFI_ARCHIVOS");
        }
                String update_tOracleOutput_1 = "UPDATE " + tableName_tOracleOutput_1 + " SET ESTADO = ? WHERE ID = ?";
                java.sql.PreparedStatement pstmt_tOracleOutput_1 = conn_tOracleOutput_1.prepareStatement(update_tOracleOutput_1);
                resourceMap.put("pstmt_tOracleOutput_1", pstmt_tOracleOutput_1);





 



/**
 * [tOracleOutput_1 begin ] stop
 */



	
	/**
	 * [tFixedFlowInput_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tFixedFlowInput_3", false);
		start_Hash.put("tFixedFlowInput_3", System.currentTimeMillis());
		
	
	currentComponent="tFixedFlowInput_3";
	
	
		int tos_count_tFixedFlowInput_3 = 0;
		

	    for (int i_tFixedFlowInput_3 = 0 ; i_tFixedFlowInput_3 < 1 ; i_tFixedFlowInput_3++) {
	                	            	
    	            		row8.ID = context.infoIdArchivo;
    	            	        	            	
    	            		row8.ESTADO = context.estArchivoErrorArchivo;
    	            	

 



/**
 * [tFixedFlowInput_3 begin ] stop
 */
	
	/**
	 * [tFixedFlowInput_3 main ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_3";
	
	

 


	tos_count_tFixedFlowInput_3++;

/**
 * [tFixedFlowInput_3 main ] stop
 */
	
	/**
	 * [tFixedFlowInput_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_3";
	
	

 



/**
 * [tFixedFlowInput_3 process_data_begin ] stop
 */

	
	/**
	 * [tOracleOutput_1 main ] start
	 */

	

	
	
	currentComponent="tOracleOutput_1";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row8"
						
						);
					}
					



        whetherReject_tOracleOutput_1 = false;
                    if(row8.ESTADO == null) {
pstmt_tOracleOutput_1.setNull(1, java.sql.Types.INTEGER);
} else {pstmt_tOracleOutput_1.setInt(1, row8.ESTADO);
}


                    if(row8.ID == null) {
pstmt_tOracleOutput_1.setNull(2 + count_tOracleOutput_1, java.sql.Types.INTEGER);
} else {pstmt_tOracleOutput_1.setInt(2 + count_tOracleOutput_1, row8.ID);
}

                try {
                    nb_line_tOracleOutput_1++;
                    int processedCount_tOracleOutput_1 = pstmt_tOracleOutput_1.executeUpdate();
                    updatedCount_tOracleOutput_1 += processedCount_tOracleOutput_1;
                    rowsToCommitCount_tOracleOutput_1 += processedCount_tOracleOutput_1;
                } catch(java.lang.Exception e_tOracleOutput_1) {
globalMap.put("tOracleOutput_1_ERROR_MESSAGE",e_tOracleOutput_1.getMessage());
                    whetherReject_tOracleOutput_1 = true;
                            System.err.print(e_tOracleOutput_1.getMessage());
                }
            if(!whetherReject_tOracleOutput_1) {
            }

 


	tos_count_tOracleOutput_1++;

/**
 * [tOracleOutput_1 main ] stop
 */
	
	/**
	 * [tOracleOutput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleOutput_1";
	
	

 



/**
 * [tOracleOutput_1 process_data_begin ] stop
 */
	
	/**
	 * [tOracleOutput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_1";
	
	

 



/**
 * [tOracleOutput_1 process_data_end ] stop
 */



	
	/**
	 * [tFixedFlowInput_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_3";
	
	

 



/**
 * [tFixedFlowInput_3 process_data_end ] stop
 */
	
	/**
	 * [tFixedFlowInput_3 end ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_3";
	
	

        }
        globalMap.put("tFixedFlowInput_3_NB_LINE", 1);        

 

ok_Hash.put("tFixedFlowInput_3", true);
end_Hash.put("tFixedFlowInput_3", System.currentTimeMillis());




/**
 * [tFixedFlowInput_3 end ] stop
 */

	
	/**
	 * [tOracleOutput_1 end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_1";
	
	
	



	
        if(pstmt_tOracleOutput_1 != null) {
			
				pstmt_tOracleOutput_1.close();
				resourceMap.remove("pstmt_tOracleOutput_1");
			
        }
    resourceMap.put("statementClosed_tOracleOutput_1", true);

	
	nb_line_deleted_tOracleOutput_1=nb_line_deleted_tOracleOutput_1+ deletedCount_tOracleOutput_1;
	nb_line_update_tOracleOutput_1=nb_line_update_tOracleOutput_1 + updatedCount_tOracleOutput_1;
	nb_line_inserted_tOracleOutput_1=nb_line_inserted_tOracleOutput_1 + insertedCount_tOracleOutput_1;
	nb_line_rejected_tOracleOutput_1=nb_line_rejected_tOracleOutput_1 + rejectedCount_tOracleOutput_1;
	
        globalMap.put("tOracleOutput_1_NB_LINE",nb_line_tOracleOutput_1);
        globalMap.put("tOracleOutput_1_NB_LINE_UPDATED",nb_line_update_tOracleOutput_1);
        globalMap.put("tOracleOutput_1_NB_LINE_INSERTED",nb_line_inserted_tOracleOutput_1);
        globalMap.put("tOracleOutput_1_NB_LINE_DELETED",nb_line_deleted_tOracleOutput_1);
        globalMap.put("tOracleOutput_1_NB_LINE_REJECTED", nb_line_rejected_tOracleOutput_1);
    

	



				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row8");
			  	}
			  	
 

ok_Hash.put("tOracleOutput_1", true);
end_Hash.put("tOracleOutput_1", System.currentTimeMillis());

   			if ((Integer)globalMap.get("tOracleOutput_1_NB_LINE_UPDATED")>0) {
   				
					if(execStat){
   	 					runStat.updateStatOnConnection("If23", 0, "true");
					}
				tJava_8Process(globalMap);
			}

			   
   				else{
					if(execStat){   
   	 					runStat.updateStatOnConnection("If23", 0, "false");
					}   	 
   				}



/**
 * [tOracleOutput_1 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFixedFlowInput_3 finally ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_3";
	
	

 



/**
 * [tFixedFlowInput_3 finally ] stop
 */

	
	/**
	 * [tOracleOutput_1 finally ] start
	 */

	

	
	
	currentComponent="tOracleOutput_1";
	
	



    if (resourceMap.get("statementClosed_tOracleOutput_1") == null) {
                java.sql.PreparedStatement pstmtToClose_tOracleOutput_1 = null;
                if ((pstmtToClose_tOracleOutput_1 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tOracleOutput_1")) != null) {
                    pstmtToClose_tOracleOutput_1.close();
                }
    }
 



/**
 * [tOracleOutput_1 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFixedFlowInput_3_SUBPROCESS_STATE", 1);
	}
	


public void tJava_8Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_8_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tJava_8 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_8", false);
		start_Hash.put("tJava_8", System.currentTimeMillis());
		
	
	currentComponent="tJava_8";
	
	
		int tos_count_tJava_8 = 0;
		


//****************************************************************************************//
System.out.println("Estado Archivo: Actualizado a Error en archivo");
System.out.println("*******************Finalizando ejecucion JOB*******************");
//****************************************************************************************//
 



/**
 * [tJava_8 begin ] stop
 */
	
	/**
	 * [tJava_8 main ] start
	 */

	

	
	
	currentComponent="tJava_8";
	
	

 


	tos_count_tJava_8++;

/**
 * [tJava_8 main ] stop
 */
	
	/**
	 * [tJava_8 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_8";
	
	

 



/**
 * [tJava_8 process_data_begin ] stop
 */
	
	/**
	 * [tJava_8 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_8";
	
	

 



/**
 * [tJava_8 process_data_end ] stop
 */
	
	/**
	 * [tJava_8 end ] start
	 */

	

	
	
	currentComponent="tJava_8";
	
	

 

ok_Hash.put("tJava_8", true);
end_Hash.put("tJava_8", System.currentTimeMillis());




/**
 * [tJava_8 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_8 finally ] start
	 */

	

	
	
	currentComponent="tJava_8";
	
	

 



/**
 * [tJava_8 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_8_SUBPROCESS_STATE", 1);
	}
	


public static class row6Struct implements routines.system.IPersistableRow<row6Struct> {
    final static byte[] commonByteArrayLock_AFI_PRINCIPAL_ETL_principal = new byte[0];
    static byte[] commonByteArray_AFI_PRINCIPAL_ETL_principal = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public Integer ID;

				public Integer getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return true;
				}
				public Boolean IDIsKey(){
				    return true;
				}
				public Integer IDLength(){
				    return 0;
				}
				public Integer IDPrecision(){
				    return 0;
				}
				public String IDDefault(){
				
					return null;
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public Integer ESTADO;

				public Integer getESTADO () {
					return this.ESTADO;
				}

				public Boolean ESTADOIsNullable(){
				    return true;
				}
				public Boolean ESTADOIsKey(){
				    return false;
				}
				public Integer ESTADOLength(){
				    return 0;
				}
				public Integer ESTADOPrecision(){
				    return 0;
				}
				public String ESTADODefault(){
				
					return null;
				
				}
				public String ESTADOComment(){
				
				    return "";
				
				}
				public String ESTADOPattern(){
				
					return "";
				
				}
				public String ESTADOOriginalDbColumnName(){
				
					return "ESTADO";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.ID == null) ? 0 : this.ID.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row6Struct other = (row6Struct) obj;
		
						if (this.ID == null) {
							if (other.ID != null)
								return false;
						
						} else if (!this.ID.equals(other.ID))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row6Struct other) {

		other.ID = this.ID;
	            other.ESTADO = this.ESTADO;
	            
	}

	public void copyKeysDataTo(row6Struct other) {

		other.ID = this.ID;
	            	
	}



	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_PRINCIPAL_ETL_principal) {

        	try {

        		int length = 0;
		
						this.ID = readInteger(dis);
					
						this.ESTADO = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_PRINCIPAL_ETL_principal) {

        	try {

        		int length = 0;
		
						this.ID = readInteger(dis);
					
						this.ESTADO = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.ID,dos);
					
					// Integer
				
						writeInteger(this.ESTADO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.ID,dos);
					
					// Integer
				
						writeInteger(this.ESTADO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",ESTADO="+String.valueOf(ESTADO));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row6Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.ID, other.ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tFixedFlowInput_4Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFixedFlowInput_4_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row6Struct row6 = new row6Struct();




	
	/**
	 * [tOracleOutput_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleOutput_3", false);
		start_Hash.put("tOracleOutput_3", System.currentTimeMillis());
		
	
	currentComponent="tOracleOutput_3";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row6");
					}
				
		int tos_count_tOracleOutput_3 = 0;
		






        int updateKeyCount_tOracleOutput_3 = 1;
        if(updateKeyCount_tOracleOutput_3 < 1) {
            throw new RuntimeException("For update, Schema must have a key");
        } else if (updateKeyCount_tOracleOutput_3 == 2 && true) {        
                throw new RuntimeException("For update, every Schema column can not be a key");
        }
    
    int nb_line_tOracleOutput_3 = 0;
    int nb_line_update_tOracleOutput_3 = 0;
    int nb_line_inserted_tOracleOutput_3 = 0;
    int nb_line_deleted_tOracleOutput_3 = 0;
    int nb_line_rejected_tOracleOutput_3 = 0;

    int tmp_batchUpdateCount_tOracleOutput_3 = 0;

    int deletedCount_tOracleOutput_3=0;
    int updatedCount_tOracleOutput_3=0;
    int insertedCount_tOracleOutput_3=0;
    int rowsToCommitCount_tOracleOutput_3=0;
    int rejectedCount_tOracleOutput_3=0;

    boolean whetherReject_tOracleOutput_3 = false;

    java.sql.Connection conn_tOracleOutput_3 = null;

    //optional table
    String dbschema_tOracleOutput_3 = null;
    String tableName_tOracleOutput_3 = null;
        dbschema_tOracleOutput_3 = (String)globalMap.get("dbschema_tOracleConnection_1");
		
        conn_tOracleOutput_3 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");
        int count_tOracleOutput_3=0;

        if(dbschema_tOracleOutput_3 == null || dbschema_tOracleOutput_3.trim().length() == 0) {
            tableName_tOracleOutput_3 = ("AFI_ARCHIVOS");
        } else {
            tableName_tOracleOutput_3 = dbschema_tOracleOutput_3 + "." + ("AFI_ARCHIVOS");
        }
                String update_tOracleOutput_3 = "UPDATE " + tableName_tOracleOutput_3 + " SET ESTADO = ? WHERE ID = ?";
                java.sql.PreparedStatement pstmt_tOracleOutput_3 = conn_tOracleOutput_3.prepareStatement(update_tOracleOutput_3);
                resourceMap.put("pstmt_tOracleOutput_3", pstmt_tOracleOutput_3);





 



/**
 * [tOracleOutput_3 begin ] stop
 */



	
	/**
	 * [tFixedFlowInput_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tFixedFlowInput_4", false);
		start_Hash.put("tFixedFlowInput_4", System.currentTimeMillis());
		
	
	currentComponent="tFixedFlowInput_4";
	
	
		int tos_count_tFixedFlowInput_4 = 0;
		

	    for (int i_tFixedFlowInput_4 = 0 ; i_tFixedFlowInput_4 < 1 ; i_tFixedFlowInput_4++) {
	                	            	
    	            		row6.ID = context.infoIdArchivo;
    	            	        	            	
    	            		row6.ESTADO = context.estArchivoProcesado;
    	            	

 



/**
 * [tFixedFlowInput_4 begin ] stop
 */
	
	/**
	 * [tFixedFlowInput_4 main ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_4";
	
	

 


	tos_count_tFixedFlowInput_4++;

/**
 * [tFixedFlowInput_4 main ] stop
 */
	
	/**
	 * [tFixedFlowInput_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_4";
	
	

 



/**
 * [tFixedFlowInput_4 process_data_begin ] stop
 */

	
	/**
	 * [tOracleOutput_3 main ] start
	 */

	

	
	
	currentComponent="tOracleOutput_3";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row6"
						
						);
					}
					



        whetherReject_tOracleOutput_3 = false;
                    if(row6.ESTADO == null) {
pstmt_tOracleOutput_3.setNull(1, java.sql.Types.INTEGER);
} else {pstmt_tOracleOutput_3.setInt(1, row6.ESTADO);
}


                    if(row6.ID == null) {
pstmt_tOracleOutput_3.setNull(2 + count_tOracleOutput_3, java.sql.Types.INTEGER);
} else {pstmt_tOracleOutput_3.setInt(2 + count_tOracleOutput_3, row6.ID);
}

                try {
                    nb_line_tOracleOutput_3++;
                    int processedCount_tOracleOutput_3 = pstmt_tOracleOutput_3.executeUpdate();
                    updatedCount_tOracleOutput_3 += processedCount_tOracleOutput_3;
                    rowsToCommitCount_tOracleOutput_3 += processedCount_tOracleOutput_3;
                } catch(java.lang.Exception e_tOracleOutput_3) {
globalMap.put("tOracleOutput_3_ERROR_MESSAGE",e_tOracleOutput_3.getMessage());
                    whetherReject_tOracleOutput_3 = true;
                            System.err.print(e_tOracleOutput_3.getMessage());
                }
            if(!whetherReject_tOracleOutput_3) {
            }

 


	tos_count_tOracleOutput_3++;

/**
 * [tOracleOutput_3 main ] stop
 */
	
	/**
	 * [tOracleOutput_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleOutput_3";
	
	

 



/**
 * [tOracleOutput_3 process_data_begin ] stop
 */
	
	/**
	 * [tOracleOutput_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_3";
	
	

 



/**
 * [tOracleOutput_3 process_data_end ] stop
 */



	
	/**
	 * [tFixedFlowInput_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_4";
	
	

 



/**
 * [tFixedFlowInput_4 process_data_end ] stop
 */
	
	/**
	 * [tFixedFlowInput_4 end ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_4";
	
	

        }
        globalMap.put("tFixedFlowInput_4_NB_LINE", 1);        

 

ok_Hash.put("tFixedFlowInput_4", true);
end_Hash.put("tFixedFlowInput_4", System.currentTimeMillis());




/**
 * [tFixedFlowInput_4 end ] stop
 */

	
	/**
	 * [tOracleOutput_3 end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_3";
	
	
	



	
        if(pstmt_tOracleOutput_3 != null) {
			
				pstmt_tOracleOutput_3.close();
				resourceMap.remove("pstmt_tOracleOutput_3");
			
        }
    resourceMap.put("statementClosed_tOracleOutput_3", true);

	
	nb_line_deleted_tOracleOutput_3=nb_line_deleted_tOracleOutput_3+ deletedCount_tOracleOutput_3;
	nb_line_update_tOracleOutput_3=nb_line_update_tOracleOutput_3 + updatedCount_tOracleOutput_3;
	nb_line_inserted_tOracleOutput_3=nb_line_inserted_tOracleOutput_3 + insertedCount_tOracleOutput_3;
	nb_line_rejected_tOracleOutput_3=nb_line_rejected_tOracleOutput_3 + rejectedCount_tOracleOutput_3;
	
        globalMap.put("tOracleOutput_3_NB_LINE",nb_line_tOracleOutput_3);
        globalMap.put("tOracleOutput_3_NB_LINE_UPDATED",nb_line_update_tOracleOutput_3);
        globalMap.put("tOracleOutput_3_NB_LINE_INSERTED",nb_line_inserted_tOracleOutput_3);
        globalMap.put("tOracleOutput_3_NB_LINE_DELETED",nb_line_deleted_tOracleOutput_3);
        globalMap.put("tOracleOutput_3_NB_LINE_REJECTED", nb_line_rejected_tOracleOutput_3);
    

	



				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row6");
			  	}
			  	
 

ok_Hash.put("tOracleOutput_3", true);
end_Hash.put("tOracleOutput_3", System.currentTimeMillis());

   			if ((Integer)globalMap.get("tOracleOutput_3_NB_LINE_UPDATED")>0) {
   				
					if(execStat){
   	 					runStat.updateStatOnConnection("If17", 0, "true");
					}
				tJava_14Process(globalMap);
			}

			   
   				else{
					if(execStat){   
   	 					runStat.updateStatOnConnection("If17", 0, "false");
					}   	 
   				}



/**
 * [tOracleOutput_3 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFixedFlowInput_4 finally ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_4";
	
	

 



/**
 * [tFixedFlowInput_4 finally ] stop
 */

	
	/**
	 * [tOracleOutput_3 finally ] start
	 */

	

	
	
	currentComponent="tOracleOutput_3";
	
	



    if (resourceMap.get("statementClosed_tOracleOutput_3") == null) {
                java.sql.PreparedStatement pstmtToClose_tOracleOutput_3 = null;
                if ((pstmtToClose_tOracleOutput_3 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tOracleOutput_3")) != null) {
                    pstmtToClose_tOracleOutput_3.close();
                }
    }
 



/**
 * [tOracleOutput_3 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFixedFlowInput_4_SUBPROCESS_STATE", 1);
	}
	


public void tJava_14Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_14_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tJava_14 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_14", false);
		start_Hash.put("tJava_14", System.currentTimeMillis());
		
	
	currentComponent="tJava_14";
	
	
		int tos_count_tJava_14 = 0;
		


//****************************************************************************************//
System.out.println("Estado Archivo: Actualizado a procesado");
System.out.println("*******************Finalizando ejecucion JOB*******************");
//****************************************************************************************//
 



/**
 * [tJava_14 begin ] stop
 */
	
	/**
	 * [tJava_14 main ] start
	 */

	

	
	
	currentComponent="tJava_14";
	
	

 


	tos_count_tJava_14++;

/**
 * [tJava_14 main ] stop
 */
	
	/**
	 * [tJava_14 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_14";
	
	

 



/**
 * [tJava_14 process_data_begin ] stop
 */
	
	/**
	 * [tJava_14 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_14";
	
	

 



/**
 * [tJava_14 process_data_end ] stop
 */
	
	/**
	 * [tJava_14 end ] start
	 */

	

	
	
	currentComponent="tJava_14";
	
	

 

ok_Hash.put("tJava_14", true);
end_Hash.put("tJava_14", System.currentTimeMillis());




/**
 * [tJava_14 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_14 finally ] start
	 */

	

	
	
	currentComponent="tJava_14";
	
	

 



/**
 * [tJava_14 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_14_SUBPROCESS_STATE", 1);
	}
	


public static class row7Struct implements routines.system.IPersistableRow<row7Struct> {
    final static byte[] commonByteArrayLock_AFI_PRINCIPAL_ETL_principal = new byte[0];
    static byte[] commonByteArray_AFI_PRINCIPAL_ETL_principal = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public Integer ID;

				public Integer getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return true;
				}
				public Boolean IDIsKey(){
				    return true;
				}
				public Integer IDLength(){
				    return 0;
				}
				public Integer IDPrecision(){
				    return 0;
				}
				public String IDDefault(){
				
					return null;
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public Integer ESTADO;

				public Integer getESTADO () {
					return this.ESTADO;
				}

				public Boolean ESTADOIsNullable(){
				    return true;
				}
				public Boolean ESTADOIsKey(){
				    return false;
				}
				public Integer ESTADOLength(){
				    return 0;
				}
				public Integer ESTADOPrecision(){
				    return 0;
				}
				public String ESTADODefault(){
				
					return null;
				
				}
				public String ESTADOComment(){
				
				    return "";
				
				}
				public String ESTADOPattern(){
				
					return "";
				
				}
				public String ESTADOOriginalDbColumnName(){
				
					return "ESTADO";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.ID == null) ? 0 : this.ID.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row7Struct other = (row7Struct) obj;
		
						if (this.ID == null) {
							if (other.ID != null)
								return false;
						
						} else if (!this.ID.equals(other.ID))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row7Struct other) {

		other.ID = this.ID;
	            other.ESTADO = this.ESTADO;
	            
	}

	public void copyKeysDataTo(row7Struct other) {

		other.ID = this.ID;
	            	
	}



	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_PRINCIPAL_ETL_principal) {

        	try {

        		int length = 0;
		
						this.ID = readInteger(dis);
					
						this.ESTADO = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_PRINCIPAL_ETL_principal) {

        	try {

        		int length = 0;
		
						this.ID = readInteger(dis);
					
						this.ESTADO = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.ID,dos);
					
					// Integer
				
						writeInteger(this.ESTADO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.ID,dos);
					
					// Integer
				
						writeInteger(this.ESTADO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",ESTADO="+String.valueOf(ESTADO));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row7Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.ID, other.ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tFixedFlowInput_5Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFixedFlowInput_5_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row7Struct row7 = new row7Struct();




	
	/**
	 * [tOracleOutput_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleOutput_4", false);
		start_Hash.put("tOracleOutput_4", System.currentTimeMillis());
		
	
	currentComponent="tOracleOutput_4";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row7");
					}
				
		int tos_count_tOracleOutput_4 = 0;
		






        int updateKeyCount_tOracleOutput_4 = 1;
        if(updateKeyCount_tOracleOutput_4 < 1) {
            throw new RuntimeException("For update, Schema must have a key");
        } else if (updateKeyCount_tOracleOutput_4 == 2 && true) {        
                throw new RuntimeException("For update, every Schema column can not be a key");
        }
    
    int nb_line_tOracleOutput_4 = 0;
    int nb_line_update_tOracleOutput_4 = 0;
    int nb_line_inserted_tOracleOutput_4 = 0;
    int nb_line_deleted_tOracleOutput_4 = 0;
    int nb_line_rejected_tOracleOutput_4 = 0;

    int tmp_batchUpdateCount_tOracleOutput_4 = 0;

    int deletedCount_tOracleOutput_4=0;
    int updatedCount_tOracleOutput_4=0;
    int insertedCount_tOracleOutput_4=0;
    int rowsToCommitCount_tOracleOutput_4=0;
    int rejectedCount_tOracleOutput_4=0;

    boolean whetherReject_tOracleOutput_4 = false;

    java.sql.Connection conn_tOracleOutput_4 = null;

    //optional table
    String dbschema_tOracleOutput_4 = null;
    String tableName_tOracleOutput_4 = null;
        dbschema_tOracleOutput_4 = (String)globalMap.get("dbschema_tOracleConnection_1");
		
        conn_tOracleOutput_4 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");
        int count_tOracleOutput_4=0;

        if(dbschema_tOracleOutput_4 == null || dbschema_tOracleOutput_4.trim().length() == 0) {
            tableName_tOracleOutput_4 = ("AFI_ARCHIVOS");
        } else {
            tableName_tOracleOutput_4 = dbschema_tOracleOutput_4 + "." + ("AFI_ARCHIVOS");
        }
                String update_tOracleOutput_4 = "UPDATE " + tableName_tOracleOutput_4 + " SET ESTADO = ? WHERE ID = ?";
                java.sql.PreparedStatement pstmt_tOracleOutput_4 = conn_tOracleOutput_4.prepareStatement(update_tOracleOutput_4);
                resourceMap.put("pstmt_tOracleOutput_4", pstmt_tOracleOutput_4);





 



/**
 * [tOracleOutput_4 begin ] stop
 */



	
	/**
	 * [tFixedFlowInput_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tFixedFlowInput_5", false);
		start_Hash.put("tFixedFlowInput_5", System.currentTimeMillis());
		
	
	currentComponent="tFixedFlowInput_5";
	
	
		int tos_count_tFixedFlowInput_5 = 0;
		

	    for (int i_tFixedFlowInput_5 = 0 ; i_tFixedFlowInput_5 < 1 ; i_tFixedFlowInput_5++) {
	                	            	
    	            		row7.ID = context.infoIdArchivo;
    	            	        	            	
    	            		row7.ESTADO = context.estArchivoErrorProcesamiento;
    	            	

 



/**
 * [tFixedFlowInput_5 begin ] stop
 */
	
	/**
	 * [tFixedFlowInput_5 main ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_5";
	
	

 


	tos_count_tFixedFlowInput_5++;

/**
 * [tFixedFlowInput_5 main ] stop
 */
	
	/**
	 * [tFixedFlowInput_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_5";
	
	

 



/**
 * [tFixedFlowInput_5 process_data_begin ] stop
 */

	
	/**
	 * [tOracleOutput_4 main ] start
	 */

	

	
	
	currentComponent="tOracleOutput_4";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row7"
						
						);
					}
					



        whetherReject_tOracleOutput_4 = false;
                    if(row7.ESTADO == null) {
pstmt_tOracleOutput_4.setNull(1, java.sql.Types.INTEGER);
} else {pstmt_tOracleOutput_4.setInt(1, row7.ESTADO);
}


                    if(row7.ID == null) {
pstmt_tOracleOutput_4.setNull(2 + count_tOracleOutput_4, java.sql.Types.INTEGER);
} else {pstmt_tOracleOutput_4.setInt(2 + count_tOracleOutput_4, row7.ID);
}

                try {
                    nb_line_tOracleOutput_4++;
                    int processedCount_tOracleOutput_4 = pstmt_tOracleOutput_4.executeUpdate();
                    updatedCount_tOracleOutput_4 += processedCount_tOracleOutput_4;
                    rowsToCommitCount_tOracleOutput_4 += processedCount_tOracleOutput_4;
                } catch(java.lang.Exception e_tOracleOutput_4) {
globalMap.put("tOracleOutput_4_ERROR_MESSAGE",e_tOracleOutput_4.getMessage());
                    whetherReject_tOracleOutput_4 = true;
                            System.err.print(e_tOracleOutput_4.getMessage());
                }
            if(!whetherReject_tOracleOutput_4) {
            }

 


	tos_count_tOracleOutput_4++;

/**
 * [tOracleOutput_4 main ] stop
 */
	
	/**
	 * [tOracleOutput_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleOutput_4";
	
	

 



/**
 * [tOracleOutput_4 process_data_begin ] stop
 */
	
	/**
	 * [tOracleOutput_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_4";
	
	

 



/**
 * [tOracleOutput_4 process_data_end ] stop
 */



	
	/**
	 * [tFixedFlowInput_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_5";
	
	

 



/**
 * [tFixedFlowInput_5 process_data_end ] stop
 */
	
	/**
	 * [tFixedFlowInput_5 end ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_5";
	
	

        }
        globalMap.put("tFixedFlowInput_5_NB_LINE", 1);        

 

ok_Hash.put("tFixedFlowInput_5", true);
end_Hash.put("tFixedFlowInput_5", System.currentTimeMillis());




/**
 * [tFixedFlowInput_5 end ] stop
 */

	
	/**
	 * [tOracleOutput_4 end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_4";
	
	
	



	
        if(pstmt_tOracleOutput_4 != null) {
			
				pstmt_tOracleOutput_4.close();
				resourceMap.remove("pstmt_tOracleOutput_4");
			
        }
    resourceMap.put("statementClosed_tOracleOutput_4", true);

	
	nb_line_deleted_tOracleOutput_4=nb_line_deleted_tOracleOutput_4+ deletedCount_tOracleOutput_4;
	nb_line_update_tOracleOutput_4=nb_line_update_tOracleOutput_4 + updatedCount_tOracleOutput_4;
	nb_line_inserted_tOracleOutput_4=nb_line_inserted_tOracleOutput_4 + insertedCount_tOracleOutput_4;
	nb_line_rejected_tOracleOutput_4=nb_line_rejected_tOracleOutput_4 + rejectedCount_tOracleOutput_4;
	
        globalMap.put("tOracleOutput_4_NB_LINE",nb_line_tOracleOutput_4);
        globalMap.put("tOracleOutput_4_NB_LINE_UPDATED",nb_line_update_tOracleOutput_4);
        globalMap.put("tOracleOutput_4_NB_LINE_INSERTED",nb_line_inserted_tOracleOutput_4);
        globalMap.put("tOracleOutput_4_NB_LINE_DELETED",nb_line_deleted_tOracleOutput_4);
        globalMap.put("tOracleOutput_4_NB_LINE_REJECTED", nb_line_rejected_tOracleOutput_4);
    

	



				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row7");
			  	}
			  	
 

ok_Hash.put("tOracleOutput_4", true);
end_Hash.put("tOracleOutput_4", System.currentTimeMillis());

   			if ((Integer)globalMap.get("tOracleOutput_4_NB_LINE_UPDATED")>0) {
   				
					if(execStat){
   	 					runStat.updateStatOnConnection("If18", 0, "true");
					}
				tJava_15Process(globalMap);
			}

			   
   				else{
					if(execStat){   
   	 					runStat.updateStatOnConnection("If18", 0, "false");
					}   	 
   				}



/**
 * [tOracleOutput_4 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFixedFlowInput_5 finally ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_5";
	
	

 



/**
 * [tFixedFlowInput_5 finally ] stop
 */

	
	/**
	 * [tOracleOutput_4 finally ] start
	 */

	

	
	
	currentComponent="tOracleOutput_4";
	
	



    if (resourceMap.get("statementClosed_tOracleOutput_4") == null) {
                java.sql.PreparedStatement pstmtToClose_tOracleOutput_4 = null;
                if ((pstmtToClose_tOracleOutput_4 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tOracleOutput_4")) != null) {
                    pstmtToClose_tOracleOutput_4.close();
                }
    }
 



/**
 * [tOracleOutput_4 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFixedFlowInput_5_SUBPROCESS_STATE", 1);
	}
	


public void tJava_15Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_15_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tJava_15 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_15", false);
		start_Hash.put("tJava_15", System.currentTimeMillis());
		
	
	currentComponent="tJava_15";
	
	
		int tos_count_tJava_15 = 0;
		


//****************************************************************************************//
System.out.println("Estado Archivo: Error en procesamiento");
//****************************************************************************************//
 



/**
 * [tJava_15 begin ] stop
 */
	
	/**
	 * [tJava_15 main ] start
	 */

	

	
	
	currentComponent="tJava_15";
	
	

 


	tos_count_tJava_15++;

/**
 * [tJava_15 main ] stop
 */
	
	/**
	 * [tJava_15 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_15";
	
	

 



/**
 * [tJava_15 process_data_begin ] stop
 */
	
	/**
	 * [tJava_15 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_15";
	
	

 



/**
 * [tJava_15 process_data_end ] stop
 */
	
	/**
	 * [tJava_15 end ] start
	 */

	

	
	
	currentComponent="tJava_15";
	
	

 

ok_Hash.put("tJava_15", true);
end_Hash.put("tJava_15", System.currentTimeMillis());




/**
 * [tJava_15 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_15 finally ] start
	 */

	

	
	
	currentComponent="tJava_15";
	
	

 



/**
 * [tJava_15 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_15_SUBPROCESS_STATE", 1);
	}
	


public void tJava_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tJava_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_1", false);
		start_Hash.put("tJava_1", System.currentTimeMillis());
		
	
	currentComponent="tJava_1";
	
	
		int tos_count_tJava_1 = 0;
		


try
	{
		int nb_line=((Integer)globalMap.get("tOracleOutput_2_NB_LINE_UPDATED"));
		if(nb_line>0)
			{				
				//****************************************************************************************//
				System.out.println("*** INICIANDO EJECUCION JOB MINSALUD ETAPA 2 NUEVOS REGISTROS***************************");
				//****************************************************************************************//
			}		
	}
catch(Exception e)
	{
		//****************************************************************************************//
		System.out.println("Excepción: " + e);
		//****************************************************************************************//
	}
 



/**
 * [tJava_1 begin ] stop
 */
	
	/**
	 * [tJava_1 main ] start
	 */

	

	
	
	currentComponent="tJava_1";
	
	

 


	tos_count_tJava_1++;

/**
 * [tJava_1 main ] stop
 */
	
	/**
	 * [tJava_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_1";
	
	

 



/**
 * [tJava_1 process_data_begin ] stop
 */
	
	/**
	 * [tJava_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_1";
	
	

 



/**
 * [tJava_1 process_data_end ] stop
 */
	
	/**
	 * [tJava_1 end ] start
	 */

	

	
	
	currentComponent="tJava_1";
	
	

 

ok_Hash.put("tJava_1", true);
end_Hash.put("tJava_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk9", 0, "ok");
				}
				tRunJob_1Process(globalMap);



/**
 * [tJava_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_1 finally ] start
	 */

	

	
	
	currentComponent="tJava_1";
	
	

 



/**
 * [tJava_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_1_SUBPROCESS_STATE", 1);
	}
	


public void tRunJob_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tRunJob_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tRunJob_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tRunJob_1", false);
		start_Hash.put("tRunJob_1", System.currentTimeMillis());
		
	
	currentComponent="tRunJob_1";
	
	
		int tos_count_tRunJob_1 = 0;
		


 



/**
 * [tRunJob_1 begin ] stop
 */
	
	/**
	 * [tRunJob_1 main ] start
	 */

	

	
	
	currentComponent="tRunJob_1";
	
	
	java.util.List<String> paraList_tRunJob_1 = new java.util.ArrayList<String>();
	
	        				paraList_tRunJob_1.add("--father_pid="+pid);
	      			
	        				paraList_tRunJob_1.add("--root_pid="+rootPid);
	      			
	        				paraList_tRunJob_1.add("--father_node=tRunJob_1");
	      			
	        				paraList_tRunJob_1.add("--context=Default");
	      			
		if(enableLogStash){
			paraList_tRunJob_1.add("--audit.enabled="+enableLogStash);
		}
		
	//for feature:10589
	
		paraList_tRunJob_1.add("--stat_port=" + portStats);
	

	if(resuming_logs_dir_path != null){
		paraList_tRunJob_1.add("--resuming_logs_dir_path=" + resuming_logs_dir_path);
	}
	String childResumePath_tRunJob_1 = ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path);
	String tRunJobName_tRunJob_1 = ResumeUtil.getRighttRunJob(resuming_checkpoint_path);
	if("tRunJob_1".equals(tRunJobName_tRunJob_1) && childResumePath_tRunJob_1 != null){
		paraList_tRunJob_1.add("--resuming_checkpoint_path=" + ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path));
	}
	paraList_tRunJob_1.add("--parent_part_launcher=JOB:" + jobName + "/NODE:tRunJob_1");
	
	java.util.Map<String, Object> parentContextMap_tRunJob_1 = new java.util.HashMap<String, Object>();

	
		
		context.synchronizeContext();
            class ContextProcessor_tRunJob_1 {
                    private void transmitContext_0() {
                    parentContextMap_tRunJob_1.put("fileSystem_Path", context.fileSystem_Path);
                    paraList_tRunJob_1.add("--context_type " + "fileSystem_Path" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("fileSystem_Area", context.fileSystem_Area);
                    paraList_tRunJob_1.add("--context_type " + "fileSystem_Area" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("archivoSalida", context.archivoSalida);
                    paraList_tRunJob_1.add("--context_type " + "archivoSalida" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("mail_UsernameMail", context.mail_UsernameMail);
                    paraList_tRunJob_1.add("--context_type " + "mail_UsernameMail" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("mail_SMTPPort", context.mail_SMTPPort);
                    paraList_tRunJob_1.add("--context_type " + "mail_SMTPPort" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("mail_PasswordMail", context.mail_PasswordMail);
                    paraList_tRunJob_1.add("--context_type " + "mail_PasswordMail" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("mail_SMTPHost", context.mail_SMTPHost);
                    paraList_tRunJob_1.add("--context_type " + "mail_SMTPHost" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("oracle_Password", context.oracle_Password);
                    paraList_tRunJob_1.add("--context_type " + "oracle_Password" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("oracle_User", context.oracle_User);
                    paraList_tRunJob_1.add("--context_type " + "oracle_User" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("oracle_ServiceName", context.oracle_ServiceName);
                    paraList_tRunJob_1.add("--context_type " + "oracle_ServiceName" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("oracle_Schema", context.oracle_Schema);
                    paraList_tRunJob_1.add("--context_type " + "oracle_Schema" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("oracle_Port", context.oracle_Port);
                    paraList_tRunJob_1.add("--context_type " + "oracle_Port" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("oracle_AdditionalParams", context.oracle_AdditionalParams);
                    paraList_tRunJob_1.add("--context_type " + "oracle_AdditionalParams" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("oracle_Host", context.oracle_Host);
                    paraList_tRunJob_1.add("--context_type " + "oracle_Host" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("oracle_Sid", context.oracle_Sid);
                    paraList_tRunJob_1.add("--context_type " + "oracle_Sid" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("estArchivoInactivo", context.estArchivoInactivo);
                    paraList_tRunJob_1.add("--context_type " + "estArchivoInactivo" + "=" + "id_Integer");
                    parentContextMap_tRunJob_1.put("estArchivoProcesado", context.estArchivoProcesado);
                    paraList_tRunJob_1.add("--context_type " + "estArchivoProcesado" + "=" + "id_Integer");
                    parentContextMap_tRunJob_1.put("estArchivoEnProceso", context.estArchivoEnProceso);
                    paraList_tRunJob_1.add("--context_type " + "estArchivoEnProceso" + "=" + "id_Integer");
                    parentContextMap_tRunJob_1.put("estArchivoCancelado", context.estArchivoCancelado);
                    paraList_tRunJob_1.add("--context_type " + "estArchivoCancelado" + "=" + "id_Integer");
                    parentContextMap_tRunJob_1.put("estArchivoActivo", context.estArchivoActivo);
                    paraList_tRunJob_1.add("--context_type " + "estArchivoActivo" + "=" + "id_Integer");
                    parentContextMap_tRunJob_1.put("estArchivoPausado", context.estArchivoPausado);
                    paraList_tRunJob_1.add("--context_type " + "estArchivoPausado" + "=" + "id_Integer");
                    parentContextMap_tRunJob_1.put("estArchivoErrorArchivo", context.estArchivoErrorArchivo);
                    paraList_tRunJob_1.add("--context_type " + "estArchivoErrorArchivo" + "=" + "id_Integer");
                    parentContextMap_tRunJob_1.put("estArchivoErrorProcesamiento", context.estArchivoErrorProcesamiento);
                    paraList_tRunJob_1.add("--context_type " + "estArchivoErrorProcesamiento" + "=" + "id_Integer");
                    parentContextMap_tRunJob_1.put("estRegistroActivo", context.estRegistroActivo);
                    paraList_tRunJob_1.add("--context_type " + "estRegistroActivo" + "=" + "id_Integer");
                    parentContextMap_tRunJob_1.put("estRegistroInactivo", context.estRegistroInactivo);
                    paraList_tRunJob_1.add("--context_type " + "estRegistroInactivo" + "=" + "id_Integer");
                    parentContextMap_tRunJob_1.put("infoNombreArchivo", context.infoNombreArchivo);
                    paraList_tRunJob_1.add("--context_type " + "infoNombreArchivo" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("infoTipoArchivoRespuesta", context.infoTipoArchivoRespuesta);
                    paraList_tRunJob_1.add("--context_type " + "infoTipoArchivoRespuesta" + "=" + "id_Integer");
                    parentContextMap_tRunJob_1.put("infoIdArchivo", context.infoIdArchivo);
                    paraList_tRunJob_1.add("--context_type " + "infoIdArchivo" + "=" + "id_Integer");
                    parentContextMap_tRunJob_1.put("infoUsuarioIdArchivo", context.infoUsuarioIdArchivo);
                    paraList_tRunJob_1.add("--context_type " + "infoUsuarioIdArchivo" + "=" + "id_Integer");
                    parentContextMap_tRunJob_1.put("infoTipoArchivo", context.infoTipoArchivo);
                    paraList_tRunJob_1.add("--context_type " + "infoTipoArchivo" + "=" + "id_Integer");
                    parentContextMap_tRunJob_1.put("tipoArchivoMinSaludEtapa2Novedades", context.tipoArchivoMinSaludEtapa2Novedades);
                    paraList_tRunJob_1.add("--context_type " + "tipoArchivoMinSaludEtapa2Novedades" + "=" + "id_Integer");
                    parentContextMap_tRunJob_1.put("tipoArchivoMinSaludEtapa3MultiafiliacionGenerado", context.tipoArchivoMinSaludEtapa3MultiafiliacionGenerado);
                    paraList_tRunJob_1.add("--context_type " + "tipoArchivoMinSaludEtapa3MultiafiliacionGenerado" + "=" + "id_Integer");
                    parentContextMap_tRunJob_1.put("tipoArchivoCruceErrores", context.tipoArchivoCruceErrores);
                    paraList_tRunJob_1.add("--context_type " + "tipoArchivoCruceErrores" + "=" + "id_Integer");
                    parentContextMap_tRunJob_1.put("tipoArchivoMinSaludEtapa2NuevosRegistrosGenerado", context.tipoArchivoMinSaludEtapa2NuevosRegistrosGenerado);
                    paraList_tRunJob_1.add("--context_type " + "tipoArchivoMinSaludEtapa2NuevosRegistrosGenerado" + "=" + "id_Integer");
                    parentContextMap_tRunJob_1.put("tipoArchivoMinSaludEtapa3Multiafiliacion", context.tipoArchivoMinSaludEtapa3Multiafiliacion);
                    paraList_tRunJob_1.add("--context_type " + "tipoArchivoMinSaludEtapa3Multiafiliacion" + "=" + "id_Integer");
                    parentContextMap_tRunJob_1.put("tipoArchivoFedevidaGenerado", context.tipoArchivoFedevidaGenerado);
                    paraList_tRunJob_1.add("--context_type " + "tipoArchivoFedevidaGenerado" + "=" + "id_Integer");
                    parentContextMap_tRunJob_1.put("tipoArchivoEntesGenerado", context.tipoArchivoEntesGenerado);
                    paraList_tRunJob_1.add("--context_type " + "tipoArchivoEntesGenerado" + "=" + "id_Integer");
                    parentContextMap_tRunJob_1.put("tipoArchivoEntesTerritoriales", context.tipoArchivoEntesTerritoriales);
                    paraList_tRunJob_1.add("--context_type " + "tipoArchivoEntesTerritoriales" + "=" + "id_Integer");
                    parentContextMap_tRunJob_1.put("tipoArchivoCompendioSaludGenerado", context.tipoArchivoCompendioSaludGenerado);
                    paraList_tRunJob_1.add("--context_type " + "tipoArchivoCompendioSaludGenerado" + "=" + "id_Integer");
                    parentContextMap_tRunJob_1.put("tipoArchivoCompendioSalud", context.tipoArchivoCompendioSalud);
                    paraList_tRunJob_1.add("--context_type " + "tipoArchivoCompendioSalud" + "=" + "id_Integer");
                    parentContextMap_tRunJob_1.put("tipoArchivoMinSaludEtapa2NuevosRegistros", context.tipoArchivoMinSaludEtapa2NuevosRegistros);
                    paraList_tRunJob_1.add("--context_type " + "tipoArchivoMinSaludEtapa2NuevosRegistros" + "=" + "id_Integer");
                    parentContextMap_tRunJob_1.put("tipoArchivoFedevida", context.tipoArchivoFedevida);
                    paraList_tRunJob_1.add("--context_type " + "tipoArchivoFedevida" + "=" + "id_Integer");
                    parentContextMap_tRunJob_1.put("tipoArchivoMinSaludEtapa2NovedadesGenerado", context.tipoArchivoMinSaludEtapa2NovedadesGenerado);
                    paraList_tRunJob_1.add("--context_type " + "tipoArchivoMinSaludEtapa2NovedadesGenerado" + "=" + "id_Integer");
                    parentContextMap_tRunJob_1.put("suma", context.suma);
                    paraList_tRunJob_1.add("--context_type " + "suma" + "=" + "id_Integer");
                    parentContextMap_tRunJob_1.put("archivoConfiguracion", context.archivoConfiguracion);
                    paraList_tRunJob_1.add("--context_type " + "archivoConfiguracion" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("auxAumentoRegistros", context.auxAumentoRegistros);
                    paraList_tRunJob_1.add("--context_type " + "auxAumentoRegistros" + "=" + "id_Integer");
                    parentContextMap_tRunJob_1.put("auxRango", context.auxRango);
                    paraList_tRunJob_1.add("--context_type " + "auxRango" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("auxAfiliadosCriterioInact", context.auxAfiliadosCriterioInact);
                    paraList_tRunJob_1.add("--context_type " + "auxAfiliadosCriterioInact" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("auxCriterioActual", context.auxCriterioActual);
                    paraList_tRunJob_1.add("--context_type " + "auxCriterioActual" + "=" + "id_Integer");
                    parentContextMap_tRunJob_1.put("auxPrimerLoop", context.auxPrimerLoop);
                    paraList_tRunJob_1.add("--context_type " + "auxPrimerLoop" + "=" + "id_Boolean");
                    parentContextMap_tRunJob_1.put("auxPosicionRegistros", context.auxPosicionRegistros);
                    paraList_tRunJob_1.add("--context_type " + "auxPosicionRegistros" + "=" + "id_Integer");
                    parentContextMap_tRunJob_1.put("auxAfiliadosCriterio", context.auxAfiliadosCriterio);
                    paraList_tRunJob_1.add("--context_type " + "auxAfiliadosCriterio" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("auxAfiliadosCriterioAct", context.auxAfiliadosCriterioAct);
                    paraList_tRunJob_1.add("--context_type " + "auxAfiliadosCriterioAct" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("tipoJobEntesTerritoriales", context.tipoJobEntesTerritoriales);
                    paraList_tRunJob_1.add("--context_type " + "tipoJobEntesTerritoriales" + "=" + "id_Integer");
                    parentContextMap_tRunJob_1.put("tipoJobMinsaludEtapa2Novedades", context.tipoJobMinsaludEtapa2Novedades);
                    paraList_tRunJob_1.add("--context_type " + "tipoJobMinsaludEtapa2Novedades" + "=" + "id_Integer");
                    parentContextMap_tRunJob_1.put("tipoJobMinsaludEtapa2NuevosRegistros", context.tipoJobMinsaludEtapa2NuevosRegistros);
                    paraList_tRunJob_1.add("--context_type " + "tipoJobMinsaludEtapa2NuevosRegistros" + "=" + "id_Integer");
                    parentContextMap_tRunJob_1.put("tipoJobMinsaludEtapa3Multiafiliacion", context.tipoJobMinsaludEtapa3Multiafiliacion);
                    paraList_tRunJob_1.add("--context_type " + "tipoJobMinsaludEtapa3Multiafiliacion" + "=" + "id_Integer");
                    parentContextMap_tRunJob_1.put("tipoJobFedevida", context.tipoJobFedevida);
                    paraList_tRunJob_1.add("--context_type " + "tipoJobFedevida" + "=" + "id_Integer");
                    parentContextMap_tRunJob_1.put("descripcionProceso", context.descripcionProceso);
                    paraList_tRunJob_1.add("--context_type " + "descripcionProceso" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("idProceso", context.idProceso);
                    paraList_tRunJob_1.add("--context_type " + "idProceso" + "=" + "id_Integer");
                    parentContextMap_tRunJob_1.put("tipoJobProceso", context.tipoJobProceso);
                    paraList_tRunJob_1.add("--context_type " + "tipoJobProceso" + "=" + "id_Integer");
                    parentContextMap_tRunJob_1.put("tipoProceso", context.tipoProceso);
                    paraList_tRunJob_1.add("--context_type " + "tipoProceso" + "=" + "id_Integer");
                    parentContextMap_tRunJob_1.put("tipoJobCompendioSalud", context.tipoJobCompendioSalud);
                    paraList_tRunJob_1.add("--context_type " + "tipoJobCompendioSalud" + "=" + "id_Integer");
                        }
                    public void transmitAllContext() {
                        transmitContext_0();
                    }
            }
            new ContextProcessor_tRunJob_1().transmitAllContext();
		java.util.Enumeration<?> propertyNames_tRunJob_1 = context.propertyNames();
		while (propertyNames_tRunJob_1.hasMoreElements()) {
			String key_tRunJob_1 = (String) propertyNames_tRunJob_1.nextElement();
			Object value_tRunJob_1 = (Object) context.get(key_tRunJob_1);
			if(value_tRunJob_1!=null) {  
				
					paraList_tRunJob_1.add("--context_param " + key_tRunJob_1 + "=" + value_tRunJob_1);
					
			} else {
				paraList_tRunJob_1.add("--context_param " + key_tRunJob_1 + "=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
			}
			
		}
		

	Object obj_tRunJob_1 = null;

	
	
		afi_principal.minsaludetapa2nuevosregistros_1_0.MinSaludEtapa2NuevosRegistros childJob_tRunJob_1 = new afi_principal.minsaludetapa2nuevosregistros_1_0.MinSaludEtapa2NuevosRegistros();
	    // pass DataSources
	    java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_1 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
	            .get(KEY_DB_DATASOURCES);
	    if (null != talendDataSources_tRunJob_1) {
	        java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_1 = new java.util.HashMap<String, javax.sql.DataSource>();
	        for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_1 : talendDataSources_tRunJob_1
			        .entrySet()) {
	            dataSources_tRunJob_1.put(talendDataSourceEntry_tRunJob_1.getKey(),
	                    talendDataSourceEntry_tRunJob_1.getValue().getRawDataSource());
	        }
	        childJob_tRunJob_1.setDataSources(dataSources_tRunJob_1);
	    }
		  
			childJob_tRunJob_1.parentContextMap = parentContextMap_tRunJob_1;
		  
		
		String[][] childReturn_tRunJob_1 = childJob_tRunJob_1.runJob((String[]) paraList_tRunJob_1.toArray(new String[paraList_tRunJob_1.size()]));
		
            if(childJob_tRunJob_1.getErrorCode() == null){
                globalMap.put("tRunJob_1_CHILD_RETURN_CODE", childJob_tRunJob_1.getStatus() != null && ("failure").equals(childJob_tRunJob_1.getStatus()) ? 1 : 0);
            }else{
                globalMap.put("tRunJob_1_CHILD_RETURN_CODE", childJob_tRunJob_1.getErrorCode());
            }
            if (childJob_tRunJob_1.getExceptionStackTrace() != null) {
                globalMap.put("tRunJob_1_CHILD_EXCEPTION_STACKTRACE", childJob_tRunJob_1.getExceptionStackTrace());
            }
                    errorCode = childJob_tRunJob_1.getErrorCode();
                if (childJob_tRunJob_1.getErrorCode() != null || ("failure").equals(childJob_tRunJob_1.getStatus())) {
                    java.lang.Exception ce_tRunJob_1 = childJob_tRunJob_1.getException();
                    throw new RuntimeException("Child job running failed.\n" + ((ce_tRunJob_1!=null) ? (ce_tRunJob_1.getClass().getName() + ": " + ce_tRunJob_1.getMessage()) : ""));
                }

 


	tos_count_tRunJob_1++;

/**
 * [tRunJob_1 main ] stop
 */
	
	/**
	 * [tRunJob_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tRunJob_1";
	
	

 



/**
 * [tRunJob_1 process_data_begin ] stop
 */
	
	/**
	 * [tRunJob_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tRunJob_1";
	
	

 



/**
 * [tRunJob_1 process_data_end ] stop
 */
	
	/**
	 * [tRunJob_1 end ] start
	 */

	

	
	
	currentComponent="tRunJob_1";
	
	

 

ok_Hash.put("tRunJob_1", true);
end_Hash.put("tRunJob_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk22", 0, "ok");
				}
				tFixedFlowInput_4Process(globalMap);



/**
 * [tRunJob_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tRunJob_1 finally ] start
	 */

	

	
	
	currentComponent="tRunJob_1";
	
	
	
 



/**
 * [tRunJob_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tRunJob_1_SUBPROCESS_STATE", 1);
	}
	


public void tJava_9Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_9_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tJava_9 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_9", false);
		start_Hash.put("tJava_9", System.currentTimeMillis());
		
	
	currentComponent="tJava_9";
	
	
		int tos_count_tJava_9 = 0;
		


try
	{
		int nb_line=((Integer)globalMap.get("tOracleOutput_2_NB_LINE_UPDATED"));
		if(nb_line>0)
			{				
				//****************************************************************************************//
				System.out.println("*** INICIANDO EJECUCION JOB MINSALUD ETAPA 3 MULTIAFILIACION ***************************");
				//****************************************************************************************//
			}		
	}
catch(Exception e)
	{
		//****************************************************************************************//
		System.out.println("Excepción: " + e);
		//****************************************************************************************//
	}
 



/**
 * [tJava_9 begin ] stop
 */
	
	/**
	 * [tJava_9 main ] start
	 */

	

	
	
	currentComponent="tJava_9";
	
	

 


	tos_count_tJava_9++;

/**
 * [tJava_9 main ] stop
 */
	
	/**
	 * [tJava_9 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_9";
	
	

 



/**
 * [tJava_9 process_data_begin ] stop
 */
	
	/**
	 * [tJava_9 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_9";
	
	

 



/**
 * [tJava_9 process_data_end ] stop
 */
	
	/**
	 * [tJava_9 end ] start
	 */

	

	
	
	currentComponent="tJava_9";
	
	

 

ok_Hash.put("tJava_9", true);
end_Hash.put("tJava_9", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk6", 0, "ok");
				}
				tRunJob_3Process(globalMap);



/**
 * [tJava_9 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_9 finally ] start
	 */

	

	
	
	currentComponent="tJava_9";
	
	

 



/**
 * [tJava_9 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_9_SUBPROCESS_STATE", 1);
	}
	


public void tRunJob_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tRunJob_3_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tRunJob_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tRunJob_3", false);
		start_Hash.put("tRunJob_3", System.currentTimeMillis());
		
	
	currentComponent="tRunJob_3";
	
	
		int tos_count_tRunJob_3 = 0;
		


 



/**
 * [tRunJob_3 begin ] stop
 */
	
	/**
	 * [tRunJob_3 main ] start
	 */

	

	
	
	currentComponent="tRunJob_3";
	
	
	java.util.List<String> paraList_tRunJob_3 = new java.util.ArrayList<String>();
	
	        				paraList_tRunJob_3.add("--father_pid="+pid);
	      			
	        				paraList_tRunJob_3.add("--root_pid="+rootPid);
	      			
	        				paraList_tRunJob_3.add("--father_node=tRunJob_3");
	      			
	        				paraList_tRunJob_3.add("--context=Default");
	      			
		if(enableLogStash){
			paraList_tRunJob_3.add("--audit.enabled="+enableLogStash);
		}
		
	//for feature:10589
	
		paraList_tRunJob_3.add("--stat_port=" + portStats);
	

	if(resuming_logs_dir_path != null){
		paraList_tRunJob_3.add("--resuming_logs_dir_path=" + resuming_logs_dir_path);
	}
	String childResumePath_tRunJob_3 = ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path);
	String tRunJobName_tRunJob_3 = ResumeUtil.getRighttRunJob(resuming_checkpoint_path);
	if("tRunJob_3".equals(tRunJobName_tRunJob_3) && childResumePath_tRunJob_3 != null){
		paraList_tRunJob_3.add("--resuming_checkpoint_path=" + ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path));
	}
	paraList_tRunJob_3.add("--parent_part_launcher=JOB:" + jobName + "/NODE:tRunJob_3");
	
	java.util.Map<String, Object> parentContextMap_tRunJob_3 = new java.util.HashMap<String, Object>();

	

	Object obj_tRunJob_3 = null;

	
		obj_tRunJob_3 = context.infoNombreArchivo;
		if(obj_tRunJob_3!=null) {
			if (obj_tRunJob_3.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_3.add("--context_param infoNombreArchivo=" + ((java.util.Date) obj_tRunJob_3).getTime());
			} else {
				
					paraList_tRunJob_3.add("--context_param infoNombreArchivo=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_3));
					
				
			}
		} else {
			paraList_tRunJob_3.add("--context_param infoNombreArchivo=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_3.put("infoNombreArchivo", obj_tRunJob_3);
	
		obj_tRunJob_3 = context.infoUsuarioIdArchivo;
		if(obj_tRunJob_3!=null) {
			if (obj_tRunJob_3.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_3.add("--context_param infoUsuarioIdArchivo=" + ((java.util.Date) obj_tRunJob_3).getTime());
			} else {
				
					paraList_tRunJob_3.add("--context_param infoUsuarioIdArchivo=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_3));
					
				
			}
		} else {
			paraList_tRunJob_3.add("--context_param infoUsuarioIdArchivo=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_3.put("infoUsuarioIdArchivo", obj_tRunJob_3);
	
		obj_tRunJob_3 = context.infoIdArchivo;
		if(obj_tRunJob_3!=null) {
			if (obj_tRunJob_3.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_3.add("--context_param infoIdArchivo=" + ((java.util.Date) obj_tRunJob_3).getTime());
			} else {
				
					paraList_tRunJob_3.add("--context_param infoIdArchivo=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_3));
					
				
			}
		} else {
			paraList_tRunJob_3.add("--context_param infoIdArchivo=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_3.put("infoIdArchivo", obj_tRunJob_3);
	
		obj_tRunJob_3 = context.infoTipoArchivo;
		if(obj_tRunJob_3!=null) {
			if (obj_tRunJob_3.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_3.add("--context_param infoTipoArchivo=" + ((java.util.Date) obj_tRunJob_3).getTime());
			} else {
				
					paraList_tRunJob_3.add("--context_param infoTipoArchivo=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_3));
					
				
			}
		} else {
			paraList_tRunJob_3.add("--context_param infoTipoArchivo=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_3.put("infoTipoArchivo", obj_tRunJob_3);
	
		obj_tRunJob_3 = context.tipoJobProceso;
		if(obj_tRunJob_3!=null) {
			if (obj_tRunJob_3.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_3.add("--context_param tipoJobProceso=" + ((java.util.Date) obj_tRunJob_3).getTime());
			} else {
				
					paraList_tRunJob_3.add("--context_param tipoJobProceso=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_3));
					
				
			}
		} else {
			paraList_tRunJob_3.add("--context_param tipoJobProceso=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_3.put("tipoJobProceso", obj_tRunJob_3);
	
		obj_tRunJob_3 = context.idProceso;
		if(obj_tRunJob_3!=null) {
			if (obj_tRunJob_3.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_3.add("--context_param idProceso=" + ((java.util.Date) obj_tRunJob_3).getTime());
			} else {
				
					paraList_tRunJob_3.add("--context_param idProceso=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_3));
					
				
			}
		} else {
			paraList_tRunJob_3.add("--context_param idProceso=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_3.put("idProceso", obj_tRunJob_3);
	
		obj_tRunJob_3 = context.tipoProceso;
		if(obj_tRunJob_3!=null) {
			if (obj_tRunJob_3.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_3.add("--context_param tipoProceso=" + ((java.util.Date) obj_tRunJob_3).getTime());
			} else {
				
					paraList_tRunJob_3.add("--context_param tipoProceso=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_3));
					
				
			}
		} else {
			paraList_tRunJob_3.add("--context_param tipoProceso=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_3.put("tipoProceso", obj_tRunJob_3);
	
		obj_tRunJob_3 = context.descripcionProceso;
		if(obj_tRunJob_3!=null) {
			if (obj_tRunJob_3.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_3.add("--context_param descripcionProceso=" + ((java.util.Date) obj_tRunJob_3).getTime());
			} else {
				
					paraList_tRunJob_3.add("--context_param descripcionProceso=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_3));
					
				
			}
		} else {
			paraList_tRunJob_3.add("--context_param descripcionProceso=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_3.put("descripcionProceso", obj_tRunJob_3);
	
		obj_tRunJob_3 = context.fileSystem_Path;
		if(obj_tRunJob_3!=null) {
			if (obj_tRunJob_3.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_3.add("--context_param fileSystem_Path=" + ((java.util.Date) obj_tRunJob_3).getTime());
			} else {
				
					paraList_tRunJob_3.add("--context_param fileSystem_Path=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_3));
					
				
			}
		} else {
			paraList_tRunJob_3.add("--context_param fileSystem_Path=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_3.put("fileSystem_Path", obj_tRunJob_3);
	
		obj_tRunJob_3 = context.fileSystem_Area;
		if(obj_tRunJob_3!=null) {
			if (obj_tRunJob_3.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_3.add("--context_param fileSystem_Area=" + ((java.util.Date) obj_tRunJob_3).getTime());
			} else {
				
					paraList_tRunJob_3.add("--context_param fileSystem_Area=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_3));
					
				
			}
		} else {
			paraList_tRunJob_3.add("--context_param fileSystem_Area=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_3.put("fileSystem_Area", obj_tRunJob_3);
	
		obj_tRunJob_3 = context.oracle_AdditionalParams;
		if(obj_tRunJob_3!=null) {
			if (obj_tRunJob_3.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_3.add("--context_param oracle_AdditionalParams=" + ((java.util.Date) obj_tRunJob_3).getTime());
			} else {
				
					paraList_tRunJob_3.add("--context_param oracle_AdditionalParams=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_3));
					
				
			}
		} else {
			paraList_tRunJob_3.add("--context_param oracle_AdditionalParams=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_3.put("oracle_AdditionalParams", obj_tRunJob_3);
	
		obj_tRunJob_3 = context.oracle_Host;
		if(obj_tRunJob_3!=null) {
			if (obj_tRunJob_3.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_3.add("--context_param oracle_Host=" + ((java.util.Date) obj_tRunJob_3).getTime());
			} else {
				
					paraList_tRunJob_3.add("--context_param oracle_Host=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_3));
					
				
			}
		} else {
			paraList_tRunJob_3.add("--context_param oracle_Host=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_3.put("oracle_Host", obj_tRunJob_3);
	
		obj_tRunJob_3 = context.oracle_Port;
		if(obj_tRunJob_3!=null) {
			if (obj_tRunJob_3.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_3.add("--context_param oracle_Port=" + ((java.util.Date) obj_tRunJob_3).getTime());
			} else {
				
					paraList_tRunJob_3.add("--context_param oracle_Port=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_3));
					
				
			}
		} else {
			paraList_tRunJob_3.add("--context_param oracle_Port=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_3.put("oracle_Port", obj_tRunJob_3);
	
		obj_tRunJob_3 = context.oracle_Sid;
		if(obj_tRunJob_3!=null) {
			if (obj_tRunJob_3.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_3.add("--context_param oracle_Sid=" + ((java.util.Date) obj_tRunJob_3).getTime());
			} else {
				
					paraList_tRunJob_3.add("--context_param oracle_Sid=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_3));
					
				
			}
		} else {
			paraList_tRunJob_3.add("--context_param oracle_Sid=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_3.put("oracle_Sid", obj_tRunJob_3);
	
		obj_tRunJob_3 = context.oracle_ServiceName;
		if(obj_tRunJob_3!=null) {
			if (obj_tRunJob_3.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_3.add("--context_param oracle_ServiceName=" + ((java.util.Date) obj_tRunJob_3).getTime());
			} else {
				
					paraList_tRunJob_3.add("--context_param oracle_ServiceName=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_3));
					
				
			}
		} else {
			paraList_tRunJob_3.add("--context_param oracle_ServiceName=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_3.put("oracle_ServiceName", obj_tRunJob_3);
	
		obj_tRunJob_3 = context.oracle_Schema;
		if(obj_tRunJob_3!=null) {
			if (obj_tRunJob_3.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_3.add("--context_param oracle_Schema=" + ((java.util.Date) obj_tRunJob_3).getTime());
			} else {
				
					paraList_tRunJob_3.add("--context_param oracle_Schema=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_3));
					
				
			}
		} else {
			paraList_tRunJob_3.add("--context_param oracle_Schema=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_3.put("oracle_Schema", obj_tRunJob_3);
	
		obj_tRunJob_3 = context.oracle_User;
		if(obj_tRunJob_3!=null) {
			if (obj_tRunJob_3.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_3.add("--context_param oracle_User=" + ((java.util.Date) obj_tRunJob_3).getTime());
			} else {
				
					paraList_tRunJob_3.add("--context_param oracle_User=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_3));
					
				
			}
		} else {
			paraList_tRunJob_3.add("--context_param oracle_User=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_3.put("oracle_User", obj_tRunJob_3);
	
		obj_tRunJob_3 = context.oracle_Password;
		if(obj_tRunJob_3!=null) {
			if (obj_tRunJob_3.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_3.add("--context_param oracle_Password=" + ((java.util.Date) obj_tRunJob_3).getTime());
			} else {
				
					paraList_tRunJob_3.add("--context_param oracle_Password=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_3));
					
				
			}
		} else {
			paraList_tRunJob_3.add("--context_param oracle_Password=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_3.put("oracle_Password", obj_tRunJob_3);
	
		obj_tRunJob_3 = context.mail_PasswordMail;
		if(obj_tRunJob_3!=null) {
			if (obj_tRunJob_3.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_3.add("--context_param mail_PasswordMail=" + ((java.util.Date) obj_tRunJob_3).getTime());
			} else {
				
					paraList_tRunJob_3.add("--context_param mail_PasswordMail=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_3));
					
				
			}
		} else {
			paraList_tRunJob_3.add("--context_param mail_PasswordMail=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_3.put("mail_PasswordMail", obj_tRunJob_3);
	
		obj_tRunJob_3 = context.mail_SMTPPort;
		if(obj_tRunJob_3!=null) {
			if (obj_tRunJob_3.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_3.add("--context_param mail_SMTPPort=" + ((java.util.Date) obj_tRunJob_3).getTime());
			} else {
				
					paraList_tRunJob_3.add("--context_param mail_SMTPPort=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_3));
					
				
			}
		} else {
			paraList_tRunJob_3.add("--context_param mail_SMTPPort=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_3.put("mail_SMTPPort", obj_tRunJob_3);
	
		obj_tRunJob_3 = context.mail_UsernameMail;
		if(obj_tRunJob_3!=null) {
			if (obj_tRunJob_3.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_3.add("--context_param mail_UsernameMail=" + ((java.util.Date) obj_tRunJob_3).getTime());
			} else {
				
					paraList_tRunJob_3.add("--context_param mail_UsernameMail=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_3));
					
				
			}
		} else {
			paraList_tRunJob_3.add("--context_param mail_UsernameMail=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_3.put("mail_UsernameMail", obj_tRunJob_3);
	
		obj_tRunJob_3 = context.mail_SMTPHost;
		if(obj_tRunJob_3!=null) {
			if (obj_tRunJob_3.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_3.add("--context_param mail_SMTPHost=" + ((java.util.Date) obj_tRunJob_3).getTime());
			} else {
				
					paraList_tRunJob_3.add("--context_param mail_SMTPHost=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_3));
					
				
			}
		} else {
			paraList_tRunJob_3.add("--context_param mail_SMTPHost=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_3.put("mail_SMTPHost", obj_tRunJob_3);
	
		obj_tRunJob_3 = context.estArchivoActivo;
		if(obj_tRunJob_3!=null) {
			if (obj_tRunJob_3.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_3.add("--context_param estArchivoActivo=" + ((java.util.Date) obj_tRunJob_3).getTime());
			} else {
				
					paraList_tRunJob_3.add("--context_param estArchivoActivo=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_3));
					
				
			}
		} else {
			paraList_tRunJob_3.add("--context_param estArchivoActivo=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_3.put("estArchivoActivo", obj_tRunJob_3);
	
		obj_tRunJob_3 = context.estArchivoInactivo;
		if(obj_tRunJob_3!=null) {
			if (obj_tRunJob_3.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_3.add("--context_param estArchivoInactivo=" + ((java.util.Date) obj_tRunJob_3).getTime());
			} else {
				
					paraList_tRunJob_3.add("--context_param estArchivoInactivo=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_3));
					
				
			}
		} else {
			paraList_tRunJob_3.add("--context_param estArchivoInactivo=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_3.put("estArchivoInactivo", obj_tRunJob_3);
	
		obj_tRunJob_3 = context.estArchivoPausado;
		if(obj_tRunJob_3!=null) {
			if (obj_tRunJob_3.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_3.add("--context_param estArchivoPausado=" + ((java.util.Date) obj_tRunJob_3).getTime());
			} else {
				
					paraList_tRunJob_3.add("--context_param estArchivoPausado=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_3));
					
				
			}
		} else {
			paraList_tRunJob_3.add("--context_param estArchivoPausado=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_3.put("estArchivoPausado", obj_tRunJob_3);
	
		obj_tRunJob_3 = context.estArchivoErrorArchivo;
		if(obj_tRunJob_3!=null) {
			if (obj_tRunJob_3.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_3.add("--context_param estArchivoErrorArchivo=" + ((java.util.Date) obj_tRunJob_3).getTime());
			} else {
				
					paraList_tRunJob_3.add("--context_param estArchivoErrorArchivo=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_3));
					
				
			}
		} else {
			paraList_tRunJob_3.add("--context_param estArchivoErrorArchivo=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_3.put("estArchivoErrorArchivo", obj_tRunJob_3);
	
		obj_tRunJob_3 = context.estArchivoEnProceso;
		if(obj_tRunJob_3!=null) {
			if (obj_tRunJob_3.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_3.add("--context_param estArchivoEnProceso=" + ((java.util.Date) obj_tRunJob_3).getTime());
			} else {
				
					paraList_tRunJob_3.add("--context_param estArchivoEnProceso=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_3));
					
				
			}
		} else {
			paraList_tRunJob_3.add("--context_param estArchivoEnProceso=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_3.put("estArchivoEnProceso", obj_tRunJob_3);
	
		obj_tRunJob_3 = context.estArchivoErrorProcesamiento;
		if(obj_tRunJob_3!=null) {
			if (obj_tRunJob_3.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_3.add("--context_param estArchivoErrorProcesamiento=" + ((java.util.Date) obj_tRunJob_3).getTime());
			} else {
				
					paraList_tRunJob_3.add("--context_param estArchivoErrorProcesamiento=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_3));
					
				
			}
		} else {
			paraList_tRunJob_3.add("--context_param estArchivoErrorProcesamiento=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_3.put("estArchivoErrorProcesamiento", obj_tRunJob_3);
	
		obj_tRunJob_3 = context.estArchivoProcesado;
		if(obj_tRunJob_3!=null) {
			if (obj_tRunJob_3.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_3.add("--context_param estArchivoProcesado=" + ((java.util.Date) obj_tRunJob_3).getTime());
			} else {
				
					paraList_tRunJob_3.add("--context_param estArchivoProcesado=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_3));
					
				
			}
		} else {
			paraList_tRunJob_3.add("--context_param estArchivoProcesado=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_3.put("estArchivoProcesado", obj_tRunJob_3);
	
		obj_tRunJob_3 = context.estArchivoCancelado;
		if(obj_tRunJob_3!=null) {
			if (obj_tRunJob_3.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_3.add("--context_param estArchivoCancelado=" + ((java.util.Date) obj_tRunJob_3).getTime());
			} else {
				
					paraList_tRunJob_3.add("--context_param estArchivoCancelado=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_3));
					
				
			}
		} else {
			paraList_tRunJob_3.add("--context_param estArchivoCancelado=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_3.put("estArchivoCancelado", obj_tRunJob_3);
	
	
		afi_principal.minsaludetapa3multiafiliacion_0_4.MinSaludEtapa3Multiafiliacion childJob_tRunJob_3 = new afi_principal.minsaludetapa3multiafiliacion_0_4.MinSaludEtapa3Multiafiliacion();
	    // pass DataSources
	    java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_3 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
	            .get(KEY_DB_DATASOURCES);
	    if (null != talendDataSources_tRunJob_3) {
	        java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_3 = new java.util.HashMap<String, javax.sql.DataSource>();
	        for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_3 : talendDataSources_tRunJob_3
			        .entrySet()) {
	            dataSources_tRunJob_3.put(talendDataSourceEntry_tRunJob_3.getKey(),
	                    talendDataSourceEntry_tRunJob_3.getValue().getRawDataSource());
	        }
	        childJob_tRunJob_3.setDataSources(dataSources_tRunJob_3);
	    }
		  
			childJob_tRunJob_3.parentContextMap = parentContextMap_tRunJob_3;
		  
		
		String[][] childReturn_tRunJob_3 = childJob_tRunJob_3.runJob((String[]) paraList_tRunJob_3.toArray(new String[paraList_tRunJob_3.size()]));
		
            if(childJob_tRunJob_3.getErrorCode() == null){
                globalMap.put("tRunJob_3_CHILD_RETURN_CODE", childJob_tRunJob_3.getStatus() != null && ("failure").equals(childJob_tRunJob_3.getStatus()) ? 1 : 0);
            }else{
                globalMap.put("tRunJob_3_CHILD_RETURN_CODE", childJob_tRunJob_3.getErrorCode());
            }
            if (childJob_tRunJob_3.getExceptionStackTrace() != null) {
                globalMap.put("tRunJob_3_CHILD_EXCEPTION_STACKTRACE", childJob_tRunJob_3.getExceptionStackTrace());
            }
                    errorCode = childJob_tRunJob_3.getErrorCode();
                if (childJob_tRunJob_3.getErrorCode() != null || ("failure").equals(childJob_tRunJob_3.getStatus())) {
                    java.lang.Exception ce_tRunJob_3 = childJob_tRunJob_3.getException();
                    throw new RuntimeException("Child job running failed.\n" + ((ce_tRunJob_3!=null) ? (ce_tRunJob_3.getClass().getName() + ": " + ce_tRunJob_3.getMessage()) : ""));
                }

 


	tos_count_tRunJob_3++;

/**
 * [tRunJob_3 main ] stop
 */
	
	/**
	 * [tRunJob_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tRunJob_3";
	
	

 



/**
 * [tRunJob_3 process_data_begin ] stop
 */
	
	/**
	 * [tRunJob_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tRunJob_3";
	
	

 



/**
 * [tRunJob_3 process_data_end ] stop
 */
	
	/**
	 * [tRunJob_3 end ] start
	 */

	

	
	
	currentComponent="tRunJob_3";
	
	

 

ok_Hash.put("tRunJob_3", true);
end_Hash.put("tRunJob_3", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk25", 0, "ok");
				}
				tFixedFlowInput_4Process(globalMap);



/**
 * [tRunJob_3 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tRunJob_3 finally ] start
	 */

	

	
	
	currentComponent="tRunJob_3";
	
	
	
 



/**
 * [tRunJob_3 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tRunJob_3_SUBPROCESS_STATE", 1);
	}
	


public void tJava_12Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_12_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tJava_12 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_12", false);
		start_Hash.put("tJava_12", System.currentTimeMillis());
		
	
	currentComponent="tJava_12";
	
	
		int tos_count_tJava_12 = 0;
		


try
	{
		int nb_line=((Integer)globalMap.get("tOracleOutput_2_NB_LINE_UPDATED"));
		if(nb_line>0)
			{				
				//****************************************************************************************//
				System.out.println("*** INICIANDO EJECUCION JOB COMPENDIO DE SALUD *****************************************");
				//****************************************************************************************//
			}		
	}
catch(Exception e)
	{
		//****************************************************************************************//
		System.out.println("Excepción: " + e);
		//****************************************************************************************//
	}
 



/**
 * [tJava_12 begin ] stop
 */
	
	/**
	 * [tJava_12 main ] start
	 */

	

	
	
	currentComponent="tJava_12";
	
	

 


	tos_count_tJava_12++;

/**
 * [tJava_12 main ] stop
 */
	
	/**
	 * [tJava_12 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_12";
	
	

 



/**
 * [tJava_12 process_data_begin ] stop
 */
	
	/**
	 * [tJava_12 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_12";
	
	

 



/**
 * [tJava_12 process_data_end ] stop
 */
	
	/**
	 * [tJava_12 end ] start
	 */

	

	
	
	currentComponent="tJava_12";
	
	

 

ok_Hash.put("tJava_12", true);
end_Hash.put("tJava_12", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk30", 0, "ok");
				}
				tRunJob_7Process(globalMap);



/**
 * [tJava_12 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_12 finally ] start
	 */

	

	
	
	currentComponent="tJava_12";
	
	

 



/**
 * [tJava_12 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_12_SUBPROCESS_STATE", 1);
	}
	


public void tRunJob_7Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tRunJob_7_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tRunJob_7 begin ] start
	 */

	

	
		
		ok_Hash.put("tRunJob_7", false);
		start_Hash.put("tRunJob_7", System.currentTimeMillis());
		
	
	currentComponent="tRunJob_7";
	
	
		int tos_count_tRunJob_7 = 0;
		


 



/**
 * [tRunJob_7 begin ] stop
 */
	
	/**
	 * [tRunJob_7 main ] start
	 */

	

	
	
	currentComponent="tRunJob_7";
	
	
	java.util.List<String> paraList_tRunJob_7 = new java.util.ArrayList<String>();
	
	        				paraList_tRunJob_7.add("--father_pid="+pid);
	      			
	        				paraList_tRunJob_7.add("--root_pid="+rootPid);
	      			
	        				paraList_tRunJob_7.add("--father_node=tRunJob_7");
	      			
	        				paraList_tRunJob_7.add("--context=Default");
	      			
		if(enableLogStash){
			paraList_tRunJob_7.add("--audit.enabled="+enableLogStash);
		}
		
	//for feature:10589
	
		paraList_tRunJob_7.add("--stat_port=" + portStats);
	

	if(resuming_logs_dir_path != null){
		paraList_tRunJob_7.add("--resuming_logs_dir_path=" + resuming_logs_dir_path);
	}
	String childResumePath_tRunJob_7 = ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path);
	String tRunJobName_tRunJob_7 = ResumeUtil.getRighttRunJob(resuming_checkpoint_path);
	if("tRunJob_7".equals(tRunJobName_tRunJob_7) && childResumePath_tRunJob_7 != null){
		paraList_tRunJob_7.add("--resuming_checkpoint_path=" + ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path));
	}
	paraList_tRunJob_7.add("--parent_part_launcher=JOB:" + jobName + "/NODE:tRunJob_7");
	
	java.util.Map<String, Object> parentContextMap_tRunJob_7 = new java.util.HashMap<String, Object>();

	

	Object obj_tRunJob_7 = null;

	
		obj_tRunJob_7 = context.infoNombreArchivo;
		if(obj_tRunJob_7!=null) {
			if (obj_tRunJob_7.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_7.add("--context_param infoNombreArchivo=" + ((java.util.Date) obj_tRunJob_7).getTime());
			} else {
				
					paraList_tRunJob_7.add("--context_param infoNombreArchivo=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_7));
					
				
			}
		} else {
			paraList_tRunJob_7.add("--context_param infoNombreArchivo=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_7.put("infoNombreArchivo", obj_tRunJob_7);
	
		obj_tRunJob_7 = context.infoUsuarioIdArchivo;
		if(obj_tRunJob_7!=null) {
			if (obj_tRunJob_7.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_7.add("--context_param infoUsuarioIdArchivo=" + ((java.util.Date) obj_tRunJob_7).getTime());
			} else {
				
					paraList_tRunJob_7.add("--context_param infoUsuarioIdArchivo=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_7));
					
				
			}
		} else {
			paraList_tRunJob_7.add("--context_param infoUsuarioIdArchivo=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_7.put("infoUsuarioIdArchivo", obj_tRunJob_7);
	
		obj_tRunJob_7 = context.infoIdArchivo;
		if(obj_tRunJob_7!=null) {
			if (obj_tRunJob_7.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_7.add("--context_param infoIdArchivo=" + ((java.util.Date) obj_tRunJob_7).getTime());
			} else {
				
					paraList_tRunJob_7.add("--context_param infoIdArchivo=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_7));
					
				
			}
		} else {
			paraList_tRunJob_7.add("--context_param infoIdArchivo=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_7.put("infoIdArchivo", obj_tRunJob_7);
	
		obj_tRunJob_7 = context.infoTipoArchivo;
		if(obj_tRunJob_7!=null) {
			if (obj_tRunJob_7.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_7.add("--context_param infoTipoArchivo=" + ((java.util.Date) obj_tRunJob_7).getTime());
			} else {
				
					paraList_tRunJob_7.add("--context_param infoTipoArchivo=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_7));
					
				
			}
		} else {
			paraList_tRunJob_7.add("--context_param infoTipoArchivo=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_7.put("infoTipoArchivo", obj_tRunJob_7);
	
		obj_tRunJob_7 = context.tipoJobProceso;
		if(obj_tRunJob_7!=null) {
			if (obj_tRunJob_7.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_7.add("--context_param tipoJobProceso=" + ((java.util.Date) obj_tRunJob_7).getTime());
			} else {
				
					paraList_tRunJob_7.add("--context_param tipoJobProceso=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_7));
					
				
			}
		} else {
			paraList_tRunJob_7.add("--context_param tipoJobProceso=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_7.put("tipoJobProceso", obj_tRunJob_7);
	
		obj_tRunJob_7 = context.idProceso;
		if(obj_tRunJob_7!=null) {
			if (obj_tRunJob_7.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_7.add("--context_param idProceso=" + ((java.util.Date) obj_tRunJob_7).getTime());
			} else {
				
					paraList_tRunJob_7.add("--context_param idProceso=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_7));
					
				
			}
		} else {
			paraList_tRunJob_7.add("--context_param idProceso=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_7.put("idProceso", obj_tRunJob_7);
	
		obj_tRunJob_7 = context.tipoProceso;
		if(obj_tRunJob_7!=null) {
			if (obj_tRunJob_7.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_7.add("--context_param tipoProceso=" + ((java.util.Date) obj_tRunJob_7).getTime());
			} else {
				
					paraList_tRunJob_7.add("--context_param tipoProceso=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_7));
					
				
			}
		} else {
			paraList_tRunJob_7.add("--context_param tipoProceso=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_7.put("tipoProceso", obj_tRunJob_7);
	
		obj_tRunJob_7 = context.descripcionProceso;
		if(obj_tRunJob_7!=null) {
			if (obj_tRunJob_7.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_7.add("--context_param descripcionProceso=" + ((java.util.Date) obj_tRunJob_7).getTime());
			} else {
				
					paraList_tRunJob_7.add("--context_param descripcionProceso=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_7));
					
				
			}
		} else {
			paraList_tRunJob_7.add("--context_param descripcionProceso=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_7.put("descripcionProceso", obj_tRunJob_7);
	
		obj_tRunJob_7 = context.fileSystem_Path;
		if(obj_tRunJob_7!=null) {
			if (obj_tRunJob_7.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_7.add("--context_param fileSystem_Path=" + ((java.util.Date) obj_tRunJob_7).getTime());
			} else {
				
					paraList_tRunJob_7.add("--context_param fileSystem_Path=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_7));
					
				
			}
		} else {
			paraList_tRunJob_7.add("--context_param fileSystem_Path=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_7.put("fileSystem_Path", obj_tRunJob_7);
	
		obj_tRunJob_7 = context.fileSystem_Area;
		if(obj_tRunJob_7!=null) {
			if (obj_tRunJob_7.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_7.add("--context_param fileSystem_Area=" + ((java.util.Date) obj_tRunJob_7).getTime());
			} else {
				
					paraList_tRunJob_7.add("--context_param fileSystem_Area=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_7));
					
				
			}
		} else {
			paraList_tRunJob_7.add("--context_param fileSystem_Area=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_7.put("fileSystem_Area", obj_tRunJob_7);
	
		obj_tRunJob_7 = context.oracle_AdditionalParams;
		if(obj_tRunJob_7!=null) {
			if (obj_tRunJob_7.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_7.add("--context_param oracle_AdditionalParams=" + ((java.util.Date) obj_tRunJob_7).getTime());
			} else {
				
					paraList_tRunJob_7.add("--context_param oracle_AdditionalParams=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_7));
					
				
			}
		} else {
			paraList_tRunJob_7.add("--context_param oracle_AdditionalParams=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_7.put("oracle_AdditionalParams", obj_tRunJob_7);
	
		obj_tRunJob_7 = context.oracle_Host;
		if(obj_tRunJob_7!=null) {
			if (obj_tRunJob_7.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_7.add("--context_param oracle_Host=" + ((java.util.Date) obj_tRunJob_7).getTime());
			} else {
				
					paraList_tRunJob_7.add("--context_param oracle_Host=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_7));
					
				
			}
		} else {
			paraList_tRunJob_7.add("--context_param oracle_Host=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_7.put("oracle_Host", obj_tRunJob_7);
	
		obj_tRunJob_7 = context.oracle_Port;
		if(obj_tRunJob_7!=null) {
			if (obj_tRunJob_7.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_7.add("--context_param oracle_Port=" + ((java.util.Date) obj_tRunJob_7).getTime());
			} else {
				
					paraList_tRunJob_7.add("--context_param oracle_Port=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_7));
					
				
			}
		} else {
			paraList_tRunJob_7.add("--context_param oracle_Port=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_7.put("oracle_Port", obj_tRunJob_7);
	
		obj_tRunJob_7 = context.oracle_Sid;
		if(obj_tRunJob_7!=null) {
			if (obj_tRunJob_7.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_7.add("--context_param oracle_Sid=" + ((java.util.Date) obj_tRunJob_7).getTime());
			} else {
				
					paraList_tRunJob_7.add("--context_param oracle_Sid=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_7));
					
				
			}
		} else {
			paraList_tRunJob_7.add("--context_param oracle_Sid=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_7.put("oracle_Sid", obj_tRunJob_7);
	
		obj_tRunJob_7 = context.oracle_ServiceName;
		if(obj_tRunJob_7!=null) {
			if (obj_tRunJob_7.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_7.add("--context_param oracle_ServiceName=" + ((java.util.Date) obj_tRunJob_7).getTime());
			} else {
				
					paraList_tRunJob_7.add("--context_param oracle_ServiceName=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_7));
					
				
			}
		} else {
			paraList_tRunJob_7.add("--context_param oracle_ServiceName=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_7.put("oracle_ServiceName", obj_tRunJob_7);
	
		obj_tRunJob_7 = context.oracle_Schema;
		if(obj_tRunJob_7!=null) {
			if (obj_tRunJob_7.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_7.add("--context_param oracle_Schema=" + ((java.util.Date) obj_tRunJob_7).getTime());
			} else {
				
					paraList_tRunJob_7.add("--context_param oracle_Schema=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_7));
					
				
			}
		} else {
			paraList_tRunJob_7.add("--context_param oracle_Schema=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_7.put("oracle_Schema", obj_tRunJob_7);
	
		obj_tRunJob_7 = context.oracle_User;
		if(obj_tRunJob_7!=null) {
			if (obj_tRunJob_7.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_7.add("--context_param oracle_User=" + ((java.util.Date) obj_tRunJob_7).getTime());
			} else {
				
					paraList_tRunJob_7.add("--context_param oracle_User=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_7));
					
				
			}
		} else {
			paraList_tRunJob_7.add("--context_param oracle_User=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_7.put("oracle_User", obj_tRunJob_7);
	
		obj_tRunJob_7 = context.oracle_Password;
		if(obj_tRunJob_7!=null) {
			if (obj_tRunJob_7.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_7.add("--context_param oracle_Password=" + ((java.util.Date) obj_tRunJob_7).getTime());
			} else {
				
					paraList_tRunJob_7.add("--context_param oracle_Password=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_7));
					
				
			}
		} else {
			paraList_tRunJob_7.add("--context_param oracle_Password=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_7.put("oracle_Password", obj_tRunJob_7);
	
		obj_tRunJob_7 = context.estArchivoActivo;
		if(obj_tRunJob_7!=null) {
			if (obj_tRunJob_7.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_7.add("--context_param estArchivoActivo=" + ((java.util.Date) obj_tRunJob_7).getTime());
			} else {
				
					paraList_tRunJob_7.add("--context_param estArchivoActivo=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_7));
					
				
			}
		} else {
			paraList_tRunJob_7.add("--context_param estArchivoActivo=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_7.put("estArchivoActivo", obj_tRunJob_7);
	
		obj_tRunJob_7 = context.estArchivoInactivo;
		if(obj_tRunJob_7!=null) {
			if (obj_tRunJob_7.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_7.add("--context_param estArchivoInactivo=" + ((java.util.Date) obj_tRunJob_7).getTime());
			} else {
				
					paraList_tRunJob_7.add("--context_param estArchivoInactivo=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_7));
					
				
			}
		} else {
			paraList_tRunJob_7.add("--context_param estArchivoInactivo=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_7.put("estArchivoInactivo", obj_tRunJob_7);
	
		obj_tRunJob_7 = context.estArchivoPausado;
		if(obj_tRunJob_7!=null) {
			if (obj_tRunJob_7.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_7.add("--context_param estArchivoPausado=" + ((java.util.Date) obj_tRunJob_7).getTime());
			} else {
				
					paraList_tRunJob_7.add("--context_param estArchivoPausado=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_7));
					
				
			}
		} else {
			paraList_tRunJob_7.add("--context_param estArchivoPausado=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_7.put("estArchivoPausado", obj_tRunJob_7);
	
		obj_tRunJob_7 = context.estArchivoErrorArchivo;
		if(obj_tRunJob_7!=null) {
			if (obj_tRunJob_7.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_7.add("--context_param estArchivoErrorArchivo=" + ((java.util.Date) obj_tRunJob_7).getTime());
			} else {
				
					paraList_tRunJob_7.add("--context_param estArchivoErrorArchivo=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_7));
					
				
			}
		} else {
			paraList_tRunJob_7.add("--context_param estArchivoErrorArchivo=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_7.put("estArchivoErrorArchivo", obj_tRunJob_7);
	
		obj_tRunJob_7 = context.estArchivoEnProceso;
		if(obj_tRunJob_7!=null) {
			if (obj_tRunJob_7.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_7.add("--context_param estArchivoEnProceso=" + ((java.util.Date) obj_tRunJob_7).getTime());
			} else {
				
					paraList_tRunJob_7.add("--context_param estArchivoEnProceso=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_7));
					
				
			}
		} else {
			paraList_tRunJob_7.add("--context_param estArchivoEnProceso=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_7.put("estArchivoEnProceso", obj_tRunJob_7);
	
		obj_tRunJob_7 = context.estArchivoErrorProcesamiento;
		if(obj_tRunJob_7!=null) {
			if (obj_tRunJob_7.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_7.add("--context_param estArchivoErrorProcesamiento=" + ((java.util.Date) obj_tRunJob_7).getTime());
			} else {
				
					paraList_tRunJob_7.add("--context_param estArchivoErrorProcesamiento=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_7));
					
				
			}
		} else {
			paraList_tRunJob_7.add("--context_param estArchivoErrorProcesamiento=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_7.put("estArchivoErrorProcesamiento", obj_tRunJob_7);
	
		obj_tRunJob_7 = context.estArchivoProcesado;
		if(obj_tRunJob_7!=null) {
			if (obj_tRunJob_7.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_7.add("--context_param estArchivoProcesado=" + ((java.util.Date) obj_tRunJob_7).getTime());
			} else {
				
					paraList_tRunJob_7.add("--context_param estArchivoProcesado=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_7));
					
				
			}
		} else {
			paraList_tRunJob_7.add("--context_param estArchivoProcesado=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_7.put("estArchivoProcesado", obj_tRunJob_7);
	
		obj_tRunJob_7 = context.estArchivoCancelado;
		if(obj_tRunJob_7!=null) {
			if (obj_tRunJob_7.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_7.add("--context_param estArchivoCancelado=" + ((java.util.Date) obj_tRunJob_7).getTime());
			} else {
				
					paraList_tRunJob_7.add("--context_param estArchivoCancelado=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_7));
					
				
			}
		} else {
			paraList_tRunJob_7.add("--context_param estArchivoCancelado=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_7.put("estArchivoCancelado", obj_tRunJob_7);
	
	
		afi_principal.consolidado_salud_1_1.Consolidado_Salud childJob_tRunJob_7 = new afi_principal.consolidado_salud_1_1.Consolidado_Salud();
	    // pass DataSources
	    java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_7 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
	            .get(KEY_DB_DATASOURCES);
	    if (null != talendDataSources_tRunJob_7) {
	        java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_7 = new java.util.HashMap<String, javax.sql.DataSource>();
	        for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_7 : talendDataSources_tRunJob_7
			        .entrySet()) {
	            dataSources_tRunJob_7.put(talendDataSourceEntry_tRunJob_7.getKey(),
	                    talendDataSourceEntry_tRunJob_7.getValue().getRawDataSource());
	        }
	        childJob_tRunJob_7.setDataSources(dataSources_tRunJob_7);
	    }
		  
			childJob_tRunJob_7.parentContextMap = parentContextMap_tRunJob_7;
		  
		
		String[][] childReturn_tRunJob_7 = childJob_tRunJob_7.runJob((String[]) paraList_tRunJob_7.toArray(new String[paraList_tRunJob_7.size()]));
		
            if(childJob_tRunJob_7.getErrorCode() == null){
                globalMap.put("tRunJob_7_CHILD_RETURN_CODE", childJob_tRunJob_7.getStatus() != null && ("failure").equals(childJob_tRunJob_7.getStatus()) ? 1 : 0);
            }else{
                globalMap.put("tRunJob_7_CHILD_RETURN_CODE", childJob_tRunJob_7.getErrorCode());
            }
            if (childJob_tRunJob_7.getExceptionStackTrace() != null) {
                globalMap.put("tRunJob_7_CHILD_EXCEPTION_STACKTRACE", childJob_tRunJob_7.getExceptionStackTrace());
            }
                    errorCode = childJob_tRunJob_7.getErrorCode();
                if (childJob_tRunJob_7.getErrorCode() != null || ("failure").equals(childJob_tRunJob_7.getStatus())) {
                    java.lang.Exception ce_tRunJob_7 = childJob_tRunJob_7.getException();
                    throw new RuntimeException("Child job running failed.\n" + ((ce_tRunJob_7!=null) ? (ce_tRunJob_7.getClass().getName() + ": " + ce_tRunJob_7.getMessage()) : ""));
                }

 


	tos_count_tRunJob_7++;

/**
 * [tRunJob_7 main ] stop
 */
	
	/**
	 * [tRunJob_7 process_data_begin ] start
	 */

	

	
	
	currentComponent="tRunJob_7";
	
	

 



/**
 * [tRunJob_7 process_data_begin ] stop
 */
	
	/**
	 * [tRunJob_7 process_data_end ] start
	 */

	

	
	
	currentComponent="tRunJob_7";
	
	

 



/**
 * [tRunJob_7 process_data_end ] stop
 */
	
	/**
	 * [tRunJob_7 end ] start
	 */

	

	
	
	currentComponent="tRunJob_7";
	
	

 

ok_Hash.put("tRunJob_7", true);
end_Hash.put("tRunJob_7", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk31", 0, "ok");
				}
				tFixedFlowInput_4Process(globalMap);



/**
 * [tRunJob_7 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tRunJob_7 finally ] start
	 */

	

	
	
	currentComponent="tRunJob_7";
	
	
	
 



/**
 * [tRunJob_7 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tRunJob_7_SUBPROCESS_STATE", 1);
	}
	


public void tJava_5Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_5_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tJava_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_5", false);
		start_Hash.put("tJava_5", System.currentTimeMillis());
		
	
	currentComponent="tJava_5";
	
	
		int tos_count_tJava_5 = 0;
		


try
	{
		int nb_line=((Integer)globalMap.get("tOracleOutput_2_NB_LINE_UPDATED"));
		if(nb_line>0)
			{				
				//****************************************************************************************//
				System.out.println("*** INICIANDO EJECUCION JOB MINSALUD ETAPA 2 NOVEDADES *********************************");
				//****************************************************************************************//
			}		
	}
catch(Exception e)
	{
		//****************************************************************************************//
		System.out.println("Excepción: " + e);
		//****************************************************************************************//
	}
 



/**
 * [tJava_5 begin ] stop
 */
	
	/**
	 * [tJava_5 main ] start
	 */

	

	
	
	currentComponent="tJava_5";
	
	

 


	tos_count_tJava_5++;

/**
 * [tJava_5 main ] stop
 */
	
	/**
	 * [tJava_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_5";
	
	

 



/**
 * [tJava_5 process_data_begin ] stop
 */
	
	/**
	 * [tJava_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_5";
	
	

 



/**
 * [tJava_5 process_data_end ] stop
 */
	
	/**
	 * [tJava_5 end ] start
	 */

	

	
	
	currentComponent="tJava_5";
	
	

 

ok_Hash.put("tJava_5", true);
end_Hash.put("tJava_5", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk11", 0, "ok");
				}
				tRunJob_2Process(globalMap);



/**
 * [tJava_5 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_5 finally ] start
	 */

	

	
	
	currentComponent="tJava_5";
	
	

 



/**
 * [tJava_5 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_5_SUBPROCESS_STATE", 1);
	}
	


public void tRunJob_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tRunJob_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tRunJob_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tRunJob_2", false);
		start_Hash.put("tRunJob_2", System.currentTimeMillis());
		
	
	currentComponent="tRunJob_2";
	
	
		int tos_count_tRunJob_2 = 0;
		


 



/**
 * [tRunJob_2 begin ] stop
 */
	
	/**
	 * [tRunJob_2 main ] start
	 */

	

	
	
	currentComponent="tRunJob_2";
	
	
	java.util.List<String> paraList_tRunJob_2 = new java.util.ArrayList<String>();
	
	        				paraList_tRunJob_2.add("--father_pid="+pid);
	      			
	        				paraList_tRunJob_2.add("--root_pid="+rootPid);
	      			
	        				paraList_tRunJob_2.add("--father_node=tRunJob_2");
	      			
	        				paraList_tRunJob_2.add("--context=Default");
	      			
		if(enableLogStash){
			paraList_tRunJob_2.add("--audit.enabled="+enableLogStash);
		}
		
	//for feature:10589
	
		paraList_tRunJob_2.add("--stat_port=" + portStats);
	

	if(resuming_logs_dir_path != null){
		paraList_tRunJob_2.add("--resuming_logs_dir_path=" + resuming_logs_dir_path);
	}
	String childResumePath_tRunJob_2 = ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path);
	String tRunJobName_tRunJob_2 = ResumeUtil.getRighttRunJob(resuming_checkpoint_path);
	if("tRunJob_2".equals(tRunJobName_tRunJob_2) && childResumePath_tRunJob_2 != null){
		paraList_tRunJob_2.add("--resuming_checkpoint_path=" + ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path));
	}
	paraList_tRunJob_2.add("--parent_part_launcher=JOB:" + jobName + "/NODE:tRunJob_2");
	
	java.util.Map<String, Object> parentContextMap_tRunJob_2 = new java.util.HashMap<String, Object>();

	

	Object obj_tRunJob_2 = null;

	
		obj_tRunJob_2 = context.infoNombreArchivo;
		if(obj_tRunJob_2!=null) {
			if (obj_tRunJob_2.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_2.add("--context_param infoNombreArchivo=" + ((java.util.Date) obj_tRunJob_2).getTime());
			} else {
				
					paraList_tRunJob_2.add("--context_param infoNombreArchivo=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_2));
					
				
			}
		} else {
			paraList_tRunJob_2.add("--context_param infoNombreArchivo=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_2.put("infoNombreArchivo", obj_tRunJob_2);
	
		obj_tRunJob_2 = context.infoUsuarioIdArchivo;
		if(obj_tRunJob_2!=null) {
			if (obj_tRunJob_2.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_2.add("--context_param infoUsuarioIdArchivo=" + ((java.util.Date) obj_tRunJob_2).getTime());
			} else {
				
					paraList_tRunJob_2.add("--context_param infoUsuarioIdArchivo=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_2));
					
				
			}
		} else {
			paraList_tRunJob_2.add("--context_param infoUsuarioIdArchivo=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_2.put("infoUsuarioIdArchivo", obj_tRunJob_2);
	
		obj_tRunJob_2 = context.infoIdArchivo;
		if(obj_tRunJob_2!=null) {
			if (obj_tRunJob_2.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_2.add("--context_param infoIdArchivo=" + ((java.util.Date) obj_tRunJob_2).getTime());
			} else {
				
					paraList_tRunJob_2.add("--context_param infoIdArchivo=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_2));
					
				
			}
		} else {
			paraList_tRunJob_2.add("--context_param infoIdArchivo=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_2.put("infoIdArchivo", obj_tRunJob_2);
	
		obj_tRunJob_2 = context.infoTipoArchivo;
		if(obj_tRunJob_2!=null) {
			if (obj_tRunJob_2.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_2.add("--context_param infoTipoArchivo=" + ((java.util.Date) obj_tRunJob_2).getTime());
			} else {
				
					paraList_tRunJob_2.add("--context_param infoTipoArchivo=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_2));
					
				
			}
		} else {
			paraList_tRunJob_2.add("--context_param infoTipoArchivo=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_2.put("infoTipoArchivo", obj_tRunJob_2);
	
		obj_tRunJob_2 = context.tipoJobProceso;
		if(obj_tRunJob_2!=null) {
			if (obj_tRunJob_2.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_2.add("--context_param tipoJobProceso=" + ((java.util.Date) obj_tRunJob_2).getTime());
			} else {
				
					paraList_tRunJob_2.add("--context_param tipoJobProceso=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_2));
					
				
			}
		} else {
			paraList_tRunJob_2.add("--context_param tipoJobProceso=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_2.put("tipoJobProceso", obj_tRunJob_2);
	
		obj_tRunJob_2 = context.idProceso;
		if(obj_tRunJob_2!=null) {
			if (obj_tRunJob_2.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_2.add("--context_param idProceso=" + ((java.util.Date) obj_tRunJob_2).getTime());
			} else {
				
					paraList_tRunJob_2.add("--context_param idProceso=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_2));
					
				
			}
		} else {
			paraList_tRunJob_2.add("--context_param idProceso=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_2.put("idProceso", obj_tRunJob_2);
	
		obj_tRunJob_2 = context.tipoProceso;
		if(obj_tRunJob_2!=null) {
			if (obj_tRunJob_2.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_2.add("--context_param tipoProceso=" + ((java.util.Date) obj_tRunJob_2).getTime());
			} else {
				
					paraList_tRunJob_2.add("--context_param tipoProceso=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_2));
					
				
			}
		} else {
			paraList_tRunJob_2.add("--context_param tipoProceso=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_2.put("tipoProceso", obj_tRunJob_2);
	
		obj_tRunJob_2 = context.descripcionProceso;
		if(obj_tRunJob_2!=null) {
			if (obj_tRunJob_2.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_2.add("--context_param descripcionProceso=" + ((java.util.Date) obj_tRunJob_2).getTime());
			} else {
				
					paraList_tRunJob_2.add("--context_param descripcionProceso=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_2));
					
				
			}
		} else {
			paraList_tRunJob_2.add("--context_param descripcionProceso=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_2.put("descripcionProceso", obj_tRunJob_2);
	
		obj_tRunJob_2 = context.fileSystem_Path;
		if(obj_tRunJob_2!=null) {
			if (obj_tRunJob_2.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_2.add("--context_param fileSystem_Path=" + ((java.util.Date) obj_tRunJob_2).getTime());
			} else {
				
					paraList_tRunJob_2.add("--context_param fileSystem_Path=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_2));
					
				
			}
		} else {
			paraList_tRunJob_2.add("--context_param fileSystem_Path=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_2.put("fileSystem_Path", obj_tRunJob_2);
	
		obj_tRunJob_2 = context.fileSystem_Area;
		if(obj_tRunJob_2!=null) {
			if (obj_tRunJob_2.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_2.add("--context_param fileSystem_Area=" + ((java.util.Date) obj_tRunJob_2).getTime());
			} else {
				
					paraList_tRunJob_2.add("--context_param fileSystem_Area=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_2));
					
				
			}
		} else {
			paraList_tRunJob_2.add("--context_param fileSystem_Area=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_2.put("fileSystem_Area", obj_tRunJob_2);
	
		obj_tRunJob_2 = context.oracle_AdditionalParams;
		if(obj_tRunJob_2!=null) {
			if (obj_tRunJob_2.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_2.add("--context_param oracle_AdditionalParams=" + ((java.util.Date) obj_tRunJob_2).getTime());
			} else {
				
					paraList_tRunJob_2.add("--context_param oracle_AdditionalParams=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_2));
					
				
			}
		} else {
			paraList_tRunJob_2.add("--context_param oracle_AdditionalParams=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_2.put("oracle_AdditionalParams", obj_tRunJob_2);
	
		obj_tRunJob_2 = context.oracle_Host;
		if(obj_tRunJob_2!=null) {
			if (obj_tRunJob_2.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_2.add("--context_param oracle_Host=" + ((java.util.Date) obj_tRunJob_2).getTime());
			} else {
				
					paraList_tRunJob_2.add("--context_param oracle_Host=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_2));
					
				
			}
		} else {
			paraList_tRunJob_2.add("--context_param oracle_Host=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_2.put("oracle_Host", obj_tRunJob_2);
	
		obj_tRunJob_2 = context.oracle_Port;
		if(obj_tRunJob_2!=null) {
			if (obj_tRunJob_2.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_2.add("--context_param oracle_Port=" + ((java.util.Date) obj_tRunJob_2).getTime());
			} else {
				
					paraList_tRunJob_2.add("--context_param oracle_Port=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_2));
					
				
			}
		} else {
			paraList_tRunJob_2.add("--context_param oracle_Port=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_2.put("oracle_Port", obj_tRunJob_2);
	
		obj_tRunJob_2 = context.oracle_Sid;
		if(obj_tRunJob_2!=null) {
			if (obj_tRunJob_2.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_2.add("--context_param oracle_Sid=" + ((java.util.Date) obj_tRunJob_2).getTime());
			} else {
				
					paraList_tRunJob_2.add("--context_param oracle_Sid=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_2));
					
				
			}
		} else {
			paraList_tRunJob_2.add("--context_param oracle_Sid=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_2.put("oracle_Sid", obj_tRunJob_2);
	
		obj_tRunJob_2 = context.oracle_ServiceName;
		if(obj_tRunJob_2!=null) {
			if (obj_tRunJob_2.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_2.add("--context_param oracle_ServiceName=" + ((java.util.Date) obj_tRunJob_2).getTime());
			} else {
				
					paraList_tRunJob_2.add("--context_param oracle_ServiceName=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_2));
					
				
			}
		} else {
			paraList_tRunJob_2.add("--context_param oracle_ServiceName=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_2.put("oracle_ServiceName", obj_tRunJob_2);
	
		obj_tRunJob_2 = context.oracle_Schema;
		if(obj_tRunJob_2!=null) {
			if (obj_tRunJob_2.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_2.add("--context_param oracle_Schema=" + ((java.util.Date) obj_tRunJob_2).getTime());
			} else {
				
					paraList_tRunJob_2.add("--context_param oracle_Schema=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_2));
					
				
			}
		} else {
			paraList_tRunJob_2.add("--context_param oracle_Schema=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_2.put("oracle_Schema", obj_tRunJob_2);
	
		obj_tRunJob_2 = context.oracle_User;
		if(obj_tRunJob_2!=null) {
			if (obj_tRunJob_2.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_2.add("--context_param oracle_User=" + ((java.util.Date) obj_tRunJob_2).getTime());
			} else {
				
					paraList_tRunJob_2.add("--context_param oracle_User=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_2));
					
				
			}
		} else {
			paraList_tRunJob_2.add("--context_param oracle_User=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_2.put("oracle_User", obj_tRunJob_2);
	
		obj_tRunJob_2 = context.oracle_Password;
		if(obj_tRunJob_2!=null) {
			if (obj_tRunJob_2.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_2.add("--context_param oracle_Password=" + ((java.util.Date) obj_tRunJob_2).getTime());
			} else {
				
					paraList_tRunJob_2.add("--context_param oracle_Password=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_2));
					
				
			}
		} else {
			paraList_tRunJob_2.add("--context_param oracle_Password=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_2.put("oracle_Password", obj_tRunJob_2);
	
		obj_tRunJob_2 = context.estArchivoActivo;
		if(obj_tRunJob_2!=null) {
			if (obj_tRunJob_2.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_2.add("--context_param estArchivoActivo=" + ((java.util.Date) obj_tRunJob_2).getTime());
			} else {
				
					paraList_tRunJob_2.add("--context_param estArchivoActivo=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_2));
					
				
			}
		} else {
			paraList_tRunJob_2.add("--context_param estArchivoActivo=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_2.put("estArchivoActivo", obj_tRunJob_2);
	
		obj_tRunJob_2 = context.estArchivoInactivo;
		if(obj_tRunJob_2!=null) {
			if (obj_tRunJob_2.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_2.add("--context_param estArchivoInactivo=" + ((java.util.Date) obj_tRunJob_2).getTime());
			} else {
				
					paraList_tRunJob_2.add("--context_param estArchivoInactivo=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_2));
					
				
			}
		} else {
			paraList_tRunJob_2.add("--context_param estArchivoInactivo=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_2.put("estArchivoInactivo", obj_tRunJob_2);
	
		obj_tRunJob_2 = context.estArchivoPausado;
		if(obj_tRunJob_2!=null) {
			if (obj_tRunJob_2.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_2.add("--context_param estArchivoPausado=" + ((java.util.Date) obj_tRunJob_2).getTime());
			} else {
				
					paraList_tRunJob_2.add("--context_param estArchivoPausado=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_2));
					
				
			}
		} else {
			paraList_tRunJob_2.add("--context_param estArchivoPausado=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_2.put("estArchivoPausado", obj_tRunJob_2);
	
		obj_tRunJob_2 = context.estArchivoErrorArchivo;
		if(obj_tRunJob_2!=null) {
			if (obj_tRunJob_2.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_2.add("--context_param estArchivoErrorArchivo=" + ((java.util.Date) obj_tRunJob_2).getTime());
			} else {
				
					paraList_tRunJob_2.add("--context_param estArchivoErrorArchivo=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_2));
					
				
			}
		} else {
			paraList_tRunJob_2.add("--context_param estArchivoErrorArchivo=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_2.put("estArchivoErrorArchivo", obj_tRunJob_2);
	
		obj_tRunJob_2 = context.estArchivoEnProceso;
		if(obj_tRunJob_2!=null) {
			if (obj_tRunJob_2.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_2.add("--context_param estArchivoEnProceso=" + ((java.util.Date) obj_tRunJob_2).getTime());
			} else {
				
					paraList_tRunJob_2.add("--context_param estArchivoEnProceso=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_2));
					
				
			}
		} else {
			paraList_tRunJob_2.add("--context_param estArchivoEnProceso=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_2.put("estArchivoEnProceso", obj_tRunJob_2);
	
		obj_tRunJob_2 = context.estArchivoErrorProcesamiento;
		if(obj_tRunJob_2!=null) {
			if (obj_tRunJob_2.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_2.add("--context_param estArchivoErrorProcesamiento=" + ((java.util.Date) obj_tRunJob_2).getTime());
			} else {
				
					paraList_tRunJob_2.add("--context_param estArchivoErrorProcesamiento=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_2));
					
				
			}
		} else {
			paraList_tRunJob_2.add("--context_param estArchivoErrorProcesamiento=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_2.put("estArchivoErrorProcesamiento", obj_tRunJob_2);
	
		obj_tRunJob_2 = context.estArchivoProcesado;
		if(obj_tRunJob_2!=null) {
			if (obj_tRunJob_2.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_2.add("--context_param estArchivoProcesado=" + ((java.util.Date) obj_tRunJob_2).getTime());
			} else {
				
					paraList_tRunJob_2.add("--context_param estArchivoProcesado=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_2));
					
				
			}
		} else {
			paraList_tRunJob_2.add("--context_param estArchivoProcesado=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_2.put("estArchivoProcesado", obj_tRunJob_2);
	
		obj_tRunJob_2 = context.estArchivoCancelado;
		if(obj_tRunJob_2!=null) {
			if (obj_tRunJob_2.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_2.add("--context_param estArchivoCancelado=" + ((java.util.Date) obj_tRunJob_2).getTime());
			} else {
				
					paraList_tRunJob_2.add("--context_param estArchivoCancelado=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_2));
					
				
			}
		} else {
			paraList_tRunJob_2.add("--context_param estArchivoCancelado=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_2.put("estArchivoCancelado", obj_tRunJob_2);
	
	
		afi_principal.minsaludetapa2novedades_0_2.MinSaludEtapa2Novedades childJob_tRunJob_2 = new afi_principal.minsaludetapa2novedades_0_2.MinSaludEtapa2Novedades();
	    // pass DataSources
	    java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_2 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
	            .get(KEY_DB_DATASOURCES);
	    if (null != talendDataSources_tRunJob_2) {
	        java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_2 = new java.util.HashMap<String, javax.sql.DataSource>();
	        for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_2 : talendDataSources_tRunJob_2
			        .entrySet()) {
	            dataSources_tRunJob_2.put(talendDataSourceEntry_tRunJob_2.getKey(),
	                    talendDataSourceEntry_tRunJob_2.getValue().getRawDataSource());
	        }
	        childJob_tRunJob_2.setDataSources(dataSources_tRunJob_2);
	    }
		  
			childJob_tRunJob_2.parentContextMap = parentContextMap_tRunJob_2;
		  
		
		String[][] childReturn_tRunJob_2 = childJob_tRunJob_2.runJob((String[]) paraList_tRunJob_2.toArray(new String[paraList_tRunJob_2.size()]));
		
            if(childJob_tRunJob_2.getErrorCode() == null){
                globalMap.put("tRunJob_2_CHILD_RETURN_CODE", childJob_tRunJob_2.getStatus() != null && ("failure").equals(childJob_tRunJob_2.getStatus()) ? 1 : 0);
            }else{
                globalMap.put("tRunJob_2_CHILD_RETURN_CODE", childJob_tRunJob_2.getErrorCode());
            }
            if (childJob_tRunJob_2.getExceptionStackTrace() != null) {
                globalMap.put("tRunJob_2_CHILD_EXCEPTION_STACKTRACE", childJob_tRunJob_2.getExceptionStackTrace());
            }
                    errorCode = childJob_tRunJob_2.getErrorCode();
                if (childJob_tRunJob_2.getErrorCode() != null || ("failure").equals(childJob_tRunJob_2.getStatus())) {
                    java.lang.Exception ce_tRunJob_2 = childJob_tRunJob_2.getException();
                    throw new RuntimeException("Child job running failed.\n" + ((ce_tRunJob_2!=null) ? (ce_tRunJob_2.getClass().getName() + ": " + ce_tRunJob_2.getMessage()) : ""));
                }

 


	tos_count_tRunJob_2++;

/**
 * [tRunJob_2 main ] stop
 */
	
	/**
	 * [tRunJob_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tRunJob_2";
	
	

 



/**
 * [tRunJob_2 process_data_begin ] stop
 */
	
	/**
	 * [tRunJob_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tRunJob_2";
	
	

 



/**
 * [tRunJob_2 process_data_end ] stop
 */
	
	/**
	 * [tRunJob_2 end ] start
	 */

	

	
	
	currentComponent="tRunJob_2";
	
	

 

ok_Hash.put("tRunJob_2", true);
end_Hash.put("tRunJob_2", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk24", 0, "ok");
				}
				tFixedFlowInput_4Process(globalMap);



/**
 * [tRunJob_2 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tRunJob_2 finally ] start
	 */

	

	
	
	currentComponent="tRunJob_2";
	
	
	
 



/**
 * [tRunJob_2 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tRunJob_2_SUBPROCESS_STATE", 1);
	}
	


public void tJava_10Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_10_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tJava_10 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_10", false);
		start_Hash.put("tJava_10", System.currentTimeMillis());
		
	
	currentComponent="tJava_10";
	
	
		int tos_count_tJava_10 = 0;
		


try
	{
		int nb_line=((Integer)globalMap.get("tOracleOutput_2_NB_LINE_UPDATED"));
		if(nb_line>0)
			{				
				//****************************************************************************************//
				System.out.println("*** INICIANDO EJECUCION JOB FEDEVIDA ***************************************************");
				//****************************************************************************************//
			}		
	}
catch(Exception e)
	{
		//****************************************************************************************//
		System.out.println("Excepción: " + e);
		//****************************************************************************************//
	}
 



/**
 * [tJava_10 begin ] stop
 */
	
	/**
	 * [tJava_10 main ] start
	 */

	

	
	
	currentComponent="tJava_10";
	
	

 


	tos_count_tJava_10++;

/**
 * [tJava_10 main ] stop
 */
	
	/**
	 * [tJava_10 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_10";
	
	

 



/**
 * [tJava_10 process_data_begin ] stop
 */
	
	/**
	 * [tJava_10 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_10";
	
	

 



/**
 * [tJava_10 process_data_end ] stop
 */
	
	/**
	 * [tJava_10 end ] start
	 */

	

	
	
	currentComponent="tJava_10";
	
	

 

ok_Hash.put("tJava_10", true);
end_Hash.put("tJava_10", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk16", 0, "ok");
				}
				tRunJob_4Process(globalMap);



/**
 * [tJava_10 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_10 finally ] start
	 */

	

	
	
	currentComponent="tJava_10";
	
	

 



/**
 * [tJava_10 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_10_SUBPROCESS_STATE", 1);
	}
	


public void tRunJob_4Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tRunJob_4_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tRunJob_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tRunJob_4", false);
		start_Hash.put("tRunJob_4", System.currentTimeMillis());
		
	
	currentComponent="tRunJob_4";
	
	
		int tos_count_tRunJob_4 = 0;
		


 



/**
 * [tRunJob_4 begin ] stop
 */
	
	/**
	 * [tRunJob_4 main ] start
	 */

	

	
	
	currentComponent="tRunJob_4";
	
	
	java.util.List<String> paraList_tRunJob_4 = new java.util.ArrayList<String>();
	
	        				paraList_tRunJob_4.add("--father_pid="+pid);
	      			
	        				paraList_tRunJob_4.add("--root_pid="+rootPid);
	      			
	        				paraList_tRunJob_4.add("--father_node=tRunJob_4");
	      			
	        				paraList_tRunJob_4.add("--context=Default");
	      			
		if(enableLogStash){
			paraList_tRunJob_4.add("--audit.enabled="+enableLogStash);
		}
		
	//for feature:10589
	
		paraList_tRunJob_4.add("--stat_port=" + portStats);
	

	if(resuming_logs_dir_path != null){
		paraList_tRunJob_4.add("--resuming_logs_dir_path=" + resuming_logs_dir_path);
	}
	String childResumePath_tRunJob_4 = ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path);
	String tRunJobName_tRunJob_4 = ResumeUtil.getRighttRunJob(resuming_checkpoint_path);
	if("tRunJob_4".equals(tRunJobName_tRunJob_4) && childResumePath_tRunJob_4 != null){
		paraList_tRunJob_4.add("--resuming_checkpoint_path=" + ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path));
	}
	paraList_tRunJob_4.add("--parent_part_launcher=JOB:" + jobName + "/NODE:tRunJob_4");
	
	java.util.Map<String, Object> parentContextMap_tRunJob_4 = new java.util.HashMap<String, Object>();

	

	Object obj_tRunJob_4 = null;

	
		obj_tRunJob_4 = context.infoNombreArchivo;
		if(obj_tRunJob_4!=null) {
			if (obj_tRunJob_4.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_4.add("--context_param infoNombreArchivo=" + ((java.util.Date) obj_tRunJob_4).getTime());
			} else {
				
					paraList_tRunJob_4.add("--context_param infoNombreArchivo=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_4));
					
				
			}
		} else {
			paraList_tRunJob_4.add("--context_param infoNombreArchivo=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_4.put("infoNombreArchivo", obj_tRunJob_4);
	
		obj_tRunJob_4 = context.infoUsuarioIdArchivo;
		if(obj_tRunJob_4!=null) {
			if (obj_tRunJob_4.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_4.add("--context_param infoUsuarioIdArchivo=" + ((java.util.Date) obj_tRunJob_4).getTime());
			} else {
				
					paraList_tRunJob_4.add("--context_param infoUsuarioIdArchivo=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_4));
					
				
			}
		} else {
			paraList_tRunJob_4.add("--context_param infoUsuarioIdArchivo=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_4.put("infoUsuarioIdArchivo", obj_tRunJob_4);
	
		obj_tRunJob_4 = context.infoIdArchivo;
		if(obj_tRunJob_4!=null) {
			if (obj_tRunJob_4.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_4.add("--context_param infoIdArchivo=" + ((java.util.Date) obj_tRunJob_4).getTime());
			} else {
				
					paraList_tRunJob_4.add("--context_param infoIdArchivo=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_4));
					
				
			}
		} else {
			paraList_tRunJob_4.add("--context_param infoIdArchivo=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_4.put("infoIdArchivo", obj_tRunJob_4);
	
		obj_tRunJob_4 = context.infoTipoArchivo;
		if(obj_tRunJob_4!=null) {
			if (obj_tRunJob_4.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_4.add("--context_param infoTipoArchivo=" + ((java.util.Date) obj_tRunJob_4).getTime());
			} else {
				
					paraList_tRunJob_4.add("--context_param infoTipoArchivo=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_4));
					
				
			}
		} else {
			paraList_tRunJob_4.add("--context_param infoTipoArchivo=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_4.put("infoTipoArchivo", obj_tRunJob_4);
	
		obj_tRunJob_4 = context.tipoJobProceso;
		if(obj_tRunJob_4!=null) {
			if (obj_tRunJob_4.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_4.add("--context_param tipoJobProceso=" + ((java.util.Date) obj_tRunJob_4).getTime());
			} else {
				
					paraList_tRunJob_4.add("--context_param tipoJobProceso=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_4));
					
				
			}
		} else {
			paraList_tRunJob_4.add("--context_param tipoJobProceso=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_4.put("tipoJobProceso", obj_tRunJob_4);
	
		obj_tRunJob_4 = context.idProceso;
		if(obj_tRunJob_4!=null) {
			if (obj_tRunJob_4.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_4.add("--context_param idProceso=" + ((java.util.Date) obj_tRunJob_4).getTime());
			} else {
				
					paraList_tRunJob_4.add("--context_param idProceso=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_4));
					
				
			}
		} else {
			paraList_tRunJob_4.add("--context_param idProceso=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_4.put("idProceso", obj_tRunJob_4);
	
		obj_tRunJob_4 = context.tipoProceso;
		if(obj_tRunJob_4!=null) {
			if (obj_tRunJob_4.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_4.add("--context_param tipoProceso=" + ((java.util.Date) obj_tRunJob_4).getTime());
			} else {
				
					paraList_tRunJob_4.add("--context_param tipoProceso=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_4));
					
				
			}
		} else {
			paraList_tRunJob_4.add("--context_param tipoProceso=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_4.put("tipoProceso", obj_tRunJob_4);
	
		obj_tRunJob_4 = context.descripcionProceso;
		if(obj_tRunJob_4!=null) {
			if (obj_tRunJob_4.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_4.add("--context_param descripcionProceso=" + ((java.util.Date) obj_tRunJob_4).getTime());
			} else {
				
					paraList_tRunJob_4.add("--context_param descripcionProceso=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_4));
					
				
			}
		} else {
			paraList_tRunJob_4.add("--context_param descripcionProceso=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_4.put("descripcionProceso", obj_tRunJob_4);
	
		obj_tRunJob_4 = context.fileSystem_Path;
		if(obj_tRunJob_4!=null) {
			if (obj_tRunJob_4.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_4.add("--context_param fileSystem_Path=" + ((java.util.Date) obj_tRunJob_4).getTime());
			} else {
				
					paraList_tRunJob_4.add("--context_param fileSystem_Path=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_4));
					
				
			}
		} else {
			paraList_tRunJob_4.add("--context_param fileSystem_Path=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_4.put("fileSystem_Path", obj_tRunJob_4);
	
		obj_tRunJob_4 = context.fileSystem_Area;
		if(obj_tRunJob_4!=null) {
			if (obj_tRunJob_4.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_4.add("--context_param fileSystem_Area=" + ((java.util.Date) obj_tRunJob_4).getTime());
			} else {
				
					paraList_tRunJob_4.add("--context_param fileSystem_Area=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_4));
					
				
			}
		} else {
			paraList_tRunJob_4.add("--context_param fileSystem_Area=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_4.put("fileSystem_Area", obj_tRunJob_4);
	
		obj_tRunJob_4 = context.oracle_AdditionalParams;
		if(obj_tRunJob_4!=null) {
			if (obj_tRunJob_4.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_4.add("--context_param oracle_AdditionalParams=" + ((java.util.Date) obj_tRunJob_4).getTime());
			} else {
				
					paraList_tRunJob_4.add("--context_param oracle_AdditionalParams=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_4));
					
				
			}
		} else {
			paraList_tRunJob_4.add("--context_param oracle_AdditionalParams=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_4.put("oracle_AdditionalParams", obj_tRunJob_4);
	
		obj_tRunJob_4 = context.oracle_Host;
		if(obj_tRunJob_4!=null) {
			if (obj_tRunJob_4.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_4.add("--context_param oracle_Host=" + ((java.util.Date) obj_tRunJob_4).getTime());
			} else {
				
					paraList_tRunJob_4.add("--context_param oracle_Host=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_4));
					
				
			}
		} else {
			paraList_tRunJob_4.add("--context_param oracle_Host=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_4.put("oracle_Host", obj_tRunJob_4);
	
		obj_tRunJob_4 = context.oracle_Port;
		if(obj_tRunJob_4!=null) {
			if (obj_tRunJob_4.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_4.add("--context_param oracle_Port=" + ((java.util.Date) obj_tRunJob_4).getTime());
			} else {
				
					paraList_tRunJob_4.add("--context_param oracle_Port=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_4));
					
				
			}
		} else {
			paraList_tRunJob_4.add("--context_param oracle_Port=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_4.put("oracle_Port", obj_tRunJob_4);
	
		obj_tRunJob_4 = context.oracle_Sid;
		if(obj_tRunJob_4!=null) {
			if (obj_tRunJob_4.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_4.add("--context_param oracle_Sid=" + ((java.util.Date) obj_tRunJob_4).getTime());
			} else {
				
					paraList_tRunJob_4.add("--context_param oracle_Sid=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_4));
					
				
			}
		} else {
			paraList_tRunJob_4.add("--context_param oracle_Sid=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_4.put("oracle_Sid", obj_tRunJob_4);
	
		obj_tRunJob_4 = context.oracle_ServiceName;
		if(obj_tRunJob_4!=null) {
			if (obj_tRunJob_4.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_4.add("--context_param oracle_ServiceName=" + ((java.util.Date) obj_tRunJob_4).getTime());
			} else {
				
					paraList_tRunJob_4.add("--context_param oracle_ServiceName=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_4));
					
				
			}
		} else {
			paraList_tRunJob_4.add("--context_param oracle_ServiceName=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_4.put("oracle_ServiceName", obj_tRunJob_4);
	
		obj_tRunJob_4 = context.oracle_Schema;
		if(obj_tRunJob_4!=null) {
			if (obj_tRunJob_4.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_4.add("--context_param oracle_Schema=" + ((java.util.Date) obj_tRunJob_4).getTime());
			} else {
				
					paraList_tRunJob_4.add("--context_param oracle_Schema=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_4));
					
				
			}
		} else {
			paraList_tRunJob_4.add("--context_param oracle_Schema=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_4.put("oracle_Schema", obj_tRunJob_4);
	
		obj_tRunJob_4 = context.oracle_User;
		if(obj_tRunJob_4!=null) {
			if (obj_tRunJob_4.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_4.add("--context_param oracle_User=" + ((java.util.Date) obj_tRunJob_4).getTime());
			} else {
				
					paraList_tRunJob_4.add("--context_param oracle_User=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_4));
					
				
			}
		} else {
			paraList_tRunJob_4.add("--context_param oracle_User=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_4.put("oracle_User", obj_tRunJob_4);
	
		obj_tRunJob_4 = context.oracle_Password;
		if(obj_tRunJob_4!=null) {
			if (obj_tRunJob_4.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_4.add("--context_param oracle_Password=" + ((java.util.Date) obj_tRunJob_4).getTime());
			} else {
				
					paraList_tRunJob_4.add("--context_param oracle_Password=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_4));
					
				
			}
		} else {
			paraList_tRunJob_4.add("--context_param oracle_Password=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_4.put("oracle_Password", obj_tRunJob_4);
	
		obj_tRunJob_4 = context.estArchivoActivo;
		if(obj_tRunJob_4!=null) {
			if (obj_tRunJob_4.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_4.add("--context_param estArchivoActivo=" + ((java.util.Date) obj_tRunJob_4).getTime());
			} else {
				
					paraList_tRunJob_4.add("--context_param estArchivoActivo=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_4));
					
				
			}
		} else {
			paraList_tRunJob_4.add("--context_param estArchivoActivo=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_4.put("estArchivoActivo", obj_tRunJob_4);
	
		obj_tRunJob_4 = context.estArchivoInactivo;
		if(obj_tRunJob_4!=null) {
			if (obj_tRunJob_4.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_4.add("--context_param estArchivoInactivo=" + ((java.util.Date) obj_tRunJob_4).getTime());
			} else {
				
					paraList_tRunJob_4.add("--context_param estArchivoInactivo=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_4));
					
				
			}
		} else {
			paraList_tRunJob_4.add("--context_param estArchivoInactivo=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_4.put("estArchivoInactivo", obj_tRunJob_4);
	
		obj_tRunJob_4 = context.estArchivoPausado;
		if(obj_tRunJob_4!=null) {
			if (obj_tRunJob_4.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_4.add("--context_param estArchivoPausado=" + ((java.util.Date) obj_tRunJob_4).getTime());
			} else {
				
					paraList_tRunJob_4.add("--context_param estArchivoPausado=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_4));
					
				
			}
		} else {
			paraList_tRunJob_4.add("--context_param estArchivoPausado=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_4.put("estArchivoPausado", obj_tRunJob_4);
	
		obj_tRunJob_4 = context.estArchivoErrorArchivo;
		if(obj_tRunJob_4!=null) {
			if (obj_tRunJob_4.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_4.add("--context_param estArchivoErrorArchivo=" + ((java.util.Date) obj_tRunJob_4).getTime());
			} else {
				
					paraList_tRunJob_4.add("--context_param estArchivoErrorArchivo=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_4));
					
				
			}
		} else {
			paraList_tRunJob_4.add("--context_param estArchivoErrorArchivo=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_4.put("estArchivoErrorArchivo", obj_tRunJob_4);
	
		obj_tRunJob_4 = context.estArchivoEnProceso;
		if(obj_tRunJob_4!=null) {
			if (obj_tRunJob_4.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_4.add("--context_param estArchivoEnProceso=" + ((java.util.Date) obj_tRunJob_4).getTime());
			} else {
				
					paraList_tRunJob_4.add("--context_param estArchivoEnProceso=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_4));
					
				
			}
		} else {
			paraList_tRunJob_4.add("--context_param estArchivoEnProceso=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_4.put("estArchivoEnProceso", obj_tRunJob_4);
	
		obj_tRunJob_4 = context.estArchivoErrorProcesamiento;
		if(obj_tRunJob_4!=null) {
			if (obj_tRunJob_4.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_4.add("--context_param estArchivoErrorProcesamiento=" + ((java.util.Date) obj_tRunJob_4).getTime());
			} else {
				
					paraList_tRunJob_4.add("--context_param estArchivoErrorProcesamiento=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_4));
					
				
			}
		} else {
			paraList_tRunJob_4.add("--context_param estArchivoErrorProcesamiento=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_4.put("estArchivoErrorProcesamiento", obj_tRunJob_4);
	
		obj_tRunJob_4 = context.estArchivoProcesado;
		if(obj_tRunJob_4!=null) {
			if (obj_tRunJob_4.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_4.add("--context_param estArchivoProcesado=" + ((java.util.Date) obj_tRunJob_4).getTime());
			} else {
				
					paraList_tRunJob_4.add("--context_param estArchivoProcesado=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_4));
					
				
			}
		} else {
			paraList_tRunJob_4.add("--context_param estArchivoProcesado=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_4.put("estArchivoProcesado", obj_tRunJob_4);
	
		obj_tRunJob_4 = context.estArchivoCancelado;
		if(obj_tRunJob_4!=null) {
			if (obj_tRunJob_4.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_4.add("--context_param estArchivoCancelado=" + ((java.util.Date) obj_tRunJob_4).getTime());
			} else {
				
					paraList_tRunJob_4.add("--context_param estArchivoCancelado=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_4));
					
				
			}
		} else {
			paraList_tRunJob_4.add("--context_param estArchivoCancelado=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_4.put("estArchivoCancelado", obj_tRunJob_4);
	
	
		afi_principal.fedevida_0_4.Fedevida childJob_tRunJob_4 = new afi_principal.fedevida_0_4.Fedevida();
	    // pass DataSources
	    java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_4 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
	            .get(KEY_DB_DATASOURCES);
	    if (null != talendDataSources_tRunJob_4) {
	        java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_4 = new java.util.HashMap<String, javax.sql.DataSource>();
	        for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_4 : talendDataSources_tRunJob_4
			        .entrySet()) {
	            dataSources_tRunJob_4.put(talendDataSourceEntry_tRunJob_4.getKey(),
	                    talendDataSourceEntry_tRunJob_4.getValue().getRawDataSource());
	        }
	        childJob_tRunJob_4.setDataSources(dataSources_tRunJob_4);
	    }
		  
			childJob_tRunJob_4.parentContextMap = parentContextMap_tRunJob_4;
		  
		
		String[][] childReturn_tRunJob_4 = childJob_tRunJob_4.runJob((String[]) paraList_tRunJob_4.toArray(new String[paraList_tRunJob_4.size()]));
		
            if(childJob_tRunJob_4.getErrorCode() == null){
                globalMap.put("tRunJob_4_CHILD_RETURN_CODE", childJob_tRunJob_4.getStatus() != null && ("failure").equals(childJob_tRunJob_4.getStatus()) ? 1 : 0);
            }else{
                globalMap.put("tRunJob_4_CHILD_RETURN_CODE", childJob_tRunJob_4.getErrorCode());
            }
            if (childJob_tRunJob_4.getExceptionStackTrace() != null) {
                globalMap.put("tRunJob_4_CHILD_EXCEPTION_STACKTRACE", childJob_tRunJob_4.getExceptionStackTrace());
            }

 


	tos_count_tRunJob_4++;

/**
 * [tRunJob_4 main ] stop
 */
	
	/**
	 * [tRunJob_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tRunJob_4";
	
	

 



/**
 * [tRunJob_4 process_data_begin ] stop
 */
	
	/**
	 * [tRunJob_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tRunJob_4";
	
	

 



/**
 * [tRunJob_4 process_data_end ] stop
 */
	
	/**
	 * [tRunJob_4 end ] start
	 */

	

	
	
	currentComponent="tRunJob_4";
	
	

 

ok_Hash.put("tRunJob_4", true);
end_Hash.put("tRunJob_4", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk26", 0, "ok");
				}
				tFixedFlowInput_4Process(globalMap);



/**
 * [tRunJob_4 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tRunJob_4 finally ] start
	 */

	

	
	
	currentComponent="tRunJob_4";
	
	
	
 



/**
 * [tRunJob_4 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tRunJob_4_SUBPROCESS_STATE", 1);
	}
	
    public String resuming_logs_dir_path = null;
    public String resuming_checkpoint_path = null;
    public String parent_part_launcher = null;
    private String resumeEntryMethodName = null;
    private boolean globalResumeTicket = false;

    public boolean watch = false;
    // portStats is null, it means don't execute the statistics
    public Integer portStats = null;
    public int portTraces = 4334;
    public String clientHost;
    public String defaultClientHost = "localhost";
    public String contextStr = "Default";
    public boolean isDefaultContext = true;
    public String pid = "0";
    public String rootPid = null;
    public String fatherPid = null;
    public String fatherNode = null;
    public long startTime = 0;
    public boolean isChildJob = false;
    public String log4jLevel = "";
    
    private boolean enableLogStash;

    private boolean execStat = true;

    private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
        protected java.util.Map<String, String> initialValue() {
            java.util.Map<String,String> threadRunResultMap = new java.util.HashMap<String, String>();
            threadRunResultMap.put("errorCode", null);
            threadRunResultMap.put("status", "");
            return threadRunResultMap;
        };
    };


    protected PropertiesWithType context_param = new PropertiesWithType();
    public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

    public String status= "";
    
    
    private final static java.util.Properties jobInfo = new java.util.Properties();
    private final static java.util.Map<String,String> mdcInfo = new java.util.HashMap<>();
    private final static java.util.concurrent.atomic.AtomicLong subJobPidCounter = new java.util.concurrent.atomic.AtomicLong();


    public static void main(String[] args){
        final ETL_principal ETL_principalClass = new ETL_principal();

        int exitCode = ETL_principalClass.runJobInTOS(args);

        System.exit(exitCode);
    }
	

	
	
	private void getjobInfo() {
		final String TEMPLATE_PATH = "src/main/templates/jobInfo_template.properties";
		final String BUILD_PATH = "../jobInfo.properties";
		final String path = this.getClass().getResource("").getPath();
		if(path.lastIndexOf("target") > 0) {
			final java.io.File templateFile = new java.io.File(
					path.substring(0, path.lastIndexOf("target")).concat(TEMPLATE_PATH));
			if (templateFile.exists()) {
				readJobInfo(templateFile);
				return;
			}
		}
			readJobInfo(new java.io.File(BUILD_PATH));
	}

    private void readJobInfo(java.io.File jobInfoFile){
	
        if(jobInfoFile.exists()) {
            try (java.io.InputStream is = new java.io.FileInputStream(jobInfoFile)) {
            	jobInfo.load(is);
            } catch (IOException e) {
            	 
                
            }
        }
    }


    public String[][] runJob(String[] args) {

        int exitCode = runJobInTOS(args);
        String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

        return bufferValue;
    }

    public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;
    	
        return hastBufferOutput;
    }

    public int runJobInTOS(String[] args) {
	   	// reset status
	   	status = "";
	   	
        String lastStr = "";
        for (String arg : args) {
            if (arg.equalsIgnoreCase("--context_param")) {
                lastStr = arg;
            } else if (lastStr.equals("")) {
                evalParam(arg);
            } else {
                evalParam(lastStr + " " + arg);
                lastStr = "";
            }
        }
        enableLogStash = "true".equalsIgnoreCase(System.getProperty("audit.enabled"));


		
		

        if(clientHost == null) {
            clientHost = defaultClientHost;
        }

        if(pid == null || "0".equals(pid)) {
            pid = TalendString.getAsciiRandomString(6);
        }


        if (rootPid==null) {
            rootPid = pid;
        }


        if (fatherPid==null) {
            fatherPid = pid;
        }else{
            isChildJob = true;
        }

        if (portStats != null) {
            // portStats = -1; //for testing
            if (portStats < 0 || portStats > 65535) {
                // issue:10869, the portStats is invalid, so this client socket can't open
                System.err.println("The statistics socket port " + portStats + " is invalid.");
                execStat = false;
            }
        } else {
            execStat = false;
        }
        boolean inOSGi = routines.system.BundleUtils.inOSGi();

        try {
            java.util.Dictionary<String, Object> jobProperties = null;
            if (inOSGi) {
                jobProperties = routines.system.BundleUtils.getJobProperties(jobName);
    
                if (jobProperties != null && jobProperties.get("context") != null) {
                    contextStr = (String)jobProperties.get("context");
                }
            }
            //call job/subjob with an existing context, like: --context=production. if without this parameter, there will use the default context instead.
            java.io.InputStream inContext = ETL_principal.class.getClassLoader().getResourceAsStream("afi_principal/etl_principal_1_0/contexts/" + contextStr + ".properties");
            if (inContext == null) {
                inContext = ETL_principal.class.getClassLoader().getResourceAsStream("config/contexts/" + contextStr + ".properties");
            }
            if (inContext != null) {
                try {
                    //defaultProps is in order to keep the original context value
                    if(context != null && context.isEmpty()) {
    	                defaultProps.load(inContext);
    	                if (inOSGi && jobProperties != null) {
                             java.util.Enumeration<String> keys = jobProperties.keys();
                             while (keys.hasMoreElements()) {
                                 String propKey = keys.nextElement();
                                 if (defaultProps.containsKey(propKey)) {
                                     defaultProps.put(propKey, (String) jobProperties.get(propKey));
                                 }
                             }
    	                }
    	                context = new ContextProperties(defaultProps);
                    }
                } finally {
                    inContext.close();
                }
            } else if (!isDefaultContext) {
                //print info and job continue to run, for case: context_param is not empty.
                System.err.println("Could not find the context " + contextStr);
            }
            
            if(!context_param.isEmpty()) {
                context.putAll(context_param);
				//set types for params from parentJobs
				for (Object key: context_param.keySet()){
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
            }
            class ContextProcessing {
                private void processContext_0() {
                        context.setContextType("fileSystem_Path", "id_String");
                        if(context.getStringValue("fileSystem_Path") == null) {
                            context.fileSystem_Path = null;
                        } else {
                            context.fileSystem_Path=(String) context.getProperty("fileSystem_Path");
                        }
                        context.setContextType("fileSystem_Area", "id_String");
                        if(context.getStringValue("fileSystem_Area") == null) {
                            context.fileSystem_Area = null;
                        } else {
                            context.fileSystem_Area=(String) context.getProperty("fileSystem_Area");
                        }
                        context.setContextType("archivoSalida", "id_String");
                        if(context.getStringValue("archivoSalida") == null) {
                            context.archivoSalida = null;
                        } else {
                            context.archivoSalida=(String) context.getProperty("archivoSalida");
                        }
                        context.setContextType("mail_UsernameMail", "id_String");
                        if(context.getStringValue("mail_UsernameMail") == null) {
                            context.mail_UsernameMail = null;
                        } else {
                            context.mail_UsernameMail=(String) context.getProperty("mail_UsernameMail");
                        }
                        context.setContextType("mail_SMTPPort", "id_String");
                        if(context.getStringValue("mail_SMTPPort") == null) {
                            context.mail_SMTPPort = null;
                        } else {
                            context.mail_SMTPPort=(String) context.getProperty("mail_SMTPPort");
                        }
                        context.setContextType("mail_PasswordMail", "id_String");
                        if(context.getStringValue("mail_PasswordMail") == null) {
                            context.mail_PasswordMail = null;
                        } else {
                            context.mail_PasswordMail=(String) context.getProperty("mail_PasswordMail");
                        }
                        context.setContextType("mail_SMTPHost", "id_String");
                        if(context.getStringValue("mail_SMTPHost") == null) {
                            context.mail_SMTPHost = null;
                        } else {
                            context.mail_SMTPHost=(String) context.getProperty("mail_SMTPHost");
                        }
                        context.setContextType("oracle_Password", "id_String");
                        if(context.getStringValue("oracle_Password") == null) {
                            context.oracle_Password = null;
                        } else {
                            context.oracle_Password=(String) context.getProperty("oracle_Password");
                        }
                        context.setContextType("oracle_User", "id_String");
                        if(context.getStringValue("oracle_User") == null) {
                            context.oracle_User = null;
                        } else {
                            context.oracle_User=(String) context.getProperty("oracle_User");
                        }
                        context.setContextType("oracle_ServiceName", "id_String");
                        if(context.getStringValue("oracle_ServiceName") == null) {
                            context.oracle_ServiceName = null;
                        } else {
                            context.oracle_ServiceName=(String) context.getProperty("oracle_ServiceName");
                        }
                        context.setContextType("oracle_Schema", "id_String");
                        if(context.getStringValue("oracle_Schema") == null) {
                            context.oracle_Schema = null;
                        } else {
                            context.oracle_Schema=(String) context.getProperty("oracle_Schema");
                        }
                        context.setContextType("oracle_Port", "id_String");
                        if(context.getStringValue("oracle_Port") == null) {
                            context.oracle_Port = null;
                        } else {
                            context.oracle_Port=(String) context.getProperty("oracle_Port");
                        }
                        context.setContextType("oracle_AdditionalParams", "id_String");
                        if(context.getStringValue("oracle_AdditionalParams") == null) {
                            context.oracle_AdditionalParams = null;
                        } else {
                            context.oracle_AdditionalParams=(String) context.getProperty("oracle_AdditionalParams");
                        }
                        context.setContextType("oracle_Host", "id_String");
                        if(context.getStringValue("oracle_Host") == null) {
                            context.oracle_Host = null;
                        } else {
                            context.oracle_Host=(String) context.getProperty("oracle_Host");
                        }
                        context.setContextType("oracle_Sid", "id_String");
                        if(context.getStringValue("oracle_Sid") == null) {
                            context.oracle_Sid = null;
                        } else {
                            context.oracle_Sid=(String) context.getProperty("oracle_Sid");
                        }
                        context.setContextType("estArchivoInactivo", "id_Integer");
                        if(context.getStringValue("estArchivoInactivo") == null) {
                            context.estArchivoInactivo = null;
                        } else {
                            try{
                                context.estArchivoInactivo=routines.system.ParserUtils.parseTo_Integer (context.getProperty("estArchivoInactivo"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "estArchivoInactivo", e.getMessage()));
                                context.estArchivoInactivo=null;
                            }
                        }
                        context.setContextType("estArchivoProcesado", "id_Integer");
                        if(context.getStringValue("estArchivoProcesado") == null) {
                            context.estArchivoProcesado = null;
                        } else {
                            try{
                                context.estArchivoProcesado=routines.system.ParserUtils.parseTo_Integer (context.getProperty("estArchivoProcesado"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "estArchivoProcesado", e.getMessage()));
                                context.estArchivoProcesado=null;
                            }
                        }
                        context.setContextType("estArchivoEnProceso", "id_Integer");
                        if(context.getStringValue("estArchivoEnProceso") == null) {
                            context.estArchivoEnProceso = null;
                        } else {
                            try{
                                context.estArchivoEnProceso=routines.system.ParserUtils.parseTo_Integer (context.getProperty("estArchivoEnProceso"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "estArchivoEnProceso", e.getMessage()));
                                context.estArchivoEnProceso=null;
                            }
                        }
                        context.setContextType("estArchivoCancelado", "id_Integer");
                        if(context.getStringValue("estArchivoCancelado") == null) {
                            context.estArchivoCancelado = null;
                        } else {
                            try{
                                context.estArchivoCancelado=routines.system.ParserUtils.parseTo_Integer (context.getProperty("estArchivoCancelado"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "estArchivoCancelado", e.getMessage()));
                                context.estArchivoCancelado=null;
                            }
                        }
                        context.setContextType("estArchivoActivo", "id_Integer");
                        if(context.getStringValue("estArchivoActivo") == null) {
                            context.estArchivoActivo = null;
                        } else {
                            try{
                                context.estArchivoActivo=routines.system.ParserUtils.parseTo_Integer (context.getProperty("estArchivoActivo"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "estArchivoActivo", e.getMessage()));
                                context.estArchivoActivo=null;
                            }
                        }
                        context.setContextType("estArchivoPausado", "id_Integer");
                        if(context.getStringValue("estArchivoPausado") == null) {
                            context.estArchivoPausado = null;
                        } else {
                            try{
                                context.estArchivoPausado=routines.system.ParserUtils.parseTo_Integer (context.getProperty("estArchivoPausado"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "estArchivoPausado", e.getMessage()));
                                context.estArchivoPausado=null;
                            }
                        }
                        context.setContextType("estArchivoErrorArchivo", "id_Integer");
                        if(context.getStringValue("estArchivoErrorArchivo") == null) {
                            context.estArchivoErrorArchivo = null;
                        } else {
                            try{
                                context.estArchivoErrorArchivo=routines.system.ParserUtils.parseTo_Integer (context.getProperty("estArchivoErrorArchivo"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "estArchivoErrorArchivo", e.getMessage()));
                                context.estArchivoErrorArchivo=null;
                            }
                        }
                        context.setContextType("estArchivoErrorProcesamiento", "id_Integer");
                        if(context.getStringValue("estArchivoErrorProcesamiento") == null) {
                            context.estArchivoErrorProcesamiento = null;
                        } else {
                            try{
                                context.estArchivoErrorProcesamiento=routines.system.ParserUtils.parseTo_Integer (context.getProperty("estArchivoErrorProcesamiento"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "estArchivoErrorProcesamiento", e.getMessage()));
                                context.estArchivoErrorProcesamiento=null;
                            }
                        }
                        context.setContextType("estRegistroActivo", "id_Integer");
                        if(context.getStringValue("estRegistroActivo") == null) {
                            context.estRegistroActivo = null;
                        } else {
                            try{
                                context.estRegistroActivo=routines.system.ParserUtils.parseTo_Integer (context.getProperty("estRegistroActivo"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "estRegistroActivo", e.getMessage()));
                                context.estRegistroActivo=null;
                            }
                        }
                        context.setContextType("estRegistroInactivo", "id_Integer");
                        if(context.getStringValue("estRegistroInactivo") == null) {
                            context.estRegistroInactivo = null;
                        } else {
                            try{
                                context.estRegistroInactivo=routines.system.ParserUtils.parseTo_Integer (context.getProperty("estRegistroInactivo"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "estRegistroInactivo", e.getMessage()));
                                context.estRegistroInactivo=null;
                            }
                        }
                        context.setContextType("infoNombreArchivo", "id_String");
                        if(context.getStringValue("infoNombreArchivo") == null) {
                            context.infoNombreArchivo = null;
                        } else {
                            context.infoNombreArchivo=(String) context.getProperty("infoNombreArchivo");
                        }
                        context.setContextType("infoTipoArchivoRespuesta", "id_Integer");
                        if(context.getStringValue("infoTipoArchivoRespuesta") == null) {
                            context.infoTipoArchivoRespuesta = null;
                        } else {
                            try{
                                context.infoTipoArchivoRespuesta=routines.system.ParserUtils.parseTo_Integer (context.getProperty("infoTipoArchivoRespuesta"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "infoTipoArchivoRespuesta", e.getMessage()));
                                context.infoTipoArchivoRespuesta=null;
                            }
                        }
                        context.setContextType("infoIdArchivo", "id_Integer");
                        if(context.getStringValue("infoIdArchivo") == null) {
                            context.infoIdArchivo = null;
                        } else {
                            try{
                                context.infoIdArchivo=routines.system.ParserUtils.parseTo_Integer (context.getProperty("infoIdArchivo"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "infoIdArchivo", e.getMessage()));
                                context.infoIdArchivo=null;
                            }
                        }
                        context.setContextType("infoUsuarioIdArchivo", "id_Integer");
                        if(context.getStringValue("infoUsuarioIdArchivo") == null) {
                            context.infoUsuarioIdArchivo = null;
                        } else {
                            try{
                                context.infoUsuarioIdArchivo=routines.system.ParserUtils.parseTo_Integer (context.getProperty("infoUsuarioIdArchivo"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "infoUsuarioIdArchivo", e.getMessage()));
                                context.infoUsuarioIdArchivo=null;
                            }
                        }
                        context.setContextType("infoTipoArchivo", "id_Integer");
                        if(context.getStringValue("infoTipoArchivo") == null) {
                            context.infoTipoArchivo = null;
                        } else {
                            try{
                                context.infoTipoArchivo=routines.system.ParserUtils.parseTo_Integer (context.getProperty("infoTipoArchivo"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "infoTipoArchivo", e.getMessage()));
                                context.infoTipoArchivo=null;
                            }
                        }
                        context.setContextType("tipoArchivoMinSaludEtapa2Novedades", "id_Integer");
                        if(context.getStringValue("tipoArchivoMinSaludEtapa2Novedades") == null) {
                            context.tipoArchivoMinSaludEtapa2Novedades = null;
                        } else {
                            try{
                                context.tipoArchivoMinSaludEtapa2Novedades=routines.system.ParserUtils.parseTo_Integer (context.getProperty("tipoArchivoMinSaludEtapa2Novedades"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "tipoArchivoMinSaludEtapa2Novedades", e.getMessage()));
                                context.tipoArchivoMinSaludEtapa2Novedades=null;
                            }
                        }
                        context.setContextType("tipoArchivoMinSaludEtapa3MultiafiliacionGenerado", "id_Integer");
                        if(context.getStringValue("tipoArchivoMinSaludEtapa3MultiafiliacionGenerado") == null) {
                            context.tipoArchivoMinSaludEtapa3MultiafiliacionGenerado = null;
                        } else {
                            try{
                                context.tipoArchivoMinSaludEtapa3MultiafiliacionGenerado=routines.system.ParserUtils.parseTo_Integer (context.getProperty("tipoArchivoMinSaludEtapa3MultiafiliacionGenerado"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "tipoArchivoMinSaludEtapa3MultiafiliacionGenerado", e.getMessage()));
                                context.tipoArchivoMinSaludEtapa3MultiafiliacionGenerado=null;
                            }
                        }
                        context.setContextType("tipoArchivoCruceErrores", "id_Integer");
                        if(context.getStringValue("tipoArchivoCruceErrores") == null) {
                            context.tipoArchivoCruceErrores = null;
                        } else {
                            try{
                                context.tipoArchivoCruceErrores=routines.system.ParserUtils.parseTo_Integer (context.getProperty("tipoArchivoCruceErrores"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "tipoArchivoCruceErrores", e.getMessage()));
                                context.tipoArchivoCruceErrores=null;
                            }
                        }
                        context.setContextType("tipoArchivoMinSaludEtapa2NuevosRegistrosGenerado", "id_Integer");
                        if(context.getStringValue("tipoArchivoMinSaludEtapa2NuevosRegistrosGenerado") == null) {
                            context.tipoArchivoMinSaludEtapa2NuevosRegistrosGenerado = null;
                        } else {
                            try{
                                context.tipoArchivoMinSaludEtapa2NuevosRegistrosGenerado=routines.system.ParserUtils.parseTo_Integer (context.getProperty("tipoArchivoMinSaludEtapa2NuevosRegistrosGenerado"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "tipoArchivoMinSaludEtapa2NuevosRegistrosGenerado", e.getMessage()));
                                context.tipoArchivoMinSaludEtapa2NuevosRegistrosGenerado=null;
                            }
                        }
                        context.setContextType("tipoArchivoMinSaludEtapa3Multiafiliacion", "id_Integer");
                        if(context.getStringValue("tipoArchivoMinSaludEtapa3Multiafiliacion") == null) {
                            context.tipoArchivoMinSaludEtapa3Multiafiliacion = null;
                        } else {
                            try{
                                context.tipoArchivoMinSaludEtapa3Multiafiliacion=routines.system.ParserUtils.parseTo_Integer (context.getProperty("tipoArchivoMinSaludEtapa3Multiafiliacion"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "tipoArchivoMinSaludEtapa3Multiafiliacion", e.getMessage()));
                                context.tipoArchivoMinSaludEtapa3Multiafiliacion=null;
                            }
                        }
                        context.setContextType("tipoArchivoFedevidaGenerado", "id_Integer");
                        if(context.getStringValue("tipoArchivoFedevidaGenerado") == null) {
                            context.tipoArchivoFedevidaGenerado = null;
                        } else {
                            try{
                                context.tipoArchivoFedevidaGenerado=routines.system.ParserUtils.parseTo_Integer (context.getProperty("tipoArchivoFedevidaGenerado"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "tipoArchivoFedevidaGenerado", e.getMessage()));
                                context.tipoArchivoFedevidaGenerado=null;
                            }
                        }
                        context.setContextType("tipoArchivoEntesGenerado", "id_Integer");
                        if(context.getStringValue("tipoArchivoEntesGenerado") == null) {
                            context.tipoArchivoEntesGenerado = null;
                        } else {
                            try{
                                context.tipoArchivoEntesGenerado=routines.system.ParserUtils.parseTo_Integer (context.getProperty("tipoArchivoEntesGenerado"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "tipoArchivoEntesGenerado", e.getMessage()));
                                context.tipoArchivoEntesGenerado=null;
                            }
                        }
                        context.setContextType("tipoArchivoEntesTerritoriales", "id_Integer");
                        if(context.getStringValue("tipoArchivoEntesTerritoriales") == null) {
                            context.tipoArchivoEntesTerritoriales = null;
                        } else {
                            try{
                                context.tipoArchivoEntesTerritoriales=routines.system.ParserUtils.parseTo_Integer (context.getProperty("tipoArchivoEntesTerritoriales"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "tipoArchivoEntesTerritoriales", e.getMessage()));
                                context.tipoArchivoEntesTerritoriales=null;
                            }
                        }
                        context.setContextType("tipoArchivoCompendioSaludGenerado", "id_Integer");
                        if(context.getStringValue("tipoArchivoCompendioSaludGenerado") == null) {
                            context.tipoArchivoCompendioSaludGenerado = null;
                        } else {
                            try{
                                context.tipoArchivoCompendioSaludGenerado=routines.system.ParserUtils.parseTo_Integer (context.getProperty("tipoArchivoCompendioSaludGenerado"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "tipoArchivoCompendioSaludGenerado", e.getMessage()));
                                context.tipoArchivoCompendioSaludGenerado=null;
                            }
                        }
                        context.setContextType("tipoArchivoCompendioSalud", "id_Integer");
                        if(context.getStringValue("tipoArchivoCompendioSalud") == null) {
                            context.tipoArchivoCompendioSalud = null;
                        } else {
                            try{
                                context.tipoArchivoCompendioSalud=routines.system.ParserUtils.parseTo_Integer (context.getProperty("tipoArchivoCompendioSalud"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "tipoArchivoCompendioSalud", e.getMessage()));
                                context.tipoArchivoCompendioSalud=null;
                            }
                        }
                        context.setContextType("tipoArchivoMinSaludEtapa2NuevosRegistros", "id_Integer");
                        if(context.getStringValue("tipoArchivoMinSaludEtapa2NuevosRegistros") == null) {
                            context.tipoArchivoMinSaludEtapa2NuevosRegistros = null;
                        } else {
                            try{
                                context.tipoArchivoMinSaludEtapa2NuevosRegistros=routines.system.ParserUtils.parseTo_Integer (context.getProperty("tipoArchivoMinSaludEtapa2NuevosRegistros"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "tipoArchivoMinSaludEtapa2NuevosRegistros", e.getMessage()));
                                context.tipoArchivoMinSaludEtapa2NuevosRegistros=null;
                            }
                        }
                        context.setContextType("tipoArchivoFedevida", "id_Integer");
                        if(context.getStringValue("tipoArchivoFedevida") == null) {
                            context.tipoArchivoFedevida = null;
                        } else {
                            try{
                                context.tipoArchivoFedevida=routines.system.ParserUtils.parseTo_Integer (context.getProperty("tipoArchivoFedevida"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "tipoArchivoFedevida", e.getMessage()));
                                context.tipoArchivoFedevida=null;
                            }
                        }
                        context.setContextType("tipoArchivoMinSaludEtapa2NovedadesGenerado", "id_Integer");
                        if(context.getStringValue("tipoArchivoMinSaludEtapa2NovedadesGenerado") == null) {
                            context.tipoArchivoMinSaludEtapa2NovedadesGenerado = null;
                        } else {
                            try{
                                context.tipoArchivoMinSaludEtapa2NovedadesGenerado=routines.system.ParserUtils.parseTo_Integer (context.getProperty("tipoArchivoMinSaludEtapa2NovedadesGenerado"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "tipoArchivoMinSaludEtapa2NovedadesGenerado", e.getMessage()));
                                context.tipoArchivoMinSaludEtapa2NovedadesGenerado=null;
                            }
                        }
                        context.setContextType("suma", "id_Integer");
                        if(context.getStringValue("suma") == null) {
                            context.suma = null;
                        } else {
                            try{
                                context.suma=routines.system.ParserUtils.parseTo_Integer (context.getProperty("suma"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "suma", e.getMessage()));
                                context.suma=null;
                            }
                        }
                        context.setContextType("archivoConfiguracion", "id_String");
                        if(context.getStringValue("archivoConfiguracion") == null) {
                            context.archivoConfiguracion = null;
                        } else {
                            context.archivoConfiguracion=(String) context.getProperty("archivoConfiguracion");
                        }
                        context.setContextType("auxAumentoRegistros", "id_Integer");
                        if(context.getStringValue("auxAumentoRegistros") == null) {
                            context.auxAumentoRegistros = null;
                        } else {
                            try{
                                context.auxAumentoRegistros=routines.system.ParserUtils.parseTo_Integer (context.getProperty("auxAumentoRegistros"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "auxAumentoRegistros", e.getMessage()));
                                context.auxAumentoRegistros=null;
                            }
                        }
                        context.setContextType("auxRango", "id_String");
                        if(context.getStringValue("auxRango") == null) {
                            context.auxRango = null;
                        } else {
                            context.auxRango=(String) context.getProperty("auxRango");
                        }
                        context.setContextType("auxAfiliadosCriterioInact", "id_String");
                        if(context.getStringValue("auxAfiliadosCriterioInact") == null) {
                            context.auxAfiliadosCriterioInact = null;
                        } else {
                            context.auxAfiliadosCriterioInact=(String) context.getProperty("auxAfiliadosCriterioInact");
                        }
                        context.setContextType("auxCriterioActual", "id_Integer");
                        if(context.getStringValue("auxCriterioActual") == null) {
                            context.auxCriterioActual = null;
                        } else {
                            try{
                                context.auxCriterioActual=routines.system.ParserUtils.parseTo_Integer (context.getProperty("auxCriterioActual"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "auxCriterioActual", e.getMessage()));
                                context.auxCriterioActual=null;
                            }
                        }
                        context.setContextType("auxPrimerLoop", "id_Boolean");
                        if(context.getStringValue("auxPrimerLoop") == null) {
                            context.auxPrimerLoop = null;
                        } else {
                            try{
                                context.auxPrimerLoop=routines.system.ParserUtils.parseTo_Boolean (context.getProperty("auxPrimerLoop"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "auxPrimerLoop", e.getMessage()));
                                context.auxPrimerLoop=null;
                            }
                        }
                        context.setContextType("auxPosicionRegistros", "id_Integer");
                        if(context.getStringValue("auxPosicionRegistros") == null) {
                            context.auxPosicionRegistros = null;
                        } else {
                            try{
                                context.auxPosicionRegistros=routines.system.ParserUtils.parseTo_Integer (context.getProperty("auxPosicionRegistros"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "auxPosicionRegistros", e.getMessage()));
                                context.auxPosicionRegistros=null;
                            }
                        }
                        context.setContextType("auxAfiliadosCriterio", "id_String");
                        if(context.getStringValue("auxAfiliadosCriterio") == null) {
                            context.auxAfiliadosCriterio = null;
                        } else {
                            context.auxAfiliadosCriterio=(String) context.getProperty("auxAfiliadosCriterio");
                        }
                        context.setContextType("auxAfiliadosCriterioAct", "id_String");
                        if(context.getStringValue("auxAfiliadosCriterioAct") == null) {
                            context.auxAfiliadosCriterioAct = null;
                        } else {
                            context.auxAfiliadosCriterioAct=(String) context.getProperty("auxAfiliadosCriterioAct");
                        }
                        context.setContextType("tipoJobEntesTerritoriales", "id_Integer");
                        if(context.getStringValue("tipoJobEntesTerritoriales") == null) {
                            context.tipoJobEntesTerritoriales = null;
                        } else {
                            try{
                                context.tipoJobEntesTerritoriales=routines.system.ParserUtils.parseTo_Integer (context.getProperty("tipoJobEntesTerritoriales"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "tipoJobEntesTerritoriales", e.getMessage()));
                                context.tipoJobEntesTerritoriales=null;
                            }
                        }
                        context.setContextType("tipoJobMinsaludEtapa2Novedades", "id_Integer");
                        if(context.getStringValue("tipoJobMinsaludEtapa2Novedades") == null) {
                            context.tipoJobMinsaludEtapa2Novedades = null;
                        } else {
                            try{
                                context.tipoJobMinsaludEtapa2Novedades=routines.system.ParserUtils.parseTo_Integer (context.getProperty("tipoJobMinsaludEtapa2Novedades"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "tipoJobMinsaludEtapa2Novedades", e.getMessage()));
                                context.tipoJobMinsaludEtapa2Novedades=null;
                            }
                        }
                        context.setContextType("tipoJobMinsaludEtapa2NuevosRegistros", "id_Integer");
                        if(context.getStringValue("tipoJobMinsaludEtapa2NuevosRegistros") == null) {
                            context.tipoJobMinsaludEtapa2NuevosRegistros = null;
                        } else {
                            try{
                                context.tipoJobMinsaludEtapa2NuevosRegistros=routines.system.ParserUtils.parseTo_Integer (context.getProperty("tipoJobMinsaludEtapa2NuevosRegistros"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "tipoJobMinsaludEtapa2NuevosRegistros", e.getMessage()));
                                context.tipoJobMinsaludEtapa2NuevosRegistros=null;
                            }
                        }
                        context.setContextType("tipoJobMinsaludEtapa3Multiafiliacion", "id_Integer");
                        if(context.getStringValue("tipoJobMinsaludEtapa3Multiafiliacion") == null) {
                            context.tipoJobMinsaludEtapa3Multiafiliacion = null;
                        } else {
                            try{
                                context.tipoJobMinsaludEtapa3Multiafiliacion=routines.system.ParserUtils.parseTo_Integer (context.getProperty("tipoJobMinsaludEtapa3Multiafiliacion"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "tipoJobMinsaludEtapa3Multiafiliacion", e.getMessage()));
                                context.tipoJobMinsaludEtapa3Multiafiliacion=null;
                            }
                        }
                        context.setContextType("tipoJobFedevida", "id_Integer");
                        if(context.getStringValue("tipoJobFedevida") == null) {
                            context.tipoJobFedevida = null;
                        } else {
                            try{
                                context.tipoJobFedevida=routines.system.ParserUtils.parseTo_Integer (context.getProperty("tipoJobFedevida"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "tipoJobFedevida", e.getMessage()));
                                context.tipoJobFedevida=null;
                            }
                        }
                        context.setContextType("descripcionProceso", "id_String");
                        if(context.getStringValue("descripcionProceso") == null) {
                            context.descripcionProceso = null;
                        } else {
                            context.descripcionProceso=(String) context.getProperty("descripcionProceso");
                        }
                        context.setContextType("idProceso", "id_Integer");
                        if(context.getStringValue("idProceso") == null) {
                            context.idProceso = null;
                        } else {
                            try{
                                context.idProceso=routines.system.ParserUtils.parseTo_Integer (context.getProperty("idProceso"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "idProceso", e.getMessage()));
                                context.idProceso=null;
                            }
                        }
                        context.setContextType("tipoJobProceso", "id_Integer");
                        if(context.getStringValue("tipoJobProceso") == null) {
                            context.tipoJobProceso = null;
                        } else {
                            try{
                                context.tipoJobProceso=routines.system.ParserUtils.parseTo_Integer (context.getProperty("tipoJobProceso"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "tipoJobProceso", e.getMessage()));
                                context.tipoJobProceso=null;
                            }
                        }
                        context.setContextType("tipoProceso", "id_Integer");
                        if(context.getStringValue("tipoProceso") == null) {
                            context.tipoProceso = null;
                        } else {
                            try{
                                context.tipoProceso=routines.system.ParserUtils.parseTo_Integer (context.getProperty("tipoProceso"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "tipoProceso", e.getMessage()));
                                context.tipoProceso=null;
                            }
                        }
                        context.setContextType("tipoJobCompendioSalud", "id_Integer");
                        if(context.getStringValue("tipoJobCompendioSalud") == null) {
                            context.tipoJobCompendioSalud = null;
                        } else {
                            try{
                                context.tipoJobCompendioSalud=routines.system.ParserUtils.parseTo_Integer (context.getProperty("tipoJobCompendioSalud"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "tipoJobCompendioSalud", e.getMessage()));
                                context.tipoJobCompendioSalud=null;
                            }
                        }
                } 
                public void processAllContext() {
                        processContext_0();
                }
            }

            new ContextProcessing().processAllContext();
        } catch (java.io.IOException ie) {
            System.err.println("Could not load context "+contextStr);
            ie.printStackTrace();
        }

        // get context value from parent directly
        if (parentContextMap != null && !parentContextMap.isEmpty()) {if (parentContextMap.containsKey("fileSystem_Path")) {
                context.fileSystem_Path = (String) parentContextMap.get("fileSystem_Path");
            }if (parentContextMap.containsKey("fileSystem_Area")) {
                context.fileSystem_Area = (String) parentContextMap.get("fileSystem_Area");
            }if (parentContextMap.containsKey("archivoSalida")) {
                context.archivoSalida = (String) parentContextMap.get("archivoSalida");
            }if (parentContextMap.containsKey("mail_UsernameMail")) {
                context.mail_UsernameMail = (String) parentContextMap.get("mail_UsernameMail");
            }if (parentContextMap.containsKey("mail_SMTPPort")) {
                context.mail_SMTPPort = (String) parentContextMap.get("mail_SMTPPort");
            }if (parentContextMap.containsKey("mail_PasswordMail")) {
                context.mail_PasswordMail = (String) parentContextMap.get("mail_PasswordMail");
            }if (parentContextMap.containsKey("mail_SMTPHost")) {
                context.mail_SMTPHost = (String) parentContextMap.get("mail_SMTPHost");
            }if (parentContextMap.containsKey("oracle_Password")) {
                context.oracle_Password = (String) parentContextMap.get("oracle_Password");
            }if (parentContextMap.containsKey("oracle_User")) {
                context.oracle_User = (String) parentContextMap.get("oracle_User");
            }if (parentContextMap.containsKey("oracle_ServiceName")) {
                context.oracle_ServiceName = (String) parentContextMap.get("oracle_ServiceName");
            }if (parentContextMap.containsKey("oracle_Schema")) {
                context.oracle_Schema = (String) parentContextMap.get("oracle_Schema");
            }if (parentContextMap.containsKey("oracle_Port")) {
                context.oracle_Port = (String) parentContextMap.get("oracle_Port");
            }if (parentContextMap.containsKey("oracle_AdditionalParams")) {
                context.oracle_AdditionalParams = (String) parentContextMap.get("oracle_AdditionalParams");
            }if (parentContextMap.containsKey("oracle_Host")) {
                context.oracle_Host = (String) parentContextMap.get("oracle_Host");
            }if (parentContextMap.containsKey("oracle_Sid")) {
                context.oracle_Sid = (String) parentContextMap.get("oracle_Sid");
            }if (parentContextMap.containsKey("estArchivoInactivo")) {
                context.estArchivoInactivo = (Integer) parentContextMap.get("estArchivoInactivo");
            }if (parentContextMap.containsKey("estArchivoProcesado")) {
                context.estArchivoProcesado = (Integer) parentContextMap.get("estArchivoProcesado");
            }if (parentContextMap.containsKey("estArchivoEnProceso")) {
                context.estArchivoEnProceso = (Integer) parentContextMap.get("estArchivoEnProceso");
            }if (parentContextMap.containsKey("estArchivoCancelado")) {
                context.estArchivoCancelado = (Integer) parentContextMap.get("estArchivoCancelado");
            }if (parentContextMap.containsKey("estArchivoActivo")) {
                context.estArchivoActivo = (Integer) parentContextMap.get("estArchivoActivo");
            }if (parentContextMap.containsKey("estArchivoPausado")) {
                context.estArchivoPausado = (Integer) parentContextMap.get("estArchivoPausado");
            }if (parentContextMap.containsKey("estArchivoErrorArchivo")) {
                context.estArchivoErrorArchivo = (Integer) parentContextMap.get("estArchivoErrorArchivo");
            }if (parentContextMap.containsKey("estArchivoErrorProcesamiento")) {
                context.estArchivoErrorProcesamiento = (Integer) parentContextMap.get("estArchivoErrorProcesamiento");
            }if (parentContextMap.containsKey("estRegistroActivo")) {
                context.estRegistroActivo = (Integer) parentContextMap.get("estRegistroActivo");
            }if (parentContextMap.containsKey("estRegistroInactivo")) {
                context.estRegistroInactivo = (Integer) parentContextMap.get("estRegistroInactivo");
            }if (parentContextMap.containsKey("infoNombreArchivo")) {
                context.infoNombreArchivo = (String) parentContextMap.get("infoNombreArchivo");
            }if (parentContextMap.containsKey("infoTipoArchivoRespuesta")) {
                context.infoTipoArchivoRespuesta = (Integer) parentContextMap.get("infoTipoArchivoRespuesta");
            }if (parentContextMap.containsKey("infoIdArchivo")) {
                context.infoIdArchivo = (Integer) parentContextMap.get("infoIdArchivo");
            }if (parentContextMap.containsKey("infoUsuarioIdArchivo")) {
                context.infoUsuarioIdArchivo = (Integer) parentContextMap.get("infoUsuarioIdArchivo");
            }if (parentContextMap.containsKey("infoTipoArchivo")) {
                context.infoTipoArchivo = (Integer) parentContextMap.get("infoTipoArchivo");
            }if (parentContextMap.containsKey("tipoArchivoMinSaludEtapa2Novedades")) {
                context.tipoArchivoMinSaludEtapa2Novedades = (Integer) parentContextMap.get("tipoArchivoMinSaludEtapa2Novedades");
            }if (parentContextMap.containsKey("tipoArchivoMinSaludEtapa3MultiafiliacionGenerado")) {
                context.tipoArchivoMinSaludEtapa3MultiafiliacionGenerado = (Integer) parentContextMap.get("tipoArchivoMinSaludEtapa3MultiafiliacionGenerado");
            }if (parentContextMap.containsKey("tipoArchivoCruceErrores")) {
                context.tipoArchivoCruceErrores = (Integer) parentContextMap.get("tipoArchivoCruceErrores");
            }if (parentContextMap.containsKey("tipoArchivoMinSaludEtapa2NuevosRegistrosGenerado")) {
                context.tipoArchivoMinSaludEtapa2NuevosRegistrosGenerado = (Integer) parentContextMap.get("tipoArchivoMinSaludEtapa2NuevosRegistrosGenerado");
            }if (parentContextMap.containsKey("tipoArchivoMinSaludEtapa3Multiafiliacion")) {
                context.tipoArchivoMinSaludEtapa3Multiafiliacion = (Integer) parentContextMap.get("tipoArchivoMinSaludEtapa3Multiafiliacion");
            }if (parentContextMap.containsKey("tipoArchivoFedevidaGenerado")) {
                context.tipoArchivoFedevidaGenerado = (Integer) parentContextMap.get("tipoArchivoFedevidaGenerado");
            }if (parentContextMap.containsKey("tipoArchivoEntesGenerado")) {
                context.tipoArchivoEntesGenerado = (Integer) parentContextMap.get("tipoArchivoEntesGenerado");
            }if (parentContextMap.containsKey("tipoArchivoEntesTerritoriales")) {
                context.tipoArchivoEntesTerritoriales = (Integer) parentContextMap.get("tipoArchivoEntesTerritoriales");
            }if (parentContextMap.containsKey("tipoArchivoCompendioSaludGenerado")) {
                context.tipoArchivoCompendioSaludGenerado = (Integer) parentContextMap.get("tipoArchivoCompendioSaludGenerado");
            }if (parentContextMap.containsKey("tipoArchivoCompendioSalud")) {
                context.tipoArchivoCompendioSalud = (Integer) parentContextMap.get("tipoArchivoCompendioSalud");
            }if (parentContextMap.containsKey("tipoArchivoMinSaludEtapa2NuevosRegistros")) {
                context.tipoArchivoMinSaludEtapa2NuevosRegistros = (Integer) parentContextMap.get("tipoArchivoMinSaludEtapa2NuevosRegistros");
            }if (parentContextMap.containsKey("tipoArchivoFedevida")) {
                context.tipoArchivoFedevida = (Integer) parentContextMap.get("tipoArchivoFedevida");
            }if (parentContextMap.containsKey("tipoArchivoMinSaludEtapa2NovedadesGenerado")) {
                context.tipoArchivoMinSaludEtapa2NovedadesGenerado = (Integer) parentContextMap.get("tipoArchivoMinSaludEtapa2NovedadesGenerado");
            }if (parentContextMap.containsKey("suma")) {
                context.suma = (Integer) parentContextMap.get("suma");
            }if (parentContextMap.containsKey("archivoConfiguracion")) {
                context.archivoConfiguracion = (String) parentContextMap.get("archivoConfiguracion");
            }if (parentContextMap.containsKey("auxAumentoRegistros")) {
                context.auxAumentoRegistros = (Integer) parentContextMap.get("auxAumentoRegistros");
            }if (parentContextMap.containsKey("auxRango")) {
                context.auxRango = (String) parentContextMap.get("auxRango");
            }if (parentContextMap.containsKey("auxAfiliadosCriterioInact")) {
                context.auxAfiliadosCriterioInact = (String) parentContextMap.get("auxAfiliadosCriterioInact");
            }if (parentContextMap.containsKey("auxCriterioActual")) {
                context.auxCriterioActual = (Integer) parentContextMap.get("auxCriterioActual");
            }if (parentContextMap.containsKey("auxPrimerLoop")) {
                context.auxPrimerLoop = (Boolean) parentContextMap.get("auxPrimerLoop");
            }if (parentContextMap.containsKey("auxPosicionRegistros")) {
                context.auxPosicionRegistros = (Integer) parentContextMap.get("auxPosicionRegistros");
            }if (parentContextMap.containsKey("auxAfiliadosCriterio")) {
                context.auxAfiliadosCriterio = (String) parentContextMap.get("auxAfiliadosCriterio");
            }if (parentContextMap.containsKey("auxAfiliadosCriterioAct")) {
                context.auxAfiliadosCriterioAct = (String) parentContextMap.get("auxAfiliadosCriterioAct");
            }if (parentContextMap.containsKey("tipoJobEntesTerritoriales")) {
                context.tipoJobEntesTerritoriales = (Integer) parentContextMap.get("tipoJobEntesTerritoriales");
            }if (parentContextMap.containsKey("tipoJobMinsaludEtapa2Novedades")) {
                context.tipoJobMinsaludEtapa2Novedades = (Integer) parentContextMap.get("tipoJobMinsaludEtapa2Novedades");
            }if (parentContextMap.containsKey("tipoJobMinsaludEtapa2NuevosRegistros")) {
                context.tipoJobMinsaludEtapa2NuevosRegistros = (Integer) parentContextMap.get("tipoJobMinsaludEtapa2NuevosRegistros");
            }if (parentContextMap.containsKey("tipoJobMinsaludEtapa3Multiafiliacion")) {
                context.tipoJobMinsaludEtapa3Multiafiliacion = (Integer) parentContextMap.get("tipoJobMinsaludEtapa3Multiafiliacion");
            }if (parentContextMap.containsKey("tipoJobFedevida")) {
                context.tipoJobFedevida = (Integer) parentContextMap.get("tipoJobFedevida");
            }if (parentContextMap.containsKey("descripcionProceso")) {
                context.descripcionProceso = (String) parentContextMap.get("descripcionProceso");
            }if (parentContextMap.containsKey("idProceso")) {
                context.idProceso = (Integer) parentContextMap.get("idProceso");
            }if (parentContextMap.containsKey("tipoJobProceso")) {
                context.tipoJobProceso = (Integer) parentContextMap.get("tipoJobProceso");
            }if (parentContextMap.containsKey("tipoProceso")) {
                context.tipoProceso = (Integer) parentContextMap.get("tipoProceso");
            }if (parentContextMap.containsKey("tipoJobCompendioSalud")) {
                context.tipoJobCompendioSalud = (Integer) parentContextMap.get("tipoJobCompendioSalud");
            }
        }

        //Resume: init the resumeUtil
        resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
        resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
        resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
        //Resume: jobStart
        resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","","","",resumeUtil.convertToJsonText(context,ContextProperties.class,parametersToEncrypt));


if(execStat) {
    try {
        runStat.openSocket(!isChildJob);
        runStat.setAllPID(rootPid, fatherPid, pid, jobName);
        runStat.startThreadStat(clientHost, portStats);
        runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
    } catch (java.io.IOException ioException) {
        ioException.printStackTrace();
    }
}



	
	    java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
	    globalMap.put("concurrentHashMap", concurrentHashMap);
	

    long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
    long endUsedMemory = 0;
    long end = 0;

    startTime = System.currentTimeMillis();


this.globalResumeTicket = true;//to run tPreJob

try {
errorCode = null;tPrejob_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tPrejob_1) {
globalMap.put("tPrejob_1_SUBPROCESS_STATE", -1);

e_tPrejob_1.printStackTrace();

}




this.globalResumeTicket = false;//to run others jobs

try {
errorCode = null;tOracleInput_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tOracleInput_1) {
globalMap.put("tOracleInput_1_SUBPROCESS_STATE", -1);

e_tOracleInput_1.printStackTrace();

}

this.globalResumeTicket = true;//to run tPostJob

try {
errorCode = null;tPostjob_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tPostjob_1) {
globalMap.put("tPostjob_1_SUBPROCESS_STATE", -1);

e_tPostjob_1.printStackTrace();

}



        end = System.currentTimeMillis();

        if (watch) {
            System.out.println((end-startTime)+" milliseconds");
        }

        endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
        if (false) {
            System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : ETL_principal");
        }



if (execStat) {
    runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
    runStat.stopThreadStat();
}
    int returnCode = 0;


    if(errorCode == null) {
         returnCode = status != null && status.equals("failure") ? 1 : 0;
    } else {
         returnCode = errorCode.intValue();
    }
    resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","" + returnCode,"","","");
    resumeUtil.flush();


    return returnCode;

  }

    // only for OSGi env
    public void destroy() {
    closeSqlDbConnections();


    }



    private void closeSqlDbConnections() {
        try {
            Object obj_conn;
            obj_conn = globalMap.remove("conn_tOracleConnection_1");
            if (null != obj_conn) {
                ((java.sql.Connection) obj_conn).close();
            }
        } catch (java.lang.Exception e) {
        }
    }











    private java.util.Map<String, Object> getSharedConnections4REST() {
        java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();
            connections.put("conn_tOracleConnection_1", globalMap.get("conn_tOracleConnection_1"));






        return connections;
    }

    private void evalParam(String arg) {
        if (arg.startsWith("--resuming_logs_dir_path")) {
            resuming_logs_dir_path = arg.substring(25);
        } else if (arg.startsWith("--resuming_checkpoint_path")) {
            resuming_checkpoint_path = arg.substring(27);
        } else if (arg.startsWith("--parent_part_launcher")) {
            parent_part_launcher = arg.substring(23);
        } else if (arg.startsWith("--watch")) {
            watch = true;
        } else if (arg.startsWith("--stat_port=")) {
            String portStatsStr = arg.substring(12);
            if (portStatsStr != null && !portStatsStr.equals("null")) {
                portStats = Integer.parseInt(portStatsStr);
            }
        } else if (arg.startsWith("--trace_port=")) {
            portTraces = Integer.parseInt(arg.substring(13));
        } else if (arg.startsWith("--client_host=")) {
            clientHost = arg.substring(14);
        } else if (arg.startsWith("--context=")) {
            contextStr = arg.substring(10);
            isDefaultContext = false;
        } else if (arg.startsWith("--father_pid=")) {
            fatherPid = arg.substring(13);
        } else if (arg.startsWith("--root_pid=")) {
            rootPid = arg.substring(11);
        } else if (arg.startsWith("--father_node=")) {
            fatherNode = arg.substring(14);
        } else if (arg.startsWith("--pid=")) {
            pid = arg.substring(6);
        } else if (arg.startsWith("--context_type")) {
            String keyValue = arg.substring(15);
			int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.setContextType(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }

            }

		} else if (arg.startsWith("--context_param")) {
            String keyValue = arg.substring(16);
            int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }
            }
        } else if (arg.startsWith("--context_file")) {
        	String keyValue = arg.substring(15);
        	String filePath = new String(java.util.Base64.getDecoder().decode(keyValue));
        	java.nio.file.Path contextFile = java.nio.file.Paths.get(filePath);
            try (java.io.BufferedReader reader = java.nio.file.Files.newBufferedReader(contextFile)) {
                String line;
                while ((line = reader.readLine()) != null) {
                    int index = -1;
                    if ( (index = line.indexOf('=')) > -1) {
							if (line.startsWith("--context_param")) {
								if ("id_Password".equals(context_param.getContextType(line.substring(16, index)))) {
									context_param.put(line.substring(16, index), routines.system.PasswordEncryptUtil.decryptPassword(
											line.substring(index + 1)));
								} else {
									context_param.put(line.substring(16, index), line.substring(index + 1));
								}
							}else {//--context_type
								context_param.setContextType(line.substring(15, index), line.substring(index + 1));
							}
                    }
                }
            } catch (java.io.IOException e) {
            	System.err.println("Could not load the context file: " + filePath);
                e.printStackTrace();
            }
        } else if (arg.startsWith("--log4jLevel=")) {
            log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--audit.enabled") && arg.contains("=")) {//for trunjob call
		    final int equal = arg.indexOf('=');
			final String key = arg.substring("--".length(), equal);
			System.setProperty(key, arg.substring(equal + 1));
		}
    }
    
    private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

    private final String[][] escapeChars = {
        {"\\\\","\\"},{"\\n","\n"},{"\\'","\'"},{"\\r","\r"},
        {"\\f","\f"},{"\\b","\b"},{"\\t","\t"}
        };
    private String replaceEscapeChars (String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0],currIndex);
				if (index>=0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0], strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
    }

    public Integer getErrorCode() {
        return errorCode;
    }


    public String getStatus() {
        return status;
    }

    ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 *     567157 characters generated by Talend Open Studio for ESB 
 *     on the October 28, 2024, 2:33:30 PM COT
 ************************************************************************************************/