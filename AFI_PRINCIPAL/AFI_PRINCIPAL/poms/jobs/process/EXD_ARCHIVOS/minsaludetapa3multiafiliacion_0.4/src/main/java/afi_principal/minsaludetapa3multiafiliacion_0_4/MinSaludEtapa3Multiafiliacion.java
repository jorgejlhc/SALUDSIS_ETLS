// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for ESB
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


package afi_principal.minsaludetapa3multiafiliacion_0_4;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.GenerarUuid;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;
 




	//the import part of tJavaRow_1
	//import java.util.List;

	//the import part of tJava_1
	//import java.util.List;

	//the import part of tJava_3
	//import java.util.List;

	//the import part of tJavaRow_4
	//import java.util.List;

	//the import part of tJavaRow_5
	//import java.util.List;

	//the import part of tJava_6
	//import java.util.List;


@SuppressWarnings("unused")

/**
 * Job: MinSaludEtapa3Multiafiliacion Purpose: Extincion de derechos, archivo recibido MINSALUD ETAPA 2<br>
 * Description:  <br>
 * @author jorgejlhc@gmail.com
 * @version 8.8.8.20240722_1936-SNAPSHOT
 * @status PROD
 */
public class MinSaludEtapa3Multiafiliacion implements TalendJob {

protected static void logIgnoredError(String message, Throwable cause) {
       System.err.println(message);
       if (cause != null) {
               cause.printStackTrace();
       }

}


	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}
	
	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	
	private final static String utf8Charset = "UTF-8";
	

	//contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String,String> propertyTypes = new java.util.HashMap<>();
		
		public PropertiesWithType(java.util.Properties properties){
			super(properties);
		}
		public PropertiesWithType(){
			super();
		}
		
		public void setContextType(String key, String type) {
			propertyTypes.put(key,type);
		}
	
		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}	
	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();
		

	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties){
			super(properties);
		}
		public ContextProperties(){
			super();
		}

		public void synchronizeContext(){
			
			if(outCodigo != null){
				
					this.setProperty("outCodigo", outCodigo.toString());
				
			}
			
			if(archivoSalida != null){
				
					this.setProperty("archivoSalida", archivoSalida.toString());
				
			}
			
			if(infoConteoRegistros != null){
				
					this.setProperty("infoConteoRegistros", infoConteoRegistros.toString());
				
			}
			
			if(auxAfiliadosCompendio != null){
				
					this.setProperty("auxAfiliadosCompendio", auxAfiliadosCompendio.toString());
				
			}
			
			if(auxTotalRegistros != null){
				
					this.setProperty("auxTotalRegistros", auxTotalRegistros.toString());
				
			}
			
			if(estArchivoActivo != null){
				
					this.setProperty("estArchivoActivo", estArchivoActivo.toString());
				
			}
			
			if(estArchivoCancelado != null){
				
					this.setProperty("estArchivoCancelado", estArchivoCancelado.toString());
				
			}
			
			if(estArchivoEnProceso != null){
				
					this.setProperty("estArchivoEnProceso", estArchivoEnProceso.toString());
				
			}
			
			if(estArchivoErrorArchivo != null){
				
					this.setProperty("estArchivoErrorArchivo", estArchivoErrorArchivo.toString());
				
			}
			
			if(estArchivoErrorProcesamiento != null){
				
					this.setProperty("estArchivoErrorProcesamiento", estArchivoErrorProcesamiento.toString());
				
			}
			
			if(estArchivoInactivo != null){
				
					this.setProperty("estArchivoInactivo", estArchivoInactivo.toString());
				
			}
			
			if(estArchivoPausado != null){
				
					this.setProperty("estArchivoPausado", estArchivoPausado.toString());
				
			}
			
			if(estArchivoProcesado != null){
				
					this.setProperty("estArchivoProcesado", estArchivoProcesado.toString());
				
			}
			
			if(fileSystem_Area != null){
				
					this.setProperty("fileSystem_Area", fileSystem_Area.toString());
				
			}
			
			if(fileSystem_Path != null){
				
					this.setProperty("fileSystem_Path", fileSystem_Path.toString());
				
			}
			
			if(infoIdArchivo != null){
				
					this.setProperty("infoIdArchivo", infoIdArchivo.toString());
				
			}
			
			if(infoNombreArchivo != null){
				
					this.setProperty("infoNombreArchivo", infoNombreArchivo.toString());
				
			}
			
			if(infoTipoArchivo != null){
				
					this.setProperty("infoTipoArchivo", infoTipoArchivo.toString());
				
			}
			
			if(infoUsuarioIdArchivo != null){
				
					this.setProperty("infoUsuarioIdArchivo", infoUsuarioIdArchivo.toString());
				
			}
			
			if(descripcionProceso != null){
				
					this.setProperty("descripcionProceso", descripcionProceso.toString());
				
			}
			
			if(idProceso != null){
				
					this.setProperty("idProceso", idProceso.toString());
				
			}
			
			if(tipoJobProceso != null){
				
					this.setProperty("tipoJobProceso", tipoJobProceso.toString());
				
			}
			
			if(tipoProceso != null){
				
					this.setProperty("tipoProceso", tipoProceso.toString());
				
			}
			
			if(mail_PasswordMail != null){
				
					this.setProperty("mail_PasswordMail", mail_PasswordMail.toString());
				
			}
			
			if(mail_SMTPHost != null){
				
					this.setProperty("mail_SMTPHost", mail_SMTPHost.toString());
				
			}
			
			if(mail_SMTPPort != null){
				
					this.setProperty("mail_SMTPPort", mail_SMTPPort.toString());
				
			}
			
			if(mail_UsernameMail != null){
				
					this.setProperty("mail_UsernameMail", mail_UsernameMail.toString());
				
			}
			
			if(oracle_AdditionalParams != null){
				
					this.setProperty("oracle_AdditionalParams", oracle_AdditionalParams.toString());
				
			}
			
			if(oracle_Host != null){
				
					this.setProperty("oracle_Host", oracle_Host.toString());
				
			}
			
			if(oracle_Password != null){
				
					this.setProperty("oracle_Password", oracle_Password.toString());
				
			}
			
			if(oracle_Port != null){
				
					this.setProperty("oracle_Port", oracle_Port.toString());
				
			}
			
			if(oracle_Schema != null){
				
					this.setProperty("oracle_Schema", oracle_Schema.toString());
				
			}
			
			if(oracle_ServiceName != null){
				
					this.setProperty("oracle_ServiceName", oracle_ServiceName.toString());
				
			}
			
			if(oracle_Sid != null){
				
					this.setProperty("oracle_Sid", oracle_Sid.toString());
				
			}
			
			if(oracle_User != null){
				
					this.setProperty("oracle_User", oracle_User.toString());
				
			}
			
			if(tipoArchivoEntesGenerado != null){
				
					this.setProperty("tipoArchivoEntesGenerado", tipoArchivoEntesGenerado.toString());
				
			}
			
			if(tipoArchivoEntesTerritoriales != null){
				
					this.setProperty("tipoArchivoEntesTerritoriales", tipoArchivoEntesTerritoriales.toString());
				
			}
			
			if(tipoArchivoFedevida != null){
				
					this.setProperty("tipoArchivoFedevida", tipoArchivoFedevida.toString());
				
			}
			
			if(tipoArchivoFedevidaGenerado != null){
				
					this.setProperty("tipoArchivoFedevidaGenerado", tipoArchivoFedevidaGenerado.toString());
				
			}
			
			if(tipoArchivoMinSaludEtapa2Novedades != null){
				
					this.setProperty("tipoArchivoMinSaludEtapa2Novedades", tipoArchivoMinSaludEtapa2Novedades.toString());
				
			}
			
			if(tipoArchivoMinSaludEtapa2NovedadesGenerado != null){
				
					this.setProperty("tipoArchivoMinSaludEtapa2NovedadesGenerado", tipoArchivoMinSaludEtapa2NovedadesGenerado.toString());
				
			}
			
			if(tipoArchivoMinSaludEtapa2NuevosRegistros != null){
				
					this.setProperty("tipoArchivoMinSaludEtapa2NuevosRegistros", tipoArchivoMinSaludEtapa2NuevosRegistros.toString());
				
			}
			
			if(tipoArchivoMinSaludEtapa2NuevosRegistrosGenerado != null){
				
					this.setProperty("tipoArchivoMinSaludEtapa2NuevosRegistrosGenerado", tipoArchivoMinSaludEtapa2NuevosRegistrosGenerado.toString());
				
			}
			
			if(tipoArchivoMinSaludEtapa3Multiafiliacion != null){
				
					this.setProperty("tipoArchivoMinSaludEtapa3Multiafiliacion", tipoArchivoMinSaludEtapa3Multiafiliacion.toString());
				
			}
			
			if(tipoArchivoMinSaludEtapa3MultiafiliacionGenerado != null){
				
					this.setProperty("tipoArchivoMinSaludEtapa3MultiafiliacionGenerado", tipoArchivoMinSaludEtapa3MultiafiliacionGenerado.toString());
				
			}
			
			if(archivoConfiguracion != null){
				
					this.setProperty("archivoConfiguracion", archivoConfiguracion.toString());
				
			}
			
			if(auxAumentoRegistros != null){
				
					this.setProperty("auxAumentoRegistros", auxAumentoRegistros.toString());
				
			}
			
			if(auxPosicionRegistros != null){
				
					this.setProperty("auxPosicionRegistros", auxPosicionRegistros.toString());
				
			}
			
			if(auxRango != null){
				
					this.setProperty("auxRango", auxRango.toString());
				
			}
			
			if(JasperAmbiente != null){
				
					this.setProperty("JasperAmbiente", JasperAmbiente.toString());
				
			}
			
			if(JasperModulo != null){
				
					this.setProperty("JasperModulo", JasperModulo.toString());
				
			}
			
			if(JasperPassword != null){
				
					this.setProperty("JasperPassword", JasperPassword.toString());
				
			}
			
			if(JasperReporte != null){
				
					this.setProperty("JasperReporte", JasperReporte.toString());
				
			}
			
			if(JasperServer != null){
				
					this.setProperty("JasperServer", JasperServer.toString());
				
			}
			
			if(JasperUser != null){
				
					this.setProperty("JasperUser", JasperUser.toString());
				
			}
			
		}
		
		//if the stored or passed value is "<TALEND_NULL>" string, it mean null
		public String getStringValue(String key) {
			String origin_value = this.getProperty(key);
			if(NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY.equals(origin_value)) {
				return null;
			}
			return origin_value;
		}

public Boolean outCodigo;
public Boolean getOutCodigo(){
	return this.outCodigo;
}
public String archivoSalida;
public String getArchivoSalida(){
	return this.archivoSalida;
}
public Integer infoConteoRegistros;
public Integer getInfoConteoRegistros(){
	return this.infoConteoRegistros;
}
public String auxAfiliadosCompendio;
public String getAuxAfiliadosCompendio(){
	return this.auxAfiliadosCompendio;
}
public Integer auxTotalRegistros;
public Integer getAuxTotalRegistros(){
	return this.auxTotalRegistros;
}
public Integer estArchivoActivo;
public Integer getEstArchivoActivo(){
	return this.estArchivoActivo;
}
public Integer estArchivoCancelado;
public Integer getEstArchivoCancelado(){
	return this.estArchivoCancelado;
}
public Integer estArchivoEnProceso;
public Integer getEstArchivoEnProceso(){
	return this.estArchivoEnProceso;
}
public Integer estArchivoErrorArchivo;
public Integer getEstArchivoErrorArchivo(){
	return this.estArchivoErrorArchivo;
}
public Integer estArchivoErrorProcesamiento;
public Integer getEstArchivoErrorProcesamiento(){
	return this.estArchivoErrorProcesamiento;
}
public Integer estArchivoInactivo;
public Integer getEstArchivoInactivo(){
	return this.estArchivoInactivo;
}
public Integer estArchivoPausado;
public Integer getEstArchivoPausado(){
	return this.estArchivoPausado;
}
public Integer estArchivoProcesado;
public Integer getEstArchivoProcesado(){
	return this.estArchivoProcesado;
}
public String fileSystem_Area;
public String getFileSystem_Area(){
	return this.fileSystem_Area;
}
public String fileSystem_Path;
public String getFileSystem_Path(){
	return this.fileSystem_Path;
}
public Integer infoIdArchivo;
public Integer getInfoIdArchivo(){
	return this.infoIdArchivo;
}
public String infoNombreArchivo;
public String getInfoNombreArchivo(){
	return this.infoNombreArchivo;
}
public Integer infoTipoArchivo;
public Integer getInfoTipoArchivo(){
	return this.infoTipoArchivo;
}
public Integer infoUsuarioIdArchivo;
public Integer getInfoUsuarioIdArchivo(){
	return this.infoUsuarioIdArchivo;
}
public String descripcionProceso;
public String getDescripcionProceso(){
	return this.descripcionProceso;
}
public Integer idProceso;
public Integer getIdProceso(){
	return this.idProceso;
}
public Integer tipoJobProceso;
public Integer getTipoJobProceso(){
	return this.tipoJobProceso;
}
public Integer tipoProceso;
public Integer getTipoProceso(){
	return this.tipoProceso;
}
public String mail_PasswordMail;
public String getMail_PasswordMail(){
	return this.mail_PasswordMail;
}
public String mail_SMTPHost;
public String getMail_SMTPHost(){
	return this.mail_SMTPHost;
}
public String mail_SMTPPort;
public String getMail_SMTPPort(){
	return this.mail_SMTPPort;
}
public String mail_UsernameMail;
public String getMail_UsernameMail(){
	return this.mail_UsernameMail;
}
public String oracle_AdditionalParams;
public String getOracle_AdditionalParams(){
	return this.oracle_AdditionalParams;
}
public String oracle_Host;
public String getOracle_Host(){
	return this.oracle_Host;
}
public String oracle_Password;
public String getOracle_Password(){
	return this.oracle_Password;
}
public String oracle_Port;
public String getOracle_Port(){
	return this.oracle_Port;
}
public String oracle_Schema;
public String getOracle_Schema(){
	return this.oracle_Schema;
}
public String oracle_ServiceName;
public String getOracle_ServiceName(){
	return this.oracle_ServiceName;
}
public String oracle_Sid;
public String getOracle_Sid(){
	return this.oracle_Sid;
}
public String oracle_User;
public String getOracle_User(){
	return this.oracle_User;
}
public Integer tipoArchivoEntesGenerado;
public Integer getTipoArchivoEntesGenerado(){
	return this.tipoArchivoEntesGenerado;
}
public Integer tipoArchivoEntesTerritoriales;
public Integer getTipoArchivoEntesTerritoriales(){
	return this.tipoArchivoEntesTerritoriales;
}
public Integer tipoArchivoFedevida;
public Integer getTipoArchivoFedevida(){
	return this.tipoArchivoFedevida;
}
public Integer tipoArchivoFedevidaGenerado;
public Integer getTipoArchivoFedevidaGenerado(){
	return this.tipoArchivoFedevidaGenerado;
}
public Integer tipoArchivoMinSaludEtapa2Novedades;
public Integer getTipoArchivoMinSaludEtapa2Novedades(){
	return this.tipoArchivoMinSaludEtapa2Novedades;
}
public Integer tipoArchivoMinSaludEtapa2NovedadesGenerado;
public Integer getTipoArchivoMinSaludEtapa2NovedadesGenerado(){
	return this.tipoArchivoMinSaludEtapa2NovedadesGenerado;
}
public Integer tipoArchivoMinSaludEtapa2NuevosRegistros;
public Integer getTipoArchivoMinSaludEtapa2NuevosRegistros(){
	return this.tipoArchivoMinSaludEtapa2NuevosRegistros;
}
public Integer tipoArchivoMinSaludEtapa2NuevosRegistrosGenerado;
public Integer getTipoArchivoMinSaludEtapa2NuevosRegistrosGenerado(){
	return this.tipoArchivoMinSaludEtapa2NuevosRegistrosGenerado;
}
public Integer tipoArchivoMinSaludEtapa3Multiafiliacion;
public Integer getTipoArchivoMinSaludEtapa3Multiafiliacion(){
	return this.tipoArchivoMinSaludEtapa3Multiafiliacion;
}
public Integer tipoArchivoMinSaludEtapa3MultiafiliacionGenerado;
public Integer getTipoArchivoMinSaludEtapa3MultiafiliacionGenerado(){
	return this.tipoArchivoMinSaludEtapa3MultiafiliacionGenerado;
}
public String archivoConfiguracion;
public String getArchivoConfiguracion(){
	return this.archivoConfiguracion;
}
public Integer auxAumentoRegistros;
public Integer getAuxAumentoRegistros(){
	return this.auxAumentoRegistros;
}
public Integer auxPosicionRegistros;
public Integer getAuxPosicionRegistros(){
	return this.auxPosicionRegistros;
}
public String auxRango;
public String getAuxRango(){
	return this.auxRango;
}
public String JasperAmbiente;
public String getJasperAmbiente(){
	return this.JasperAmbiente;
}
public String JasperModulo;
public String getJasperModulo(){
	return this.JasperModulo;
}
public String JasperPassword;
public String getJasperPassword(){
	return this.JasperPassword;
}
public String JasperReporte;
public String getJasperReporte(){
	return this.JasperReporte;
}
public String JasperServer;
public String getJasperServer(){
	return this.JasperServer;
}
public String JasperUser;
public String getJasperUser(){
	return this.JasperUser;
}
	}
			
	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.
	public ContextProperties getContext() {
		return this.context;
	}
	private final String jobVersion = "0.4";
	private final String jobName = "MinSaludEtapa3Multiafiliacion";
	private final String projectName = "AFI_PRINCIPAL";
	public Integer errorCode = null;
	private String currentComponent = "";
	
	private String cLabel =  null;
	
		private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
        private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();
	
		private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
		public  final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();
	

private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";
	
	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(), new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}
	
	public void setDataSourceReferences(List serviceReferences) throws Exception{
		
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		java.util.Map<String, javax.sql.DataSource> dataSources = new java.util.HashMap<String, javax.sql.DataSource>();
		
		for (java.util.Map.Entry<String, javax.sql.DataSource> entry : BundleUtils.getServices(serviceReferences,  javax.sql.DataSource.class).entrySet()) {
                    dataSources.put(entry.getKey(), entry.getValue());
                    talendDataSources.put(entry.getKey(), new routines.system.TalendDataSource(entry.getValue()));
		}

		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}

	LogCatcherUtils tLogCatcher_1 = new LogCatcherUtils();

private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

public String getExceptionStackTrace() {
	if ("failure".equals(this.getStatus())) {
		errorMessagePS.flush();
		return baos.toString();
	}
	return null;
}

private Exception exception;

public Exception getException() {
	if ("failure".equals(this.getStatus())) {
		return this.exception;
	}
	return null;
}

private class TalendException extends Exception {

	private static final long serialVersionUID = 1L;

	private java.util.Map<String, Object> globalMap = null;
	private Exception e = null;
	
	private String currentComponent = null;
	private String cLabel =  null;
	
	private String virtualComponentName = null;
	
	public void setVirtualComponentName (String virtualComponentName){
		this.virtualComponentName = virtualComponentName;
	}

	private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
		this.currentComponent= errorComponent;
		this.globalMap = globalMap;
		this.e = e;
	}
	
	private TalendException(Exception e, String errorComponent, String errorComponentLabel, final java.util.Map<String, Object> globalMap) {
		this(e, errorComponent, globalMap);
		this.cLabel = errorComponentLabel;
	}

	public Exception getException() {
		return this.e;
	}

	public String getCurrentComponent() {
		return this.currentComponent;
	}

	
    public String getExceptionCauseMessage(Exception e){
        Throwable cause = e;
        String message = null;
        int i = 10;
        while (null != cause && 0 < i--) {
            message = cause.getMessage();
            if (null == message) {
                cause = cause.getCause();
            } else {
                break;          
            }
        }
        if (null == message) {
            message = e.getClass().getName();
        }   
        return message;
    }

	@Override
	public void printStackTrace() {
		if (!(e instanceof TalendException || e instanceof TDieException)) {
			if(virtualComponentName!=null && currentComponent.indexOf(virtualComponentName+"_")==0){
				globalMap.put(virtualComponentName+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			}
			globalMap.put(currentComponent+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
		}
		if (!(e instanceof TDieException)) {
			if(e instanceof TalendException){
				e.printStackTrace();
			} else {
				e.printStackTrace();
				e.printStackTrace(errorMessagePS);
				MinSaludEtapa3Multiafiliacion.this.exception = e;
			}
		}
		if (!(e instanceof TalendException)) {
		try {
			for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
				if (m.getName().compareTo(currentComponent + "_error") == 0) {
					m.invoke(MinSaludEtapa3Multiafiliacion.this, new Object[] { e , currentComponent, globalMap});
					break;
				}
			}

			if(!(e instanceof TDieException)){
				tLogCatcher_1.addMessage("Java Exception", currentComponent, 6, e.getClass().getName() + ":" + e.getMessage(), 1);
				tLogCatcher_1Process(globalMap);
			}
			} catch (TalendException e) {
				// do nothing
			
		} catch (Exception e) {
			this.e.printStackTrace();
		}
		}
	}
}

			public void tPostjob_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostjob_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFixedFlowInput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFixedFlowInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFixedFlowInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleOutput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFixedFlowInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleClose_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleClose_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFixedFlowInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPrejob_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPrejob_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputXML_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputXML_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaRow_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputXML_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleConnection_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
						try {
							
								if(this.execStat){
									runStat.updateStatOnConnection("OnComponentError1", 0, "error");
								}
							
							
								errorCode = null;
								tDie_1Process(globalMap);
								if (!"failure".equals(status)) {
									status = "end";
								}
								

						} catch (Exception e) {
							e.printStackTrace();
						}
						
					tOracleConnection_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tJava_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDie_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDie_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileExist_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileExist_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputDelimited_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
					tFileInputDelimited_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashOutput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
					tFileInputDelimited_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tJava_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashOutput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashOutput_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashOutput_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_7_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_7_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_7_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_7_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_7_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_7_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHttpRequest_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_7_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tSendMail_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_7_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaRow_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_7_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleSP_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_7_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaRow_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_7_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleSP_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_7_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_7_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputDelimited_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_7_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tJava_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHttpRequest_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_7_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tSendMail_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_7_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_7_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_7_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_7_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_7_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogCatcher_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tLogCatcher_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputDelimited_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tLogCatcher_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row10_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFixedFlowInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row20_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_7_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row17_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_7_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_7_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_7_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostjob_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFixedFlowInput_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleClose_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tPrejob_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileInputXML_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleConnection_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDie_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileExist_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileInputDelimited_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "ERROR", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

				try {
					
						if(this.execStat){
							runStat.updateStatOnConnection("OnSubjobError2", 0, "error");
						}
					
					errorCode = null;
					tJava_3Process(globalMap);
					if (!"failure".equals(status)) {
						status = "end";
					}
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
			public void tJava_3_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleInput_5_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleInput_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleInput_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleInput_7_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_6_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tLogCatcher_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
	









public void tPostjob_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPostjob_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tPostjob_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostjob_1", false);
		start_Hash.put("tPostjob_1", System.currentTimeMillis());
		
	
	currentComponent="tPostjob_1";
	
	
		int tos_count_tPostjob_1 = 0;
		

 



/**
 * [tPostjob_1 begin ] stop
 */
	
	/**
	 * [tPostjob_1 main ] start
	 */

	

	
	
	currentComponent="tPostjob_1";
	
	

 


	tos_count_tPostjob_1++;

/**
 * [tPostjob_1 main ] stop
 */
	
	/**
	 * [tPostjob_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tPostjob_1";
	
	

 



/**
 * [tPostjob_1 process_data_begin ] stop
 */
	
	/**
	 * [tPostjob_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tPostjob_1";
	
	

 



/**
 * [tPostjob_1 process_data_end ] stop
 */
	
	/**
	 * [tPostjob_1 end ] start
	 */

	

	
	
	currentComponent="tPostjob_1";
	
	

 

ok_Hash.put("tPostjob_1", true);
end_Hash.put("tPostjob_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk8", 0, "ok");
				}
				tFixedFlowInput_1Process(globalMap);



/**
 * [tPostjob_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPostjob_1 finally ] start
	 */

	

	
	
	currentComponent="tPostjob_1";
	
	

 



/**
 * [tPostjob_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPostjob_1_SUBPROCESS_STATE", 1);
	}
	


public static class out6Struct implements routines.system.IPersistableRow<out6Struct> {
    final static byte[] commonByteArrayLock_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion = new byte[0];
    static byte[] commonByteArray_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion = new byte[0];

	
			    public int ESTADO;

				public int getESTADO () {
					return this.ESTADO;
				}

				public Boolean ESTADOIsNullable(){
				    return false;
				}
				public Boolean ESTADOIsKey(){
				    return false;
				}
				public Integer ESTADOLength(){
				    return 22;
				}
				public Integer ESTADOPrecision(){
				    return 0;
				}
				public String ESTADODefault(){
				
					return "1";
				
				}
				public String ESTADOComment(){
				
				    return "Estado del trabajo (1 Activo - 2 Realizado - 3 Fallido - 4 Cancelado)";
				
				}
				public String ESTADOPattern(){
				
					return "";
				
				}
				public String ESTADOOriginalDbColumnName(){
				
					return "ESTADO";
				
				}

				
			    public String ARCHIVO;

				public String getARCHIVO () {
					return this.ARCHIVO;
				}

				public Boolean ARCHIVOIsNullable(){
				    return false;
				}
				public Boolean ARCHIVOIsKey(){
				    return false;
				}
				public Integer ARCHIVOLength(){
				    return 100;
				}
				public Integer ARCHIVOPrecision(){
				    return 0;
				}
				public String ARCHIVODefault(){
				
					return null;
				
				}
				public String ARCHIVOComment(){
				
				    return "Nombre del archivo";
				
				}
				public String ARCHIVOPattern(){
				
					return "";
				
				}
				public String ARCHIVOOriginalDbColumnName(){
				
					return "ARCHIVO";
				
				}

				
			    public int TARCHIVOS_ID;

				public int getTARCHIVOS_ID () {
					return this.TARCHIVOS_ID;
				}

				public Boolean TARCHIVOS_IDIsNullable(){
				    return false;
				}
				public Boolean TARCHIVOS_IDIsKey(){
				    return false;
				}
				public Integer TARCHIVOS_IDLength(){
				    return 22;
				}
				public Integer TARCHIVOS_IDPrecision(){
				    return 0;
				}
				public String TARCHIVOS_IDDefault(){
				
					return null;
				
				}
				public String TARCHIVOS_IDComment(){
				
				    return "FK - AFI_TARCHIVOS";
				
				}
				public String TARCHIVOS_IDPattern(){
				
					return "";
				
				}
				public String TARCHIVOS_IDOriginalDbColumnName(){
				
					return "TARCHIVOS_ID";
				
				}

				
			    public int USUARIOS_ID;

				public int getUSUARIOS_ID () {
					return this.USUARIOS_ID;
				}

				public Boolean USUARIOS_IDIsNullable(){
				    return false;
				}
				public Boolean USUARIOS_IDIsKey(){
				    return false;
				}
				public Integer USUARIOS_IDLength(){
				    return 22;
				}
				public Integer USUARIOS_IDPrecision(){
				    return 0;
				}
				public String USUARIOS_IDDefault(){
				
					return null;
				
				}
				public String USUARIOS_IDComment(){
				
				    return "FK - GEN_USUARIOS (Usuario que subio el archivo)";
				
				}
				public String USUARIOS_IDPattern(){
				
					return "";
				
				}
				public String USUARIOS_IDOriginalDbColumnName(){
				
					return "USUARIOS_ID";
				
				}

				
			    public String CODIGO;

				public String getCODIGO () {
					return this.CODIGO;
				}

				public Boolean CODIGOIsNullable(){
				    return false;
				}
				public Boolean CODIGOIsKey(){
				    return false;
				}
				public Integer CODIGOLength(){
				    return 10;
				}
				public Integer CODIGOPrecision(){
				    return 0;
				}
				public String CODIGODefault(){
				
					return null;
				
				}
				public String CODIGOComment(){
				
				    return "Codigo de identificacion del archivo";
				
				}
				public String CODIGOPattern(){
				
					return "";
				
				}
				public String CODIGOOriginalDbColumnName(){
				
					return "CODIGO";
				
				}

				
			    public String ARCHIVOFS;

				public String getARCHIVOFS () {
					return this.ARCHIVOFS;
				}

				public Boolean ARCHIVOFSIsNullable(){
				    return false;
				}
				public Boolean ARCHIVOFSIsKey(){
				    return false;
				}
				public Integer ARCHIVOFSLength(){
				    return 100;
				}
				public Integer ARCHIVOFSPrecision(){
				    return 0;
				}
				public String ARCHIVOFSDefault(){
				
					return null;
				
				}
				public String ARCHIVOFSComment(){
				
				    return "Nombre del archivo en el File System";
				
				}
				public String ARCHIVOFSPattern(){
				
					return "";
				
				}
				public String ARCHIVOFSOriginalDbColumnName(){
				
					return "ARCHIVOFS";
				
				}

				
			    public java.util.Date FECHA;

				public java.util.Date getFECHA () {
					return this.FECHA;
				}

				public Boolean FECHAIsNullable(){
				    return false;
				}
				public Boolean FECHAIsKey(){
				    return false;
				}
				public Integer FECHALength(){
				    return 7;
				}
				public Integer FECHAPrecision(){
				    return 0;
				}
				public String FECHADefault(){
				
					return null;
				
				}
				public String FECHAComment(){
				
				    return "Fecha y hora del registro";
				
				}
				public String FECHAPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String FECHAOriginalDbColumnName(){
				
					return "FECHA";
				
				}

				
			    public String EXTENSION;

				public String getEXTENSION () {
					return this.EXTENSION;
				}

				public Boolean EXTENSIONIsNullable(){
				    return false;
				}
				public Boolean EXTENSIONIsKey(){
				    return false;
				}
				public Integer EXTENSIONLength(){
				    return 0;
				}
				public Integer EXTENSIONPrecision(){
				    return 0;
				}
				public String EXTENSIONDefault(){
				
					return null;
				
				}
				public String EXTENSIONComment(){
				
				    return "";
				
				}
				public String EXTENSIONPattern(){
				
					return "";
				
				}
				public String EXTENSIONOriginalDbColumnName(){
				
					return "EXTENSION";
				
				}

				
			    public int PADRE_ID;

				public int getPADRE_ID () {
					return this.PADRE_ID;
				}

				public Boolean PADRE_IDIsNullable(){
				    return false;
				}
				public Boolean PADRE_IDIsKey(){
				    return false;
				}
				public Integer PADRE_IDLength(){
				    return 0;
				}
				public Integer PADRE_IDPrecision(){
				    return 0;
				}
				public String PADRE_IDDefault(){
				
					return null;
				
				}
				public String PADRE_IDComment(){
				
				    return "";
				
				}
				public String PADRE_IDPattern(){
				
					return "";
				
				}
				public String PADRE_IDOriginalDbColumnName(){
				
					return "PADRE_ID";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion.length) {
				if(length < 1024 && commonByteArray_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion.length == 0) {
   					commonByteArray_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion = new byte[1024];
				} else {
   					commonByteArray_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion, 0, length);
			strReturn = new String(commonByteArray_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion.length) {
				if(length < 1024 && commonByteArray_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion.length == 0) {
   					commonByteArray_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion = new byte[1024];
				} else {
   					commonByteArray_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion, 0, length);
			strReturn = new String(commonByteArray_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion) {

        	try {

        		int length = 0;
		
			        this.ESTADO = dis.readInt();
					
					this.ARCHIVO = readString(dis);
					
			        this.TARCHIVOS_ID = dis.readInt();
					
			        this.USUARIOS_ID = dis.readInt();
					
					this.CODIGO = readString(dis);
					
					this.ARCHIVOFS = readString(dis);
					
					this.FECHA = readDate(dis);
					
					this.EXTENSION = readString(dis);
					
			        this.PADRE_ID = dis.readInt();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion) {

        	try {

        		int length = 0;
		
			        this.ESTADO = dis.readInt();
					
					this.ARCHIVO = readString(dis);
					
			        this.TARCHIVOS_ID = dis.readInt();
					
			        this.USUARIOS_ID = dis.readInt();
					
					this.CODIGO = readString(dis);
					
					this.ARCHIVOFS = readString(dis);
					
					this.FECHA = readDate(dis);
					
					this.EXTENSION = readString(dis);
					
			        this.PADRE_ID = dis.readInt();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.ESTADO);
					
					// String
				
						writeString(this.ARCHIVO,dos);
					
					// int
				
		            	dos.writeInt(this.TARCHIVOS_ID);
					
					// int
				
		            	dos.writeInt(this.USUARIOS_ID);
					
					// String
				
						writeString(this.CODIGO,dos);
					
					// String
				
						writeString(this.ARCHIVOFS,dos);
					
					// java.util.Date
				
						writeDate(this.FECHA,dos);
					
					// String
				
						writeString(this.EXTENSION,dos);
					
					// int
				
		            	dos.writeInt(this.PADRE_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.ESTADO);
					
					// String
				
						writeString(this.ARCHIVO,dos);
					
					// int
				
		            	dos.writeInt(this.TARCHIVOS_ID);
					
					// int
				
		            	dos.writeInt(this.USUARIOS_ID);
					
					// String
				
						writeString(this.CODIGO,dos);
					
					// String
				
						writeString(this.ARCHIVOFS,dos);
					
					// java.util.Date
				
						writeDate(this.FECHA,dos);
					
					// String
				
						writeString(this.EXTENSION,dos);
					
					// int
				
		            	dos.writeInt(this.PADRE_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ESTADO="+String.valueOf(ESTADO));
		sb.append(",ARCHIVO="+ARCHIVO);
		sb.append(",TARCHIVOS_ID="+String.valueOf(TARCHIVOS_ID));
		sb.append(",USUARIOS_ID="+String.valueOf(USUARIOS_ID));
		sb.append(",CODIGO="+CODIGO);
		sb.append(",ARCHIVOFS="+ARCHIVOFS);
		sb.append(",FECHA="+String.valueOf(FECHA));
		sb.append(",EXTENSION="+EXTENSION);
		sb.append(",PADRE_ID="+String.valueOf(PADRE_ID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(out6Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row11Struct implements routines.system.IPersistableRow<row11Struct> {
    final static byte[] commonByteArrayLock_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion = new byte[0];
    static byte[] commonByteArray_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion = new byte[0];

	
			    public int ESTADO;

				public int getESTADO () {
					return this.ESTADO;
				}

				public Boolean ESTADOIsNullable(){
				    return false;
				}
				public Boolean ESTADOIsKey(){
				    return false;
				}
				public Integer ESTADOLength(){
				    return 22;
				}
				public Integer ESTADOPrecision(){
				    return 0;
				}
				public String ESTADODefault(){
				
					return "1";
				
				}
				public String ESTADOComment(){
				
				    return "Estado del trabajo (1 Activo - 2 Realizado - 3 Fallido - 4 Cancelado)";
				
				}
				public String ESTADOPattern(){
				
					return "";
				
				}
				public String ESTADOOriginalDbColumnName(){
				
					return "ESTADO";
				
				}

				
			    public String ARCHIVO;

				public String getARCHIVO () {
					return this.ARCHIVO;
				}

				public Boolean ARCHIVOIsNullable(){
				    return false;
				}
				public Boolean ARCHIVOIsKey(){
				    return false;
				}
				public Integer ARCHIVOLength(){
				    return 100;
				}
				public Integer ARCHIVOPrecision(){
				    return 0;
				}
				public String ARCHIVODefault(){
				
					return null;
				
				}
				public String ARCHIVOComment(){
				
				    return "Nombre del archivo";
				
				}
				public String ARCHIVOPattern(){
				
					return "";
				
				}
				public String ARCHIVOOriginalDbColumnName(){
				
					return "ARCHIVO";
				
				}

				
			    public int TARCHIVOS_ID;

				public int getTARCHIVOS_ID () {
					return this.TARCHIVOS_ID;
				}

				public Boolean TARCHIVOS_IDIsNullable(){
				    return false;
				}
				public Boolean TARCHIVOS_IDIsKey(){
				    return false;
				}
				public Integer TARCHIVOS_IDLength(){
				    return 22;
				}
				public Integer TARCHIVOS_IDPrecision(){
				    return 0;
				}
				public String TARCHIVOS_IDDefault(){
				
					return null;
				
				}
				public String TARCHIVOS_IDComment(){
				
				    return "FK - AFI_TARCHIVOS";
				
				}
				public String TARCHIVOS_IDPattern(){
				
					return "";
				
				}
				public String TARCHIVOS_IDOriginalDbColumnName(){
				
					return "TARCHIVOS_ID";
				
				}

				
			    public int USUARIOS_ID;

				public int getUSUARIOS_ID () {
					return this.USUARIOS_ID;
				}

				public Boolean USUARIOS_IDIsNullable(){
				    return false;
				}
				public Boolean USUARIOS_IDIsKey(){
				    return false;
				}
				public Integer USUARIOS_IDLength(){
				    return 22;
				}
				public Integer USUARIOS_IDPrecision(){
				    return 0;
				}
				public String USUARIOS_IDDefault(){
				
					return null;
				
				}
				public String USUARIOS_IDComment(){
				
				    return "FK - GEN_USUARIOS (Usuario que subio el archivo)";
				
				}
				public String USUARIOS_IDPattern(){
				
					return "";
				
				}
				public String USUARIOS_IDOriginalDbColumnName(){
				
					return "USUARIOS_ID";
				
				}

				
			    public String CODIGO;

				public String getCODIGO () {
					return this.CODIGO;
				}

				public Boolean CODIGOIsNullable(){
				    return false;
				}
				public Boolean CODIGOIsKey(){
				    return false;
				}
				public Integer CODIGOLength(){
				    return 10;
				}
				public Integer CODIGOPrecision(){
				    return 0;
				}
				public String CODIGODefault(){
				
					return null;
				
				}
				public String CODIGOComment(){
				
				    return "Codigo de identificacion del archivo";
				
				}
				public String CODIGOPattern(){
				
					return "";
				
				}
				public String CODIGOOriginalDbColumnName(){
				
					return "CODIGO";
				
				}

				
			    public String ARCHIVOFS;

				public String getARCHIVOFS () {
					return this.ARCHIVOFS;
				}

				public Boolean ARCHIVOFSIsNullable(){
				    return false;
				}
				public Boolean ARCHIVOFSIsKey(){
				    return false;
				}
				public Integer ARCHIVOFSLength(){
				    return 100;
				}
				public Integer ARCHIVOFSPrecision(){
				    return 0;
				}
				public String ARCHIVOFSDefault(){
				
					return null;
				
				}
				public String ARCHIVOFSComment(){
				
				    return "Nombre del archivo en el File System";
				
				}
				public String ARCHIVOFSPattern(){
				
					return "";
				
				}
				public String ARCHIVOFSOriginalDbColumnName(){
				
					return "ARCHIVOFS";
				
				}

				
			    public java.util.Date FECHA;

				public java.util.Date getFECHA () {
					return this.FECHA;
				}

				public Boolean FECHAIsNullable(){
				    return false;
				}
				public Boolean FECHAIsKey(){
				    return false;
				}
				public Integer FECHALength(){
				    return 7;
				}
				public Integer FECHAPrecision(){
				    return 0;
				}
				public String FECHADefault(){
				
					return null;
				
				}
				public String FECHAComment(){
				
				    return "Fecha y hora del registro";
				
				}
				public String FECHAPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String FECHAOriginalDbColumnName(){
				
					return "FECHA";
				
				}

				
			    public String EXTENSION;

				public String getEXTENSION () {
					return this.EXTENSION;
				}

				public Boolean EXTENSIONIsNullable(){
				    return false;
				}
				public Boolean EXTENSIONIsKey(){
				    return false;
				}
				public Integer EXTENSIONLength(){
				    return 0;
				}
				public Integer EXTENSIONPrecision(){
				    return 0;
				}
				public String EXTENSIONDefault(){
				
					return null;
				
				}
				public String EXTENSIONComment(){
				
				    return "";
				
				}
				public String EXTENSIONPattern(){
				
					return "";
				
				}
				public String EXTENSIONOriginalDbColumnName(){
				
					return "EXTENSION";
				
				}

				
			    public int PADRE_ID;

				public int getPADRE_ID () {
					return this.PADRE_ID;
				}

				public Boolean PADRE_IDIsNullable(){
				    return false;
				}
				public Boolean PADRE_IDIsKey(){
				    return false;
				}
				public Integer PADRE_IDLength(){
				    return 0;
				}
				public Integer PADRE_IDPrecision(){
				    return 0;
				}
				public String PADRE_IDDefault(){
				
					return null;
				
				}
				public String PADRE_IDComment(){
				
				    return "";
				
				}
				public String PADRE_IDPattern(){
				
					return "";
				
				}
				public String PADRE_IDOriginalDbColumnName(){
				
					return "PADRE_ID";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion.length) {
				if(length < 1024 && commonByteArray_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion.length == 0) {
   					commonByteArray_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion = new byte[1024];
				} else {
   					commonByteArray_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion, 0, length);
			strReturn = new String(commonByteArray_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion.length) {
				if(length < 1024 && commonByteArray_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion.length == 0) {
   					commonByteArray_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion = new byte[1024];
				} else {
   					commonByteArray_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion, 0, length);
			strReturn = new String(commonByteArray_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion) {

        	try {

        		int length = 0;
		
			        this.ESTADO = dis.readInt();
					
					this.ARCHIVO = readString(dis);
					
			        this.TARCHIVOS_ID = dis.readInt();
					
			        this.USUARIOS_ID = dis.readInt();
					
					this.CODIGO = readString(dis);
					
					this.ARCHIVOFS = readString(dis);
					
					this.FECHA = readDate(dis);
					
					this.EXTENSION = readString(dis);
					
			        this.PADRE_ID = dis.readInt();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion) {

        	try {

        		int length = 0;
		
			        this.ESTADO = dis.readInt();
					
					this.ARCHIVO = readString(dis);
					
			        this.TARCHIVOS_ID = dis.readInt();
					
			        this.USUARIOS_ID = dis.readInt();
					
					this.CODIGO = readString(dis);
					
					this.ARCHIVOFS = readString(dis);
					
					this.FECHA = readDate(dis);
					
					this.EXTENSION = readString(dis);
					
			        this.PADRE_ID = dis.readInt();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.ESTADO);
					
					// String
				
						writeString(this.ARCHIVO,dos);
					
					// int
				
		            	dos.writeInt(this.TARCHIVOS_ID);
					
					// int
				
		            	dos.writeInt(this.USUARIOS_ID);
					
					// String
				
						writeString(this.CODIGO,dos);
					
					// String
				
						writeString(this.ARCHIVOFS,dos);
					
					// java.util.Date
				
						writeDate(this.FECHA,dos);
					
					// String
				
						writeString(this.EXTENSION,dos);
					
					// int
				
		            	dos.writeInt(this.PADRE_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.ESTADO);
					
					// String
				
						writeString(this.ARCHIVO,dos);
					
					// int
				
		            	dos.writeInt(this.TARCHIVOS_ID);
					
					// int
				
		            	dos.writeInt(this.USUARIOS_ID);
					
					// String
				
						writeString(this.CODIGO,dos);
					
					// String
				
						writeString(this.ARCHIVOFS,dos);
					
					// java.util.Date
				
						writeDate(this.FECHA,dos);
					
					// String
				
						writeString(this.EXTENSION,dos);
					
					// int
				
		            	dos.writeInt(this.PADRE_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ESTADO="+String.valueOf(ESTADO));
		sb.append(",ARCHIVO="+ARCHIVO);
		sb.append(",TARCHIVOS_ID="+String.valueOf(TARCHIVOS_ID));
		sb.append(",USUARIOS_ID="+String.valueOf(USUARIOS_ID));
		sb.append(",CODIGO="+CODIGO);
		sb.append(",ARCHIVOFS="+ARCHIVOFS);
		sb.append(",FECHA="+String.valueOf(FECHA));
		sb.append(",EXTENSION="+EXTENSION);
		sb.append(",PADRE_ID="+String.valueOf(PADRE_ID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row11Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class after_tFixedFlowInput_1Struct implements routines.system.IPersistableRow<after_tFixedFlowInput_1Struct> {
    final static byte[] commonByteArrayLock_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion = new byte[0];
    static byte[] commonByteArray_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion = new byte[0];

	
			    public int ESTADO;

				public int getESTADO () {
					return this.ESTADO;
				}

				public Boolean ESTADOIsNullable(){
				    return false;
				}
				public Boolean ESTADOIsKey(){
				    return false;
				}
				public Integer ESTADOLength(){
				    return 22;
				}
				public Integer ESTADOPrecision(){
				    return 0;
				}
				public String ESTADODefault(){
				
					return "1";
				
				}
				public String ESTADOComment(){
				
				    return "Estado del trabajo (1 Activo - 2 Realizado - 3 Fallido - 4 Cancelado)";
				
				}
				public String ESTADOPattern(){
				
					return "";
				
				}
				public String ESTADOOriginalDbColumnName(){
				
					return "ESTADO";
				
				}

				
			    public String ARCHIVO;

				public String getARCHIVO () {
					return this.ARCHIVO;
				}

				public Boolean ARCHIVOIsNullable(){
				    return false;
				}
				public Boolean ARCHIVOIsKey(){
				    return false;
				}
				public Integer ARCHIVOLength(){
				    return 100;
				}
				public Integer ARCHIVOPrecision(){
				    return 0;
				}
				public String ARCHIVODefault(){
				
					return null;
				
				}
				public String ARCHIVOComment(){
				
				    return "Nombre del archivo";
				
				}
				public String ARCHIVOPattern(){
				
					return "";
				
				}
				public String ARCHIVOOriginalDbColumnName(){
				
					return "ARCHIVO";
				
				}

				
			    public int TARCHIVOS_ID;

				public int getTARCHIVOS_ID () {
					return this.TARCHIVOS_ID;
				}

				public Boolean TARCHIVOS_IDIsNullable(){
				    return false;
				}
				public Boolean TARCHIVOS_IDIsKey(){
				    return false;
				}
				public Integer TARCHIVOS_IDLength(){
				    return 22;
				}
				public Integer TARCHIVOS_IDPrecision(){
				    return 0;
				}
				public String TARCHIVOS_IDDefault(){
				
					return null;
				
				}
				public String TARCHIVOS_IDComment(){
				
				    return "FK - AFI_TARCHIVOS";
				
				}
				public String TARCHIVOS_IDPattern(){
				
					return "";
				
				}
				public String TARCHIVOS_IDOriginalDbColumnName(){
				
					return "TARCHIVOS_ID";
				
				}

				
			    public int USUARIOS_ID;

				public int getUSUARIOS_ID () {
					return this.USUARIOS_ID;
				}

				public Boolean USUARIOS_IDIsNullable(){
				    return false;
				}
				public Boolean USUARIOS_IDIsKey(){
				    return false;
				}
				public Integer USUARIOS_IDLength(){
				    return 22;
				}
				public Integer USUARIOS_IDPrecision(){
				    return 0;
				}
				public String USUARIOS_IDDefault(){
				
					return null;
				
				}
				public String USUARIOS_IDComment(){
				
				    return "FK - GEN_USUARIOS (Usuario que subio el archivo)";
				
				}
				public String USUARIOS_IDPattern(){
				
					return "";
				
				}
				public String USUARIOS_IDOriginalDbColumnName(){
				
					return "USUARIOS_ID";
				
				}

				
			    public String CODIGO;

				public String getCODIGO () {
					return this.CODIGO;
				}

				public Boolean CODIGOIsNullable(){
				    return false;
				}
				public Boolean CODIGOIsKey(){
				    return false;
				}
				public Integer CODIGOLength(){
				    return 10;
				}
				public Integer CODIGOPrecision(){
				    return 0;
				}
				public String CODIGODefault(){
				
					return null;
				
				}
				public String CODIGOComment(){
				
				    return "Codigo de identificacion del archivo";
				
				}
				public String CODIGOPattern(){
				
					return "";
				
				}
				public String CODIGOOriginalDbColumnName(){
				
					return "CODIGO";
				
				}

				
			    public String ARCHIVOFS;

				public String getARCHIVOFS () {
					return this.ARCHIVOFS;
				}

				public Boolean ARCHIVOFSIsNullable(){
				    return false;
				}
				public Boolean ARCHIVOFSIsKey(){
				    return false;
				}
				public Integer ARCHIVOFSLength(){
				    return 100;
				}
				public Integer ARCHIVOFSPrecision(){
				    return 0;
				}
				public String ARCHIVOFSDefault(){
				
					return null;
				
				}
				public String ARCHIVOFSComment(){
				
				    return "Nombre del archivo en el File System";
				
				}
				public String ARCHIVOFSPattern(){
				
					return "";
				
				}
				public String ARCHIVOFSOriginalDbColumnName(){
				
					return "ARCHIVOFS";
				
				}

				
			    public java.util.Date FECHA;

				public java.util.Date getFECHA () {
					return this.FECHA;
				}

				public Boolean FECHAIsNullable(){
				    return false;
				}
				public Boolean FECHAIsKey(){
				    return false;
				}
				public Integer FECHALength(){
				    return 7;
				}
				public Integer FECHAPrecision(){
				    return 0;
				}
				public String FECHADefault(){
				
					return null;
				
				}
				public String FECHAComment(){
				
				    return "Fecha y hora del registro";
				
				}
				public String FECHAPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String FECHAOriginalDbColumnName(){
				
					return "FECHA";
				
				}

				
			    public String EXTENSION;

				public String getEXTENSION () {
					return this.EXTENSION;
				}

				public Boolean EXTENSIONIsNullable(){
				    return false;
				}
				public Boolean EXTENSIONIsKey(){
				    return false;
				}
				public Integer EXTENSIONLength(){
				    return 0;
				}
				public Integer EXTENSIONPrecision(){
				    return 0;
				}
				public String EXTENSIONDefault(){
				
					return null;
				
				}
				public String EXTENSIONComment(){
				
				    return "";
				
				}
				public String EXTENSIONPattern(){
				
					return "";
				
				}
				public String EXTENSIONOriginalDbColumnName(){
				
					return "EXTENSION";
				
				}

				
			    public int PADRE_ID;

				public int getPADRE_ID () {
					return this.PADRE_ID;
				}

				public Boolean PADRE_IDIsNullable(){
				    return false;
				}
				public Boolean PADRE_IDIsKey(){
				    return false;
				}
				public Integer PADRE_IDLength(){
				    return 0;
				}
				public Integer PADRE_IDPrecision(){
				    return 0;
				}
				public String PADRE_IDDefault(){
				
					return null;
				
				}
				public String PADRE_IDComment(){
				
				    return "";
				
				}
				public String PADRE_IDPattern(){
				
					return "";
				
				}
				public String PADRE_IDOriginalDbColumnName(){
				
					return "PADRE_ID";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion.length) {
				if(length < 1024 && commonByteArray_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion.length == 0) {
   					commonByteArray_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion = new byte[1024];
				} else {
   					commonByteArray_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion, 0, length);
			strReturn = new String(commonByteArray_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion.length) {
				if(length < 1024 && commonByteArray_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion.length == 0) {
   					commonByteArray_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion = new byte[1024];
				} else {
   					commonByteArray_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion, 0, length);
			strReturn = new String(commonByteArray_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion) {

        	try {

        		int length = 0;
		
			        this.ESTADO = dis.readInt();
					
					this.ARCHIVO = readString(dis);
					
			        this.TARCHIVOS_ID = dis.readInt();
					
			        this.USUARIOS_ID = dis.readInt();
					
					this.CODIGO = readString(dis);
					
					this.ARCHIVOFS = readString(dis);
					
					this.FECHA = readDate(dis);
					
					this.EXTENSION = readString(dis);
					
			        this.PADRE_ID = dis.readInt();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion) {

        	try {

        		int length = 0;
		
			        this.ESTADO = dis.readInt();
					
					this.ARCHIVO = readString(dis);
					
			        this.TARCHIVOS_ID = dis.readInt();
					
			        this.USUARIOS_ID = dis.readInt();
					
					this.CODIGO = readString(dis);
					
					this.ARCHIVOFS = readString(dis);
					
					this.FECHA = readDate(dis);
					
					this.EXTENSION = readString(dis);
					
			        this.PADRE_ID = dis.readInt();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.ESTADO);
					
					// String
				
						writeString(this.ARCHIVO,dos);
					
					// int
				
		            	dos.writeInt(this.TARCHIVOS_ID);
					
					// int
				
		            	dos.writeInt(this.USUARIOS_ID);
					
					// String
				
						writeString(this.CODIGO,dos);
					
					// String
				
						writeString(this.ARCHIVOFS,dos);
					
					// java.util.Date
				
						writeDate(this.FECHA,dos);
					
					// String
				
						writeString(this.EXTENSION,dos);
					
					// int
				
		            	dos.writeInt(this.PADRE_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.ESTADO);
					
					// String
				
						writeString(this.ARCHIVO,dos);
					
					// int
				
		            	dos.writeInt(this.TARCHIVOS_ID);
					
					// int
				
		            	dos.writeInt(this.USUARIOS_ID);
					
					// String
				
						writeString(this.CODIGO,dos);
					
					// String
				
						writeString(this.ARCHIVOFS,dos);
					
					// java.util.Date
				
						writeDate(this.FECHA,dos);
					
					// String
				
						writeString(this.EXTENSION,dos);
					
					// int
				
		            	dos.writeInt(this.PADRE_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ESTADO="+String.valueOf(ESTADO));
		sb.append(",ARCHIVO="+ARCHIVO);
		sb.append(",TARCHIVOS_ID="+String.valueOf(TARCHIVOS_ID));
		sb.append(",USUARIOS_ID="+String.valueOf(USUARIOS_ID));
		sb.append(",CODIGO="+CODIGO);
		sb.append(",ARCHIVOFS="+ARCHIVOFS);
		sb.append(",FECHA="+String.valueOf(FECHA));
		sb.append(",EXTENSION="+EXTENSION);
		sb.append(",PADRE_ID="+String.valueOf(PADRE_ID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(after_tFixedFlowInput_1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tFixedFlowInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFixedFlowInput_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;


		tOracleInput_4Process(globalMap);

		row11Struct row11 = new row11Struct();
out6Struct out6 = new out6Struct();





	
	/**
	 * [tOracleOutput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleOutput_1", false);
		start_Hash.put("tOracleOutput_1", System.currentTimeMillis());
		
	
	currentComponent="tOracleOutput_1";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"out6");
					}
				
		int tos_count_tOracleOutput_1 = 0;
		






    
    int nb_line_tOracleOutput_1 = 0;
    int nb_line_update_tOracleOutput_1 = 0;
    int nb_line_inserted_tOracleOutput_1 = 0;
    int nb_line_deleted_tOracleOutput_1 = 0;
    int nb_line_rejected_tOracleOutput_1 = 0;

    int tmp_batchUpdateCount_tOracleOutput_1 = 0;

    int deletedCount_tOracleOutput_1=0;
    int updatedCount_tOracleOutput_1=0;
    int insertedCount_tOracleOutput_1=0;
    int rowsToCommitCount_tOracleOutput_1=0;
    int rejectedCount_tOracleOutput_1=0;

    boolean whetherReject_tOracleOutput_1 = false;

    java.sql.Connection conn_tOracleOutput_1 = null;

    //optional table
    String dbschema_tOracleOutput_1 = null;
    String tableName_tOracleOutput_1 = null;
        dbschema_tOracleOutput_1 = (String)globalMap.get("dbschema_tOracleConnection_1");
		
        conn_tOracleOutput_1 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");
        int count_tOracleOutput_1=0;

        if(dbschema_tOracleOutput_1 == null || dbschema_tOracleOutput_1.trim().length() == 0) {
            tableName_tOracleOutput_1 = ("AFI_ARCHIVOS");
        } else {
            tableName_tOracleOutput_1 = dbschema_tOracleOutput_1 + "." + ("AFI_ARCHIVOS");
        }
                String insert_tOracleOutput_1 = "INSERT INTO " + tableName_tOracleOutput_1 + " (ESTADO,ARCHIVO,TARCHIVOS_ID,USUARIOS_ID,CODIGO,ARCHIVOFS,FECHA,EXTENSION,PADRE_ID) VALUES (?,?,?,?,?,?,?,?,?)";    

                        java.sql.PreparedStatement pstmt_tOracleOutput_1 = conn_tOracleOutput_1.prepareStatement(insert_tOracleOutput_1);
                        resourceMap.put("pstmt_tOracleOutput_1", pstmt_tOracleOutput_1);





 



/**
 * [tOracleOutput_1 begin ] stop
 */



	
	/**
	 * [tMap_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_2", false);
		start_Hash.put("tMap_2", System.currentTimeMillis());
		
	
	currentComponent="tMap_2";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row11");
					}
				
		int tos_count_tMap_2 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row10Struct> tHash_Lookup_row10 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row10Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row10Struct>) 
					globalMap.get( "tHash_Lookup_row10" ))
					;					
					
	

row10Struct row10HashKey = new row10Struct();
row10Struct row10Default = new row10Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_2__Struct  {
}
Var__tMap_2__Struct Var__tMap_2 = new Var__tMap_2__Struct();
// ###############################

// ###############################
// # Outputs initialization
out6Struct out6_tmp = new out6Struct();
// ###############################

        
        



        









 



/**
 * [tMap_2 begin ] stop
 */



	
	/**
	 * [tFixedFlowInput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFixedFlowInput_1", false);
		start_Hash.put("tFixedFlowInput_1", System.currentTimeMillis());
		
	
	currentComponent="tFixedFlowInput_1";
	
	
		int tos_count_tFixedFlowInput_1 = 0;
		

	    for (int i_tFixedFlowInput_1 = 0 ; i_tFixedFlowInput_1 < 1 ; i_tFixedFlowInput_1++) {
	                	            	
    	            		row11.ESTADO = context.estArchivoProcesado;
    	            	        	            	
    	            		row11.ARCHIVO = "MINSALUD ETAPA 3 MULTIAFILIACIONES GENERADO "+context.idProceso;
    	            	        	            	
    	            		row11.TARCHIVOS_ID = context.tipoArchivoMinSaludEtapa3MultiafiliacionGenerado;
    	            	        	            	
    	            		row11.USUARIOS_ID = context.infoUsuarioIdArchivo;
    	            	        	            	
    	            		row11.CODIGO = "AFI_" + context.tipoArchivoMinSaludEtapa3MultiafiliacionGenerado + "_"+context.infoUsuarioIdArchivo;
    	            	        	            	
    	            		row11.ARCHIVOFS = context.archivoSalida+".CSV";
    	            	        	            	
    	            		row11.FECHA = TalendDate.getCurrentDate();
    	            	        	            	
    	            		row11.EXTENSION = "CSV";
    	            	        	            	
    	            		row11.PADRE_ID = context.infoIdArchivo;
    	            	

 



/**
 * [tFixedFlowInput_1 begin ] stop
 */
	
	/**
	 * [tFixedFlowInput_1 main ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_1";
	
	

 


	tos_count_tFixedFlowInput_1++;

/**
 * [tFixedFlowInput_1 main ] stop
 */
	
	/**
	 * [tFixedFlowInput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_1";
	
	

 



/**
 * [tFixedFlowInput_1 process_data_begin ] stop
 */

	
	/**
	 * [tMap_2 main ] start
	 */

	

	
	
	currentComponent="tMap_2";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row11"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_2 = false;
		
						row10Struct row10 = null;
					
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_2 = false;
		boolean mainRowRejected_tMap_2 = false;
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row10" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow10 = false;
       		  	    	
       		  	    	
 							row10Struct row10ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_2) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_2 = false;
								
                        		    		    row10HashKey.CODIGO = row11.TARCHIVOS_ID ;
                        		    		

								
		                        	row10HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row10.lookup( row10HashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row10 != null && tHash_Lookup_row10.getCount(row10HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row10' and it contains more one result from keys :  row10.CODIGO = '" + row10HashKey.CODIGO + "'");
								} // G 071
							

							
                    		  	 
							   
                    		  	 
	       		  	    	row10Struct fromLookup_row10 = null;
							row10 = row10Default;
										 
							
								 
							
							
								if (tHash_Lookup_row10 !=null && tHash_Lookup_row10.hasNext()) { // G 099
								
							
								
								fromLookup_row10 = tHash_Lookup_row10.next();

							
							
								} // G 099
							
							

							if(fromLookup_row10 != null) {
								row10 = fromLookup_row10;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_2__Struct Var = Var__tMap_2;// ###############################
        // ###############################
        // # Output tables

out6 = null;


// # Output table : 'out6'
out6_tmp.ESTADO = row11.ESTADO;
out6_tmp.ARCHIVO = row11.ARCHIVO;
out6_tmp.TARCHIVOS_ID = row10.ID;
out6_tmp.USUARIOS_ID = row11.USUARIOS_ID ;
out6_tmp.CODIGO = row11.CODIGO ;
out6_tmp.ARCHIVOFS = row11.ARCHIVOFS ;
out6_tmp.FECHA = row11.FECHA ;
out6_tmp.EXTENSION = row11.EXTENSION ;
out6_tmp.PADRE_ID = row11.PADRE_ID ;
out6 = out6_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_2 = false;










 


	tos_count_tMap_2++;

/**
 * [tMap_2 main ] stop
 */
	
	/**
	 * [tMap_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_2";
	
	

 



/**
 * [tMap_2 process_data_begin ] stop
 */
// Start of branch "out6"
if(out6 != null) { 



	
	/**
	 * [tOracleOutput_1 main ] start
	 */

	

	
	
	currentComponent="tOracleOutput_1";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"out6"
						
						);
					}
					



        whetherReject_tOracleOutput_1 = false;
                        pstmt_tOracleOutput_1.setInt(1, out6.ESTADO);

                        if(out6.ARCHIVO == null) {
pstmt_tOracleOutput_1.setNull(2, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_1.setString(2, out6.ARCHIVO);
}

                        pstmt_tOracleOutput_1.setInt(3, out6.TARCHIVOS_ID);

                        pstmt_tOracleOutput_1.setInt(4, out6.USUARIOS_ID);

                        if(out6.CODIGO == null) {
pstmt_tOracleOutput_1.setNull(5, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_1.setString(5, out6.CODIGO);
}

                        if(out6.ARCHIVOFS == null) {
pstmt_tOracleOutput_1.setNull(6, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_1.setString(6, out6.ARCHIVOFS);
}

                        if(out6.FECHA != null) {
pstmt_tOracleOutput_1.setObject(7, new java.sql.Timestamp(out6.FECHA.getTime()),java.sql.Types.DATE);
} else {
pstmt_tOracleOutput_1.setNull(7, java.sql.Types.DATE);
}

                        if(out6.EXTENSION == null) {
pstmt_tOracleOutput_1.setNull(8, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_1.setString(8, out6.EXTENSION);
}

                        pstmt_tOracleOutput_1.setInt(9, out6.PADRE_ID);

                try {
                    nb_line_tOracleOutput_1++;
                    int processedCount_tOracleOutput_1 = pstmt_tOracleOutput_1.executeUpdate();
                    insertedCount_tOracleOutput_1 += processedCount_tOracleOutput_1;
                    rowsToCommitCount_tOracleOutput_1 += processedCount_tOracleOutput_1;
                } catch(java.lang.Exception e_tOracleOutput_1) {
globalMap.put("tOracleOutput_1_ERROR_MESSAGE",e_tOracleOutput_1.getMessage());
                    whetherReject_tOracleOutput_1 = true;
                            System.err.print(e_tOracleOutput_1.getMessage());
                }
            if(!whetherReject_tOracleOutput_1) {
            }

 


	tos_count_tOracleOutput_1++;

/**
 * [tOracleOutput_1 main ] stop
 */
	
	/**
	 * [tOracleOutput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleOutput_1";
	
	

 



/**
 * [tOracleOutput_1 process_data_begin ] stop
 */
	
	/**
	 * [tOracleOutput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_1";
	
	

 



/**
 * [tOracleOutput_1 process_data_end ] stop
 */

} // End of branch "out6"




	
	/**
	 * [tMap_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_2";
	
	

 



/**
 * [tMap_2 process_data_end ] stop
 */



	
	/**
	 * [tFixedFlowInput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_1";
	
	

 



/**
 * [tFixedFlowInput_1 process_data_end ] stop
 */
	
	/**
	 * [tFixedFlowInput_1 end ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_1";
	
	

        }
        globalMap.put("tFixedFlowInput_1_NB_LINE", 1);        

 

ok_Hash.put("tFixedFlowInput_1", true);
end_Hash.put("tFixedFlowInput_1", System.currentTimeMillis());




/**
 * [tFixedFlowInput_1 end ] stop
 */

	
	/**
	 * [tMap_2 end ] start
	 */

	

	
	
	currentComponent="tMap_2";
	
	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_row10 != null) {
						tHash_Lookup_row10.endGet();
					}
					globalMap.remove( "tHash_Lookup_row10" );

					
					
				
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row11");
			  	}
			  	
 

ok_Hash.put("tMap_2", true);
end_Hash.put("tMap_2", System.currentTimeMillis());




/**
 * [tMap_2 end ] stop
 */

	
	/**
	 * [tOracleOutput_1 end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_1";
	
	
	



	
        if(pstmt_tOracleOutput_1 != null) {
			
				pstmt_tOracleOutput_1.close();
				resourceMap.remove("pstmt_tOracleOutput_1");
			
        }
    resourceMap.put("statementClosed_tOracleOutput_1", true);

	
	nb_line_deleted_tOracleOutput_1=nb_line_deleted_tOracleOutput_1+ deletedCount_tOracleOutput_1;
	nb_line_update_tOracleOutput_1=nb_line_update_tOracleOutput_1 + updatedCount_tOracleOutput_1;
	nb_line_inserted_tOracleOutput_1=nb_line_inserted_tOracleOutput_1 + insertedCount_tOracleOutput_1;
	nb_line_rejected_tOracleOutput_1=nb_line_rejected_tOracleOutput_1 + rejectedCount_tOracleOutput_1;
	
        globalMap.put("tOracleOutput_1_NB_LINE",nb_line_tOracleOutput_1);
        globalMap.put("tOracleOutput_1_NB_LINE_UPDATED",nb_line_update_tOracleOutput_1);
        globalMap.put("tOracleOutput_1_NB_LINE_INSERTED",nb_line_inserted_tOracleOutput_1);
        globalMap.put("tOracleOutput_1_NB_LINE_DELETED",nb_line_deleted_tOracleOutput_1);
        globalMap.put("tOracleOutput_1_NB_LINE_REJECTED", nb_line_rejected_tOracleOutput_1);
    

	



				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"out6");
			  	}
			  	
 

ok_Hash.put("tOracleOutput_1", true);
end_Hash.put("tOracleOutput_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk13", 0, "ok");
				}
				tOracleClose_1Process(globalMap);



/**
 * [tOracleOutput_1 end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
					     			//free memory for "tMap_2"
					     			globalMap.remove("tHash_Lookup_row10"); 
				     			
				try{
					
	
	/**
	 * [tFixedFlowInput_1 finally ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_1";
	
	

 



/**
 * [tFixedFlowInput_1 finally ] stop
 */

	
	/**
	 * [tMap_2 finally ] start
	 */

	

	
	
	currentComponent="tMap_2";
	
	

 



/**
 * [tMap_2 finally ] stop
 */

	
	/**
	 * [tOracleOutput_1 finally ] start
	 */

	

	
	
	currentComponent="tOracleOutput_1";
	
	



    if (resourceMap.get("statementClosed_tOracleOutput_1") == null) {
                java.sql.PreparedStatement pstmtToClose_tOracleOutput_1 = null;
                if ((pstmtToClose_tOracleOutput_1 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tOracleOutput_1")) != null) {
                    pstmtToClose_tOracleOutput_1.close();
                }
    }
 



/**
 * [tOracleOutput_1 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFixedFlowInput_1_SUBPROCESS_STATE", 1);
	}
	


public void tOracleClose_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleClose_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tOracleClose_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleClose_1", false);
		start_Hash.put("tOracleClose_1", System.currentTimeMillis());
		
	
	currentComponent="tOracleClose_1";
	
	
		int tos_count_tOracleClose_1 = 0;
		

 



/**
 * [tOracleClose_1 begin ] stop
 */
	
	/**
	 * [tOracleClose_1 main ] start
	 */

	

	
	
	currentComponent="tOracleClose_1";
	
	

	java.sql.Connection conn_tOracleClose_1 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");
	
	if(conn_tOracleClose_1 != null && !conn_tOracleClose_1.isClosed())
	{
		
			conn_tOracleClose_1.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_tOracleConnection_1"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
	}

 


	tos_count_tOracleClose_1++;

/**
 * [tOracleClose_1 main ] stop
 */
	
	/**
	 * [tOracleClose_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleClose_1";
	
	

 



/**
 * [tOracleClose_1 process_data_begin ] stop
 */
	
	/**
	 * [tOracleClose_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleClose_1";
	
	

 



/**
 * [tOracleClose_1 process_data_end ] stop
 */
	
	/**
	 * [tOracleClose_1 end ] start
	 */

	

	
	
	currentComponent="tOracleClose_1";
	
	

 

ok_Hash.put("tOracleClose_1", true);
end_Hash.put("tOracleClose_1", System.currentTimeMillis());




/**
 * [tOracleClose_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleClose_1 finally ] start
	 */

	

	
	
	currentComponent="tOracleClose_1";
	
	

 



/**
 * [tOracleClose_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleClose_1_SUBPROCESS_STATE", 1);
	}
	


public static class row10Struct implements routines.system.IPersistableComparableLookupRow<row10Struct> {
    final static byte[] commonByteArrayLock_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion = new byte[0];
    static byte[] commonByteArray_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public int ID;

				public int getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return false;
				}
				public Boolean IDIsKey(){
				    return true;
				}
				public Integer IDLength(){
				    return 22;
				}
				public Integer IDPrecision(){
				    return 0;
				}
				public String IDDefault(){
				
					return "SALUDSIS\".\"ISEQ$$_100689\".nextval";
				
				}
				public String IDComment(){
				
				    return "PK- Llave primaria";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public String NOMBRE;

				public String getNOMBRE () {
					return this.NOMBRE;
				}

				public Boolean NOMBREIsNullable(){
				    return false;
				}
				public Boolean NOMBREIsKey(){
				    return false;
				}
				public Integer NOMBRELength(){
				    return 50;
				}
				public Integer NOMBREPrecision(){
				    return 0;
				}
				public String NOMBREDefault(){
				
					return null;
				
				}
				public String NOMBREComment(){
				
				    return "Nombre del tipo de archivo";
				
				}
				public String NOMBREPattern(){
				
					return "";
				
				}
				public String NOMBREOriginalDbColumnName(){
				
					return "NOMBRE";
				
				}

				
			    public Integer CODIGO;

				public Integer getCODIGO () {
					return this.CODIGO;
				}

				public Boolean CODIGOIsNullable(){
				    return true;
				}
				public Boolean CODIGOIsKey(){
				    return false;
				}
				public Integer CODIGOLength(){
				    return 22;
				}
				public Integer CODIGOPrecision(){
				    return 0;
				}
				public String CODIGODefault(){
				
					return null;
				
				}
				public String CODIGOComment(){
				
				    return "Codigo del archivo";
				
				}
				public String CODIGOPattern(){
				
					return "";
				
				}
				public String CODIGOOriginalDbColumnName(){
				
					return "CODIGO";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.CODIGO == null) ? 0 : this.CODIGO.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row10Struct other = (row10Struct) obj;
		
						if (this.CODIGO == null) {
							if (other.CODIGO != null)
								return false;
						
						} else if (!this.CODIGO.equals(other.CODIGO))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row10Struct other) {

		other.ID = this.ID;
	            other.NOMBRE = this.NOMBRE;
	            other.CODIGO = this.CODIGO;
	            
	}

	public void copyKeysDataTo(row10Struct other) {

		other.CODIGO = this.CODIGO;
	            	
	}



	
	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			unmarshaller.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private void writeString(String str, DataOutputStream dos, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion) {

        	try {

        		int length = 0;
		
						this.CODIGO = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion) {

        	try {

        		int length = 0;
		
						this.CODIGO = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.CODIGO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.CODIGO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
			            this.ID = dis.readInt();
					
						this.NOMBRE = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		
			            this.ID = objectIn.readInt();
					
						this.NOMBRE = readString(dis,objectIn);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
		            	dos.writeInt(this.ID);
					
						writeString(this.NOMBRE, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
					objectOut.writeInt(this.ID);
					
						writeString(this.NOMBRE, dos, objectOut);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",NOMBRE="+NOMBRE);
		sb.append(",CODIGO="+String.valueOf(CODIGO));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row10Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.CODIGO, other.CODIGO);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_4Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_4_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row10Struct row10 = new row10Struct();




	
	/**
	 * [tAdvancedHash_row10 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row10", false);
		start_Hash.put("tAdvancedHash_row10", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row10";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row10");
					}
				
		int tos_count_tAdvancedHash_row10 = 0;
		

			   		// connection name:row10
			   		// source node:tOracleInput_4 - inputs:(after_tFixedFlowInput_1) outputs:(row10,row10) | target node:tAdvancedHash_row10 - inputs:(row10) outputs:()
			   		// linked node: tMap_2 - inputs:(row11,row10) outputs:(out6)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row10 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row10Struct> tHash_Lookup_row10 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row10Struct>getLookup(matchingModeEnum_row10);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row10", tHash_Lookup_row10);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row10 begin ] stop
 */



	
	/**
	 * [tOracleInput_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_4", false);
		start_Hash.put("tOracleInput_4", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_4";
	
	
		int tos_count_tOracleInput_4 = 0;
		
	


	
		    int nb_line_tOracleInput_4 = 0;
		    java.sql.Connection conn_tOracleInput_4 = null;
				conn_tOracleInput_4 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");
				
                boolean isTimeZoneNull_tOracleInput_4 = false;
				boolean isConnectionWrapped_tOracleInput_4 = !(conn_tOracleInput_4 instanceof oracle.jdbc.OracleConnection) && conn_tOracleInput_4.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tOracleInput_4 = null;
                if (isConnectionWrapped_tOracleInput_4) {
					unwrappedOraConn_tOracleInput_4 = conn_tOracleInput_4.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tOracleInput_4 != null) {
                        isTimeZoneNull_tOracleInput_4 = (unwrappedOraConn_tOracleInput_4.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tOracleInput_4 = (((oracle.jdbc.OracleConnection)conn_tOracleInput_4).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tOracleInput_4) {
					java.sql.Statement stmtGetTZ_tOracleInput_4 = conn_tOracleInput_4.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_4 = stmtGetTZ_tOracleInput_4.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_4 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tOracleInput_4.next()) {
						sessionTimezone_tOracleInput_4 = rsGetTZ_tOracleInput_4.getString(1);
					}
					if (isConnectionWrapped_tOracleInput_4 && unwrappedOraConn_tOracleInput_4 != null) {
                        unwrappedOraConn_tOracleInput_4.setSessionTimeZone(sessionTimezone_tOracleInput_4);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_4).setSessionTimeZone(sessionTimezone_tOracleInput_4);
                    }
				}
			
		    
			java.sql.Statement stmt_tOracleInput_4 = conn_tOracleInput_4.createStatement();

		    String dbquery_tOracleInput_4 = "SELECT \n	TAR.ID, \n	TAR.NOMBRE, \n	TAR.CODIGO\nFROM\n	SALUDSIS.AFI_TARCHIVOS TAR\nWHERE\n	TAR.ESTREGISTRO_ID = 1";
		    

		    globalMap.put("tOracleInput_4_QUERY",dbquery_tOracleInput_4);

		    java.sql.ResultSet rs_tOracleInput_4 = null;

		    try {
		    	rs_tOracleInput_4 = stmt_tOracleInput_4.executeQuery(dbquery_tOracleInput_4);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_4 = rs_tOracleInput_4.getMetaData();
		    	int colQtyInRs_tOracleInput_4 = rsmd_tOracleInput_4.getColumnCount();

		    String tmpContent_tOracleInput_4 = null;
		    
		    
		    while (rs_tOracleInput_4.next()) {
		        nb_line_tOracleInput_4++;
		        
							if(colQtyInRs_tOracleInput_4 < 1) {
								row10.ID = 0;
							} else {
		                          
					if(rs_tOracleInput_4.getObject(1) != null) {
						row10.ID = rs_tOracleInput_4.getInt(1);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_4 < 2) {
								row10.NOMBRE = null;
							} else {
	                         		
        	row10.NOMBRE = routines.system.JDBCUtil.getString(rs_tOracleInput_4, 2, false);
		                    }
							if(colQtyInRs_tOracleInput_4 < 3) {
								row10.CODIGO = null;
							} else {
		                          
					if(rs_tOracleInput_4.getObject(3) != null) {
						row10.CODIGO = rs_tOracleInput_4.getInt(3);
					} else {
				
						row10.CODIGO = null;
					}
		                    }
					




 



/**
 * [tOracleInput_4 begin ] stop
 */
	
	/**
	 * [tOracleInput_4 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_4";
	
	

 


	tos_count_tOracleInput_4++;

/**
 * [tOracleInput_4 main ] stop
 */
	
	/**
	 * [tOracleInput_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_4";
	
	

 



/**
 * [tOracleInput_4 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row10 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row10";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row10"
						
						);
					}
					


			   
			   

					row10Struct row10_HashRow = new row10Struct();
		   	   	   
				
				row10_HashRow.ID = row10.ID;
				
				row10_HashRow.NOMBRE = row10.NOMBRE;
				
				row10_HashRow.CODIGO = row10.CODIGO;
				
			tHash_Lookup_row10.put(row10_HashRow);
			
            




 


	tos_count_tAdvancedHash_row10++;

/**
 * [tAdvancedHash_row10 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row10 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row10";
	
	

 



/**
 * [tAdvancedHash_row10 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row10 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row10";
	
	

 



/**
 * [tAdvancedHash_row10 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_4";
	
	

 



/**
 * [tOracleInput_4 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_4 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_4";
	
	

}
}finally{
	if (rs_tOracleInput_4 != null) {
		rs_tOracleInput_4.close();
	}
	if (stmt_tOracleInput_4 != null) {
		stmt_tOracleInput_4.close();
	}
}

globalMap.put("tOracleInput_4_NB_LINE",nb_line_tOracleInput_4);
 

ok_Hash.put("tOracleInput_4", true);
end_Hash.put("tOracleInput_4", System.currentTimeMillis());




/**
 * [tOracleInput_4 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row10 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row10";
	
	

tHash_Lookup_row10.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row10");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row10", true);
end_Hash.put("tAdvancedHash_row10", System.currentTimeMillis());




/**
 * [tAdvancedHash_row10 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleInput_4 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_4";
	
	

 



/**
 * [tOracleInput_4 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row10 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row10";
	
	

 



/**
 * [tAdvancedHash_row10 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_4_SUBPROCESS_STATE", 1);
	}
	


public void tPrejob_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPrejob_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tPrejob_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tPrejob_1", false);
		start_Hash.put("tPrejob_1", System.currentTimeMillis());
		
	
	currentComponent="tPrejob_1";
	
	
		int tos_count_tPrejob_1 = 0;
		

 



/**
 * [tPrejob_1 begin ] stop
 */
	
	/**
	 * [tPrejob_1 main ] start
	 */

	

	
	
	currentComponent="tPrejob_1";
	
	

 


	tos_count_tPrejob_1++;

/**
 * [tPrejob_1 main ] stop
 */
	
	/**
	 * [tPrejob_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tPrejob_1";
	
	

 



/**
 * [tPrejob_1 process_data_begin ] stop
 */
	
	/**
	 * [tPrejob_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tPrejob_1";
	
	

 



/**
 * [tPrejob_1 process_data_end ] stop
 */
	
	/**
	 * [tPrejob_1 end ] start
	 */

	

	
	
	currentComponent="tPrejob_1";
	
	

 

ok_Hash.put("tPrejob_1", true);
end_Hash.put("tPrejob_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk5", 0, "ok");
				}
				tFileInputXML_1Process(globalMap);



/**
 * [tPrejob_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPrejob_1 finally ] start
	 */

	

	
	
	currentComponent="tPrejob_1";
	
	

 



/**
 * [tPrejob_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPrejob_1_SUBPROCESS_STATE", 1);
	}
	


public static class row6Struct implements routines.system.IPersistableRow<row6Struct> {
    final static byte[] commonByteArrayLock_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion = new byte[0];
    static byte[] commonByteArray_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion = new byte[0];

	
			    public String Host;

				public String getHost () {
					return this.Host;
				}

				public Boolean HostIsNullable(){
				    return true;
				}
				public Boolean HostIsKey(){
				    return false;
				}
				public Integer HostLength(){
				    return 13;
				}
				public Integer HostPrecision(){
				    return 0;
				}
				public String HostDefault(){
				
					return null;
				
				}
				public String HostComment(){
				
				    return "";
				
				}
				public String HostPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String HostOriginalDbColumnName(){
				
					return "Host";
				
				}

				
			    public String Port;

				public String getPort () {
					return this.Port;
				}

				public Boolean PortIsNullable(){
				    return true;
				}
				public Boolean PortIsKey(){
				    return false;
				}
				public Integer PortLength(){
				    return 4;
				}
				public Integer PortPrecision(){
				    return 0;
				}
				public String PortDefault(){
				
					return null;
				
				}
				public String PortComment(){
				
				    return "";
				
				}
				public String PortPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String PortOriginalDbColumnName(){
				
					return "Port";
				
				}

				
			    public String Sid;

				public String getSid () {
					return this.Sid;
				}

				public Boolean SidIsNullable(){
				    return true;
				}
				public Boolean SidIsKey(){
				    return false;
				}
				public Integer SidLength(){
				    return 4;
				}
				public Integer SidPrecision(){
				    return 0;
				}
				public String SidDefault(){
				
					return null;
				
				}
				public String SidComment(){
				
				    return "";
				
				}
				public String SidPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String SidOriginalDbColumnName(){
				
					return "Sid";
				
				}

				
			    public String ServiceName;

				public String getServiceName () {
					return this.ServiceName;
				}

				public Boolean ServiceNameIsNullable(){
				    return true;
				}
				public Boolean ServiceNameIsKey(){
				    return false;
				}
				public Integer ServiceNameLength(){
				    return 9;
				}
				public Integer ServiceNamePrecision(){
				    return 0;
				}
				public String ServiceNameDefault(){
				
					return null;
				
				}
				public String ServiceNameComment(){
				
				    return "";
				
				}
				public String ServiceNamePattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String ServiceNameOriginalDbColumnName(){
				
					return "ServiceName";
				
				}

				
			    public String Schema;

				public String getSchema () {
					return this.Schema;
				}

				public Boolean SchemaIsNullable(){
				    return true;
				}
				public Boolean SchemaIsKey(){
				    return false;
				}
				public Integer SchemaLength(){
				    return 8;
				}
				public Integer SchemaPrecision(){
				    return 0;
				}
				public String SchemaDefault(){
				
					return null;
				
				}
				public String SchemaComment(){
				
				    return "";
				
				}
				public String SchemaPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String SchemaOriginalDbColumnName(){
				
					return "Schema";
				
				}

				
			    public String User;

				public String getUser () {
					return this.User;
				}

				public Boolean UserIsNullable(){
				    return true;
				}
				public Boolean UserIsKey(){
				    return false;
				}
				public Integer UserLength(){
				    return 8;
				}
				public Integer UserPrecision(){
				    return 0;
				}
				public String UserDefault(){
				
					return null;
				
				}
				public String UserComment(){
				
				    return "";
				
				}
				public String UserPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String UserOriginalDbColumnName(){
				
					return "User";
				
				}

				
			    public String Password;

				public String getPassword () {
					return this.Password;
				}

				public Boolean PasswordIsNullable(){
				    return true;
				}
				public Boolean PasswordIsKey(){
				    return false;
				}
				public Integer PasswordLength(){
				    return 11;
				}
				public Integer PasswordPrecision(){
				    return 0;
				}
				public String PasswordDefault(){
				
					return null;
				
				}
				public String PasswordComment(){
				
				    return "";
				
				}
				public String PasswordPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String PasswordOriginalDbColumnName(){
				
					return "Password";
				
				}

				
			    public String PathStorage;

				public String getPathStorage () {
					return this.PathStorage;
				}

				public Boolean PathStorageIsNullable(){
				    return true;
				}
				public Boolean PathStorageIsKey(){
				    return false;
				}
				public Integer PathStorageLength(){
				    return 44;
				}
				public Integer PathStoragePrecision(){
				    return 0;
				}
				public String PathStorageDefault(){
				
					return null;
				
				}
				public String PathStorageComment(){
				
				    return "";
				
				}
				public String PathStoragePattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String PathStorageOriginalDbColumnName(){
				
					return "PathStorage";
				
				}

				
			    public String SMTPHost;

				public String getSMTPHost () {
					return this.SMTPHost;
				}

				public Boolean SMTPHostIsNullable(){
				    return true;
				}
				public Boolean SMTPHostIsKey(){
				    return false;
				}
				public Integer SMTPHostLength(){
				    return 14;
				}
				public Integer SMTPHostPrecision(){
				    return 0;
				}
				public String SMTPHostDefault(){
				
					return null;
				
				}
				public String SMTPHostComment(){
				
				    return "";
				
				}
				public String SMTPHostPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String SMTPHostOriginalDbColumnName(){
				
					return "SMTPHost";
				
				}

				
			    public String SMTPPort;

				public String getSMTPPort () {
					return this.SMTPPort;
				}

				public Boolean SMTPPortIsNullable(){
				    return true;
				}
				public Boolean SMTPPortIsKey(){
				    return false;
				}
				public Integer SMTPPortLength(){
				    return 3;
				}
				public Integer SMTPPortPrecision(){
				    return 0;
				}
				public String SMTPPortDefault(){
				
					return null;
				
				}
				public String SMTPPortComment(){
				
				    return "";
				
				}
				public String SMTPPortPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String SMTPPortOriginalDbColumnName(){
				
					return "SMTPPort";
				
				}

				
			    public String UsernameMail;

				public String getUsernameMail () {
					return this.UsernameMail;
				}

				public Boolean UsernameMailIsNullable(){
				    return true;
				}
				public Boolean UsernameMailIsKey(){
				    return false;
				}
				public Integer UsernameMailLength(){
				    return 34;
				}
				public Integer UsernameMailPrecision(){
				    return 0;
				}
				public String UsernameMailDefault(){
				
					return null;
				
				}
				public String UsernameMailComment(){
				
				    return "";
				
				}
				public String UsernameMailPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String UsernameMailOriginalDbColumnName(){
				
					return "UsernameMail";
				
				}

				
			    public String PasswordMail;

				public String getPasswordMail () {
					return this.PasswordMail;
				}

				public Boolean PasswordMailIsNullable(){
				    return true;
				}
				public Boolean PasswordMailIsKey(){
				    return false;
				}
				public Integer PasswordMailLength(){
				    return 13;
				}
				public Integer PasswordMailPrecision(){
				    return 0;
				}
				public String PasswordMailDefault(){
				
					return null;
				
				}
				public String PasswordMailComment(){
				
				    return "";
				
				}
				public String PasswordMailPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String PasswordMailOriginalDbColumnName(){
				
					return "PasswordMail";
				
				}

				
			    public String JasperServer;

				public String getJasperServer () {
					return this.JasperServer;
				}

				public Boolean JasperServerIsNullable(){
				    return true;
				}
				public Boolean JasperServerIsKey(){
				    return false;
				}
				public Integer JasperServerLength(){
				    return 15;
				}
				public Integer JasperServerPrecision(){
				    return 0;
				}
				public String JasperServerDefault(){
				
					return null;
				
				}
				public String JasperServerComment(){
				
				    return "";
				
				}
				public String JasperServerPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String JasperServerOriginalDbColumnName(){
				
					return "JasperServer";
				
				}

				
			    public String JasperUser;

				public String getJasperUser () {
					return this.JasperUser;
				}

				public Boolean JasperUserIsNullable(){
				    return true;
				}
				public Boolean JasperUserIsKey(){
				    return false;
				}
				public Integer JasperUserLength(){
				    return 9;
				}
				public Integer JasperUserPrecision(){
				    return 0;
				}
				public String JasperUserDefault(){
				
					return null;
				
				}
				public String JasperUserComment(){
				
				    return "";
				
				}
				public String JasperUserPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String JasperUserOriginalDbColumnName(){
				
					return "JasperUser";
				
				}

				
			    public String JasperPassword;

				public String getJasperPassword () {
					return this.JasperPassword;
				}

				public Boolean JasperPasswordIsNullable(){
				    return true;
				}
				public Boolean JasperPasswordIsKey(){
				    return false;
				}
				public Integer JasperPasswordLength(){
				    return 9;
				}
				public Integer JasperPasswordPrecision(){
				    return 0;
				}
				public String JasperPasswordDefault(){
				
					return null;
				
				}
				public String JasperPasswordComment(){
				
				    return "";
				
				}
				public String JasperPasswordPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String JasperPasswordOriginalDbColumnName(){
				
					return "JasperPassword";
				
				}

				
			    public String JasperModulo;

				public String getJasperModulo () {
					return this.JasperModulo;
				}

				public Boolean JasperModuloIsNullable(){
				    return true;
				}
				public Boolean JasperModuloIsKey(){
				    return false;
				}
				public Integer JasperModuloLength(){
				    return 10;
				}
				public Integer JasperModuloPrecision(){
				    return 0;
				}
				public String JasperModuloDefault(){
				
					return null;
				
				}
				public String JasperModuloComment(){
				
				    return "";
				
				}
				public String JasperModuloPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String JasperModuloOriginalDbColumnName(){
				
					return "JasperModulo";
				
				}

				
			    public String JasperAmbiente;

				public String getJasperAmbiente () {
					return this.JasperAmbiente;
				}

				public Boolean JasperAmbienteIsNullable(){
				    return true;
				}
				public Boolean JasperAmbienteIsKey(){
				    return false;
				}
				public Integer JasperAmbienteLength(){
				    return 8;
				}
				public Integer JasperAmbientePrecision(){
				    return 0;
				}
				public String JasperAmbienteDefault(){
				
					return null;
				
				}
				public String JasperAmbienteComment(){
				
				    return "";
				
				}
				public String JasperAmbientePattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String JasperAmbienteOriginalDbColumnName(){
				
					return "JasperAmbiente";
				
				}

				
			    public String JasperReporte;

				public String getJasperReporte () {
					return this.JasperReporte;
				}

				public Boolean JasperReporteIsNullable(){
				    return true;
				}
				public Boolean JasperReporteIsKey(){
				    return false;
				}
				public Integer JasperReporteLength(){
				    return 12;
				}
				public Integer JasperReportePrecision(){
				    return 0;
				}
				public String JasperReporteDefault(){
				
					return null;
				
				}
				public String JasperReporteComment(){
				
				    return "";
				
				}
				public String JasperReportePattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String JasperReporteOriginalDbColumnName(){
				
					return "JasperReporte";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion.length) {
				if(length < 1024 && commonByteArray_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion.length == 0) {
   					commonByteArray_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion = new byte[1024];
				} else {
   					commonByteArray_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion, 0, length);
			strReturn = new String(commonByteArray_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion.length) {
				if(length < 1024 && commonByteArray_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion.length == 0) {
   					commonByteArray_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion = new byte[1024];
				} else {
   					commonByteArray_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion, 0, length);
			strReturn = new String(commonByteArray_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion) {

        	try {

        		int length = 0;
		
					this.Host = readString(dis);
					
					this.Port = readString(dis);
					
					this.Sid = readString(dis);
					
					this.ServiceName = readString(dis);
					
					this.Schema = readString(dis);
					
					this.User = readString(dis);
					
					this.Password = readString(dis);
					
					this.PathStorage = readString(dis);
					
					this.SMTPHost = readString(dis);
					
					this.SMTPPort = readString(dis);
					
					this.UsernameMail = readString(dis);
					
					this.PasswordMail = readString(dis);
					
					this.JasperServer = readString(dis);
					
					this.JasperUser = readString(dis);
					
					this.JasperPassword = readString(dis);
					
					this.JasperModulo = readString(dis);
					
					this.JasperAmbiente = readString(dis);
					
					this.JasperReporte = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion) {

        	try {

        		int length = 0;
		
					this.Host = readString(dis);
					
					this.Port = readString(dis);
					
					this.Sid = readString(dis);
					
					this.ServiceName = readString(dis);
					
					this.Schema = readString(dis);
					
					this.User = readString(dis);
					
					this.Password = readString(dis);
					
					this.PathStorage = readString(dis);
					
					this.SMTPHost = readString(dis);
					
					this.SMTPPort = readString(dis);
					
					this.UsernameMail = readString(dis);
					
					this.PasswordMail = readString(dis);
					
					this.JasperServer = readString(dis);
					
					this.JasperUser = readString(dis);
					
					this.JasperPassword = readString(dis);
					
					this.JasperModulo = readString(dis);
					
					this.JasperAmbiente = readString(dis);
					
					this.JasperReporte = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.Host,dos);
					
					// String
				
						writeString(this.Port,dos);
					
					// String
				
						writeString(this.Sid,dos);
					
					// String
				
						writeString(this.ServiceName,dos);
					
					// String
				
						writeString(this.Schema,dos);
					
					// String
				
						writeString(this.User,dos);
					
					// String
				
						writeString(this.Password,dos);
					
					// String
				
						writeString(this.PathStorage,dos);
					
					// String
				
						writeString(this.SMTPHost,dos);
					
					// String
				
						writeString(this.SMTPPort,dos);
					
					// String
				
						writeString(this.UsernameMail,dos);
					
					// String
				
						writeString(this.PasswordMail,dos);
					
					// String
				
						writeString(this.JasperServer,dos);
					
					// String
				
						writeString(this.JasperUser,dos);
					
					// String
				
						writeString(this.JasperPassword,dos);
					
					// String
				
						writeString(this.JasperModulo,dos);
					
					// String
				
						writeString(this.JasperAmbiente,dos);
					
					// String
				
						writeString(this.JasperReporte,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.Host,dos);
					
					// String
				
						writeString(this.Port,dos);
					
					// String
				
						writeString(this.Sid,dos);
					
					// String
				
						writeString(this.ServiceName,dos);
					
					// String
				
						writeString(this.Schema,dos);
					
					// String
				
						writeString(this.User,dos);
					
					// String
				
						writeString(this.Password,dos);
					
					// String
				
						writeString(this.PathStorage,dos);
					
					// String
				
						writeString(this.SMTPHost,dos);
					
					// String
				
						writeString(this.SMTPPort,dos);
					
					// String
				
						writeString(this.UsernameMail,dos);
					
					// String
				
						writeString(this.PasswordMail,dos);
					
					// String
				
						writeString(this.JasperServer,dos);
					
					// String
				
						writeString(this.JasperUser,dos);
					
					// String
				
						writeString(this.JasperPassword,dos);
					
					// String
				
						writeString(this.JasperModulo,dos);
					
					// String
				
						writeString(this.JasperAmbiente,dos);
					
					// String
				
						writeString(this.JasperReporte,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Host="+Host);
		sb.append(",Port="+Port);
		sb.append(",Sid="+Sid);
		sb.append(",ServiceName="+ServiceName);
		sb.append(",Schema="+Schema);
		sb.append(",User="+User);
		sb.append(",Password="+Password);
		sb.append(",PathStorage="+PathStorage);
		sb.append(",SMTPHost="+SMTPHost);
		sb.append(",SMTPPort="+SMTPPort);
		sb.append(",UsernameMail="+UsernameMail);
		sb.append(",PasswordMail="+PasswordMail);
		sb.append(",JasperServer="+JasperServer);
		sb.append(",JasperUser="+JasperUser);
		sb.append(",JasperPassword="+JasperPassword);
		sb.append(",JasperModulo="+JasperModulo);
		sb.append(",JasperAmbiente="+JasperAmbiente);
		sb.append(",JasperReporte="+JasperReporte);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row6Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tFileInputXML_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileInputXML_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row6Struct row6 = new row6Struct();




	
	/**
	 * [tJavaRow_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaRow_1", false);
		start_Hash.put("tJavaRow_1", System.currentTimeMillis());
		
	
	currentComponent="tJavaRow_1";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row6");
					}
				
		int tos_count_tJavaRow_1 = 0;
		

int nb_line_tJavaRow_1 = 0;

 



/**
 * [tJavaRow_1 begin ] stop
 */



	
	/**
	 * [tFileInputXML_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputXML_1", false);
		start_Hash.put("tFileInputXML_1", System.currentTimeMillis());
		
	
	currentComponent="tFileInputXML_1";
	
	
		int tos_count_tFileInputXML_1 = 0;
		

	

int nb_line_tFileInputXML_1 = 0;

	String os_tFileInputXML_1 = System.getProperty("os.name").toLowerCase();
	boolean isWindows_tFileInputXML_1=false;
	if(os_tFileInputXML_1.indexOf("windows") > -1 || os_tFileInputXML_1.indexOf("nt") > -1){
		isWindows_tFileInputXML_1=true;
	}
class NameSpaceTool_tFileInputXML_1 {

    public java.util.HashMap<String, String> xmlNameSpaceMap = new java.util.HashMap<String, String>();
    
	private java.util.List<String> defualtNSPath = new java.util.ArrayList<String>();

    public void countNSMap(org.dom4j.Element el) {
        for (org.dom4j.Namespace ns : (java.util.List<org.dom4j.Namespace>) el.declaredNamespaces()) {
            if (ns.getPrefix().trim().length() == 0) {
                xmlNameSpaceMap.put("pre"+defualtNSPath.size(), ns.getURI());
                String path = "";
                org.dom4j.Element elTmp = el;
                while (elTmp != null) {
                	if (elTmp.getNamespacePrefix() != null && elTmp.getNamespacePrefix().length() > 0) {
                        path = "/" + elTmp.getNamespacePrefix() + ":" + elTmp.getName() + path;
                    } else {
                        path = "/" + elTmp.getName() + path;
                    }
                    elTmp = elTmp.getParent();
                }
                defualtNSPath.add(path);
            } else {
                xmlNameSpaceMap.put(ns.getPrefix(), ns.getURI());
            }

        }
        for (org.dom4j.Element e : (java.util.List<org.dom4j.Element>) el.elements()) {
            countNSMap(e);
        }
    }
    
    private final org.talend.xpath.XPathUtil util = new  org.talend.xpath.XPathUtil();
    
    {
    	util.setDefaultNSPath(defualtNSPath);
    }
    
	public String addDefaultNSPrefix(String path) {
		return util.addDefaultNSPrefix(path);
	}
	
	public String addDefaultNSPrefix(String relativeXpression, String basePath) {
		return util.addDefaultNSPrefix(relativeXpression,basePath);
	}
    
}

class XML_API_tFileInputXML_1{
	public boolean isDefNull(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
        if (node != null && node instanceof org.dom4j.Element) {
        	org.dom4j.Attribute attri = ((org.dom4j.Element)node).attribute("nil");
        	if(attri != null && ("true").equals(attri.getText())){
            	return true;
            }
        }
        return false;
    }

    public boolean isMissing(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
        return node == null ? true : false;
    }

    public boolean isEmpty(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
        if (node != null) {
            return node.getStringValue().isEmpty();
        }
        return false;
    }
}


org.dom4j.io.SAXReader reader_tFileInputXML_1 = new org.dom4j.io.SAXReader();
Object filename_tFileInputXML_1 = null;
try {
	filename_tFileInputXML_1 = context.archivoConfiguracion;
} catch(java.lang.Exception e) {
globalMap.put("tFileInputXML_1_ERROR_MESSAGE",e.getMessage());
	
	
	System.err.println(e.getMessage());
	
}
if(filename_tFileInputXML_1 != null && filename_tFileInputXML_1 instanceof String && filename_tFileInputXML_1.toString().startsWith("//")){
	if (!isWindows_tFileInputXML_1){
		filename_tFileInputXML_1 = filename_tFileInputXML_1.toString().replaceFirst("//","/");
	}
}

boolean isValidFile_tFileInputXML_1 = true;
org.dom4j.Document doc_tFileInputXML_1 = null;
java.io.Closeable toClose_tFileInputXML_1 = null;
try{
	if(filename_tFileInputXML_1 instanceof java.io.InputStream){
		java.io.InputStream inputStream_tFileInputXML_1 = (java.io.InputStream)filename_tFileInputXML_1;
		toClose_tFileInputXML_1 = inputStream_tFileInputXML_1;
		doc_tFileInputXML_1 = reader_tFileInputXML_1.read(inputStream_tFileInputXML_1);
	}else{
		java.io.Reader unicodeReader_tFileInputXML_1 = new UnicodeReader(new java.io.FileInputStream(String.valueOf(filename_tFileInputXML_1)),"UTF-8");
		toClose_tFileInputXML_1 = unicodeReader_tFileInputXML_1;
		org.xml.sax.InputSource in_tFileInputXML_1= new org.xml.sax.InputSource(unicodeReader_tFileInputXML_1);
		doc_tFileInputXML_1 = reader_tFileInputXML_1.read(in_tFileInputXML_1);
	}
}catch(java.lang.Exception e){
globalMap.put("tFileInputXML_1_ERROR_MESSAGE",e.getMessage());
	
	System.err.println(e.getMessage());
	isValidFile_tFileInputXML_1 = false;
} finally {
	if(toClose_tFileInputXML_1!=null) {
		toClose_tFileInputXML_1.close();
	}
}
if(isValidFile_tFileInputXML_1){
NameSpaceTool_tFileInputXML_1 nsTool_tFileInputXML_1 = new NameSpaceTool_tFileInputXML_1();
nsTool_tFileInputXML_1.countNSMap(doc_tFileInputXML_1.getRootElement());
java.util.HashMap<String,String> xmlNameSpaceMap_tFileInputXML_1 = nsTool_tFileInputXML_1.xmlNameSpaceMap;  

org.dom4j.XPath x_tFileInputXML_1 = doc_tFileInputXML_1.createXPath(nsTool_tFileInputXML_1.addDefaultNSPrefix("/connectionStrings"));  
x_tFileInputXML_1.setNamespaceURIs(xmlNameSpaceMap_tFileInputXML_1); 

java.util.List<org.dom4j.Node> nodeList_tFileInputXML_1 = (java.util.List<org.dom4j.Node>)x_tFileInputXML_1.selectNodes(doc_tFileInputXML_1);	
XML_API_tFileInputXML_1 xml_api_tFileInputXML_1 = new XML_API_tFileInputXML_1();
String str_tFileInputXML_1 = "";
org.dom4j.Node node_tFileInputXML_1 = null;

//init all mapping xpaths
java.util.Map<Integer,org.dom4j.XPath> xpaths_tFileInputXML_1=new java.util.HashMap<Integer,org.dom4j.XPath>();
	class XPathUtil_tFileInputXML_1{
	
			   public void initXPaths_0(java.util.Map<Integer,org.dom4j.XPath> xpaths,NameSpaceTool_tFileInputXML_1 nsTool,
			       java.util.HashMap<String,String> xmlNameSpaceMap){
			
	org.dom4j.XPath xpath_0 = org.dom4j.DocumentHelper.createXPath(nsTool.addDefaultNSPrefix("Host","/connectionStrings"));
	xpath_0.setNamespaceURIs(xmlNameSpaceMap);
	
			xpaths.put(0,xpath_0);
			
	org.dom4j.XPath xpath_1 = org.dom4j.DocumentHelper.createXPath(nsTool.addDefaultNSPrefix("Port","/connectionStrings"));
	xpath_1.setNamespaceURIs(xmlNameSpaceMap);
	
			xpaths.put(1,xpath_1);
			
	org.dom4j.XPath xpath_2 = org.dom4j.DocumentHelper.createXPath(nsTool.addDefaultNSPrefix("Sid","/connectionStrings"));
	xpath_2.setNamespaceURIs(xmlNameSpaceMap);
	
			xpaths.put(2,xpath_2);
			
	org.dom4j.XPath xpath_3 = org.dom4j.DocumentHelper.createXPath(nsTool.addDefaultNSPrefix("ServiceName","/connectionStrings"));
	xpath_3.setNamespaceURIs(xmlNameSpaceMap);
	
			xpaths.put(3,xpath_3);
			
	org.dom4j.XPath xpath_4 = org.dom4j.DocumentHelper.createXPath(nsTool.addDefaultNSPrefix("Schema","/connectionStrings"));
	xpath_4.setNamespaceURIs(xmlNameSpaceMap);
	
			xpaths.put(4,xpath_4);
			
	org.dom4j.XPath xpath_5 = org.dom4j.DocumentHelper.createXPath(nsTool.addDefaultNSPrefix("User","/connectionStrings"));
	xpath_5.setNamespaceURIs(xmlNameSpaceMap);
	
			xpaths.put(5,xpath_5);
			
	org.dom4j.XPath xpath_6 = org.dom4j.DocumentHelper.createXPath(nsTool.addDefaultNSPrefix("Password","/connectionStrings"));
	xpath_6.setNamespaceURIs(xmlNameSpaceMap);
	
			xpaths.put(6,xpath_6);
			
	org.dom4j.XPath xpath_7 = org.dom4j.DocumentHelper.createXPath(nsTool.addDefaultNSPrefix("PathStorage","/connectionStrings"));
	xpath_7.setNamespaceURIs(xmlNameSpaceMap);
	
			xpaths.put(7,xpath_7);
			
	org.dom4j.XPath xpath_8 = org.dom4j.DocumentHelper.createXPath(nsTool.addDefaultNSPrefix("SMTPHost","/connectionStrings"));
	xpath_8.setNamespaceURIs(xmlNameSpaceMap);
	
			xpaths.put(8,xpath_8);
			
	org.dom4j.XPath xpath_9 = org.dom4j.DocumentHelper.createXPath(nsTool.addDefaultNSPrefix("SMTPPort","/connectionStrings"));
	xpath_9.setNamespaceURIs(xmlNameSpaceMap);
	
			xpaths.put(9,xpath_9);
			
	org.dom4j.XPath xpath_10 = org.dom4j.DocumentHelper.createXPath(nsTool.addDefaultNSPrefix("UsernameMail","/connectionStrings"));
	xpath_10.setNamespaceURIs(xmlNameSpaceMap);
	
			xpaths.put(10,xpath_10);
			
	org.dom4j.XPath xpath_11 = org.dom4j.DocumentHelper.createXPath(nsTool.addDefaultNSPrefix("PasswordMail","/connectionStrings"));
	xpath_11.setNamespaceURIs(xmlNameSpaceMap);
	
			xpaths.put(11,xpath_11);
			
	org.dom4j.XPath xpath_12 = org.dom4j.DocumentHelper.createXPath(nsTool.addDefaultNSPrefix("JasperServer","/connectionStrings"));
	xpath_12.setNamespaceURIs(xmlNameSpaceMap);
	
			xpaths.put(12,xpath_12);
			
	org.dom4j.XPath xpath_13 = org.dom4j.DocumentHelper.createXPath(nsTool.addDefaultNSPrefix("JasperUser","/connectionStrings"));
	xpath_13.setNamespaceURIs(xmlNameSpaceMap);
	
			xpaths.put(13,xpath_13);
			
	org.dom4j.XPath xpath_14 = org.dom4j.DocumentHelper.createXPath(nsTool.addDefaultNSPrefix("JasperPassword","/connectionStrings"));
	xpath_14.setNamespaceURIs(xmlNameSpaceMap);
	
			xpaths.put(14,xpath_14);
			
	org.dom4j.XPath xpath_15 = org.dom4j.DocumentHelper.createXPath(nsTool.addDefaultNSPrefix("JasperModulo","/connectionStrings"));
	xpath_15.setNamespaceURIs(xmlNameSpaceMap);
	
			xpaths.put(15,xpath_15);
			
	org.dom4j.XPath xpath_16 = org.dom4j.DocumentHelper.createXPath(nsTool.addDefaultNSPrefix("JasperAmbiente","/connectionStrings"));
	xpath_16.setNamespaceURIs(xmlNameSpaceMap);
	
			xpaths.put(16,xpath_16);
			
	org.dom4j.XPath xpath_17 = org.dom4j.DocumentHelper.createXPath(nsTool.addDefaultNSPrefix("JasperReporte","/connectionStrings"));
	xpath_17.setNamespaceURIs(xmlNameSpaceMap);
	
			xpaths.put(17,xpath_17);
			
	     }
	   
	      public void initXPaths(java.util.Map<Integer,org.dom4j.XPath> xpaths,NameSpaceTool_tFileInputXML_1 nsTool,
			    java.util.HashMap<String,String> xmlNameSpaceMap){
			    
			        initXPaths_0(xpaths,nsTool, xmlNameSpaceMap);
			    
		   }
	}
	XPathUtil_tFileInputXML_1 xPathUtil_tFileInputXML_1 = new XPathUtil_tFileInputXML_1();
	xPathUtil_tFileInputXML_1.initXPaths(xpaths_tFileInputXML_1, nsTool_tFileInputXML_1, xmlNameSpaceMap_tFileInputXML_1);
for (org.dom4j.Node temp_tFileInputXML_1: nodeList_tFileInputXML_1) {
	if (nb_line_tFileInputXML_1>=50) {
	
		break;
	}
		nb_line_tFileInputXML_1++;
		
	row6 = null;			
	boolean whetherReject_tFileInputXML_1 = false;
	row6 = new row6Struct();
	try{
    Object obj0_tFileInputXML_1 = xpaths_tFileInputXML_1.get(0).evaluate(temp_tFileInputXML_1);
    if(obj0_tFileInputXML_1 == null) {
    	node_tFileInputXML_1 = null;
    	str_tFileInputXML_1 = "";
    	
    } else if(obj0_tFileInputXML_1 instanceof org.dom4j.Node) {
    	node_tFileInputXML_1 = (org.dom4j.Node)obj0_tFileInputXML_1;
    	str_tFileInputXML_1 = org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
    } else if(obj0_tFileInputXML_1 instanceof String || obj0_tFileInputXML_1 instanceof Number){
    	node_tFileInputXML_1 = temp_tFileInputXML_1;
    	str_tFileInputXML_1 = String.valueOf(obj0_tFileInputXML_1);
    } else if(obj0_tFileInputXML_1 instanceof java.util.List){
    	java.util.List<org.dom4j.Node> nodes_tFileInputXML_1 = (java.util.List<org.dom4j.Node>)obj0_tFileInputXML_1;
    	node_tFileInputXML_1 = nodes_tFileInputXML_1.size()>0 ? nodes_tFileInputXML_1.get(0) : null;
    	str_tFileInputXML_1 = node_tFileInputXML_1==null?"":org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
	}
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row6.Host =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row6.Host ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row6.Host =null;
									}else{
		row6.Host = str_tFileInputXML_1;
	}
    Object obj1_tFileInputXML_1 = xpaths_tFileInputXML_1.get(1).evaluate(temp_tFileInputXML_1);
    if(obj1_tFileInputXML_1 == null) {
    	node_tFileInputXML_1 = null;
    	str_tFileInputXML_1 = "";
    	
    } else if(obj1_tFileInputXML_1 instanceof org.dom4j.Node) {
    	node_tFileInputXML_1 = (org.dom4j.Node)obj1_tFileInputXML_1;
    	str_tFileInputXML_1 = org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
    } else if(obj1_tFileInputXML_1 instanceof String || obj1_tFileInputXML_1 instanceof Number){
    	node_tFileInputXML_1 = temp_tFileInputXML_1;
    	str_tFileInputXML_1 = String.valueOf(obj1_tFileInputXML_1);
    } else if(obj1_tFileInputXML_1 instanceof java.util.List){
    	java.util.List<org.dom4j.Node> nodes_tFileInputXML_1 = (java.util.List<org.dom4j.Node>)obj1_tFileInputXML_1;
    	node_tFileInputXML_1 = nodes_tFileInputXML_1.size()>0 ? nodes_tFileInputXML_1.get(0) : null;
    	str_tFileInputXML_1 = node_tFileInputXML_1==null?"":org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
	}
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row6.Port =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row6.Port ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row6.Port =null;
									}else{
		row6.Port = str_tFileInputXML_1;
	}
    Object obj2_tFileInputXML_1 = xpaths_tFileInputXML_1.get(2).evaluate(temp_tFileInputXML_1);
    if(obj2_tFileInputXML_1 == null) {
    	node_tFileInputXML_1 = null;
    	str_tFileInputXML_1 = "";
    	
    } else if(obj2_tFileInputXML_1 instanceof org.dom4j.Node) {
    	node_tFileInputXML_1 = (org.dom4j.Node)obj2_tFileInputXML_1;
    	str_tFileInputXML_1 = org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
    } else if(obj2_tFileInputXML_1 instanceof String || obj2_tFileInputXML_1 instanceof Number){
    	node_tFileInputXML_1 = temp_tFileInputXML_1;
    	str_tFileInputXML_1 = String.valueOf(obj2_tFileInputXML_1);
    } else if(obj2_tFileInputXML_1 instanceof java.util.List){
    	java.util.List<org.dom4j.Node> nodes_tFileInputXML_1 = (java.util.List<org.dom4j.Node>)obj2_tFileInputXML_1;
    	node_tFileInputXML_1 = nodes_tFileInputXML_1.size()>0 ? nodes_tFileInputXML_1.get(0) : null;
    	str_tFileInputXML_1 = node_tFileInputXML_1==null?"":org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
	}
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row6.Sid =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row6.Sid ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row6.Sid =null;
									}else{
		row6.Sid = str_tFileInputXML_1;
	}
    Object obj3_tFileInputXML_1 = xpaths_tFileInputXML_1.get(3).evaluate(temp_tFileInputXML_1);
    if(obj3_tFileInputXML_1 == null) {
    	node_tFileInputXML_1 = null;
    	str_tFileInputXML_1 = "";
    	
    } else if(obj3_tFileInputXML_1 instanceof org.dom4j.Node) {
    	node_tFileInputXML_1 = (org.dom4j.Node)obj3_tFileInputXML_1;
    	str_tFileInputXML_1 = org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
    } else if(obj3_tFileInputXML_1 instanceof String || obj3_tFileInputXML_1 instanceof Number){
    	node_tFileInputXML_1 = temp_tFileInputXML_1;
    	str_tFileInputXML_1 = String.valueOf(obj3_tFileInputXML_1);
    } else if(obj3_tFileInputXML_1 instanceof java.util.List){
    	java.util.List<org.dom4j.Node> nodes_tFileInputXML_1 = (java.util.List<org.dom4j.Node>)obj3_tFileInputXML_1;
    	node_tFileInputXML_1 = nodes_tFileInputXML_1.size()>0 ? nodes_tFileInputXML_1.get(0) : null;
    	str_tFileInputXML_1 = node_tFileInputXML_1==null?"":org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
	}
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row6.ServiceName =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row6.ServiceName ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row6.ServiceName =null;
									}else{
		row6.ServiceName = str_tFileInputXML_1;
	}
    Object obj4_tFileInputXML_1 = xpaths_tFileInputXML_1.get(4).evaluate(temp_tFileInputXML_1);
    if(obj4_tFileInputXML_1 == null) {
    	node_tFileInputXML_1 = null;
    	str_tFileInputXML_1 = "";
    	
    } else if(obj4_tFileInputXML_1 instanceof org.dom4j.Node) {
    	node_tFileInputXML_1 = (org.dom4j.Node)obj4_tFileInputXML_1;
    	str_tFileInputXML_1 = org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
    } else if(obj4_tFileInputXML_1 instanceof String || obj4_tFileInputXML_1 instanceof Number){
    	node_tFileInputXML_1 = temp_tFileInputXML_1;
    	str_tFileInputXML_1 = String.valueOf(obj4_tFileInputXML_1);
    } else if(obj4_tFileInputXML_1 instanceof java.util.List){
    	java.util.List<org.dom4j.Node> nodes_tFileInputXML_1 = (java.util.List<org.dom4j.Node>)obj4_tFileInputXML_1;
    	node_tFileInputXML_1 = nodes_tFileInputXML_1.size()>0 ? nodes_tFileInputXML_1.get(0) : null;
    	str_tFileInputXML_1 = node_tFileInputXML_1==null?"":org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
	}
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row6.Schema =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row6.Schema ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row6.Schema =null;
									}else{
		row6.Schema = str_tFileInputXML_1;
	}
    Object obj5_tFileInputXML_1 = xpaths_tFileInputXML_1.get(5).evaluate(temp_tFileInputXML_1);
    if(obj5_tFileInputXML_1 == null) {
    	node_tFileInputXML_1 = null;
    	str_tFileInputXML_1 = "";
    	
    } else if(obj5_tFileInputXML_1 instanceof org.dom4j.Node) {
    	node_tFileInputXML_1 = (org.dom4j.Node)obj5_tFileInputXML_1;
    	str_tFileInputXML_1 = org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
    } else if(obj5_tFileInputXML_1 instanceof String || obj5_tFileInputXML_1 instanceof Number){
    	node_tFileInputXML_1 = temp_tFileInputXML_1;
    	str_tFileInputXML_1 = String.valueOf(obj5_tFileInputXML_1);
    } else if(obj5_tFileInputXML_1 instanceof java.util.List){
    	java.util.List<org.dom4j.Node> nodes_tFileInputXML_1 = (java.util.List<org.dom4j.Node>)obj5_tFileInputXML_1;
    	node_tFileInputXML_1 = nodes_tFileInputXML_1.size()>0 ? nodes_tFileInputXML_1.get(0) : null;
    	str_tFileInputXML_1 = node_tFileInputXML_1==null?"":org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
	}
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row6.User =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row6.User ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row6.User =null;
									}else{
		row6.User = str_tFileInputXML_1;
	}
    Object obj6_tFileInputXML_1 = xpaths_tFileInputXML_1.get(6).evaluate(temp_tFileInputXML_1);
    if(obj6_tFileInputXML_1 == null) {
    	node_tFileInputXML_1 = null;
    	str_tFileInputXML_1 = "";
    	
    } else if(obj6_tFileInputXML_1 instanceof org.dom4j.Node) {
    	node_tFileInputXML_1 = (org.dom4j.Node)obj6_tFileInputXML_1;
    	str_tFileInputXML_1 = org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
    } else if(obj6_tFileInputXML_1 instanceof String || obj6_tFileInputXML_1 instanceof Number){
    	node_tFileInputXML_1 = temp_tFileInputXML_1;
    	str_tFileInputXML_1 = String.valueOf(obj6_tFileInputXML_1);
    } else if(obj6_tFileInputXML_1 instanceof java.util.List){
    	java.util.List<org.dom4j.Node> nodes_tFileInputXML_1 = (java.util.List<org.dom4j.Node>)obj6_tFileInputXML_1;
    	node_tFileInputXML_1 = nodes_tFileInputXML_1.size()>0 ? nodes_tFileInputXML_1.get(0) : null;
    	str_tFileInputXML_1 = node_tFileInputXML_1==null?"":org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
	}
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row6.Password =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row6.Password ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row6.Password =null;
									}else{
		row6.Password = str_tFileInputXML_1;
	}
    Object obj7_tFileInputXML_1 = xpaths_tFileInputXML_1.get(7).evaluate(temp_tFileInputXML_1);
    if(obj7_tFileInputXML_1 == null) {
    	node_tFileInputXML_1 = null;
    	str_tFileInputXML_1 = "";
    	
    } else if(obj7_tFileInputXML_1 instanceof org.dom4j.Node) {
    	node_tFileInputXML_1 = (org.dom4j.Node)obj7_tFileInputXML_1;
    	str_tFileInputXML_1 = org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
    } else if(obj7_tFileInputXML_1 instanceof String || obj7_tFileInputXML_1 instanceof Number){
    	node_tFileInputXML_1 = temp_tFileInputXML_1;
    	str_tFileInputXML_1 = String.valueOf(obj7_tFileInputXML_1);
    } else if(obj7_tFileInputXML_1 instanceof java.util.List){
    	java.util.List<org.dom4j.Node> nodes_tFileInputXML_1 = (java.util.List<org.dom4j.Node>)obj7_tFileInputXML_1;
    	node_tFileInputXML_1 = nodes_tFileInputXML_1.size()>0 ? nodes_tFileInputXML_1.get(0) : null;
    	str_tFileInputXML_1 = node_tFileInputXML_1==null?"":org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
	}
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row6.PathStorage =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row6.PathStorage ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row6.PathStorage =null;
									}else{
		row6.PathStorage = str_tFileInputXML_1;
	}
    Object obj8_tFileInputXML_1 = xpaths_tFileInputXML_1.get(8).evaluate(temp_tFileInputXML_1);
    if(obj8_tFileInputXML_1 == null) {
    	node_tFileInputXML_1 = null;
    	str_tFileInputXML_1 = "";
    	
    } else if(obj8_tFileInputXML_1 instanceof org.dom4j.Node) {
    	node_tFileInputXML_1 = (org.dom4j.Node)obj8_tFileInputXML_1;
    	str_tFileInputXML_1 = org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
    } else if(obj8_tFileInputXML_1 instanceof String || obj8_tFileInputXML_1 instanceof Number){
    	node_tFileInputXML_1 = temp_tFileInputXML_1;
    	str_tFileInputXML_1 = String.valueOf(obj8_tFileInputXML_1);
    } else if(obj8_tFileInputXML_1 instanceof java.util.List){
    	java.util.List<org.dom4j.Node> nodes_tFileInputXML_1 = (java.util.List<org.dom4j.Node>)obj8_tFileInputXML_1;
    	node_tFileInputXML_1 = nodes_tFileInputXML_1.size()>0 ? nodes_tFileInputXML_1.get(0) : null;
    	str_tFileInputXML_1 = node_tFileInputXML_1==null?"":org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
	}
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row6.SMTPHost =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row6.SMTPHost ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row6.SMTPHost =null;
									}else{
		row6.SMTPHost = str_tFileInputXML_1;
	}
    Object obj9_tFileInputXML_1 = xpaths_tFileInputXML_1.get(9).evaluate(temp_tFileInputXML_1);
    if(obj9_tFileInputXML_1 == null) {
    	node_tFileInputXML_1 = null;
    	str_tFileInputXML_1 = "";
    	
    } else if(obj9_tFileInputXML_1 instanceof org.dom4j.Node) {
    	node_tFileInputXML_1 = (org.dom4j.Node)obj9_tFileInputXML_1;
    	str_tFileInputXML_1 = org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
    } else if(obj9_tFileInputXML_1 instanceof String || obj9_tFileInputXML_1 instanceof Number){
    	node_tFileInputXML_1 = temp_tFileInputXML_1;
    	str_tFileInputXML_1 = String.valueOf(obj9_tFileInputXML_1);
    } else if(obj9_tFileInputXML_1 instanceof java.util.List){
    	java.util.List<org.dom4j.Node> nodes_tFileInputXML_1 = (java.util.List<org.dom4j.Node>)obj9_tFileInputXML_1;
    	node_tFileInputXML_1 = nodes_tFileInputXML_1.size()>0 ? nodes_tFileInputXML_1.get(0) : null;
    	str_tFileInputXML_1 = node_tFileInputXML_1==null?"":org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
	}
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row6.SMTPPort =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row6.SMTPPort ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row6.SMTPPort =null;
									}else{
		row6.SMTPPort = str_tFileInputXML_1;
	}
    Object obj10_tFileInputXML_1 = xpaths_tFileInputXML_1.get(10).evaluate(temp_tFileInputXML_1);
    if(obj10_tFileInputXML_1 == null) {
    	node_tFileInputXML_1 = null;
    	str_tFileInputXML_1 = "";
    	
    } else if(obj10_tFileInputXML_1 instanceof org.dom4j.Node) {
    	node_tFileInputXML_1 = (org.dom4j.Node)obj10_tFileInputXML_1;
    	str_tFileInputXML_1 = org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
    } else if(obj10_tFileInputXML_1 instanceof String || obj10_tFileInputXML_1 instanceof Number){
    	node_tFileInputXML_1 = temp_tFileInputXML_1;
    	str_tFileInputXML_1 = String.valueOf(obj10_tFileInputXML_1);
    } else if(obj10_tFileInputXML_1 instanceof java.util.List){
    	java.util.List<org.dom4j.Node> nodes_tFileInputXML_1 = (java.util.List<org.dom4j.Node>)obj10_tFileInputXML_1;
    	node_tFileInputXML_1 = nodes_tFileInputXML_1.size()>0 ? nodes_tFileInputXML_1.get(0) : null;
    	str_tFileInputXML_1 = node_tFileInputXML_1==null?"":org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
	}
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row6.UsernameMail =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row6.UsernameMail ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row6.UsernameMail =null;
									}else{
		row6.UsernameMail = str_tFileInputXML_1;
	}
    Object obj11_tFileInputXML_1 = xpaths_tFileInputXML_1.get(11).evaluate(temp_tFileInputXML_1);
    if(obj11_tFileInputXML_1 == null) {
    	node_tFileInputXML_1 = null;
    	str_tFileInputXML_1 = "";
    	
    } else if(obj11_tFileInputXML_1 instanceof org.dom4j.Node) {
    	node_tFileInputXML_1 = (org.dom4j.Node)obj11_tFileInputXML_1;
    	str_tFileInputXML_1 = org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
    } else if(obj11_tFileInputXML_1 instanceof String || obj11_tFileInputXML_1 instanceof Number){
    	node_tFileInputXML_1 = temp_tFileInputXML_1;
    	str_tFileInputXML_1 = String.valueOf(obj11_tFileInputXML_1);
    } else if(obj11_tFileInputXML_1 instanceof java.util.List){
    	java.util.List<org.dom4j.Node> nodes_tFileInputXML_1 = (java.util.List<org.dom4j.Node>)obj11_tFileInputXML_1;
    	node_tFileInputXML_1 = nodes_tFileInputXML_1.size()>0 ? nodes_tFileInputXML_1.get(0) : null;
    	str_tFileInputXML_1 = node_tFileInputXML_1==null?"":org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
	}
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row6.PasswordMail =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row6.PasswordMail ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row6.PasswordMail =null;
									}else{
		row6.PasswordMail = str_tFileInputXML_1;
	}
    Object obj12_tFileInputXML_1 = xpaths_tFileInputXML_1.get(12).evaluate(temp_tFileInputXML_1);
    if(obj12_tFileInputXML_1 == null) {
    	node_tFileInputXML_1 = null;
    	str_tFileInputXML_1 = "";
    	
    } else if(obj12_tFileInputXML_1 instanceof org.dom4j.Node) {
    	node_tFileInputXML_1 = (org.dom4j.Node)obj12_tFileInputXML_1;
    	str_tFileInputXML_1 = org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
    } else if(obj12_tFileInputXML_1 instanceof String || obj12_tFileInputXML_1 instanceof Number){
    	node_tFileInputXML_1 = temp_tFileInputXML_1;
    	str_tFileInputXML_1 = String.valueOf(obj12_tFileInputXML_1);
    } else if(obj12_tFileInputXML_1 instanceof java.util.List){
    	java.util.List<org.dom4j.Node> nodes_tFileInputXML_1 = (java.util.List<org.dom4j.Node>)obj12_tFileInputXML_1;
    	node_tFileInputXML_1 = nodes_tFileInputXML_1.size()>0 ? nodes_tFileInputXML_1.get(0) : null;
    	str_tFileInputXML_1 = node_tFileInputXML_1==null?"":org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
	}
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row6.JasperServer =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row6.JasperServer ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row6.JasperServer =null;
									}else{
		row6.JasperServer = str_tFileInputXML_1;
	}
    Object obj13_tFileInputXML_1 = xpaths_tFileInputXML_1.get(13).evaluate(temp_tFileInputXML_1);
    if(obj13_tFileInputXML_1 == null) {
    	node_tFileInputXML_1 = null;
    	str_tFileInputXML_1 = "";
    	
    } else if(obj13_tFileInputXML_1 instanceof org.dom4j.Node) {
    	node_tFileInputXML_1 = (org.dom4j.Node)obj13_tFileInputXML_1;
    	str_tFileInputXML_1 = org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
    } else if(obj13_tFileInputXML_1 instanceof String || obj13_tFileInputXML_1 instanceof Number){
    	node_tFileInputXML_1 = temp_tFileInputXML_1;
    	str_tFileInputXML_1 = String.valueOf(obj13_tFileInputXML_1);
    } else if(obj13_tFileInputXML_1 instanceof java.util.List){
    	java.util.List<org.dom4j.Node> nodes_tFileInputXML_1 = (java.util.List<org.dom4j.Node>)obj13_tFileInputXML_1;
    	node_tFileInputXML_1 = nodes_tFileInputXML_1.size()>0 ? nodes_tFileInputXML_1.get(0) : null;
    	str_tFileInputXML_1 = node_tFileInputXML_1==null?"":org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
	}
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row6.JasperUser =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row6.JasperUser ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row6.JasperUser =null;
									}else{
		row6.JasperUser = str_tFileInputXML_1;
	}
    Object obj14_tFileInputXML_1 = xpaths_tFileInputXML_1.get(14).evaluate(temp_tFileInputXML_1);
    if(obj14_tFileInputXML_1 == null) {
    	node_tFileInputXML_1 = null;
    	str_tFileInputXML_1 = "";
    	
    } else if(obj14_tFileInputXML_1 instanceof org.dom4j.Node) {
    	node_tFileInputXML_1 = (org.dom4j.Node)obj14_tFileInputXML_1;
    	str_tFileInputXML_1 = org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
    } else if(obj14_tFileInputXML_1 instanceof String || obj14_tFileInputXML_1 instanceof Number){
    	node_tFileInputXML_1 = temp_tFileInputXML_1;
    	str_tFileInputXML_1 = String.valueOf(obj14_tFileInputXML_1);
    } else if(obj14_tFileInputXML_1 instanceof java.util.List){
    	java.util.List<org.dom4j.Node> nodes_tFileInputXML_1 = (java.util.List<org.dom4j.Node>)obj14_tFileInputXML_1;
    	node_tFileInputXML_1 = nodes_tFileInputXML_1.size()>0 ? nodes_tFileInputXML_1.get(0) : null;
    	str_tFileInputXML_1 = node_tFileInputXML_1==null?"":org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
	}
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row6.JasperPassword =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row6.JasperPassword ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row6.JasperPassword =null;
									}else{
		row6.JasperPassword = str_tFileInputXML_1;
	}
    Object obj15_tFileInputXML_1 = xpaths_tFileInputXML_1.get(15).evaluate(temp_tFileInputXML_1);
    if(obj15_tFileInputXML_1 == null) {
    	node_tFileInputXML_1 = null;
    	str_tFileInputXML_1 = "";
    	
    } else if(obj15_tFileInputXML_1 instanceof org.dom4j.Node) {
    	node_tFileInputXML_1 = (org.dom4j.Node)obj15_tFileInputXML_1;
    	str_tFileInputXML_1 = org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
    } else if(obj15_tFileInputXML_1 instanceof String || obj15_tFileInputXML_1 instanceof Number){
    	node_tFileInputXML_1 = temp_tFileInputXML_1;
    	str_tFileInputXML_1 = String.valueOf(obj15_tFileInputXML_1);
    } else if(obj15_tFileInputXML_1 instanceof java.util.List){
    	java.util.List<org.dom4j.Node> nodes_tFileInputXML_1 = (java.util.List<org.dom4j.Node>)obj15_tFileInputXML_1;
    	node_tFileInputXML_1 = nodes_tFileInputXML_1.size()>0 ? nodes_tFileInputXML_1.get(0) : null;
    	str_tFileInputXML_1 = node_tFileInputXML_1==null?"":org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
	}
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row6.JasperModulo =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row6.JasperModulo ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row6.JasperModulo =null;
									}else{
		row6.JasperModulo = str_tFileInputXML_1;
	}
    Object obj16_tFileInputXML_1 = xpaths_tFileInputXML_1.get(16).evaluate(temp_tFileInputXML_1);
    if(obj16_tFileInputXML_1 == null) {
    	node_tFileInputXML_1 = null;
    	str_tFileInputXML_1 = "";
    	
    } else if(obj16_tFileInputXML_1 instanceof org.dom4j.Node) {
    	node_tFileInputXML_1 = (org.dom4j.Node)obj16_tFileInputXML_1;
    	str_tFileInputXML_1 = org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
    } else if(obj16_tFileInputXML_1 instanceof String || obj16_tFileInputXML_1 instanceof Number){
    	node_tFileInputXML_1 = temp_tFileInputXML_1;
    	str_tFileInputXML_1 = String.valueOf(obj16_tFileInputXML_1);
    } else if(obj16_tFileInputXML_1 instanceof java.util.List){
    	java.util.List<org.dom4j.Node> nodes_tFileInputXML_1 = (java.util.List<org.dom4j.Node>)obj16_tFileInputXML_1;
    	node_tFileInputXML_1 = nodes_tFileInputXML_1.size()>0 ? nodes_tFileInputXML_1.get(0) : null;
    	str_tFileInputXML_1 = node_tFileInputXML_1==null?"":org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
	}
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row6.JasperAmbiente =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row6.JasperAmbiente ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row6.JasperAmbiente =null;
									}else{
		row6.JasperAmbiente = str_tFileInputXML_1;
	}
    Object obj17_tFileInputXML_1 = xpaths_tFileInputXML_1.get(17).evaluate(temp_tFileInputXML_1);
    if(obj17_tFileInputXML_1 == null) {
    	node_tFileInputXML_1 = null;
    	str_tFileInputXML_1 = "";
    	
    } else if(obj17_tFileInputXML_1 instanceof org.dom4j.Node) {
    	node_tFileInputXML_1 = (org.dom4j.Node)obj17_tFileInputXML_1;
    	str_tFileInputXML_1 = org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
    } else if(obj17_tFileInputXML_1 instanceof String || obj17_tFileInputXML_1 instanceof Number){
    	node_tFileInputXML_1 = temp_tFileInputXML_1;
    	str_tFileInputXML_1 = String.valueOf(obj17_tFileInputXML_1);
    } else if(obj17_tFileInputXML_1 instanceof java.util.List){
    	java.util.List<org.dom4j.Node> nodes_tFileInputXML_1 = (java.util.List<org.dom4j.Node>)obj17_tFileInputXML_1;
    	node_tFileInputXML_1 = nodes_tFileInputXML_1.size()>0 ? nodes_tFileInputXML_1.get(0) : null;
    	str_tFileInputXML_1 = node_tFileInputXML_1==null?"":org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
	}
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row6.JasperReporte =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row6.JasperReporte ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row6.JasperReporte =null;
									}else{
		row6.JasperReporte = str_tFileInputXML_1;
	} 
			
    } catch (java.lang.Exception e) {
globalMap.put("tFileInputXML_1_ERROR_MESSAGE",e.getMessage());
        whetherReject_tFileInputXML_1 = true;
                System.err.println(e.getMessage());
                row6 = null;
    }
			
			

 



/**
 * [tFileInputXML_1 begin ] stop
 */
	
	/**
	 * [tFileInputXML_1 main ] start
	 */

	

	
	
	currentComponent="tFileInputXML_1";
	
	

 


	tos_count_tFileInputXML_1++;

/**
 * [tFileInputXML_1 main ] stop
 */
	
	/**
	 * [tFileInputXML_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileInputXML_1";
	
	

 



/**
 * [tFileInputXML_1 process_data_begin ] stop
 */
// Start of branch "row6"
if(row6 != null) { 



	
	/**
	 * [tJavaRow_1 main ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row6"
						
						);
					}
					

    System.out.println(TalendDate.getCurrentDate()+" : Archivo de configuración encontrado.");

//****************************************************************************************//
//*** ALMACENAMIENTO EN VARIABLES DE CONTEXTO DE LA CONFIGURACIÓN DE LA BASE DE DATOS ****//
//****************************************************************************************//
context.oracle_Host=row6.Host;
context.oracle_Port=row6.Port;
context.oracle_Sid=row6.Sid;
context.oracle_ServiceName=row6.ServiceName;
context.oracle_Schema=row6.Schema;
context.oracle_User=row6.User;
context.oracle_Password=row6.Password;

/*Datos servidor de jasper*/
context.JasperServer = row6.JasperServer;
context.JasperUser = row6.JasperUser;
context.JasperReporte = row6.JasperReporte;
context.JasperModulo = row6.JasperModulo;
context.JasperPassword = row6.JasperPassword;
context.JasperAmbiente = row6.JasperAmbiente;



System.out.println(context.oracle_ServiceName);
System.out.println(context.JasperAmbiente);
System.out.println(context.JasperModulo);
System.out.println(context.JasperUser);
System.out.println(context.JasperPassword);
System.out.println(context.JasperReporte);


//****************************************************************************************//
//*** ALMACENAMIENTO EN VARIABLES DE CONTEXTO DE LA CONFIGURACIÓN DEL FILE SYSTEM ********//
//****************************************************************************************//
context.fileSystem_Path=row6.PathStorage;

System.out.println(context.fileSystem_Path);
//****************************************************************************************//
//*** ALMACENAMIENTO EN VARIABLES DE CONTEXTO DE LA CONFIGURACIÓN DEL EMAIL **************//
//****************************************************************************************//
context.mail_SMTPHost=row6.SMTPHost;
context.mail_SMTPPort=row6.SMTPPort;
context.mail_UsernameMail=row6.UsernameMail;
context.mail_PasswordMail=row6.PasswordMail;

    nb_line_tJavaRow_1++;   

 


	tos_count_tJavaRow_1++;

/**
 * [tJavaRow_1 main ] stop
 */
	
	/**
	 * [tJavaRow_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";
	
	

 



/**
 * [tJavaRow_1 process_data_begin ] stop
 */
	
	/**
	 * [tJavaRow_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";
	
	

 



/**
 * [tJavaRow_1 process_data_end ] stop
 */

} // End of branch "row6"




	
	/**
	 * [tFileInputXML_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileInputXML_1";
	
	

 



/**
 * [tFileInputXML_1 process_data_end ] stop
 */
	
	/**
	 * [tFileInputXML_1 end ] start
	 */

	

	
	
	currentComponent="tFileInputXML_1";
	
	


}
	}
	globalMap.put("tFileInputXML_1_NB_LINE",nb_line_tFileInputXML_1);

	

 

ok_Hash.put("tFileInputXML_1", true);
end_Hash.put("tFileInputXML_1", System.currentTimeMillis());




/**
 * [tFileInputXML_1 end ] stop
 */

	
	/**
	 * [tJavaRow_1 end ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";
	
	

globalMap.put("tJavaRow_1_NB_LINE",nb_line_tJavaRow_1);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row6");
			  	}
			  	
 

ok_Hash.put("tJavaRow_1", true);
end_Hash.put("tJavaRow_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk12", 0, "ok");
				}
				tOracleConnection_1Process(globalMap);



/**
 * [tJavaRow_1 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileInputXML_1 finally ] start
	 */

	

	
	
	currentComponent="tFileInputXML_1";
	
	

 



/**
 * [tFileInputXML_1 finally ] stop
 */

	
	/**
	 * [tJavaRow_1 finally ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";
	
	

 



/**
 * [tJavaRow_1 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileInputXML_1_SUBPROCESS_STATE", 1);
	}
	


public void tOracleConnection_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleConnection_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tOracleConnection_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleConnection_1", false);
		start_Hash.put("tOracleConnection_1", System.currentTimeMillis());
		
	
	currentComponent="tOracleConnection_1";
	
	
		int tos_count_tOracleConnection_1 = 0;
		
	

	
        String url_tOracleConnection_1 = "jdbc:oracle:thin:@(description=(address=(protocol=tcp)(host=" + context.oracle_Host + ")(port=" + context.oracle_Port + "))(connect_data=(service_name=" + context.oracle_ServiceName + ")))";
    	globalMap.put("connectionType_" + "tOracleConnection_1", "ORACLE_SERVICE_NAME");
	String dbUser_tOracleConnection_1 = context.oracle_User;
	
	
		
	final String decryptedPassword_tOracleConnection_1 = context.oracle_Password; 
		String dbPwd_tOracleConnection_1 = decryptedPassword_tOracleConnection_1;
	
	
	java.sql.Connection conn_tOracleConnection_1 = null;
	
		
			String driverClass_tOracleConnection_1 = "oracle.jdbc.OracleDriver";
			java.lang.Class jdbcclazz_tOracleConnection_1 = java.lang.Class.forName(driverClass_tOracleConnection_1);
			globalMap.put("driverClass_tOracleConnection_1", driverClass_tOracleConnection_1);
		
			java.util.Properties atnParamsPrope_tOracleConnection_1 = new java.util.Properties();
			    atnParamsPrope_tOracleConnection_1.put("user",dbUser_tOracleConnection_1);
			    atnParamsPrope_tOracleConnection_1.put("password",dbPwd_tOracleConnection_1);
			if(context.oracle_AdditionalParams != null && !"\"\"".equals(context.oracle_AdditionalParams) && !"".equals(context.oracle_AdditionalParams)){
                atnParamsPrope_tOracleConnection_1.load(new java.io.ByteArrayInputStream(context.oracle_AdditionalParams.replace("&", "\n").getBytes()));
            }
         
			conn_tOracleConnection_1 = java.sql.DriverManager.getConnection(url_tOracleConnection_1, atnParamsPrope_tOracleConnection_1);

		globalMap.put("conn_tOracleConnection_1", conn_tOracleConnection_1);
	if (null != conn_tOracleConnection_1) {
		
			conn_tOracleConnection_1.setAutoCommit(true);
	}
        globalMap.put("host_" + "tOracleConnection_1",context.oracle_Host);
        globalMap.put("port_" + "tOracleConnection_1",context.oracle_Port);
        globalMap.put("dbname_" + "tOracleConnection_1",context.oracle_ServiceName);

	globalMap.put("dbschema_" + "tOracleConnection_1", context.oracle_Schema);
	globalMap.put("username_" + "tOracleConnection_1",context.oracle_User);
	globalMap.put("password_" + "tOracleConnection_1",dbPwd_tOracleConnection_1);

 



/**
 * [tOracleConnection_1 begin ] stop
 */
	
	/**
	 * [tOracleConnection_1 main ] start
	 */

	

	
	
	currentComponent="tOracleConnection_1";
	
	

 


	tos_count_tOracleConnection_1++;

/**
 * [tOracleConnection_1 main ] stop
 */
	
	/**
	 * [tOracleConnection_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleConnection_1";
	
	

 



/**
 * [tOracleConnection_1 process_data_begin ] stop
 */
	
	/**
	 * [tOracleConnection_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleConnection_1";
	
	

 



/**
 * [tOracleConnection_1 process_data_end ] stop
 */
	
	/**
	 * [tOracleConnection_1 end ] start
	 */

	

	
	
	currentComponent="tOracleConnection_1";
	
	

 

ok_Hash.put("tOracleConnection_1", true);
end_Hash.put("tOracleConnection_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk6", 0, "ok");
				}
				tJava_1Process(globalMap);



/**
 * [tOracleConnection_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleConnection_1 finally ] start
	 */

	

	
	
	currentComponent="tOracleConnection_1";
	
	

 



/**
 * [tOracleConnection_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleConnection_1_SUBPROCESS_STATE", 1);
	}
	


public void tJava_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tJava_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_1", false);
		start_Hash.put("tJava_1", System.currentTimeMillis());
		
	
	currentComponent="tJava_1";
	
	
		int tos_count_tJava_1 = 0;
		


//****************************************************************************************//
System.out.println("*** PREJOB FINALIZADO ETAPA MULTIAFILIACION ********************************************");
//****************************************************************************************//

//****************************************************************************************//
//*** PRUEBAS ESTO HAY QUE ELIMINARLO ****************************************************//
//****************************************************************************************//
//context.infoNombreArchivo="7acef187-49f0-4767-81f4-b0ca70bc1260.TXT";
//context.fileSystem_Path="C:\\Users\\rprieto\\Desktop\\Multiafiliacion";
//context.fileSystem_Area="AFI";
//context.idProceso=626;
//context.infoIdArchivo=95;
//context.infoUsuarioIdArchivo=64;
//****************************************************************************************//

//****************************************************************************************//
//*** INICIALIZACIÓN VARIABLES DEL JOB ***************************************************//
//****************************************************************************************//
context.auxPosicionRegistros=0;
context.infoConteoRegistros=1;
context.archivoSalida=GenerarUuid.createUUID();

//****************************************************************************************//
System.out.println("USUARIO ARCHIVO: "+context.infoUsuarioIdArchivo);
System.out.println("NOMBRE ARCHIVO: "+context.infoNombreArchivo);
System.out.println("ID PROCESO: "+context.idProceso);
System.out.println("ID ARCHIVO: "+context.infoIdArchivo);
//****************************************************************************************//
 



/**
 * [tJava_1 begin ] stop
 */
	
	/**
	 * [tJava_1 main ] start
	 */

	

	
	
	currentComponent="tJava_1";
	
	

 


	tos_count_tJava_1++;

/**
 * [tJava_1 main ] stop
 */
	
	/**
	 * [tJava_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_1";
	
	

 



/**
 * [tJava_1 process_data_begin ] stop
 */
	
	/**
	 * [tJava_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_1";
	
	

 



/**
 * [tJava_1 process_data_end ] stop
 */
	
	/**
	 * [tJava_1 end ] start
	 */

	

	
	
	currentComponent="tJava_1";
	
	

 

ok_Hash.put("tJava_1", true);
end_Hash.put("tJava_1", System.currentTimeMillis());




/**
 * [tJava_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_1 finally ] start
	 */

	

	
	
	currentComponent="tJava_1";
	
	

 



/**
 * [tJava_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_1_SUBPROCESS_STATE", 1);
	}
	


public void tDie_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDie_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tDie_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDie_1", false);
		start_Hash.put("tDie_1", System.currentTimeMillis());
		
	
	currentComponent="tDie_1";
	
	
		int tos_count_tDie_1 = 0;
		

 



/**
 * [tDie_1 begin ] stop
 */
	
	/**
	 * [tDie_1 main ] start
	 */

	

	
	
	currentComponent="tDie_1";
	
	

	try {
				tLogCatcher_1.addMessage("tDie", "tDie_1", 5, "the end is near", 4);
				tLogCatcher_1Process(globalMap);
				
	globalMap.put("tDie_1_DIE_PRIORITY", 5);
	System.err.println("the end is near");
	
	globalMap.put("tDie_1_DIE_MESSAGE", "the end is near");
	globalMap.put("tDie_1_DIE_MESSAGES", "the end is near");
	
	} catch (Exception | Error e_tDie_1) {
	    globalMap.put("tDie_1_ERROR_MESSAGE",e_tDie_1.getMessage());
		logIgnoredError(String.format("tDie_1 - tDie failed to log message due to internal error: %s", e_tDie_1), e_tDie_1);
	}
	
	currentComponent = "tDie_1";
	status = "failure";
        errorCode = new Integer(4);
        globalMap.put("tDie_1_DIE_CODE", errorCode);        

    
	if(true){	
		TDieException e_tDie_1 = new TDieException();

		

		throw e_tDie_1;
	}

 


	tos_count_tDie_1++;

/**
 * [tDie_1 main ] stop
 */
	
	/**
	 * [tDie_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDie_1";
	
	

 



/**
 * [tDie_1 process_data_begin ] stop
 */
	
	/**
	 * [tDie_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDie_1";
	
	

 



/**
 * [tDie_1 process_data_end ] stop
 */
	
	/**
	 * [tDie_1 end ] start
	 */

	

	
	
	currentComponent="tDie_1";
	
	

 

ok_Hash.put("tDie_1", true);
end_Hash.put("tDie_1", System.currentTimeMillis());




/**
 * [tDie_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDie_1 finally ] start
	 */

	

	
	
	currentComponent="tDie_1";
	
	

 



/**
 * [tDie_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDie_1_SUBPROCESS_STATE", 1);
	}
	


public void tFileExist_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileExist_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tFileExist_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileExist_1", false);
		start_Hash.put("tFileExist_1", System.currentTimeMillis());
		
	
	currentComponent="tFileExist_1";
	
	
		int tos_count_tFileExist_1 = 0;
		

 



/**
 * [tFileExist_1 begin ] stop
 */
	
	/**
	 * [tFileExist_1 main ] start
	 */

	

	
	
	currentComponent="tFileExist_1";
	
	



java.io.File file_tFileExist_1 = new java.io.File(context.fileSystem_Path+"/"+context.fileSystem_Area+"/"+context.infoNombreArchivo);
if (!file_tFileExist_1.exists()) {
    globalMap.put("tFileExist_1_EXISTS",false);
}else{
	globalMap.put("tFileExist_1_EXISTS",true);
}

globalMap.put("tFileExist_1_FILENAME",context.fileSystem_Path+"/"+context.fileSystem_Area+"/"+context.infoNombreArchivo);


 


	tos_count_tFileExist_1++;

/**
 * [tFileExist_1 main ] stop
 */
	
	/**
	 * [tFileExist_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileExist_1";
	
	

 



/**
 * [tFileExist_1 process_data_begin ] stop
 */
	
	/**
	 * [tFileExist_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileExist_1";
	
	

 



/**
 * [tFileExist_1 process_data_end ] stop
 */
	
	/**
	 * [tFileExist_1 end ] start
	 */

	

	
	
	currentComponent="tFileExist_1";
	
	

 

ok_Hash.put("tFileExist_1", true);
end_Hash.put("tFileExist_1", System.currentTimeMillis());

   			if (((Boolean)globalMap.get("tFileExist_1_EXISTS"))) {
   				
					if(execStat){
   	 					runStat.updateStatOnConnection("If4", 0, "true");
					}
				tFileInputDelimited_2Process(globalMap);
			}

			   
   				else{
					if(execStat){   
   	 					runStat.updateStatOnConnection("If4", 0, "false");
					}   	 
   				}



/**
 * [tFileExist_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileExist_1 finally ] start
	 */

	

	
	
	currentComponent="tFileExist_1";
	
	

 



/**
 * [tFileExist_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileExist_1_SUBPROCESS_STATE", 1);
	}
	


public static class row12Struct implements routines.system.IPersistableRow<row12Struct> {
    final static byte[] commonByteArrayLock_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion = new byte[0];
    static byte[] commonByteArray_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion = new byte[0];

	
			    public Integer consecutivoAfiliado;

				public Integer getConsecutivoAfiliado () {
					return this.consecutivoAfiliado;
				}

				public Boolean consecutivoAfiliadoIsNullable(){
				    return true;
				}
				public Boolean consecutivoAfiliadoIsKey(){
				    return false;
				}
				public Integer consecutivoAfiliadoLength(){
				    return 0;
				}
				public Integer consecutivoAfiliadoPrecision(){
				    return 0;
				}
				public String consecutivoAfiliadoDefault(){
				
					return null;
				
				}
				public String consecutivoAfiliadoComment(){
				
				    return "";
				
				}
				public String consecutivoAfiliadoPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String consecutivoAfiliadoOriginalDbColumnName(){
				
					return "consecutivoAfiliado";
				
				}

				
			    public String tipoDocumentoAfiliado;

				public String getTipoDocumentoAfiliado () {
					return this.tipoDocumentoAfiliado;
				}

				public Boolean tipoDocumentoAfiliadoIsNullable(){
				    return true;
				}
				public Boolean tipoDocumentoAfiliadoIsKey(){
				    return false;
				}
				public Integer tipoDocumentoAfiliadoLength(){
				    return 0;
				}
				public Integer tipoDocumentoAfiliadoPrecision(){
				    return 0;
				}
				public String tipoDocumentoAfiliadoDefault(){
				
					return null;
				
				}
				public String tipoDocumentoAfiliadoComment(){
				
				    return "";
				
				}
				public String tipoDocumentoAfiliadoPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String tipoDocumentoAfiliadoOriginalDbColumnName(){
				
					return "tipoDocumentoAfiliado";
				
				}

				
			    public String numeroIdentificacionAfiliado;

				public String getNumeroIdentificacionAfiliado () {
					return this.numeroIdentificacionAfiliado;
				}

				public Boolean numeroIdentificacionAfiliadoIsNullable(){
				    return true;
				}
				public Boolean numeroIdentificacionAfiliadoIsKey(){
				    return false;
				}
				public Integer numeroIdentificacionAfiliadoLength(){
				    return 0;
				}
				public Integer numeroIdentificacionAfiliadoPrecision(){
				    return 0;
				}
				public String numeroIdentificacionAfiliadoDefault(){
				
					return null;
				
				}
				public String numeroIdentificacionAfiliadoComment(){
				
				    return "";
				
				}
				public String numeroIdentificacionAfiliadoPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String numeroIdentificacionAfiliadoOriginalDbColumnName(){
				
					return "numeroIdentificacionAfiliado";
				
				}

				
			    public String primerApellidoAfiliado;

				public String getPrimerApellidoAfiliado () {
					return this.primerApellidoAfiliado;
				}

				public Boolean primerApellidoAfiliadoIsNullable(){
				    return true;
				}
				public Boolean primerApellidoAfiliadoIsKey(){
				    return false;
				}
				public Integer primerApellidoAfiliadoLength(){
				    return 0;
				}
				public Integer primerApellidoAfiliadoPrecision(){
				    return 0;
				}
				public String primerApellidoAfiliadoDefault(){
				
					return null;
				
				}
				public String primerApellidoAfiliadoComment(){
				
				    return "";
				
				}
				public String primerApellidoAfiliadoPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String primerApellidoAfiliadoOriginalDbColumnName(){
				
					return "primerApellidoAfiliado";
				
				}

				
			    public String segundoApellidoAfiliado;

				public String getSegundoApellidoAfiliado () {
					return this.segundoApellidoAfiliado;
				}

				public Boolean segundoApellidoAfiliadoIsNullable(){
				    return true;
				}
				public Boolean segundoApellidoAfiliadoIsKey(){
				    return false;
				}
				public Integer segundoApellidoAfiliadoLength(){
				    return 0;
				}
				public Integer segundoApellidoAfiliadoPrecision(){
				    return 0;
				}
				public String segundoApellidoAfiliadoDefault(){
				
					return null;
				
				}
				public String segundoApellidoAfiliadoComment(){
				
				    return "";
				
				}
				public String segundoApellidoAfiliadoPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String segundoApellidoAfiliadoOriginalDbColumnName(){
				
					return "segundoApellidoAfiliado";
				
				}

				
			    public String primerNombreAfiliado;

				public String getPrimerNombreAfiliado () {
					return this.primerNombreAfiliado;
				}

				public Boolean primerNombreAfiliadoIsNullable(){
				    return true;
				}
				public Boolean primerNombreAfiliadoIsKey(){
				    return false;
				}
				public Integer primerNombreAfiliadoLength(){
				    return 0;
				}
				public Integer primerNombreAfiliadoPrecision(){
				    return 0;
				}
				public String primerNombreAfiliadoDefault(){
				
					return null;
				
				}
				public String primerNombreAfiliadoComment(){
				
				    return "";
				
				}
				public String primerNombreAfiliadoPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String primerNombreAfiliadoOriginalDbColumnName(){
				
					return "primerNombreAfiliado";
				
				}

				
			    public String segundoNombreAfiliado;

				public String getSegundoNombreAfiliado () {
					return this.segundoNombreAfiliado;
				}

				public Boolean segundoNombreAfiliadoIsNullable(){
				    return true;
				}
				public Boolean segundoNombreAfiliadoIsKey(){
				    return false;
				}
				public Integer segundoNombreAfiliadoLength(){
				    return 0;
				}
				public Integer segundoNombreAfiliadoPrecision(){
				    return 0;
				}
				public String segundoNombreAfiliadoDefault(){
				
					return null;
				
				}
				public String segundoNombreAfiliadoComment(){
				
				    return "";
				
				}
				public String segundoNombreAfiliadoPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String segundoNombreAfiliadoOriginalDbColumnName(){
				
					return "segundoNombreAfiliado";
				
				}

				
			    public java.util.Date fechaNacimiento;

				public java.util.Date getFechaNacimiento () {
					return this.fechaNacimiento;
				}

				public Boolean fechaNacimientoIsNullable(){
				    return true;
				}
				public Boolean fechaNacimientoIsKey(){
				    return false;
				}
				public Integer fechaNacimientoLength(){
				    return 0;
				}
				public Integer fechaNacimientoPrecision(){
				    return 0;
				}
				public String fechaNacimientoDefault(){
				
					return null;
				
				}
				public String fechaNacimientoComment(){
				
				    return "";
				
				}
				public String fechaNacimientoPattern(){
				
					return "dd/MM/yyyy";
				
				}
				public String fechaNacimientoOriginalDbColumnName(){
				
					return "fechaNacimiento";
				
				}

				
			    public String estadoEntidad01;

				public String getEstadoEntidad01 () {
					return this.estadoEntidad01;
				}

				public Boolean estadoEntidad01IsNullable(){
				    return true;
				}
				public Boolean estadoEntidad01IsKey(){
				    return false;
				}
				public Integer estadoEntidad01Length(){
				    return 0;
				}
				public Integer estadoEntidad01Precision(){
				    return 0;
				}
				public String estadoEntidad01Default(){
				
					return null;
				
				}
				public String estadoEntidad01Comment(){
				
				    return "";
				
				}
				public String estadoEntidad01Pattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String estadoEntidad01OriginalDbColumnName(){
				
					return "estadoEntidad01";
				
				}

				
			    public java.util.Date fechaAfiliacionEntidad01;

				public java.util.Date getFechaAfiliacionEntidad01 () {
					return this.fechaAfiliacionEntidad01;
				}

				public Boolean fechaAfiliacionEntidad01IsNullable(){
				    return true;
				}
				public Boolean fechaAfiliacionEntidad01IsKey(){
				    return false;
				}
				public Integer fechaAfiliacionEntidad01Length(){
				    return 0;
				}
				public Integer fechaAfiliacionEntidad01Precision(){
				    return 0;
				}
				public String fechaAfiliacionEntidad01Default(){
				
					return null;
				
				}
				public String fechaAfiliacionEntidad01Comment(){
				
				    return "";
				
				}
				public String fechaAfiliacionEntidad01Pattern(){
				
					return "dd/MM/yyyy";
				
				}
				public String fechaAfiliacionEntidad01OriginalDbColumnName(){
				
					return "fechaAfiliacionEntidad01";
				
				}

				
			    public String codigoEntidad01;

				public String getCodigoEntidad01 () {
					return this.codigoEntidad01;
				}

				public Boolean codigoEntidad01IsNullable(){
				    return true;
				}
				public Boolean codigoEntidad01IsKey(){
				    return false;
				}
				public Integer codigoEntidad01Length(){
				    return 0;
				}
				public Integer codigoEntidad01Precision(){
				    return 0;
				}
				public String codigoEntidad01Default(){
				
					return null;
				
				}
				public String codigoEntidad01Comment(){
				
				    return "";
				
				}
				public String codigoEntidad01Pattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String codigoEntidad01OriginalDbColumnName(){
				
					return "codigoEntidad01";
				
				}

				
			    public Character tipoEntidad01;

				public Character getTipoEntidad01 () {
					return this.tipoEntidad01;
				}

				public Boolean tipoEntidad01IsNullable(){
				    return true;
				}
				public Boolean tipoEntidad01IsKey(){
				    return false;
				}
				public Integer tipoEntidad01Length(){
				    return 0;
				}
				public Integer tipoEntidad01Precision(){
				    return 0;
				}
				public String tipoEntidad01Default(){
				
					return null;
				
				}
				public String tipoEntidad01Comment(){
				
				    return "";
				
				}
				public String tipoEntidad01Pattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String tipoEntidad01OriginalDbColumnName(){
				
					return "tipoEntidad01";
				
				}

				
			    public String estadoEntidad02;

				public String getEstadoEntidad02 () {
					return this.estadoEntidad02;
				}

				public Boolean estadoEntidad02IsNullable(){
				    return true;
				}
				public Boolean estadoEntidad02IsKey(){
				    return false;
				}
				public Integer estadoEntidad02Length(){
				    return 0;
				}
				public Integer estadoEntidad02Precision(){
				    return 0;
				}
				public String estadoEntidad02Default(){
				
					return null;
				
				}
				public String estadoEntidad02Comment(){
				
				    return "";
				
				}
				public String estadoEntidad02Pattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String estadoEntidad02OriginalDbColumnName(){
				
					return "estadoEntidad02";
				
				}

				
			    public java.util.Date fechaAfiliacionEntidad02;

				public java.util.Date getFechaAfiliacionEntidad02 () {
					return this.fechaAfiliacionEntidad02;
				}

				public Boolean fechaAfiliacionEntidad02IsNullable(){
				    return true;
				}
				public Boolean fechaAfiliacionEntidad02IsKey(){
				    return false;
				}
				public Integer fechaAfiliacionEntidad02Length(){
				    return 0;
				}
				public Integer fechaAfiliacionEntidad02Precision(){
				    return 0;
				}
				public String fechaAfiliacionEntidad02Default(){
				
					return null;
				
				}
				public String fechaAfiliacionEntidad02Comment(){
				
				    return "";
				
				}
				public String fechaAfiliacionEntidad02Pattern(){
				
					return "dd/MM/yyyy";
				
				}
				public String fechaAfiliacionEntidad02OriginalDbColumnName(){
				
					return "fechaAfiliacionEntidad02";
				
				}

				
			    public String codigoEntidad02;

				public String getCodigoEntidad02 () {
					return this.codigoEntidad02;
				}

				public Boolean codigoEntidad02IsNullable(){
				    return true;
				}
				public Boolean codigoEntidad02IsKey(){
				    return false;
				}
				public Integer codigoEntidad02Length(){
				    return 0;
				}
				public Integer codigoEntidad02Precision(){
				    return 0;
				}
				public String codigoEntidad02Default(){
				
					return null;
				
				}
				public String codigoEntidad02Comment(){
				
				    return "";
				
				}
				public String codigoEntidad02Pattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String codigoEntidad02OriginalDbColumnName(){
				
					return "codigoEntidad02";
				
				}

				
			    public Character tipoEntidad02;

				public Character getTipoEntidad02 () {
					return this.tipoEntidad02;
				}

				public Boolean tipoEntidad02IsNullable(){
				    return true;
				}
				public Boolean tipoEntidad02IsKey(){
				    return false;
				}
				public Integer tipoEntidad02Length(){
				    return 0;
				}
				public Integer tipoEntidad02Precision(){
				    return 0;
				}
				public String tipoEntidad02Default(){
				
					return null;
				
				}
				public String tipoEntidad02Comment(){
				
				    return "";
				
				}
				public String tipoEntidad02Pattern(){
				
					return "";
				
				}
				public String tipoEntidad02OriginalDbColumnName(){
				
					return "tipoEntidad02";
				
				}

				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion.length) {
				if(length < 1024 && commonByteArray_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion.length == 0) {
   					commonByteArray_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion = new byte[1024];
				} else {
   					commonByteArray_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion, 0, length);
			strReturn = new String(commonByteArray_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion.length) {
				if(length < 1024 && commonByteArray_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion.length == 0) {
   					commonByteArray_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion = new byte[1024];
				} else {
   					commonByteArray_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion, 0, length);
			strReturn = new String(commonByteArray_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion) {

        	try {

        		int length = 0;
		
						this.consecutivoAfiliado = readInteger(dis);
					
					this.tipoDocumentoAfiliado = readString(dis);
					
					this.numeroIdentificacionAfiliado = readString(dis);
					
					this.primerApellidoAfiliado = readString(dis);
					
					this.segundoApellidoAfiliado = readString(dis);
					
					this.primerNombreAfiliado = readString(dis);
					
					this.segundoNombreAfiliado = readString(dis);
					
					this.fechaNacimiento = readDate(dis);
					
					this.estadoEntidad01 = readString(dis);
					
					this.fechaAfiliacionEntidad01 = readDate(dis);
					
					this.codigoEntidad01 = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.tipoEntidad01 = null;
           				} else {
           			    	this.tipoEntidad01 = dis.readChar();
           				}
					
					this.estadoEntidad02 = readString(dis);
					
					this.fechaAfiliacionEntidad02 = readDate(dis);
					
					this.codigoEntidad02 = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.tipoEntidad02 = null;
           				} else {
           			    	this.tipoEntidad02 = dis.readChar();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion) {

        	try {

        		int length = 0;
		
						this.consecutivoAfiliado = readInteger(dis);
					
					this.tipoDocumentoAfiliado = readString(dis);
					
					this.numeroIdentificacionAfiliado = readString(dis);
					
					this.primerApellidoAfiliado = readString(dis);
					
					this.segundoApellidoAfiliado = readString(dis);
					
					this.primerNombreAfiliado = readString(dis);
					
					this.segundoNombreAfiliado = readString(dis);
					
					this.fechaNacimiento = readDate(dis);
					
					this.estadoEntidad01 = readString(dis);
					
					this.fechaAfiliacionEntidad01 = readDate(dis);
					
					this.codigoEntidad01 = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.tipoEntidad01 = null;
           				} else {
           			    	this.tipoEntidad01 = dis.readChar();
           				}
					
					this.estadoEntidad02 = readString(dis);
					
					this.fechaAfiliacionEntidad02 = readDate(dis);
					
					this.codigoEntidad02 = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.tipoEntidad02 = null;
           				} else {
           			    	this.tipoEntidad02 = dis.readChar();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.consecutivoAfiliado,dos);
					
					// String
				
						writeString(this.tipoDocumentoAfiliado,dos);
					
					// String
				
						writeString(this.numeroIdentificacionAfiliado,dos);
					
					// String
				
						writeString(this.primerApellidoAfiliado,dos);
					
					// String
				
						writeString(this.segundoApellidoAfiliado,dos);
					
					// String
				
						writeString(this.primerNombreAfiliado,dos);
					
					// String
				
						writeString(this.segundoNombreAfiliado,dos);
					
					// java.util.Date
				
						writeDate(this.fechaNacimiento,dos);
					
					// String
				
						writeString(this.estadoEntidad01,dos);
					
					// java.util.Date
				
						writeDate(this.fechaAfiliacionEntidad01,dos);
					
					// String
				
						writeString(this.codigoEntidad01,dos);
					
					// Character
				
						if(this.tipoEntidad01 == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeChar(this.tipoEntidad01);
		            	}
					
					// String
				
						writeString(this.estadoEntidad02,dos);
					
					// java.util.Date
				
						writeDate(this.fechaAfiliacionEntidad02,dos);
					
					// String
				
						writeString(this.codigoEntidad02,dos);
					
					// Character
				
						if(this.tipoEntidad02 == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeChar(this.tipoEntidad02);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.consecutivoAfiliado,dos);
					
					// String
				
						writeString(this.tipoDocumentoAfiliado,dos);
					
					// String
				
						writeString(this.numeroIdentificacionAfiliado,dos);
					
					// String
				
						writeString(this.primerApellidoAfiliado,dos);
					
					// String
				
						writeString(this.segundoApellidoAfiliado,dos);
					
					// String
				
						writeString(this.primerNombreAfiliado,dos);
					
					// String
				
						writeString(this.segundoNombreAfiliado,dos);
					
					// java.util.Date
				
						writeDate(this.fechaNacimiento,dos);
					
					// String
				
						writeString(this.estadoEntidad01,dos);
					
					// java.util.Date
				
						writeDate(this.fechaAfiliacionEntidad01,dos);
					
					// String
				
						writeString(this.codigoEntidad01,dos);
					
					// Character
				
						if(this.tipoEntidad01 == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeChar(this.tipoEntidad01);
		            	}
					
					// String
				
						writeString(this.estadoEntidad02,dos);
					
					// java.util.Date
				
						writeDate(this.fechaAfiliacionEntidad02,dos);
					
					// String
				
						writeString(this.codigoEntidad02,dos);
					
					// Character
				
						if(this.tipoEntidad02 == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeChar(this.tipoEntidad02);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("consecutivoAfiliado="+String.valueOf(consecutivoAfiliado));
		sb.append(",tipoDocumentoAfiliado="+tipoDocumentoAfiliado);
		sb.append(",numeroIdentificacionAfiliado="+numeroIdentificacionAfiliado);
		sb.append(",primerApellidoAfiliado="+primerApellidoAfiliado);
		sb.append(",segundoApellidoAfiliado="+segundoApellidoAfiliado);
		sb.append(",primerNombreAfiliado="+primerNombreAfiliado);
		sb.append(",segundoNombreAfiliado="+segundoNombreAfiliado);
		sb.append(",fechaNacimiento="+String.valueOf(fechaNacimiento));
		sb.append(",estadoEntidad01="+estadoEntidad01);
		sb.append(",fechaAfiliacionEntidad01="+String.valueOf(fechaAfiliacionEntidad01));
		sb.append(",codigoEntidad01="+codigoEntidad01);
		sb.append(",tipoEntidad01="+String.valueOf(tipoEntidad01));
		sb.append(",estadoEntidad02="+estadoEntidad02);
		sb.append(",fechaAfiliacionEntidad02="+String.valueOf(fechaAfiliacionEntidad02));
		sb.append(",codigoEntidad02="+codigoEntidad02);
		sb.append(",tipoEntidad02="+String.valueOf(tipoEntidad02));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row12Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tFileInputDelimited_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileInputDelimited_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row12Struct row12 = new row12Struct();




	
	/**
	 * [tHashOutput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashOutput_1", false);
		start_Hash.put("tHashOutput_1", System.currentTimeMillis());
		
	
	currentComponent="tHashOutput_1";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row12");
					}
				
		int tos_count_tHashOutput_1 = 0;
		



org.talend.designer.components.hashfile.common.MapHashFile mf_tHashOutput_1=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();    
		org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row12Struct> tHashFile_tHashOutput_1 = null;
		String hashKey_tHashOutput_1 = "tHashFile_MinSaludEtapa3Multiafiliacion_" + pid + "_tHashOutput_1";
			synchronized(org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.get(hashKey_tHashOutput_1)){
			    if(mf_tHashOutput_1.getResourceMap().get(hashKey_tHashOutput_1) == null){
	      		    mf_tHashOutput_1.getResourceMap().put(hashKey_tHashOutput_1, new org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row12Struct>(org.talend.designer.components.hashfile.common.MATCHING_MODE.KEEP_ALL));
	      		    tHashFile_tHashOutput_1 = mf_tHashOutput_1.getResourceMap().get(hashKey_tHashOutput_1);
			    }else{
			    	tHashFile_tHashOutput_1 = mf_tHashOutput_1.getResourceMap().get(hashKey_tHashOutput_1);
			    }
			}
        int nb_line_tHashOutput_1 = 0;

 



/**
 * [tHashOutput_1 begin ] stop
 */



	
	/**
	 * [tFileInputDelimited_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputDelimited_2", false);
		start_Hash.put("tFileInputDelimited_2", System.currentTimeMillis());
		
	
	currentComponent="tFileInputDelimited_2";
	
	
		int tos_count_tFileInputDelimited_2 = 0;
		
	
	
	
 
	
	
	final routines.system.RowState rowstate_tFileInputDelimited_2 = new routines.system.RowState();
	
	
				int nb_line_tFileInputDelimited_2 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_2 = null;
				int limit_tFileInputDelimited_2 = -1;
				try{
					
						Object filename_tFileInputDelimited_2 = context.fileSystem_Path+"/"+context.fileSystem_Area+"/"+context.infoNombreArchivo;
						if(filename_tFileInputDelimited_2 instanceof java.io.InputStream){
							
			int footer_value_tFileInputDelimited_2 = 0, random_value_tFileInputDelimited_2 = -1;
			if(footer_value_tFileInputDelimited_2 >0 || random_value_tFileInputDelimited_2 > 0){
				throw new java.lang.Exception("When the input source is a stream,footer and random shouldn't be bigger than 0.");				
			}
		
						}
						try {
							fid_tFileInputDelimited_2 = new org.talend.fileprocess.FileInputDelimited(context.fileSystem_Path+"/"+context.fileSystem_Area+"/"+context.infoNombreArchivo, "ISO-8859-15",",","\n",false,0,0,
									limit_tFileInputDelimited_2
								,-1, false);
						} catch(java.lang.Exception e) {
globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",e.getMessage());
							
								
								System.err.println(e.getMessage());
							
						}
					
				    
					while (fid_tFileInputDelimited_2!=null && fid_tFileInputDelimited_2.nextRecord()) {
						rowstate_tFileInputDelimited_2.reset();
						
			    						row12 = null;			
												
									boolean whetherReject_tFileInputDelimited_2 = false;
									row12 = new row12Struct();
									try {
										
				int columnIndexWithD_tFileInputDelimited_2 = 0;
				
					String temp = ""; 
				
					columnIndexWithD_tFileInputDelimited_2 = 0;
					
						temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						if(temp.length() > 0) {
							
								try {
								
    								row12.consecutivoAfiliado = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_2) {
globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",ex_tFileInputDelimited_2.getMessage());
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"consecutivoAfiliado", "row12", temp, ex_tFileInputDelimited_2), ex_tFileInputDelimited_2));
								}
    							
						} else {						
							
								
									row12.consecutivoAfiliado = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_2 = 1;
					
							row12.tipoDocumentoAfiliado = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
					columnIndexWithD_tFileInputDelimited_2 = 2;
					
							row12.numeroIdentificacionAfiliado = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
					columnIndexWithD_tFileInputDelimited_2 = 3;
					
							row12.primerApellidoAfiliado = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
					columnIndexWithD_tFileInputDelimited_2 = 4;
					
							row12.segundoApellidoAfiliado = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
					columnIndexWithD_tFileInputDelimited_2 = 5;
					
							row12.primerNombreAfiliado = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
					columnIndexWithD_tFileInputDelimited_2 = 6;
					
							row12.segundoNombreAfiliado = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
					columnIndexWithD_tFileInputDelimited_2 = 7;
					
						temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						if(temp.length() > 0) {
							
								try {
								
    									row12.fechaNacimiento = ParserUtils.parseTo_Date(temp, "dd/MM/yyyy");
    								
    							} catch(java.lang.Exception ex_tFileInputDelimited_2) {
globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",ex_tFileInputDelimited_2.getMessage());
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"fechaNacimiento", "row12", temp, ex_tFileInputDelimited_2), ex_tFileInputDelimited_2));
								}
    							
						} else {						
							
								
									row12.fechaNacimiento = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_2 = 8;
					
							row12.estadoEntidad01 = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
					columnIndexWithD_tFileInputDelimited_2 = 9;
					
						temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						if(temp.length() > 0) {
							
								try {
								
    									row12.fechaAfiliacionEntidad01 = ParserUtils.parseTo_Date(temp, "dd/MM/yyyy");
    								
    							} catch(java.lang.Exception ex_tFileInputDelimited_2) {
globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",ex_tFileInputDelimited_2.getMessage());
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"fechaAfiliacionEntidad01", "row12", temp, ex_tFileInputDelimited_2), ex_tFileInputDelimited_2));
								}
    							
						} else {						
							
								
									row12.fechaAfiliacionEntidad01 = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_2 = 10;
					
							row12.codigoEntidad01 = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
					columnIndexWithD_tFileInputDelimited_2 = 11;
					
						temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						if(temp.length() > 0) {
							
								try {
								
    								row12.tipoEntidad01 = ParserUtils.parseTo_Character(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_2) {
globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",ex_tFileInputDelimited_2.getMessage());
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"tipoEntidad01", "row12", temp, ex_tFileInputDelimited_2), ex_tFileInputDelimited_2));
								}
    							
						} else {						
							
								
									row12.tipoEntidad01 = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_2 = 12;
					
							row12.estadoEntidad02 = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
					columnIndexWithD_tFileInputDelimited_2 = 13;
					
						temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						if(temp.length() > 0) {
							
								try {
								
    									row12.fechaAfiliacionEntidad02 = ParserUtils.parseTo_Date(temp, "dd/MM/yyyy");
    								
    							} catch(java.lang.Exception ex_tFileInputDelimited_2) {
globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",ex_tFileInputDelimited_2.getMessage());
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"fechaAfiliacionEntidad02", "row12", temp, ex_tFileInputDelimited_2), ex_tFileInputDelimited_2));
								}
    							
						} else {						
							
								
									row12.fechaAfiliacionEntidad02 = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_2 = 14;
					
							row12.codigoEntidad02 = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
					columnIndexWithD_tFileInputDelimited_2 = 15;
					
						temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						if(temp.length() > 0) {
							
								try {
								
    								row12.tipoEntidad02 = ParserUtils.parseTo_Character(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_2) {
globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",ex_tFileInputDelimited_2.getMessage());
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"tipoEntidad02", "row12", temp, ex_tFileInputDelimited_2), ex_tFileInputDelimited_2));
								}
    							
						} else {						
							
								
									row12.tipoEntidad02 = null;
								
							
						}
					
				
				
										
										if(rowstate_tFileInputDelimited_2.getException()!=null) {
											throw rowstate_tFileInputDelimited_2.getException();
										}
										
										
							
			    					} catch (java.lang.Exception e) {
globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",e.getMessage());
			        					whetherReject_tFileInputDelimited_2 = true;
			        					
			                					System.err.println(e.getMessage());
			                					row12 = null;
			                				
										
			    					}
								

 



/**
 * [tFileInputDelimited_2 begin ] stop
 */
	
	/**
	 * [tFileInputDelimited_2 main ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_2";
	
	

 


	tos_count_tFileInputDelimited_2++;

/**
 * [tFileInputDelimited_2 main ] stop
 */
	
	/**
	 * [tFileInputDelimited_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_2";
	
	

 



/**
 * [tFileInputDelimited_2 process_data_begin ] stop
 */
// Start of branch "row12"
if(row12 != null) { 



	
	/**
	 * [tHashOutput_1 main ] start
	 */

	

	
	
	currentComponent="tHashOutput_1";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row12"
						
						);
					}
					



    
		row12Struct oneRow_tHashOutput_1 = new row12Struct();
				
					oneRow_tHashOutput_1.consecutivoAfiliado = row12.consecutivoAfiliado;
					oneRow_tHashOutput_1.tipoDocumentoAfiliado = row12.tipoDocumentoAfiliado;
					oneRow_tHashOutput_1.numeroIdentificacionAfiliado = row12.numeroIdentificacionAfiliado;
					oneRow_tHashOutput_1.primerApellidoAfiliado = row12.primerApellidoAfiliado;
					oneRow_tHashOutput_1.segundoApellidoAfiliado = row12.segundoApellidoAfiliado;
					oneRow_tHashOutput_1.primerNombreAfiliado = row12.primerNombreAfiliado;
					oneRow_tHashOutput_1.segundoNombreAfiliado = row12.segundoNombreAfiliado;
					oneRow_tHashOutput_1.fechaNacimiento = row12.fechaNacimiento;
					oneRow_tHashOutput_1.estadoEntidad01 = row12.estadoEntidad01;
					oneRow_tHashOutput_1.fechaAfiliacionEntidad01 = row12.fechaAfiliacionEntidad01;
					oneRow_tHashOutput_1.codigoEntidad01 = row12.codigoEntidad01;
					oneRow_tHashOutput_1.tipoEntidad01 = row12.tipoEntidad01;
					oneRow_tHashOutput_1.estadoEntidad02 = row12.estadoEntidad02;
					oneRow_tHashOutput_1.fechaAfiliacionEntidad02 = row12.fechaAfiliacionEntidad02;
					oneRow_tHashOutput_1.codigoEntidad02 = row12.codigoEntidad02;
					oneRow_tHashOutput_1.tipoEntidad02 = row12.tipoEntidad02;
		
        tHashFile_tHashOutput_1.put(oneRow_tHashOutput_1);
        nb_line_tHashOutput_1 ++;

 


	tos_count_tHashOutput_1++;

/**
 * [tHashOutput_1 main ] stop
 */
	
	/**
	 * [tHashOutput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashOutput_1";
	
	

 



/**
 * [tHashOutput_1 process_data_begin ] stop
 */
	
	/**
	 * [tHashOutput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashOutput_1";
	
	

 



/**
 * [tHashOutput_1 process_data_end ] stop
 */

} // End of branch "row12"




	
	/**
	 * [tFileInputDelimited_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_2";
	
	

 



/**
 * [tFileInputDelimited_2 process_data_end ] stop
 */
	
	/**
	 * [tFileInputDelimited_2 end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_2";
	
	



            }
            }finally{
                if(!((Object)(context.fileSystem_Path+"/"+context.fileSystem_Area+"/"+context.infoNombreArchivo) instanceof java.io.InputStream)){
                	if(fid_tFileInputDelimited_2!=null){
                		fid_tFileInputDelimited_2.close();
                	}
                }
                if(fid_tFileInputDelimited_2!=null){
                	globalMap.put("tFileInputDelimited_2_NB_LINE", fid_tFileInputDelimited_2.getRowNumber());
					
                }
			}
			  

 

ok_Hash.put("tFileInputDelimited_2", true);
end_Hash.put("tFileInputDelimited_2", System.currentTimeMillis());




/**
 * [tFileInputDelimited_2 end ] stop
 */

	
	/**
	 * [tHashOutput_1 end ] start
	 */

	

	
	
	currentComponent="tHashOutput_1";
	
	
globalMap.put("tHashOutput_1_NB_LINE", nb_line_tHashOutput_1);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row12");
			  	}
			  	
 

ok_Hash.put("tHashOutput_1", true);
end_Hash.put("tHashOutput_1", System.currentTimeMillis());




/**
 * [tHashOutput_1 end ] stop
 */



				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tFileInputDelimited_2:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk4", 0, "ok");
								} 
							
							tOracleInput_5Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileInputDelimited_2 finally ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_2";
	
	

 



/**
 * [tFileInputDelimited_2 finally ] stop
 */

	
	/**
	 * [tHashOutput_1 finally ] start
	 */

	

	
	
	currentComponent="tHashOutput_1";
	
	

 



/**
 * [tHashOutput_1 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileInputDelimited_2_SUBPROCESS_STATE", 1);
	}
	


public void tJava_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_3_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tJava_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_3", false);
		start_Hash.put("tJava_3", System.currentTimeMillis());
		
	
	currentComponent="tJava_3";
	
	
		int tos_count_tJava_3 = 0;
		


context.outCodigo=false;
 



/**
 * [tJava_3 begin ] stop
 */
	
	/**
	 * [tJava_3 main ] start
	 */

	

	
	
	currentComponent="tJava_3";
	
	

 


	tos_count_tJava_3++;

/**
 * [tJava_3 main ] stop
 */
	
	/**
	 * [tJava_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_3";
	
	

 



/**
 * [tJava_3 process_data_begin ] stop
 */
	
	/**
	 * [tJava_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_3";
	
	

 



/**
 * [tJava_3 process_data_end ] stop
 */
	
	/**
	 * [tJava_3 end ] start
	 */

	

	
	
	currentComponent="tJava_3";
	
	

 

ok_Hash.put("tJava_3", true);
end_Hash.put("tJava_3", System.currentTimeMillis());




/**
 * [tJava_3 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_3 finally ] start
	 */

	

	
	
	currentComponent="tJava_3";
	
	

 



/**
 * [tJava_3 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_3_SUBPROCESS_STATE", 1);
	}
	


public static class row11_0Struct implements routines.system.IPersistableRow<row11_0Struct> {
    final static byte[] commonByteArrayLock_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion = new byte[0];
    static byte[] commonByteArray_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion = new byte[0];

	
			    public Integer ID;

				public Integer getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return true;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return 0;
				}
				public Integer IDPrecision(){
				    return 0;
				}
				public String IDDefault(){
				
					return null;
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public String NOMBRE;

				public String getNOMBRE () {
					return this.NOMBRE;
				}

				public Boolean NOMBREIsNullable(){
				    return true;
				}
				public Boolean NOMBREIsKey(){
				    return false;
				}
				public Integer NOMBRELength(){
				    return 0;
				}
				public Integer NOMBREPrecision(){
				    return 0;
				}
				public String NOMBREDefault(){
				
					return null;
				
				}
				public String NOMBREComment(){
				
				    return "";
				
				}
				public String NOMBREPattern(){
				
					return "";
				
				}
				public String NOMBREOriginalDbColumnName(){
				
					return "NOMBRE";
				
				}

				
			    public String SIGLA;

				public String getSIGLA () {
					return this.SIGLA;
				}

				public Boolean SIGLAIsNullable(){
				    return true;
				}
				public Boolean SIGLAIsKey(){
				    return false;
				}
				public Integer SIGLALength(){
				    return 0;
				}
				public Integer SIGLAPrecision(){
				    return 0;
				}
				public String SIGLADefault(){
				
					return null;
				
				}
				public String SIGLAComment(){
				
				    return "";
				
				}
				public String SIGLAPattern(){
				
					return "";
				
				}
				public String SIGLAOriginalDbColumnName(){
				
					return "SIGLA";
				
				}

				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion.length) {
				if(length < 1024 && commonByteArray_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion.length == 0) {
   					commonByteArray_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion = new byte[1024];
				} else {
   					commonByteArray_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion, 0, length);
			strReturn = new String(commonByteArray_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion.length) {
				if(length < 1024 && commonByteArray_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion.length == 0) {
   					commonByteArray_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion = new byte[1024];
				} else {
   					commonByteArray_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion, 0, length);
			strReturn = new String(commonByteArray_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion) {

        	try {

        		int length = 0;
		
						this.ID = readInteger(dis);
					
					this.NOMBRE = readString(dis);
					
					this.SIGLA = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion) {

        	try {

        		int length = 0;
		
						this.ID = readInteger(dis);
					
					this.NOMBRE = readString(dis);
					
					this.SIGLA = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.ID,dos);
					
					// String
				
						writeString(this.NOMBRE,dos);
					
					// String
				
						writeString(this.SIGLA,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.ID,dos);
					
					// String
				
						writeString(this.NOMBRE,dos);
					
					// String
				
						writeString(this.SIGLA,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",NOMBRE="+NOMBRE);
		sb.append(",SIGLA="+SIGLA);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row11_0Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_5Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_5_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row11_0Struct row11_0 = new row11_0Struct();




	
	/**
	 * [tHashOutput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashOutput_2", false);
		start_Hash.put("tHashOutput_2", System.currentTimeMillis());
		
	
	currentComponent="tHashOutput_2";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row11_0");
					}
				
		int tos_count_tHashOutput_2 = 0;
		



org.talend.designer.components.hashfile.common.MapHashFile mf_tHashOutput_2=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();    
		org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row11_0Struct> tHashFile_tHashOutput_2 = null;
		String hashKey_tHashOutput_2 = "tHashFile_MinSaludEtapa3Multiafiliacion_" + pid + "_tHashOutput_2";
			synchronized(org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.get(hashKey_tHashOutput_2)){
			    if(mf_tHashOutput_2.getResourceMap().get(hashKey_tHashOutput_2) == null){
	      		    mf_tHashOutput_2.getResourceMap().put(hashKey_tHashOutput_2, new org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row11_0Struct>(org.talend.designer.components.hashfile.common.MATCHING_MODE.KEEP_ALL));
	      		    tHashFile_tHashOutput_2 = mf_tHashOutput_2.getResourceMap().get(hashKey_tHashOutput_2);
			    }else{
			    	tHashFile_tHashOutput_2 = mf_tHashOutput_2.getResourceMap().get(hashKey_tHashOutput_2);
			    }
			}
        int nb_line_tHashOutput_2 = 0;

 



/**
 * [tHashOutput_2 begin ] stop
 */



	
	/**
	 * [tOracleInput_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_5", false);
		start_Hash.put("tOracleInput_5", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_5";
	
	
		int tos_count_tOracleInput_5 = 0;
		
	


	
		    int nb_line_tOracleInput_5 = 0;
		    java.sql.Connection conn_tOracleInput_5 = null;
				conn_tOracleInput_5 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");
				
                boolean isTimeZoneNull_tOracleInput_5 = false;
				boolean isConnectionWrapped_tOracleInput_5 = !(conn_tOracleInput_5 instanceof oracle.jdbc.OracleConnection) && conn_tOracleInput_5.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tOracleInput_5 = null;
                if (isConnectionWrapped_tOracleInput_5) {
					unwrappedOraConn_tOracleInput_5 = conn_tOracleInput_5.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tOracleInput_5 != null) {
                        isTimeZoneNull_tOracleInput_5 = (unwrappedOraConn_tOracleInput_5.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tOracleInput_5 = (((oracle.jdbc.OracleConnection)conn_tOracleInput_5).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tOracleInput_5) {
					java.sql.Statement stmtGetTZ_tOracleInput_5 = conn_tOracleInput_5.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_5 = stmtGetTZ_tOracleInput_5.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_5 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tOracleInput_5.next()) {
						sessionTimezone_tOracleInput_5 = rsGetTZ_tOracleInput_5.getString(1);
					}
					if (isConnectionWrapped_tOracleInput_5 && unwrappedOraConn_tOracleInput_5 != null) {
                        unwrappedOraConn_tOracleInput_5.setSessionTimeZone(sessionTimezone_tOracleInput_5);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_5).setSessionTimeZone(sessionTimezone_tOracleInput_5);
                    }
				}
			
		    
			java.sql.Statement stmt_tOracleInput_5 = conn_tOracleInput_5.createStatement();

		    String dbquery_tOracleInput_5 = "SELECT \n	GTD.\"ID\",\n	GTD.NOMBRE,\n	GTD.SIGLA\nFROM\n	SALUDSIS.GEN_TDOCUMENTOS GTD\nWHERE\n	GTD.ESTREGISTRO_ID = 1";
		    

		    globalMap.put("tOracleInput_5_QUERY",dbquery_tOracleInput_5);

		    java.sql.ResultSet rs_tOracleInput_5 = null;

		    try {
		    	rs_tOracleInput_5 = stmt_tOracleInput_5.executeQuery(dbquery_tOracleInput_5);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_5 = rs_tOracleInput_5.getMetaData();
		    	int colQtyInRs_tOracleInput_5 = rsmd_tOracleInput_5.getColumnCount();

		    String tmpContent_tOracleInput_5 = null;
		    
		    
		    while (rs_tOracleInput_5.next()) {
		        nb_line_tOracleInput_5++;
		        
							if(colQtyInRs_tOracleInput_5 < 1) {
								row11_0.ID = null;
							} else {
		                          
					if(rs_tOracleInput_5.getObject(1) != null) {
						row11_0.ID = rs_tOracleInput_5.getInt(1);
					} else {
				
						row11_0.ID = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_5 < 2) {
								row11_0.NOMBRE = null;
							} else {
	                         		
        	row11_0.NOMBRE = routines.system.JDBCUtil.getString(rs_tOracleInput_5, 2, false);
		                    }
							if(colQtyInRs_tOracleInput_5 < 3) {
								row11_0.SIGLA = null;
							} else {
	                         		
        	row11_0.SIGLA = routines.system.JDBCUtil.getString(rs_tOracleInput_5, 3, false);
		                    }
					




 



/**
 * [tOracleInput_5 begin ] stop
 */
	
	/**
	 * [tOracleInput_5 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_5";
	
	

 


	tos_count_tOracleInput_5++;

/**
 * [tOracleInput_5 main ] stop
 */
	
	/**
	 * [tOracleInput_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_5";
	
	

 



/**
 * [tOracleInput_5 process_data_begin ] stop
 */

	
	/**
	 * [tHashOutput_2 main ] start
	 */

	

	
	
	currentComponent="tHashOutput_2";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row11_0"
						
						);
					}
					



    
		row11_0Struct oneRow_tHashOutput_2 = new row11_0Struct();
				
					oneRow_tHashOutput_2.ID = row11_0.ID;
					oneRow_tHashOutput_2.NOMBRE = row11_0.NOMBRE;
					oneRow_tHashOutput_2.SIGLA = row11_0.SIGLA;
		
        tHashFile_tHashOutput_2.put(oneRow_tHashOutput_2);
        nb_line_tHashOutput_2 ++;

 


	tos_count_tHashOutput_2++;

/**
 * [tHashOutput_2 main ] stop
 */
	
	/**
	 * [tHashOutput_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashOutput_2";
	
	

 



/**
 * [tHashOutput_2 process_data_begin ] stop
 */
	
	/**
	 * [tHashOutput_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashOutput_2";
	
	

 



/**
 * [tHashOutput_2 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_5";
	
	

 



/**
 * [tOracleInput_5 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_5 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_5";
	
	

}
}finally{
	if (rs_tOracleInput_5 != null) {
		rs_tOracleInput_5.close();
	}
	if (stmt_tOracleInput_5 != null) {
		stmt_tOracleInput_5.close();
	}
}

globalMap.put("tOracleInput_5_NB_LINE",nb_line_tOracleInput_5);
 

ok_Hash.put("tOracleInput_5", true);
end_Hash.put("tOracleInput_5", System.currentTimeMillis());




/**
 * [tOracleInput_5 end ] stop
 */

	
	/**
	 * [tHashOutput_2 end ] start
	 */

	

	
	
	currentComponent="tHashOutput_2";
	
	
globalMap.put("tHashOutput_2_NB_LINE", nb_line_tHashOutput_2);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row11_0");
			  	}
			  	
 

ok_Hash.put("tHashOutput_2", true);
end_Hash.put("tHashOutput_2", System.currentTimeMillis());




/**
 * [tHashOutput_2 end ] stop
 */



				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tOracleInput_5:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk2", 0, "ok");
								} 
							
							tOracleInput_1Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleInput_5 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_5";
	
	

 



/**
 * [tOracleInput_5 finally ] stop
 */

	
	/**
	 * [tHashOutput_2 finally ] start
	 */

	

	
	
	currentComponent="tHashOutput_2";
	
	

 



/**
 * [tHashOutput_2 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_5_SUBPROCESS_STATE", 1);
	}
	


public static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
    final static byte[] commonByteArrayLock_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion = new byte[0];
    static byte[] commonByteArray_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public int ID;

				public int getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return false;
				}
				public Boolean IDIsKey(){
				    return true;
				}
				public Integer IDLength(){
				    return 22;
				}
				public Integer IDPrecision(){
				    return 0;
				}
				public String IDDefault(){
				
					return null;
				
				}
				public String IDComment(){
				
				    return "PK - Llave primaria";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public String CODIGO;

				public String getCODIGO () {
					return this.CODIGO;
				}

				public Boolean CODIGOIsNullable(){
				    return true;
				}
				public Boolean CODIGOIsKey(){
				    return false;
				}
				public Integer CODIGOLength(){
				    return 6;
				}
				public Integer CODIGOPrecision(){
				    return 0;
				}
				public String CODIGODefault(){
				
					return null;
				
				}
				public String CODIGOComment(){
				
				    return "Codigo de la eps";
				
				}
				public String CODIGOPattern(){
				
					return "";
				
				}
				public String CODIGOOriginalDbColumnName(){
				
					return "CODIGO";
				
				}

				
			    public String DESCRIPCION;

				public String getDESCRIPCION () {
					return this.DESCRIPCION;
				}

				public Boolean DESCRIPCIONIsNullable(){
				    return true;
				}
				public Boolean DESCRIPCIONIsKey(){
				    return false;
				}
				public Integer DESCRIPCIONLength(){
				    return 500;
				}
				public Integer DESCRIPCIONPrecision(){
				    return 0;
				}
				public String DESCRIPCIONDefault(){
				
					return null;
				
				}
				public String DESCRIPCIONComment(){
				
				    return "Descripcion de la eps";
				
				}
				public String DESCRIPCIONPattern(){
				
					return "";
				
				}
				public String DESCRIPCIONOriginalDbColumnName(){
				
					return "DESCRIPCION";
				
				}

				
			    public Integer TEPS_ID;

				public Integer getTEPS_ID () {
					return this.TEPS_ID;
				}

				public Boolean TEPS_IDIsNullable(){
				    return true;
				}
				public Boolean TEPS_IDIsKey(){
				    return false;
				}
				public Integer TEPS_IDLength(){
				    return 22;
				}
				public Integer TEPS_IDPrecision(){
				    return 0;
				}
				public String TEPS_IDDefault(){
				
					return null;
				
				}
				public String TEPS_IDComment(){
				
				    return "Foranea del tipo de la eps";
				
				}
				public String TEPS_IDPattern(){
				
					return "";
				
				}
				public String TEPS_IDOriginalDbColumnName(){
				
					return "TEPS_ID";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
							result = prime * result + (int) this.ID;
						
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row1Struct other = (row1Struct) obj;
		
						if (this.ID != other.ID)
							return false;
					

		return true;
    }

	public void copyDataTo(row1Struct other) {

		other.ID = this.ID;
	            other.CODIGO = this.CODIGO;
	            other.DESCRIPCION = this.DESCRIPCION;
	            other.TEPS_ID = this.TEPS_ID;
	            
	}

	public void copyKeysDataTo(row1Struct other) {

		other.ID = this.ID;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion.length) {
				if(length < 1024 && commonByteArray_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion.length == 0) {
   					commonByteArray_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion = new byte[1024];
				} else {
   					commonByteArray_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion, 0, length);
			strReturn = new String(commonByteArray_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion.length) {
				if(length < 1024 && commonByteArray_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion.length == 0) {
   					commonByteArray_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion = new byte[1024];
				} else {
   					commonByteArray_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion, 0, length);
			strReturn = new String(commonByteArray_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion) {

        	try {

        		int length = 0;
		
			        this.ID = dis.readInt();
					
					this.CODIGO = readString(dis);
					
					this.DESCRIPCION = readString(dis);
					
						this.TEPS_ID = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion) {

        	try {

        		int length = 0;
		
			        this.ID = dis.readInt();
					
					this.CODIGO = readString(dis);
					
					this.DESCRIPCION = readString(dis);
					
						this.TEPS_ID = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.ID);
					
					// String
				
						writeString(this.CODIGO,dos);
					
					// String
				
						writeString(this.DESCRIPCION,dos);
					
					// Integer
				
						writeInteger(this.TEPS_ID,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.ID);
					
					// String
				
						writeString(this.CODIGO,dos);
					
					// String
				
						writeString(this.DESCRIPCION,dos);
					
					// Integer
				
						writeInteger(this.TEPS_ID,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",CODIGO="+CODIGO);
		sb.append(",DESCRIPCION="+DESCRIPCION);
		sb.append(",TEPS_ID="+String.valueOf(TEPS_ID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row1Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.ID, other.ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row1Struct row1 = new row1Struct();




	
	/**
	 * [tHashOutput_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashOutput_3", false);
		start_Hash.put("tHashOutput_3", System.currentTimeMillis());
		
	
	currentComponent="tHashOutput_3";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row1");
					}
				
		int tos_count_tHashOutput_3 = 0;
		



org.talend.designer.components.hashfile.common.MapHashFile mf_tHashOutput_3=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();    
		org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row1Struct> tHashFile_tHashOutput_3 = null;
		String hashKey_tHashOutput_3 = "tHashFile_MinSaludEtapa3Multiafiliacion_" + pid + "_tHashOutput_3";
			synchronized(org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.get(hashKey_tHashOutput_3)){
			    if(mf_tHashOutput_3.getResourceMap().get(hashKey_tHashOutput_3) == null){
	      		    mf_tHashOutput_3.getResourceMap().put(hashKey_tHashOutput_3, new org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row1Struct>(org.talend.designer.components.hashfile.common.MATCHING_MODE.KEEP_ALL));
	      		    tHashFile_tHashOutput_3 = mf_tHashOutput_3.getResourceMap().get(hashKey_tHashOutput_3);
			    }else{
			    	tHashFile_tHashOutput_3 = mf_tHashOutput_3.getResourceMap().get(hashKey_tHashOutput_3);
			    }
			}
        int nb_line_tHashOutput_3 = 0;

 



/**
 * [tHashOutput_3 begin ] stop
 */



	
	/**
	 * [tOracleInput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_1", false);
		start_Hash.put("tOracleInput_1", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_1";
	
	
		int tos_count_tOracleInput_1 = 0;
		
	


	
		    int nb_line_tOracleInput_1 = 0;
		    java.sql.Connection conn_tOracleInput_1 = null;
				conn_tOracleInput_1 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");
				
                boolean isTimeZoneNull_tOracleInput_1 = false;
				boolean isConnectionWrapped_tOracleInput_1 = !(conn_tOracleInput_1 instanceof oracle.jdbc.OracleConnection) && conn_tOracleInput_1.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tOracleInput_1 = null;
                if (isConnectionWrapped_tOracleInput_1) {
					unwrappedOraConn_tOracleInput_1 = conn_tOracleInput_1.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tOracleInput_1 != null) {
                        isTimeZoneNull_tOracleInput_1 = (unwrappedOraConn_tOracleInput_1.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tOracleInput_1 = (((oracle.jdbc.OracleConnection)conn_tOracleInput_1).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tOracleInput_1) {
					java.sql.Statement stmtGetTZ_tOracleInput_1 = conn_tOracleInput_1.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_1 = stmtGetTZ_tOracleInput_1.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_1 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tOracleInput_1.next()) {
						sessionTimezone_tOracleInput_1 = rsGetTZ_tOracleInput_1.getString(1);
					}
					if (isConnectionWrapped_tOracleInput_1 && unwrappedOraConn_tOracleInput_1 != null) {
                        unwrappedOraConn_tOracleInput_1.setSessionTimeZone(sessionTimezone_tOracleInput_1);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_1).setSessionTimeZone(sessionTimezone_tOracleInput_1);
                    }
				}
			
		    
			java.sql.Statement stmt_tOracleInput_1 = conn_tOracleInput_1.createStatement();

		    String dbquery_tOracleInput_1 = "SELECT \n  EPS.ID, \n  EPS.CODIGO, \n  EPS.DESCRIPCION, \n  EPS.TEPS_ID\nFROM\n	SALUDSIS.AFI_EPS EPS\nWHERE\n	EPS.ESTRE"
+"GISTRO_ID = 1";
		    

		    globalMap.put("tOracleInput_1_QUERY",dbquery_tOracleInput_1);

		    java.sql.ResultSet rs_tOracleInput_1 = null;

		    try {
		    	rs_tOracleInput_1 = stmt_tOracleInput_1.executeQuery(dbquery_tOracleInput_1);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_1 = rs_tOracleInput_1.getMetaData();
		    	int colQtyInRs_tOracleInput_1 = rsmd_tOracleInput_1.getColumnCount();

		    String tmpContent_tOracleInput_1 = null;
		    
		    
		    while (rs_tOracleInput_1.next()) {
		        nb_line_tOracleInput_1++;
		        
							if(colQtyInRs_tOracleInput_1 < 1) {
								row1.ID = 0;
							} else {
		                          
					if(rs_tOracleInput_1.getObject(1) != null) {
						row1.ID = rs_tOracleInput_1.getInt(1);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_1 < 2) {
								row1.CODIGO = null;
							} else {
	                         		
        	row1.CODIGO = routines.system.JDBCUtil.getString(rs_tOracleInput_1, 2, false);
		                    }
							if(colQtyInRs_tOracleInput_1 < 3) {
								row1.DESCRIPCION = null;
							} else {
	                         		
        	row1.DESCRIPCION = routines.system.JDBCUtil.getString(rs_tOracleInput_1, 3, false);
		                    }
							if(colQtyInRs_tOracleInput_1 < 4) {
								row1.TEPS_ID = null;
							} else {
		                          
					if(rs_tOracleInput_1.getObject(4) != null) {
						row1.TEPS_ID = rs_tOracleInput_1.getInt(4);
					} else {
				
						row1.TEPS_ID = null;
					}
		                    }
					




 



/**
 * [tOracleInput_1 begin ] stop
 */
	
	/**
	 * [tOracleInput_1 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_1";
	
	

 


	tos_count_tOracleInput_1++;

/**
 * [tOracleInput_1 main ] stop
 */
	
	/**
	 * [tOracleInput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_1";
	
	

 



/**
 * [tOracleInput_1 process_data_begin ] stop
 */

	
	/**
	 * [tHashOutput_3 main ] start
	 */

	

	
	
	currentComponent="tHashOutput_3";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row1"
						
						);
					}
					



    
		row1Struct oneRow_tHashOutput_3 = new row1Struct();
				
					oneRow_tHashOutput_3.ID = row1.ID;
					oneRow_tHashOutput_3.CODIGO = row1.CODIGO;
					oneRow_tHashOutput_3.DESCRIPCION = row1.DESCRIPCION;
					oneRow_tHashOutput_3.TEPS_ID = row1.TEPS_ID;
		
        tHashFile_tHashOutput_3.put(oneRow_tHashOutput_3);
        nb_line_tHashOutput_3 ++;

 


	tos_count_tHashOutput_3++;

/**
 * [tHashOutput_3 main ] stop
 */
	
	/**
	 * [tHashOutput_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashOutput_3";
	
	

 



/**
 * [tHashOutput_3 process_data_begin ] stop
 */
	
	/**
	 * [tHashOutput_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashOutput_3";
	
	

 



/**
 * [tHashOutput_3 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_1";
	
	

 



/**
 * [tOracleInput_1 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_1 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_1";
	
	

}
}finally{
	if (rs_tOracleInput_1 != null) {
		rs_tOracleInput_1.close();
	}
	if (stmt_tOracleInput_1 != null) {
		stmt_tOracleInput_1.close();
	}
}

globalMap.put("tOracleInput_1_NB_LINE",nb_line_tOracleInput_1);
 

ok_Hash.put("tOracleInput_1", true);
end_Hash.put("tOracleInput_1", System.currentTimeMillis());




/**
 * [tOracleInput_1 end ] stop
 */

	
	/**
	 * [tHashOutput_3 end ] start
	 */

	

	
	
	currentComponent="tHashOutput_3";
	
	
globalMap.put("tHashOutput_3_NB_LINE", nb_line_tHashOutput_3);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row1");
			  	}
			  	
 

ok_Hash.put("tHashOutput_3", true);
end_Hash.put("tHashOutput_3", System.currentTimeMillis());




/**
 * [tHashOutput_3 end ] stop
 */



				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tOracleInput_1:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk3", 0, "ok");
								} 
							
							tOracleInput_2Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleInput_1 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_1";
	
	

 



/**
 * [tOracleInput_1 finally ] stop
 */

	
	/**
	 * [tHashOutput_3 finally ] start
	 */

	

	
	
	currentComponent="tHashOutput_3";
	
	

 



/**
 * [tHashOutput_3 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_1_SUBPROCESS_STATE", 1);
	}
	


public static class row3Struct implements routines.system.IPersistableRow<row3Struct> {
    final static byte[] commonByteArrayLock_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion = new byte[0];
    static byte[] commonByteArray_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public int ID;

				public int getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return false;
				}
				public Boolean IDIsKey(){
				    return true;
				}
				public Integer IDLength(){
				    return 22;
				}
				public Integer IDPrecision(){
				    return 0;
				}
				public String IDDefault(){
				
					return null;
				
				}
				public String IDComment(){
				
				    return "PK - Llave primaria";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public String NOMBRE;

				public String getNOMBRE () {
					return this.NOMBRE;
				}

				public Boolean NOMBREIsNullable(){
				    return false;
				}
				public Boolean NOMBREIsKey(){
				    return false;
				}
				public Integer NOMBRELength(){
				    return 50;
				}
				public Integer NOMBREPrecision(){
				    return 0;
				}
				public String NOMBREDefault(){
				
					return null;
				
				}
				public String NOMBREComment(){
				
				    return "Nombre del tipo";
				
				}
				public String NOMBREPattern(){
				
					return "";
				
				}
				public String NOMBREOriginalDbColumnName(){
				
					return "NOMBRE";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
							result = prime * result + (int) this.ID;
						
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row3Struct other = (row3Struct) obj;
		
						if (this.ID != other.ID)
							return false;
					

		return true;
    }

	public void copyDataTo(row3Struct other) {

		other.ID = this.ID;
	            other.NOMBRE = this.NOMBRE;
	            
	}

	public void copyKeysDataTo(row3Struct other) {

		other.ID = this.ID;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion.length) {
				if(length < 1024 && commonByteArray_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion.length == 0) {
   					commonByteArray_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion = new byte[1024];
				} else {
   					commonByteArray_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion, 0, length);
			strReturn = new String(commonByteArray_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion.length) {
				if(length < 1024 && commonByteArray_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion.length == 0) {
   					commonByteArray_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion = new byte[1024];
				} else {
   					commonByteArray_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion, 0, length);
			strReturn = new String(commonByteArray_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion) {

        	try {

        		int length = 0;
		
			        this.ID = dis.readInt();
					
					this.NOMBRE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion) {

        	try {

        		int length = 0;
		
			        this.ID = dis.readInt();
					
					this.NOMBRE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.ID);
					
					// String
				
						writeString(this.NOMBRE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.ID);
					
					// String
				
						writeString(this.NOMBRE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",NOMBRE="+NOMBRE);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row3Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.ID, other.ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row3Struct row3 = new row3Struct();




	
	/**
	 * [tHashOutput_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashOutput_4", false);
		start_Hash.put("tHashOutput_4", System.currentTimeMillis());
		
	
	currentComponent="tHashOutput_4";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row3");
					}
				
		int tos_count_tHashOutput_4 = 0;
		



org.talend.designer.components.hashfile.common.MapHashFile mf_tHashOutput_4=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();    
		org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row3Struct> tHashFile_tHashOutput_4 = null;
		String hashKey_tHashOutput_4 = "tHashFile_MinSaludEtapa3Multiafiliacion_" + pid + "_tHashOutput_4";
			synchronized(org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.get(hashKey_tHashOutput_4)){
			    if(mf_tHashOutput_4.getResourceMap().get(hashKey_tHashOutput_4) == null){
	      		    mf_tHashOutput_4.getResourceMap().put(hashKey_tHashOutput_4, new org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row3Struct>(org.talend.designer.components.hashfile.common.MATCHING_MODE.KEEP_ALL));
	      		    tHashFile_tHashOutput_4 = mf_tHashOutput_4.getResourceMap().get(hashKey_tHashOutput_4);
			    }else{
			    	tHashFile_tHashOutput_4 = mf_tHashOutput_4.getResourceMap().get(hashKey_tHashOutput_4);
			    }
			}
        int nb_line_tHashOutput_4 = 0;

 



/**
 * [tHashOutput_4 begin ] stop
 */



	
	/**
	 * [tOracleInput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_2", false);
		start_Hash.put("tOracleInput_2", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_2";
	
	
		int tos_count_tOracleInput_2 = 0;
		
	


	
		    int nb_line_tOracleInput_2 = 0;
		    java.sql.Connection conn_tOracleInput_2 = null;
				conn_tOracleInput_2 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");
				
                boolean isTimeZoneNull_tOracleInput_2 = false;
				boolean isConnectionWrapped_tOracleInput_2 = !(conn_tOracleInput_2 instanceof oracle.jdbc.OracleConnection) && conn_tOracleInput_2.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tOracleInput_2 = null;
                if (isConnectionWrapped_tOracleInput_2) {
					unwrappedOraConn_tOracleInput_2 = conn_tOracleInput_2.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tOracleInput_2 != null) {
                        isTimeZoneNull_tOracleInput_2 = (unwrappedOraConn_tOracleInput_2.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tOracleInput_2 = (((oracle.jdbc.OracleConnection)conn_tOracleInput_2).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tOracleInput_2) {
					java.sql.Statement stmtGetTZ_tOracleInput_2 = conn_tOracleInput_2.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_2 = stmtGetTZ_tOracleInput_2.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_2 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tOracleInput_2.next()) {
						sessionTimezone_tOracleInput_2 = rsGetTZ_tOracleInput_2.getString(1);
					}
					if (isConnectionWrapped_tOracleInput_2 && unwrappedOraConn_tOracleInput_2 != null) {
                        unwrappedOraConn_tOracleInput_2.setSessionTimeZone(sessionTimezone_tOracleInput_2);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_2).setSessionTimeZone(sessionTimezone_tOracleInput_2);
                    }
				}
			
		    
			java.sql.Statement stmt_tOracleInput_2 = conn_tOracleInput_2.createStatement();

		    String dbquery_tOracleInput_2 = "SELECT \n	TEPS.ID,\n	TEPS.NOMBRE  \nFROM\n	SALUDSIS.AFI_TEPS TEPS\nWHERE\n	TEPS.ESTREGISTRO_ID = 1";
		    

		    globalMap.put("tOracleInput_2_QUERY",dbquery_tOracleInput_2);

		    java.sql.ResultSet rs_tOracleInput_2 = null;

		    try {
		    	rs_tOracleInput_2 = stmt_tOracleInput_2.executeQuery(dbquery_tOracleInput_2);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_2 = rs_tOracleInput_2.getMetaData();
		    	int colQtyInRs_tOracleInput_2 = rsmd_tOracleInput_2.getColumnCount();

		    String tmpContent_tOracleInput_2 = null;
		    
		    
		    while (rs_tOracleInput_2.next()) {
		        nb_line_tOracleInput_2++;
		        
							if(colQtyInRs_tOracleInput_2 < 1) {
								row3.ID = 0;
							} else {
		                          
					if(rs_tOracleInput_2.getObject(1) != null) {
						row3.ID = rs_tOracleInput_2.getInt(1);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_2 < 2) {
								row3.NOMBRE = null;
							} else {
	                         		
        	row3.NOMBRE = routines.system.JDBCUtil.getString(rs_tOracleInput_2, 2, false);
		                    }
					




 



/**
 * [tOracleInput_2 begin ] stop
 */
	
	/**
	 * [tOracleInput_2 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_2";
	
	

 


	tos_count_tOracleInput_2++;

/**
 * [tOracleInput_2 main ] stop
 */
	
	/**
	 * [tOracleInput_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_2";
	
	

 



/**
 * [tOracleInput_2 process_data_begin ] stop
 */

	
	/**
	 * [tHashOutput_4 main ] start
	 */

	

	
	
	currentComponent="tHashOutput_4";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row3"
						
						);
					}
					



    
		row3Struct oneRow_tHashOutput_4 = new row3Struct();
				
					oneRow_tHashOutput_4.ID = row3.ID;
					oneRow_tHashOutput_4.NOMBRE = row3.NOMBRE;
		
        tHashFile_tHashOutput_4.put(oneRow_tHashOutput_4);
        nb_line_tHashOutput_4 ++;

 


	tos_count_tHashOutput_4++;

/**
 * [tHashOutput_4 main ] stop
 */
	
	/**
	 * [tHashOutput_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashOutput_4";
	
	

 



/**
 * [tHashOutput_4 process_data_begin ] stop
 */
	
	/**
	 * [tHashOutput_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashOutput_4";
	
	

 



/**
 * [tHashOutput_4 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_2";
	
	

 



/**
 * [tOracleInput_2 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_2 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_2";
	
	

}
}finally{
	if (rs_tOracleInput_2 != null) {
		rs_tOracleInput_2.close();
	}
	if (stmt_tOracleInput_2 != null) {
		stmt_tOracleInput_2.close();
	}
}

globalMap.put("tOracleInput_2_NB_LINE",nb_line_tOracleInput_2);
 

ok_Hash.put("tOracleInput_2", true);
end_Hash.put("tOracleInput_2", System.currentTimeMillis());




/**
 * [tOracleInput_2 end ] stop
 */

	
	/**
	 * [tHashOutput_4 end ] start
	 */

	

	
	
	currentComponent="tHashOutput_4";
	
	
globalMap.put("tHashOutput_4_NB_LINE", nb_line_tHashOutput_4);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row3");
			  	}
			  	
 

ok_Hash.put("tHashOutput_4", true);
end_Hash.put("tHashOutput_4", System.currentTimeMillis());




/**
 * [tHashOutput_4 end ] stop
 */



				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tOracleInput_2:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk1", 0, "ok");
								} 
							
							tOracleInput_7Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleInput_2 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_2";
	
	

 



/**
 * [tOracleInput_2 finally ] stop
 */

	
	/**
	 * [tHashOutput_4 finally ] start
	 */

	

	
	
	currentComponent="tHashOutput_4";
	
	

 



/**
 * [tHashOutput_4 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_2_SUBPROCESS_STATE", 1);
	}
	


public static class row7Struct implements routines.system.IPersistableRow<row7Struct> {
    final static byte[] commonByteArrayLock_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion = new byte[0];
    static byte[] commonByteArray_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public Integer AFILIADO_ID;

				public Integer getAFILIADO_ID () {
					return this.AFILIADO_ID;
				}

				public Boolean AFILIADO_IDIsNullable(){
				    return true;
				}
				public Boolean AFILIADO_IDIsKey(){
				    return true;
				}
				public Integer AFILIADO_IDLength(){
				    return 0;
				}
				public Integer AFILIADO_IDPrecision(){
				    return 0;
				}
				public String AFILIADO_IDDefault(){
				
					return null;
				
				}
				public String AFILIADO_IDComment(){
				
				    return "";
				
				}
				public String AFILIADO_IDPattern(){
				
					return "";
				
				}
				public String AFILIADO_IDOriginalDbColumnName(){
				
					return "AFILIADO_ID";
				
				}

				
			    public String EMAIL;

				public String getEMAIL () {
					return this.EMAIL;
				}

				public Boolean EMAILIsNullable(){
				    return true;
				}
				public Boolean EMAILIsKey(){
				    return false;
				}
				public Integer EMAILLength(){
				    return 0;
				}
				public Integer EMAILPrecision(){
				    return 0;
				}
				public String EMAILDefault(){
				
					return null;
				
				}
				public String EMAILComment(){
				
				    return "";
				
				}
				public String EMAILPattern(){
				
					return "";
				
				}
				public String EMAILOriginalDbColumnName(){
				
					return "EMAIL";
				
				}

				
			    public java.util.Date FECHA_AFILIACION;

				public java.util.Date getFECHA_AFILIACION () {
					return this.FECHA_AFILIACION;
				}

				public Boolean FECHA_AFILIACIONIsNullable(){
				    return true;
				}
				public Boolean FECHA_AFILIACIONIsKey(){
				    return false;
				}
				public Integer FECHA_AFILIACIONLength(){
				    return 0;
				}
				public Integer FECHA_AFILIACIONPrecision(){
				    return 0;
				}
				public String FECHA_AFILIACIONDefault(){
				
					return null;
				
				}
				public String FECHA_AFILIACIONComment(){
				
				    return "";
				
				}
				public String FECHA_AFILIACIONPattern(){
				
					return "dd/MM/yyyy";
				
				}
				public String FECHA_AFILIACIONOriginalDbColumnName(){
				
					return "FECHA_AFILIACION";
				
				}

				
			    public Integer ID_ENTIDAD;

				public Integer getID_ENTIDAD () {
					return this.ID_ENTIDAD;
				}

				public Boolean ID_ENTIDADIsNullable(){
				    return true;
				}
				public Boolean ID_ENTIDADIsKey(){
				    return false;
				}
				public Integer ID_ENTIDADLength(){
				    return 0;
				}
				public Integer ID_ENTIDADPrecision(){
				    return 0;
				}
				public String ID_ENTIDADDefault(){
				
					return null;
				
				}
				public String ID_ENTIDADComment(){
				
				    return "";
				
				}
				public String ID_ENTIDADPattern(){
				
					return "";
				
				}
				public String ID_ENTIDADOriginalDbColumnName(){
				
					return "ID_ENTIDAD";
				
				}

				
			    public String CODIGO_ENTIDAD;

				public String getCODIGO_ENTIDAD () {
					return this.CODIGO_ENTIDAD;
				}

				public Boolean CODIGO_ENTIDADIsNullable(){
				    return true;
				}
				public Boolean CODIGO_ENTIDADIsKey(){
				    return false;
				}
				public Integer CODIGO_ENTIDADLength(){
				    return 0;
				}
				public Integer CODIGO_ENTIDADPrecision(){
				    return 0;
				}
				public String CODIGO_ENTIDADDefault(){
				
					return null;
				
				}
				public String CODIGO_ENTIDADComment(){
				
				    return "";
				
				}
				public String CODIGO_ENTIDADPattern(){
				
					return "";
				
				}
				public String CODIGO_ENTIDADOriginalDbColumnName(){
				
					return "CODIGO_ENTIDAD";
				
				}

				
			    public String SALIDA_ARCHIVO;

				public String getSALIDA_ARCHIVO () {
					return this.SALIDA_ARCHIVO;
				}

				public Boolean SALIDA_ARCHIVOIsNullable(){
				    return false;
				}
				public Boolean SALIDA_ARCHIVOIsKey(){
				    return false;
				}
				public Integer SALIDA_ARCHIVOLength(){
				    return 0;
				}
				public Integer SALIDA_ARCHIVOPrecision(){
				    return 0;
				}
				public String SALIDA_ARCHIVODefault(){
				
					return null;
				
				}
				public String SALIDA_ARCHIVOComment(){
				
				    return "";
				
				}
				public String SALIDA_ARCHIVOPattern(){
				
					return "";
				
				}
				public String SALIDA_ARCHIVOOriginalDbColumnName(){
				
					return "SALIDA_ARCHIVO";
				
				}

				
			    public String ResponseContent;

				public String getResponseContent () {
					return this.ResponseContent;
				}

				public Boolean ResponseContentIsNullable(){
				    return true;
				}
				public Boolean ResponseContentIsKey(){
				    return false;
				}
				public Integer ResponseContentLength(){
				    return 0;
				}
				public Integer ResponseContentPrecision(){
				    return 0;
				}
				public String ResponseContentDefault(){
				
					return null;
				
				}
				public String ResponseContentComment(){
				
				    return null;
				
				}
				public String ResponseContentPattern(){
				
				    return null;
				
				}
				public String ResponseContentOriginalDbColumnName(){
				
					return "ResponseContent";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.AFILIADO_ID == null) ? 0 : this.AFILIADO_ID.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row7Struct other = (row7Struct) obj;
		
						if (this.AFILIADO_ID == null) {
							if (other.AFILIADO_ID != null)
								return false;
						
						} else if (!this.AFILIADO_ID.equals(other.AFILIADO_ID))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row7Struct other) {

		other.AFILIADO_ID = this.AFILIADO_ID;
	            other.EMAIL = this.EMAIL;
	            other.FECHA_AFILIACION = this.FECHA_AFILIACION;
	            other.ID_ENTIDAD = this.ID_ENTIDAD;
	            other.CODIGO_ENTIDAD = this.CODIGO_ENTIDAD;
	            other.SALIDA_ARCHIVO = this.SALIDA_ARCHIVO;
	            other.ResponseContent = this.ResponseContent;
	            
	}

	public void copyKeysDataTo(row7Struct other) {

		other.AFILIADO_ID = this.AFILIADO_ID;
	            	
	}



	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion.length) {
				if(length < 1024 && commonByteArray_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion.length == 0) {
   					commonByteArray_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion = new byte[1024];
				} else {
   					commonByteArray_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion, 0, length);
			strReturn = new String(commonByteArray_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion.length) {
				if(length < 1024 && commonByteArray_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion.length == 0) {
   					commonByteArray_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion = new byte[1024];
				} else {
   					commonByteArray_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion, 0, length);
			strReturn = new String(commonByteArray_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion) {

        	try {

        		int length = 0;
		
						this.AFILIADO_ID = readInteger(dis);
					
					this.EMAIL = readString(dis);
					
					this.FECHA_AFILIACION = readDate(dis);
					
						this.ID_ENTIDAD = readInteger(dis);
					
					this.CODIGO_ENTIDAD = readString(dis);
					
					this.SALIDA_ARCHIVO = readString(dis);
					
					this.ResponseContent = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion) {

        	try {

        		int length = 0;
		
						this.AFILIADO_ID = readInteger(dis);
					
					this.EMAIL = readString(dis);
					
					this.FECHA_AFILIACION = readDate(dis);
					
						this.ID_ENTIDAD = readInteger(dis);
					
					this.CODIGO_ENTIDAD = readString(dis);
					
					this.SALIDA_ARCHIVO = readString(dis);
					
					this.ResponseContent = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.AFILIADO_ID,dos);
					
					// String
				
						writeString(this.EMAIL,dos);
					
					// java.util.Date
				
						writeDate(this.FECHA_AFILIACION,dos);
					
					// Integer
				
						writeInteger(this.ID_ENTIDAD,dos);
					
					// String
				
						writeString(this.CODIGO_ENTIDAD,dos);
					
					// String
				
						writeString(this.SALIDA_ARCHIVO,dos);
					
					// String
				
						writeString(this.ResponseContent,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.AFILIADO_ID,dos);
					
					// String
				
						writeString(this.EMAIL,dos);
					
					// java.util.Date
				
						writeDate(this.FECHA_AFILIACION,dos);
					
					// Integer
				
						writeInteger(this.ID_ENTIDAD,dos);
					
					// String
				
						writeString(this.CODIGO_ENTIDAD,dos);
					
					// String
				
						writeString(this.SALIDA_ARCHIVO,dos);
					
					// String
				
						writeString(this.ResponseContent,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("AFILIADO_ID="+String.valueOf(AFILIADO_ID));
		sb.append(",EMAIL="+EMAIL);
		sb.append(",FECHA_AFILIACION="+String.valueOf(FECHA_AFILIACION));
		sb.append(",ID_ENTIDAD="+String.valueOf(ID_ENTIDAD));
		sb.append(",CODIGO_ENTIDAD="+CODIGO_ENTIDAD);
		sb.append(",SALIDA_ARCHIVO="+SALIDA_ARCHIVO);
		sb.append(",ResponseContent="+ResponseContent);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row7Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.AFILIADO_ID, other.AFILIADO_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class salidaReporteMultiAfiStruct implements routines.system.IPersistableRow<salidaReporteMultiAfiStruct> {
    final static byte[] commonByteArrayLock_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion = new byte[0];
    static byte[] commonByteArray_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion = new byte[0];

	
			    public String TIPO_DOCUMENTO;

				public String getTIPO_DOCUMENTO () {
					return this.TIPO_DOCUMENTO;
				}

				public Boolean TIPO_DOCUMENTOIsNullable(){
				    return true;
				}
				public Boolean TIPO_DOCUMENTOIsKey(){
				    return false;
				}
				public Integer TIPO_DOCUMENTOLength(){
				    return 0;
				}
				public Integer TIPO_DOCUMENTOPrecision(){
				    return 0;
				}
				public String TIPO_DOCUMENTODefault(){
				
					return null;
				
				}
				public String TIPO_DOCUMENTOComment(){
				
				    return "";
				
				}
				public String TIPO_DOCUMENTOPattern(){
				
					return "";
				
				}
				public String TIPO_DOCUMENTOOriginalDbColumnName(){
				
					return "TIPO_DOCUMENTO";
				
				}

				
			    public String NUMERO_DOCUMENTO;

				public String getNUMERO_DOCUMENTO () {
					return this.NUMERO_DOCUMENTO;
				}

				public Boolean NUMERO_DOCUMENTOIsNullable(){
				    return true;
				}
				public Boolean NUMERO_DOCUMENTOIsKey(){
				    return false;
				}
				public Integer NUMERO_DOCUMENTOLength(){
				    return 0;
				}
				public Integer NUMERO_DOCUMENTOPrecision(){
				    return 0;
				}
				public String NUMERO_DOCUMENTODefault(){
				
					return null;
				
				}
				public String NUMERO_DOCUMENTOComment(){
				
				    return "";
				
				}
				public String NUMERO_DOCUMENTOPattern(){
				
					return "";
				
				}
				public String NUMERO_DOCUMENTOOriginalDbColumnName(){
				
					return "NUMERO_DOCUMENTO";
				
				}

				
			    public String PRIMER_NOMBRE;

				public String getPRIMER_NOMBRE () {
					return this.PRIMER_NOMBRE;
				}

				public Boolean PRIMER_NOMBREIsNullable(){
				    return true;
				}
				public Boolean PRIMER_NOMBREIsKey(){
				    return false;
				}
				public Integer PRIMER_NOMBRELength(){
				    return 0;
				}
				public Integer PRIMER_NOMBREPrecision(){
				    return 0;
				}
				public String PRIMER_NOMBREDefault(){
				
					return null;
				
				}
				public String PRIMER_NOMBREComment(){
				
				    return "";
				
				}
				public String PRIMER_NOMBREPattern(){
				
					return "";
				
				}
				public String PRIMER_NOMBREOriginalDbColumnName(){
				
					return "PRIMER_NOMBRE";
				
				}

				
			    public String SEGUNDO_NOMBRE;

				public String getSEGUNDO_NOMBRE () {
					return this.SEGUNDO_NOMBRE;
				}

				public Boolean SEGUNDO_NOMBREIsNullable(){
				    return true;
				}
				public Boolean SEGUNDO_NOMBREIsKey(){
				    return false;
				}
				public Integer SEGUNDO_NOMBRELength(){
				    return 0;
				}
				public Integer SEGUNDO_NOMBREPrecision(){
				    return 0;
				}
				public String SEGUNDO_NOMBREDefault(){
				
					return null;
				
				}
				public String SEGUNDO_NOMBREComment(){
				
				    return "";
				
				}
				public String SEGUNDO_NOMBREPattern(){
				
					return "";
				
				}
				public String SEGUNDO_NOMBREOriginalDbColumnName(){
				
					return "SEGUNDO_NOMBRE";
				
				}

				
			    public String PRIMER_APELLIDO;

				public String getPRIMER_APELLIDO () {
					return this.PRIMER_APELLIDO;
				}

				public Boolean PRIMER_APELLIDOIsNullable(){
				    return true;
				}
				public Boolean PRIMER_APELLIDOIsKey(){
				    return false;
				}
				public Integer PRIMER_APELLIDOLength(){
				    return 0;
				}
				public Integer PRIMER_APELLIDOPrecision(){
				    return 0;
				}
				public String PRIMER_APELLIDODefault(){
				
					return null;
				
				}
				public String PRIMER_APELLIDOComment(){
				
				    return "";
				
				}
				public String PRIMER_APELLIDOPattern(){
				
					return "";
				
				}
				public String PRIMER_APELLIDOOriginalDbColumnName(){
				
					return "PRIMER_APELLIDO";
				
				}

				
			    public String SEGUNDO_APELLIDO;

				public String getSEGUNDO_APELLIDO () {
					return this.SEGUNDO_APELLIDO;
				}

				public Boolean SEGUNDO_APELLIDOIsNullable(){
				    return true;
				}
				public Boolean SEGUNDO_APELLIDOIsKey(){
				    return false;
				}
				public Integer SEGUNDO_APELLIDOLength(){
				    return 0;
				}
				public Integer SEGUNDO_APELLIDOPrecision(){
				    return 0;
				}
				public String SEGUNDO_APELLIDODefault(){
				
					return null;
				
				}
				public String SEGUNDO_APELLIDOComment(){
				
				    return "";
				
				}
				public String SEGUNDO_APELLIDOPattern(){
				
					return "";
				
				}
				public String SEGUNDO_APELLIDOOriginalDbColumnName(){
				
					return "SEGUNDO_APELLIDO";
				
				}

				
			    public String EPS_NOMBRE;

				public String getEPS_NOMBRE () {
					return this.EPS_NOMBRE;
				}

				public Boolean EPS_NOMBREIsNullable(){
				    return true;
				}
				public Boolean EPS_NOMBREIsKey(){
				    return false;
				}
				public Integer EPS_NOMBRELength(){
				    return 0;
				}
				public Integer EPS_NOMBREPrecision(){
				    return 0;
				}
				public String EPS_NOMBREDefault(){
				
					return null;
				
				}
				public String EPS_NOMBREComment(){
				
				    return "";
				
				}
				public String EPS_NOMBREPattern(){
				
					return "";
				
				}
				public String EPS_NOMBREOriginalDbColumnName(){
				
					return "EPS_NOMBRE";
				
				}

				
			    public String TIPO_EPS;

				public String getTIPO_EPS () {
					return this.TIPO_EPS;
				}

				public Boolean TIPO_EPSIsNullable(){
				    return false;
				}
				public Boolean TIPO_EPSIsKey(){
				    return false;
				}
				public Integer TIPO_EPSLength(){
				    return 50;
				}
				public Integer TIPO_EPSPrecision(){
				    return 0;
				}
				public String TIPO_EPSDefault(){
				
					return null;
				
				}
				public String TIPO_EPSComment(){
				
				    return "Nombre del tipo";
				
				}
				public String TIPO_EPSPattern(){
				
					return "";
				
				}
				public String TIPO_EPSOriginalDbColumnName(){
				
					return "TIPO_EPS";
				
				}

				
			    public String NOTIFICACION;

				public String getNOTIFICACION () {
					return this.NOTIFICACION;
				}

				public Boolean NOTIFICACIONIsNullable(){
				    return true;
				}
				public Boolean NOTIFICACIONIsKey(){
				    return false;
				}
				public Integer NOTIFICACIONLength(){
				    return null;
				}
				public Integer NOTIFICACIONPrecision(){
				    return null;
				}
				public String NOTIFICACIONDefault(){
				
					return null;
				
				}
				public String NOTIFICACIONComment(){
				
				    return "";
				
				}
				public String NOTIFICACIONPattern(){
				
					return "";
				
				}
				public String NOTIFICACIONOriginalDbColumnName(){
				
					return "NOTIFICACION";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion.length) {
				if(length < 1024 && commonByteArray_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion.length == 0) {
   					commonByteArray_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion = new byte[1024];
				} else {
   					commonByteArray_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion, 0, length);
			strReturn = new String(commonByteArray_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion.length) {
				if(length < 1024 && commonByteArray_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion.length == 0) {
   					commonByteArray_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion = new byte[1024];
				} else {
   					commonByteArray_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion, 0, length);
			strReturn = new String(commonByteArray_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion) {

        	try {

        		int length = 0;
		
					this.TIPO_DOCUMENTO = readString(dis);
					
					this.NUMERO_DOCUMENTO = readString(dis);
					
					this.PRIMER_NOMBRE = readString(dis);
					
					this.SEGUNDO_NOMBRE = readString(dis);
					
					this.PRIMER_APELLIDO = readString(dis);
					
					this.SEGUNDO_APELLIDO = readString(dis);
					
					this.EPS_NOMBRE = readString(dis);
					
					this.TIPO_EPS = readString(dis);
					
					this.NOTIFICACION = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion) {

        	try {

        		int length = 0;
		
					this.TIPO_DOCUMENTO = readString(dis);
					
					this.NUMERO_DOCUMENTO = readString(dis);
					
					this.PRIMER_NOMBRE = readString(dis);
					
					this.SEGUNDO_NOMBRE = readString(dis);
					
					this.PRIMER_APELLIDO = readString(dis);
					
					this.SEGUNDO_APELLIDO = readString(dis);
					
					this.EPS_NOMBRE = readString(dis);
					
					this.TIPO_EPS = readString(dis);
					
					this.NOTIFICACION = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.TIPO_DOCUMENTO,dos);
					
					// String
				
						writeString(this.NUMERO_DOCUMENTO,dos);
					
					// String
				
						writeString(this.PRIMER_NOMBRE,dos);
					
					// String
				
						writeString(this.SEGUNDO_NOMBRE,dos);
					
					// String
				
						writeString(this.PRIMER_APELLIDO,dos);
					
					// String
				
						writeString(this.SEGUNDO_APELLIDO,dos);
					
					// String
				
						writeString(this.EPS_NOMBRE,dos);
					
					// String
				
						writeString(this.TIPO_EPS,dos);
					
					// String
				
						writeString(this.NOTIFICACION,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.TIPO_DOCUMENTO,dos);
					
					// String
				
						writeString(this.NUMERO_DOCUMENTO,dos);
					
					// String
				
						writeString(this.PRIMER_NOMBRE,dos);
					
					// String
				
						writeString(this.SEGUNDO_NOMBRE,dos);
					
					// String
				
						writeString(this.PRIMER_APELLIDO,dos);
					
					// String
				
						writeString(this.SEGUNDO_APELLIDO,dos);
					
					// String
				
						writeString(this.EPS_NOMBRE,dos);
					
					// String
				
						writeString(this.TIPO_EPS,dos);
					
					// String
				
						writeString(this.NOTIFICACION,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("TIPO_DOCUMENTO="+TIPO_DOCUMENTO);
		sb.append(",NUMERO_DOCUMENTO="+NUMERO_DOCUMENTO);
		sb.append(",PRIMER_NOMBRE="+PRIMER_NOMBRE);
		sb.append(",SEGUNDO_NOMBRE="+SEGUNDO_NOMBRE);
		sb.append(",PRIMER_APELLIDO="+PRIMER_APELLIDO);
		sb.append(",SEGUNDO_APELLIDO="+SEGUNDO_APELLIDO);
		sb.append(",EPS_NOMBRE="+EPS_NOMBRE);
		sb.append(",TIPO_EPS="+TIPO_EPS);
		sb.append(",NOTIFICACION="+NOTIFICACION);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(salidaReporteMultiAfiStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row18Struct implements routines.system.IPersistableRow<row18Struct> {
    final static byte[] commonByteArrayLock_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion = new byte[0];
    static byte[] commonByteArray_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion = new byte[0];

	
			    public Integer ProcesoId_;

				public Integer getProcesoId_ () {
					return this.ProcesoId_;
				}

				public Boolean ProcesoId_IsNullable(){
				    return true;
				}
				public Boolean ProcesoId_IsKey(){
				    return false;
				}
				public Integer ProcesoId_Length(){
				    return 0;
				}
				public Integer ProcesoId_Precision(){
				    return 0;
				}
				public String ProcesoId_Default(){
				
					return null;
				
				}
				public String ProcesoId_Comment(){
				
				    return "";
				
				}
				public String ProcesoId_Pattern(){
				
					return "";
				
				}
				public String ProcesoId_OriginalDbColumnName(){
				
					return "ProcesoId_";
				
				}

				
			    public Integer AfiliadoId_;

				public Integer getAfiliadoId_ () {
					return this.AfiliadoId_;
				}

				public Boolean AfiliadoId_IsNullable(){
				    return true;
				}
				public Boolean AfiliadoId_IsKey(){
				    return false;
				}
				public Integer AfiliadoId_Length(){
				    return 0;
				}
				public Integer AfiliadoId_Precision(){
				    return 0;
				}
				public String AfiliadoId_Default(){
				
					return null;
				
				}
				public String AfiliadoId_Comment(){
				
				    return "";
				
				}
				public String AfiliadoId_Pattern(){
				
					return "";
				
				}
				public String AfiliadoId_OriginalDbColumnName(){
				
					return "AfiliadoId_";
				
				}

				
			    public Integer EpsId_;

				public Integer getEpsId_ () {
					return this.EpsId_;
				}

				public Boolean EpsId_IsNullable(){
				    return true;
				}
				public Boolean EpsId_IsKey(){
				    return false;
				}
				public Integer EpsId_Length(){
				    return 0;
				}
				public Integer EpsId_Precision(){
				    return 0;
				}
				public String EpsId_Default(){
				
					return null;
				
				}
				public String EpsId_Comment(){
				
				    return "";
				
				}
				public String EpsId_Pattern(){
				
					return "";
				
				}
				public String EpsId_OriginalDbColumnName(){
				
					return "EpsId_";
				
				}

				
			    public Integer Notificacion_;

				public Integer getNotificacion_ () {
					return this.Notificacion_;
				}

				public Boolean Notificacion_IsNullable(){
				    return true;
				}
				public Boolean Notificacion_IsKey(){
				    return false;
				}
				public Integer Notificacion_Length(){
				    return 0;
				}
				public Integer Notificacion_Precision(){
				    return 0;
				}
				public String Notificacion_Default(){
				
					return null;
				
				}
				public String Notificacion_Comment(){
				
				    return "";
				
				}
				public String Notificacion_Pattern(){
				
					return "";
				
				}
				public String Notificacion_OriginalDbColumnName(){
				
					return "Notificacion_";
				
				}

				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion) {

        	try {

        		int length = 0;
		
						this.ProcesoId_ = readInteger(dis);
					
						this.AfiliadoId_ = readInteger(dis);
					
						this.EpsId_ = readInteger(dis);
					
						this.Notificacion_ = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion) {

        	try {

        		int length = 0;
		
						this.ProcesoId_ = readInteger(dis);
					
						this.AfiliadoId_ = readInteger(dis);
					
						this.EpsId_ = readInteger(dis);
					
						this.Notificacion_ = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.ProcesoId_,dos);
					
					// Integer
				
						writeInteger(this.AfiliadoId_,dos);
					
					// Integer
				
						writeInteger(this.EpsId_,dos);
					
					// Integer
				
						writeInteger(this.Notificacion_,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.ProcesoId_,dos);
					
					// Integer
				
						writeInteger(this.AfiliadoId_,dos);
					
					// Integer
				
						writeInteger(this.EpsId_,dos);
					
					// Integer
				
						writeInteger(this.Notificacion_,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ProcesoId_="+String.valueOf(ProcesoId_));
		sb.append(",AfiliadoId_="+String.valueOf(AfiliadoId_));
		sb.append(",EpsId_="+String.valueOf(EpsId_));
		sb.append(",Notificacion_="+String.valueOf(Notificacion_));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row18Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row16Struct implements routines.system.IPersistableRow<row16Struct> {
    final static byte[] commonByteArrayLock_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion = new byte[0];
    static byte[] commonByteArray_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion = new byte[0];

	
			    public Integer ProcesoId_;

				public Integer getProcesoId_ () {
					return this.ProcesoId_;
				}

				public Boolean ProcesoId_IsNullable(){
				    return true;
				}
				public Boolean ProcesoId_IsKey(){
				    return false;
				}
				public Integer ProcesoId_Length(){
				    return 0;
				}
				public Integer ProcesoId_Precision(){
				    return 0;
				}
				public String ProcesoId_Default(){
				
					return null;
				
				}
				public String ProcesoId_Comment(){
				
				    return "";
				
				}
				public String ProcesoId_Pattern(){
				
					return "";
				
				}
				public String ProcesoId_OriginalDbColumnName(){
				
					return "ProcesoId_";
				
				}

				
			    public Integer AfiliadoId_;

				public Integer getAfiliadoId_ () {
					return this.AfiliadoId_;
				}

				public Boolean AfiliadoId_IsNullable(){
				    return true;
				}
				public Boolean AfiliadoId_IsKey(){
				    return false;
				}
				public Integer AfiliadoId_Length(){
				    return 0;
				}
				public Integer AfiliadoId_Precision(){
				    return 0;
				}
				public String AfiliadoId_Default(){
				
					return null;
				
				}
				public String AfiliadoId_Comment(){
				
				    return "";
				
				}
				public String AfiliadoId_Pattern(){
				
					return "";
				
				}
				public String AfiliadoId_OriginalDbColumnName(){
				
					return "AfiliadoId_";
				
				}

				
			    public Integer EpsId_;

				public Integer getEpsId_ () {
					return this.EpsId_;
				}

				public Boolean EpsId_IsNullable(){
				    return true;
				}
				public Boolean EpsId_IsKey(){
				    return false;
				}
				public Integer EpsId_Length(){
				    return 0;
				}
				public Integer EpsId_Precision(){
				    return 0;
				}
				public String EpsId_Default(){
				
					return null;
				
				}
				public String EpsId_Comment(){
				
				    return "";
				
				}
				public String EpsId_Pattern(){
				
					return "";
				
				}
				public String EpsId_OriginalDbColumnName(){
				
					return "EpsId_";
				
				}

				
			    public Integer Notificacion_;

				public Integer getNotificacion_ () {
					return this.Notificacion_;
				}

				public Boolean Notificacion_IsNullable(){
				    return true;
				}
				public Boolean Notificacion_IsKey(){
				    return false;
				}
				public Integer Notificacion_Length(){
				    return 0;
				}
				public Integer Notificacion_Precision(){
				    return 0;
				}
				public String Notificacion_Default(){
				
					return null;
				
				}
				public String Notificacion_Comment(){
				
				    return "";
				
				}
				public String Notificacion_Pattern(){
				
					return "";
				
				}
				public String Notificacion_OriginalDbColumnName(){
				
					return "Notificacion_";
				
				}

				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion) {

        	try {

        		int length = 0;
		
						this.ProcesoId_ = readInteger(dis);
					
						this.AfiliadoId_ = readInteger(dis);
					
						this.EpsId_ = readInteger(dis);
					
						this.Notificacion_ = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion) {

        	try {

        		int length = 0;
		
						this.ProcesoId_ = readInteger(dis);
					
						this.AfiliadoId_ = readInteger(dis);
					
						this.EpsId_ = readInteger(dis);
					
						this.Notificacion_ = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.ProcesoId_,dos);
					
					// Integer
				
						writeInteger(this.AfiliadoId_,dos);
					
					// Integer
				
						writeInteger(this.EpsId_,dos);
					
					// Integer
				
						writeInteger(this.Notificacion_,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.ProcesoId_,dos);
					
					// Integer
				
						writeInteger(this.AfiliadoId_,dos);
					
					// Integer
				
						writeInteger(this.EpsId_,dos);
					
					// Integer
				
						writeInteger(this.Notificacion_,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ProcesoId_="+String.valueOf(ProcesoId_));
		sb.append(",AfiliadoId_="+String.valueOf(AfiliadoId_));
		sb.append(",EpsId_="+String.valueOf(EpsId_));
		sb.append(",Notificacion_="+String.valueOf(Notificacion_));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row16Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row15Struct implements routines.system.IPersistableRow<row15Struct> {
    final static byte[] commonByteArrayLock_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion = new byte[0];
    static byte[] commonByteArray_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public Integer AFILIADO_ID;

				public Integer getAFILIADO_ID () {
					return this.AFILIADO_ID;
				}

				public Boolean AFILIADO_IDIsNullable(){
				    return true;
				}
				public Boolean AFILIADO_IDIsKey(){
				    return true;
				}
				public Integer AFILIADO_IDLength(){
				    return 0;
				}
				public Integer AFILIADO_IDPrecision(){
				    return 0;
				}
				public String AFILIADO_IDDefault(){
				
					return null;
				
				}
				public String AFILIADO_IDComment(){
				
				    return "";
				
				}
				public String AFILIADO_IDPattern(){
				
					return "";
				
				}
				public String AFILIADO_IDOriginalDbColumnName(){
				
					return "AFILIADO_ID";
				
				}

				
			    public String EMAIL;

				public String getEMAIL () {
					return this.EMAIL;
				}

				public Boolean EMAILIsNullable(){
				    return true;
				}
				public Boolean EMAILIsKey(){
				    return false;
				}
				public Integer EMAILLength(){
				    return 0;
				}
				public Integer EMAILPrecision(){
				    return 0;
				}
				public String EMAILDefault(){
				
					return null;
				
				}
				public String EMAILComment(){
				
				    return "";
				
				}
				public String EMAILPattern(){
				
					return "";
				
				}
				public String EMAILOriginalDbColumnName(){
				
					return "EMAIL";
				
				}

				
			    public java.util.Date FECHA_AFILIACION;

				public java.util.Date getFECHA_AFILIACION () {
					return this.FECHA_AFILIACION;
				}

				public Boolean FECHA_AFILIACIONIsNullable(){
				    return true;
				}
				public Boolean FECHA_AFILIACIONIsKey(){
				    return false;
				}
				public Integer FECHA_AFILIACIONLength(){
				    return 0;
				}
				public Integer FECHA_AFILIACIONPrecision(){
				    return 0;
				}
				public String FECHA_AFILIACIONDefault(){
				
					return null;
				
				}
				public String FECHA_AFILIACIONComment(){
				
				    return "";
				
				}
				public String FECHA_AFILIACIONPattern(){
				
					return "dd/MM/yyyy";
				
				}
				public String FECHA_AFILIACIONOriginalDbColumnName(){
				
					return "FECHA_AFILIACION";
				
				}

				
			    public Integer ID_ENTIDAD;

				public Integer getID_ENTIDAD () {
					return this.ID_ENTIDAD;
				}

				public Boolean ID_ENTIDADIsNullable(){
				    return true;
				}
				public Boolean ID_ENTIDADIsKey(){
				    return false;
				}
				public Integer ID_ENTIDADLength(){
				    return 0;
				}
				public Integer ID_ENTIDADPrecision(){
				    return 0;
				}
				public String ID_ENTIDADDefault(){
				
					return null;
				
				}
				public String ID_ENTIDADComment(){
				
				    return "";
				
				}
				public String ID_ENTIDADPattern(){
				
					return "";
				
				}
				public String ID_ENTIDADOriginalDbColumnName(){
				
					return "ID_ENTIDAD";
				
				}

				
			    public String CODIGO_ENTIDAD;

				public String getCODIGO_ENTIDAD () {
					return this.CODIGO_ENTIDAD;
				}

				public Boolean CODIGO_ENTIDADIsNullable(){
				    return true;
				}
				public Boolean CODIGO_ENTIDADIsKey(){
				    return false;
				}
				public Integer CODIGO_ENTIDADLength(){
				    return 0;
				}
				public Integer CODIGO_ENTIDADPrecision(){
				    return 0;
				}
				public String CODIGO_ENTIDADDefault(){
				
					return null;
				
				}
				public String CODIGO_ENTIDADComment(){
				
				    return "";
				
				}
				public String CODIGO_ENTIDADPattern(){
				
					return "";
				
				}
				public String CODIGO_ENTIDADOriginalDbColumnName(){
				
					return "CODIGO_ENTIDAD";
				
				}

				
			    public String SALIDA_ARCHIVO;

				public String getSALIDA_ARCHIVO () {
					return this.SALIDA_ARCHIVO;
				}

				public Boolean SALIDA_ARCHIVOIsNullable(){
				    return false;
				}
				public Boolean SALIDA_ARCHIVOIsKey(){
				    return false;
				}
				public Integer SALIDA_ARCHIVOLength(){
				    return 0;
				}
				public Integer SALIDA_ARCHIVOPrecision(){
				    return 0;
				}
				public String SALIDA_ARCHIVODefault(){
				
					return null;
				
				}
				public String SALIDA_ARCHIVOComment(){
				
				    return "";
				
				}
				public String SALIDA_ARCHIVOPattern(){
				
					return "";
				
				}
				public String SALIDA_ARCHIVOOriginalDbColumnName(){
				
					return "SALIDA_ARCHIVO";
				
				}

				
			    public String ResponseContent;

				public String getResponseContent () {
					return this.ResponseContent;
				}

				public Boolean ResponseContentIsNullable(){
				    return true;
				}
				public Boolean ResponseContentIsKey(){
				    return false;
				}
				public Integer ResponseContentLength(){
				    return 0;
				}
				public Integer ResponseContentPrecision(){
				    return 0;
				}
				public String ResponseContentDefault(){
				
					return null;
				
				}
				public String ResponseContentComment(){
				
				    return null;
				
				}
				public String ResponseContentPattern(){
				
				    return null;
				
				}
				public String ResponseContentOriginalDbColumnName(){
				
					return "ResponseContent";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.AFILIADO_ID == null) ? 0 : this.AFILIADO_ID.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row15Struct other = (row15Struct) obj;
		
						if (this.AFILIADO_ID == null) {
							if (other.AFILIADO_ID != null)
								return false;
						
						} else if (!this.AFILIADO_ID.equals(other.AFILIADO_ID))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row15Struct other) {

		other.AFILIADO_ID = this.AFILIADO_ID;
	            other.EMAIL = this.EMAIL;
	            other.FECHA_AFILIACION = this.FECHA_AFILIACION;
	            other.ID_ENTIDAD = this.ID_ENTIDAD;
	            other.CODIGO_ENTIDAD = this.CODIGO_ENTIDAD;
	            other.SALIDA_ARCHIVO = this.SALIDA_ARCHIVO;
	            other.ResponseContent = this.ResponseContent;
	            
	}

	public void copyKeysDataTo(row15Struct other) {

		other.AFILIADO_ID = this.AFILIADO_ID;
	            	
	}



	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion.length) {
				if(length < 1024 && commonByteArray_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion.length == 0) {
   					commonByteArray_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion = new byte[1024];
				} else {
   					commonByteArray_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion, 0, length);
			strReturn = new String(commonByteArray_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion.length) {
				if(length < 1024 && commonByteArray_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion.length == 0) {
   					commonByteArray_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion = new byte[1024];
				} else {
   					commonByteArray_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion, 0, length);
			strReturn = new String(commonByteArray_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion) {

        	try {

        		int length = 0;
		
						this.AFILIADO_ID = readInteger(dis);
					
					this.EMAIL = readString(dis);
					
					this.FECHA_AFILIACION = readDate(dis);
					
						this.ID_ENTIDAD = readInteger(dis);
					
					this.CODIGO_ENTIDAD = readString(dis);
					
					this.SALIDA_ARCHIVO = readString(dis);
					
					this.ResponseContent = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion) {

        	try {

        		int length = 0;
		
						this.AFILIADO_ID = readInteger(dis);
					
					this.EMAIL = readString(dis);
					
					this.FECHA_AFILIACION = readDate(dis);
					
						this.ID_ENTIDAD = readInteger(dis);
					
					this.CODIGO_ENTIDAD = readString(dis);
					
					this.SALIDA_ARCHIVO = readString(dis);
					
					this.ResponseContent = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.AFILIADO_ID,dos);
					
					// String
				
						writeString(this.EMAIL,dos);
					
					// java.util.Date
				
						writeDate(this.FECHA_AFILIACION,dos);
					
					// Integer
				
						writeInteger(this.ID_ENTIDAD,dos);
					
					// String
				
						writeString(this.CODIGO_ENTIDAD,dos);
					
					// String
				
						writeString(this.SALIDA_ARCHIVO,dos);
					
					// String
				
						writeString(this.ResponseContent,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.AFILIADO_ID,dos);
					
					// String
				
						writeString(this.EMAIL,dos);
					
					// java.util.Date
				
						writeDate(this.FECHA_AFILIACION,dos);
					
					// Integer
				
						writeInteger(this.ID_ENTIDAD,dos);
					
					// String
				
						writeString(this.CODIGO_ENTIDAD,dos);
					
					// String
				
						writeString(this.SALIDA_ARCHIVO,dos);
					
					// String
				
						writeString(this.ResponseContent,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("AFILIADO_ID="+String.valueOf(AFILIADO_ID));
		sb.append(",EMAIL="+EMAIL);
		sb.append(",FECHA_AFILIACION="+String.valueOf(FECHA_AFILIACION));
		sb.append(",ID_ENTIDAD="+String.valueOf(ID_ENTIDAD));
		sb.append(",CODIGO_ENTIDAD="+CODIGO_ENTIDAD);
		sb.append(",SALIDA_ARCHIVO="+SALIDA_ARCHIVO);
		sb.append(",ResponseContent="+ResponseContent);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row15Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.AFILIADO_ID, other.AFILIADO_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row13Struct implements routines.system.IPersistableRow<row13Struct> {
    final static byte[] commonByteArrayLock_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion = new byte[0];
    static byte[] commonByteArray_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public Integer AFILIADO_ID;

				public Integer getAFILIADO_ID () {
					return this.AFILIADO_ID;
				}

				public Boolean AFILIADO_IDIsNullable(){
				    return true;
				}
				public Boolean AFILIADO_IDIsKey(){
				    return true;
				}
				public Integer AFILIADO_IDLength(){
				    return 0;
				}
				public Integer AFILIADO_IDPrecision(){
				    return 0;
				}
				public String AFILIADO_IDDefault(){
				
					return null;
				
				}
				public String AFILIADO_IDComment(){
				
				    return "";
				
				}
				public String AFILIADO_IDPattern(){
				
					return "";
				
				}
				public String AFILIADO_IDOriginalDbColumnName(){
				
					return "AFILIADO_ID";
				
				}

				
			    public String EMAIL;

				public String getEMAIL () {
					return this.EMAIL;
				}

				public Boolean EMAILIsNullable(){
				    return true;
				}
				public Boolean EMAILIsKey(){
				    return false;
				}
				public Integer EMAILLength(){
				    return 0;
				}
				public Integer EMAILPrecision(){
				    return 0;
				}
				public String EMAILDefault(){
				
					return null;
				
				}
				public String EMAILComment(){
				
				    return "";
				
				}
				public String EMAILPattern(){
				
					return "";
				
				}
				public String EMAILOriginalDbColumnName(){
				
					return "EMAIL";
				
				}

				
			    public java.util.Date FECHA_AFILIACION;

				public java.util.Date getFECHA_AFILIACION () {
					return this.FECHA_AFILIACION;
				}

				public Boolean FECHA_AFILIACIONIsNullable(){
				    return true;
				}
				public Boolean FECHA_AFILIACIONIsKey(){
				    return false;
				}
				public Integer FECHA_AFILIACIONLength(){
				    return 0;
				}
				public Integer FECHA_AFILIACIONPrecision(){
				    return 0;
				}
				public String FECHA_AFILIACIONDefault(){
				
					return null;
				
				}
				public String FECHA_AFILIACIONComment(){
				
				    return "";
				
				}
				public String FECHA_AFILIACIONPattern(){
				
					return "dd/MM/yyyy";
				
				}
				public String FECHA_AFILIACIONOriginalDbColumnName(){
				
					return "FECHA_AFILIACION";
				
				}

				
			    public Integer ID_ENTIDAD;

				public Integer getID_ENTIDAD () {
					return this.ID_ENTIDAD;
				}

				public Boolean ID_ENTIDADIsNullable(){
				    return true;
				}
				public Boolean ID_ENTIDADIsKey(){
				    return false;
				}
				public Integer ID_ENTIDADLength(){
				    return 0;
				}
				public Integer ID_ENTIDADPrecision(){
				    return 0;
				}
				public String ID_ENTIDADDefault(){
				
					return null;
				
				}
				public String ID_ENTIDADComment(){
				
				    return "";
				
				}
				public String ID_ENTIDADPattern(){
				
					return "";
				
				}
				public String ID_ENTIDADOriginalDbColumnName(){
				
					return "ID_ENTIDAD";
				
				}

				
			    public String CODIGO_ENTIDAD;

				public String getCODIGO_ENTIDAD () {
					return this.CODIGO_ENTIDAD;
				}

				public Boolean CODIGO_ENTIDADIsNullable(){
				    return true;
				}
				public Boolean CODIGO_ENTIDADIsKey(){
				    return false;
				}
				public Integer CODIGO_ENTIDADLength(){
				    return 0;
				}
				public Integer CODIGO_ENTIDADPrecision(){
				    return 0;
				}
				public String CODIGO_ENTIDADDefault(){
				
					return null;
				
				}
				public String CODIGO_ENTIDADComment(){
				
				    return "";
				
				}
				public String CODIGO_ENTIDADPattern(){
				
					return "";
				
				}
				public String CODIGO_ENTIDADOriginalDbColumnName(){
				
					return "CODIGO_ENTIDAD";
				
				}

				
			    public String SALIDA_ARCHIVO;

				public String getSALIDA_ARCHIVO () {
					return this.SALIDA_ARCHIVO;
				}

				public Boolean SALIDA_ARCHIVOIsNullable(){
				    return false;
				}
				public Boolean SALIDA_ARCHIVOIsKey(){
				    return false;
				}
				public Integer SALIDA_ARCHIVOLength(){
				    return 0;
				}
				public Integer SALIDA_ARCHIVOPrecision(){
				    return 0;
				}
				public String SALIDA_ARCHIVODefault(){
				
					return null;
				
				}
				public String SALIDA_ARCHIVOComment(){
				
				    return "";
				
				}
				public String SALIDA_ARCHIVOPattern(){
				
					return "";
				
				}
				public String SALIDA_ARCHIVOOriginalDbColumnName(){
				
					return "SALIDA_ARCHIVO";
				
				}

				
			    public String ResponseContent;

				public String getResponseContent () {
					return this.ResponseContent;
				}

				public Boolean ResponseContentIsNullable(){
				    return true;
				}
				public Boolean ResponseContentIsKey(){
				    return false;
				}
				public Integer ResponseContentLength(){
				    return 0;
				}
				public Integer ResponseContentPrecision(){
				    return 0;
				}
				public String ResponseContentDefault(){
				
					return null;
				
				}
				public String ResponseContentComment(){
				
				    return null;
				
				}
				public String ResponseContentPattern(){
				
				    return null;
				
				}
				public String ResponseContentOriginalDbColumnName(){
				
					return "ResponseContent";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.AFILIADO_ID == null) ? 0 : this.AFILIADO_ID.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row13Struct other = (row13Struct) obj;
		
						if (this.AFILIADO_ID == null) {
							if (other.AFILIADO_ID != null)
								return false;
						
						} else if (!this.AFILIADO_ID.equals(other.AFILIADO_ID))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row13Struct other) {

		other.AFILIADO_ID = this.AFILIADO_ID;
	            other.EMAIL = this.EMAIL;
	            other.FECHA_AFILIACION = this.FECHA_AFILIACION;
	            other.ID_ENTIDAD = this.ID_ENTIDAD;
	            other.CODIGO_ENTIDAD = this.CODIGO_ENTIDAD;
	            other.SALIDA_ARCHIVO = this.SALIDA_ARCHIVO;
	            other.ResponseContent = this.ResponseContent;
	            
	}

	public void copyKeysDataTo(row13Struct other) {

		other.AFILIADO_ID = this.AFILIADO_ID;
	            	
	}



	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion.length) {
				if(length < 1024 && commonByteArray_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion.length == 0) {
   					commonByteArray_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion = new byte[1024];
				} else {
   					commonByteArray_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion, 0, length);
			strReturn = new String(commonByteArray_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion.length) {
				if(length < 1024 && commonByteArray_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion.length == 0) {
   					commonByteArray_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion = new byte[1024];
				} else {
   					commonByteArray_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion, 0, length);
			strReturn = new String(commonByteArray_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion) {

        	try {

        		int length = 0;
		
						this.AFILIADO_ID = readInteger(dis);
					
					this.EMAIL = readString(dis);
					
					this.FECHA_AFILIACION = readDate(dis);
					
						this.ID_ENTIDAD = readInteger(dis);
					
					this.CODIGO_ENTIDAD = readString(dis);
					
					this.SALIDA_ARCHIVO = readString(dis);
					
					this.ResponseContent = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion) {

        	try {

        		int length = 0;
		
						this.AFILIADO_ID = readInteger(dis);
					
					this.EMAIL = readString(dis);
					
					this.FECHA_AFILIACION = readDate(dis);
					
						this.ID_ENTIDAD = readInteger(dis);
					
					this.CODIGO_ENTIDAD = readString(dis);
					
					this.SALIDA_ARCHIVO = readString(dis);
					
					this.ResponseContent = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.AFILIADO_ID,dos);
					
					// String
				
						writeString(this.EMAIL,dos);
					
					// java.util.Date
				
						writeDate(this.FECHA_AFILIACION,dos);
					
					// Integer
				
						writeInteger(this.ID_ENTIDAD,dos);
					
					// String
				
						writeString(this.CODIGO_ENTIDAD,dos);
					
					// String
				
						writeString(this.SALIDA_ARCHIVO,dos);
					
					// String
				
						writeString(this.ResponseContent,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.AFILIADO_ID,dos);
					
					// String
				
						writeString(this.EMAIL,dos);
					
					// java.util.Date
				
						writeDate(this.FECHA_AFILIACION,dos);
					
					// Integer
				
						writeInteger(this.ID_ENTIDAD,dos);
					
					// String
				
						writeString(this.CODIGO_ENTIDAD,dos);
					
					// String
				
						writeString(this.SALIDA_ARCHIVO,dos);
					
					// String
				
						writeString(this.ResponseContent,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("AFILIADO_ID="+String.valueOf(AFILIADO_ID));
		sb.append(",EMAIL="+EMAIL);
		sb.append(",FECHA_AFILIACION="+String.valueOf(FECHA_AFILIACION));
		sb.append(",ID_ENTIDAD="+String.valueOf(ID_ENTIDAD));
		sb.append(",CODIGO_ENTIDAD="+CODIGO_ENTIDAD);
		sb.append(",SALIDA_ARCHIVO="+SALIDA_ARCHIVO);
		sb.append(",ResponseContent="+ResponseContent);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row13Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.AFILIADO_ID, other.AFILIADO_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class salidaMultiCorreoStruct implements routines.system.IPersistableRow<salidaMultiCorreoStruct> {
    final static byte[] commonByteArrayLock_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion = new byte[0];
    static byte[] commonByteArray_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public Integer AFILIADO_ID;

				public Integer getAFILIADO_ID () {
					return this.AFILIADO_ID;
				}

				public Boolean AFILIADO_IDIsNullable(){
				    return true;
				}
				public Boolean AFILIADO_IDIsKey(){
				    return true;
				}
				public Integer AFILIADO_IDLength(){
				    return 0;
				}
				public Integer AFILIADO_IDPrecision(){
				    return 0;
				}
				public String AFILIADO_IDDefault(){
				
					return null;
				
				}
				public String AFILIADO_IDComment(){
				
				    return "";
				
				}
				public String AFILIADO_IDPattern(){
				
					return "";
				
				}
				public String AFILIADO_IDOriginalDbColumnName(){
				
					return "AFILIADO_ID";
				
				}

				
			    public String EMAIL;

				public String getEMAIL () {
					return this.EMAIL;
				}

				public Boolean EMAILIsNullable(){
				    return true;
				}
				public Boolean EMAILIsKey(){
				    return false;
				}
				public Integer EMAILLength(){
				    return 0;
				}
				public Integer EMAILPrecision(){
				    return 0;
				}
				public String EMAILDefault(){
				
					return null;
				
				}
				public String EMAILComment(){
				
				    return "";
				
				}
				public String EMAILPattern(){
				
					return "";
				
				}
				public String EMAILOriginalDbColumnName(){
				
					return "EMAIL";
				
				}

				
			    public java.util.Date FECHA_AFILIACION;

				public java.util.Date getFECHA_AFILIACION () {
					return this.FECHA_AFILIACION;
				}

				public Boolean FECHA_AFILIACIONIsNullable(){
				    return true;
				}
				public Boolean FECHA_AFILIACIONIsKey(){
				    return false;
				}
				public Integer FECHA_AFILIACIONLength(){
				    return 0;
				}
				public Integer FECHA_AFILIACIONPrecision(){
				    return 0;
				}
				public String FECHA_AFILIACIONDefault(){
				
					return null;
				
				}
				public String FECHA_AFILIACIONComment(){
				
				    return "";
				
				}
				public String FECHA_AFILIACIONPattern(){
				
					return "dd/MM/yyyy";
				
				}
				public String FECHA_AFILIACIONOriginalDbColumnName(){
				
					return "FECHA_AFILIACION";
				
				}

				
			    public Integer ID_ENTIDAD;

				public Integer getID_ENTIDAD () {
					return this.ID_ENTIDAD;
				}

				public Boolean ID_ENTIDADIsNullable(){
				    return true;
				}
				public Boolean ID_ENTIDADIsKey(){
				    return false;
				}
				public Integer ID_ENTIDADLength(){
				    return 0;
				}
				public Integer ID_ENTIDADPrecision(){
				    return 0;
				}
				public String ID_ENTIDADDefault(){
				
					return null;
				
				}
				public String ID_ENTIDADComment(){
				
				    return "";
				
				}
				public String ID_ENTIDADPattern(){
				
					return "";
				
				}
				public String ID_ENTIDADOriginalDbColumnName(){
				
					return "ID_ENTIDAD";
				
				}

				
			    public String CODIGO_ENTIDAD;

				public String getCODIGO_ENTIDAD () {
					return this.CODIGO_ENTIDAD;
				}

				public Boolean CODIGO_ENTIDADIsNullable(){
				    return true;
				}
				public Boolean CODIGO_ENTIDADIsKey(){
				    return false;
				}
				public Integer CODIGO_ENTIDADLength(){
				    return 0;
				}
				public Integer CODIGO_ENTIDADPrecision(){
				    return 0;
				}
				public String CODIGO_ENTIDADDefault(){
				
					return null;
				
				}
				public String CODIGO_ENTIDADComment(){
				
				    return "";
				
				}
				public String CODIGO_ENTIDADPattern(){
				
					return "";
				
				}
				public String CODIGO_ENTIDADOriginalDbColumnName(){
				
					return "CODIGO_ENTIDAD";
				
				}

				
			    public String SALIDA_ARCHIVO;

				public String getSALIDA_ARCHIVO () {
					return this.SALIDA_ARCHIVO;
				}

				public Boolean SALIDA_ARCHIVOIsNullable(){
				    return false;
				}
				public Boolean SALIDA_ARCHIVOIsKey(){
				    return false;
				}
				public Integer SALIDA_ARCHIVOLength(){
				    return 0;
				}
				public Integer SALIDA_ARCHIVOPrecision(){
				    return 0;
				}
				public String SALIDA_ARCHIVODefault(){
				
					return null;
				
				}
				public String SALIDA_ARCHIVOComment(){
				
				    return "";
				
				}
				public String SALIDA_ARCHIVOPattern(){
				
					return "";
				
				}
				public String SALIDA_ARCHIVOOriginalDbColumnName(){
				
					return "SALIDA_ARCHIVO";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.AFILIADO_ID == null) ? 0 : this.AFILIADO_ID.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final salidaMultiCorreoStruct other = (salidaMultiCorreoStruct) obj;
		
						if (this.AFILIADO_ID == null) {
							if (other.AFILIADO_ID != null)
								return false;
						
						} else if (!this.AFILIADO_ID.equals(other.AFILIADO_ID))
						
							return false;
					

		return true;
    }

	public void copyDataTo(salidaMultiCorreoStruct other) {

		other.AFILIADO_ID = this.AFILIADO_ID;
	            other.EMAIL = this.EMAIL;
	            other.FECHA_AFILIACION = this.FECHA_AFILIACION;
	            other.ID_ENTIDAD = this.ID_ENTIDAD;
	            other.CODIGO_ENTIDAD = this.CODIGO_ENTIDAD;
	            other.SALIDA_ARCHIVO = this.SALIDA_ARCHIVO;
	            
	}

	public void copyKeysDataTo(salidaMultiCorreoStruct other) {

		other.AFILIADO_ID = this.AFILIADO_ID;
	            	
	}



	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion.length) {
				if(length < 1024 && commonByteArray_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion.length == 0) {
   					commonByteArray_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion = new byte[1024];
				} else {
   					commonByteArray_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion, 0, length);
			strReturn = new String(commonByteArray_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion.length) {
				if(length < 1024 && commonByteArray_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion.length == 0) {
   					commonByteArray_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion = new byte[1024];
				} else {
   					commonByteArray_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion, 0, length);
			strReturn = new String(commonByteArray_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion) {

        	try {

        		int length = 0;
		
						this.AFILIADO_ID = readInteger(dis);
					
					this.EMAIL = readString(dis);
					
					this.FECHA_AFILIACION = readDate(dis);
					
						this.ID_ENTIDAD = readInteger(dis);
					
					this.CODIGO_ENTIDAD = readString(dis);
					
					this.SALIDA_ARCHIVO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion) {

        	try {

        		int length = 0;
		
						this.AFILIADO_ID = readInteger(dis);
					
					this.EMAIL = readString(dis);
					
					this.FECHA_AFILIACION = readDate(dis);
					
						this.ID_ENTIDAD = readInteger(dis);
					
					this.CODIGO_ENTIDAD = readString(dis);
					
					this.SALIDA_ARCHIVO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.AFILIADO_ID,dos);
					
					// String
				
						writeString(this.EMAIL,dos);
					
					// java.util.Date
				
						writeDate(this.FECHA_AFILIACION,dos);
					
					// Integer
				
						writeInteger(this.ID_ENTIDAD,dos);
					
					// String
				
						writeString(this.CODIGO_ENTIDAD,dos);
					
					// String
				
						writeString(this.SALIDA_ARCHIVO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.AFILIADO_ID,dos);
					
					// String
				
						writeString(this.EMAIL,dos);
					
					// java.util.Date
				
						writeDate(this.FECHA_AFILIACION,dos);
					
					// Integer
				
						writeInteger(this.ID_ENTIDAD,dos);
					
					// String
				
						writeString(this.CODIGO_ENTIDAD,dos);
					
					// String
				
						writeString(this.SALIDA_ARCHIVO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("AFILIADO_ID="+String.valueOf(AFILIADO_ID));
		sb.append(",EMAIL="+EMAIL);
		sb.append(",FECHA_AFILIACION="+String.valueOf(FECHA_AFILIACION));
		sb.append(",ID_ENTIDAD="+String.valueOf(ID_ENTIDAD));
		sb.append(",CODIGO_ENTIDAD="+CODIGO_ENTIDAD);
		sb.append(",SALIDA_ARCHIVO="+SALIDA_ARCHIVO);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(salidaMultiCorreoStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.AFILIADO_ID, other.AFILIADO_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class salidaMultiSinCorreoStruct implements routines.system.IPersistableRow<salidaMultiSinCorreoStruct> {
    final static byte[] commonByteArrayLock_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion = new byte[0];
    static byte[] commonByteArray_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public Integer AFILIADO_ID;

				public Integer getAFILIADO_ID () {
					return this.AFILIADO_ID;
				}

				public Boolean AFILIADO_IDIsNullable(){
				    return true;
				}
				public Boolean AFILIADO_IDIsKey(){
				    return true;
				}
				public Integer AFILIADO_IDLength(){
				    return 0;
				}
				public Integer AFILIADO_IDPrecision(){
				    return 0;
				}
				public String AFILIADO_IDDefault(){
				
					return null;
				
				}
				public String AFILIADO_IDComment(){
				
				    return "";
				
				}
				public String AFILIADO_IDPattern(){
				
					return "";
				
				}
				public String AFILIADO_IDOriginalDbColumnName(){
				
					return "AFILIADO_ID";
				
				}

				
			    public String EMAIL;

				public String getEMAIL () {
					return this.EMAIL;
				}

				public Boolean EMAILIsNullable(){
				    return true;
				}
				public Boolean EMAILIsKey(){
				    return false;
				}
				public Integer EMAILLength(){
				    return 0;
				}
				public Integer EMAILPrecision(){
				    return 0;
				}
				public String EMAILDefault(){
				
					return null;
				
				}
				public String EMAILComment(){
				
				    return "";
				
				}
				public String EMAILPattern(){
				
					return "";
				
				}
				public String EMAILOriginalDbColumnName(){
				
					return "EMAIL";
				
				}

				
			    public java.util.Date FECHA_AFILIACION;

				public java.util.Date getFECHA_AFILIACION () {
					return this.FECHA_AFILIACION;
				}

				public Boolean FECHA_AFILIACIONIsNullable(){
				    return true;
				}
				public Boolean FECHA_AFILIACIONIsKey(){
				    return false;
				}
				public Integer FECHA_AFILIACIONLength(){
				    return 0;
				}
				public Integer FECHA_AFILIACIONPrecision(){
				    return 0;
				}
				public String FECHA_AFILIACIONDefault(){
				
					return null;
				
				}
				public String FECHA_AFILIACIONComment(){
				
				    return "";
				
				}
				public String FECHA_AFILIACIONPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String FECHA_AFILIACIONOriginalDbColumnName(){
				
					return "FECHA_AFILIACION";
				
				}

				
			    public Integer ID_ENTIDAD;

				public Integer getID_ENTIDAD () {
					return this.ID_ENTIDAD;
				}

				public Boolean ID_ENTIDADIsNullable(){
				    return true;
				}
				public Boolean ID_ENTIDADIsKey(){
				    return false;
				}
				public Integer ID_ENTIDADLength(){
				    return 0;
				}
				public Integer ID_ENTIDADPrecision(){
				    return 0;
				}
				public String ID_ENTIDADDefault(){
				
					return null;
				
				}
				public String ID_ENTIDADComment(){
				
				    return "";
				
				}
				public String ID_ENTIDADPattern(){
				
					return "";
				
				}
				public String ID_ENTIDADOriginalDbColumnName(){
				
					return "ID_ENTIDAD";
				
				}

				
			    public String CODIGO_ENTIDAD;

				public String getCODIGO_ENTIDAD () {
					return this.CODIGO_ENTIDAD;
				}

				public Boolean CODIGO_ENTIDADIsNullable(){
				    return true;
				}
				public Boolean CODIGO_ENTIDADIsKey(){
				    return false;
				}
				public Integer CODIGO_ENTIDADLength(){
				    return null;
				}
				public Integer CODIGO_ENTIDADPrecision(){
				    return null;
				}
				public String CODIGO_ENTIDADDefault(){
				
					return null;
				
				}
				public String CODIGO_ENTIDADComment(){
				
				    return "";
				
				}
				public String CODIGO_ENTIDADPattern(){
				
					return "";
				
				}
				public String CODIGO_ENTIDADOriginalDbColumnName(){
				
					return "CODIGO_ENTIDAD";
				
				}

				
			    public String SALIDA_ARCHIVO;

				public String getSALIDA_ARCHIVO () {
					return this.SALIDA_ARCHIVO;
				}

				public Boolean SALIDA_ARCHIVOIsNullable(){
				    return true;
				}
				public Boolean SALIDA_ARCHIVOIsKey(){
				    return false;
				}
				public Integer SALIDA_ARCHIVOLength(){
				    return null;
				}
				public Integer SALIDA_ARCHIVOPrecision(){
				    return null;
				}
				public String SALIDA_ARCHIVODefault(){
				
					return null;
				
				}
				public String SALIDA_ARCHIVOComment(){
				
				    return "";
				
				}
				public String SALIDA_ARCHIVOPattern(){
				
					return "";
				
				}
				public String SALIDA_ARCHIVOOriginalDbColumnName(){
				
					return "SALIDA_ARCHIVO";
				
				}

				
			    public String NOTIFICACION;

				public String getNOTIFICACION () {
					return this.NOTIFICACION;
				}

				public Boolean NOTIFICACIONIsNullable(){
				    return true;
				}
				public Boolean NOTIFICACIONIsKey(){
				    return false;
				}
				public Integer NOTIFICACIONLength(){
				    return null;
				}
				public Integer NOTIFICACIONPrecision(){
				    return null;
				}
				public String NOTIFICACIONDefault(){
				
					return null;
				
				}
				public String NOTIFICACIONComment(){
				
				    return "";
				
				}
				public String NOTIFICACIONPattern(){
				
					return "";
				
				}
				public String NOTIFICACIONOriginalDbColumnName(){
				
					return "NOTIFICACION";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.AFILIADO_ID == null) ? 0 : this.AFILIADO_ID.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final salidaMultiSinCorreoStruct other = (salidaMultiSinCorreoStruct) obj;
		
						if (this.AFILIADO_ID == null) {
							if (other.AFILIADO_ID != null)
								return false;
						
						} else if (!this.AFILIADO_ID.equals(other.AFILIADO_ID))
						
							return false;
					

		return true;
    }

	public void copyDataTo(salidaMultiSinCorreoStruct other) {

		other.AFILIADO_ID = this.AFILIADO_ID;
	            other.EMAIL = this.EMAIL;
	            other.FECHA_AFILIACION = this.FECHA_AFILIACION;
	            other.ID_ENTIDAD = this.ID_ENTIDAD;
	            other.CODIGO_ENTIDAD = this.CODIGO_ENTIDAD;
	            other.SALIDA_ARCHIVO = this.SALIDA_ARCHIVO;
	            other.NOTIFICACION = this.NOTIFICACION;
	            
	}

	public void copyKeysDataTo(salidaMultiSinCorreoStruct other) {

		other.AFILIADO_ID = this.AFILIADO_ID;
	            	
	}



	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion.length) {
				if(length < 1024 && commonByteArray_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion.length == 0) {
   					commonByteArray_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion = new byte[1024];
				} else {
   					commonByteArray_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion, 0, length);
			strReturn = new String(commonByteArray_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion.length) {
				if(length < 1024 && commonByteArray_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion.length == 0) {
   					commonByteArray_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion = new byte[1024];
				} else {
   					commonByteArray_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion, 0, length);
			strReturn = new String(commonByteArray_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion) {

        	try {

        		int length = 0;
		
						this.AFILIADO_ID = readInteger(dis);
					
					this.EMAIL = readString(dis);
					
					this.FECHA_AFILIACION = readDate(dis);
					
						this.ID_ENTIDAD = readInteger(dis);
					
					this.CODIGO_ENTIDAD = readString(dis);
					
					this.SALIDA_ARCHIVO = readString(dis);
					
					this.NOTIFICACION = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion) {

        	try {

        		int length = 0;
		
						this.AFILIADO_ID = readInteger(dis);
					
					this.EMAIL = readString(dis);
					
					this.FECHA_AFILIACION = readDate(dis);
					
						this.ID_ENTIDAD = readInteger(dis);
					
					this.CODIGO_ENTIDAD = readString(dis);
					
					this.SALIDA_ARCHIVO = readString(dis);
					
					this.NOTIFICACION = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.AFILIADO_ID,dos);
					
					// String
				
						writeString(this.EMAIL,dos);
					
					// java.util.Date
				
						writeDate(this.FECHA_AFILIACION,dos);
					
					// Integer
				
						writeInteger(this.ID_ENTIDAD,dos);
					
					// String
				
						writeString(this.CODIGO_ENTIDAD,dos);
					
					// String
				
						writeString(this.SALIDA_ARCHIVO,dos);
					
					// String
				
						writeString(this.NOTIFICACION,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.AFILIADO_ID,dos);
					
					// String
				
						writeString(this.EMAIL,dos);
					
					// java.util.Date
				
						writeDate(this.FECHA_AFILIACION,dos);
					
					// Integer
				
						writeInteger(this.ID_ENTIDAD,dos);
					
					// String
				
						writeString(this.CODIGO_ENTIDAD,dos);
					
					// String
				
						writeString(this.SALIDA_ARCHIVO,dos);
					
					// String
				
						writeString(this.NOTIFICACION,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("AFILIADO_ID="+String.valueOf(AFILIADO_ID));
		sb.append(",EMAIL="+EMAIL);
		sb.append(",FECHA_AFILIACION="+String.valueOf(FECHA_AFILIACION));
		sb.append(",ID_ENTIDAD="+String.valueOf(ID_ENTIDAD));
		sb.append(",CODIGO_ENTIDAD="+CODIGO_ENTIDAD);
		sb.append(",SALIDA_ARCHIVO="+SALIDA_ARCHIVO);
		sb.append(",NOTIFICACION="+NOTIFICACION);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(salidaMultiSinCorreoStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.AFILIADO_ID, other.AFILIADO_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class salidaArchivoStruct implements routines.system.IPersistableRow<salidaArchivoStruct> {
    final static byte[] commonByteArrayLock_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion = new byte[0];
    static byte[] commonByteArray_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion = new byte[0];

	
			    public Integer AFILIADO_ID;

				public Integer getAFILIADO_ID () {
					return this.AFILIADO_ID;
				}

				public Boolean AFILIADO_IDIsNullable(){
				    return true;
				}
				public Boolean AFILIADO_IDIsKey(){
				    return true;
				}
				public Integer AFILIADO_IDLength(){
				    return 0;
				}
				public Integer AFILIADO_IDPrecision(){
				    return 0;
				}
				public String AFILIADO_IDDefault(){
				
					return null;
				
				}
				public String AFILIADO_IDComment(){
				
				    return "";
				
				}
				public String AFILIADO_IDPattern(){
				
					return "";
				
				}
				public String AFILIADO_IDOriginalDbColumnName(){
				
					return "AFILIADO_ID";
				
				}

				
			    public String EMAIL;

				public String getEMAIL () {
					return this.EMAIL;
				}

				public Boolean EMAILIsNullable(){
				    return true;
				}
				public Boolean EMAILIsKey(){
				    return false;
				}
				public Integer EMAILLength(){
				    return 0;
				}
				public Integer EMAILPrecision(){
				    return 0;
				}
				public String EMAILDefault(){
				
					return null;
				
				}
				public String EMAILComment(){
				
				    return "";
				
				}
				public String EMAILPattern(){
				
					return "";
				
				}
				public String EMAILOriginalDbColumnName(){
				
					return "EMAIL";
				
				}

				
			    public java.util.Date FECHA_AFILIACION;

				public java.util.Date getFECHA_AFILIACION () {
					return this.FECHA_AFILIACION;
				}

				public Boolean FECHA_AFILIACIONIsNullable(){
				    return true;
				}
				public Boolean FECHA_AFILIACIONIsKey(){
				    return false;
				}
				public Integer FECHA_AFILIACIONLength(){
				    return 0;
				}
				public Integer FECHA_AFILIACIONPrecision(){
				    return 0;
				}
				public String FECHA_AFILIACIONDefault(){
				
					return null;
				
				}
				public String FECHA_AFILIACIONComment(){
				
				    return "";
				
				}
				public String FECHA_AFILIACIONPattern(){
				
					return "dd/MM/yyyy";
				
				}
				public String FECHA_AFILIACIONOriginalDbColumnName(){
				
					return "FECHA_AFILIACION";
				
				}

				
			    public Integer ID_ENTIDAD;

				public Integer getID_ENTIDAD () {
					return this.ID_ENTIDAD;
				}

				public Boolean ID_ENTIDADIsNullable(){
				    return true;
				}
				public Boolean ID_ENTIDADIsKey(){
				    return false;
				}
				public Integer ID_ENTIDADLength(){
				    return 0;
				}
				public Integer ID_ENTIDADPrecision(){
				    return 0;
				}
				public String ID_ENTIDADDefault(){
				
					return null;
				
				}
				public String ID_ENTIDADComment(){
				
				    return "";
				
				}
				public String ID_ENTIDADPattern(){
				
					return "";
				
				}
				public String ID_ENTIDADOriginalDbColumnName(){
				
					return "ID_ENTIDAD";
				
				}

				
			    public String CODIGO_ENTIDAD;

				public String getCODIGO_ENTIDAD () {
					return this.CODIGO_ENTIDAD;
				}

				public Boolean CODIGO_ENTIDADIsNullable(){
				    return true;
				}
				public Boolean CODIGO_ENTIDADIsKey(){
				    return false;
				}
				public Integer CODIGO_ENTIDADLength(){
				    return 0;
				}
				public Integer CODIGO_ENTIDADPrecision(){
				    return 0;
				}
				public String CODIGO_ENTIDADDefault(){
				
					return null;
				
				}
				public String CODIGO_ENTIDADComment(){
				
				    return "";
				
				}
				public String CODIGO_ENTIDADPattern(){
				
					return "";
				
				}
				public String CODIGO_ENTIDADOriginalDbColumnName(){
				
					return "CODIGO_ENTIDAD";
				
				}

				
			    public String SALIDA_ARCHIVO;

				public String getSALIDA_ARCHIVO () {
					return this.SALIDA_ARCHIVO;
				}

				public Boolean SALIDA_ARCHIVOIsNullable(){
				    return false;
				}
				public Boolean SALIDA_ARCHIVOIsKey(){
				    return false;
				}
				public Integer SALIDA_ARCHIVOLength(){
				    return 0;
				}
				public Integer SALIDA_ARCHIVOPrecision(){
				    return 0;
				}
				public String SALIDA_ARCHIVODefault(){
				
					return null;
				
				}
				public String SALIDA_ARCHIVOComment(){
				
				    return "";
				
				}
				public String SALIDA_ARCHIVOPattern(){
				
					return "";
				
				}
				public String SALIDA_ARCHIVOOriginalDbColumnName(){
				
					return "SALIDA_ARCHIVO";
				
				}

				
			    public String TIPO_DOCUMENTO;

				public String getTIPO_DOCUMENTO () {
					return this.TIPO_DOCUMENTO;
				}

				public Boolean TIPO_DOCUMENTOIsNullable(){
				    return true;
				}
				public Boolean TIPO_DOCUMENTOIsKey(){
				    return false;
				}
				public Integer TIPO_DOCUMENTOLength(){
				    return 0;
				}
				public Integer TIPO_DOCUMENTOPrecision(){
				    return 0;
				}
				public String TIPO_DOCUMENTODefault(){
				
					return null;
				
				}
				public String TIPO_DOCUMENTOComment(){
				
				    return "";
				
				}
				public String TIPO_DOCUMENTOPattern(){
				
					return "";
				
				}
				public String TIPO_DOCUMENTOOriginalDbColumnName(){
				
					return "TIPO_DOCUMENTO";
				
				}

				
			    public String NUMERO_DOCUMENTO;

				public String getNUMERO_DOCUMENTO () {
					return this.NUMERO_DOCUMENTO;
				}

				public Boolean NUMERO_DOCUMENTOIsNullable(){
				    return true;
				}
				public Boolean NUMERO_DOCUMENTOIsKey(){
				    return false;
				}
				public Integer NUMERO_DOCUMENTOLength(){
				    return 0;
				}
				public Integer NUMERO_DOCUMENTOPrecision(){
				    return 0;
				}
				public String NUMERO_DOCUMENTODefault(){
				
					return null;
				
				}
				public String NUMERO_DOCUMENTOComment(){
				
				    return "";
				
				}
				public String NUMERO_DOCUMENTOPattern(){
				
					return "";
				
				}
				public String NUMERO_DOCUMENTOOriginalDbColumnName(){
				
					return "NUMERO_DOCUMENTO";
				
				}

				
			    public String PRIMER_NOMBRE;

				public String getPRIMER_NOMBRE () {
					return this.PRIMER_NOMBRE;
				}

				public Boolean PRIMER_NOMBREIsNullable(){
				    return true;
				}
				public Boolean PRIMER_NOMBREIsKey(){
				    return false;
				}
				public Integer PRIMER_NOMBRELength(){
				    return 0;
				}
				public Integer PRIMER_NOMBREPrecision(){
				    return 0;
				}
				public String PRIMER_NOMBREDefault(){
				
					return null;
				
				}
				public String PRIMER_NOMBREComment(){
				
				    return "";
				
				}
				public String PRIMER_NOMBREPattern(){
				
					return "";
				
				}
				public String PRIMER_NOMBREOriginalDbColumnName(){
				
					return "PRIMER_NOMBRE";
				
				}

				
			    public String SEGUNDO_NOMBRE;

				public String getSEGUNDO_NOMBRE () {
					return this.SEGUNDO_NOMBRE;
				}

				public Boolean SEGUNDO_NOMBREIsNullable(){
				    return true;
				}
				public Boolean SEGUNDO_NOMBREIsKey(){
				    return false;
				}
				public Integer SEGUNDO_NOMBRELength(){
				    return 0;
				}
				public Integer SEGUNDO_NOMBREPrecision(){
				    return 0;
				}
				public String SEGUNDO_NOMBREDefault(){
				
					return null;
				
				}
				public String SEGUNDO_NOMBREComment(){
				
				    return "";
				
				}
				public String SEGUNDO_NOMBREPattern(){
				
					return "";
				
				}
				public String SEGUNDO_NOMBREOriginalDbColumnName(){
				
					return "SEGUNDO_NOMBRE";
				
				}

				
			    public String PRIMER_APELLIDO;

				public String getPRIMER_APELLIDO () {
					return this.PRIMER_APELLIDO;
				}

				public Boolean PRIMER_APELLIDOIsNullable(){
				    return true;
				}
				public Boolean PRIMER_APELLIDOIsKey(){
				    return false;
				}
				public Integer PRIMER_APELLIDOLength(){
				    return 0;
				}
				public Integer PRIMER_APELLIDOPrecision(){
				    return 0;
				}
				public String PRIMER_APELLIDODefault(){
				
					return null;
				
				}
				public String PRIMER_APELLIDOComment(){
				
				    return "";
				
				}
				public String PRIMER_APELLIDOPattern(){
				
					return "";
				
				}
				public String PRIMER_APELLIDOOriginalDbColumnName(){
				
					return "PRIMER_APELLIDO";
				
				}

				
			    public String SEGUNDO_APELLIDO;

				public String getSEGUNDO_APELLIDO () {
					return this.SEGUNDO_APELLIDO;
				}

				public Boolean SEGUNDO_APELLIDOIsNullable(){
				    return true;
				}
				public Boolean SEGUNDO_APELLIDOIsKey(){
				    return false;
				}
				public Integer SEGUNDO_APELLIDOLength(){
				    return 0;
				}
				public Integer SEGUNDO_APELLIDOPrecision(){
				    return 0;
				}
				public String SEGUNDO_APELLIDODefault(){
				
					return null;
				
				}
				public String SEGUNDO_APELLIDOComment(){
				
				    return "";
				
				}
				public String SEGUNDO_APELLIDOPattern(){
				
					return "";
				
				}
				public String SEGUNDO_APELLIDOOriginalDbColumnName(){
				
					return "SEGUNDO_APELLIDO";
				
				}

				
			    public String EPS_NOMBRE;

				public String getEPS_NOMBRE () {
					return this.EPS_NOMBRE;
				}

				public Boolean EPS_NOMBREIsNullable(){
				    return true;
				}
				public Boolean EPS_NOMBREIsKey(){
				    return false;
				}
				public Integer EPS_NOMBRELength(){
				    return 0;
				}
				public Integer EPS_NOMBREPrecision(){
				    return 0;
				}
				public String EPS_NOMBREDefault(){
				
					return null;
				
				}
				public String EPS_NOMBREComment(){
				
				    return "";
				
				}
				public String EPS_NOMBREPattern(){
				
					return "";
				
				}
				public String EPS_NOMBREOriginalDbColumnName(){
				
					return "EPS_NOMBRE";
				
				}

				
			    public Integer TEPS_ID;

				public Integer getTEPS_ID () {
					return this.TEPS_ID;
				}

				public Boolean TEPS_IDIsNullable(){
				    return true;
				}
				public Boolean TEPS_IDIsKey(){
				    return false;
				}
				public Integer TEPS_IDLength(){
				    return 0;
				}
				public Integer TEPS_IDPrecision(){
				    return 0;
				}
				public String TEPS_IDDefault(){
				
					return null;
				
				}
				public String TEPS_IDComment(){
				
				    return "";
				
				}
				public String TEPS_IDPattern(){
				
					return "";
				
				}
				public String TEPS_IDOriginalDbColumnName(){
				
					return "TEPS_ID";
				
				}

				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion.length) {
				if(length < 1024 && commonByteArray_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion.length == 0) {
   					commonByteArray_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion = new byte[1024];
				} else {
   					commonByteArray_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion, 0, length);
			strReturn = new String(commonByteArray_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion.length) {
				if(length < 1024 && commonByteArray_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion.length == 0) {
   					commonByteArray_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion = new byte[1024];
				} else {
   					commonByteArray_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion, 0, length);
			strReturn = new String(commonByteArray_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion) {

        	try {

        		int length = 0;
		
						this.AFILIADO_ID = readInteger(dis);
					
					this.EMAIL = readString(dis);
					
					this.FECHA_AFILIACION = readDate(dis);
					
						this.ID_ENTIDAD = readInteger(dis);
					
					this.CODIGO_ENTIDAD = readString(dis);
					
					this.SALIDA_ARCHIVO = readString(dis);
					
					this.TIPO_DOCUMENTO = readString(dis);
					
					this.NUMERO_DOCUMENTO = readString(dis);
					
					this.PRIMER_NOMBRE = readString(dis);
					
					this.SEGUNDO_NOMBRE = readString(dis);
					
					this.PRIMER_APELLIDO = readString(dis);
					
					this.SEGUNDO_APELLIDO = readString(dis);
					
					this.EPS_NOMBRE = readString(dis);
					
						this.TEPS_ID = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion) {

        	try {

        		int length = 0;
		
						this.AFILIADO_ID = readInteger(dis);
					
					this.EMAIL = readString(dis);
					
					this.FECHA_AFILIACION = readDate(dis);
					
						this.ID_ENTIDAD = readInteger(dis);
					
					this.CODIGO_ENTIDAD = readString(dis);
					
					this.SALIDA_ARCHIVO = readString(dis);
					
					this.TIPO_DOCUMENTO = readString(dis);
					
					this.NUMERO_DOCUMENTO = readString(dis);
					
					this.PRIMER_NOMBRE = readString(dis);
					
					this.SEGUNDO_NOMBRE = readString(dis);
					
					this.PRIMER_APELLIDO = readString(dis);
					
					this.SEGUNDO_APELLIDO = readString(dis);
					
					this.EPS_NOMBRE = readString(dis);
					
						this.TEPS_ID = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.AFILIADO_ID,dos);
					
					// String
				
						writeString(this.EMAIL,dos);
					
					// java.util.Date
				
						writeDate(this.FECHA_AFILIACION,dos);
					
					// Integer
				
						writeInteger(this.ID_ENTIDAD,dos);
					
					// String
				
						writeString(this.CODIGO_ENTIDAD,dos);
					
					// String
				
						writeString(this.SALIDA_ARCHIVO,dos);
					
					// String
				
						writeString(this.TIPO_DOCUMENTO,dos);
					
					// String
				
						writeString(this.NUMERO_DOCUMENTO,dos);
					
					// String
				
						writeString(this.PRIMER_NOMBRE,dos);
					
					// String
				
						writeString(this.SEGUNDO_NOMBRE,dos);
					
					// String
				
						writeString(this.PRIMER_APELLIDO,dos);
					
					// String
				
						writeString(this.SEGUNDO_APELLIDO,dos);
					
					// String
				
						writeString(this.EPS_NOMBRE,dos);
					
					// Integer
				
						writeInteger(this.TEPS_ID,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.AFILIADO_ID,dos);
					
					// String
				
						writeString(this.EMAIL,dos);
					
					// java.util.Date
				
						writeDate(this.FECHA_AFILIACION,dos);
					
					// Integer
				
						writeInteger(this.ID_ENTIDAD,dos);
					
					// String
				
						writeString(this.CODIGO_ENTIDAD,dos);
					
					// String
				
						writeString(this.SALIDA_ARCHIVO,dos);
					
					// String
				
						writeString(this.TIPO_DOCUMENTO,dos);
					
					// String
				
						writeString(this.NUMERO_DOCUMENTO,dos);
					
					// String
				
						writeString(this.PRIMER_NOMBRE,dos);
					
					// String
				
						writeString(this.SEGUNDO_NOMBRE,dos);
					
					// String
				
						writeString(this.PRIMER_APELLIDO,dos);
					
					// String
				
						writeString(this.SEGUNDO_APELLIDO,dos);
					
					// String
				
						writeString(this.EPS_NOMBRE,dos);
					
					// Integer
				
						writeInteger(this.TEPS_ID,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("AFILIADO_ID="+String.valueOf(AFILIADO_ID));
		sb.append(",EMAIL="+EMAIL);
		sb.append(",FECHA_AFILIACION="+String.valueOf(FECHA_AFILIACION));
		sb.append(",ID_ENTIDAD="+String.valueOf(ID_ENTIDAD));
		sb.append(",CODIGO_ENTIDAD="+CODIGO_ENTIDAD);
		sb.append(",SALIDA_ARCHIVO="+SALIDA_ARCHIVO);
		sb.append(",TIPO_DOCUMENTO="+TIPO_DOCUMENTO);
		sb.append(",NUMERO_DOCUMENTO="+NUMERO_DOCUMENTO);
		sb.append(",PRIMER_NOMBRE="+PRIMER_NOMBRE);
		sb.append(",SEGUNDO_NOMBRE="+SEGUNDO_NOMBRE);
		sb.append(",PRIMER_APELLIDO="+PRIMER_APELLIDO);
		sb.append(",SEGUNDO_APELLIDO="+SEGUNDO_APELLIDO);
		sb.append(",EPS_NOMBRE="+EPS_NOMBRE);
		sb.append(",TEPS_ID="+String.valueOf(TEPS_ID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(salidaArchivoStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class salidaMultiCorreoTitularesStruct implements routines.system.IPersistableRow<salidaMultiCorreoTitularesStruct> {
    final static byte[] commonByteArrayLock_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion = new byte[0];
    static byte[] commonByteArray_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public Integer AFILIADO_ID;

				public Integer getAFILIADO_ID () {
					return this.AFILIADO_ID;
				}

				public Boolean AFILIADO_IDIsNullable(){
				    return true;
				}
				public Boolean AFILIADO_IDIsKey(){
				    return true;
				}
				public Integer AFILIADO_IDLength(){
				    return 0;
				}
				public Integer AFILIADO_IDPrecision(){
				    return 0;
				}
				public String AFILIADO_IDDefault(){
				
					return "";
				
				}
				public String AFILIADO_IDComment(){
				
				    return "";
				
				}
				public String AFILIADO_IDPattern(){
				
					return "";
				
				}
				public String AFILIADO_IDOriginalDbColumnName(){
				
					return "AFILIADO_ID";
				
				}

				
			    public String EMAIL;

				public String getEMAIL () {
					return this.EMAIL;
				}

				public Boolean EMAILIsNullable(){
				    return true;
				}
				public Boolean EMAILIsKey(){
				    return false;
				}
				public Integer EMAILLength(){
				    return 0;
				}
				public Integer EMAILPrecision(){
				    return 0;
				}
				public String EMAILDefault(){
				
					return null;
				
				}
				public String EMAILComment(){
				
				    return "";
				
				}
				public String EMAILPattern(){
				
					return "";
				
				}
				public String EMAILOriginalDbColumnName(){
				
					return "EMAIL";
				
				}

				
			    public java.util.Date FECHA_AFILIACION;

				public java.util.Date getFECHA_AFILIACION () {
					return this.FECHA_AFILIACION;
				}

				public Boolean FECHA_AFILIACIONIsNullable(){
				    return true;
				}
				public Boolean FECHA_AFILIACIONIsKey(){
				    return false;
				}
				public Integer FECHA_AFILIACIONLength(){
				    return 0;
				}
				public Integer FECHA_AFILIACIONPrecision(){
				    return 0;
				}
				public String FECHA_AFILIACIONDefault(){
				
					return null;
				
				}
				public String FECHA_AFILIACIONComment(){
				
				    return "";
				
				}
				public String FECHA_AFILIACIONPattern(){
				
					return "dd/MM/yyyy";
				
				}
				public String FECHA_AFILIACIONOriginalDbColumnName(){
				
					return "FECHA_AFILIACION";
				
				}

				
			    public Integer ID_ENTIDAD;

				public Integer getID_ENTIDAD () {
					return this.ID_ENTIDAD;
				}

				public Boolean ID_ENTIDADIsNullable(){
				    return true;
				}
				public Boolean ID_ENTIDADIsKey(){
				    return false;
				}
				public Integer ID_ENTIDADLength(){
				    return 0;
				}
				public Integer ID_ENTIDADPrecision(){
				    return 0;
				}
				public String ID_ENTIDADDefault(){
				
					return "";
				
				}
				public String ID_ENTIDADComment(){
				
				    return "";
				
				}
				public String ID_ENTIDADPattern(){
				
					return "";
				
				}
				public String ID_ENTIDADOriginalDbColumnName(){
				
					return "ID_ENTIDAD";
				
				}

				
			    public String CODIGO_ENTIDAD;

				public String getCODIGO_ENTIDAD () {
					return this.CODIGO_ENTIDAD;
				}

				public Boolean CODIGO_ENTIDADIsNullable(){
				    return true;
				}
				public Boolean CODIGO_ENTIDADIsKey(){
				    return false;
				}
				public Integer CODIGO_ENTIDADLength(){
				    return 0;
				}
				public Integer CODIGO_ENTIDADPrecision(){
				    return 0;
				}
				public String CODIGO_ENTIDADDefault(){
				
					return null;
				
				}
				public String CODIGO_ENTIDADComment(){
				
				    return "";
				
				}
				public String CODIGO_ENTIDADPattern(){
				
					return "";
				
				}
				public String CODIGO_ENTIDADOriginalDbColumnName(){
				
					return "CODIGO_ENTIDAD";
				
				}

				
			    public String SALIDA_ARCHIVO;

				public String getSALIDA_ARCHIVO () {
					return this.SALIDA_ARCHIVO;
				}

				public Boolean SALIDA_ARCHIVOIsNullable(){
				    return false;
				}
				public Boolean SALIDA_ARCHIVOIsKey(){
				    return false;
				}
				public Integer SALIDA_ARCHIVOLength(){
				    return 0;
				}
				public Integer SALIDA_ARCHIVOPrecision(){
				    return 0;
				}
				public String SALIDA_ARCHIVODefault(){
				
					return null;
				
				}
				public String SALIDA_ARCHIVOComment(){
				
				    return "";
				
				}
				public String SALIDA_ARCHIVOPattern(){
				
					return "";
				
				}
				public String SALIDA_ARCHIVOOriginalDbColumnName(){
				
					return "SALIDA_ARCHIVO";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.AFILIADO_ID == null) ? 0 : this.AFILIADO_ID.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final salidaMultiCorreoTitularesStruct other = (salidaMultiCorreoTitularesStruct) obj;
		
						if (this.AFILIADO_ID == null) {
							if (other.AFILIADO_ID != null)
								return false;
						
						} else if (!this.AFILIADO_ID.equals(other.AFILIADO_ID))
						
							return false;
					

		return true;
    }

	public void copyDataTo(salidaMultiCorreoTitularesStruct other) {

		other.AFILIADO_ID = this.AFILIADO_ID;
	            other.EMAIL = this.EMAIL;
	            other.FECHA_AFILIACION = this.FECHA_AFILIACION;
	            other.ID_ENTIDAD = this.ID_ENTIDAD;
	            other.CODIGO_ENTIDAD = this.CODIGO_ENTIDAD;
	            other.SALIDA_ARCHIVO = this.SALIDA_ARCHIVO;
	            
	}

	public void copyKeysDataTo(salidaMultiCorreoTitularesStruct other) {

		other.AFILIADO_ID = this.AFILIADO_ID;
	            	
	}



	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion.length) {
				if(length < 1024 && commonByteArray_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion.length == 0) {
   					commonByteArray_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion = new byte[1024];
				} else {
   					commonByteArray_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion, 0, length);
			strReturn = new String(commonByteArray_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion.length) {
				if(length < 1024 && commonByteArray_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion.length == 0) {
   					commonByteArray_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion = new byte[1024];
				} else {
   					commonByteArray_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion, 0, length);
			strReturn = new String(commonByteArray_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion) {

        	try {

        		int length = 0;
		
						this.AFILIADO_ID = readInteger(dis);
					
					this.EMAIL = readString(dis);
					
					this.FECHA_AFILIACION = readDate(dis);
					
						this.ID_ENTIDAD = readInteger(dis);
					
					this.CODIGO_ENTIDAD = readString(dis);
					
					this.SALIDA_ARCHIVO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion) {

        	try {

        		int length = 0;
		
						this.AFILIADO_ID = readInteger(dis);
					
					this.EMAIL = readString(dis);
					
					this.FECHA_AFILIACION = readDate(dis);
					
						this.ID_ENTIDAD = readInteger(dis);
					
					this.CODIGO_ENTIDAD = readString(dis);
					
					this.SALIDA_ARCHIVO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.AFILIADO_ID,dos);
					
					// String
				
						writeString(this.EMAIL,dos);
					
					// java.util.Date
				
						writeDate(this.FECHA_AFILIACION,dos);
					
					// Integer
				
						writeInteger(this.ID_ENTIDAD,dos);
					
					// String
				
						writeString(this.CODIGO_ENTIDAD,dos);
					
					// String
				
						writeString(this.SALIDA_ARCHIVO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.AFILIADO_ID,dos);
					
					// String
				
						writeString(this.EMAIL,dos);
					
					// java.util.Date
				
						writeDate(this.FECHA_AFILIACION,dos);
					
					// Integer
				
						writeInteger(this.ID_ENTIDAD,dos);
					
					// String
				
						writeString(this.CODIGO_ENTIDAD,dos);
					
					// String
				
						writeString(this.SALIDA_ARCHIVO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("AFILIADO_ID="+String.valueOf(AFILIADO_ID));
		sb.append(",EMAIL="+EMAIL);
		sb.append(",FECHA_AFILIACION="+String.valueOf(FECHA_AFILIACION));
		sb.append(",ID_ENTIDAD="+String.valueOf(ID_ENTIDAD));
		sb.append(",CODIGO_ENTIDAD="+CODIGO_ENTIDAD);
		sb.append(",SALIDA_ARCHIVO="+SALIDA_ARCHIVO);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(salidaMultiCorreoTitularesStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.AFILIADO_ID, other.AFILIADO_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class salidaMultiafiliacionStruct implements routines.system.IPersistableRow<salidaMultiafiliacionStruct> {
    final static byte[] commonByteArrayLock_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion = new byte[0];
    static byte[] commonByteArray_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion = new byte[0];

	
			    public Integer AFILIADO_ID;

				public Integer getAFILIADO_ID () {
					return this.AFILIADO_ID;
				}

				public Boolean AFILIADO_IDIsNullable(){
				    return true;
				}
				public Boolean AFILIADO_IDIsKey(){
				    return true;
				}
				public Integer AFILIADO_IDLength(){
				    return 0;
				}
				public Integer AFILIADO_IDPrecision(){
				    return 0;
				}
				public String AFILIADO_IDDefault(){
				
					return null;
				
				}
				public String AFILIADO_IDComment(){
				
				    return "";
				
				}
				public String AFILIADO_IDPattern(){
				
					return "";
				
				}
				public String AFILIADO_IDOriginalDbColumnName(){
				
					return "AFILIADO_ID";
				
				}

				
			    public String EMAIL;

				public String getEMAIL () {
					return this.EMAIL;
				}

				public Boolean EMAILIsNullable(){
				    return true;
				}
				public Boolean EMAILIsKey(){
				    return false;
				}
				public Integer EMAILLength(){
				    return 0;
				}
				public Integer EMAILPrecision(){
				    return 0;
				}
				public String EMAILDefault(){
				
					return null;
				
				}
				public String EMAILComment(){
				
				    return "";
				
				}
				public String EMAILPattern(){
				
					return "";
				
				}
				public String EMAILOriginalDbColumnName(){
				
					return "EMAIL";
				
				}

				
			    public java.util.Date FECHA_AFILIACION;

				public java.util.Date getFECHA_AFILIACION () {
					return this.FECHA_AFILIACION;
				}

				public Boolean FECHA_AFILIACIONIsNullable(){
				    return true;
				}
				public Boolean FECHA_AFILIACIONIsKey(){
				    return false;
				}
				public Integer FECHA_AFILIACIONLength(){
				    return 0;
				}
				public Integer FECHA_AFILIACIONPrecision(){
				    return 0;
				}
				public String FECHA_AFILIACIONDefault(){
				
					return null;
				
				}
				public String FECHA_AFILIACIONComment(){
				
				    return "";
				
				}
				public String FECHA_AFILIACIONPattern(){
				
					return "dd/MM/yyyy";
				
				}
				public String FECHA_AFILIACIONOriginalDbColumnName(){
				
					return "FECHA_AFILIACION";
				
				}

				
			    public Integer ID_ENTIDAD;

				public Integer getID_ENTIDAD () {
					return this.ID_ENTIDAD;
				}

				public Boolean ID_ENTIDADIsNullable(){
				    return true;
				}
				public Boolean ID_ENTIDADIsKey(){
				    return false;
				}
				public Integer ID_ENTIDADLength(){
				    return 0;
				}
				public Integer ID_ENTIDADPrecision(){
				    return 0;
				}
				public String ID_ENTIDADDefault(){
				
					return null;
				
				}
				public String ID_ENTIDADComment(){
				
				    return "";
				
				}
				public String ID_ENTIDADPattern(){
				
					return "";
				
				}
				public String ID_ENTIDADOriginalDbColumnName(){
				
					return "ID_ENTIDAD";
				
				}

				
			    public String CODIGO_ENTIDAD;

				public String getCODIGO_ENTIDAD () {
					return this.CODIGO_ENTIDAD;
				}

				public Boolean CODIGO_ENTIDADIsNullable(){
				    return true;
				}
				public Boolean CODIGO_ENTIDADIsKey(){
				    return false;
				}
				public Integer CODIGO_ENTIDADLength(){
				    return 0;
				}
				public Integer CODIGO_ENTIDADPrecision(){
				    return 0;
				}
				public String CODIGO_ENTIDADDefault(){
				
					return null;
				
				}
				public String CODIGO_ENTIDADComment(){
				
				    return "";
				
				}
				public String CODIGO_ENTIDADPattern(){
				
					return "";
				
				}
				public String CODIGO_ENTIDADOriginalDbColumnName(){
				
					return "CODIGO_ENTIDAD";
				
				}

				
			    public String SALIDA_ARCHIVO;

				public String getSALIDA_ARCHIVO () {
					return this.SALIDA_ARCHIVO;
				}

				public Boolean SALIDA_ARCHIVOIsNullable(){
				    return false;
				}
				public Boolean SALIDA_ARCHIVOIsKey(){
				    return false;
				}
				public Integer SALIDA_ARCHIVOLength(){
				    return 0;
				}
				public Integer SALIDA_ARCHIVOPrecision(){
				    return 0;
				}
				public String SALIDA_ARCHIVODefault(){
				
					return null;
				
				}
				public String SALIDA_ARCHIVOComment(){
				
				    return "";
				
				}
				public String SALIDA_ARCHIVOPattern(){
				
					return "";
				
				}
				public String SALIDA_ARCHIVOOriginalDbColumnName(){
				
					return "SALIDA_ARCHIVO";
				
				}

				
			    public String TIPO_DOCUMENTO;

				public String getTIPO_DOCUMENTO () {
					return this.TIPO_DOCUMENTO;
				}

				public Boolean TIPO_DOCUMENTOIsNullable(){
				    return true;
				}
				public Boolean TIPO_DOCUMENTOIsKey(){
				    return false;
				}
				public Integer TIPO_DOCUMENTOLength(){
				    return 0;
				}
				public Integer TIPO_DOCUMENTOPrecision(){
				    return 0;
				}
				public String TIPO_DOCUMENTODefault(){
				
					return null;
				
				}
				public String TIPO_DOCUMENTOComment(){
				
				    return "";
				
				}
				public String TIPO_DOCUMENTOPattern(){
				
					return "";
				
				}
				public String TIPO_DOCUMENTOOriginalDbColumnName(){
				
					return "TIPO_DOCUMENTO";
				
				}

				
			    public String NUMERO_DOCUMENTO;

				public String getNUMERO_DOCUMENTO () {
					return this.NUMERO_DOCUMENTO;
				}

				public Boolean NUMERO_DOCUMENTOIsNullable(){
				    return true;
				}
				public Boolean NUMERO_DOCUMENTOIsKey(){
				    return false;
				}
				public Integer NUMERO_DOCUMENTOLength(){
				    return 0;
				}
				public Integer NUMERO_DOCUMENTOPrecision(){
				    return 0;
				}
				public String NUMERO_DOCUMENTODefault(){
				
					return null;
				
				}
				public String NUMERO_DOCUMENTOComment(){
				
				    return "";
				
				}
				public String NUMERO_DOCUMENTOPattern(){
				
					return "";
				
				}
				public String NUMERO_DOCUMENTOOriginalDbColumnName(){
				
					return "NUMERO_DOCUMENTO";
				
				}

				
			    public String PRIMER_NOMBRE;

				public String getPRIMER_NOMBRE () {
					return this.PRIMER_NOMBRE;
				}

				public Boolean PRIMER_NOMBREIsNullable(){
				    return true;
				}
				public Boolean PRIMER_NOMBREIsKey(){
				    return false;
				}
				public Integer PRIMER_NOMBRELength(){
				    return 0;
				}
				public Integer PRIMER_NOMBREPrecision(){
				    return 0;
				}
				public String PRIMER_NOMBREDefault(){
				
					return null;
				
				}
				public String PRIMER_NOMBREComment(){
				
				    return "";
				
				}
				public String PRIMER_NOMBREPattern(){
				
					return "";
				
				}
				public String PRIMER_NOMBREOriginalDbColumnName(){
				
					return "PRIMER_NOMBRE";
				
				}

				
			    public String SEGUNDO_NOMBRE;

				public String getSEGUNDO_NOMBRE () {
					return this.SEGUNDO_NOMBRE;
				}

				public Boolean SEGUNDO_NOMBREIsNullable(){
				    return true;
				}
				public Boolean SEGUNDO_NOMBREIsKey(){
				    return false;
				}
				public Integer SEGUNDO_NOMBRELength(){
				    return 0;
				}
				public Integer SEGUNDO_NOMBREPrecision(){
				    return 0;
				}
				public String SEGUNDO_NOMBREDefault(){
				
					return null;
				
				}
				public String SEGUNDO_NOMBREComment(){
				
				    return "";
				
				}
				public String SEGUNDO_NOMBREPattern(){
				
					return "";
				
				}
				public String SEGUNDO_NOMBREOriginalDbColumnName(){
				
					return "SEGUNDO_NOMBRE";
				
				}

				
			    public String PRIMER_APELLIDO;

				public String getPRIMER_APELLIDO () {
					return this.PRIMER_APELLIDO;
				}

				public Boolean PRIMER_APELLIDOIsNullable(){
				    return true;
				}
				public Boolean PRIMER_APELLIDOIsKey(){
				    return false;
				}
				public Integer PRIMER_APELLIDOLength(){
				    return 0;
				}
				public Integer PRIMER_APELLIDOPrecision(){
				    return 0;
				}
				public String PRIMER_APELLIDODefault(){
				
					return null;
				
				}
				public String PRIMER_APELLIDOComment(){
				
				    return "";
				
				}
				public String PRIMER_APELLIDOPattern(){
				
					return "";
				
				}
				public String PRIMER_APELLIDOOriginalDbColumnName(){
				
					return "PRIMER_APELLIDO";
				
				}

				
			    public String SEGUNDO_APELLIDO;

				public String getSEGUNDO_APELLIDO () {
					return this.SEGUNDO_APELLIDO;
				}

				public Boolean SEGUNDO_APELLIDOIsNullable(){
				    return true;
				}
				public Boolean SEGUNDO_APELLIDOIsKey(){
				    return false;
				}
				public Integer SEGUNDO_APELLIDOLength(){
				    return 0;
				}
				public Integer SEGUNDO_APELLIDOPrecision(){
				    return 0;
				}
				public String SEGUNDO_APELLIDODefault(){
				
					return null;
				
				}
				public String SEGUNDO_APELLIDOComment(){
				
				    return "";
				
				}
				public String SEGUNDO_APELLIDOPattern(){
				
					return "";
				
				}
				public String SEGUNDO_APELLIDOOriginalDbColumnName(){
				
					return "SEGUNDO_APELLIDO";
				
				}

				
			    public String EPS_NOMBRE;

				public String getEPS_NOMBRE () {
					return this.EPS_NOMBRE;
				}

				public Boolean EPS_NOMBREIsNullable(){
				    return true;
				}
				public Boolean EPS_NOMBREIsKey(){
				    return false;
				}
				public Integer EPS_NOMBRELength(){
				    return 0;
				}
				public Integer EPS_NOMBREPrecision(){
				    return 0;
				}
				public String EPS_NOMBREDefault(){
				
					return null;
				
				}
				public String EPS_NOMBREComment(){
				
				    return "";
				
				}
				public String EPS_NOMBREPattern(){
				
					return "";
				
				}
				public String EPS_NOMBREOriginalDbColumnName(){
				
					return "EPS_NOMBRE";
				
				}

				
			    public Integer TEPS_ID;

				public Integer getTEPS_ID () {
					return this.TEPS_ID;
				}

				public Boolean TEPS_IDIsNullable(){
				    return true;
				}
				public Boolean TEPS_IDIsKey(){
				    return false;
				}
				public Integer TEPS_IDLength(){
				    return 0;
				}
				public Integer TEPS_IDPrecision(){
				    return 0;
				}
				public String TEPS_IDDefault(){
				
					return null;
				
				}
				public String TEPS_IDComment(){
				
				    return "";
				
				}
				public String TEPS_IDPattern(){
				
					return "";
				
				}
				public String TEPS_IDOriginalDbColumnName(){
				
					return "TEPS_ID";
				
				}

				
			    public String TIPO;

				public String getTIPO () {
					return this.TIPO;
				}

				public Boolean TIPOIsNullable(){
				    return true;
				}
				public Boolean TIPOIsKey(){
				    return false;
				}
				public Integer TIPOLength(){
				    return null;
				}
				public Integer TIPOPrecision(){
				    return null;
				}
				public String TIPODefault(){
				
					return null;
				
				}
				public String TIPOComment(){
				
				    return "";
				
				}
				public String TIPOPattern(){
				
					return "";
				
				}
				public String TIPOOriginalDbColumnName(){
				
					return "TIPO";
				
				}

				
			    public Integer EDAD;

				public Integer getEDAD () {
					return this.EDAD;
				}

				public Boolean EDADIsNullable(){
				    return true;
				}
				public Boolean EDADIsKey(){
				    return false;
				}
				public Integer EDADLength(){
				    return null;
				}
				public Integer EDADPrecision(){
				    return null;
				}
				public String EDADDefault(){
				
					return null;
				
				}
				public String EDADComment(){
				
				    return "";
				
				}
				public String EDADPattern(){
				
					return "";
				
				}
				public String EDADOriginalDbColumnName(){
				
					return "EDAD";
				
				}

				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion.length) {
				if(length < 1024 && commonByteArray_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion.length == 0) {
   					commonByteArray_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion = new byte[1024];
				} else {
   					commonByteArray_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion, 0, length);
			strReturn = new String(commonByteArray_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion.length) {
				if(length < 1024 && commonByteArray_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion.length == 0) {
   					commonByteArray_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion = new byte[1024];
				} else {
   					commonByteArray_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion, 0, length);
			strReturn = new String(commonByteArray_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion) {

        	try {

        		int length = 0;
		
						this.AFILIADO_ID = readInteger(dis);
					
					this.EMAIL = readString(dis);
					
					this.FECHA_AFILIACION = readDate(dis);
					
						this.ID_ENTIDAD = readInteger(dis);
					
					this.CODIGO_ENTIDAD = readString(dis);
					
					this.SALIDA_ARCHIVO = readString(dis);
					
					this.TIPO_DOCUMENTO = readString(dis);
					
					this.NUMERO_DOCUMENTO = readString(dis);
					
					this.PRIMER_NOMBRE = readString(dis);
					
					this.SEGUNDO_NOMBRE = readString(dis);
					
					this.PRIMER_APELLIDO = readString(dis);
					
					this.SEGUNDO_APELLIDO = readString(dis);
					
					this.EPS_NOMBRE = readString(dis);
					
						this.TEPS_ID = readInteger(dis);
					
					this.TIPO = readString(dis);
					
						this.EDAD = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion) {

        	try {

        		int length = 0;
		
						this.AFILIADO_ID = readInteger(dis);
					
					this.EMAIL = readString(dis);
					
					this.FECHA_AFILIACION = readDate(dis);
					
						this.ID_ENTIDAD = readInteger(dis);
					
					this.CODIGO_ENTIDAD = readString(dis);
					
					this.SALIDA_ARCHIVO = readString(dis);
					
					this.TIPO_DOCUMENTO = readString(dis);
					
					this.NUMERO_DOCUMENTO = readString(dis);
					
					this.PRIMER_NOMBRE = readString(dis);
					
					this.SEGUNDO_NOMBRE = readString(dis);
					
					this.PRIMER_APELLIDO = readString(dis);
					
					this.SEGUNDO_APELLIDO = readString(dis);
					
					this.EPS_NOMBRE = readString(dis);
					
						this.TEPS_ID = readInteger(dis);
					
					this.TIPO = readString(dis);
					
						this.EDAD = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.AFILIADO_ID,dos);
					
					// String
				
						writeString(this.EMAIL,dos);
					
					// java.util.Date
				
						writeDate(this.FECHA_AFILIACION,dos);
					
					// Integer
				
						writeInteger(this.ID_ENTIDAD,dos);
					
					// String
				
						writeString(this.CODIGO_ENTIDAD,dos);
					
					// String
				
						writeString(this.SALIDA_ARCHIVO,dos);
					
					// String
				
						writeString(this.TIPO_DOCUMENTO,dos);
					
					// String
				
						writeString(this.NUMERO_DOCUMENTO,dos);
					
					// String
				
						writeString(this.PRIMER_NOMBRE,dos);
					
					// String
				
						writeString(this.SEGUNDO_NOMBRE,dos);
					
					// String
				
						writeString(this.PRIMER_APELLIDO,dos);
					
					// String
				
						writeString(this.SEGUNDO_APELLIDO,dos);
					
					// String
				
						writeString(this.EPS_NOMBRE,dos);
					
					// Integer
				
						writeInteger(this.TEPS_ID,dos);
					
					// String
				
						writeString(this.TIPO,dos);
					
					// Integer
				
						writeInteger(this.EDAD,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.AFILIADO_ID,dos);
					
					// String
				
						writeString(this.EMAIL,dos);
					
					// java.util.Date
				
						writeDate(this.FECHA_AFILIACION,dos);
					
					// Integer
				
						writeInteger(this.ID_ENTIDAD,dos);
					
					// String
				
						writeString(this.CODIGO_ENTIDAD,dos);
					
					// String
				
						writeString(this.SALIDA_ARCHIVO,dos);
					
					// String
				
						writeString(this.TIPO_DOCUMENTO,dos);
					
					// String
				
						writeString(this.NUMERO_DOCUMENTO,dos);
					
					// String
				
						writeString(this.PRIMER_NOMBRE,dos);
					
					// String
				
						writeString(this.SEGUNDO_NOMBRE,dos);
					
					// String
				
						writeString(this.PRIMER_APELLIDO,dos);
					
					// String
				
						writeString(this.SEGUNDO_APELLIDO,dos);
					
					// String
				
						writeString(this.EPS_NOMBRE,dos);
					
					// Integer
				
						writeInteger(this.TEPS_ID,dos);
					
					// String
				
						writeString(this.TIPO,dos);
					
					// Integer
				
						writeInteger(this.EDAD,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("AFILIADO_ID="+String.valueOf(AFILIADO_ID));
		sb.append(",EMAIL="+EMAIL);
		sb.append(",FECHA_AFILIACION="+String.valueOf(FECHA_AFILIACION));
		sb.append(",ID_ENTIDAD="+String.valueOf(ID_ENTIDAD));
		sb.append(",CODIGO_ENTIDAD="+CODIGO_ENTIDAD);
		sb.append(",SALIDA_ARCHIVO="+SALIDA_ARCHIVO);
		sb.append(",TIPO_DOCUMENTO="+TIPO_DOCUMENTO);
		sb.append(",NUMERO_DOCUMENTO="+NUMERO_DOCUMENTO);
		sb.append(",PRIMER_NOMBRE="+PRIMER_NOMBRE);
		sb.append(",SEGUNDO_NOMBRE="+SEGUNDO_NOMBRE);
		sb.append(",PRIMER_APELLIDO="+PRIMER_APELLIDO);
		sb.append(",SEGUNDO_APELLIDO="+SEGUNDO_APELLIDO);
		sb.append(",EPS_NOMBRE="+EPS_NOMBRE);
		sb.append(",TEPS_ID="+String.valueOf(TEPS_ID));
		sb.append(",TIPO="+TIPO);
		sb.append(",EDAD="+String.valueOf(EDAD));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(salidaMultiafiliacionStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class out3Struct implements routines.system.IPersistableRow<out3Struct> {
    final static byte[] commonByteArrayLock_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion = new byte[0];
    static byte[] commonByteArray_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion = new byte[0];

	
			    public Integer ID;

				public Integer getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return true;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return 0;
				}
				public Integer IDPrecision(){
				    return 0;
				}
				public String IDDefault(){
				
					return null;
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public String PERSONAS_ID;

				public String getPERSONAS_ID () {
					return this.PERSONAS_ID;
				}

				public Boolean PERSONAS_IDIsNullable(){
				    return true;
				}
				public Boolean PERSONAS_IDIsKey(){
				    return false;
				}
				public Integer PERSONAS_IDLength(){
				    return 0;
				}
				public Integer PERSONAS_IDPrecision(){
				    return 0;
				}
				public String PERSONAS_IDDefault(){
				
					return null;
				
				}
				public String PERSONAS_IDComment(){
				
				    return "";
				
				}
				public String PERSONAS_IDPattern(){
				
					return "";
				
				}
				public String PERSONAS_IDOriginalDbColumnName(){
				
					return "PERSONAS_ID";
				
				}

				
			    public String PRIMER_NOMBRE;

				public String getPRIMER_NOMBRE () {
					return this.PRIMER_NOMBRE;
				}

				public Boolean PRIMER_NOMBREIsNullable(){
				    return true;
				}
				public Boolean PRIMER_NOMBREIsKey(){
				    return false;
				}
				public Integer PRIMER_NOMBRELength(){
				    return 0;
				}
				public Integer PRIMER_NOMBREPrecision(){
				    return 0;
				}
				public String PRIMER_NOMBREDefault(){
				
					return null;
				
				}
				public String PRIMER_NOMBREComment(){
				
				    return "";
				
				}
				public String PRIMER_NOMBREPattern(){
				
					return "";
				
				}
				public String PRIMER_NOMBREOriginalDbColumnName(){
				
					return "PRIMER_NOMBRE";
				
				}

				
			    public String SEGUNDO_NOMBRE;

				public String getSEGUNDO_NOMBRE () {
					return this.SEGUNDO_NOMBRE;
				}

				public Boolean SEGUNDO_NOMBREIsNullable(){
				    return true;
				}
				public Boolean SEGUNDO_NOMBREIsKey(){
				    return false;
				}
				public Integer SEGUNDO_NOMBRELength(){
				    return 0;
				}
				public Integer SEGUNDO_NOMBREPrecision(){
				    return 0;
				}
				public String SEGUNDO_NOMBREDefault(){
				
					return null;
				
				}
				public String SEGUNDO_NOMBREComment(){
				
				    return "";
				
				}
				public String SEGUNDO_NOMBREPattern(){
				
					return "";
				
				}
				public String SEGUNDO_NOMBREOriginalDbColumnName(){
				
					return "SEGUNDO_NOMBRE";
				
				}

				
			    public String PRIMER_APELLIDO;

				public String getPRIMER_APELLIDO () {
					return this.PRIMER_APELLIDO;
				}

				public Boolean PRIMER_APELLIDOIsNullable(){
				    return true;
				}
				public Boolean PRIMER_APELLIDOIsKey(){
				    return false;
				}
				public Integer PRIMER_APELLIDOLength(){
				    return 0;
				}
				public Integer PRIMER_APELLIDOPrecision(){
				    return 0;
				}
				public String PRIMER_APELLIDODefault(){
				
					return null;
				
				}
				public String PRIMER_APELLIDOComment(){
				
				    return "";
				
				}
				public String PRIMER_APELLIDOPattern(){
				
					return "";
				
				}
				public String PRIMER_APELLIDOOriginalDbColumnName(){
				
					return "PRIMER_APELLIDO";
				
				}

				
			    public String SEGUNDO_APELLIDO;

				public String getSEGUNDO_APELLIDO () {
					return this.SEGUNDO_APELLIDO;
				}

				public Boolean SEGUNDO_APELLIDOIsNullable(){
				    return true;
				}
				public Boolean SEGUNDO_APELLIDOIsKey(){
				    return false;
				}
				public Integer SEGUNDO_APELLIDOLength(){
				    return 0;
				}
				public Integer SEGUNDO_APELLIDOPrecision(){
				    return 0;
				}
				public String SEGUNDO_APELLIDODefault(){
				
					return null;
				
				}
				public String SEGUNDO_APELLIDOComment(){
				
				    return "";
				
				}
				public String SEGUNDO_APELLIDOPattern(){
				
					return "";
				
				}
				public String SEGUNDO_APELLIDOOriginalDbColumnName(){
				
					return "SEGUNDO_APELLIDO";
				
				}

				
			    public String NUMERO_DOCUMENTO;

				public String getNUMERO_DOCUMENTO () {
					return this.NUMERO_DOCUMENTO;
				}

				public Boolean NUMERO_DOCUMENTOIsNullable(){
				    return true;
				}
				public Boolean NUMERO_DOCUMENTOIsKey(){
				    return false;
				}
				public Integer NUMERO_DOCUMENTOLength(){
				    return 0;
				}
				public Integer NUMERO_DOCUMENTOPrecision(){
				    return 0;
				}
				public String NUMERO_DOCUMENTODefault(){
				
					return null;
				
				}
				public String NUMERO_DOCUMENTOComment(){
				
				    return "";
				
				}
				public String NUMERO_DOCUMENTOPattern(){
				
					return "";
				
				}
				public String NUMERO_DOCUMENTOOriginalDbColumnName(){
				
					return "NUMERO_DOCUMENTO";
				
				}

				
			    public String TIPO_DOCUMENTO;

				public String getTIPO_DOCUMENTO () {
					return this.TIPO_DOCUMENTO;
				}

				public Boolean TIPO_DOCUMENTOIsNullable(){
				    return true;
				}
				public Boolean TIPO_DOCUMENTOIsKey(){
				    return false;
				}
				public Integer TIPO_DOCUMENTOLength(){
				    return 0;
				}
				public Integer TIPO_DOCUMENTOPrecision(){
				    return 0;
				}
				public String TIPO_DOCUMENTODefault(){
				
					return null;
				
				}
				public String TIPO_DOCUMENTOComment(){
				
				    return "";
				
				}
				public String TIPO_DOCUMENTOPattern(){
				
					return "";
				
				}
				public String TIPO_DOCUMENTOOriginalDbColumnName(){
				
					return "TIPO_DOCUMENTO";
				
				}

				
			    public String EMAIL;

				public String getEMAIL () {
					return this.EMAIL;
				}

				public Boolean EMAILIsNullable(){
				    return true;
				}
				public Boolean EMAILIsKey(){
				    return false;
				}
				public Integer EMAILLength(){
				    return 0;
				}
				public Integer EMAILPrecision(){
				    return 0;
				}
				public String EMAILDefault(){
				
					return null;
				
				}
				public String EMAILComment(){
				
				    return "";
				
				}
				public String EMAILPattern(){
				
					return "";
				
				}
				public String EMAILOriginalDbColumnName(){
				
					return "EMAIL";
				
				}

				
			    public String TIPO;

				public String getTIPO () {
					return this.TIPO;
				}

				public Boolean TIPOIsNullable(){
				    return true;
				}
				public Boolean TIPOIsKey(){
				    return false;
				}
				public Integer TIPOLength(){
				    return null;
				}
				public Integer TIPOPrecision(){
				    return null;
				}
				public String TIPODefault(){
				
					return null;
				
				}
				public String TIPOComment(){
				
				    return "";
				
				}
				public String TIPOPattern(){
				
					return "";
				
				}
				public String TIPOOriginalDbColumnName(){
				
					return "TIPO";
				
				}

				
			    public Integer EDAD;

				public Integer getEDAD () {
					return this.EDAD;
				}

				public Boolean EDADIsNullable(){
				    return true;
				}
				public Boolean EDADIsKey(){
				    return false;
				}
				public Integer EDADLength(){
				    return null;
				}
				public Integer EDADPrecision(){
				    return null;
				}
				public String EDADDefault(){
				
					return null;
				
				}
				public String EDADComment(){
				
				    return "";
				
				}
				public String EDADPattern(){
				
					return "";
				
				}
				public String EDADOriginalDbColumnName(){
				
					return "EDAD";
				
				}

				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion.length) {
				if(length < 1024 && commonByteArray_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion.length == 0) {
   					commonByteArray_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion = new byte[1024];
				} else {
   					commonByteArray_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion, 0, length);
			strReturn = new String(commonByteArray_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion.length) {
				if(length < 1024 && commonByteArray_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion.length == 0) {
   					commonByteArray_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion = new byte[1024];
				} else {
   					commonByteArray_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion, 0, length);
			strReturn = new String(commonByteArray_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion) {

        	try {

        		int length = 0;
		
						this.ID = readInteger(dis);
					
					this.PERSONAS_ID = readString(dis);
					
					this.PRIMER_NOMBRE = readString(dis);
					
					this.SEGUNDO_NOMBRE = readString(dis);
					
					this.PRIMER_APELLIDO = readString(dis);
					
					this.SEGUNDO_APELLIDO = readString(dis);
					
					this.NUMERO_DOCUMENTO = readString(dis);
					
					this.TIPO_DOCUMENTO = readString(dis);
					
					this.EMAIL = readString(dis);
					
					this.TIPO = readString(dis);
					
						this.EDAD = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion) {

        	try {

        		int length = 0;
		
						this.ID = readInteger(dis);
					
					this.PERSONAS_ID = readString(dis);
					
					this.PRIMER_NOMBRE = readString(dis);
					
					this.SEGUNDO_NOMBRE = readString(dis);
					
					this.PRIMER_APELLIDO = readString(dis);
					
					this.SEGUNDO_APELLIDO = readString(dis);
					
					this.NUMERO_DOCUMENTO = readString(dis);
					
					this.TIPO_DOCUMENTO = readString(dis);
					
					this.EMAIL = readString(dis);
					
					this.TIPO = readString(dis);
					
						this.EDAD = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.ID,dos);
					
					// String
				
						writeString(this.PERSONAS_ID,dos);
					
					// String
				
						writeString(this.PRIMER_NOMBRE,dos);
					
					// String
				
						writeString(this.SEGUNDO_NOMBRE,dos);
					
					// String
				
						writeString(this.PRIMER_APELLIDO,dos);
					
					// String
				
						writeString(this.SEGUNDO_APELLIDO,dos);
					
					// String
				
						writeString(this.NUMERO_DOCUMENTO,dos);
					
					// String
				
						writeString(this.TIPO_DOCUMENTO,dos);
					
					// String
				
						writeString(this.EMAIL,dos);
					
					// String
				
						writeString(this.TIPO,dos);
					
					// Integer
				
						writeInteger(this.EDAD,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.ID,dos);
					
					// String
				
						writeString(this.PERSONAS_ID,dos);
					
					// String
				
						writeString(this.PRIMER_NOMBRE,dos);
					
					// String
				
						writeString(this.SEGUNDO_NOMBRE,dos);
					
					// String
				
						writeString(this.PRIMER_APELLIDO,dos);
					
					// String
				
						writeString(this.SEGUNDO_APELLIDO,dos);
					
					// String
				
						writeString(this.NUMERO_DOCUMENTO,dos);
					
					// String
				
						writeString(this.TIPO_DOCUMENTO,dos);
					
					// String
				
						writeString(this.EMAIL,dos);
					
					// String
				
						writeString(this.TIPO,dos);
					
					// Integer
				
						writeInteger(this.EDAD,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",PERSONAS_ID="+PERSONAS_ID);
		sb.append(",PRIMER_NOMBRE="+PRIMER_NOMBRE);
		sb.append(",SEGUNDO_NOMBRE="+SEGUNDO_NOMBRE);
		sb.append(",PRIMER_APELLIDO="+PRIMER_APELLIDO);
		sb.append(",SEGUNDO_APELLIDO="+SEGUNDO_APELLIDO);
		sb.append(",NUMERO_DOCUMENTO="+NUMERO_DOCUMENTO);
		sb.append(",TIPO_DOCUMENTO="+TIPO_DOCUMENTO);
		sb.append(",EMAIL="+EMAIL);
		sb.append(",TIPO="+TIPO);
		sb.append(",EDAD="+String.valueOf(EDAD));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(out3Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row14Struct implements routines.system.IPersistableRow<row14Struct> {
    final static byte[] commonByteArrayLock_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion = new byte[0];
    static byte[] commonByteArray_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion = new byte[0];

	
			    public Integer ID;

				public Integer getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return true;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return 0;
				}
				public Integer IDPrecision(){
				    return 0;
				}
				public String IDDefault(){
				
					return null;
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public String PERSONAS_ID;

				public String getPERSONAS_ID () {
					return this.PERSONAS_ID;
				}

				public Boolean PERSONAS_IDIsNullable(){
				    return true;
				}
				public Boolean PERSONAS_IDIsKey(){
				    return false;
				}
				public Integer PERSONAS_IDLength(){
				    return 0;
				}
				public Integer PERSONAS_IDPrecision(){
				    return 0;
				}
				public String PERSONAS_IDDefault(){
				
					return null;
				
				}
				public String PERSONAS_IDComment(){
				
				    return "";
				
				}
				public String PERSONAS_IDPattern(){
				
					return "";
				
				}
				public String PERSONAS_IDOriginalDbColumnName(){
				
					return "PERSONAS_ID";
				
				}

				
			    public String PRIMER_NOMBRE;

				public String getPRIMER_NOMBRE () {
					return this.PRIMER_NOMBRE;
				}

				public Boolean PRIMER_NOMBREIsNullable(){
				    return true;
				}
				public Boolean PRIMER_NOMBREIsKey(){
				    return false;
				}
				public Integer PRIMER_NOMBRELength(){
				    return 0;
				}
				public Integer PRIMER_NOMBREPrecision(){
				    return 0;
				}
				public String PRIMER_NOMBREDefault(){
				
					return null;
				
				}
				public String PRIMER_NOMBREComment(){
				
				    return "";
				
				}
				public String PRIMER_NOMBREPattern(){
				
					return "";
				
				}
				public String PRIMER_NOMBREOriginalDbColumnName(){
				
					return "PRIMER_NOMBRE";
				
				}

				
			    public String SEGUNDO_NOMBRE;

				public String getSEGUNDO_NOMBRE () {
					return this.SEGUNDO_NOMBRE;
				}

				public Boolean SEGUNDO_NOMBREIsNullable(){
				    return true;
				}
				public Boolean SEGUNDO_NOMBREIsKey(){
				    return false;
				}
				public Integer SEGUNDO_NOMBRELength(){
				    return 0;
				}
				public Integer SEGUNDO_NOMBREPrecision(){
				    return 0;
				}
				public String SEGUNDO_NOMBREDefault(){
				
					return null;
				
				}
				public String SEGUNDO_NOMBREComment(){
				
				    return "";
				
				}
				public String SEGUNDO_NOMBREPattern(){
				
					return "";
				
				}
				public String SEGUNDO_NOMBREOriginalDbColumnName(){
				
					return "SEGUNDO_NOMBRE";
				
				}

				
			    public String PRIMER_APELLIDO;

				public String getPRIMER_APELLIDO () {
					return this.PRIMER_APELLIDO;
				}

				public Boolean PRIMER_APELLIDOIsNullable(){
				    return true;
				}
				public Boolean PRIMER_APELLIDOIsKey(){
				    return false;
				}
				public Integer PRIMER_APELLIDOLength(){
				    return 0;
				}
				public Integer PRIMER_APELLIDOPrecision(){
				    return 0;
				}
				public String PRIMER_APELLIDODefault(){
				
					return null;
				
				}
				public String PRIMER_APELLIDOComment(){
				
				    return "";
				
				}
				public String PRIMER_APELLIDOPattern(){
				
					return "";
				
				}
				public String PRIMER_APELLIDOOriginalDbColumnName(){
				
					return "PRIMER_APELLIDO";
				
				}

				
			    public String SEGUNDO_APELLIDO;

				public String getSEGUNDO_APELLIDO () {
					return this.SEGUNDO_APELLIDO;
				}

				public Boolean SEGUNDO_APELLIDOIsNullable(){
				    return true;
				}
				public Boolean SEGUNDO_APELLIDOIsKey(){
				    return false;
				}
				public Integer SEGUNDO_APELLIDOLength(){
				    return 0;
				}
				public Integer SEGUNDO_APELLIDOPrecision(){
				    return 0;
				}
				public String SEGUNDO_APELLIDODefault(){
				
					return null;
				
				}
				public String SEGUNDO_APELLIDOComment(){
				
				    return "";
				
				}
				public String SEGUNDO_APELLIDOPattern(){
				
					return "";
				
				}
				public String SEGUNDO_APELLIDOOriginalDbColumnName(){
				
					return "SEGUNDO_APELLIDO";
				
				}

				
			    public String NUMERO_DOCUMENTO;

				public String getNUMERO_DOCUMENTO () {
					return this.NUMERO_DOCUMENTO;
				}

				public Boolean NUMERO_DOCUMENTOIsNullable(){
				    return true;
				}
				public Boolean NUMERO_DOCUMENTOIsKey(){
				    return false;
				}
				public Integer NUMERO_DOCUMENTOLength(){
				    return 0;
				}
				public Integer NUMERO_DOCUMENTOPrecision(){
				    return 0;
				}
				public String NUMERO_DOCUMENTODefault(){
				
					return null;
				
				}
				public String NUMERO_DOCUMENTOComment(){
				
				    return "";
				
				}
				public String NUMERO_DOCUMENTOPattern(){
				
					return "";
				
				}
				public String NUMERO_DOCUMENTOOriginalDbColumnName(){
				
					return "NUMERO_DOCUMENTO";
				
				}

				
			    public Integer TDOCUMENTOS_ID;

				public Integer getTDOCUMENTOS_ID () {
					return this.TDOCUMENTOS_ID;
				}

				public Boolean TDOCUMENTOS_IDIsNullable(){
				    return true;
				}
				public Boolean TDOCUMENTOS_IDIsKey(){
				    return false;
				}
				public Integer TDOCUMENTOS_IDLength(){
				    return 0;
				}
				public Integer TDOCUMENTOS_IDPrecision(){
				    return 0;
				}
				public String TDOCUMENTOS_IDDefault(){
				
					return null;
				
				}
				public String TDOCUMENTOS_IDComment(){
				
				    return "";
				
				}
				public String TDOCUMENTOS_IDPattern(){
				
					return "";
				
				}
				public String TDOCUMENTOS_IDOriginalDbColumnName(){
				
					return "TDOCUMENTOS_ID";
				
				}

				
			    public String EMAIL;

				public String getEMAIL () {
					return this.EMAIL;
				}

				public Boolean EMAILIsNullable(){
				    return true;
				}
				public Boolean EMAILIsKey(){
				    return false;
				}
				public Integer EMAILLength(){
				    return 0;
				}
				public Integer EMAILPrecision(){
				    return 0;
				}
				public String EMAILDefault(){
				
					return null;
				
				}
				public String EMAILComment(){
				
				    return "";
				
				}
				public String EMAILPattern(){
				
					return "";
				
				}
				public String EMAILOriginalDbColumnName(){
				
					return "EMAIL";
				
				}

				
			    public String TIPO;

				public String getTIPO () {
					return this.TIPO;
				}

				public Boolean TIPOIsNullable(){
				    return true;
				}
				public Boolean TIPOIsKey(){
				    return false;
				}
				public Integer TIPOLength(){
				    return null;
				}
				public Integer TIPOPrecision(){
				    return null;
				}
				public String TIPODefault(){
				
					return null;
				
				}
				public String TIPOComment(){
				
				    return "";
				
				}
				public String TIPOPattern(){
				
					return "";
				
				}
				public String TIPOOriginalDbColumnName(){
				
					return "TIPO";
				
				}

				
			    public Integer EDAD;

				public Integer getEDAD () {
					return this.EDAD;
				}

				public Boolean EDADIsNullable(){
				    return true;
				}
				public Boolean EDADIsKey(){
				    return false;
				}
				public Integer EDADLength(){
				    return null;
				}
				public Integer EDADPrecision(){
				    return null;
				}
				public String EDADDefault(){
				
					return null;
				
				}
				public String EDADComment(){
				
				    return "";
				
				}
				public String EDADPattern(){
				
					return "";
				
				}
				public String EDADOriginalDbColumnName(){
				
					return "EDAD";
				
				}

				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion.length) {
				if(length < 1024 && commonByteArray_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion.length == 0) {
   					commonByteArray_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion = new byte[1024];
				} else {
   					commonByteArray_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion, 0, length);
			strReturn = new String(commonByteArray_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion.length) {
				if(length < 1024 && commonByteArray_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion.length == 0) {
   					commonByteArray_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion = new byte[1024];
				} else {
   					commonByteArray_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion, 0, length);
			strReturn = new String(commonByteArray_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion) {

        	try {

        		int length = 0;
		
						this.ID = readInteger(dis);
					
					this.PERSONAS_ID = readString(dis);
					
					this.PRIMER_NOMBRE = readString(dis);
					
					this.SEGUNDO_NOMBRE = readString(dis);
					
					this.PRIMER_APELLIDO = readString(dis);
					
					this.SEGUNDO_APELLIDO = readString(dis);
					
					this.NUMERO_DOCUMENTO = readString(dis);
					
						this.TDOCUMENTOS_ID = readInteger(dis);
					
					this.EMAIL = readString(dis);
					
					this.TIPO = readString(dis);
					
						this.EDAD = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion) {

        	try {

        		int length = 0;
		
						this.ID = readInteger(dis);
					
					this.PERSONAS_ID = readString(dis);
					
					this.PRIMER_NOMBRE = readString(dis);
					
					this.SEGUNDO_NOMBRE = readString(dis);
					
					this.PRIMER_APELLIDO = readString(dis);
					
					this.SEGUNDO_APELLIDO = readString(dis);
					
					this.NUMERO_DOCUMENTO = readString(dis);
					
						this.TDOCUMENTOS_ID = readInteger(dis);
					
					this.EMAIL = readString(dis);
					
					this.TIPO = readString(dis);
					
						this.EDAD = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.ID,dos);
					
					// String
				
						writeString(this.PERSONAS_ID,dos);
					
					// String
				
						writeString(this.PRIMER_NOMBRE,dos);
					
					// String
				
						writeString(this.SEGUNDO_NOMBRE,dos);
					
					// String
				
						writeString(this.PRIMER_APELLIDO,dos);
					
					// String
				
						writeString(this.SEGUNDO_APELLIDO,dos);
					
					// String
				
						writeString(this.NUMERO_DOCUMENTO,dos);
					
					// Integer
				
						writeInteger(this.TDOCUMENTOS_ID,dos);
					
					// String
				
						writeString(this.EMAIL,dos);
					
					// String
				
						writeString(this.TIPO,dos);
					
					// Integer
				
						writeInteger(this.EDAD,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.ID,dos);
					
					// String
				
						writeString(this.PERSONAS_ID,dos);
					
					// String
				
						writeString(this.PRIMER_NOMBRE,dos);
					
					// String
				
						writeString(this.SEGUNDO_NOMBRE,dos);
					
					// String
				
						writeString(this.PRIMER_APELLIDO,dos);
					
					// String
				
						writeString(this.SEGUNDO_APELLIDO,dos);
					
					// String
				
						writeString(this.NUMERO_DOCUMENTO,dos);
					
					// Integer
				
						writeInteger(this.TDOCUMENTOS_ID,dos);
					
					// String
				
						writeString(this.EMAIL,dos);
					
					// String
				
						writeString(this.TIPO,dos);
					
					// Integer
				
						writeInteger(this.EDAD,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",PERSONAS_ID="+PERSONAS_ID);
		sb.append(",PRIMER_NOMBRE="+PRIMER_NOMBRE);
		sb.append(",SEGUNDO_NOMBRE="+SEGUNDO_NOMBRE);
		sb.append(",PRIMER_APELLIDO="+PRIMER_APELLIDO);
		sb.append(",SEGUNDO_APELLIDO="+SEGUNDO_APELLIDO);
		sb.append(",NUMERO_DOCUMENTO="+NUMERO_DOCUMENTO);
		sb.append(",TDOCUMENTOS_ID="+String.valueOf(TDOCUMENTOS_ID));
		sb.append(",EMAIL="+EMAIL);
		sb.append(",TIPO="+TIPO);
		sb.append(",EDAD="+String.valueOf(EDAD));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row14Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class after_tOracleInput_7Struct implements routines.system.IPersistableRow<after_tOracleInput_7Struct> {
    final static byte[] commonByteArrayLock_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion = new byte[0];
    static byte[] commonByteArray_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion = new byte[0];

	
			    public Integer ID;

				public Integer getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return true;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return 0;
				}
				public Integer IDPrecision(){
				    return 0;
				}
				public String IDDefault(){
				
					return null;
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public String PERSONAS_ID;

				public String getPERSONAS_ID () {
					return this.PERSONAS_ID;
				}

				public Boolean PERSONAS_IDIsNullable(){
				    return true;
				}
				public Boolean PERSONAS_IDIsKey(){
				    return false;
				}
				public Integer PERSONAS_IDLength(){
				    return 0;
				}
				public Integer PERSONAS_IDPrecision(){
				    return 0;
				}
				public String PERSONAS_IDDefault(){
				
					return null;
				
				}
				public String PERSONAS_IDComment(){
				
				    return "";
				
				}
				public String PERSONAS_IDPattern(){
				
					return "";
				
				}
				public String PERSONAS_IDOriginalDbColumnName(){
				
					return "PERSONAS_ID";
				
				}

				
			    public String PRIMER_NOMBRE;

				public String getPRIMER_NOMBRE () {
					return this.PRIMER_NOMBRE;
				}

				public Boolean PRIMER_NOMBREIsNullable(){
				    return true;
				}
				public Boolean PRIMER_NOMBREIsKey(){
				    return false;
				}
				public Integer PRIMER_NOMBRELength(){
				    return 0;
				}
				public Integer PRIMER_NOMBREPrecision(){
				    return 0;
				}
				public String PRIMER_NOMBREDefault(){
				
					return null;
				
				}
				public String PRIMER_NOMBREComment(){
				
				    return "";
				
				}
				public String PRIMER_NOMBREPattern(){
				
					return "";
				
				}
				public String PRIMER_NOMBREOriginalDbColumnName(){
				
					return "PRIMER_NOMBRE";
				
				}

				
			    public String SEGUNDO_NOMBRE;

				public String getSEGUNDO_NOMBRE () {
					return this.SEGUNDO_NOMBRE;
				}

				public Boolean SEGUNDO_NOMBREIsNullable(){
				    return true;
				}
				public Boolean SEGUNDO_NOMBREIsKey(){
				    return false;
				}
				public Integer SEGUNDO_NOMBRELength(){
				    return 0;
				}
				public Integer SEGUNDO_NOMBREPrecision(){
				    return 0;
				}
				public String SEGUNDO_NOMBREDefault(){
				
					return null;
				
				}
				public String SEGUNDO_NOMBREComment(){
				
				    return "";
				
				}
				public String SEGUNDO_NOMBREPattern(){
				
					return "";
				
				}
				public String SEGUNDO_NOMBREOriginalDbColumnName(){
				
					return "SEGUNDO_NOMBRE";
				
				}

				
			    public String PRIMER_APELLIDO;

				public String getPRIMER_APELLIDO () {
					return this.PRIMER_APELLIDO;
				}

				public Boolean PRIMER_APELLIDOIsNullable(){
				    return true;
				}
				public Boolean PRIMER_APELLIDOIsKey(){
				    return false;
				}
				public Integer PRIMER_APELLIDOLength(){
				    return 0;
				}
				public Integer PRIMER_APELLIDOPrecision(){
				    return 0;
				}
				public String PRIMER_APELLIDODefault(){
				
					return null;
				
				}
				public String PRIMER_APELLIDOComment(){
				
				    return "";
				
				}
				public String PRIMER_APELLIDOPattern(){
				
					return "";
				
				}
				public String PRIMER_APELLIDOOriginalDbColumnName(){
				
					return "PRIMER_APELLIDO";
				
				}

				
			    public String SEGUNDO_APELLIDO;

				public String getSEGUNDO_APELLIDO () {
					return this.SEGUNDO_APELLIDO;
				}

				public Boolean SEGUNDO_APELLIDOIsNullable(){
				    return true;
				}
				public Boolean SEGUNDO_APELLIDOIsKey(){
				    return false;
				}
				public Integer SEGUNDO_APELLIDOLength(){
				    return 0;
				}
				public Integer SEGUNDO_APELLIDOPrecision(){
				    return 0;
				}
				public String SEGUNDO_APELLIDODefault(){
				
					return null;
				
				}
				public String SEGUNDO_APELLIDOComment(){
				
				    return "";
				
				}
				public String SEGUNDO_APELLIDOPattern(){
				
					return "";
				
				}
				public String SEGUNDO_APELLIDOOriginalDbColumnName(){
				
					return "SEGUNDO_APELLIDO";
				
				}

				
			    public String NUMERO_DOCUMENTO;

				public String getNUMERO_DOCUMENTO () {
					return this.NUMERO_DOCUMENTO;
				}

				public Boolean NUMERO_DOCUMENTOIsNullable(){
				    return true;
				}
				public Boolean NUMERO_DOCUMENTOIsKey(){
				    return false;
				}
				public Integer NUMERO_DOCUMENTOLength(){
				    return 0;
				}
				public Integer NUMERO_DOCUMENTOPrecision(){
				    return 0;
				}
				public String NUMERO_DOCUMENTODefault(){
				
					return null;
				
				}
				public String NUMERO_DOCUMENTOComment(){
				
				    return "";
				
				}
				public String NUMERO_DOCUMENTOPattern(){
				
					return "";
				
				}
				public String NUMERO_DOCUMENTOOriginalDbColumnName(){
				
					return "NUMERO_DOCUMENTO";
				
				}

				
			    public Integer TDOCUMENTOS_ID;

				public Integer getTDOCUMENTOS_ID () {
					return this.TDOCUMENTOS_ID;
				}

				public Boolean TDOCUMENTOS_IDIsNullable(){
				    return true;
				}
				public Boolean TDOCUMENTOS_IDIsKey(){
				    return false;
				}
				public Integer TDOCUMENTOS_IDLength(){
				    return 0;
				}
				public Integer TDOCUMENTOS_IDPrecision(){
				    return 0;
				}
				public String TDOCUMENTOS_IDDefault(){
				
					return null;
				
				}
				public String TDOCUMENTOS_IDComment(){
				
				    return "";
				
				}
				public String TDOCUMENTOS_IDPattern(){
				
					return "";
				
				}
				public String TDOCUMENTOS_IDOriginalDbColumnName(){
				
					return "TDOCUMENTOS_ID";
				
				}

				
			    public String EMAIL;

				public String getEMAIL () {
					return this.EMAIL;
				}

				public Boolean EMAILIsNullable(){
				    return true;
				}
				public Boolean EMAILIsKey(){
				    return false;
				}
				public Integer EMAILLength(){
				    return 0;
				}
				public Integer EMAILPrecision(){
				    return 0;
				}
				public String EMAILDefault(){
				
					return null;
				
				}
				public String EMAILComment(){
				
				    return "";
				
				}
				public String EMAILPattern(){
				
					return "";
				
				}
				public String EMAILOriginalDbColumnName(){
				
					return "EMAIL";
				
				}

				
			    public String TIPO;

				public String getTIPO () {
					return this.TIPO;
				}

				public Boolean TIPOIsNullable(){
				    return true;
				}
				public Boolean TIPOIsKey(){
				    return false;
				}
				public Integer TIPOLength(){
				    return null;
				}
				public Integer TIPOPrecision(){
				    return null;
				}
				public String TIPODefault(){
				
					return null;
				
				}
				public String TIPOComment(){
				
				    return "";
				
				}
				public String TIPOPattern(){
				
					return "";
				
				}
				public String TIPOOriginalDbColumnName(){
				
					return "TIPO";
				
				}

				
			    public Integer EDAD;

				public Integer getEDAD () {
					return this.EDAD;
				}

				public Boolean EDADIsNullable(){
				    return true;
				}
				public Boolean EDADIsKey(){
				    return false;
				}
				public Integer EDADLength(){
				    return null;
				}
				public Integer EDADPrecision(){
				    return null;
				}
				public String EDADDefault(){
				
					return null;
				
				}
				public String EDADComment(){
				
				    return "";
				
				}
				public String EDADPattern(){
				
					return "";
				
				}
				public String EDADOriginalDbColumnName(){
				
					return "EDAD";
				
				}

				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion.length) {
				if(length < 1024 && commonByteArray_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion.length == 0) {
   					commonByteArray_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion = new byte[1024];
				} else {
   					commonByteArray_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion, 0, length);
			strReturn = new String(commonByteArray_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion.length) {
				if(length < 1024 && commonByteArray_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion.length == 0) {
   					commonByteArray_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion = new byte[1024];
				} else {
   					commonByteArray_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion, 0, length);
			strReturn = new String(commonByteArray_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion) {

        	try {

        		int length = 0;
		
						this.ID = readInteger(dis);
					
					this.PERSONAS_ID = readString(dis);
					
					this.PRIMER_NOMBRE = readString(dis);
					
					this.SEGUNDO_NOMBRE = readString(dis);
					
					this.PRIMER_APELLIDO = readString(dis);
					
					this.SEGUNDO_APELLIDO = readString(dis);
					
					this.NUMERO_DOCUMENTO = readString(dis);
					
						this.TDOCUMENTOS_ID = readInteger(dis);
					
					this.EMAIL = readString(dis);
					
					this.TIPO = readString(dis);
					
						this.EDAD = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion) {

        	try {

        		int length = 0;
		
						this.ID = readInteger(dis);
					
					this.PERSONAS_ID = readString(dis);
					
					this.PRIMER_NOMBRE = readString(dis);
					
					this.SEGUNDO_NOMBRE = readString(dis);
					
					this.PRIMER_APELLIDO = readString(dis);
					
					this.SEGUNDO_APELLIDO = readString(dis);
					
					this.NUMERO_DOCUMENTO = readString(dis);
					
						this.TDOCUMENTOS_ID = readInteger(dis);
					
					this.EMAIL = readString(dis);
					
					this.TIPO = readString(dis);
					
						this.EDAD = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.ID,dos);
					
					// String
				
						writeString(this.PERSONAS_ID,dos);
					
					// String
				
						writeString(this.PRIMER_NOMBRE,dos);
					
					// String
				
						writeString(this.SEGUNDO_NOMBRE,dos);
					
					// String
				
						writeString(this.PRIMER_APELLIDO,dos);
					
					// String
				
						writeString(this.SEGUNDO_APELLIDO,dos);
					
					// String
				
						writeString(this.NUMERO_DOCUMENTO,dos);
					
					// Integer
				
						writeInteger(this.TDOCUMENTOS_ID,dos);
					
					// String
				
						writeString(this.EMAIL,dos);
					
					// String
				
						writeString(this.TIPO,dos);
					
					// Integer
				
						writeInteger(this.EDAD,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.ID,dos);
					
					// String
				
						writeString(this.PERSONAS_ID,dos);
					
					// String
				
						writeString(this.PRIMER_NOMBRE,dos);
					
					// String
				
						writeString(this.SEGUNDO_NOMBRE,dos);
					
					// String
				
						writeString(this.PRIMER_APELLIDO,dos);
					
					// String
				
						writeString(this.SEGUNDO_APELLIDO,dos);
					
					// String
				
						writeString(this.NUMERO_DOCUMENTO,dos);
					
					// Integer
				
						writeInteger(this.TDOCUMENTOS_ID,dos);
					
					// String
				
						writeString(this.EMAIL,dos);
					
					// String
				
						writeString(this.TIPO,dos);
					
					// Integer
				
						writeInteger(this.EDAD,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",PERSONAS_ID="+PERSONAS_ID);
		sb.append(",PRIMER_NOMBRE="+PRIMER_NOMBRE);
		sb.append(",SEGUNDO_NOMBRE="+SEGUNDO_NOMBRE);
		sb.append(",PRIMER_APELLIDO="+PRIMER_APELLIDO);
		sb.append(",SEGUNDO_APELLIDO="+SEGUNDO_APELLIDO);
		sb.append(",NUMERO_DOCUMENTO="+NUMERO_DOCUMENTO);
		sb.append(",TDOCUMENTOS_ID="+String.valueOf(TDOCUMENTOS_ID));
		sb.append(",EMAIL="+EMAIL);
		sb.append(",TIPO="+TIPO);
		sb.append(",EDAD="+String.valueOf(EDAD));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(after_tOracleInput_7Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_7Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_7_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;


		tHashInput_1Process(globalMap);
		tHashInput_2Process(globalMap);
		tHashInput_3Process(globalMap);
		tHashInput_5Process(globalMap);

		row14Struct row14 = new row14Struct();
out3Struct out3 = new out3Struct();
salidaMultiafiliacionStruct salidaMultiafiliacion = new salidaMultiafiliacionStruct();
salidaMultiCorreoStruct salidaMultiCorreo = new salidaMultiCorreoStruct();
row13Struct row13 = new row13Struct();
row13Struct row15 = row13;
row16Struct row16 = new row16Struct();
salidaMultiSinCorreoStruct salidaMultiSinCorreo = new salidaMultiSinCorreoStruct();
row18Struct row18 = new row18Struct();
salidaArchivoStruct salidaArchivo = new salidaArchivoStruct();
salidaReporteMultiAfiStruct salidaReporteMultiAfi = new salidaReporteMultiAfiStruct();
salidaMultiCorreoTitularesStruct salidaMultiCorreoTitulares = new salidaMultiCorreoTitularesStruct();
row7Struct row7 = new row7Struct();










	
	/**
	 * [tOracleSP_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleSP_3", false);
		start_Hash.put("tOracleSP_3", System.currentTimeMillis());
		
	
	currentComponent="tOracleSP_3";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row16");
					}
				
		int tos_count_tOracleSP_3 = 0;
		

	java.sql.Connection connection_tOracleSP_3 = null;
	connection_tOracleSP_3 = (java.sql.Connection) globalMap.get("conn_tOracleConnection_1");
	

java.sql.CallableStatement statement_tOracleSP_3 = connection_tOracleSP_3.prepareCall("{call " + "EXD.InsCruceArchivoMultiafiliacion" + "(?,?,?,?)}");

java.sql.Timestamp tmpDate_tOracleSP_3;
String tmpString_tOracleSP_3;

 



/**
 * [tOracleSP_3 begin ] stop
 */



	
	/**
	 * [tJavaRow_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaRow_4", false);
		start_Hash.put("tJavaRow_4", System.currentTimeMillis());
		
	
	currentComponent="tJavaRow_4";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row15");
					}
				
		int tos_count_tJavaRow_4 = 0;
		

int nb_line_tJavaRow_4 = 0;

 



/**
 * [tJavaRow_4 begin ] stop
 */



	
	/**
	 * [tSendMail_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tSendMail_2", false);
		start_Hash.put("tSendMail_2", System.currentTimeMillis());
		
	
	currentComponent="tSendMail_2";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row13");
					}
				
		int tos_count_tSendMail_2 = 0;
		

 



/**
 * [tSendMail_2 begin ] stop
 */



	
	/**
	 * [tHttpRequest_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tHttpRequest_2", false);
		start_Hash.put("tHttpRequest_2", System.currentTimeMillis());
		
	
	currentComponent="tHttpRequest_2";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"salidaMultiCorreo");
					}
				
		int tos_count_tHttpRequest_2 = 0;
		

 



/**
 * [tHttpRequest_2 begin ] stop
 */





	
	/**
	 * [tOracleSP_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleSP_4", false);
		start_Hash.put("tOracleSP_4", System.currentTimeMillis());
		
	
	currentComponent="tOracleSP_4";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row18");
					}
				
		int tos_count_tOracleSP_4 = 0;
		

	java.sql.Connection connection_tOracleSP_4 = null;
	connection_tOracleSP_4 = (java.sql.Connection) globalMap.get("conn_tOracleConnection_1");
	

java.sql.CallableStatement statement_tOracleSP_4 = connection_tOracleSP_4.prepareCall("{call " + "EXD.InsCruceArchivoMultiafiliacion" + "(?,?,?,?)}");

java.sql.Timestamp tmpDate_tOracleSP_4;
String tmpString_tOracleSP_4;

 



/**
 * [tOracleSP_4 begin ] stop
 */



	
	/**
	 * [tJavaRow_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaRow_5", false);
		start_Hash.put("tJavaRow_5", System.currentTimeMillis());
		
	
	currentComponent="tJavaRow_5";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"salidaMultiSinCorreo");
					}
				
		int tos_count_tJavaRow_5 = 0;
		

int nb_line_tJavaRow_5 = 0;

 



/**
 * [tJavaRow_5 begin ] stop
 */





	
	/**
	 * [tFileOutputDelimited_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputDelimited_1", false);
		start_Hash.put("tFileOutputDelimited_1", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputDelimited_1";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"salidaReporteMultiAfi");
					}
				
		int tos_count_tFileOutputDelimited_1 = 0;
		

String fileName_tFileOutputDelimited_1 = "";
    fileName_tFileOutputDelimited_1 = (new java.io.File(context.fileSystem_Path+"/"+context.fileSystem_Area+"/"+context.archivoSalida+".CSV")).getAbsolutePath().replace("\\","/");
    String fullName_tFileOutputDelimited_1 = null;
    String extension_tFileOutputDelimited_1 = null;
    String directory_tFileOutputDelimited_1 = null;
    if((fileName_tFileOutputDelimited_1.indexOf("/") != -1)) {
        if(fileName_tFileOutputDelimited_1.lastIndexOf(".") < fileName_tFileOutputDelimited_1.lastIndexOf("/")) {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
            extension_tFileOutputDelimited_1 = "";
        } else {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0, fileName_tFileOutputDelimited_1.lastIndexOf("."));
            extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(fileName_tFileOutputDelimited_1.lastIndexOf("."));
        }
        directory_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0, fileName_tFileOutputDelimited_1.lastIndexOf("/"));
    } else {
        if(fileName_tFileOutputDelimited_1.lastIndexOf(".") != -1) {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0, fileName_tFileOutputDelimited_1.lastIndexOf("."));
            extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(fileName_tFileOutputDelimited_1.lastIndexOf("."));
        } else {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
            extension_tFileOutputDelimited_1 = "";
        }
        directory_tFileOutputDelimited_1 = "";
    }
    boolean isFileGenerated_tFileOutputDelimited_1 = true;
    java.io.File filetFileOutputDelimited_1 = new java.io.File(fileName_tFileOutputDelimited_1);
    globalMap.put("tFileOutputDelimited_1_FILE_NAME",fileName_tFileOutputDelimited_1);
        if(filetFileOutputDelimited_1.exists()){
            isFileGenerated_tFileOutputDelimited_1 = false;
        }
            int nb_line_tFileOutputDelimited_1 = 0;
            int splitedFileNo_tFileOutputDelimited_1 = 0;
            int currentRow_tFileOutputDelimited_1 = 0;

            final String OUT_DELIM_tFileOutputDelimited_1 = /** Start field tFileOutputDelimited_1:FIELDSEPARATOR */";"/** End field tFileOutputDelimited_1:FIELDSEPARATOR */;

            final String OUT_DELIM_ROWSEP_tFileOutputDelimited_1 = /** Start field tFileOutputDelimited_1:ROWSEPARATOR */"\n"/** End field tFileOutputDelimited_1:ROWSEPARATOR */;

                    //create directory only if not exists
                    if(directory_tFileOutputDelimited_1 != null && directory_tFileOutputDelimited_1.trim().length() != 0) {
                        java.io.File dir_tFileOutputDelimited_1 = new java.io.File(directory_tFileOutputDelimited_1);
                        if(!dir_tFileOutputDelimited_1.exists()) {
                            dir_tFileOutputDelimited_1.mkdirs();
                        }
                    }

                        //routines.system.Row
                        java.io.Writer outtFileOutputDelimited_1 = null;

                        outtFileOutputDelimited_1 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
                        new java.io.FileOutputStream(fileName_tFileOutputDelimited_1, true),"ISO-8859-15"));
                resourceMap.put("out_tFileOutputDelimited_1", outtFileOutputDelimited_1);
                                    if(filetFileOutputDelimited_1.length()==0){
                                        outtFileOutputDelimited_1.write("TIPO_DOCUMENTO");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("NUMERO_DOCUMENTO");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("PRIMER_NOMBRE");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("SEGUNDO_NOMBRE");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("PRIMER_APELLIDO");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("SEGUNDO_APELLIDO");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("EPS_NOMBRE");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("TIPO_EPS");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("NOTIFICACION");
                                        outtFileOutputDelimited_1.write(OUT_DELIM_ROWSEP_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.flush();
                                    }


resourceMap.put("nb_line_tFileOutputDelimited_1", nb_line_tFileOutputDelimited_1);

 



/**
 * [tFileOutputDelimited_1 begin ] stop
 */



	
	/**
	 * [tMap_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_1", false);
		start_Hash.put("tMap_1", System.currentTimeMillis());
		
	
	currentComponent="tMap_1";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"salidaArchivo");
					}
				
		int tos_count_tMap_1 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row4Struct> tHash_Lookup_row4 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row4Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row4Struct>) 
					globalMap.get( "tHash_Lookup_row4" ))
					;					
					
	

row4Struct row4HashKey = new row4Struct();
row4Struct row4Default = new row4Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_1__Struct  {
}
Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
// ###############################

// ###############################
// # Outputs initialization
salidaReporteMultiAfiStruct salidaReporteMultiAfi_tmp = new salidaReporteMultiAfiStruct();
// ###############################

        
        



        









 



/**
 * [tMap_1 begin ] stop
 */





	
	/**
	 * [tSendMail_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tSendMail_1", false);
		start_Hash.put("tSendMail_1", System.currentTimeMillis());
		
	
	currentComponent="tSendMail_1";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row7");
					}
				
		int tos_count_tSendMail_1 = 0;
		

 



/**
 * [tSendMail_1 begin ] stop
 */



	
	/**
	 * [tHttpRequest_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tHttpRequest_1", false);
		start_Hash.put("tHttpRequest_1", System.currentTimeMillis());
		
	
	currentComponent="tHttpRequest_1";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"salidaMultiCorreoTitulares");
					}
				
		int tos_count_tHttpRequest_1 = 0;
		

 



/**
 * [tHttpRequest_1 begin ] stop
 */



	
	/**
	 * [tMap_7 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_7", false);
		start_Hash.put("tMap_7", System.currentTimeMillis());
		
	
	currentComponent="tMap_7";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"salidaMultiafiliacion");
					}
				
		int tos_count_tMap_7 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row2Struct> tHash_Lookup_row2 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row2Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row2Struct>) 
					globalMap.get( "tHash_Lookup_row2" ))
					;					
					
	

row2Struct row2HashKey = new row2Struct();
row2Struct row2Default = new row2Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_7__Struct  {
}
Var__tMap_7__Struct Var__tMap_7 = new Var__tMap_7__Struct();
// ###############################

// ###############################
// # Outputs initialization
salidaMultiCorreoStruct salidaMultiCorreo_tmp = new salidaMultiCorreoStruct();
salidaMultiSinCorreoStruct salidaMultiSinCorreo_tmp = new salidaMultiSinCorreoStruct();
salidaArchivoStruct salidaArchivo_tmp = new salidaArchivoStruct();
salidaMultiCorreoTitularesStruct salidaMultiCorreoTitulares_tmp = new salidaMultiCorreoTitularesStruct();
// ###############################

        
        



        









 



/**
 * [tMap_7 begin ] stop
 */



	
	/**
	 * [tMap_6 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_6", false);
		start_Hash.put("tMap_6", System.currentTimeMillis());
		
	
	currentComponent="tMap_6";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"out3");
					}
				
		int tos_count_tMap_6 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row17Struct> tHash_Lookup_row17 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row17Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row17Struct>) 
					globalMap.get( "tHash_Lookup_row17" ))
					;					
					
	

row17Struct row17HashKey = new row17Struct();
row17Struct row17Default = new row17Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_6__Struct  {
	String salidaArchivo;
}
Var__tMap_6__Struct Var__tMap_6 = new Var__tMap_6__Struct();
// ###############################

// ###############################
// # Outputs initialization
salidaMultiafiliacionStruct salidaMultiafiliacion_tmp = new salidaMultiafiliacionStruct();
// ###############################

        
        



        









 



/**
 * [tMap_6 begin ] stop
 */



	
	/**
	 * [tMap_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_4", false);
		start_Hash.put("tMap_4", System.currentTimeMillis());
		
	
	currentComponent="tMap_4";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row14");
					}
				
		int tos_count_tMap_4 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row20Struct> tHash_Lookup_row20 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row20Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row20Struct>) 
					globalMap.get( "tHash_Lookup_row20" ))
					;					
					
	

row20Struct row20HashKey = new row20Struct();
row20Struct row20Default = new row20Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_4__Struct  {
}
Var__tMap_4__Struct Var__tMap_4 = new Var__tMap_4__Struct();
// ###############################

// ###############################
// # Outputs initialization
out3Struct out3_tmp = new out3Struct();
// ###############################

        
        



        









 



/**
 * [tMap_4 begin ] stop
 */



	
	/**
	 * [tOracleInput_7 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_7", false);
		start_Hash.put("tOracleInput_7", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_7";
	
	
		int tos_count_tOracleInput_7 = 0;
		
	


	
		    int nb_line_tOracleInput_7 = 0;
		    java.sql.Connection conn_tOracleInput_7 = null;
				conn_tOracleInput_7 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");
				
                boolean isTimeZoneNull_tOracleInput_7 = false;
				boolean isConnectionWrapped_tOracleInput_7 = !(conn_tOracleInput_7 instanceof oracle.jdbc.OracleConnection) && conn_tOracleInput_7.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tOracleInput_7 = null;
                if (isConnectionWrapped_tOracleInput_7) {
					unwrappedOraConn_tOracleInput_7 = conn_tOracleInput_7.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tOracleInput_7 != null) {
                        isTimeZoneNull_tOracleInput_7 = (unwrappedOraConn_tOracleInput_7.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tOracleInput_7 = (((oracle.jdbc.OracleConnection)conn_tOracleInput_7).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tOracleInput_7) {
					java.sql.Statement stmtGetTZ_tOracleInput_7 = conn_tOracleInput_7.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_7 = stmtGetTZ_tOracleInput_7.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_7 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tOracleInput_7.next()) {
						sessionTimezone_tOracleInput_7 = rsGetTZ_tOracleInput_7.getString(1);
					}
					if (isConnectionWrapped_tOracleInput_7 && unwrappedOraConn_tOracleInput_7 != null) {
                        unwrappedOraConn_tOracleInput_7.setSessionTimeZone(sessionTimezone_tOracleInput_7);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_7).setSessionTimeZone(sessionTimezone_tOracleInput_7);
                    }
				}
			
		    
			java.sql.Statement stmt_tOracleInput_7 = conn_tOracleInput_7.createStatement(java.sql.ResultSet.TYPE_FORWARD_ONLY,
																					java.sql.ResultSet.CONCUR_READ_ONLY);
			
                stmt_tOracleInput_7.setFetchSize(100000);


		    String dbquery_tOracleInput_7 = "SELECT\n  DISTINCT GA.ID,\n  GA.PERSONAS_ID,\n  GP.PRIMER_NOMBRE,\n  GP.SEGUNDO_NOMBRE,\n  GP.PRIMER_APELLIDO,\n  GP.SE"
+"GUNDO_APELLIDO,\n  GP.DOCUMENTO AS NUMERO_DOCUMENTO,\n  GP.TDOCUMENTOS_ID, \n  CASE \n    WHEN TRUNC(MONTHS_BETWEEN(SYSD"
+"ATE,GP.FECHA_NACIMIENTO)/12) >= 18 THEN GP.EMAIL\n    ELSE GP2.EMAIL\n  END AS EMAIL,\n  ATA.SIGLA AS TIPO,\n  TRUNC(MON"
+"THS_BETWEEN(SYSDATE,GP.FECHA_NACIMIENTO)/12) AS EDAD\nFROM\n  SALUDSIS.GEN_AFILIADOS GA \n  INNER JOIN GEN_PERSONAS GP O"
+"N GA.PERSONAS_ID = GP.ID\n  LEFT JOIN GEN_AFILIADOS GA2 ON GA2.ID = GA.PADRE_ID \n  LEFT JOIN GEN_PERSONAS GP2 ON GP2.ID"
+" = GA2.PERSONAS_ID \n  INNER JOIN AFI_PLANAFILIACIONES APA ON GA.PLANAFILIACIONES_ID = APA.ID\n  INNER JOIN AFI_TAFILIAD"
+"OS ATA ON ATA.ID = APA.TAFILIADOS_ID \nWHERE	\n(GA.ESTAFILIACION='Activo' OR GA.ESTAFILIACION='Provisional') AND \n	GA.E"
+"STREGISTRO_ID=1 AND\n	GP.ESTREGISTRO_ID=1"
/*OFFSET "+context.auxPosicionRegistros+" ROWS FETCH NEXT "+context.auxAumentoRegistros+" ROWS ONLY*/;
		    

		    globalMap.put("tOracleInput_7_QUERY",dbquery_tOracleInput_7);

		    java.sql.ResultSet rs_tOracleInput_7 = null;

		    try {
		    	rs_tOracleInput_7 = stmt_tOracleInput_7.executeQuery(dbquery_tOracleInput_7);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_7 = rs_tOracleInput_7.getMetaData();
		    	int colQtyInRs_tOracleInput_7 = rsmd_tOracleInput_7.getColumnCount();

		    String tmpContent_tOracleInput_7 = null;
		    
		    
		    while (rs_tOracleInput_7.next()) {
		        nb_line_tOracleInput_7++;
		        
							if(colQtyInRs_tOracleInput_7 < 1) {
								row14.ID = null;
							} else {
		                          
					if(rs_tOracleInput_7.getObject(1) != null) {
						row14.ID = rs_tOracleInput_7.getInt(1);
					} else {
				
						row14.ID = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_7 < 2) {
								row14.PERSONAS_ID = null;
							} else {
	                         		
        	row14.PERSONAS_ID = routines.system.JDBCUtil.getString(rs_tOracleInput_7, 2, false);
		                    }
							if(colQtyInRs_tOracleInput_7 < 3) {
								row14.PRIMER_NOMBRE = null;
							} else {
	                         		
        	row14.PRIMER_NOMBRE = routines.system.JDBCUtil.getString(rs_tOracleInput_7, 3, false);
		                    }
							if(colQtyInRs_tOracleInput_7 < 4) {
								row14.SEGUNDO_NOMBRE = null;
							} else {
	                         		
        	row14.SEGUNDO_NOMBRE = routines.system.JDBCUtil.getString(rs_tOracleInput_7, 4, false);
		                    }
							if(colQtyInRs_tOracleInput_7 < 5) {
								row14.PRIMER_APELLIDO = null;
							} else {
	                         		
        	row14.PRIMER_APELLIDO = routines.system.JDBCUtil.getString(rs_tOracleInput_7, 5, false);
		                    }
							if(colQtyInRs_tOracleInput_7 < 6) {
								row14.SEGUNDO_APELLIDO = null;
							} else {
	                         		
        	row14.SEGUNDO_APELLIDO = routines.system.JDBCUtil.getString(rs_tOracleInput_7, 6, false);
		                    }
							if(colQtyInRs_tOracleInput_7 < 7) {
								row14.NUMERO_DOCUMENTO = null;
							} else {
	                         		
        	row14.NUMERO_DOCUMENTO = routines.system.JDBCUtil.getString(rs_tOracleInput_7, 7, false);
		                    }
							if(colQtyInRs_tOracleInput_7 < 8) {
								row14.TDOCUMENTOS_ID = null;
							} else {
		                          
					if(rs_tOracleInput_7.getObject(8) != null) {
						row14.TDOCUMENTOS_ID = rs_tOracleInput_7.getInt(8);
					} else {
				
						row14.TDOCUMENTOS_ID = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_7 < 9) {
								row14.EMAIL = null;
							} else {
	                         		
        	row14.EMAIL = routines.system.JDBCUtil.getString(rs_tOracleInput_7, 9, false);
		                    }
							if(colQtyInRs_tOracleInput_7 < 10) {
								row14.TIPO = null;
							} else {
	                         		
        	row14.TIPO = routines.system.JDBCUtil.getString(rs_tOracleInput_7, 10, false);
		                    }
							if(colQtyInRs_tOracleInput_7 < 11) {
								row14.EDAD = null;
							} else {
		                          
					if(rs_tOracleInput_7.getObject(11) != null) {
						row14.EDAD = rs_tOracleInput_7.getInt(11);
					} else {
				
						row14.EDAD = null;
					}
		                    }
					




 



/**
 * [tOracleInput_7 begin ] stop
 */
	
	/**
	 * [tOracleInput_7 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_7";
	
	

 


	tos_count_tOracleInput_7++;

/**
 * [tOracleInput_7 main ] stop
 */
	
	/**
	 * [tOracleInput_7 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_7";
	
	

 



/**
 * [tOracleInput_7 process_data_begin ] stop
 */

	
	/**
	 * [tMap_4 main ] start
	 */

	

	
	
	currentComponent="tMap_4";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row14"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_4 = false;
		
						row20Struct row20 = null;
					
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_4 = false;
		boolean mainRowRejected_tMap_4 = false;
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row20" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow20 = false;
       		  	    	
       		  	    	
 							row20Struct row20ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_4) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_4 = false;
								
                        		    		    row20HashKey.ID = row14.TDOCUMENTOS_ID ;
                        		    		

								
		                        	row20HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row20.lookup( row20HashKey );

	  							

	  							

 								
								  
								  if(!tHash_Lookup_row20.hasNext()) { // G_TM_M_090

  								
		  				
	  								
			  							rejectedInnerJoin_tMap_4 = true;
	  								
						
									
  									  		
 								
								  
								  } // G_TM_M_090

  								



							} // G_TM_M_020
			           		  	  
							

							
                    		  	 
							   
                    		  	 
	       		  	    	row20Struct fromLookup_row20 = null;
							row20 = row20Default;
										 
							
								 
							
							
								if (tHash_Lookup_row20 !=null && tHash_Lookup_row20.hasNext()) { // G 099
								
							
								
								fromLookup_row20 = tHash_Lookup_row20.next();

							
							
								} // G 099
							
							

							if(fromLookup_row20 != null) {
								row20 = fromLookup_row20;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_4__Struct Var = Var__tMap_4;// ###############################
        // ###############################
        // # Output tables

out3 = null;

if(!rejectedInnerJoin_tMap_4 ) {

// # Output table : 'out3'
out3_tmp.ID = row14.ID ;
out3_tmp.PERSONAS_ID = row14.PERSONAS_ID ;
out3_tmp.PRIMER_NOMBRE = row14.PRIMER_NOMBRE ;
out3_tmp.SEGUNDO_NOMBRE = row14.SEGUNDO_NOMBRE ;
out3_tmp.PRIMER_APELLIDO = row14.PRIMER_APELLIDO ;
out3_tmp.SEGUNDO_APELLIDO = row14.SEGUNDO_APELLIDO ;
out3_tmp.NUMERO_DOCUMENTO = row14.NUMERO_DOCUMENTO ;
out3_tmp.TIPO_DOCUMENTO = row20.SIGLA;
out3_tmp.EMAIL = row14.EMAIL ;
out3_tmp.TIPO = row14.TIPO ;
out3_tmp.EDAD = row14.EDAD ;
out3 = out3_tmp;
}  // closing inner join bracket (2)
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_4 = false;










 


	tos_count_tMap_4++;

/**
 * [tMap_4 main ] stop
 */
	
	/**
	 * [tMap_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_4";
	
	

 



/**
 * [tMap_4 process_data_begin ] stop
 */
// Start of branch "out3"
if(out3 != null) { 



	
	/**
	 * [tMap_6 main ] start
	 */

	

	
	
	currentComponent="tMap_6";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"out3"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_6 = false;
		
						row17Struct row17 = null;
					
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_6 = false;
		boolean mainRowRejected_tMap_6 = false;
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row17" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow17 = false;
       		  	    	
       		  	    	
 							row17Struct row17ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_6) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_6 = false;
								
                        		    		    row17HashKey.tipoDocumentoAfiliado = out3.TIPO_DOCUMENTO ;
                        		    		
                        		    		    row17HashKey.numeroIdentificacionAfiliado = out3.NUMERO_DOCUMENTO ;
                        		    		
                        		    		    row17HashKey.primerApellidoAfiliado = out3.PRIMER_APELLIDO ;
                        		    		
                        		    		    row17HashKey.primerNombreAfiliado = out3.PRIMER_NOMBRE ;
                        		    		

								
		                        	row17HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row17.lookup( row17HashKey );

	  							

	  							

 								
								  
								  if(!tHash_Lookup_row17.hasNext()) { // G_TM_M_090

  								
		  				
	  								
			  							rejectedInnerJoin_tMap_6 = true;
	  								
						
									
  									  		
 								
								  
								  } // G_TM_M_090

  								



							} // G_TM_M_020
			           		  	  
							

							
                    		  	 
							   
                    		  	 
	       		  	    	row17Struct fromLookup_row17 = null;
							row17 = row17Default;
										 
							
								 
							
							
								if (tHash_Lookup_row17 !=null && tHash_Lookup_row17.hasNext()) { // G 099
								
							
								
								fromLookup_row17 = tHash_Lookup_row17.next();

							
							
								} // G 099
							
							

							if(fromLookup_row17 != null) {
								row17 = fromLookup_row17;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_6__Struct Var = Var__tMap_6;
Var.salidaArchivo = String.valueOf(context.infoIdArchivo) ;// ###############################
        // ###############################
        // # Output tables

salidaMultiafiliacion = null;

if(!rejectedInnerJoin_tMap_6 ) {

// # Output table : 'salidaMultiafiliacion'
// # Filter conditions 
if( 

row17.tipoEntidad01.compareTo('C') == 0 || row17.tipoEntidad01.compareTo('S') == 0

 ) {
salidaMultiafiliacion_tmp.AFILIADO_ID = out3.ID;
salidaMultiafiliacion_tmp.EMAIL = out3.EMAIL ;
salidaMultiafiliacion_tmp.FECHA_AFILIACION = row17.fechaAfiliacionEntidad01;
salidaMultiafiliacion_tmp.ID_ENTIDAD = null;
salidaMultiafiliacion_tmp.CODIGO_ENTIDAD = row17.codigoEntidad01 ;
salidaMultiafiliacion_tmp.SALIDA_ARCHIVO = Var.salidaArchivo +Integer.toString(Numeric.sequence("s1",1,1))  ;
salidaMultiafiliacion_tmp.TIPO_DOCUMENTO = out3.TIPO_DOCUMENTO ;
salidaMultiafiliacion_tmp.NUMERO_DOCUMENTO = out3.NUMERO_DOCUMENTO ;
salidaMultiafiliacion_tmp.PRIMER_NOMBRE = out3.PRIMER_NOMBRE ;
salidaMultiafiliacion_tmp.SEGUNDO_NOMBRE = out3.SEGUNDO_NOMBRE ;
salidaMultiafiliacion_tmp.PRIMER_APELLIDO = out3.PRIMER_APELLIDO ;
salidaMultiafiliacion_tmp.SEGUNDO_APELLIDO = out3.SEGUNDO_APELLIDO ;
salidaMultiafiliacion_tmp.EPS_NOMBRE = null;
salidaMultiafiliacion_tmp.TEPS_ID = null;
salidaMultiafiliacion_tmp.TIPO = out3.TIPO ;
salidaMultiafiliacion_tmp.EDAD = out3.EDAD ;
salidaMultiafiliacion = salidaMultiafiliacion_tmp;
} // closing filter/reject
}  // closing inner join bracket (2)
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_6 = false;










 


	tos_count_tMap_6++;

/**
 * [tMap_6 main ] stop
 */
	
	/**
	 * [tMap_6 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_6";
	
	

 



/**
 * [tMap_6 process_data_begin ] stop
 */
// Start of branch "salidaMultiafiliacion"
if(salidaMultiafiliacion != null) { 



	
	/**
	 * [tMap_7 main ] start
	 */

	

	
	
	currentComponent="tMap_7";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"salidaMultiafiliacion"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_7 = false;
		
						row2Struct row2 = null;
					
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_7 = false;
		boolean mainRowRejected_tMap_7 = false;
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row2" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow2 = false;
       		  	    	
       		  	    	
 							row2Struct row2ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_7) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_7 = false;
								
                        		    		    row2HashKey.CODIGO = salidaMultiafiliacion.CODIGO_ENTIDAD ;
                        		    		

								
		                        	row2HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row2.lookup( row2HashKey );

	  							

	  							

 								
								  
								  if(!tHash_Lookup_row2.hasNext()) { // G_TM_M_090

  								
		  				
	  								
			  							rejectedInnerJoin_tMap_7 = true;
	  								
						
									
  									  		
 								
								  
								  } // G_TM_M_090

  								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row2 != null && tHash_Lookup_row2.getCount(row2HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row2' and it contains more one result from keys :  row2.CODIGO = '" + row2HashKey.CODIGO + "'");
								} // G 071
							

							
                    		  	 
							   
                    		  	 
	       		  	    	row2Struct fromLookup_row2 = null;
							row2 = row2Default;
										 
							
								 
							
							
								if (tHash_Lookup_row2 !=null && tHash_Lookup_row2.hasNext()) { // G 099
								
							
								
								fromLookup_row2 = tHash_Lookup_row2.next();

							
							
								} // G 099
							
							

							if(fromLookup_row2 != null) {
								row2 = fromLookup_row2;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_7__Struct Var = Var__tMap_7;// ###############################
        // ###############################
        // # Output tables

salidaMultiCorreo = null;
salidaMultiSinCorreo = null;
salidaArchivo = null;
salidaMultiCorreoTitulares = null;

if(!rejectedInnerJoin_tMap_7 ) {

// # Output table : 'salidaMultiCorreo'
// # Filter conditions 
if( 

StringHandling.LEN(salidaMultiafiliacion.EMAIL)>0 && salidaMultiafiliacion.TIPO.equals("B")

 ) {
salidaMultiCorreo_tmp.AFILIADO_ID = salidaMultiafiliacion.AFILIADO_ID ;
salidaMultiCorreo_tmp.EMAIL = salidaMultiafiliacion.EMAIL ;
salidaMultiCorreo_tmp.FECHA_AFILIACION = salidaMultiafiliacion.FECHA_AFILIACION ;
salidaMultiCorreo_tmp.ID_ENTIDAD = row2.ID ;
salidaMultiCorreo_tmp.CODIGO_ENTIDAD = row2.CODIGO ;
salidaMultiCorreo_tmp.SALIDA_ARCHIVO = salidaMultiafiliacion.SALIDA_ARCHIVO ;
salidaMultiCorreo = salidaMultiCorreo_tmp;
} // closing filter/reject

// # Output table : 'salidaMultiSinCorreo'
// # Filter conditions 
if( 

StringHandling.LEN(salidaMultiafiliacion.EMAIL)<=0 && salidaMultiafiliacion.TIPO.equals("B")

 ) {
salidaMultiSinCorreo_tmp.AFILIADO_ID = salidaMultiafiliacion.AFILIADO_ID ;
salidaMultiSinCorreo_tmp.EMAIL = salidaMultiafiliacion.EMAIL ;
salidaMultiSinCorreo_tmp.FECHA_AFILIACION = salidaMultiafiliacion.FECHA_AFILIACION ;
salidaMultiSinCorreo_tmp.ID_ENTIDAD = row2.ID;
salidaMultiSinCorreo_tmp.CODIGO_ENTIDAD = row2.CODIGO ;
salidaMultiSinCorreo_tmp.SALIDA_ARCHIVO = salidaMultiafiliacion.SALIDA_ARCHIVO ;
salidaMultiSinCorreo_tmp.NOTIFICACION = StringHandling.LEN(salidaMultiafiliacion.EMAIL)>0?"SI":"NO" ;
salidaMultiSinCorreo = salidaMultiSinCorreo_tmp;
} // closing filter/reject

// # Output table : 'salidaArchivo'
salidaArchivo_tmp.AFILIADO_ID = salidaMultiafiliacion.AFILIADO_ID ;
salidaArchivo_tmp.EMAIL = salidaMultiafiliacion.EMAIL ;
salidaArchivo_tmp.FECHA_AFILIACION = salidaMultiafiliacion.FECHA_AFILIACION ;
salidaArchivo_tmp.ID_ENTIDAD = row2.ID ;
salidaArchivo_tmp.CODIGO_ENTIDAD = row2.CODIGO ;
salidaArchivo_tmp.SALIDA_ARCHIVO = salidaMultiafiliacion.SALIDA_ARCHIVO ;
salidaArchivo_tmp.TIPO_DOCUMENTO = salidaMultiafiliacion.TIPO_DOCUMENTO ;
salidaArchivo_tmp.NUMERO_DOCUMENTO = salidaMultiafiliacion.NUMERO_DOCUMENTO ;
salidaArchivo_tmp.PRIMER_NOMBRE = salidaMultiafiliacion.PRIMER_NOMBRE ;
salidaArchivo_tmp.SEGUNDO_NOMBRE = salidaMultiafiliacion.SEGUNDO_NOMBRE ;
salidaArchivo_tmp.PRIMER_APELLIDO = salidaMultiafiliacion.PRIMER_APELLIDO ;
salidaArchivo_tmp.SEGUNDO_APELLIDO = salidaMultiafiliacion.SEGUNDO_APELLIDO ;
salidaArchivo_tmp.EPS_NOMBRE = row2.DESCRIPCION ;
salidaArchivo_tmp.TEPS_ID = row2.TEPS_ID ;
salidaArchivo = salidaArchivo_tmp;

// # Output table : 'salidaMultiCorreoTitulares'
// # Filter conditions 
if( 

StringHandling.LEN(salidaMultiafiliacion.EMAIL)>0 && salidaMultiafiliacion.TIPO.equals("T")

 ) {
salidaMultiCorreoTitulares_tmp.AFILIADO_ID = salidaMultiafiliacion.AFILIADO_ID ;
salidaMultiCorreoTitulares_tmp.EMAIL = salidaMultiafiliacion.EMAIL ;
salidaMultiCorreoTitulares_tmp.FECHA_AFILIACION = salidaMultiafiliacion.FECHA_AFILIACION ;
salidaMultiCorreoTitulares_tmp.ID_ENTIDAD = row2.ID ;
salidaMultiCorreoTitulares_tmp.CODIGO_ENTIDAD = row2.CODIGO ;
salidaMultiCorreoTitulares_tmp.SALIDA_ARCHIVO = salidaMultiafiliacion.SALIDA_ARCHIVO ;
salidaMultiCorreoTitulares = salidaMultiCorreoTitulares_tmp;
} // closing filter/reject
}  // closing inner join bracket (2)
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_7 = false;










 


	tos_count_tMap_7++;

/**
 * [tMap_7 main ] stop
 */
	
	/**
	 * [tMap_7 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_7";
	
	

 



/**
 * [tMap_7 process_data_begin ] stop
 */
// Start of branch "salidaMultiCorreo"
if(salidaMultiCorreo != null) { 



	
	/**
	 * [tHttpRequest_2 main ] start
	 */

	

	
	
	currentComponent="tHttpRequest_2";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"salidaMultiCorreo"
						
						);
					}
					


int connectTimeOut_tHttpRequest_2 = Integer.valueOf(30)*1000;
int readTimeOut_tHttpRequest_2 = Integer.valueOf(0)*1000;

java.net.URL url_tHttpRequest_2 = new java.net.URL(context.JasperServer+"/jasperserver-pro/flow.html?_flowId=viewReportFlow&standAlone=true&_flowId=viewReportFlow&ParentFolderUri=%2F"+context.JasperAmbiente+"%2FAFILIACION&reportUnit=%2F"+context.JasperAmbiente+"%2FAFILIACION%2FNotificacion&j_username="+context.JasperUser+"&j_password="+context.JasperPassword+"&afiliadoid="+ salidaMultiCorreo.AFILIADO_ID +"&Usuario=Sistema&Consecutivo="+ salidaMultiCorreo.SALIDA_ARCHIVO +"&COD_EPS="+ salidaMultiCorreo.CODIGO_ENTIDAD +"&Fechageneracion="+ TalendDate.formatDate("dd/MM/yyyy",TalendDate.getCurrentDate()) +"&output=pdf");

java.net.HttpURLConnection urlConn_tHttpRequest_2 = null;

if ("local".equals(System.getProperty("http.proxySet"))) {
    java.net.Proxy proxyToUse = org.talend.proxy.TalendProxySelector.getInstance().getProxyForUriString(context.JasperServer+"/jasperserver-pro/flow.html?_flowId=viewReportFlow&standAlone=true&_flowId=viewReportFlow&ParentFolderUri=%2F"+context.JasperAmbiente+"%2FAFILIACION&reportUnit=%2F"+context.JasperAmbiente+"%2FAFILIACION%2FNotificacion&j_username="+context.JasperUser+"&j_password="+context.JasperPassword+"&afiliadoid="+ salidaMultiCorreo.AFILIADO_ID +"&Usuario=Sistema&Consecutivo="+ salidaMultiCorreo.SALIDA_ARCHIVO +"&COD_EPS="+ salidaMultiCorreo.CODIGO_ENTIDAD +"&Fechageneracion="+ TalendDate.formatDate("dd/MM/yyyy",TalendDate.getCurrentDate()) +"&output=pdf");
    urlConn_tHttpRequest_2 = (java.net.HttpURLConnection) url_tHttpRequest_2.openConnection(proxyToUse); 
} else {
    urlConn_tHttpRequest_2 = (java.net.HttpURLConnection) url_tHttpRequest_2.openConnection();
}
urlConn_tHttpRequest_2.setRequestMethod("GET");
urlConn_tHttpRequest_2.setDoOutput(true);
urlConn_tHttpRequest_2.setDoInput(true);
urlConn_tHttpRequest_2.setUseCaches(false);

boolean connected_tHttpRequest_2 = false;
int responseCode_tHttpRequest_2 = 0;
globalMap.put("tHttpRequest_2_CONNECTED", false);
try{
    urlConn_tHttpRequest_2.connect();
    connected_tHttpRequest_2 = true;
    globalMap.put("tHttpRequest_2_CONNECTED", true);

    byte[] buffer_tHttpRequest_2 = new byte[1024];
    int bos_buffer_tHttpRequest_2 = 0;java.io.ByteArrayOutputStream bytestream_tHttpRequest_2 = new java.io.ByteArrayOutputStream(); 

    responseCode_tHttpRequest_2 = urlConn_tHttpRequest_2.getResponseCode();
    globalMap.put("tHttpRequest_2_RESPONSE_CODE", responseCode_tHttpRequest_2);

    if ( responseCode_tHttpRequest_2 >= 200 && responseCode_tHttpRequest_2 < 300) { //Status code 2XX indicates success
        java.io.InputStream bis_tHttpRequest_2 = new java.io.BufferedInputStream(urlConn_tHttpRequest_2.getInputStream());
                java.io.File bosParent_tHttpRequest_2 = new java.io.File(context.fileSystem_Path+"/"+context.fileSystem_Area+"/"+salidaMultiCorreo.SALIDA_ARCHIVO+".pdf").getParentFile();
                if (bosParent_tHttpRequest_2 != null && bosParent_tHttpRequest_2.exists() == false){
                    bosParent_tHttpRequest_2.mkdirs();
                }
            java.io.OutputStream bosContent_tHttpRequest_2 = new java.io.BufferedOutputStream(new java.io.FileOutputStream(context.fileSystem_Path+"/"+context.fileSystem_Area+"/"+salidaMultiCorreo.SALIDA_ARCHIVO+".pdf"));
        while ((bos_buffer_tHttpRequest_2 = bis_tHttpRequest_2.read(buffer_tHttpRequest_2)) != -1) {bosContent_tHttpRequest_2.write(buffer_tHttpRequest_2,0,bos_buffer_tHttpRequest_2); bytestream_tHttpRequest_2.write(buffer_tHttpRequest_2,0,bos_buffer_tHttpRequest_2);
        }
            bosContent_tHttpRequest_2.flush();
            bosContent_tHttpRequest_2.close();
        bis_tHttpRequest_2.close();
    } else {
    	String responseMessage_tHttpRequest_2 = urlConn_tHttpRequest_2.getResponseMessage();
    
        //get details response information which will be used when error appear
        java.io.InputStream err_stream_tHttpRequest_2 = urlConn_tHttpRequest_2.getErrorStream();
        if(err_stream_tHttpRequest_2!=null) {
            java.io.InputStream es_tHttpRequest_2 = new java.io.BufferedInputStream(err_stream_tHttpRequest_2);
        	java.io.ByteArrayOutputStream baos_tHttpRequest_2 = new java.io.ByteArrayOutputStream();
        	
        	byte[] buf_tHttpRequest_2 = new byte[1024];
            int read_tHttpRequest_2 = -1;
        	try {
            	while ((read_tHttpRequest_2 = es_tHttpRequest_2.read(buf_tHttpRequest_2)) > 0) {
            		baos_tHttpRequest_2.write(buf_tHttpRequest_2, 0, read_tHttpRequest_2);
            	}
        	} finally {
        		es_tHttpRequest_2.close();
        	}
        
        	responseMessage_tHttpRequest_2 += ("\n" + new String(baos_tHttpRequest_2.toByteArray()));
        }
    	
            throw new RuntimeException("Request failed:" + responseCode_tHttpRequest_2 + " " + responseMessage_tHttpRequest_2);
    }

                    row13.AFILIADO_ID = salidaMultiCorreo.AFILIADO_ID;
                    row13.EMAIL = salidaMultiCorreo.EMAIL;
                    row13.FECHA_AFILIACION = salidaMultiCorreo.FECHA_AFILIACION;
                    row13.ID_ENTIDAD = salidaMultiCorreo.ID_ENTIDAD;
                    row13.CODIGO_ENTIDAD = salidaMultiCorreo.CODIGO_ENTIDAD;
                    row13.SALIDA_ARCHIVO = salidaMultiCorreo.SALIDA_ARCHIVO;
                    row13.ResponseContent = new String(bytestream_tHttpRequest_2.toByteArray());
    urlConn_tHttpRequest_2.disconnect();
}catch(Exception e){
globalMap.put("tHttpRequest_2_ERROR_MESSAGE",e.getMessage());
        throw e;
}

 


	tos_count_tHttpRequest_2++;

/**
 * [tHttpRequest_2 main ] stop
 */
	
	/**
	 * [tHttpRequest_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHttpRequest_2";
	
	

 



/**
 * [tHttpRequest_2 process_data_begin ] stop
 */

	
	/**
	 * [tSendMail_2 main ] start
	 */

	

	
	
	currentComponent="tSendMail_2";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row13"
						
						);
					}
					

 

	String smtpHost_tSendMail_2 = context.mail_SMTPHost;
        String smtpPort_tSendMail_2 = context.mail_SMTPPort;
	String from_tSendMail_2 = (context.mail_UsernameMail);
    String to_tSendMail_2 = (salidaMultiCorreo.EMAIL).replace(";",",");
    String cc_tSendMail_2 = (("")==null || "".equals(""))?null:("").replace(";",",");
    String bcc_tSendMail_2 = (("")==null || "".equals(""))?null:("").replace(";",",");
    String subject_tSendMail_2 = ("Notificación Multiafiliación");
    
	java.util.List<java.util.Map<String, String>> headers_tSendMail_2 = new java.util.ArrayList<java.util.Map<String,String>>();
	java.util.List<String> attachments_tSendMail_2 = new java.util.ArrayList<String>();
	java.util.List<String> contentTransferEncoding_tSendMail_2 = new java.util.ArrayList<String>();
		attachments_tSendMail_2.add(context.fileSystem_Path+"/"+context.fileSystem_Area+"/"+salidaMultiCorreo.SALIDA_ARCHIVO+".pdf");
		contentTransferEncoding_tSendMail_2.add("DEFAULT");	

	String message_tSendMail_2 = (("Bogotá D.C., "+TalendDate.getCurrentDate()+"\n \n \n \nRespetuosamente, me permito informar que de acuerdo al intercambio de información entre el Subsistema de Sal"
+"ud de las Fuerzas Militares y el Ministerio de Salud y la Protección Social, se están realizando seguimiento a las multi"
+"afiliaciones evidenciadas por la Administradora de los Recursos del Sistema General de Seguridad Social en Salud ADRES."
+"\n\nPor lo anterior, mediante el presente correo me permito adjuntar documento a través del cual se le notifica sobre la "
+"situación de multiafiliacion en que se encuentra(n) incurso(s) su beneficiario, proceso que se realiza en cumplimiento a"
+" lo estipulado en el Articulo 2.1.13.5 del Decreto  Único Reglamentario de Sector Salud N° 780 de 2016 y a las disposici"
+"ones que regulan este Régimen de excepción en la resolución N° 1651 de 2019 \"Por la cual se unifican y actualizan los r"
+"equisitos para el registro de novedades, afiliación, validación y extinción de derechos, para los afiliados y beneficiar"
+"ios  del Subsistema de Salud de las Fuerzas Militares y se dictan otras disposiciones\", normatividad que en su artículo"
+" 16 estipulo la prohibición de multiafiliaciones indicando lo siguiente: \n\n \"Ninguna persona podrá estar registrada e"
+"n una Entidad Promotora de Salud (EPS) o Empresa Administradora de planes de Beneficios (EAPB)  del régimen contributivo"
+", subsidiado, de excepción o especial simultáneamente con el Subsistema de Salud de las Fuerzas Militares, en calidad de"
+" afiliado, de conformidad con lo establecido en el Decreto Ley 1795 de 2000 en su Artículo 24 parágrafo 4º o demás norma"
+"s que lo adicionen, modifiquen o sustituyan y el Decreto 780 de 2016 único reglamentario del sector salud en su artículo"
+" 2.1.13.5 o normas que lo adicionen, modifiquen o sustituyan\".\n\nLa presente comunicación tiene los efectos establecid"
+"os en los Artículos 54, 55, y 56 de la Ley 1437 de 2011.\n\nSeñor Usuario no conteste a este correo electrónico: 1. Para"
+" información de trámites y servicios ingrese a www.sanidadfuerzasmilitares.mil.co / 2. Para trámites en línea ingrese a "
+"https://portal.saludsis.mil.co / 3. Para peticiones, quejas, reclamos, solicitudes o felicitaciones ingrese a https://pq"
+"r.sanidadfuerzasmilitares.mil.co/index.php?idcategoria=34445 / 4. Chat de afiliaciones todos los martes de 8:00 a.m. a 3"
+":00 p.m.\n\nAtentamente, \n\n\nGrupo de Gestión de la Afiliación \nDirección General de Sanidad Militar") == null || "".equals("Bogotá D.C., "+TalendDate.getCurrentDate()+"\n \n \n \nRespetuosamente, me permito informar que de acuerdo al intercambio de información entre el Subsistema de Sal"
+"ud de las Fuerzas Militares y el Ministerio de Salud y la Protección Social, se están realizando seguimiento a las multi"
+"afiliaciones evidenciadas por la Administradora de los Recursos del Sistema General de Seguridad Social en Salud ADRES."
+"\n\nPor lo anterior, mediante el presente correo me permito adjuntar documento a través del cual se le notifica sobre la "
+"situación de multiafiliacion en que se encuentra(n) incurso(s) su beneficiario, proceso que se realiza en cumplimiento a"
+" lo estipulado en el Articulo 2.1.13.5 del Decreto  Único Reglamentario de Sector Salud N° 780 de 2016 y a las disposici"
+"ones que regulan este Régimen de excepción en la resolución N° 1651 de 2019 \"Por la cual se unifican y actualizan los r"
+"equisitos para el registro de novedades, afiliación, validación y extinción de derechos, para los afiliados y beneficiar"
+"ios  del Subsistema de Salud de las Fuerzas Militares y se dictan otras disposiciones\", normatividad que en su artículo"
+" 16 estipulo la prohibición de multiafiliaciones indicando lo siguiente: \n\n \"Ninguna persona podrá estar registrada e"
+"n una Entidad Promotora de Salud (EPS) o Empresa Administradora de planes de Beneficios (EAPB)  del régimen contributivo"
+", subsidiado, de excepción o especial simultáneamente con el Subsistema de Salud de las Fuerzas Militares, en calidad de"
+" afiliado, de conformidad con lo establecido en el Decreto Ley 1795 de 2000 en su Artículo 24 parágrafo 4º o demás norma"
+"s que lo adicionen, modifiquen o sustituyan y el Decreto 780 de 2016 único reglamentario del sector salud en su artículo"
+" 2.1.13.5 o normas que lo adicionen, modifiquen o sustituyan\".\n\nLa presente comunicación tiene los efectos establecid"
+"os en los Artículos 54, 55, y 56 de la Ley 1437 de 2011.\n\nSeñor Usuario no conteste a este correo electrónico: 1. Para"
+" información de trámites y servicios ingrese a www.sanidadfuerzasmilitares.mil.co / 2. Para trámites en línea ingrese a "
+"https://portal.saludsis.mil.co / 3. Para peticiones, quejas, reclamos, solicitudes o felicitaciones ingrese a https://pq"
+"r.sanidadfuerzasmilitares.mil.co/index.php?idcategoria=34445 / 4. Chat de afiliaciones todos los martes de 8:00 a.m. a 3"
+":00 p.m.\n\nAtentamente, \n\n\nGrupo de Gestión de la Afiliación \nDirección General de Sanidad Militar")) ? "\"\"" : ("Bogotá D.C., "+TalendDate.getCurrentDate()+"\n \n \n \nRespetuosamente, me permito informar que de acuerdo al intercambio de información entre el Subsistema de Sal"
+"ud de las Fuerzas Militares y el Ministerio de Salud y la Protección Social, se están realizando seguimiento a las multi"
+"afiliaciones evidenciadas por la Administradora de los Recursos del Sistema General de Seguridad Social en Salud ADRES."
+"\n\nPor lo anterior, mediante el presente correo me permito adjuntar documento a través del cual se le notifica sobre la "
+"situación de multiafiliacion en que se encuentra(n) incurso(s) su beneficiario, proceso que se realiza en cumplimiento a"
+" lo estipulado en el Articulo 2.1.13.5 del Decreto  Único Reglamentario de Sector Salud N° 780 de 2016 y a las disposici"
+"ones que regulan este Régimen de excepción en la resolución N° 1651 de 2019 \"Por la cual se unifican y actualizan los r"
+"equisitos para el registro de novedades, afiliación, validación y extinción de derechos, para los afiliados y beneficiar"
+"ios  del Subsistema de Salud de las Fuerzas Militares y se dictan otras disposiciones\", normatividad que en su artículo"
+" 16 estipulo la prohibición de multiafiliaciones indicando lo siguiente: \n\n \"Ninguna persona podrá estar registrada e"
+"n una Entidad Promotora de Salud (EPS) o Empresa Administradora de planes de Beneficios (EAPB)  del régimen contributivo"
+", subsidiado, de excepción o especial simultáneamente con el Subsistema de Salud de las Fuerzas Militares, en calidad de"
+" afiliado, de conformidad con lo establecido en el Decreto Ley 1795 de 2000 en su Artículo 24 parágrafo 4º o demás norma"
+"s que lo adicionen, modifiquen o sustituyan y el Decreto 780 de 2016 único reglamentario del sector salud en su artículo"
+" 2.1.13.5 o normas que lo adicionen, modifiquen o sustituyan\".\n\nLa presente comunicación tiene los efectos establecid"
+"os en los Artículos 54, 55, y 56 de la Ley 1437 de 2011.\n\nSeñor Usuario no conteste a este correo electrónico: 1. Para"
+" información de trámites y servicios ingrese a www.sanidadfuerzasmilitares.mil.co / 2. Para trámites en línea ingrese a "
+"https://portal.saludsis.mil.co / 3. Para peticiones, quejas, reclamos, solicitudes o felicitaciones ingrese a https://pq"
+"r.sanidadfuerzasmilitares.mil.co/index.php?idcategoria=34445 / 4. Chat de afiliaciones todos los martes de 8:00 a.m. a 3"
+":00 p.m.\n\nAtentamente, \n\n\nGrupo de Gestión de la Afiliación \nDirección General de Sanidad Militar") ;
	java.util.Properties props_tSendMail_2 = System.getProperties();     
	props_tSendMail_2.put("mail.smtp.host", smtpHost_tSendMail_2);
	props_tSendMail_2.put("mail.smtp.port", smtpPort_tSendMail_2);
	
		props_tSendMail_2.put("mail.mime.encodefilename", "true");     
	try {
		
		
			props_tSendMail_2.put("mail.smtp.auth", "true");
			javax.mail.Session session_tSendMail_2 = javax.mail.Session.getInstance(props_tSendMail_2, new javax.mail.Authenticator(){         
				protected javax.mail.PasswordAuthentication getPasswordAuthentication() {
				
                
	final String decryptedPassword_tSendMail_2 = context.mail_PasswordMail; 
				
				
				return new javax.mail.PasswordAuthentication(context.mail_UsernameMail, decryptedPassword_tSendMail_2); 
				}         
			});   
		
		
		javax.mail.Message msg_tSendMail_2 = new javax.mail.internet.MimeMessage(session_tSendMail_2);
		msg_tSendMail_2.setFrom(new javax.mail.internet.InternetAddress(from_tSendMail_2, "Dirección general de sanidad militar"));
		msg_tSendMail_2.setRecipients(javax.mail.Message.RecipientType.TO,javax.mail.internet.InternetAddress.parse(to_tSendMail_2, false));
		if (cc_tSendMail_2 != null) msg_tSendMail_2.setRecipients(javax.mail.Message.RecipientType.CC, javax.mail.internet.InternetAddress.parse(cc_tSendMail_2, false));
		if (bcc_tSendMail_2 != null) msg_tSendMail_2.setRecipients(javax.mail.Message.RecipientType.BCC, javax.mail.internet.InternetAddress.parse(bcc_tSendMail_2, false));
		msg_tSendMail_2.setSubject(subject_tSendMail_2);

		for (int i_tSendMail_2 = 0; i_tSendMail_2 < headers_tSendMail_2.size(); i_tSendMail_2++) {
			java.util.Map<String, String> header_tSendMail_2 = headers_tSendMail_2.get(i_tSendMail_2);
			msg_tSendMail_2.setHeader(header_tSendMail_2.get("KEY"), header_tSendMail_2.get("VALUE"));    
		}  
		msg_tSendMail_2.setSentDate(new Date());
		msg_tSendMail_2.setHeader("X-Priority", "3"); //High->1 Normal->3 Low->5
		javax.mail.Multipart mp_tSendMail_2 = new javax.mail.internet.MimeMultipart();
		javax.mail.internet.MimeBodyPart mbpText_tSendMail_2 = new javax.mail.internet.MimeBodyPart();
		mbpText_tSendMail_2.setText(message_tSendMail_2,"ISO-8859-15", "plain");
		mp_tSendMail_2.addBodyPart(mbpText_tSendMail_2);
  
		javax.mail.internet.MimeBodyPart mbpFile_tSendMail_2 = null;

		for (int i_tSendMail_2 = 0; i_tSendMail_2 < attachments_tSendMail_2.size(); i_tSendMail_2++){
			String filename_tSendMail_2 = attachments_tSendMail_2.get(i_tSendMail_2);
			javax.activation.FileDataSource fds_tSendMail_2 = null;
			java.io.File file_tSendMail_2 = new java.io.File(filename_tSendMail_2);
			
				if (!file_tSendMail_2.exists()){
					continue;
				}
			
    		if (file_tSendMail_2.isDirectory()){
				java.io.File[] subFiles_tSendMail_2 = file_tSendMail_2.listFiles();
				for(java.io.File subFile_tSendMail_2 : subFiles_tSendMail_2){
					if (subFile_tSendMail_2.isFile()){
						fds_tSendMail_2 = new javax.activation.FileDataSource(subFile_tSendMail_2.getAbsolutePath());
						mbpFile_tSendMail_2 = new javax.mail.internet.MimeBodyPart();
						mbpFile_tSendMail_2.setDataHandler(new javax.activation.DataHandler(fds_tSendMail_2));
						mbpFile_tSendMail_2.setFileName(javax.mail.internet.MimeUtility.encodeText(fds_tSendMail_2.getName()));
						if(contentTransferEncoding_tSendMail_2.get(i_tSendMail_2).equalsIgnoreCase("base64")){
							mbpFile_tSendMail_2.setHeader("Content-Transfer-Encoding", "base64");
						}
						mp_tSendMail_2.addBodyPart(mbpFile_tSendMail_2);
					}
				}
    		}else{
				mbpFile_tSendMail_2 = new javax.mail.internet.MimeBodyPart();
				fds_tSendMail_2 = new javax.activation.FileDataSource(filename_tSendMail_2);
				mbpFile_tSendMail_2.setDataHandler(new javax.activation.DataHandler(fds_tSendMail_2)); 
				mbpFile_tSendMail_2.setFileName(javax.mail.internet.MimeUtility.encodeText(fds_tSendMail_2.getName()));
				if(contentTransferEncoding_tSendMail_2.get(i_tSendMail_2).equalsIgnoreCase("base64")){
					mbpFile_tSendMail_2.setHeader("Content-Transfer-Encoding", "base64");
				}
				mp_tSendMail_2.addBodyPart(mbpFile_tSendMail_2);
			}
		}
		// -- set the content --
		msg_tSendMail_2.setContent(mp_tSendMail_2);
		// add handlers for main MIME types
		javax.activation.MailcapCommandMap mc_tSendMail_2 = ( javax.activation.MailcapCommandMap)javax.activation.CommandMap.getDefaultCommandMap();
		mc_tSendMail_2.addMailcap("text/html;; x-java-content-handler=com.sun.mail.handlers.text_html");
		mc_tSendMail_2.addMailcap("text/xml;; x-java-content-handler=com.sun.mail.handlers.text_xml");
		mc_tSendMail_2.addMailcap("text/plain;; x-java-content-handler=com.sun.mail.handlers.text_plain");
		mc_tSendMail_2.addMailcap("multipart/*;; x-java-content-handler=com.sun.mail.handlers.multipart_mixed");
		mc_tSendMail_2.addMailcap("message/rfc822;; x-java-content-handler=com.sun.mail.handlers.message_rfc822");
		javax.activation.CommandMap.setDefaultCommandMap(mc_tSendMail_2);
		// add com.sun.mail.handlers to job imports / depenencies (TESB-27110)
		com.sun.mail.handlers.text_plain text_plain_h_tSendMail_2 = null;
		// -- Send the message --
		javax.mail.Transport.send(msg_tSendMail_2);
	} catch(java.lang.Exception e){
globalMap.put("tSendMail_2_ERROR_MESSAGE",e.getMessage());
  		
			
  			System.err.println(e.toString());
		
	}finally{
		props_tSendMail_2.remove("mail.smtp.host");
		props_tSendMail_2.remove("mail.smtp.port");
		
		props_tSendMail_2.remove("mail.mime.encodefilename");
		
		props_tSendMail_2.remove("mail.smtp.auth");     
	}

 
     row15 = row13;


	tos_count_tSendMail_2++;

/**
 * [tSendMail_2 main ] stop
 */
	
	/**
	 * [tSendMail_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tSendMail_2";
	
	

 



/**
 * [tSendMail_2 process_data_begin ] stop
 */

	
	/**
	 * [tJavaRow_4 main ] start
	 */

	

	
	
	currentComponent="tJavaRow_4";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row15"
						
						);
					}
					

    //Code generate according to input schema and output schema
row16.ProcesoId_ = context.idProceso;
row16.AfiliadoId_ = row15.AFILIADO_ID;
row16.EpsId_ = row15.ID_ENTIDAD;
row16.Notificacion_ = 1;


/*System.out.println(java.nio.file.Paths.get(".").toAbsolutePath().normalize().toString()+"/TEMP_REPORTES/"+row13.SALIDA_ARCHIVO+".pdf");
System.out.println("https://saludsis.mil.co/jasperserver-pro/flow.html?_flowId=viewReportFlow&standAlone=true&_flowId=viewReportFlow&ParentFolderUri=%2FQA%2FAFILIACION&reportUnit=%2FQA%2FAFILIACION%2FNotificacion&j_username=superuser&j_password=REP_SALUDSIS123*&afiliadoid="+ salidaMultiCorreo.AFILIADO_ID +"&Usuario=Sistema&Consecutivo="+ salidaMultiCorreo.SALIDA_ARCHIVO +"&COD_EPS="+ salidaMultiCorreo.CODIGO_ENTIDAD +"&Fechageneracion="+ TalendDate.formatDate("dd/MM/yyyy",TalendDate.getCurrentDate()) +"&output=pdf");*/
    nb_line_tJavaRow_4++;   

 


	tos_count_tJavaRow_4++;

/**
 * [tJavaRow_4 main ] stop
 */
	
	/**
	 * [tJavaRow_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJavaRow_4";
	
	

 



/**
 * [tJavaRow_4 process_data_begin ] stop
 */

	
	/**
	 * [tOracleSP_3 main ] start
	 */

	

	
	
	currentComponent="tOracleSP_3";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row16"
						
						);
					}
					

			// code for the argument 1 (ProcesoId_) of type 'IN AUTOMAPPING'
    					if (row16.ProcesoId_ == null) {
    						statement_tOracleSP_3.setNull(1, java.sql.Types.INTEGER);
    					} else {
    					
                        statement_tOracleSP_3.setInt(1, row16.ProcesoId_);
    					}
    					
			// code for the argument 2 (AfiliadoId_) of type 'IN AUTOMAPPING'
    					if (row16.AfiliadoId_ == null) {
    						statement_tOracleSP_3.setNull(2, java.sql.Types.INTEGER);
    					} else {
    					
                        statement_tOracleSP_3.setInt(2, row16.AfiliadoId_);
    					}
    					
			// code for the argument 3 (EpsId_) of type 'IN AUTOMAPPING'
    					if (row16.EpsId_ == null) {
    						statement_tOracleSP_3.setNull(3, java.sql.Types.INTEGER);
    					} else {
    					
                        statement_tOracleSP_3.setInt(3, row16.EpsId_);
    					}
    					
			// code for the argument 4 (Notificacion_) of type 'IN AUTOMAPPING'
    					if (row16.Notificacion_ == null) {
    						statement_tOracleSP_3.setNull(4, java.sql.Types.INTEGER);
    					} else {
    					
                        statement_tOracleSP_3.setInt(4, row16.Notificacion_);
    					}
    					
		statement_tOracleSP_3.execute();
		

 


	tos_count_tOracleSP_3++;

/**
 * [tOracleSP_3 main ] stop
 */
	
	/**
	 * [tOracleSP_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleSP_3";
	
	

 



/**
 * [tOracleSP_3 process_data_begin ] stop
 */
	
	/**
	 * [tOracleSP_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleSP_3";
	
	

 



/**
 * [tOracleSP_3 process_data_end ] stop
 */



	
	/**
	 * [tJavaRow_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tJavaRow_4";
	
	

 



/**
 * [tJavaRow_4 process_data_end ] stop
 */



	
	/**
	 * [tSendMail_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tSendMail_2";
	
	

 



/**
 * [tSendMail_2 process_data_end ] stop
 */



	
	/**
	 * [tHttpRequest_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tHttpRequest_2";
	
	

 



/**
 * [tHttpRequest_2 process_data_end ] stop
 */

} // End of branch "salidaMultiCorreo"




// Start of branch "salidaMultiSinCorreo"
if(salidaMultiSinCorreo != null) { 



	
	/**
	 * [tJavaRow_5 main ] start
	 */

	

	
	
	currentComponent="tJavaRow_5";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"salidaMultiSinCorreo"
						
						);
					}
					

    //Code generate according to input schema and output schema
row18.ProcesoId_ = context.idProceso;
row18.AfiliadoId_ = salidaMultiSinCorreo.AFILIADO_ID;
row18.EpsId_ = salidaMultiSinCorreo.ID_ENTIDAD;
row18.Notificacion_ = 2;

    nb_line_tJavaRow_5++;   

 


	tos_count_tJavaRow_5++;

/**
 * [tJavaRow_5 main ] stop
 */
	
	/**
	 * [tJavaRow_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJavaRow_5";
	
	

 



/**
 * [tJavaRow_5 process_data_begin ] stop
 */

	
	/**
	 * [tOracleSP_4 main ] start
	 */

	

	
	
	currentComponent="tOracleSP_4";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row18"
						
						);
					}
					

			// code for the argument 1 (ProcesoId_) of type 'IN AUTOMAPPING'
    					if (row18.ProcesoId_ == null) {
    						statement_tOracleSP_4.setNull(1, java.sql.Types.INTEGER);
    					} else {
    					
                        statement_tOracleSP_4.setInt(1, row18.ProcesoId_);
    					}
    					
			// code for the argument 2 (AfiliadoId_) of type 'IN AUTOMAPPING'
    					if (row18.AfiliadoId_ == null) {
    						statement_tOracleSP_4.setNull(2, java.sql.Types.INTEGER);
    					} else {
    					
                        statement_tOracleSP_4.setInt(2, row18.AfiliadoId_);
    					}
    					
			// code for the argument 3 (EpsId_) of type 'IN AUTOMAPPING'
    					if (row18.EpsId_ == null) {
    						statement_tOracleSP_4.setNull(3, java.sql.Types.INTEGER);
    					} else {
    					
                        statement_tOracleSP_4.setInt(3, row18.EpsId_);
    					}
    					
			// code for the argument 4 (Notificacion_) of type 'IN AUTOMAPPING'
    					if (row18.Notificacion_ == null) {
    						statement_tOracleSP_4.setNull(4, java.sql.Types.INTEGER);
    					} else {
    					
                        statement_tOracleSP_4.setInt(4, row18.Notificacion_);
    					}
    					
		statement_tOracleSP_4.execute();
		

 


	tos_count_tOracleSP_4++;

/**
 * [tOracleSP_4 main ] stop
 */
	
	/**
	 * [tOracleSP_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleSP_4";
	
	

 



/**
 * [tOracleSP_4 process_data_begin ] stop
 */
	
	/**
	 * [tOracleSP_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleSP_4";
	
	

 



/**
 * [tOracleSP_4 process_data_end ] stop
 */



	
	/**
	 * [tJavaRow_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tJavaRow_5";
	
	

 



/**
 * [tJavaRow_5 process_data_end ] stop
 */

} // End of branch "salidaMultiSinCorreo"




// Start of branch "salidaArchivo"
if(salidaArchivo != null) { 



	
	/**
	 * [tMap_1 main ] start
	 */

	

	
	
	currentComponent="tMap_1";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"salidaArchivo"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;
		
						row4Struct row4 = null;
					
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_1 = false;
		boolean mainRowRejected_tMap_1 = false;
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row4" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow4 = false;
       		  	    	
       		  	    	
 							row4Struct row4ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_1) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_1 = false;
								
	                        		    	Object exprKeyValue_row4__ID = salidaArchivo.TEPS_ID ;
	                        		    	if(exprKeyValue_row4__ID == null) {
	                        		    		hasCasePrimitiveKeyWithNull_tMap_1 = true;
	                        		    	} else {
                        		    			row4HashKey.ID = (int)(Integer) exprKeyValue_row4__ID;
                        		    		}
                        		    		

								
		                        	row4HashKey.hashCodeDirty = true;
                        		
	  					
	  							
	
		  							if(!hasCasePrimitiveKeyWithNull_tMap_1) { // G_TM_M_091
		  							
			  					
			  					
			  					
	  					
		  							tHash_Lookup_row4.lookup( row4HashKey );

	  							

	  							

			  						} // G_TM_M_091
			  						
			  					

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row4 != null && tHash_Lookup_row4.getCount(row4HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row4' and it contains more one result from keys :  row4.ID = '" + row4HashKey.ID + "'");
								} // G 071
							

							
                    		  	 
							   
                    		  	 
	       		  	    	row4Struct fromLookup_row4 = null;
							row4 = row4Default;
										 
							
								 
							
							
								if (tHash_Lookup_row4 !=null && tHash_Lookup_row4.hasNext()) { // G 099
								
							
								
								fromLookup_row4 = tHash_Lookup_row4.next();

							
							
								} // G 099
							
							

							if(fromLookup_row4 != null) {
								row4 = fromLookup_row4;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
        // ###############################
        // # Output tables

salidaReporteMultiAfi = null;


// # Output table : 'salidaReporteMultiAfi'
salidaReporteMultiAfi_tmp.TIPO_DOCUMENTO = salidaArchivo.TIPO_DOCUMENTO ;
salidaReporteMultiAfi_tmp.NUMERO_DOCUMENTO = salidaArchivo.NUMERO_DOCUMENTO;
salidaReporteMultiAfi_tmp.PRIMER_NOMBRE = salidaArchivo.PRIMER_NOMBRE ;
salidaReporteMultiAfi_tmp.SEGUNDO_NOMBRE = salidaArchivo.SEGUNDO_NOMBRE ;
salidaReporteMultiAfi_tmp.PRIMER_APELLIDO = salidaArchivo.PRIMER_APELLIDO ;
salidaReporteMultiAfi_tmp.SEGUNDO_APELLIDO = salidaArchivo.SEGUNDO_APELLIDO ;
salidaReporteMultiAfi_tmp.EPS_NOMBRE = salidaArchivo.EPS_NOMBRE ;
salidaReporteMultiAfi_tmp.TIPO_EPS = row4.NOMBRE ;
salidaReporteMultiAfi_tmp.NOTIFICACION = StringHandling.LEN(salidaArchivo.EMAIL)>0?"SI":"NO" ;
salidaReporteMultiAfi = salidaReporteMultiAfi_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_1 = false;










 


	tos_count_tMap_1++;

/**
 * [tMap_1 main ] stop
 */
	
	/**
	 * [tMap_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_1";
	
	

 



/**
 * [tMap_1 process_data_begin ] stop
 */
// Start of branch "salidaReporteMultiAfi"
if(salidaReporteMultiAfi != null) { 



	
	/**
	 * [tFileOutputDelimited_1 main ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"salidaReporteMultiAfi"
						
						);
					}
					


                    StringBuilder sb_tFileOutputDelimited_1 = new StringBuilder();
                            if(salidaReporteMultiAfi.TIPO_DOCUMENTO != null) {
                        sb_tFileOutputDelimited_1.append(
                            salidaReporteMultiAfi.TIPO_DOCUMENTO
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(salidaReporteMultiAfi.NUMERO_DOCUMENTO != null) {
                        sb_tFileOutputDelimited_1.append(
                            salidaReporteMultiAfi.NUMERO_DOCUMENTO
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(salidaReporteMultiAfi.PRIMER_NOMBRE != null) {
                        sb_tFileOutputDelimited_1.append(
                            salidaReporteMultiAfi.PRIMER_NOMBRE
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(salidaReporteMultiAfi.SEGUNDO_NOMBRE != null) {
                        sb_tFileOutputDelimited_1.append(
                            salidaReporteMultiAfi.SEGUNDO_NOMBRE
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(salidaReporteMultiAfi.PRIMER_APELLIDO != null) {
                        sb_tFileOutputDelimited_1.append(
                            salidaReporteMultiAfi.PRIMER_APELLIDO
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(salidaReporteMultiAfi.SEGUNDO_APELLIDO != null) {
                        sb_tFileOutputDelimited_1.append(
                            salidaReporteMultiAfi.SEGUNDO_APELLIDO
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(salidaReporteMultiAfi.EPS_NOMBRE != null) {
                        sb_tFileOutputDelimited_1.append(
                            salidaReporteMultiAfi.EPS_NOMBRE
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(salidaReporteMultiAfi.TIPO_EPS != null) {
                        sb_tFileOutputDelimited_1.append(
                            salidaReporteMultiAfi.TIPO_EPS
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(salidaReporteMultiAfi.NOTIFICACION != null) {
                        sb_tFileOutputDelimited_1.append(
                            salidaReporteMultiAfi.NOTIFICACION
                        );
                            }
                    sb_tFileOutputDelimited_1.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_1);


                    nb_line_tFileOutputDelimited_1++;
                    resourceMap.put("nb_line_tFileOutputDelimited_1", nb_line_tFileOutputDelimited_1);

                        outtFileOutputDelimited_1.write(sb_tFileOutputDelimited_1.toString());




 


	tos_count_tFileOutputDelimited_1++;

/**
 * [tFileOutputDelimited_1 main ] stop
 */
	
	/**
	 * [tFileOutputDelimited_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";
	
	

 



/**
 * [tFileOutputDelimited_1 process_data_begin ] stop
 */
	
	/**
	 * [tFileOutputDelimited_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";
	
	

 



/**
 * [tFileOutputDelimited_1 process_data_end ] stop
 */

} // End of branch "salidaReporteMultiAfi"




	
	/**
	 * [tMap_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_1";
	
	

 



/**
 * [tMap_1 process_data_end ] stop
 */

} // End of branch "salidaArchivo"




// Start of branch "salidaMultiCorreoTitulares"
if(salidaMultiCorreoTitulares != null) { 



	
	/**
	 * [tHttpRequest_1 main ] start
	 */

	

	
	
	currentComponent="tHttpRequest_1";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"salidaMultiCorreoTitulares"
						
						);
					}
					


int connectTimeOut_tHttpRequest_1 = Integer.valueOf(30)*1000;
int readTimeOut_tHttpRequest_1 = Integer.valueOf(0)*1000;

java.net.URL url_tHttpRequest_1 = new java.net.URL(context.JasperServer+"/jasperserver-pro/flow.html?_flowId=viewReportFlow&standAlone=true&_flowId=viewReportFlow&ParentFolderUri=%2F"+context.JasperAmbiente+"%2FAFILIACION&reportUnit=%2F"+context.JasperAmbiente+"%2FAFILIACION%2FNotificacionTitulares&j_username="+context.JasperUser+"&j_password="+context.JasperPassword+"&afiliadoid="+ salidaMultiCorreoTitulares.AFILIADO_ID +"&Usuario=Sistema&Consecutivo="+ salidaMultiCorreoTitulares.SALIDA_ARCHIVO +"&COD_EPS="+ salidaMultiCorreoTitulares.CODIGO_ENTIDAD +"&Fechageneracion="+ TalendDate.formatDate("dd/MM/yyyy",TalendDate.getCurrentDate()) +"&output=pdf");

java.net.HttpURLConnection urlConn_tHttpRequest_1 = null;

if ("local".equals(System.getProperty("http.proxySet"))) {
    java.net.Proxy proxyToUse = org.talend.proxy.TalendProxySelector.getInstance().getProxyForUriString(context.JasperServer+"/jasperserver-pro/flow.html?_flowId=viewReportFlow&standAlone=true&_flowId=viewReportFlow&ParentFolderUri=%2F"+context.JasperAmbiente+"%2FAFILIACION&reportUnit=%2F"+context.JasperAmbiente+"%2FAFILIACION%2FNotificacionTitulares&j_username="+context.JasperUser+"&j_password="+context.JasperPassword+"&afiliadoid="+ salidaMultiCorreoTitulares.AFILIADO_ID +"&Usuario=Sistema&Consecutivo="+ salidaMultiCorreoTitulares.SALIDA_ARCHIVO +"&COD_EPS="+ salidaMultiCorreoTitulares.CODIGO_ENTIDAD +"&Fechageneracion="+ TalendDate.formatDate("dd/MM/yyyy",TalendDate.getCurrentDate()) +"&output=pdf");
    urlConn_tHttpRequest_1 = (java.net.HttpURLConnection) url_tHttpRequest_1.openConnection(proxyToUse); 
} else {
    urlConn_tHttpRequest_1 = (java.net.HttpURLConnection) url_tHttpRequest_1.openConnection();
}
urlConn_tHttpRequest_1.setRequestMethod("GET");
urlConn_tHttpRequest_1.setDoOutput(true);
urlConn_tHttpRequest_1.setDoInput(true);
urlConn_tHttpRequest_1.setUseCaches(false);

boolean connected_tHttpRequest_1 = false;
int responseCode_tHttpRequest_1 = 0;
globalMap.put("tHttpRequest_1_CONNECTED", false);
try{
    urlConn_tHttpRequest_1.connect();
    connected_tHttpRequest_1 = true;
    globalMap.put("tHttpRequest_1_CONNECTED", true);

    byte[] buffer_tHttpRequest_1 = new byte[1024];
    int bos_buffer_tHttpRequest_1 = 0;java.io.ByteArrayOutputStream bytestream_tHttpRequest_1 = new java.io.ByteArrayOutputStream(); 

    responseCode_tHttpRequest_1 = urlConn_tHttpRequest_1.getResponseCode();
    globalMap.put("tHttpRequest_1_RESPONSE_CODE", responseCode_tHttpRequest_1);

    if ( responseCode_tHttpRequest_1 >= 200 && responseCode_tHttpRequest_1 < 300) { //Status code 2XX indicates success
        java.io.InputStream bis_tHttpRequest_1 = new java.io.BufferedInputStream(urlConn_tHttpRequest_1.getInputStream());
                java.io.File bosParent_tHttpRequest_1 = new java.io.File(context.fileSystem_Path+"/"+context.fileSystem_Area+"/"+salidaMultiCorreoTitulares.SALIDA_ARCHIVO+".pdf").getParentFile();
                if (bosParent_tHttpRequest_1 != null && bosParent_tHttpRequest_1.exists() == false){
                    bosParent_tHttpRequest_1.mkdirs();
                }
            java.io.OutputStream bosContent_tHttpRequest_1 = new java.io.BufferedOutputStream(new java.io.FileOutputStream(context.fileSystem_Path+"/"+context.fileSystem_Area+"/"+salidaMultiCorreoTitulares.SALIDA_ARCHIVO+".pdf"));
        while ((bos_buffer_tHttpRequest_1 = bis_tHttpRequest_1.read(buffer_tHttpRequest_1)) != -1) {bosContent_tHttpRequest_1.write(buffer_tHttpRequest_1,0,bos_buffer_tHttpRequest_1); bytestream_tHttpRequest_1.write(buffer_tHttpRequest_1,0,bos_buffer_tHttpRequest_1);
        }
            bosContent_tHttpRequest_1.flush();
            bosContent_tHttpRequest_1.close();
        bis_tHttpRequest_1.close();
    } else {
    	String responseMessage_tHttpRequest_1 = urlConn_tHttpRequest_1.getResponseMessage();
    
        //get details response information which will be used when error appear
        java.io.InputStream err_stream_tHttpRequest_1 = urlConn_tHttpRequest_1.getErrorStream();
        if(err_stream_tHttpRequest_1!=null) {
            java.io.InputStream es_tHttpRequest_1 = new java.io.BufferedInputStream(err_stream_tHttpRequest_1);
        	java.io.ByteArrayOutputStream baos_tHttpRequest_1 = new java.io.ByteArrayOutputStream();
        	
        	byte[] buf_tHttpRequest_1 = new byte[1024];
            int read_tHttpRequest_1 = -1;
        	try {
            	while ((read_tHttpRequest_1 = es_tHttpRequest_1.read(buf_tHttpRequest_1)) > 0) {
            		baos_tHttpRequest_1.write(buf_tHttpRequest_1, 0, read_tHttpRequest_1);
            	}
        	} finally {
        		es_tHttpRequest_1.close();
        	}
        
        	responseMessage_tHttpRequest_1 += ("\n" + new String(baos_tHttpRequest_1.toByteArray()));
        }
    	
            throw new RuntimeException("Request failed:" + responseCode_tHttpRequest_1 + " " + responseMessage_tHttpRequest_1);
    }

                    row7.AFILIADO_ID = salidaMultiCorreoTitulares.AFILIADO_ID;
                    row7.EMAIL = salidaMultiCorreoTitulares.EMAIL;
                    row7.FECHA_AFILIACION = salidaMultiCorreoTitulares.FECHA_AFILIACION;
                    row7.ID_ENTIDAD = salidaMultiCorreoTitulares.ID_ENTIDAD;
                    row7.CODIGO_ENTIDAD = salidaMultiCorreoTitulares.CODIGO_ENTIDAD;
                    row7.SALIDA_ARCHIVO = salidaMultiCorreoTitulares.SALIDA_ARCHIVO;
                    row7.ResponseContent = new String(bytestream_tHttpRequest_1.toByteArray());
    urlConn_tHttpRequest_1.disconnect();
}catch(Exception e){
globalMap.put("tHttpRequest_1_ERROR_MESSAGE",e.getMessage());
        throw e;
}

 


	tos_count_tHttpRequest_1++;

/**
 * [tHttpRequest_1 main ] stop
 */
	
	/**
	 * [tHttpRequest_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHttpRequest_1";
	
	

 



/**
 * [tHttpRequest_1 process_data_begin ] stop
 */

	
	/**
	 * [tSendMail_1 main ] start
	 */

	

	
	
	currentComponent="tSendMail_1";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row7"
						
						);
					}
					

 

	String smtpHost_tSendMail_1 = context.mail_SMTPHost;
        String smtpPort_tSendMail_1 = context.mail_SMTPPort;
	String from_tSendMail_1 = (context.mail_UsernameMail);
    String to_tSendMail_1 = (salidaMultiCorreoTitulares.EMAIL).replace(";",",");
    String cc_tSendMail_1 = (("")==null || "".equals(""))?null:("").replace(";",",");
    String bcc_tSendMail_1 = (("")==null || "".equals(""))?null:("").replace(";",",");
    String subject_tSendMail_1 = ("Notificación Multiafiliación");
    
	java.util.List<java.util.Map<String, String>> headers_tSendMail_1 = new java.util.ArrayList<java.util.Map<String,String>>();
	java.util.List<String> attachments_tSendMail_1 = new java.util.ArrayList<String>();
	java.util.List<String> contentTransferEncoding_tSendMail_1 = new java.util.ArrayList<String>();
		attachments_tSendMail_1.add(context.fileSystem_Path+"/"+context.fileSystem_Area+"/"+salidaMultiCorreoTitulares.SALIDA_ARCHIVO+".pdf");
		contentTransferEncoding_tSendMail_1.add("DEFAULT");	

	String message_tSendMail_1 = (("Bogotá D.C., "+TalendDate.getCurrentDate()+"\n \n \n \nRespetuosamente, me permito informar que de acuerdo al intercambio de información entre el Subsistema de Sal"
+"ud de las Fuerzas Militares y el Ministerio de Salud y la Protección Social, se están realizando seguimiento a las multi"
+"afiliaciones evidenciadas por la Administradora de los Recursos del Sistema General de Seguridad Social en Salud ADRES."
+"\n\nPor lo anterior, mediante el presente correo me permito adjuntar documento a través del cual se le notifica sobre la "
+"situación de multiafiliacion en que se encuentra(n) incurso(s) su beneficiario, proceso que se realiza en cumplimiento a"
+" lo estipulado en el Articulo 2.1.13.5 del Decreto  Único Reglamentario de Sector Salud N° 780 de 2016 y a las disposici"
+"ones que regulan este Régimen de excepción en la resolución N° 1651 de 2019 \"Por la cual se unifican y actualizan los r"
+"equisitos para el registro de novedades, afiliación, validación y extinción de derechos, para los afiliados y beneficiar"
+"ios  del Subsistema de Salud de las Fuerzas Militares y se dictan otras disposiciones\", normatividad que en su artículo"
+" 16 estipulo la prohibición de multiafiliaciones indicando lo siguiente: \n\n \"Ninguna persona podrá estar registrada e"
+"n una Entidad Promotora de Salud (EPS) o Empresa Administradora de planes de Beneficios (EAPB)  del régimen contributivo"
+", subsidiado, de excepción o especial simultáneamente con el Subsistema de Salud de las Fuerzas Militares, en calidad de"
+" afiliado, de conformidad con lo establecido en el Decreto Ley 1795 de 2000 en su Artículo 24 parágrafo 4º o demás norma"
+"s que lo adicionen, modifiquen o sustituyan y el Decreto 780 de 2016 único reglamentario del sector salud en su artículo"
+" 2.1.13.5 o normas que lo adicionen, modifiquen o sustituyan\".\n\nLa presente comunicación tiene los efectos establecid"
+"os en los Artículos 54, 55, y 56 de la Ley 1437 de 2011.\n\nSeñor Usuario no conteste a este correo electrónico: 1. Para"
+" información de trámites y servicios ingrese a www.sanidadfuerzasmilitares.mil.co / 2. Para trámites en línea ingrese a "
+"https://portal.saludsis.mil.co / 3. Para peticiones, quejas, reclamos, solicitudes o felicitaciones ingrese a https://pq"
+"r.sanidadfuerzasmilitares.mil.co/index.php?idcategoria=34445 / 4. Chat de afiliaciones todos los martes de 8:00 a.m. a 3"
+":00 p.m.\n\nAtentamente, \n\n\nGrupo de Gestión de la Afiliación \nDirección General de Sanidad Militar") == null || "".equals("Bogotá D.C., "+TalendDate.getCurrentDate()+"\n \n \n \nRespetuosamente, me permito informar que de acuerdo al intercambio de información entre el Subsistema de Sal"
+"ud de las Fuerzas Militares y el Ministerio de Salud y la Protección Social, se están realizando seguimiento a las multi"
+"afiliaciones evidenciadas por la Administradora de los Recursos del Sistema General de Seguridad Social en Salud ADRES."
+"\n\nPor lo anterior, mediante el presente correo me permito adjuntar documento a través del cual se le notifica sobre la "
+"situación de multiafiliacion en que se encuentra(n) incurso(s) su beneficiario, proceso que se realiza en cumplimiento a"
+" lo estipulado en el Articulo 2.1.13.5 del Decreto  Único Reglamentario de Sector Salud N° 780 de 2016 y a las disposici"
+"ones que regulan este Régimen de excepción en la resolución N° 1651 de 2019 \"Por la cual se unifican y actualizan los r"
+"equisitos para el registro de novedades, afiliación, validación y extinción de derechos, para los afiliados y beneficiar"
+"ios  del Subsistema de Salud de las Fuerzas Militares y se dictan otras disposiciones\", normatividad que en su artículo"
+" 16 estipulo la prohibición de multiafiliaciones indicando lo siguiente: \n\n \"Ninguna persona podrá estar registrada e"
+"n una Entidad Promotora de Salud (EPS) o Empresa Administradora de planes de Beneficios (EAPB)  del régimen contributivo"
+", subsidiado, de excepción o especial simultáneamente con el Subsistema de Salud de las Fuerzas Militares, en calidad de"
+" afiliado, de conformidad con lo establecido en el Decreto Ley 1795 de 2000 en su Artículo 24 parágrafo 4º o demás norma"
+"s que lo adicionen, modifiquen o sustituyan y el Decreto 780 de 2016 único reglamentario del sector salud en su artículo"
+" 2.1.13.5 o normas que lo adicionen, modifiquen o sustituyan\".\n\nLa presente comunicación tiene los efectos establecid"
+"os en los Artículos 54, 55, y 56 de la Ley 1437 de 2011.\n\nSeñor Usuario no conteste a este correo electrónico: 1. Para"
+" información de trámites y servicios ingrese a www.sanidadfuerzasmilitares.mil.co / 2. Para trámites en línea ingrese a "
+"https://portal.saludsis.mil.co / 3. Para peticiones, quejas, reclamos, solicitudes o felicitaciones ingrese a https://pq"
+"r.sanidadfuerzasmilitares.mil.co/index.php?idcategoria=34445 / 4. Chat de afiliaciones todos los martes de 8:00 a.m. a 3"
+":00 p.m.\n\nAtentamente, \n\n\nGrupo de Gestión de la Afiliación \nDirección General de Sanidad Militar")) ? "\"\"" : ("Bogotá D.C., "+TalendDate.getCurrentDate()+"\n \n \n \nRespetuosamente, me permito informar que de acuerdo al intercambio de información entre el Subsistema de Sal"
+"ud de las Fuerzas Militares y el Ministerio de Salud y la Protección Social, se están realizando seguimiento a las multi"
+"afiliaciones evidenciadas por la Administradora de los Recursos del Sistema General de Seguridad Social en Salud ADRES."
+"\n\nPor lo anterior, mediante el presente correo me permito adjuntar documento a través del cual se le notifica sobre la "
+"situación de multiafiliacion en que se encuentra(n) incurso(s) su beneficiario, proceso que se realiza en cumplimiento a"
+" lo estipulado en el Articulo 2.1.13.5 del Decreto  Único Reglamentario de Sector Salud N° 780 de 2016 y a las disposici"
+"ones que regulan este Régimen de excepción en la resolución N° 1651 de 2019 \"Por la cual se unifican y actualizan los r"
+"equisitos para el registro de novedades, afiliación, validación y extinción de derechos, para los afiliados y beneficiar"
+"ios  del Subsistema de Salud de las Fuerzas Militares y se dictan otras disposiciones\", normatividad que en su artículo"
+" 16 estipulo la prohibición de multiafiliaciones indicando lo siguiente: \n\n \"Ninguna persona podrá estar registrada e"
+"n una Entidad Promotora de Salud (EPS) o Empresa Administradora de planes de Beneficios (EAPB)  del régimen contributivo"
+", subsidiado, de excepción o especial simultáneamente con el Subsistema de Salud de las Fuerzas Militares, en calidad de"
+" afiliado, de conformidad con lo establecido en el Decreto Ley 1795 de 2000 en su Artículo 24 parágrafo 4º o demás norma"
+"s que lo adicionen, modifiquen o sustituyan y el Decreto 780 de 2016 único reglamentario del sector salud en su artículo"
+" 2.1.13.5 o normas que lo adicionen, modifiquen o sustituyan\".\n\nLa presente comunicación tiene los efectos establecid"
+"os en los Artículos 54, 55, y 56 de la Ley 1437 de 2011.\n\nSeñor Usuario no conteste a este correo electrónico: 1. Para"
+" información de trámites y servicios ingrese a www.sanidadfuerzasmilitares.mil.co / 2. Para trámites en línea ingrese a "
+"https://portal.saludsis.mil.co / 3. Para peticiones, quejas, reclamos, solicitudes o felicitaciones ingrese a https://pq"
+"r.sanidadfuerzasmilitares.mil.co/index.php?idcategoria=34445 / 4. Chat de afiliaciones todos los martes de 8:00 a.m. a 3"
+":00 p.m.\n\nAtentamente, \n\n\nGrupo de Gestión de la Afiliación \nDirección General de Sanidad Militar") ;
	java.util.Properties props_tSendMail_1 = System.getProperties();     
	props_tSendMail_1.put("mail.smtp.host", smtpHost_tSendMail_1);
	props_tSendMail_1.put("mail.smtp.port", smtpPort_tSendMail_1);
	
		props_tSendMail_1.put("mail.mime.encodefilename", "true");     
	try {
		
		
			props_tSendMail_1.put("mail.smtp.auth", "true");
			javax.mail.Session session_tSendMail_1 = javax.mail.Session.getInstance(props_tSendMail_1, new javax.mail.Authenticator(){         
				protected javax.mail.PasswordAuthentication getPasswordAuthentication() {
				
                
	final String decryptedPassword_tSendMail_1 = context.mail_PasswordMail; 
				
				
				return new javax.mail.PasswordAuthentication(context.mail_UsernameMail, decryptedPassword_tSendMail_1); 
				}         
			});   
		
		
		javax.mail.Message msg_tSendMail_1 = new javax.mail.internet.MimeMessage(session_tSendMail_1);
		msg_tSendMail_1.setFrom(new javax.mail.internet.InternetAddress(from_tSendMail_1, "Dirección general de sanidad militar"));
		msg_tSendMail_1.setRecipients(javax.mail.Message.RecipientType.TO,javax.mail.internet.InternetAddress.parse(to_tSendMail_1, false));
		if (cc_tSendMail_1 != null) msg_tSendMail_1.setRecipients(javax.mail.Message.RecipientType.CC, javax.mail.internet.InternetAddress.parse(cc_tSendMail_1, false));
		if (bcc_tSendMail_1 != null) msg_tSendMail_1.setRecipients(javax.mail.Message.RecipientType.BCC, javax.mail.internet.InternetAddress.parse(bcc_tSendMail_1, false));
		msg_tSendMail_1.setSubject(subject_tSendMail_1);

		for (int i_tSendMail_1 = 0; i_tSendMail_1 < headers_tSendMail_1.size(); i_tSendMail_1++) {
			java.util.Map<String, String> header_tSendMail_1 = headers_tSendMail_1.get(i_tSendMail_1);
			msg_tSendMail_1.setHeader(header_tSendMail_1.get("KEY"), header_tSendMail_1.get("VALUE"));    
		}  
		msg_tSendMail_1.setSentDate(new Date());
		msg_tSendMail_1.setHeader("X-Priority", "3"); //High->1 Normal->3 Low->5
		javax.mail.Multipart mp_tSendMail_1 = new javax.mail.internet.MimeMultipart();
		javax.mail.internet.MimeBodyPart mbpText_tSendMail_1 = new javax.mail.internet.MimeBodyPart();
		mbpText_tSendMail_1.setText(message_tSendMail_1,"ISO-8859-15", "plain");
		mp_tSendMail_1.addBodyPart(mbpText_tSendMail_1);
  
		javax.mail.internet.MimeBodyPart mbpFile_tSendMail_1 = null;

		for (int i_tSendMail_1 = 0; i_tSendMail_1 < attachments_tSendMail_1.size(); i_tSendMail_1++){
			String filename_tSendMail_1 = attachments_tSendMail_1.get(i_tSendMail_1);
			javax.activation.FileDataSource fds_tSendMail_1 = null;
			java.io.File file_tSendMail_1 = new java.io.File(filename_tSendMail_1);
			
				if (!file_tSendMail_1.exists()){
					continue;
				}
			
    		if (file_tSendMail_1.isDirectory()){
				java.io.File[] subFiles_tSendMail_1 = file_tSendMail_1.listFiles();
				for(java.io.File subFile_tSendMail_1 : subFiles_tSendMail_1){
					if (subFile_tSendMail_1.isFile()){
						fds_tSendMail_1 = new javax.activation.FileDataSource(subFile_tSendMail_1.getAbsolutePath());
						mbpFile_tSendMail_1 = new javax.mail.internet.MimeBodyPart();
						mbpFile_tSendMail_1.setDataHandler(new javax.activation.DataHandler(fds_tSendMail_1));
						mbpFile_tSendMail_1.setFileName(javax.mail.internet.MimeUtility.encodeText(fds_tSendMail_1.getName()));
						if(contentTransferEncoding_tSendMail_1.get(i_tSendMail_1).equalsIgnoreCase("base64")){
							mbpFile_tSendMail_1.setHeader("Content-Transfer-Encoding", "base64");
						}
						mp_tSendMail_1.addBodyPart(mbpFile_tSendMail_1);
					}
				}
    		}else{
				mbpFile_tSendMail_1 = new javax.mail.internet.MimeBodyPart();
				fds_tSendMail_1 = new javax.activation.FileDataSource(filename_tSendMail_1);
				mbpFile_tSendMail_1.setDataHandler(new javax.activation.DataHandler(fds_tSendMail_1)); 
				mbpFile_tSendMail_1.setFileName(javax.mail.internet.MimeUtility.encodeText(fds_tSendMail_1.getName()));
				if(contentTransferEncoding_tSendMail_1.get(i_tSendMail_1).equalsIgnoreCase("base64")){
					mbpFile_tSendMail_1.setHeader("Content-Transfer-Encoding", "base64");
				}
				mp_tSendMail_1.addBodyPart(mbpFile_tSendMail_1);
			}
		}
		// -- set the content --
		msg_tSendMail_1.setContent(mp_tSendMail_1);
		// add handlers for main MIME types
		javax.activation.MailcapCommandMap mc_tSendMail_1 = ( javax.activation.MailcapCommandMap)javax.activation.CommandMap.getDefaultCommandMap();
		mc_tSendMail_1.addMailcap("text/html;; x-java-content-handler=com.sun.mail.handlers.text_html");
		mc_tSendMail_1.addMailcap("text/xml;; x-java-content-handler=com.sun.mail.handlers.text_xml");
		mc_tSendMail_1.addMailcap("text/plain;; x-java-content-handler=com.sun.mail.handlers.text_plain");
		mc_tSendMail_1.addMailcap("multipart/*;; x-java-content-handler=com.sun.mail.handlers.multipart_mixed");
		mc_tSendMail_1.addMailcap("message/rfc822;; x-java-content-handler=com.sun.mail.handlers.message_rfc822");
		javax.activation.CommandMap.setDefaultCommandMap(mc_tSendMail_1);
		// add com.sun.mail.handlers to job imports / depenencies (TESB-27110)
		com.sun.mail.handlers.text_plain text_plain_h_tSendMail_1 = null;
		// -- Send the message --
		javax.mail.Transport.send(msg_tSendMail_1);
	} catch(java.lang.Exception e){
globalMap.put("tSendMail_1_ERROR_MESSAGE",e.getMessage());
  		
			
  			System.err.println(e.toString());
		
	}finally{
		props_tSendMail_1.remove("mail.smtp.host");
		props_tSendMail_1.remove("mail.smtp.port");
		
		props_tSendMail_1.remove("mail.mime.encodefilename");
		
		props_tSendMail_1.remove("mail.smtp.auth");     
	}

 


	tos_count_tSendMail_1++;

/**
 * [tSendMail_1 main ] stop
 */
	
	/**
	 * [tSendMail_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tSendMail_1";
	
	

 



/**
 * [tSendMail_1 process_data_begin ] stop
 */
	
	/**
	 * [tSendMail_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tSendMail_1";
	
	

 



/**
 * [tSendMail_1 process_data_end ] stop
 */



	
	/**
	 * [tHttpRequest_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tHttpRequest_1";
	
	

 



/**
 * [tHttpRequest_1 process_data_end ] stop
 */

} // End of branch "salidaMultiCorreoTitulares"




	
	/**
	 * [tMap_7 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_7";
	
	

 



/**
 * [tMap_7 process_data_end ] stop
 */

} // End of branch "salidaMultiafiliacion"




	
	/**
	 * [tMap_6 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_6";
	
	

 



/**
 * [tMap_6 process_data_end ] stop
 */

} // End of branch "out3"




	
	/**
	 * [tMap_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_4";
	
	

 



/**
 * [tMap_4 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_7 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_7";
	
	

 



/**
 * [tOracleInput_7 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_7 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_7";
	
	

}
}finally{
	if (rs_tOracleInput_7 != null) {
		rs_tOracleInput_7.close();
	}
	if (stmt_tOracleInput_7 != null) {
		stmt_tOracleInput_7.close();
	}
}

globalMap.put("tOracleInput_7_NB_LINE",nb_line_tOracleInput_7);
 

ok_Hash.put("tOracleInput_7", true);
end_Hash.put("tOracleInput_7", System.currentTimeMillis());




/**
 * [tOracleInput_7 end ] stop
 */

	
	/**
	 * [tMap_4 end ] start
	 */

	

	
	
	currentComponent="tMap_4";
	
	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_row20 != null) {
						tHash_Lookup_row20.endGet();
					}
					globalMap.remove( "tHash_Lookup_row20" );

					
					
				
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row14");
			  	}
			  	
 

ok_Hash.put("tMap_4", true);
end_Hash.put("tMap_4", System.currentTimeMillis());




/**
 * [tMap_4 end ] stop
 */

	
	/**
	 * [tMap_6 end ] start
	 */

	

	
	
	currentComponent="tMap_6";
	
	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_row17 != null) {
						tHash_Lookup_row17.endGet();
					}
					globalMap.remove( "tHash_Lookup_row17" );

					
					
				
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"out3");
			  	}
			  	
 

ok_Hash.put("tMap_6", true);
end_Hash.put("tMap_6", System.currentTimeMillis());




/**
 * [tMap_6 end ] stop
 */

	
	/**
	 * [tMap_7 end ] start
	 */

	

	
	
	currentComponent="tMap_7";
	
	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_row2 != null) {
						tHash_Lookup_row2.endGet();
					}
					globalMap.remove( "tHash_Lookup_row2" );

					
					
				
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"salidaMultiafiliacion");
			  	}
			  	
 

ok_Hash.put("tMap_7", true);
end_Hash.put("tMap_7", System.currentTimeMillis());




/**
 * [tMap_7 end ] stop
 */

	
	/**
	 * [tHttpRequest_2 end ] start
	 */

	

	
	
	currentComponent="tHttpRequest_2";
	
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"salidaMultiCorreo");
			  	}
			  	
 

ok_Hash.put("tHttpRequest_2", true);
end_Hash.put("tHttpRequest_2", System.currentTimeMillis());




/**
 * [tHttpRequest_2 end ] stop
 */

	
	/**
	 * [tSendMail_2 end ] start
	 */

	

	
	
	currentComponent="tSendMail_2";
	
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row13");
			  	}
			  	
 

ok_Hash.put("tSendMail_2", true);
end_Hash.put("tSendMail_2", System.currentTimeMillis());




/**
 * [tSendMail_2 end ] stop
 */

	
	/**
	 * [tJavaRow_4 end ] start
	 */

	

	
	
	currentComponent="tJavaRow_4";
	
	

globalMap.put("tJavaRow_4_NB_LINE",nb_line_tJavaRow_4);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row15");
			  	}
			  	
 

ok_Hash.put("tJavaRow_4", true);
end_Hash.put("tJavaRow_4", System.currentTimeMillis());




/**
 * [tJavaRow_4 end ] stop
 */

	
	/**
	 * [tOracleSP_3 end ] start
	 */

	

	
	
	currentComponent="tOracleSP_3";
	
	


	statement_tOracleSP_3.close();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row16");
			  	}
			  	
 

ok_Hash.put("tOracleSP_3", true);
end_Hash.put("tOracleSP_3", System.currentTimeMillis());




/**
 * [tOracleSP_3 end ] stop
 */













	
	/**
	 * [tJavaRow_5 end ] start
	 */

	

	
	
	currentComponent="tJavaRow_5";
	
	

globalMap.put("tJavaRow_5_NB_LINE",nb_line_tJavaRow_5);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"salidaMultiSinCorreo");
			  	}
			  	
 

ok_Hash.put("tJavaRow_5", true);
end_Hash.put("tJavaRow_5", System.currentTimeMillis());




/**
 * [tJavaRow_5 end ] stop
 */

	
	/**
	 * [tOracleSP_4 end ] start
	 */

	

	
	
	currentComponent="tOracleSP_4";
	
	


	statement_tOracleSP_4.close();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row18");
			  	}
			  	
 

ok_Hash.put("tOracleSP_4", true);
end_Hash.put("tOracleSP_4", System.currentTimeMillis());




/**
 * [tOracleSP_4 end ] stop
 */







	
	/**
	 * [tMap_1 end ] start
	 */

	

	
	
	currentComponent="tMap_1";
	
	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_row4 != null) {
						tHash_Lookup_row4.endGet();
					}
					globalMap.remove( "tHash_Lookup_row4" );

					
					
				
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"salidaArchivo");
			  	}
			  	
 

ok_Hash.put("tMap_1", true);
end_Hash.put("tMap_1", System.currentTimeMillis());




/**
 * [tMap_1 end ] stop
 */

	
	/**
	 * [tFileOutputDelimited_1 end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";
	
	



		
			
					if(outtFileOutputDelimited_1!=null) {
						outtFileOutputDelimited_1.flush();
						outtFileOutputDelimited_1.close();
					}
				
				globalMap.put("tFileOutputDelimited_1_NB_LINE",nb_line_tFileOutputDelimited_1);
				globalMap.put("tFileOutputDelimited_1_FILE_NAME",fileName_tFileOutputDelimited_1);
			
		
		
		resourceMap.put("finish_tFileOutputDelimited_1", true);
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"salidaReporteMultiAfi");
			  	}
			  	
 

ok_Hash.put("tFileOutputDelimited_1", true);
end_Hash.put("tFileOutputDelimited_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk11", 0, "ok");
				}
				tJava_6Process(globalMap);



/**
 * [tFileOutputDelimited_1 end ] stop
 */







	
	/**
	 * [tHttpRequest_1 end ] start
	 */

	

	
	
	currentComponent="tHttpRequest_1";
	
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"salidaMultiCorreoTitulares");
			  	}
			  	
 

ok_Hash.put("tHttpRequest_1", true);
end_Hash.put("tHttpRequest_1", System.currentTimeMillis());




/**
 * [tHttpRequest_1 end ] stop
 */

	
	/**
	 * [tSendMail_1 end ] start
	 */

	

	
	
	currentComponent="tSendMail_1";
	
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row7");
			  	}
			  	
 

ok_Hash.put("tSendMail_1", true);
end_Hash.put("tSendMail_1", System.currentTimeMillis());




/**
 * [tSendMail_1 end ] stop
 */















				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
					     			//free memory for "tMap_1"
					     			globalMap.remove("tHash_Lookup_row4"); 
				     			
					     			//free memory for "tMap_7"
					     			globalMap.remove("tHash_Lookup_row2"); 
				     			
					     			//free memory for "tMap_6"
					     			globalMap.remove("tHash_Lookup_row17"); 
				     			
					     			//free memory for "tMap_4"
					     			globalMap.remove("tHash_Lookup_row20"); 
				     			
				try{
					
	
	/**
	 * [tOracleInput_7 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_7";
	
	

 



/**
 * [tOracleInput_7 finally ] stop
 */

	
	/**
	 * [tMap_4 finally ] start
	 */

	

	
	
	currentComponent="tMap_4";
	
	

 



/**
 * [tMap_4 finally ] stop
 */

	
	/**
	 * [tMap_6 finally ] start
	 */

	

	
	
	currentComponent="tMap_6";
	
	

 



/**
 * [tMap_6 finally ] stop
 */

	
	/**
	 * [tMap_7 finally ] start
	 */

	

	
	
	currentComponent="tMap_7";
	
	

 



/**
 * [tMap_7 finally ] stop
 */

	
	/**
	 * [tHttpRequest_2 finally ] start
	 */

	

	
	
	currentComponent="tHttpRequest_2";
	
	

 



/**
 * [tHttpRequest_2 finally ] stop
 */

	
	/**
	 * [tSendMail_2 finally ] start
	 */

	

	
	
	currentComponent="tSendMail_2";
	
	

 



/**
 * [tSendMail_2 finally ] stop
 */

	
	/**
	 * [tJavaRow_4 finally ] start
	 */

	

	
	
	currentComponent="tJavaRow_4";
	
	

 



/**
 * [tJavaRow_4 finally ] stop
 */

	
	/**
	 * [tOracleSP_3 finally ] start
	 */

	

	
	
	currentComponent="tOracleSP_3";
	
	

 



/**
 * [tOracleSP_3 finally ] stop
 */













	
	/**
	 * [tJavaRow_5 finally ] start
	 */

	

	
	
	currentComponent="tJavaRow_5";
	
	

 



/**
 * [tJavaRow_5 finally ] stop
 */

	
	/**
	 * [tOracleSP_4 finally ] start
	 */

	

	
	
	currentComponent="tOracleSP_4";
	
	

 



/**
 * [tOracleSP_4 finally ] stop
 */







	
	/**
	 * [tMap_1 finally ] start
	 */

	

	
	
	currentComponent="tMap_1";
	
	

 



/**
 * [tMap_1 finally ] stop
 */

	
	/**
	 * [tFileOutputDelimited_1 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";
	
	


		if(resourceMap.get("finish_tFileOutputDelimited_1") == null){ 
			
				
						java.io.Writer outtFileOutputDelimited_1 = (java.io.Writer)resourceMap.get("out_tFileOutputDelimited_1");
						if(outtFileOutputDelimited_1!=null) {
							outtFileOutputDelimited_1.flush();
							outtFileOutputDelimited_1.close();
						}
					
				
			
		}
	

 



/**
 * [tFileOutputDelimited_1 finally ] stop
 */







	
	/**
	 * [tHttpRequest_1 finally ] start
	 */

	

	
	
	currentComponent="tHttpRequest_1";
	
	

 



/**
 * [tHttpRequest_1 finally ] stop
 */

	
	/**
	 * [tSendMail_1 finally ] start
	 */

	

	
	
	currentComponent="tSendMail_1";
	
	

 



/**
 * [tSendMail_1 finally ] stop
 */















				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_7_SUBPROCESS_STATE", 1);
	}
	


public void tJava_6Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_6_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tJava_6 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_6", false);
		start_Hash.put("tJava_6", System.currentTimeMillis());
		
	
	currentComponent="tJava_6";
	
	
		int tos_count_tJava_6 = 0;
		


//****************************************************************************************//
//*** ALMACENAMIENTO EN VARIABLES DE CONTEXTO DE LA NUEVA POSICION DE LA CONSULTA     ****//
//****************************************************************************************//
context.auxPosicionRegistros=context.auxPosicionRegistros+context.auxAumentoRegistros;

//****************************************************************************************//
//*** ALMACENAMIENTO EN VARIABLES DE CONTEXTO DE LOS DATOS OBTENIDOS DE LA CONSULTA   ****//
//****************************************************************************************//
context.infoConteoRegistros=(Integer)globalMap.get("tOracleInput_7_NB_LINE");

 



/**
 * [tJava_6 begin ] stop
 */
	
	/**
	 * [tJava_6 main ] start
	 */

	

	
	
	currentComponent="tJava_6";
	
	

 


	tos_count_tJava_6++;

/**
 * [tJava_6 main ] stop
 */
	
	/**
	 * [tJava_6 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_6";
	
	

 



/**
 * [tJava_6 process_data_begin ] stop
 */
	
	/**
	 * [tJava_6 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_6";
	
	

 



/**
 * [tJava_6 process_data_end ] stop
 */
	
	/**
	 * [tJava_6 end ] start
	 */

	

	
	
	currentComponent="tJava_6";
	
	

 

ok_Hash.put("tJava_6", true);
end_Hash.put("tJava_6", System.currentTimeMillis());




/**
 * [tJava_6 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_6 finally ] start
	 */

	

	
	
	currentComponent="tJava_6";
	
	

 



/**
 * [tJava_6 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_6_SUBPROCESS_STATE", 1);
	}
	


public static class row20Struct implements routines.system.IPersistableComparableLookupRow<row20Struct> {
    final static byte[] commonByteArrayLock_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion = new byte[0];
    static byte[] commonByteArray_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public Integer ID;

				public Integer getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return true;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return 0;
				}
				public Integer IDPrecision(){
				    return 0;
				}
				public String IDDefault(){
				
					return null;
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public String NOMBRE;

				public String getNOMBRE () {
					return this.NOMBRE;
				}

				public Boolean NOMBREIsNullable(){
				    return true;
				}
				public Boolean NOMBREIsKey(){
				    return false;
				}
				public Integer NOMBRELength(){
				    return 0;
				}
				public Integer NOMBREPrecision(){
				    return 0;
				}
				public String NOMBREDefault(){
				
					return null;
				
				}
				public String NOMBREComment(){
				
				    return "";
				
				}
				public String NOMBREPattern(){
				
					return "";
				
				}
				public String NOMBREOriginalDbColumnName(){
				
					return "NOMBRE";
				
				}

				
			    public String SIGLA;

				public String getSIGLA () {
					return this.SIGLA;
				}

				public Boolean SIGLAIsNullable(){
				    return true;
				}
				public Boolean SIGLAIsKey(){
				    return false;
				}
				public Integer SIGLALength(){
				    return 0;
				}
				public Integer SIGLAPrecision(){
				    return 0;
				}
				public String SIGLADefault(){
				
					return null;
				
				}
				public String SIGLAComment(){
				
				    return "";
				
				}
				public String SIGLAPattern(){
				
					return "";
				
				}
				public String SIGLAOriginalDbColumnName(){
				
					return "SIGLA";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.ID == null) ? 0 : this.ID.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row20Struct other = (row20Struct) obj;
		
						if (this.ID == null) {
							if (other.ID != null)
								return false;
						
						} else if (!this.ID.equals(other.ID))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row20Struct other) {

		other.ID = this.ID;
	            other.NOMBRE = this.NOMBRE;
	            other.SIGLA = this.SIGLA;
	            
	}

	public void copyKeysDataTo(row20Struct other) {

		other.ID = this.ID;
	            	
	}



	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}
	
	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			unmarshaller.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private void writeString(String str, DataOutputStream dos, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion) {

        	try {

        		int length = 0;
		
						this.ID = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion) {

        	try {

        		int length = 0;
		
						this.ID = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.ID,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.ID,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.NOMBRE = readString(dis,ois);
					
						this.SIGLA = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		
						this.NOMBRE = readString(dis,objectIn);
					
						this.SIGLA = readString(dis,objectIn);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeString(this.NOMBRE, dos, oos);
					
						writeString(this.SIGLA, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
						writeString(this.NOMBRE, dos, objectOut);
					
						writeString(this.SIGLA, dos, objectOut);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",NOMBRE="+NOMBRE);
		sb.append(",SIGLA="+SIGLA);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row20Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.ID, other.ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tHashInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tHashInput_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row20Struct row20 = new row20Struct();




	
	/**
	 * [tAdvancedHash_row20 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row20", false);
		start_Hash.put("tAdvancedHash_row20", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row20";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row20");
					}
				
		int tos_count_tAdvancedHash_row20 = 0;
		

			   		// connection name:row20
			   		// source node:tHashInput_1 - inputs:(after_tOracleInput_7) outputs:(row20,row20) | target node:tAdvancedHash_row20 - inputs:(row20) outputs:()
			   		// linked node: tMap_4 - inputs:(row14,row20) outputs:(out3)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row20 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.FIRST_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row20Struct> tHash_Lookup_row20 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row20Struct>getLookup(matchingModeEnum_row20);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row20", tHash_Lookup_row20);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row20 begin ] stop
 */



	
	/**
	 * [tHashInput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_1", false);
		start_Hash.put("tHashInput_1", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_1";
	
	
		int tos_count_tHashInput_1 = 0;
		


int nb_line_tHashInput_1 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_1=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row11_0Struct> tHashFile_tHashInput_1 = mf_tHashInput_1.getAdvancedMemoryHashFile("tHashFile_MinSaludEtapa3Multiafiliacion_" + pid +"_tHashOutput_2");
if(tHashFile_tHashInput_1==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<row11_0Struct> iterator_tHashInput_1 = tHashFile_tHashInput_1.iterator();
while (iterator_tHashInput_1.hasNext()) {
    row11_0Struct next_tHashInput_1 = iterator_tHashInput_1.next();

	row20.ID = next_tHashInput_1.ID;
	row20.NOMBRE = next_tHashInput_1.NOMBRE;
	row20.SIGLA = next_tHashInput_1.SIGLA;

 



/**
 * [tHashInput_1 begin ] stop
 */
	
	/**
	 * [tHashInput_1 main ] start
	 */

	

	
	
	currentComponent="tHashInput_1";
	
	

 


	tos_count_tHashInput_1++;

/**
 * [tHashInput_1 main ] stop
 */
	
	/**
	 * [tHashInput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashInput_1";
	
	

 



/**
 * [tHashInput_1 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row20 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row20";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row20"
						
						);
					}
					


			   
			   

					row20Struct row20_HashRow = new row20Struct();
		   	   	   
				
				row20_HashRow.ID = row20.ID;
				
				row20_HashRow.NOMBRE = row20.NOMBRE;
				
				row20_HashRow.SIGLA = row20.SIGLA;
				
			tHash_Lookup_row20.put(row20_HashRow);
			
            




 


	tos_count_tAdvancedHash_row20++;

/**
 * [tAdvancedHash_row20 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row20 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row20";
	
	

 



/**
 * [tAdvancedHash_row20 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row20 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row20";
	
	

 



/**
 * [tAdvancedHash_row20 process_data_end ] stop
 */



	
	/**
	 * [tHashInput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashInput_1";
	
	

 



/**
 * [tHashInput_1 process_data_end ] stop
 */
	
	/**
	 * [tHashInput_1 end ] start
	 */

	

	
	
	currentComponent="tHashInput_1";
	
	
    

		
			nb_line_tHashInput_1++;
		}	
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_MinSaludEtapa3Multiafiliacion_" + pid +"_tHashOutput_2");
	


	globalMap.put("tHashInput_1_NB_LINE", nb_line_tHashInput_1);       

 

ok_Hash.put("tHashInput_1", true);
end_Hash.put("tHashInput_1", System.currentTimeMillis());




/**
 * [tHashInput_1 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row20 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row20";
	
	

tHash_Lookup_row20.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row20");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row20", true);
end_Hash.put("tAdvancedHash_row20", System.currentTimeMillis());




/**
 * [tAdvancedHash_row20 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tHashInput_1 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_1";
	
	

 



/**
 * [tHashInput_1 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row20 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row20";
	
	

 



/**
 * [tAdvancedHash_row20 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tHashInput_1_SUBPROCESS_STATE", 1);
	}
	


public static class row17Struct implements routines.system.IPersistableComparableLookupRow<row17Struct> {
    final static byte[] commonByteArrayLock_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion = new byte[0];
    static byte[] commonByteArray_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public Integer consecutivoAfiliado;

				public Integer getConsecutivoAfiliado () {
					return this.consecutivoAfiliado;
				}

				public Boolean consecutivoAfiliadoIsNullable(){
				    return true;
				}
				public Boolean consecutivoAfiliadoIsKey(){
				    return false;
				}
				public Integer consecutivoAfiliadoLength(){
				    return 0;
				}
				public Integer consecutivoAfiliadoPrecision(){
				    return 0;
				}
				public String consecutivoAfiliadoDefault(){
				
					return null;
				
				}
				public String consecutivoAfiliadoComment(){
				
				    return "";
				
				}
				public String consecutivoAfiliadoPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String consecutivoAfiliadoOriginalDbColumnName(){
				
					return "consecutivoAfiliado";
				
				}

				
			    public String tipoDocumentoAfiliado;

				public String getTipoDocumentoAfiliado () {
					return this.tipoDocumentoAfiliado;
				}

				public Boolean tipoDocumentoAfiliadoIsNullable(){
				    return true;
				}
				public Boolean tipoDocumentoAfiliadoIsKey(){
				    return false;
				}
				public Integer tipoDocumentoAfiliadoLength(){
				    return 0;
				}
				public Integer tipoDocumentoAfiliadoPrecision(){
				    return 0;
				}
				public String tipoDocumentoAfiliadoDefault(){
				
					return null;
				
				}
				public String tipoDocumentoAfiliadoComment(){
				
				    return "";
				
				}
				public String tipoDocumentoAfiliadoPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String tipoDocumentoAfiliadoOriginalDbColumnName(){
				
					return "tipoDocumentoAfiliado";
				
				}

				
			    public String numeroIdentificacionAfiliado;

				public String getNumeroIdentificacionAfiliado () {
					return this.numeroIdentificacionAfiliado;
				}

				public Boolean numeroIdentificacionAfiliadoIsNullable(){
				    return true;
				}
				public Boolean numeroIdentificacionAfiliadoIsKey(){
				    return false;
				}
				public Integer numeroIdentificacionAfiliadoLength(){
				    return 0;
				}
				public Integer numeroIdentificacionAfiliadoPrecision(){
				    return 0;
				}
				public String numeroIdentificacionAfiliadoDefault(){
				
					return null;
				
				}
				public String numeroIdentificacionAfiliadoComment(){
				
				    return "";
				
				}
				public String numeroIdentificacionAfiliadoPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String numeroIdentificacionAfiliadoOriginalDbColumnName(){
				
					return "numeroIdentificacionAfiliado";
				
				}

				
			    public String primerApellidoAfiliado;

				public String getPrimerApellidoAfiliado () {
					return this.primerApellidoAfiliado;
				}

				public Boolean primerApellidoAfiliadoIsNullable(){
				    return true;
				}
				public Boolean primerApellidoAfiliadoIsKey(){
				    return false;
				}
				public Integer primerApellidoAfiliadoLength(){
				    return 0;
				}
				public Integer primerApellidoAfiliadoPrecision(){
				    return 0;
				}
				public String primerApellidoAfiliadoDefault(){
				
					return null;
				
				}
				public String primerApellidoAfiliadoComment(){
				
				    return "";
				
				}
				public String primerApellidoAfiliadoPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String primerApellidoAfiliadoOriginalDbColumnName(){
				
					return "primerApellidoAfiliado";
				
				}

				
			    public String segundoApellidoAfiliado;

				public String getSegundoApellidoAfiliado () {
					return this.segundoApellidoAfiliado;
				}

				public Boolean segundoApellidoAfiliadoIsNullable(){
				    return true;
				}
				public Boolean segundoApellidoAfiliadoIsKey(){
				    return false;
				}
				public Integer segundoApellidoAfiliadoLength(){
				    return 0;
				}
				public Integer segundoApellidoAfiliadoPrecision(){
				    return 0;
				}
				public String segundoApellidoAfiliadoDefault(){
				
					return null;
				
				}
				public String segundoApellidoAfiliadoComment(){
				
				    return "";
				
				}
				public String segundoApellidoAfiliadoPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String segundoApellidoAfiliadoOriginalDbColumnName(){
				
					return "segundoApellidoAfiliado";
				
				}

				
			    public String primerNombreAfiliado;

				public String getPrimerNombreAfiliado () {
					return this.primerNombreAfiliado;
				}

				public Boolean primerNombreAfiliadoIsNullable(){
				    return true;
				}
				public Boolean primerNombreAfiliadoIsKey(){
				    return false;
				}
				public Integer primerNombreAfiliadoLength(){
				    return 0;
				}
				public Integer primerNombreAfiliadoPrecision(){
				    return 0;
				}
				public String primerNombreAfiliadoDefault(){
				
					return null;
				
				}
				public String primerNombreAfiliadoComment(){
				
				    return "";
				
				}
				public String primerNombreAfiliadoPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String primerNombreAfiliadoOriginalDbColumnName(){
				
					return "primerNombreAfiliado";
				
				}

				
			    public String segundoNombreAfiliado;

				public String getSegundoNombreAfiliado () {
					return this.segundoNombreAfiliado;
				}

				public Boolean segundoNombreAfiliadoIsNullable(){
				    return true;
				}
				public Boolean segundoNombreAfiliadoIsKey(){
				    return false;
				}
				public Integer segundoNombreAfiliadoLength(){
				    return 0;
				}
				public Integer segundoNombreAfiliadoPrecision(){
				    return 0;
				}
				public String segundoNombreAfiliadoDefault(){
				
					return null;
				
				}
				public String segundoNombreAfiliadoComment(){
				
				    return "";
				
				}
				public String segundoNombreAfiliadoPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String segundoNombreAfiliadoOriginalDbColumnName(){
				
					return "segundoNombreAfiliado";
				
				}

				
			    public java.util.Date fechaNacimiento;

				public java.util.Date getFechaNacimiento () {
					return this.fechaNacimiento;
				}

				public Boolean fechaNacimientoIsNullable(){
				    return true;
				}
				public Boolean fechaNacimientoIsKey(){
				    return false;
				}
				public Integer fechaNacimientoLength(){
				    return 0;
				}
				public Integer fechaNacimientoPrecision(){
				    return 0;
				}
				public String fechaNacimientoDefault(){
				
					return null;
				
				}
				public String fechaNacimientoComment(){
				
				    return "";
				
				}
				public String fechaNacimientoPattern(){
				
					return "dd/MM/yyyy";
				
				}
				public String fechaNacimientoOriginalDbColumnName(){
				
					return "fechaNacimiento";
				
				}

				
			    public String estadoEntidad01;

				public String getEstadoEntidad01 () {
					return this.estadoEntidad01;
				}

				public Boolean estadoEntidad01IsNullable(){
				    return true;
				}
				public Boolean estadoEntidad01IsKey(){
				    return false;
				}
				public Integer estadoEntidad01Length(){
				    return 0;
				}
				public Integer estadoEntidad01Precision(){
				    return 0;
				}
				public String estadoEntidad01Default(){
				
					return null;
				
				}
				public String estadoEntidad01Comment(){
				
				    return "";
				
				}
				public String estadoEntidad01Pattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String estadoEntidad01OriginalDbColumnName(){
				
					return "estadoEntidad01";
				
				}

				
			    public java.util.Date fechaAfiliacionEntidad01;

				public java.util.Date getFechaAfiliacionEntidad01 () {
					return this.fechaAfiliacionEntidad01;
				}

				public Boolean fechaAfiliacionEntidad01IsNullable(){
				    return true;
				}
				public Boolean fechaAfiliacionEntidad01IsKey(){
				    return false;
				}
				public Integer fechaAfiliacionEntidad01Length(){
				    return 0;
				}
				public Integer fechaAfiliacionEntidad01Precision(){
				    return 0;
				}
				public String fechaAfiliacionEntidad01Default(){
				
					return null;
				
				}
				public String fechaAfiliacionEntidad01Comment(){
				
				    return "";
				
				}
				public String fechaAfiliacionEntidad01Pattern(){
				
					return "dd/MM/yyyy";
				
				}
				public String fechaAfiliacionEntidad01OriginalDbColumnName(){
				
					return "fechaAfiliacionEntidad01";
				
				}

				
			    public String codigoEntidad01;

				public String getCodigoEntidad01 () {
					return this.codigoEntidad01;
				}

				public Boolean codigoEntidad01IsNullable(){
				    return true;
				}
				public Boolean codigoEntidad01IsKey(){
				    return false;
				}
				public Integer codigoEntidad01Length(){
				    return 0;
				}
				public Integer codigoEntidad01Precision(){
				    return 0;
				}
				public String codigoEntidad01Default(){
				
					return null;
				
				}
				public String codigoEntidad01Comment(){
				
				    return "";
				
				}
				public String codigoEntidad01Pattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String codigoEntidad01OriginalDbColumnName(){
				
					return "codigoEntidad01";
				
				}

				
			    public Character tipoEntidad01;

				public Character getTipoEntidad01 () {
					return this.tipoEntidad01;
				}

				public Boolean tipoEntidad01IsNullable(){
				    return true;
				}
				public Boolean tipoEntidad01IsKey(){
				    return false;
				}
				public Integer tipoEntidad01Length(){
				    return 0;
				}
				public Integer tipoEntidad01Precision(){
				    return 0;
				}
				public String tipoEntidad01Default(){
				
					return null;
				
				}
				public String tipoEntidad01Comment(){
				
				    return "";
				
				}
				public String tipoEntidad01Pattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String tipoEntidad01OriginalDbColumnName(){
				
					return "tipoEntidad01";
				
				}

				
			    public String estadoEntidad02;

				public String getEstadoEntidad02 () {
					return this.estadoEntidad02;
				}

				public Boolean estadoEntidad02IsNullable(){
				    return true;
				}
				public Boolean estadoEntidad02IsKey(){
				    return false;
				}
				public Integer estadoEntidad02Length(){
				    return 0;
				}
				public Integer estadoEntidad02Precision(){
				    return 0;
				}
				public String estadoEntidad02Default(){
				
					return null;
				
				}
				public String estadoEntidad02Comment(){
				
				    return "";
				
				}
				public String estadoEntidad02Pattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String estadoEntidad02OriginalDbColumnName(){
				
					return "estadoEntidad02";
				
				}

				
			    public java.util.Date fechaAfiliacionEntidad02;

				public java.util.Date getFechaAfiliacionEntidad02 () {
					return this.fechaAfiliacionEntidad02;
				}

				public Boolean fechaAfiliacionEntidad02IsNullable(){
				    return true;
				}
				public Boolean fechaAfiliacionEntidad02IsKey(){
				    return false;
				}
				public Integer fechaAfiliacionEntidad02Length(){
				    return 0;
				}
				public Integer fechaAfiliacionEntidad02Precision(){
				    return 0;
				}
				public String fechaAfiliacionEntidad02Default(){
				
					return null;
				
				}
				public String fechaAfiliacionEntidad02Comment(){
				
				    return "";
				
				}
				public String fechaAfiliacionEntidad02Pattern(){
				
					return "dd/MM/yyyy";
				
				}
				public String fechaAfiliacionEntidad02OriginalDbColumnName(){
				
					return "fechaAfiliacionEntidad02";
				
				}

				
			    public String codigoEntidad02;

				public String getCodigoEntidad02 () {
					return this.codigoEntidad02;
				}

				public Boolean codigoEntidad02IsNullable(){
				    return true;
				}
				public Boolean codigoEntidad02IsKey(){
				    return false;
				}
				public Integer codigoEntidad02Length(){
				    return 0;
				}
				public Integer codigoEntidad02Precision(){
				    return 0;
				}
				public String codigoEntidad02Default(){
				
					return null;
				
				}
				public String codigoEntidad02Comment(){
				
				    return "";
				
				}
				public String codigoEntidad02Pattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String codigoEntidad02OriginalDbColumnName(){
				
					return "codigoEntidad02";
				
				}

				
			    public Character tipoEntidad02;

				public Character getTipoEntidad02 () {
					return this.tipoEntidad02;
				}

				public Boolean tipoEntidad02IsNullable(){
				    return true;
				}
				public Boolean tipoEntidad02IsKey(){
				    return false;
				}
				public Integer tipoEntidad02Length(){
				    return 0;
				}
				public Integer tipoEntidad02Precision(){
				    return 0;
				}
				public String tipoEntidad02Default(){
				
					return null;
				
				}
				public String tipoEntidad02Comment(){
				
				    return "";
				
				}
				public String tipoEntidad02Pattern(){
				
					return "";
				
				}
				public String tipoEntidad02OriginalDbColumnName(){
				
					return "tipoEntidad02";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.tipoDocumentoAfiliado == null) ? 0 : this.tipoDocumentoAfiliado.hashCode());
					
						result = prime * result + ((this.numeroIdentificacionAfiliado == null) ? 0 : this.numeroIdentificacionAfiliado.hashCode());
					
						result = prime * result + ((this.primerApellidoAfiliado == null) ? 0 : this.primerApellidoAfiliado.hashCode());
					
						result = prime * result + ((this.primerNombreAfiliado == null) ? 0 : this.primerNombreAfiliado.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row17Struct other = (row17Struct) obj;
		
						if (this.tipoDocumentoAfiliado == null) {
							if (other.tipoDocumentoAfiliado != null)
								return false;
						
						} else if (!this.tipoDocumentoAfiliado.equals(other.tipoDocumentoAfiliado))
						
							return false;
					
						if (this.numeroIdentificacionAfiliado == null) {
							if (other.numeroIdentificacionAfiliado != null)
								return false;
						
						} else if (!this.numeroIdentificacionAfiliado.equals(other.numeroIdentificacionAfiliado))
						
							return false;
					
						if (this.primerApellidoAfiliado == null) {
							if (other.primerApellidoAfiliado != null)
								return false;
						
						} else if (!this.primerApellidoAfiliado.equals(other.primerApellidoAfiliado))
						
							return false;
					
						if (this.primerNombreAfiliado == null) {
							if (other.primerNombreAfiliado != null)
								return false;
						
						} else if (!this.primerNombreAfiliado.equals(other.primerNombreAfiliado))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row17Struct other) {

		other.consecutivoAfiliado = this.consecutivoAfiliado;
	            other.tipoDocumentoAfiliado = this.tipoDocumentoAfiliado;
	            other.numeroIdentificacionAfiliado = this.numeroIdentificacionAfiliado;
	            other.primerApellidoAfiliado = this.primerApellidoAfiliado;
	            other.segundoApellidoAfiliado = this.segundoApellidoAfiliado;
	            other.primerNombreAfiliado = this.primerNombreAfiliado;
	            other.segundoNombreAfiliado = this.segundoNombreAfiliado;
	            other.fechaNacimiento = this.fechaNacimiento;
	            other.estadoEntidad01 = this.estadoEntidad01;
	            other.fechaAfiliacionEntidad01 = this.fechaAfiliacionEntidad01;
	            other.codigoEntidad01 = this.codigoEntidad01;
	            other.tipoEntidad01 = this.tipoEntidad01;
	            other.estadoEntidad02 = this.estadoEntidad02;
	            other.fechaAfiliacionEntidad02 = this.fechaAfiliacionEntidad02;
	            other.codigoEntidad02 = this.codigoEntidad02;
	            other.tipoEntidad02 = this.tipoEntidad02;
	            
	}

	public void copyKeysDataTo(row17Struct other) {

		other.tipoDocumentoAfiliado = this.tipoDocumentoAfiliado;
	            	other.numeroIdentificacionAfiliado = this.numeroIdentificacionAfiliado;
	            	other.primerApellidoAfiliado = this.primerApellidoAfiliado;
	            	other.primerNombreAfiliado = this.primerNombreAfiliado;
	            	
	}



	private Integer readInteger(DataInputStream dis, ObjectInputStream ois) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
			intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		Integer intReturn;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
			intReturn = unmarshaller.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, DataOutputStream dos,org.jboss.marshalling.Marshaller marshaller ) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion.length) {
				if(length < 1024 && commonByteArray_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion.length == 0) {
   					commonByteArray_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion = new byte[1024];
				} else {
   					commonByteArray_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion, 0, length);
			strReturn = new String(commonByteArray_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion.length) {
				if(length < 1024 && commonByteArray_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion.length == 0) {
   					commonByteArray_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion = new byte[1024];
				} else {
   					commonByteArray_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion, 0, length);
			strReturn = new String(commonByteArray_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	
	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			unmarshaller.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private void writeString(String str, DataOutputStream dos, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

	private java.util.Date readDate(DataInputStream dis, ObjectInputStream ois) throws IOException{
		java.util.Date dateReturn = null;
		int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller ) throws IOException{
		java.util.Date dateReturn = null;
		int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

	private void writeDate(java.util.Date date1, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
	}
	
	private void writeDate(java.util.Date date1, DataOutputStream dos, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion) {

        	try {

        		int length = 0;
		
					this.tipoDocumentoAfiliado = readString(dis);
					
					this.numeroIdentificacionAfiliado = readString(dis);
					
					this.primerApellidoAfiliado = readString(dis);
					
					this.primerNombreAfiliado = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion) {

        	try {

        		int length = 0;
		
					this.tipoDocumentoAfiliado = readString(dis);
					
					this.numeroIdentificacionAfiliado = readString(dis);
					
					this.primerApellidoAfiliado = readString(dis);
					
					this.primerNombreAfiliado = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.tipoDocumentoAfiliado,dos);
					
					// String
				
						writeString(this.numeroIdentificacionAfiliado,dos);
					
					// String
				
						writeString(this.primerApellidoAfiliado,dos);
					
					// String
				
						writeString(this.primerNombreAfiliado,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.tipoDocumentoAfiliado,dos);
					
					// String
				
						writeString(this.numeroIdentificacionAfiliado,dos);
					
					// String
				
						writeString(this.primerApellidoAfiliado,dos);
					
					// String
				
						writeString(this.primerNombreAfiliado,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.consecutivoAfiliado = readInteger(dis,ois);
					
						this.segundoApellidoAfiliado = readString(dis,ois);
					
						this.segundoNombreAfiliado = readString(dis,ois);
					
						this.fechaNacimiento = readDate(dis,ois);
					
						this.estadoEntidad01 = readString(dis,ois);
					
						this.fechaAfiliacionEntidad01 = readDate(dis,ois);
					
						this.codigoEntidad01 = readString(dis,ois);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.tipoEntidad01 = null;
           				} else {
           			    	this.tipoEntidad01 = dis.readChar();
           				}
					
						this.estadoEntidad02 = readString(dis,ois);
					
						this.fechaAfiliacionEntidad02 = readDate(dis,ois);
					
						this.codigoEntidad02 = readString(dis,ois);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.tipoEntidad02 = null;
           				} else {
           			    	this.tipoEntidad02 = dis.readChar();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		
						this.consecutivoAfiliado = readInteger(dis,objectIn);
					
						this.segundoApellidoAfiliado = readString(dis,objectIn);
					
						this.segundoNombreAfiliado = readString(dis,objectIn);
					
						this.fechaNacimiento = readDate(dis,objectIn);
					
						this.estadoEntidad01 = readString(dis,objectIn);
					
						this.fechaAfiliacionEntidad01 = readDate(dis,objectIn);
					
						this.codigoEntidad01 = readString(dis,objectIn);
					
			            length = objectIn.readByte();
           				if (length == -1) {
           	    			this.tipoEntidad01 = null;
           				} else {
           			    	this.tipoEntidad01 = objectIn.readChar();
           				}
					
						this.estadoEntidad02 = readString(dis,objectIn);
					
						this.fechaAfiliacionEntidad02 = readDate(dis,objectIn);
					
						this.codigoEntidad02 = readString(dis,objectIn);
					
			            length = objectIn.readByte();
           				if (length == -1) {
           	    			this.tipoEntidad02 = null;
           				} else {
           			    	this.tipoEntidad02 = objectIn.readChar();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
					writeInteger(this.consecutivoAfiliado, dos, oos);
					
						writeString(this.segundoApellidoAfiliado, dos, oos);
					
						writeString(this.segundoNombreAfiliado, dos, oos);
					
						writeDate(this.fechaNacimiento, dos, oos);
					
						writeString(this.estadoEntidad01, dos, oos);
					
						writeDate(this.fechaAfiliacionEntidad01, dos, oos);
					
						writeString(this.codigoEntidad01, dos, oos);
					
						if(this.tipoEntidad01 == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeChar(this.tipoEntidad01);
		            	}
					
						writeString(this.estadoEntidad02, dos, oos);
					
						writeDate(this.fechaAfiliacionEntidad02, dos, oos);
					
						writeString(this.codigoEntidad02, dos, oos);
					
						if(this.tipoEntidad02 == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeChar(this.tipoEntidad02);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
					writeInteger(this.consecutivoAfiliado, dos, objectOut);
					
						writeString(this.segundoApellidoAfiliado, dos, objectOut);
					
						writeString(this.segundoNombreAfiliado, dos, objectOut);
					
						writeDate(this.fechaNacimiento, dos, objectOut);
					
						writeString(this.estadoEntidad01, dos, objectOut);
					
						writeDate(this.fechaAfiliacionEntidad01, dos, objectOut);
					
						writeString(this.codigoEntidad01, dos, objectOut);
					
						if(this.tipoEntidad01 == null) {
							objectOut.writeByte(-1);
						} else {
							objectOut.writeByte(0);
							objectOut.writeChar(this.tipoEntidad01);
		            	}
					
						writeString(this.estadoEntidad02, dos, objectOut);
					
						writeDate(this.fechaAfiliacionEntidad02, dos, objectOut);
					
						writeString(this.codigoEntidad02, dos, objectOut);
					
						if(this.tipoEntidad02 == null) {
							objectOut.writeByte(-1);
						} else {
							objectOut.writeByte(0);
							objectOut.writeChar(this.tipoEntidad02);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("consecutivoAfiliado="+String.valueOf(consecutivoAfiliado));
		sb.append(",tipoDocumentoAfiliado="+tipoDocumentoAfiliado);
		sb.append(",numeroIdentificacionAfiliado="+numeroIdentificacionAfiliado);
		sb.append(",primerApellidoAfiliado="+primerApellidoAfiliado);
		sb.append(",segundoApellidoAfiliado="+segundoApellidoAfiliado);
		sb.append(",primerNombreAfiliado="+primerNombreAfiliado);
		sb.append(",segundoNombreAfiliado="+segundoNombreAfiliado);
		sb.append(",fechaNacimiento="+String.valueOf(fechaNacimiento));
		sb.append(",estadoEntidad01="+estadoEntidad01);
		sb.append(",fechaAfiliacionEntidad01="+String.valueOf(fechaAfiliacionEntidad01));
		sb.append(",codigoEntidad01="+codigoEntidad01);
		sb.append(",tipoEntidad01="+String.valueOf(tipoEntidad01));
		sb.append(",estadoEntidad02="+estadoEntidad02);
		sb.append(",fechaAfiliacionEntidad02="+String.valueOf(fechaAfiliacionEntidad02));
		sb.append(",codigoEntidad02="+codigoEntidad02);
		sb.append(",tipoEntidad02="+String.valueOf(tipoEntidad02));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row17Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.tipoDocumentoAfiliado, other.tipoDocumentoAfiliado);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.numeroIdentificacionAfiliado, other.numeroIdentificacionAfiliado);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.primerApellidoAfiliado, other.primerApellidoAfiliado);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.primerNombreAfiliado, other.primerNombreAfiliado);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tHashInput_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tHashInput_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row17Struct row17 = new row17Struct();




	
	/**
	 * [tAdvancedHash_row17 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row17", false);
		start_Hash.put("tAdvancedHash_row17", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row17";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row17");
					}
				
		int tos_count_tAdvancedHash_row17 = 0;
		

			   		// connection name:row17
			   		// source node:tHashInput_2 - inputs:(after_tOracleInput_7) outputs:(row17,row17) | target node:tAdvancedHash_row17 - inputs:(row17) outputs:()
			   		// linked node: tMap_6 - inputs:(out3,row17) outputs:(salidaMultiafiliacion)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row17 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.FIRST_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row17Struct> tHash_Lookup_row17 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row17Struct>getLookup(matchingModeEnum_row17);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row17", tHash_Lookup_row17);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row17 begin ] stop
 */



	
	/**
	 * [tHashInput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_2", false);
		start_Hash.put("tHashInput_2", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_2";
	
	
		int tos_count_tHashInput_2 = 0;
		


int nb_line_tHashInput_2 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_2=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row12Struct> tHashFile_tHashInput_2 = mf_tHashInput_2.getAdvancedMemoryHashFile("tHashFile_MinSaludEtapa3Multiafiliacion_" + pid +"_tHashOutput_1");
if(tHashFile_tHashInput_2==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<row12Struct> iterator_tHashInput_2 = tHashFile_tHashInput_2.iterator();
while (iterator_tHashInput_2.hasNext()) {
    row12Struct next_tHashInput_2 = iterator_tHashInput_2.next();

	row17.consecutivoAfiliado = next_tHashInput_2.consecutivoAfiliado;
	row17.tipoDocumentoAfiliado = next_tHashInput_2.tipoDocumentoAfiliado;
	row17.numeroIdentificacionAfiliado = next_tHashInput_2.numeroIdentificacionAfiliado;
	row17.primerApellidoAfiliado = next_tHashInput_2.primerApellidoAfiliado;
	row17.segundoApellidoAfiliado = next_tHashInput_2.segundoApellidoAfiliado;
	row17.primerNombreAfiliado = next_tHashInput_2.primerNombreAfiliado;
	row17.segundoNombreAfiliado = next_tHashInput_2.segundoNombreAfiliado;
	row17.fechaNacimiento = next_tHashInput_2.fechaNacimiento;
	row17.estadoEntidad01 = next_tHashInput_2.estadoEntidad01;
	row17.fechaAfiliacionEntidad01 = next_tHashInput_2.fechaAfiliacionEntidad01;
	row17.codigoEntidad01 = next_tHashInput_2.codigoEntidad01;
	row17.tipoEntidad01 = next_tHashInput_2.tipoEntidad01;
	row17.estadoEntidad02 = next_tHashInput_2.estadoEntidad02;
	row17.fechaAfiliacionEntidad02 = next_tHashInput_2.fechaAfiliacionEntidad02;
	row17.codigoEntidad02 = next_tHashInput_2.codigoEntidad02;
	row17.tipoEntidad02 = next_tHashInput_2.tipoEntidad02;

 



/**
 * [tHashInput_2 begin ] stop
 */
	
	/**
	 * [tHashInput_2 main ] start
	 */

	

	
	
	currentComponent="tHashInput_2";
	
	

 


	tos_count_tHashInput_2++;

/**
 * [tHashInput_2 main ] stop
 */
	
	/**
	 * [tHashInput_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashInput_2";
	
	

 



/**
 * [tHashInput_2 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row17 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row17";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row17"
						
						);
					}
					


			   
			   

					row17Struct row17_HashRow = new row17Struct();
		   	   	   
				
				row17_HashRow.consecutivoAfiliado = row17.consecutivoAfiliado;
				
				row17_HashRow.tipoDocumentoAfiliado = row17.tipoDocumentoAfiliado;
				
				row17_HashRow.numeroIdentificacionAfiliado = row17.numeroIdentificacionAfiliado;
				
				row17_HashRow.primerApellidoAfiliado = row17.primerApellidoAfiliado;
				
				row17_HashRow.segundoApellidoAfiliado = row17.segundoApellidoAfiliado;
				
				row17_HashRow.primerNombreAfiliado = row17.primerNombreAfiliado;
				
				row17_HashRow.segundoNombreAfiliado = row17.segundoNombreAfiliado;
				
				row17_HashRow.fechaNacimiento = row17.fechaNacimiento;
				
				row17_HashRow.estadoEntidad01 = row17.estadoEntidad01;
				
				row17_HashRow.fechaAfiliacionEntidad01 = row17.fechaAfiliacionEntidad01;
				
				row17_HashRow.codigoEntidad01 = row17.codigoEntidad01;
				
				row17_HashRow.tipoEntidad01 = row17.tipoEntidad01;
				
				row17_HashRow.estadoEntidad02 = row17.estadoEntidad02;
				
				row17_HashRow.fechaAfiliacionEntidad02 = row17.fechaAfiliacionEntidad02;
				
				row17_HashRow.codigoEntidad02 = row17.codigoEntidad02;
				
				row17_HashRow.tipoEntidad02 = row17.tipoEntidad02;
				
			tHash_Lookup_row17.put(row17_HashRow);
			
            




 


	tos_count_tAdvancedHash_row17++;

/**
 * [tAdvancedHash_row17 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row17 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row17";
	
	

 



/**
 * [tAdvancedHash_row17 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row17 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row17";
	
	

 



/**
 * [tAdvancedHash_row17 process_data_end ] stop
 */



	
	/**
	 * [tHashInput_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashInput_2";
	
	

 



/**
 * [tHashInput_2 process_data_end ] stop
 */
	
	/**
	 * [tHashInput_2 end ] start
	 */

	

	
	
	currentComponent="tHashInput_2";
	
	
    

		
			nb_line_tHashInput_2++;
		}	
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_MinSaludEtapa3Multiafiliacion_" + pid +"_tHashOutput_1");
	


	globalMap.put("tHashInput_2_NB_LINE", nb_line_tHashInput_2);       

 

ok_Hash.put("tHashInput_2", true);
end_Hash.put("tHashInput_2", System.currentTimeMillis());




/**
 * [tHashInput_2 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row17 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row17";
	
	

tHash_Lookup_row17.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row17");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row17", true);
end_Hash.put("tAdvancedHash_row17", System.currentTimeMillis());




/**
 * [tAdvancedHash_row17 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tHashInput_2 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_2";
	
	

 



/**
 * [tHashInput_2 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row17 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row17";
	
	

 



/**
 * [tAdvancedHash_row17 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tHashInput_2_SUBPROCESS_STATE", 1);
	}
	


public static class row2Struct implements routines.system.IPersistableComparableLookupRow<row2Struct> {
    final static byte[] commonByteArrayLock_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion = new byte[0];
    static byte[] commonByteArray_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public int ID;

				public int getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return false;
				}
				public Boolean IDIsKey(){
				    return true;
				}
				public Integer IDLength(){
				    return 22;
				}
				public Integer IDPrecision(){
				    return 0;
				}
				public String IDDefault(){
				
					return null;
				
				}
				public String IDComment(){
				
				    return "PK - Llave primaria";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public String CODIGO;

				public String getCODIGO () {
					return this.CODIGO;
				}

				public Boolean CODIGOIsNullable(){
				    return true;
				}
				public Boolean CODIGOIsKey(){
				    return false;
				}
				public Integer CODIGOLength(){
				    return 6;
				}
				public Integer CODIGOPrecision(){
				    return 0;
				}
				public String CODIGODefault(){
				
					return null;
				
				}
				public String CODIGOComment(){
				
				    return "Codigo de la eps";
				
				}
				public String CODIGOPattern(){
				
					return "";
				
				}
				public String CODIGOOriginalDbColumnName(){
				
					return "CODIGO";
				
				}

				
			    public String DESCRIPCION;

				public String getDESCRIPCION () {
					return this.DESCRIPCION;
				}

				public Boolean DESCRIPCIONIsNullable(){
				    return true;
				}
				public Boolean DESCRIPCIONIsKey(){
				    return false;
				}
				public Integer DESCRIPCIONLength(){
				    return 500;
				}
				public Integer DESCRIPCIONPrecision(){
				    return 0;
				}
				public String DESCRIPCIONDefault(){
				
					return null;
				
				}
				public String DESCRIPCIONComment(){
				
				    return "Descripcion de la eps";
				
				}
				public String DESCRIPCIONPattern(){
				
					return "";
				
				}
				public String DESCRIPCIONOriginalDbColumnName(){
				
					return "DESCRIPCION";
				
				}

				
			    public Integer TEPS_ID;

				public Integer getTEPS_ID () {
					return this.TEPS_ID;
				}

				public Boolean TEPS_IDIsNullable(){
				    return true;
				}
				public Boolean TEPS_IDIsKey(){
				    return false;
				}
				public Integer TEPS_IDLength(){
				    return 22;
				}
				public Integer TEPS_IDPrecision(){
				    return 0;
				}
				public String TEPS_IDDefault(){
				
					return null;
				
				}
				public String TEPS_IDComment(){
				
				    return "Foranea del tipo de la eps";
				
				}
				public String TEPS_IDPattern(){
				
					return "";
				
				}
				public String TEPS_IDOriginalDbColumnName(){
				
					return "TEPS_ID";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.CODIGO == null) ? 0 : this.CODIGO.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row2Struct other = (row2Struct) obj;
		
						if (this.CODIGO == null) {
							if (other.CODIGO != null)
								return false;
						
						} else if (!this.CODIGO.equals(other.CODIGO))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row2Struct other) {

		other.ID = this.ID;
	            other.CODIGO = this.CODIGO;
	            other.DESCRIPCION = this.DESCRIPCION;
	            other.TEPS_ID = this.TEPS_ID;
	            
	}

	public void copyKeysDataTo(row2Struct other) {

		other.CODIGO = this.CODIGO;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion.length) {
				if(length < 1024 && commonByteArray_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion.length == 0) {
   					commonByteArray_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion = new byte[1024];
				} else {
   					commonByteArray_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion, 0, length);
			strReturn = new String(commonByteArray_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion.length) {
				if(length < 1024 && commonByteArray_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion.length == 0) {
   					commonByteArray_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion = new byte[1024];
				} else {
   					commonByteArray_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion, 0, length);
			strReturn = new String(commonByteArray_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	
	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			unmarshaller.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private void writeString(String str, DataOutputStream dos, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}
	private Integer readInteger(DataInputStream dis, ObjectInputStream ois) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
			intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		Integer intReturn;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
			intReturn = unmarshaller.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, DataOutputStream dos,org.jboss.marshalling.Marshaller marshaller ) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion) {

        	try {

        		int length = 0;
		
					this.CODIGO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion) {

        	try {

        		int length = 0;
		
					this.CODIGO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.CODIGO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.CODIGO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
			            this.ID = dis.readInt();
					
						this.DESCRIPCION = readString(dis,ois);
					
						this.TEPS_ID = readInteger(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		
			            this.ID = objectIn.readInt();
					
						this.DESCRIPCION = readString(dis,objectIn);
					
						this.TEPS_ID = readInteger(dis,objectIn);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
		            	dos.writeInt(this.ID);
					
						writeString(this.DESCRIPCION, dos, oos);
					
					writeInteger(this.TEPS_ID, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
					objectOut.writeInt(this.ID);
					
						writeString(this.DESCRIPCION, dos, objectOut);
					
					writeInteger(this.TEPS_ID, dos, objectOut);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",CODIGO="+CODIGO);
		sb.append(",DESCRIPCION="+DESCRIPCION);
		sb.append(",TEPS_ID="+String.valueOf(TEPS_ID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row2Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.CODIGO, other.CODIGO);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tHashInput_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tHashInput_3_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row2Struct row2 = new row2Struct();




	
	/**
	 * [tAdvancedHash_row2 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row2", false);
		start_Hash.put("tAdvancedHash_row2", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row2";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row2");
					}
				
		int tos_count_tAdvancedHash_row2 = 0;
		

			   		// connection name:row2
			   		// source node:tHashInput_3 - inputs:(after_tOracleInput_7) outputs:(row2,row2) | target node:tAdvancedHash_row2 - inputs:(row2) outputs:()
			   		// linked node: tMap_7 - inputs:(salidaMultiafiliacion,row2) outputs:(salidaMultiCorreo,salidaMultiSinCorreo,salidaArchivo,salidaMultiCorreoTitulares)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row2 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row2Struct> tHash_Lookup_row2 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row2Struct>getLookup(matchingModeEnum_row2);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row2", tHash_Lookup_row2);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row2 begin ] stop
 */



	
	/**
	 * [tHashInput_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_3", false);
		start_Hash.put("tHashInput_3", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_3";
	
	
		int tos_count_tHashInput_3 = 0;
		


int nb_line_tHashInput_3 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_3=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row1Struct> tHashFile_tHashInput_3 = mf_tHashInput_3.getAdvancedMemoryHashFile("tHashFile_MinSaludEtapa3Multiafiliacion_" + pid +"_tHashOutput_3");
if(tHashFile_tHashInput_3==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<row1Struct> iterator_tHashInput_3 = tHashFile_tHashInput_3.iterator();
while (iterator_tHashInput_3.hasNext()) {
    row1Struct next_tHashInput_3 = iterator_tHashInput_3.next();

	row2.ID = next_tHashInput_3.ID;
	row2.CODIGO = next_tHashInput_3.CODIGO;
	row2.DESCRIPCION = next_tHashInput_3.DESCRIPCION;
	row2.TEPS_ID = next_tHashInput_3.TEPS_ID;

 



/**
 * [tHashInput_3 begin ] stop
 */
	
	/**
	 * [tHashInput_3 main ] start
	 */

	

	
	
	currentComponent="tHashInput_3";
	
	

 


	tos_count_tHashInput_3++;

/**
 * [tHashInput_3 main ] stop
 */
	
	/**
	 * [tHashInput_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashInput_3";
	
	

 



/**
 * [tHashInput_3 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row2 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row2";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row2"
						
						);
					}
					


			   
			   

					row2Struct row2_HashRow = new row2Struct();
		   	   	   
				
				row2_HashRow.ID = row2.ID;
				
				row2_HashRow.CODIGO = row2.CODIGO;
				
				row2_HashRow.DESCRIPCION = row2.DESCRIPCION;
				
				row2_HashRow.TEPS_ID = row2.TEPS_ID;
				
			tHash_Lookup_row2.put(row2_HashRow);
			
            




 


	tos_count_tAdvancedHash_row2++;

/**
 * [tAdvancedHash_row2 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row2";
	
	

 



/**
 * [tAdvancedHash_row2 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row2 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row2";
	
	

 



/**
 * [tAdvancedHash_row2 process_data_end ] stop
 */



	
	/**
	 * [tHashInput_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashInput_3";
	
	

 



/**
 * [tHashInput_3 process_data_end ] stop
 */
	
	/**
	 * [tHashInput_3 end ] start
	 */

	

	
	
	currentComponent="tHashInput_3";
	
	
    

		
			nb_line_tHashInput_3++;
		}	
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_MinSaludEtapa3Multiafiliacion_" + pid +"_tHashOutput_3");
	


	globalMap.put("tHashInput_3_NB_LINE", nb_line_tHashInput_3);       

 

ok_Hash.put("tHashInput_3", true);
end_Hash.put("tHashInput_3", System.currentTimeMillis());




/**
 * [tHashInput_3 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row2 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row2";
	
	

tHash_Lookup_row2.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row2");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row2", true);
end_Hash.put("tAdvancedHash_row2", System.currentTimeMillis());




/**
 * [tAdvancedHash_row2 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tHashInput_3 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_3";
	
	

 



/**
 * [tHashInput_3 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row2 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row2";
	
	

 



/**
 * [tAdvancedHash_row2 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tHashInput_3_SUBPROCESS_STATE", 1);
	}
	


public static class row4Struct implements routines.system.IPersistableComparableLookupRow<row4Struct> {
    final static byte[] commonByteArrayLock_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion = new byte[0];
    static byte[] commonByteArray_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public int ID;

				public int getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return false;
				}
				public Boolean IDIsKey(){
				    return true;
				}
				public Integer IDLength(){
				    return 22;
				}
				public Integer IDPrecision(){
				    return 0;
				}
				public String IDDefault(){
				
					return null;
				
				}
				public String IDComment(){
				
				    return "PK - Llave primaria";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public String NOMBRE;

				public String getNOMBRE () {
					return this.NOMBRE;
				}

				public Boolean NOMBREIsNullable(){
				    return false;
				}
				public Boolean NOMBREIsKey(){
				    return false;
				}
				public Integer NOMBRELength(){
				    return 50;
				}
				public Integer NOMBREPrecision(){
				    return 0;
				}
				public String NOMBREDefault(){
				
					return null;
				
				}
				public String NOMBREComment(){
				
				    return "Nombre del tipo";
				
				}
				public String NOMBREPattern(){
				
					return "";
				
				}
				public String NOMBREOriginalDbColumnName(){
				
					return "NOMBRE";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
							result = prime * result + (int) this.ID;
						
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row4Struct other = (row4Struct) obj;
		
						if (this.ID != other.ID)
							return false;
					

		return true;
    }

	public void copyDataTo(row4Struct other) {

		other.ID = this.ID;
	            other.NOMBRE = this.NOMBRE;
	            
	}

	public void copyKeysDataTo(row4Struct other) {

		other.ID = this.ID;
	            	
	}



	
	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			unmarshaller.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private void writeString(String str, DataOutputStream dos, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion) {

        	try {

        		int length = 0;
		
			        this.ID = dis.readInt();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion) {

        	try {

        		int length = 0;
		
			        this.ID = dis.readInt();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.NOMBRE = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		
						this.NOMBRE = readString(dis,objectIn);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeString(this.NOMBRE, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
						writeString(this.NOMBRE, dos, objectOut);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",NOMBRE="+NOMBRE);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row4Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.ID, other.ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tHashInput_5Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tHashInput_5_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row4Struct row4 = new row4Struct();




	
	/**
	 * [tAdvancedHash_row4 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row4", false);
		start_Hash.put("tAdvancedHash_row4", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row4";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row4");
					}
				
		int tos_count_tAdvancedHash_row4 = 0;
		

			   		// connection name:row4
			   		// source node:tHashInput_5 - inputs:(after_tOracleInput_7) outputs:(row4,row4) | target node:tAdvancedHash_row4 - inputs:(row4) outputs:()
			   		// linked node: tMap_1 - inputs:(salidaArchivo,row4) outputs:(salidaReporteMultiAfi)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row4 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row4Struct> tHash_Lookup_row4 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row4Struct>getLookup(matchingModeEnum_row4);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row4", tHash_Lookup_row4);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row4 begin ] stop
 */



	
	/**
	 * [tHashInput_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_5", false);
		start_Hash.put("tHashInput_5", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_5";
	
	
		int tos_count_tHashInput_5 = 0;
		


int nb_line_tHashInput_5 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_5=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row3Struct> tHashFile_tHashInput_5 = mf_tHashInput_5.getAdvancedMemoryHashFile("tHashFile_MinSaludEtapa3Multiafiliacion_" + pid +"_tHashOutput_4");
if(tHashFile_tHashInput_5==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<row3Struct> iterator_tHashInput_5 = tHashFile_tHashInput_5.iterator();
while (iterator_tHashInput_5.hasNext()) {
    row3Struct next_tHashInput_5 = iterator_tHashInput_5.next();

	row4.ID = next_tHashInput_5.ID;
	row4.NOMBRE = next_tHashInput_5.NOMBRE;

 



/**
 * [tHashInput_5 begin ] stop
 */
	
	/**
	 * [tHashInput_5 main ] start
	 */

	

	
	
	currentComponent="tHashInput_5";
	
	

 


	tos_count_tHashInput_5++;

/**
 * [tHashInput_5 main ] stop
 */
	
	/**
	 * [tHashInput_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashInput_5";
	
	

 



/**
 * [tHashInput_5 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row4 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row4";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row4"
						
						);
					}
					


			   
			   

					row4Struct row4_HashRow = new row4Struct();
		   	   	   
				
				row4_HashRow.ID = row4.ID;
				
				row4_HashRow.NOMBRE = row4.NOMBRE;
				
			tHash_Lookup_row4.put(row4_HashRow);
			
            




 


	tos_count_tAdvancedHash_row4++;

/**
 * [tAdvancedHash_row4 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row4";
	
	

 



/**
 * [tAdvancedHash_row4 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row4 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row4";
	
	

 



/**
 * [tAdvancedHash_row4 process_data_end ] stop
 */



	
	/**
	 * [tHashInput_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashInput_5";
	
	

 



/**
 * [tHashInput_5 process_data_end ] stop
 */
	
	/**
	 * [tHashInput_5 end ] start
	 */

	

	
	
	currentComponent="tHashInput_5";
	
	
    

		
			nb_line_tHashInput_5++;
		}	
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_MinSaludEtapa3Multiafiliacion_" + pid +"_tHashOutput_4");
	


	globalMap.put("tHashInput_5_NB_LINE", nb_line_tHashInput_5);       

 

ok_Hash.put("tHashInput_5", true);
end_Hash.put("tHashInput_5", System.currentTimeMillis());




/**
 * [tHashInput_5 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row4 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row4";
	
	

tHash_Lookup_row4.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row4");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row4", true);
end_Hash.put("tAdvancedHash_row4", System.currentTimeMillis());




/**
 * [tAdvancedHash_row4 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tHashInput_5 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_5";
	
	

 



/**
 * [tHashInput_5 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row4 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row4";
	
	

 



/**
 * [tAdvancedHash_row4 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tHashInput_5_SUBPROCESS_STATE", 1);
	}
	


public static class row5Struct implements routines.system.IPersistableRow<row5Struct> {
    final static byte[] commonByteArrayLock_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion = new byte[0];
    static byte[] commonByteArray_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion = new byte[0];

	
			    public java.util.Date moment;

				public java.util.Date getMoment () {
					return this.moment;
				}

				public Boolean momentIsNullable(){
				    return true;
				}
				public Boolean momentIsKey(){
				    return false;
				}
				public Integer momentLength(){
				    return 0;
				}
				public Integer momentPrecision(){
				    return 0;
				}
				public String momentDefault(){
				
					return null;
				
				}
				public String momentComment(){
				
				    return null;
				
				}
				public String momentPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String momentOriginalDbColumnName(){
				
					return "moment";
				
				}

				
			    public String pid;

				public String getPid () {
					return this.pid;
				}

				public Boolean pidIsNullable(){
				    return true;
				}
				public Boolean pidIsKey(){
				    return false;
				}
				public Integer pidLength(){
				    return 20;
				}
				public Integer pidPrecision(){
				    return 0;
				}
				public String pidDefault(){
				
					return null;
				
				}
				public String pidComment(){
				
				    return null;
				
				}
				public String pidPattern(){
				
				    return null;
				
				}
				public String pidOriginalDbColumnName(){
				
					return "pid";
				
				}

				
			    public String root_pid;

				public String getRoot_pid () {
					return this.root_pid;
				}

				public Boolean root_pidIsNullable(){
				    return true;
				}
				public Boolean root_pidIsKey(){
				    return false;
				}
				public Integer root_pidLength(){
				    return 20;
				}
				public Integer root_pidPrecision(){
				    return 0;
				}
				public String root_pidDefault(){
				
					return null;
				
				}
				public String root_pidComment(){
				
				    return null;
				
				}
				public String root_pidPattern(){
				
				    return null;
				
				}
				public String root_pidOriginalDbColumnName(){
				
					return "root_pid";
				
				}

				
			    public String father_pid;

				public String getFather_pid () {
					return this.father_pid;
				}

				public Boolean father_pidIsNullable(){
				    return true;
				}
				public Boolean father_pidIsKey(){
				    return false;
				}
				public Integer father_pidLength(){
				    return 20;
				}
				public Integer father_pidPrecision(){
				    return 0;
				}
				public String father_pidDefault(){
				
					return null;
				
				}
				public String father_pidComment(){
				
				    return null;
				
				}
				public String father_pidPattern(){
				
				    return null;
				
				}
				public String father_pidOriginalDbColumnName(){
				
					return "father_pid";
				
				}

				
			    public String project;

				public String getProject () {
					return this.project;
				}

				public Boolean projectIsNullable(){
				    return true;
				}
				public Boolean projectIsKey(){
				    return false;
				}
				public Integer projectLength(){
				    return 50;
				}
				public Integer projectPrecision(){
				    return 0;
				}
				public String projectDefault(){
				
					return null;
				
				}
				public String projectComment(){
				
				    return null;
				
				}
				public String projectPattern(){
				
				    return null;
				
				}
				public String projectOriginalDbColumnName(){
				
					return "project";
				
				}

				
			    public String job;

				public String getJob () {
					return this.job;
				}

				public Boolean jobIsNullable(){
				    return true;
				}
				public Boolean jobIsKey(){
				    return false;
				}
				public Integer jobLength(){
				    return 255;
				}
				public Integer jobPrecision(){
				    return 0;
				}
				public String jobDefault(){
				
					return null;
				
				}
				public String jobComment(){
				
				    return null;
				
				}
				public String jobPattern(){
				
				    return null;
				
				}
				public String jobOriginalDbColumnName(){
				
					return "job";
				
				}

				
			    public String context;

				public String getContext () {
					return this.context;
				}

				public Boolean contextIsNullable(){
				    return true;
				}
				public Boolean contextIsKey(){
				    return false;
				}
				public Integer contextLength(){
				    return 50;
				}
				public Integer contextPrecision(){
				    return 0;
				}
				public String contextDefault(){
				
					return null;
				
				}
				public String contextComment(){
				
				    return null;
				
				}
				public String contextPattern(){
				
				    return null;
				
				}
				public String contextOriginalDbColumnName(){
				
					return "context";
				
				}

				
			    public Integer priority;

				public Integer getPriority () {
					return this.priority;
				}

				public Boolean priorityIsNullable(){
				    return true;
				}
				public Boolean priorityIsKey(){
				    return false;
				}
				public Integer priorityLength(){
				    return 3;
				}
				public Integer priorityPrecision(){
				    return 0;
				}
				public String priorityDefault(){
				
					return "";
				
				}
				public String priorityComment(){
				
				    return null;
				
				}
				public String priorityPattern(){
				
				    return null;
				
				}
				public String priorityOriginalDbColumnName(){
				
					return "priority";
				
				}

				
			    public String type;

				public String getType () {
					return this.type;
				}

				public Boolean typeIsNullable(){
				    return true;
				}
				public Boolean typeIsKey(){
				    return false;
				}
				public Integer typeLength(){
				    return 255;
				}
				public Integer typePrecision(){
				    return 0;
				}
				public String typeDefault(){
				
					return null;
				
				}
				public String typeComment(){
				
				    return null;
				
				}
				public String typePattern(){
				
				    return null;
				
				}
				public String typeOriginalDbColumnName(){
				
					return "type";
				
				}

				
			    public String origin;

				public String getOrigin () {
					return this.origin;
				}

				public Boolean originIsNullable(){
				    return true;
				}
				public Boolean originIsKey(){
				    return false;
				}
				public Integer originLength(){
				    return 255;
				}
				public Integer originPrecision(){
				    return 0;
				}
				public String originDefault(){
				
					return null;
				
				}
				public String originComment(){
				
				    return null;
				
				}
				public String originPattern(){
				
				    return null;
				
				}
				public String originOriginalDbColumnName(){
				
					return "origin";
				
				}

				
			    public String message;

				public String getMessage () {
					return this.message;
				}

				public Boolean messageIsNullable(){
				    return true;
				}
				public Boolean messageIsKey(){
				    return false;
				}
				public Integer messageLength(){
				    return 255;
				}
				public Integer messagePrecision(){
				    return 0;
				}
				public String messageDefault(){
				
					return null;
				
				}
				public String messageComment(){
				
				    return null;
				
				}
				public String messagePattern(){
				
				    return null;
				
				}
				public String messageOriginalDbColumnName(){
				
					return "message";
				
				}

				
			    public Integer code;

				public Integer getCode () {
					return this.code;
				}

				public Boolean codeIsNullable(){
				    return true;
				}
				public Boolean codeIsKey(){
				    return false;
				}
				public Integer codeLength(){
				    return 3;
				}
				public Integer codePrecision(){
				    return 0;
				}
				public String codeDefault(){
				
					return "";
				
				}
				public String codeComment(){
				
				    return null;
				
				}
				public String codePattern(){
				
				    return null;
				
				}
				public String codeOriginalDbColumnName(){
				
					return "code";
				
				}

				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion.length) {
				if(length < 1024 && commonByteArray_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion.length == 0) {
   					commonByteArray_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion = new byte[1024];
				} else {
   					commonByteArray_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion, 0, length);
			strReturn = new String(commonByteArray_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion.length) {
				if(length < 1024 && commonByteArray_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion.length == 0) {
   					commonByteArray_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion = new byte[1024];
				} else {
   					commonByteArray_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion, 0, length);
			strReturn = new String(commonByteArray_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion) {

        	try {

        		int length = 0;
		
					this.moment = readDate(dis);
					
					this.pid = readString(dis);
					
					this.root_pid = readString(dis);
					
					this.father_pid = readString(dis);
					
					this.project = readString(dis);
					
					this.job = readString(dis);
					
					this.context = readString(dis);
					
						this.priority = readInteger(dis);
					
					this.type = readString(dis);
					
					this.origin = readString(dis);
					
					this.message = readString(dis);
					
						this.code = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_PRINCIPAL_MinSaludEtapa3Multiafiliacion) {

        	try {

        		int length = 0;
		
					this.moment = readDate(dis);
					
					this.pid = readString(dis);
					
					this.root_pid = readString(dis);
					
					this.father_pid = readString(dis);
					
					this.project = readString(dis);
					
					this.job = readString(dis);
					
					this.context = readString(dis);
					
						this.priority = readInteger(dis);
					
					this.type = readString(dis);
					
					this.origin = readString(dis);
					
					this.message = readString(dis);
					
						this.code = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.pid,dos);
					
					// String
				
						writeString(this.root_pid,dos);
					
					// String
				
						writeString(this.father_pid,dos);
					
					// String
				
						writeString(this.project,dos);
					
					// String
				
						writeString(this.job,dos);
					
					// String
				
						writeString(this.context,dos);
					
					// Integer
				
						writeInteger(this.priority,dos);
					
					// String
				
						writeString(this.type,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.message,dos);
					
					// Integer
				
						writeInteger(this.code,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.pid,dos);
					
					// String
				
						writeString(this.root_pid,dos);
					
					// String
				
						writeString(this.father_pid,dos);
					
					// String
				
						writeString(this.project,dos);
					
					// String
				
						writeString(this.job,dos);
					
					// String
				
						writeString(this.context,dos);
					
					// Integer
				
						writeInteger(this.priority,dos);
					
					// String
				
						writeString(this.type,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.message,dos);
					
					// Integer
				
						writeInteger(this.code,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("moment="+String.valueOf(moment));
		sb.append(",pid="+pid);
		sb.append(",root_pid="+root_pid);
		sb.append(",father_pid="+father_pid);
		sb.append(",project="+project);
		sb.append(",job="+job);
		sb.append(",context="+context);
		sb.append(",priority="+String.valueOf(priority));
		sb.append(",type="+type);
		sb.append(",origin="+origin);
		sb.append(",message="+message);
		sb.append(",code="+String.valueOf(code));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row5Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tLogCatcher_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tLogCatcher_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row5Struct row5 = new row5Struct();




	
	/**
	 * [tFileOutputDelimited_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputDelimited_2", false);
		start_Hash.put("tFileOutputDelimited_2", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputDelimited_2";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row5");
					}
				
		int tos_count_tFileOutputDelimited_2 = 0;
		

String fileName_tFileOutputDelimited_2 = "";
    fileName_tFileOutputDelimited_2 = (new java.io.File(context.fileSystem_Path+"/"+context.fileSystem_Area+"/Multiafiliacion_error.csv")).getAbsolutePath().replace("\\","/");
    String fullName_tFileOutputDelimited_2 = null;
    String extension_tFileOutputDelimited_2 = null;
    String directory_tFileOutputDelimited_2 = null;
    if((fileName_tFileOutputDelimited_2.indexOf("/") != -1)) {
        if(fileName_tFileOutputDelimited_2.lastIndexOf(".") < fileName_tFileOutputDelimited_2.lastIndexOf("/")) {
            fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2;
            extension_tFileOutputDelimited_2 = "";
        } else {
            fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(0, fileName_tFileOutputDelimited_2.lastIndexOf("."));
            extension_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(fileName_tFileOutputDelimited_2.lastIndexOf("."));
        }
        directory_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(0, fileName_tFileOutputDelimited_2.lastIndexOf("/"));
    } else {
        if(fileName_tFileOutputDelimited_2.lastIndexOf(".") != -1) {
            fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(0, fileName_tFileOutputDelimited_2.lastIndexOf("."));
            extension_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(fileName_tFileOutputDelimited_2.lastIndexOf("."));
        } else {
            fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2;
            extension_tFileOutputDelimited_2 = "";
        }
        directory_tFileOutputDelimited_2 = "";
    }
    boolean isFileGenerated_tFileOutputDelimited_2 = true;
    java.io.File filetFileOutputDelimited_2 = new java.io.File(fileName_tFileOutputDelimited_2);
    globalMap.put("tFileOutputDelimited_2_FILE_NAME",fileName_tFileOutputDelimited_2);
        if(filetFileOutputDelimited_2.exists()){
            isFileGenerated_tFileOutputDelimited_2 = false;
        }
            int nb_line_tFileOutputDelimited_2 = 0;
            int splitedFileNo_tFileOutputDelimited_2 = 0;
            int currentRow_tFileOutputDelimited_2 = 0;

            final String OUT_DELIM_tFileOutputDelimited_2 = /** Start field tFileOutputDelimited_2:FIELDSEPARATOR */";"/** End field tFileOutputDelimited_2:FIELDSEPARATOR */;

            final String OUT_DELIM_ROWSEP_tFileOutputDelimited_2 = /** Start field tFileOutputDelimited_2:ROWSEPARATOR */"\n"/** End field tFileOutputDelimited_2:ROWSEPARATOR */;

                    //create directory only if not exists
                    if(directory_tFileOutputDelimited_2 != null && directory_tFileOutputDelimited_2.trim().length() != 0) {
                        java.io.File dir_tFileOutputDelimited_2 = new java.io.File(directory_tFileOutputDelimited_2);
                        if(!dir_tFileOutputDelimited_2.exists()) {
                            dir_tFileOutputDelimited_2.mkdirs();
                        }
                    }

                        //routines.system.Row
                        java.io.Writer outtFileOutputDelimited_2 = null;

                        outtFileOutputDelimited_2 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
                        new java.io.FileOutputStream(fileName_tFileOutputDelimited_2, true),"ISO-8859-15"));
                resourceMap.put("out_tFileOutputDelimited_2", outtFileOutputDelimited_2);
                                    if(filetFileOutputDelimited_2.length()==0){
                                        outtFileOutputDelimited_2.write("moment");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("pid");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("root_pid");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("father_pid");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("project");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("job");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("context");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("priority");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("type");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("origin");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("message");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("code");
                                        outtFileOutputDelimited_2.write(OUT_DELIM_ROWSEP_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.flush();
                                    }


resourceMap.put("nb_line_tFileOutputDelimited_2", nb_line_tFileOutputDelimited_2);

 



/**
 * [tFileOutputDelimited_2 begin ] stop
 */



	
	/**
	 * [tLogCatcher_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogCatcher_1", false);
		start_Hash.put("tLogCatcher_1", System.currentTimeMillis());
		
	
	currentComponent="tLogCatcher_1";
	
	
		int tos_count_tLogCatcher_1 = 0;
		

try {
	for (LogCatcherUtils.LogCatcherMessage lcm : tLogCatcher_1.getMessages()) {
		row5.type = lcm.getType();
		row5.origin = (lcm.getOrigin()==null || lcm.getOrigin().length()<1 ? null : lcm.getOrigin());
		row5.priority = lcm.getPriority();
		row5.message = lcm.getMessage();
		row5.code = lcm.getCode();
		
		row5.moment = java.util.Calendar.getInstance().getTime();
	
    	row5.pid = pid;
		row5.root_pid = rootPid;
		row5.father_pid = fatherPid;
	
    	row5.project = projectName;
    	row5.job = jobName;
    	row5.context = contextStr;
    		
 



/**
 * [tLogCatcher_1 begin ] stop
 */
	
	/**
	 * [tLogCatcher_1 main ] start
	 */

	

	
	
	currentComponent="tLogCatcher_1";
	
	

 


	tos_count_tLogCatcher_1++;

/**
 * [tLogCatcher_1 main ] stop
 */
	
	/**
	 * [tLogCatcher_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogCatcher_1";
	
	

 



/**
 * [tLogCatcher_1 process_data_begin ] stop
 */

	
	/**
	 * [tFileOutputDelimited_2 main ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_2";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row5"
						
						);
					}
					


                    StringBuilder sb_tFileOutputDelimited_2 = new StringBuilder();
                            if(row5.moment != null) {
                        sb_tFileOutputDelimited_2.append(
                            FormatterUtils.format_Date(row5.moment, "yyyy-MM-dd HH:mm:ss")
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(row5.pid != null) {
                        sb_tFileOutputDelimited_2.append(
                            row5.pid
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(row5.root_pid != null) {
                        sb_tFileOutputDelimited_2.append(
                            row5.root_pid
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(row5.father_pid != null) {
                        sb_tFileOutputDelimited_2.append(
                            row5.father_pid
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(row5.project != null) {
                        sb_tFileOutputDelimited_2.append(
                            row5.project
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(row5.job != null) {
                        sb_tFileOutputDelimited_2.append(
                            row5.job
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(row5.context != null) {
                        sb_tFileOutputDelimited_2.append(
                            row5.context
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(row5.priority != null) {
                        sb_tFileOutputDelimited_2.append(
                            row5.priority
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(row5.type != null) {
                        sb_tFileOutputDelimited_2.append(
                            row5.type
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(row5.origin != null) {
                        sb_tFileOutputDelimited_2.append(
                            row5.origin
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(row5.message != null) {
                        sb_tFileOutputDelimited_2.append(
                            row5.message
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(row5.code != null) {
                        sb_tFileOutputDelimited_2.append(
                            row5.code
                        );
                            }
                    sb_tFileOutputDelimited_2.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_2);


                    nb_line_tFileOutputDelimited_2++;
                    resourceMap.put("nb_line_tFileOutputDelimited_2", nb_line_tFileOutputDelimited_2);

                        outtFileOutputDelimited_2.write(sb_tFileOutputDelimited_2.toString());




 


	tos_count_tFileOutputDelimited_2++;

/**
 * [tFileOutputDelimited_2 main ] stop
 */
	
	/**
	 * [tFileOutputDelimited_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_2";
	
	

 



/**
 * [tFileOutputDelimited_2 process_data_begin ] stop
 */
	
	/**
	 * [tFileOutputDelimited_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_2";
	
	

 



/**
 * [tFileOutputDelimited_2 process_data_end ] stop
 */



	
	/**
	 * [tLogCatcher_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogCatcher_1";
	
	

 



/**
 * [tLogCatcher_1 process_data_end ] stop
 */
	
	/**
	 * [tLogCatcher_1 end ] start
	 */

	

	
	
	currentComponent="tLogCatcher_1";
	
	
	}
} catch (Exception e_tLogCatcher_1) {
globalMap.put("tLogCatcher_1_ERROR_MESSAGE",e_tLogCatcher_1.getMessage());
	logIgnoredError(String.format("tLogCatcher_1 - tLogCatcher failed to process log message(s) due to internal error: %s", e_tLogCatcher_1), e_tLogCatcher_1);
}

 

ok_Hash.put("tLogCatcher_1", true);
end_Hash.put("tLogCatcher_1", System.currentTimeMillis());




/**
 * [tLogCatcher_1 end ] stop
 */

	
	/**
	 * [tFileOutputDelimited_2 end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_2";
	
	



		
			
					if(outtFileOutputDelimited_2!=null) {
						outtFileOutputDelimited_2.flush();
						outtFileOutputDelimited_2.close();
					}
				
				globalMap.put("tFileOutputDelimited_2_NB_LINE",nb_line_tFileOutputDelimited_2);
				globalMap.put("tFileOutputDelimited_2_FILE_NAME",fileName_tFileOutputDelimited_2);
			
		
		
		resourceMap.put("finish_tFileOutputDelimited_2", true);
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row5");
			  	}
			  	
 

ok_Hash.put("tFileOutputDelimited_2", true);
end_Hash.put("tFileOutputDelimited_2", System.currentTimeMillis());




/**
 * [tFileOutputDelimited_2 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tLogCatcher_1 finally ] start
	 */

	

	
	
	currentComponent="tLogCatcher_1";
	
	

 



/**
 * [tLogCatcher_1 finally ] stop
 */

	
	/**
	 * [tFileOutputDelimited_2 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_2";
	
	


		if(resourceMap.get("finish_tFileOutputDelimited_2") == null){ 
			
				
						java.io.Writer outtFileOutputDelimited_2 = (java.io.Writer)resourceMap.get("out_tFileOutputDelimited_2");
						if(outtFileOutputDelimited_2!=null) {
							outtFileOutputDelimited_2.flush();
							outtFileOutputDelimited_2.close();
						}
					
				
			
		}
	

 



/**
 * [tFileOutputDelimited_2 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tLogCatcher_1_SUBPROCESS_STATE", 1);
	}
	
    public String resuming_logs_dir_path = null;
    public String resuming_checkpoint_path = null;
    public String parent_part_launcher = null;
    private String resumeEntryMethodName = null;
    private boolean globalResumeTicket = false;

    public boolean watch = false;
    // portStats is null, it means don't execute the statistics
    public Integer portStats = null;
    public int portTraces = 4334;
    public String clientHost;
    public String defaultClientHost = "localhost";
    public String contextStr = "Default";
    public boolean isDefaultContext = true;
    public String pid = "0";
    public String rootPid = null;
    public String fatherPid = null;
    public String fatherNode = null;
    public long startTime = 0;
    public boolean isChildJob = false;
    public String log4jLevel = "";
    
    private boolean enableLogStash;

    private boolean execStat = true;

    private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
        protected java.util.Map<String, String> initialValue() {
            java.util.Map<String,String> threadRunResultMap = new java.util.HashMap<String, String>();
            threadRunResultMap.put("errorCode", null);
            threadRunResultMap.put("status", "");
            return threadRunResultMap;
        };
    };


    protected PropertiesWithType context_param = new PropertiesWithType();
    public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

    public String status= "";
    
    
    private final static java.util.Properties jobInfo = new java.util.Properties();
    private final static java.util.Map<String,String> mdcInfo = new java.util.HashMap<>();
    private final static java.util.concurrent.atomic.AtomicLong subJobPidCounter = new java.util.concurrent.atomic.AtomicLong();


    public static void main(String[] args){
        final MinSaludEtapa3Multiafiliacion MinSaludEtapa3MultiafiliacionClass = new MinSaludEtapa3Multiafiliacion();

        int exitCode = MinSaludEtapa3MultiafiliacionClass.runJobInTOS(args);

        System.exit(exitCode);
    }
	

	
	
	private void getjobInfo() {
		final String TEMPLATE_PATH = "src/main/templates/jobInfo_template.properties";
		final String BUILD_PATH = "../jobInfo.properties";
		final String path = this.getClass().getResource("").getPath();
		if(path.lastIndexOf("target") > 0) {
			final java.io.File templateFile = new java.io.File(
					path.substring(0, path.lastIndexOf("target")).concat(TEMPLATE_PATH));
			if (templateFile.exists()) {
				readJobInfo(templateFile);
				return;
			}
		}
			readJobInfo(new java.io.File(BUILD_PATH));
	}

    private void readJobInfo(java.io.File jobInfoFile){
	
        if(jobInfoFile.exists()) {
            try (java.io.InputStream is = new java.io.FileInputStream(jobInfoFile)) {
            	jobInfo.load(is);
            } catch (IOException e) {
            	 
                
            }
        }
    }


    public String[][] runJob(String[] args) {

        int exitCode = runJobInTOS(args);
        String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

        return bufferValue;
    }

    public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;
    	
        return hastBufferOutput;
    }

    public int runJobInTOS(String[] args) {
	   	// reset status
	   	status = "";
	   	
        String lastStr = "";
        for (String arg : args) {
            if (arg.equalsIgnoreCase("--context_param")) {
                lastStr = arg;
            } else if (lastStr.equals("")) {
                evalParam(arg);
            } else {
                evalParam(lastStr + " " + arg);
                lastStr = "";
            }
        }
        enableLogStash = "true".equalsIgnoreCase(System.getProperty("audit.enabled"));


		
		

        if(clientHost == null) {
            clientHost = defaultClientHost;
        }

        if(pid == null || "0".equals(pid)) {
            pid = TalendString.getAsciiRandomString(6);
        }


        if (rootPid==null) {
            rootPid = pid;
        }


        if (fatherPid==null) {
            fatherPid = pid;
        }else{
            isChildJob = true;
        }

        if (portStats != null) {
            // portStats = -1; //for testing
            if (portStats < 0 || portStats > 65535) {
                // issue:10869, the portStats is invalid, so this client socket can't open
                System.err.println("The statistics socket port " + portStats + " is invalid.");
                execStat = false;
            }
        } else {
            execStat = false;
        }
        boolean inOSGi = routines.system.BundleUtils.inOSGi();

        try {
            java.util.Dictionary<String, Object> jobProperties = null;
            if (inOSGi) {
                jobProperties = routines.system.BundleUtils.getJobProperties(jobName);
    
                if (jobProperties != null && jobProperties.get("context") != null) {
                    contextStr = (String)jobProperties.get("context");
                }
            }
            //call job/subjob with an existing context, like: --context=production. if without this parameter, there will use the default context instead.
            java.io.InputStream inContext = MinSaludEtapa3Multiafiliacion.class.getClassLoader().getResourceAsStream("afi_principal/minsaludetapa3multiafiliacion_0_4/contexts/" + contextStr + ".properties");
            if (inContext == null) {
                inContext = MinSaludEtapa3Multiafiliacion.class.getClassLoader().getResourceAsStream("config/contexts/" + contextStr + ".properties");
            }
            if (inContext != null) {
                try {
                    //defaultProps is in order to keep the original context value
                    if(context != null && context.isEmpty()) {
    	                defaultProps.load(inContext);
    	                if (inOSGi && jobProperties != null) {
                             java.util.Enumeration<String> keys = jobProperties.keys();
                             while (keys.hasMoreElements()) {
                                 String propKey = keys.nextElement();
                                 if (defaultProps.containsKey(propKey)) {
                                     defaultProps.put(propKey, (String) jobProperties.get(propKey));
                                 }
                             }
    	                }
    	                context = new ContextProperties(defaultProps);
                    }
                } finally {
                    inContext.close();
                }
            } else if (!isDefaultContext) {
                //print info and job continue to run, for case: context_param is not empty.
                System.err.println("Could not find the context " + contextStr);
            }
            
            if(!context_param.isEmpty()) {
                context.putAll(context_param);
				//set types for params from parentJobs
				for (Object key: context_param.keySet()){
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
            }
            class ContextProcessing {
                private void processContext_0() {
                        context.setContextType("outCodigo", "id_Boolean");
                        if(context.getStringValue("outCodigo") == null) {
                            context.outCodigo = null;
                        } else {
                            try{
                                context.outCodigo=routines.system.ParserUtils.parseTo_Boolean (context.getProperty("outCodigo"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "outCodigo", e.getMessage()));
                                context.outCodigo=null;
                            }
                        }
                        context.setContextType("archivoSalida", "id_String");
                        if(context.getStringValue("archivoSalida") == null) {
                            context.archivoSalida = null;
                        } else {
                            context.archivoSalida=(String) context.getProperty("archivoSalida");
                        }
                        context.setContextType("infoConteoRegistros", "id_Integer");
                        if(context.getStringValue("infoConteoRegistros") == null) {
                            context.infoConteoRegistros = null;
                        } else {
                            try{
                                context.infoConteoRegistros=routines.system.ParserUtils.parseTo_Integer (context.getProperty("infoConteoRegistros"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "infoConteoRegistros", e.getMessage()));
                                context.infoConteoRegistros=null;
                            }
                        }
                        context.setContextType("auxAfiliadosCompendio", "id_String");
                        if(context.getStringValue("auxAfiliadosCompendio") == null) {
                            context.auxAfiliadosCompendio = null;
                        } else {
                            context.auxAfiliadosCompendio=(String) context.getProperty("auxAfiliadosCompendio");
                        }
                        context.setContextType("auxTotalRegistros", "id_Integer");
                        if(context.getStringValue("auxTotalRegistros") == null) {
                            context.auxTotalRegistros = null;
                        } else {
                            try{
                                context.auxTotalRegistros=routines.system.ParserUtils.parseTo_Integer (context.getProperty("auxTotalRegistros"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "auxTotalRegistros", e.getMessage()));
                                context.auxTotalRegistros=null;
                            }
                        }
                        context.setContextType("estArchivoActivo", "id_Integer");
                        if(context.getStringValue("estArchivoActivo") == null) {
                            context.estArchivoActivo = null;
                        } else {
                            try{
                                context.estArchivoActivo=routines.system.ParserUtils.parseTo_Integer (context.getProperty("estArchivoActivo"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "estArchivoActivo", e.getMessage()));
                                context.estArchivoActivo=null;
                            }
                        }
                        context.setContextType("estArchivoCancelado", "id_Integer");
                        if(context.getStringValue("estArchivoCancelado") == null) {
                            context.estArchivoCancelado = null;
                        } else {
                            try{
                                context.estArchivoCancelado=routines.system.ParserUtils.parseTo_Integer (context.getProperty("estArchivoCancelado"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "estArchivoCancelado", e.getMessage()));
                                context.estArchivoCancelado=null;
                            }
                        }
                        context.setContextType("estArchivoEnProceso", "id_Integer");
                        if(context.getStringValue("estArchivoEnProceso") == null) {
                            context.estArchivoEnProceso = null;
                        } else {
                            try{
                                context.estArchivoEnProceso=routines.system.ParserUtils.parseTo_Integer (context.getProperty("estArchivoEnProceso"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "estArchivoEnProceso", e.getMessage()));
                                context.estArchivoEnProceso=null;
                            }
                        }
                        context.setContextType("estArchivoErrorArchivo", "id_Integer");
                        if(context.getStringValue("estArchivoErrorArchivo") == null) {
                            context.estArchivoErrorArchivo = null;
                        } else {
                            try{
                                context.estArchivoErrorArchivo=routines.system.ParserUtils.parseTo_Integer (context.getProperty("estArchivoErrorArchivo"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "estArchivoErrorArchivo", e.getMessage()));
                                context.estArchivoErrorArchivo=null;
                            }
                        }
                        context.setContextType("estArchivoErrorProcesamiento", "id_Integer");
                        if(context.getStringValue("estArchivoErrorProcesamiento") == null) {
                            context.estArchivoErrorProcesamiento = null;
                        } else {
                            try{
                                context.estArchivoErrorProcesamiento=routines.system.ParserUtils.parseTo_Integer (context.getProperty("estArchivoErrorProcesamiento"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "estArchivoErrorProcesamiento", e.getMessage()));
                                context.estArchivoErrorProcesamiento=null;
                            }
                        }
                        context.setContextType("estArchivoInactivo", "id_Integer");
                        if(context.getStringValue("estArchivoInactivo") == null) {
                            context.estArchivoInactivo = null;
                        } else {
                            try{
                                context.estArchivoInactivo=routines.system.ParserUtils.parseTo_Integer (context.getProperty("estArchivoInactivo"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "estArchivoInactivo", e.getMessage()));
                                context.estArchivoInactivo=null;
                            }
                        }
                        context.setContextType("estArchivoPausado", "id_Integer");
                        if(context.getStringValue("estArchivoPausado") == null) {
                            context.estArchivoPausado = null;
                        } else {
                            try{
                                context.estArchivoPausado=routines.system.ParserUtils.parseTo_Integer (context.getProperty("estArchivoPausado"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "estArchivoPausado", e.getMessage()));
                                context.estArchivoPausado=null;
                            }
                        }
                        context.setContextType("estArchivoProcesado", "id_Integer");
                        if(context.getStringValue("estArchivoProcesado") == null) {
                            context.estArchivoProcesado = null;
                        } else {
                            try{
                                context.estArchivoProcesado=routines.system.ParserUtils.parseTo_Integer (context.getProperty("estArchivoProcesado"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "estArchivoProcesado", e.getMessage()));
                                context.estArchivoProcesado=null;
                            }
                        }
                        context.setContextType("fileSystem_Area", "id_String");
                        if(context.getStringValue("fileSystem_Area") == null) {
                            context.fileSystem_Area = null;
                        } else {
                            context.fileSystem_Area=(String) context.getProperty("fileSystem_Area");
                        }
                        context.setContextType("fileSystem_Path", "id_String");
                        if(context.getStringValue("fileSystem_Path") == null) {
                            context.fileSystem_Path = null;
                        } else {
                            context.fileSystem_Path=(String) context.getProperty("fileSystem_Path");
                        }
                        context.setContextType("infoIdArchivo", "id_Integer");
                        if(context.getStringValue("infoIdArchivo") == null) {
                            context.infoIdArchivo = null;
                        } else {
                            try{
                                context.infoIdArchivo=routines.system.ParserUtils.parseTo_Integer (context.getProperty("infoIdArchivo"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "infoIdArchivo", e.getMessage()));
                                context.infoIdArchivo=null;
                            }
                        }
                        context.setContextType("infoNombreArchivo", "id_String");
                        if(context.getStringValue("infoNombreArchivo") == null) {
                            context.infoNombreArchivo = null;
                        } else {
                            context.infoNombreArchivo=(String) context.getProperty("infoNombreArchivo");
                        }
                        context.setContextType("infoTipoArchivo", "id_Integer");
                        if(context.getStringValue("infoTipoArchivo") == null) {
                            context.infoTipoArchivo = null;
                        } else {
                            try{
                                context.infoTipoArchivo=routines.system.ParserUtils.parseTo_Integer (context.getProperty("infoTipoArchivo"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "infoTipoArchivo", e.getMessage()));
                                context.infoTipoArchivo=null;
                            }
                        }
                        context.setContextType("infoUsuarioIdArchivo", "id_Integer");
                        if(context.getStringValue("infoUsuarioIdArchivo") == null) {
                            context.infoUsuarioIdArchivo = null;
                        } else {
                            try{
                                context.infoUsuarioIdArchivo=routines.system.ParserUtils.parseTo_Integer (context.getProperty("infoUsuarioIdArchivo"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "infoUsuarioIdArchivo", e.getMessage()));
                                context.infoUsuarioIdArchivo=null;
                            }
                        }
                        context.setContextType("descripcionProceso", "id_String");
                        if(context.getStringValue("descripcionProceso") == null) {
                            context.descripcionProceso = null;
                        } else {
                            context.descripcionProceso=(String) context.getProperty("descripcionProceso");
                        }
                        context.setContextType("idProceso", "id_Integer");
                        if(context.getStringValue("idProceso") == null) {
                            context.idProceso = null;
                        } else {
                            try{
                                context.idProceso=routines.system.ParserUtils.parseTo_Integer (context.getProperty("idProceso"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "idProceso", e.getMessage()));
                                context.idProceso=null;
                            }
                        }
                        context.setContextType("tipoJobProceso", "id_Integer");
                        if(context.getStringValue("tipoJobProceso") == null) {
                            context.tipoJobProceso = null;
                        } else {
                            try{
                                context.tipoJobProceso=routines.system.ParserUtils.parseTo_Integer (context.getProperty("tipoJobProceso"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "tipoJobProceso", e.getMessage()));
                                context.tipoJobProceso=null;
                            }
                        }
                        context.setContextType("tipoProceso", "id_Integer");
                        if(context.getStringValue("tipoProceso") == null) {
                            context.tipoProceso = null;
                        } else {
                            try{
                                context.tipoProceso=routines.system.ParserUtils.parseTo_Integer (context.getProperty("tipoProceso"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "tipoProceso", e.getMessage()));
                                context.tipoProceso=null;
                            }
                        }
                        context.setContextType("mail_PasswordMail", "id_String");
                        if(context.getStringValue("mail_PasswordMail") == null) {
                            context.mail_PasswordMail = null;
                        } else {
                            context.mail_PasswordMail=(String) context.getProperty("mail_PasswordMail");
                        }
                        context.setContextType("mail_SMTPHost", "id_String");
                        if(context.getStringValue("mail_SMTPHost") == null) {
                            context.mail_SMTPHost = null;
                        } else {
                            context.mail_SMTPHost=(String) context.getProperty("mail_SMTPHost");
                        }
                        context.setContextType("mail_SMTPPort", "id_String");
                        if(context.getStringValue("mail_SMTPPort") == null) {
                            context.mail_SMTPPort = null;
                        } else {
                            context.mail_SMTPPort=(String) context.getProperty("mail_SMTPPort");
                        }
                        context.setContextType("mail_UsernameMail", "id_String");
                        if(context.getStringValue("mail_UsernameMail") == null) {
                            context.mail_UsernameMail = null;
                        } else {
                            context.mail_UsernameMail=(String) context.getProperty("mail_UsernameMail");
                        }
                        context.setContextType("oracle_AdditionalParams", "id_String");
                        if(context.getStringValue("oracle_AdditionalParams") == null) {
                            context.oracle_AdditionalParams = null;
                        } else {
                            context.oracle_AdditionalParams=(String) context.getProperty("oracle_AdditionalParams");
                        }
                        context.setContextType("oracle_Host", "id_String");
                        if(context.getStringValue("oracle_Host") == null) {
                            context.oracle_Host = null;
                        } else {
                            context.oracle_Host=(String) context.getProperty("oracle_Host");
                        }
                        context.setContextType("oracle_Password", "id_String");
                        if(context.getStringValue("oracle_Password") == null) {
                            context.oracle_Password = null;
                        } else {
                            context.oracle_Password=(String) context.getProperty("oracle_Password");
                        }
                        context.setContextType("oracle_Port", "id_String");
                        if(context.getStringValue("oracle_Port") == null) {
                            context.oracle_Port = null;
                        } else {
                            context.oracle_Port=(String) context.getProperty("oracle_Port");
                        }
                        context.setContextType("oracle_Schema", "id_String");
                        if(context.getStringValue("oracle_Schema") == null) {
                            context.oracle_Schema = null;
                        } else {
                            context.oracle_Schema=(String) context.getProperty("oracle_Schema");
                        }
                        context.setContextType("oracle_ServiceName", "id_String");
                        if(context.getStringValue("oracle_ServiceName") == null) {
                            context.oracle_ServiceName = null;
                        } else {
                            context.oracle_ServiceName=(String) context.getProperty("oracle_ServiceName");
                        }
                        context.setContextType("oracle_Sid", "id_String");
                        if(context.getStringValue("oracle_Sid") == null) {
                            context.oracle_Sid = null;
                        } else {
                            context.oracle_Sid=(String) context.getProperty("oracle_Sid");
                        }
                        context.setContextType("oracle_User", "id_String");
                        if(context.getStringValue("oracle_User") == null) {
                            context.oracle_User = null;
                        } else {
                            context.oracle_User=(String) context.getProperty("oracle_User");
                        }
                        context.setContextType("tipoArchivoEntesGenerado", "id_Integer");
                        if(context.getStringValue("tipoArchivoEntesGenerado") == null) {
                            context.tipoArchivoEntesGenerado = null;
                        } else {
                            try{
                                context.tipoArchivoEntesGenerado=routines.system.ParserUtils.parseTo_Integer (context.getProperty("tipoArchivoEntesGenerado"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "tipoArchivoEntesGenerado", e.getMessage()));
                                context.tipoArchivoEntesGenerado=null;
                            }
                        }
                        context.setContextType("tipoArchivoEntesTerritoriales", "id_Integer");
                        if(context.getStringValue("tipoArchivoEntesTerritoriales") == null) {
                            context.tipoArchivoEntesTerritoriales = null;
                        } else {
                            try{
                                context.tipoArchivoEntesTerritoriales=routines.system.ParserUtils.parseTo_Integer (context.getProperty("tipoArchivoEntesTerritoriales"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "tipoArchivoEntesTerritoriales", e.getMessage()));
                                context.tipoArchivoEntesTerritoriales=null;
                            }
                        }
                        context.setContextType("tipoArchivoFedevida", "id_Integer");
                        if(context.getStringValue("tipoArchivoFedevida") == null) {
                            context.tipoArchivoFedevida = null;
                        } else {
                            try{
                                context.tipoArchivoFedevida=routines.system.ParserUtils.parseTo_Integer (context.getProperty("tipoArchivoFedevida"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "tipoArchivoFedevida", e.getMessage()));
                                context.tipoArchivoFedevida=null;
                            }
                        }
                        context.setContextType("tipoArchivoFedevidaGenerado", "id_Integer");
                        if(context.getStringValue("tipoArchivoFedevidaGenerado") == null) {
                            context.tipoArchivoFedevidaGenerado = null;
                        } else {
                            try{
                                context.tipoArchivoFedevidaGenerado=routines.system.ParserUtils.parseTo_Integer (context.getProperty("tipoArchivoFedevidaGenerado"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "tipoArchivoFedevidaGenerado", e.getMessage()));
                                context.tipoArchivoFedevidaGenerado=null;
                            }
                        }
                        context.setContextType("tipoArchivoMinSaludEtapa2Novedades", "id_Integer");
                        if(context.getStringValue("tipoArchivoMinSaludEtapa2Novedades") == null) {
                            context.tipoArchivoMinSaludEtapa2Novedades = null;
                        } else {
                            try{
                                context.tipoArchivoMinSaludEtapa2Novedades=routines.system.ParserUtils.parseTo_Integer (context.getProperty("tipoArchivoMinSaludEtapa2Novedades"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "tipoArchivoMinSaludEtapa2Novedades", e.getMessage()));
                                context.tipoArchivoMinSaludEtapa2Novedades=null;
                            }
                        }
                        context.setContextType("tipoArchivoMinSaludEtapa2NovedadesGenerado", "id_Integer");
                        if(context.getStringValue("tipoArchivoMinSaludEtapa2NovedadesGenerado") == null) {
                            context.tipoArchivoMinSaludEtapa2NovedadesGenerado = null;
                        } else {
                            try{
                                context.tipoArchivoMinSaludEtapa2NovedadesGenerado=routines.system.ParserUtils.parseTo_Integer (context.getProperty("tipoArchivoMinSaludEtapa2NovedadesGenerado"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "tipoArchivoMinSaludEtapa2NovedadesGenerado", e.getMessage()));
                                context.tipoArchivoMinSaludEtapa2NovedadesGenerado=null;
                            }
                        }
                        context.setContextType("tipoArchivoMinSaludEtapa2NuevosRegistros", "id_Integer");
                        if(context.getStringValue("tipoArchivoMinSaludEtapa2NuevosRegistros") == null) {
                            context.tipoArchivoMinSaludEtapa2NuevosRegistros = null;
                        } else {
                            try{
                                context.tipoArchivoMinSaludEtapa2NuevosRegistros=routines.system.ParserUtils.parseTo_Integer (context.getProperty("tipoArchivoMinSaludEtapa2NuevosRegistros"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "tipoArchivoMinSaludEtapa2NuevosRegistros", e.getMessage()));
                                context.tipoArchivoMinSaludEtapa2NuevosRegistros=null;
                            }
                        }
                        context.setContextType("tipoArchivoMinSaludEtapa2NuevosRegistrosGenerado", "id_Integer");
                        if(context.getStringValue("tipoArchivoMinSaludEtapa2NuevosRegistrosGenerado") == null) {
                            context.tipoArchivoMinSaludEtapa2NuevosRegistrosGenerado = null;
                        } else {
                            try{
                                context.tipoArchivoMinSaludEtapa2NuevosRegistrosGenerado=routines.system.ParserUtils.parseTo_Integer (context.getProperty("tipoArchivoMinSaludEtapa2NuevosRegistrosGenerado"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "tipoArchivoMinSaludEtapa2NuevosRegistrosGenerado", e.getMessage()));
                                context.tipoArchivoMinSaludEtapa2NuevosRegistrosGenerado=null;
                            }
                        }
                        context.setContextType("tipoArchivoMinSaludEtapa3Multiafiliacion", "id_Integer");
                        if(context.getStringValue("tipoArchivoMinSaludEtapa3Multiafiliacion") == null) {
                            context.tipoArchivoMinSaludEtapa3Multiafiliacion = null;
                        } else {
                            try{
                                context.tipoArchivoMinSaludEtapa3Multiafiliacion=routines.system.ParserUtils.parseTo_Integer (context.getProperty("tipoArchivoMinSaludEtapa3Multiafiliacion"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "tipoArchivoMinSaludEtapa3Multiafiliacion", e.getMessage()));
                                context.tipoArchivoMinSaludEtapa3Multiafiliacion=null;
                            }
                        }
                        context.setContextType("tipoArchivoMinSaludEtapa3MultiafiliacionGenerado", "id_Integer");
                        if(context.getStringValue("tipoArchivoMinSaludEtapa3MultiafiliacionGenerado") == null) {
                            context.tipoArchivoMinSaludEtapa3MultiafiliacionGenerado = null;
                        } else {
                            try{
                                context.tipoArchivoMinSaludEtapa3MultiafiliacionGenerado=routines.system.ParserUtils.parseTo_Integer (context.getProperty("tipoArchivoMinSaludEtapa3MultiafiliacionGenerado"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "tipoArchivoMinSaludEtapa3MultiafiliacionGenerado", e.getMessage()));
                                context.tipoArchivoMinSaludEtapa3MultiafiliacionGenerado=null;
                            }
                        }
                        context.setContextType("archivoConfiguracion", "id_String");
                        if(context.getStringValue("archivoConfiguracion") == null) {
                            context.archivoConfiguracion = null;
                        } else {
                            context.archivoConfiguracion=(String) context.getProperty("archivoConfiguracion");
                        }
                        context.setContextType("auxAumentoRegistros", "id_Integer");
                        if(context.getStringValue("auxAumentoRegistros") == null) {
                            context.auxAumentoRegistros = null;
                        } else {
                            try{
                                context.auxAumentoRegistros=routines.system.ParserUtils.parseTo_Integer (context.getProperty("auxAumentoRegistros"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "auxAumentoRegistros", e.getMessage()));
                                context.auxAumentoRegistros=null;
                            }
                        }
                        context.setContextType("auxPosicionRegistros", "id_Integer");
                        if(context.getStringValue("auxPosicionRegistros") == null) {
                            context.auxPosicionRegistros = null;
                        } else {
                            try{
                                context.auxPosicionRegistros=routines.system.ParserUtils.parseTo_Integer (context.getProperty("auxPosicionRegistros"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "auxPosicionRegistros", e.getMessage()));
                                context.auxPosicionRegistros=null;
                            }
                        }
                        context.setContextType("auxRango", "id_String");
                        if(context.getStringValue("auxRango") == null) {
                            context.auxRango = null;
                        } else {
                            context.auxRango=(String) context.getProperty("auxRango");
                        }
                        context.setContextType("JasperAmbiente", "id_String");
                        if(context.getStringValue("JasperAmbiente") == null) {
                            context.JasperAmbiente = null;
                        } else {
                            context.JasperAmbiente=(String) context.getProperty("JasperAmbiente");
                        }
                        context.setContextType("JasperModulo", "id_String");
                        if(context.getStringValue("JasperModulo") == null) {
                            context.JasperModulo = null;
                        } else {
                            context.JasperModulo=(String) context.getProperty("JasperModulo");
                        }
                        context.setContextType("JasperPassword", "id_String");
                        if(context.getStringValue("JasperPassword") == null) {
                            context.JasperPassword = null;
                        } else {
                            context.JasperPassword=(String) context.getProperty("JasperPassword");
                        }
                        context.setContextType("JasperReporte", "id_String");
                        if(context.getStringValue("JasperReporte") == null) {
                            context.JasperReporte = null;
                        } else {
                            context.JasperReporte=(String) context.getProperty("JasperReporte");
                        }
                        context.setContextType("JasperServer", "id_String");
                        if(context.getStringValue("JasperServer") == null) {
                            context.JasperServer = null;
                        } else {
                            context.JasperServer=(String) context.getProperty("JasperServer");
                        }
                        context.setContextType("JasperUser", "id_String");
                        if(context.getStringValue("JasperUser") == null) {
                            context.JasperUser = null;
                        } else {
                            context.JasperUser=(String) context.getProperty("JasperUser");
                        }
                } 
                public void processAllContext() {
                        processContext_0();
                }
            }

            new ContextProcessing().processAllContext();
        } catch (java.io.IOException ie) {
            System.err.println("Could not load context "+contextStr);
            ie.printStackTrace();
        }

        // get context value from parent directly
        if (parentContextMap != null && !parentContextMap.isEmpty()) {if (parentContextMap.containsKey("outCodigo")) {
                context.outCodigo = (Boolean) parentContextMap.get("outCodigo");
            }if (parentContextMap.containsKey("archivoSalida")) {
                context.archivoSalida = (String) parentContextMap.get("archivoSalida");
            }if (parentContextMap.containsKey("infoConteoRegistros")) {
                context.infoConteoRegistros = (Integer) parentContextMap.get("infoConteoRegistros");
            }if (parentContextMap.containsKey("auxAfiliadosCompendio")) {
                context.auxAfiliadosCompendio = (String) parentContextMap.get("auxAfiliadosCompendio");
            }if (parentContextMap.containsKey("auxTotalRegistros")) {
                context.auxTotalRegistros = (Integer) parentContextMap.get("auxTotalRegistros");
            }if (parentContextMap.containsKey("estArchivoActivo")) {
                context.estArchivoActivo = (Integer) parentContextMap.get("estArchivoActivo");
            }if (parentContextMap.containsKey("estArchivoCancelado")) {
                context.estArchivoCancelado = (Integer) parentContextMap.get("estArchivoCancelado");
            }if (parentContextMap.containsKey("estArchivoEnProceso")) {
                context.estArchivoEnProceso = (Integer) parentContextMap.get("estArchivoEnProceso");
            }if (parentContextMap.containsKey("estArchivoErrorArchivo")) {
                context.estArchivoErrorArchivo = (Integer) parentContextMap.get("estArchivoErrorArchivo");
            }if (parentContextMap.containsKey("estArchivoErrorProcesamiento")) {
                context.estArchivoErrorProcesamiento = (Integer) parentContextMap.get("estArchivoErrorProcesamiento");
            }if (parentContextMap.containsKey("estArchivoInactivo")) {
                context.estArchivoInactivo = (Integer) parentContextMap.get("estArchivoInactivo");
            }if (parentContextMap.containsKey("estArchivoPausado")) {
                context.estArchivoPausado = (Integer) parentContextMap.get("estArchivoPausado");
            }if (parentContextMap.containsKey("estArchivoProcesado")) {
                context.estArchivoProcesado = (Integer) parentContextMap.get("estArchivoProcesado");
            }if (parentContextMap.containsKey("fileSystem_Area")) {
                context.fileSystem_Area = (String) parentContextMap.get("fileSystem_Area");
            }if (parentContextMap.containsKey("fileSystem_Path")) {
                context.fileSystem_Path = (String) parentContextMap.get("fileSystem_Path");
            }if (parentContextMap.containsKey("infoIdArchivo")) {
                context.infoIdArchivo = (Integer) parentContextMap.get("infoIdArchivo");
            }if (parentContextMap.containsKey("infoNombreArchivo")) {
                context.infoNombreArchivo = (String) parentContextMap.get("infoNombreArchivo");
            }if (parentContextMap.containsKey("infoTipoArchivo")) {
                context.infoTipoArchivo = (Integer) parentContextMap.get("infoTipoArchivo");
            }if (parentContextMap.containsKey("infoUsuarioIdArchivo")) {
                context.infoUsuarioIdArchivo = (Integer) parentContextMap.get("infoUsuarioIdArchivo");
            }if (parentContextMap.containsKey("descripcionProceso")) {
                context.descripcionProceso = (String) parentContextMap.get("descripcionProceso");
            }if (parentContextMap.containsKey("idProceso")) {
                context.idProceso = (Integer) parentContextMap.get("idProceso");
            }if (parentContextMap.containsKey("tipoJobProceso")) {
                context.tipoJobProceso = (Integer) parentContextMap.get("tipoJobProceso");
            }if (parentContextMap.containsKey("tipoProceso")) {
                context.tipoProceso = (Integer) parentContextMap.get("tipoProceso");
            }if (parentContextMap.containsKey("mail_PasswordMail")) {
                context.mail_PasswordMail = (String) parentContextMap.get("mail_PasswordMail");
            }if (parentContextMap.containsKey("mail_SMTPHost")) {
                context.mail_SMTPHost = (String) parentContextMap.get("mail_SMTPHost");
            }if (parentContextMap.containsKey("mail_SMTPPort")) {
                context.mail_SMTPPort = (String) parentContextMap.get("mail_SMTPPort");
            }if (parentContextMap.containsKey("mail_UsernameMail")) {
                context.mail_UsernameMail = (String) parentContextMap.get("mail_UsernameMail");
            }if (parentContextMap.containsKey("oracle_AdditionalParams")) {
                context.oracle_AdditionalParams = (String) parentContextMap.get("oracle_AdditionalParams");
            }if (parentContextMap.containsKey("oracle_Host")) {
                context.oracle_Host = (String) parentContextMap.get("oracle_Host");
            }if (parentContextMap.containsKey("oracle_Password")) {
                context.oracle_Password = (String) parentContextMap.get("oracle_Password");
            }if (parentContextMap.containsKey("oracle_Port")) {
                context.oracle_Port = (String) parentContextMap.get("oracle_Port");
            }if (parentContextMap.containsKey("oracle_Schema")) {
                context.oracle_Schema = (String) parentContextMap.get("oracle_Schema");
            }if (parentContextMap.containsKey("oracle_ServiceName")) {
                context.oracle_ServiceName = (String) parentContextMap.get("oracle_ServiceName");
            }if (parentContextMap.containsKey("oracle_Sid")) {
                context.oracle_Sid = (String) parentContextMap.get("oracle_Sid");
            }if (parentContextMap.containsKey("oracle_User")) {
                context.oracle_User = (String) parentContextMap.get("oracle_User");
            }if (parentContextMap.containsKey("tipoArchivoEntesGenerado")) {
                context.tipoArchivoEntesGenerado = (Integer) parentContextMap.get("tipoArchivoEntesGenerado");
            }if (parentContextMap.containsKey("tipoArchivoEntesTerritoriales")) {
                context.tipoArchivoEntesTerritoriales = (Integer) parentContextMap.get("tipoArchivoEntesTerritoriales");
            }if (parentContextMap.containsKey("tipoArchivoFedevida")) {
                context.tipoArchivoFedevida = (Integer) parentContextMap.get("tipoArchivoFedevida");
            }if (parentContextMap.containsKey("tipoArchivoFedevidaGenerado")) {
                context.tipoArchivoFedevidaGenerado = (Integer) parentContextMap.get("tipoArchivoFedevidaGenerado");
            }if (parentContextMap.containsKey("tipoArchivoMinSaludEtapa2Novedades")) {
                context.tipoArchivoMinSaludEtapa2Novedades = (Integer) parentContextMap.get("tipoArchivoMinSaludEtapa2Novedades");
            }if (parentContextMap.containsKey("tipoArchivoMinSaludEtapa2NovedadesGenerado")) {
                context.tipoArchivoMinSaludEtapa2NovedadesGenerado = (Integer) parentContextMap.get("tipoArchivoMinSaludEtapa2NovedadesGenerado");
            }if (parentContextMap.containsKey("tipoArchivoMinSaludEtapa2NuevosRegistros")) {
                context.tipoArchivoMinSaludEtapa2NuevosRegistros = (Integer) parentContextMap.get("tipoArchivoMinSaludEtapa2NuevosRegistros");
            }if (parentContextMap.containsKey("tipoArchivoMinSaludEtapa2NuevosRegistrosGenerado")) {
                context.tipoArchivoMinSaludEtapa2NuevosRegistrosGenerado = (Integer) parentContextMap.get("tipoArchivoMinSaludEtapa2NuevosRegistrosGenerado");
            }if (parentContextMap.containsKey("tipoArchivoMinSaludEtapa3Multiafiliacion")) {
                context.tipoArchivoMinSaludEtapa3Multiafiliacion = (Integer) parentContextMap.get("tipoArchivoMinSaludEtapa3Multiafiliacion");
            }if (parentContextMap.containsKey("tipoArchivoMinSaludEtapa3MultiafiliacionGenerado")) {
                context.tipoArchivoMinSaludEtapa3MultiafiliacionGenerado = (Integer) parentContextMap.get("tipoArchivoMinSaludEtapa3MultiafiliacionGenerado");
            }if (parentContextMap.containsKey("archivoConfiguracion")) {
                context.archivoConfiguracion = (String) parentContextMap.get("archivoConfiguracion");
            }if (parentContextMap.containsKey("auxAumentoRegistros")) {
                context.auxAumentoRegistros = (Integer) parentContextMap.get("auxAumentoRegistros");
            }if (parentContextMap.containsKey("auxPosicionRegistros")) {
                context.auxPosicionRegistros = (Integer) parentContextMap.get("auxPosicionRegistros");
            }if (parentContextMap.containsKey("auxRango")) {
                context.auxRango = (String) parentContextMap.get("auxRango");
            }if (parentContextMap.containsKey("JasperAmbiente")) {
                context.JasperAmbiente = (String) parentContextMap.get("JasperAmbiente");
            }if (parentContextMap.containsKey("JasperModulo")) {
                context.JasperModulo = (String) parentContextMap.get("JasperModulo");
            }if (parentContextMap.containsKey("JasperPassword")) {
                context.JasperPassword = (String) parentContextMap.get("JasperPassword");
            }if (parentContextMap.containsKey("JasperReporte")) {
                context.JasperReporte = (String) parentContextMap.get("JasperReporte");
            }if (parentContextMap.containsKey("JasperServer")) {
                context.JasperServer = (String) parentContextMap.get("JasperServer");
            }if (parentContextMap.containsKey("JasperUser")) {
                context.JasperUser = (String) parentContextMap.get("JasperUser");
            }
        }

        //Resume: init the resumeUtil
        resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
        resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
        resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
        //Resume: jobStart
        resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","","","",resumeUtil.convertToJsonText(context,ContextProperties.class,parametersToEncrypt));


if(execStat) {
    try {
        runStat.openSocket(!isChildJob);
        runStat.setAllPID(rootPid, fatherPid, pid, jobName);
        runStat.startThreadStat(clientHost, portStats);
        runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
    } catch (java.io.IOException ioException) {
        ioException.printStackTrace();
    }
}



	
	    java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
	    globalMap.put("concurrentHashMap", concurrentHashMap);
	

    long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
    long endUsedMemory = 0;
    long end = 0;

    startTime = System.currentTimeMillis();


this.globalResumeTicket = true;//to run tPreJob

try {
errorCode = null;tPrejob_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tPrejob_1) {
globalMap.put("tPrejob_1_SUBPROCESS_STATE", -1);

e_tPrejob_1.printStackTrace();

}




this.globalResumeTicket = false;//to run others jobs

try {
errorCode = null;tFileExist_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tFileExist_1) {
globalMap.put("tFileExist_1_SUBPROCESS_STATE", -1);

e_tFileExist_1.printStackTrace();

}

this.globalResumeTicket = true;//to run tPostJob

try {
errorCode = null;tPostjob_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tPostjob_1) {
globalMap.put("tPostjob_1_SUBPROCESS_STATE", -1);

e_tPostjob_1.printStackTrace();

}



        end = System.currentTimeMillis();

        if (watch) {
            System.out.println((end-startTime)+" milliseconds");
        }

        endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
        if (false) {
            System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : MinSaludEtapa3Multiafiliacion");
        }



if (execStat) {
    runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
    runStat.stopThreadStat();
}
    int returnCode = 0;


    if(errorCode == null) {
         returnCode = status != null && status.equals("failure") ? 1 : 0;
    } else {
         returnCode = errorCode.intValue();
    }
    resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","" + returnCode,"","","");
    resumeUtil.flush();


    return returnCode;

  }

    // only for OSGi env
    public void destroy() {
    closeSqlDbConnections();


    }



    private void closeSqlDbConnections() {
        try {
            Object obj_conn;
            obj_conn = globalMap.remove("conn_tOracleConnection_1");
            if (null != obj_conn) {
                ((java.sql.Connection) obj_conn).close();
            }
        } catch (java.lang.Exception e) {
        }
    }











    private java.util.Map<String, Object> getSharedConnections4REST() {
        java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();
            connections.put("conn_tOracleConnection_1", globalMap.get("conn_tOracleConnection_1"));






        return connections;
    }

    private void evalParam(String arg) {
        if (arg.startsWith("--resuming_logs_dir_path")) {
            resuming_logs_dir_path = arg.substring(25);
        } else if (arg.startsWith("--resuming_checkpoint_path")) {
            resuming_checkpoint_path = arg.substring(27);
        } else if (arg.startsWith("--parent_part_launcher")) {
            parent_part_launcher = arg.substring(23);
        } else if (arg.startsWith("--watch")) {
            watch = true;
        } else if (arg.startsWith("--stat_port=")) {
            String portStatsStr = arg.substring(12);
            if (portStatsStr != null && !portStatsStr.equals("null")) {
                portStats = Integer.parseInt(portStatsStr);
            }
        } else if (arg.startsWith("--trace_port=")) {
            portTraces = Integer.parseInt(arg.substring(13));
        } else if (arg.startsWith("--client_host=")) {
            clientHost = arg.substring(14);
        } else if (arg.startsWith("--context=")) {
            contextStr = arg.substring(10);
            isDefaultContext = false;
        } else if (arg.startsWith("--father_pid=")) {
            fatherPid = arg.substring(13);
        } else if (arg.startsWith("--root_pid=")) {
            rootPid = arg.substring(11);
        } else if (arg.startsWith("--father_node=")) {
            fatherNode = arg.substring(14);
        } else if (arg.startsWith("--pid=")) {
            pid = arg.substring(6);
        } else if (arg.startsWith("--context_type")) {
            String keyValue = arg.substring(15);
			int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.setContextType(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }

            }

		} else if (arg.startsWith("--context_param")) {
            String keyValue = arg.substring(16);
            int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }
            }
        } else if (arg.startsWith("--context_file")) {
        	String keyValue = arg.substring(15);
        	String filePath = new String(java.util.Base64.getDecoder().decode(keyValue));
        	java.nio.file.Path contextFile = java.nio.file.Paths.get(filePath);
            try (java.io.BufferedReader reader = java.nio.file.Files.newBufferedReader(contextFile)) {
                String line;
                while ((line = reader.readLine()) != null) {
                    int index = -1;
                    if ( (index = line.indexOf('=')) > -1) {
							if (line.startsWith("--context_param")) {
								if ("id_Password".equals(context_param.getContextType(line.substring(16, index)))) {
									context_param.put(line.substring(16, index), routines.system.PasswordEncryptUtil.decryptPassword(
											line.substring(index + 1)));
								} else {
									context_param.put(line.substring(16, index), line.substring(index + 1));
								}
							}else {//--context_type
								context_param.setContextType(line.substring(15, index), line.substring(index + 1));
							}
                    }
                }
            } catch (java.io.IOException e) {
            	System.err.println("Could not load the context file: " + filePath);
                e.printStackTrace();
            }
        } else if (arg.startsWith("--log4jLevel=")) {
            log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--audit.enabled") && arg.contains("=")) {//for trunjob call
		    final int equal = arg.indexOf('=');
			final String key = arg.substring("--".length(), equal);
			System.setProperty(key, arg.substring(equal + 1));
		}
    }
    
    private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

    private final String[][] escapeChars = {
        {"\\\\","\\"},{"\\n","\n"},{"\\'","\'"},{"\\r","\r"},
        {"\\f","\f"},{"\\b","\b"},{"\\t","\t"}
        };
    private String replaceEscapeChars (String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0],currIndex);
				if (index>=0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0], strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
    }

    public Integer getErrorCode() {
        return errorCode;
    }


    public String getStatus() {
        return status;
    }

    ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 *     856287 characters generated by Talend Open Studio for ESB 
 *     on the October 28, 2024, 2:33:27 PM COT
 ************************************************************************************************/