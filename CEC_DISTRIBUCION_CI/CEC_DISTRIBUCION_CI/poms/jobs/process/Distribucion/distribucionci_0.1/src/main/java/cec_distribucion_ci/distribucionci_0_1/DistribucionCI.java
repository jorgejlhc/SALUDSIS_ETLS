// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for ESB
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


package cec_distribucion_ci.distribucionci_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.ValidateRows;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.Utils;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;
 




	//the import part of tJava_1
	//import java.util.List;

	//the import part of tJavaRow_1
	//import java.util.List;

	//the import part of tJava_3
	//import java.util.List;

	//the import part of tJava_4
	//import java.util.List;

	//the import part of tJava_5
	//import java.util.List;

	//the import part of tJavaRow_2
	//import java.util.List;

	//the import part of tJavaRow_5
	//import java.util.List;

	//the import part of tJava_2
	//import java.util.List;


@SuppressWarnings("unused")

/**
 * Job: DistribucionCI Purpose: Distribucion de los costos indirectos<br>
 * Description: Distribucion de los costos indirectos <br>
 * @author jorgejlhc@gmail.com
 * @version 8.8.8.20240722_1936-SNAPSHOT
 * @status 
 */
public class DistribucionCI implements TalendJob {

protected static void logIgnoredError(String message, Throwable cause) {
       System.err.println(message);
       if (cause != null) {
               cause.printStackTrace();
       }

}


	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}
	private Object[] multiThreadLockWrite = new Object[0];
	
	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	
	private final static String utf8Charset = "UTF-8";
	

	//contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String,String> propertyTypes = new java.util.HashMap<>();
		
		public PropertiesWithType(java.util.Properties properties){
			super(properties);
		}
		public PropertiesWithType(){
			super();
		}
		
		public void setContextType(String key, String type) {
			propertyTypes.put(key,type);
		}
	
		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}	
	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();
		

	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties){
			super(properties);
		}
		public ContextProperties(){
			super();
		}

		public void synchronizeContext(){
			
			if(db_origen_AdditionalParams != null){
				
					this.setProperty("db_origen_AdditionalParams", db_origen_AdditionalParams.toString());
				
			}
			
			if(db_origen_Login != null){
				
					this.setProperty("db_origen_Login", db_origen_Login.toString());
				
			}
			
			if(db_origen_Password != null){
				
					this.setProperty("db_origen_Password", db_origen_Password.toString());
				
			}
			
			if(db_origen_Port != null){
				
					this.setProperty("db_origen_Port", db_origen_Port.toString());
				
			}
			
			if(db_origen_Schema != null){
				
					this.setProperty("db_origen_Schema", db_origen_Schema.toString());
				
			}
			
			if(db_origen_Server != null){
				
					this.setProperty("db_origen_Server", db_origen_Server.toString());
				
			}
			
			if(db_origen_ServiceName != null){
				
					this.setProperty("db_origen_ServiceName", db_origen_ServiceName.toString());
				
			}
			
			if(PathStorage != null){
				
					this.setProperty("PathStorage", PathStorage.toString());
				
			}
			
			if(db_destino_AdditionalParams != null){
				
					this.setProperty("db_destino_AdditionalParams", db_destino_AdditionalParams.toString());
				
			}
			
			if(db_destino_Login != null){
				
					this.setProperty("db_destino_Login", db_destino_Login.toString());
				
			}
			
			if(db_destino_Password != null){
				
					this.setProperty("db_destino_Password", db_destino_Password.toString());
				
			}
			
			if(db_destino_Port != null){
				
					this.setProperty("db_destino_Port", db_destino_Port.toString());
				
			}
			
			if(db_destino_Schema != null){
				
					this.setProperty("db_destino_Schema", db_destino_Schema.toString());
				
			}
			
			if(db_destino_Server != null){
				
					this.setProperty("db_destino_Server", db_destino_Server.toString());
				
			}
			
			if(db_destino_ServiceName != null){
				
					this.setProperty("db_destino_ServiceName", db_destino_ServiceName.toString());
				
			}
			
			if(AnexoId != null){
				
					this.setProperty("AnexoId", AnexoId.toString());
				
			}
			
			if(ConsolidadoDEP != null){
				
					this.setProperty("ConsolidadoDEP", ConsolidadoDEP.toString());
				
			}
			
			if(ConsolidadoDEP_ESM != null){
				
					this.setProperty("ConsolidadoDEP_ESM", ConsolidadoDEP_ESM.toString());
				
			}
			
			if(ConsolidadoGGRL != null){
				
					this.setProperty("ConsolidadoGGRL", ConsolidadoGGRL.toString());
				
			}
			
			if(ConsolidadoGGRL_ESM != null){
				
					this.setProperty("ConsolidadoGGRL_ESM", ConsolidadoGGRL_ESM.toString());
				
			}
			
			if(ControlDate != null){
				
					this.setProperty("ControlDate", ControlDate.toString());
				
			}
			
			if(FechaToday != null){
				
					String pattern_FechaToday = "yyyy-MM-dd HH:mm:ss";
					String value_FechaToday = "";
					String[] parts_FechaToday = value_FechaToday.split(";");
					if(parts_FechaToday.length > 1){
						pattern_FechaToday = parts_FechaToday[0];
						this.setProperty("FechaToday", pattern_FechaToday + ";" + FormatterUtils.format_Date(FechaToday, pattern_FechaToday));
					}else{
						this.setProperty("FechaToday", FormatterUtils.format_Date(FechaToday, pattern_FechaToday));
					}
				
			}
			
			if(Periodo != null){
				
					String pattern_Periodo = "yyyy-MM-dd HH:mm:ss";
					String value_Periodo = "";
					String[] parts_Periodo = value_Periodo.split(";");
					if(parts_Periodo.length > 1){
						pattern_Periodo = parts_Periodo[0];
						this.setProperty("Periodo", pattern_Periodo + ";" + FormatterUtils.format_Date(Periodo, pattern_Periodo));
					}else{
						this.setProperty("Periodo", FormatterUtils.format_Date(Periodo, pattern_Periodo));
					}
				
			}
			
			if(TmpPeriodo != null){
				
					this.setProperty("TmpPeriodo", TmpPeriodo.toString());
				
			}
			
			if(Valor != null){
				
					this.setProperty("Valor", Valor.toString());
				
			}
			
			if(BODEGA != null){
				
					this.setProperty("BODEGA", BODEGA.toString());
				
			}
			
			if(ERROR != null){
				
					this.setProperty("ERROR", ERROR.toString());
				
			}
			
			if(ESTADO != null){
				
					this.setProperty("ESTADO", ESTADO.toString());
				
			}
			
			if(ESTADO_EXEC != null){
				
					this.setProperty("ESTADO_EXEC", ESTADO_EXEC.toString());
				
			}
			
			if(FANTERIOR != null){
				
					this.setProperty("FANTERIOR", FANTERIOR.toString());
				
			}
			
			if(FECHA_EJECUCION != null){
				
					this.setProperty("FECHA_EJECUCION", FECHA_EJECUCION.toString());
				
			}
			
			if(HORA_FINAL != null){
				
					this.setProperty("HORA_FINAL", HORA_FINAL.toString());
				
			}
			
			if(HORA_INICIO != null){
				
					this.setProperty("HORA_INICIO", HORA_INICIO.toString());
				
			}
			
			if(LOGS_ERROR != null){
				
					this.setProperty("LOGS_ERROR", LOGS_ERROR.toString());
				
			}
			
			if(LOGS_EXECUTION != null){
				
					this.setProperty("LOGS_EXECUTION", LOGS_EXECUTION.toString());
				
			}
			
			if(ORIGEN != null){
				
					this.setProperty("ORIGEN", ORIGEN.toString());
				
			}
			
		}
		
		//if the stored or passed value is "<TALEND_NULL>" string, it mean null
		public String getStringValue(String key) {
			String origin_value = this.getProperty(key);
			if(NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY.equals(origin_value)) {
				return null;
			}
			return origin_value;
		}

public String db_origen_AdditionalParams;
public String getDb_origen_AdditionalParams(){
	return this.db_origen_AdditionalParams;
}
public String db_origen_Login;
public String getDb_origen_Login(){
	return this.db_origen_Login;
}
public java.lang.String db_origen_Password;
public java.lang.String getDb_origen_Password(){
	return this.db_origen_Password;
}
public String db_origen_Port;
public String getDb_origen_Port(){
	return this.db_origen_Port;
}
public String db_origen_Schema;
public String getDb_origen_Schema(){
	return this.db_origen_Schema;
}
public String db_origen_Server;
public String getDb_origen_Server(){
	return this.db_origen_Server;
}
public String db_origen_ServiceName;
public String getDb_origen_ServiceName(){
	return this.db_origen_ServiceName;
}
public String PathStorage;
public String getPathStorage(){
	return this.PathStorage;
}
public String db_destino_AdditionalParams;
public String getDb_destino_AdditionalParams(){
	return this.db_destino_AdditionalParams;
}
public String db_destino_Login;
public String getDb_destino_Login(){
	return this.db_destino_Login;
}
public java.lang.String db_destino_Password;
public java.lang.String getDb_destino_Password(){
	return this.db_destino_Password;
}
public String db_destino_Port;
public String getDb_destino_Port(){
	return this.db_destino_Port;
}
public String db_destino_Schema;
public String getDb_destino_Schema(){
	return this.db_destino_Schema;
}
public String db_destino_Server;
public String getDb_destino_Server(){
	return this.db_destino_Server;
}
public String db_destino_ServiceName;
public String getDb_destino_ServiceName(){
	return this.db_destino_ServiceName;
}
public Integer AnexoId;
public Integer getAnexoId(){
	return this.AnexoId;
}
public Double ConsolidadoDEP;
public Double getConsolidadoDEP(){
	return this.ConsolidadoDEP;
}
public Double ConsolidadoDEP_ESM;
public Double getConsolidadoDEP_ESM(){
	return this.ConsolidadoDEP_ESM;
}
public Double ConsolidadoGGRL;
public Double getConsolidadoGGRL(){
	return this.ConsolidadoGGRL;
}
public Double ConsolidadoGGRL_ESM;
public Double getConsolidadoGGRL_ESM(){
	return this.ConsolidadoGGRL_ESM;
}
public Integer ControlDate;
public Integer getControlDate(){
	return this.ControlDate;
}
public java.util.Date FechaToday;
public java.util.Date getFechaToday(){
	return this.FechaToday;
}
public java.util.Date Periodo;
public java.util.Date getPeriodo(){
	return this.Periodo;
}
public String TmpPeriodo;
public String getTmpPeriodo(){
	return this.TmpPeriodo;
}
public Double Valor;
public Double getValor(){
	return this.Valor;
}
public String BODEGA;
public String getBODEGA(){
	return this.BODEGA;
}
public String ERROR;
public String getERROR(){
	return this.ERROR;
}
public String ESTADO;
public String getESTADO(){
	return this.ESTADO;
}
public String ESTADO_EXEC;
public String getESTADO_EXEC(){
	return this.ESTADO_EXEC;
}
public String FANTERIOR;
public String getFANTERIOR(){
	return this.FANTERIOR;
}
public String FECHA_EJECUCION;
public String getFECHA_EJECUCION(){
	return this.FECHA_EJECUCION;
}
public String HORA_FINAL;
public String getHORA_FINAL(){
	return this.HORA_FINAL;
}
public String HORA_INICIO;
public String getHORA_INICIO(){
	return this.HORA_INICIO;
}
public String LOGS_ERROR;
public String getLOGS_ERROR(){
	return this.LOGS_ERROR;
}
public String LOGS_EXECUTION;
public String getLOGS_EXECUTION(){
	return this.LOGS_EXECUTION;
}
public String ORIGEN;
public String getORIGEN(){
	return this.ORIGEN;
}
	}
			
	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.
	public ContextProperties getContext() {
		return this.context;
	}
	private final String jobVersion = "0.1";
	private final String jobName = "DistribucionCI";
	private final String projectName = "CEC_DISTRIBUCION_CI";
	public Integer errorCode = null;
	private String currentComponent = "";
	
	private String cLabel =  null;
	
		private final java.util.Map<String, Object> globalMap = java.util.Collections.synchronizedMap(new java.util.HashMap<String, Object>());
		
	
		private final java.util.Map<String, Long> start_Hash = java.util.Collections.synchronizedMap(new java.util.HashMap<String, Long>());
		private final java.util.Map<String, Long> end_Hash = java.util.Collections.synchronizedMap(new java.util.HashMap<String, Long>());
		private final java.util.Map<String, Boolean> ok_Hash = java.util.Collections.synchronizedMap(new java.util.HashMap<String, Boolean>());
		public  final java.util.List<String[]> globalBuffer = java.util.Collections.synchronizedList(new java.util.ArrayList<String[]>());
	

private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";
	
	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(), new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}
	
	public void setDataSourceReferences(List serviceReferences) throws Exception{
		
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		java.util.Map<String, javax.sql.DataSource> dataSources = new java.util.HashMap<String, javax.sql.DataSource>();
		
		for (java.util.Map.Entry<String, javax.sql.DataSource> entry : BundleUtils.getServices(serviceReferences,  javax.sql.DataSource.class).entrySet()) {
                    dataSources.put(entry.getKey(), entry.getValue());
                    talendDataSources.put(entry.getKey(), new routines.system.TalendDataSource(entry.getValue()));
		}

		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}

	LogCatcherUtils tLogCatcher_1 = new LogCatcherUtils();

private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

public String getExceptionStackTrace() {
	if ("failure".equals(this.getStatus())) {
		errorMessagePS.flush();
		return baos.toString();
	}
	return null;
}

private Exception exception;

public Exception getException() {
	if ("failure".equals(this.getStatus())) {
		return this.exception;
	}
	return null;
}

private class TalendException extends Exception {

	private static final long serialVersionUID = 1L;

	private java.util.Map<String, Object> globalMap = null;
	private Exception e = null;
	
	private String currentComponent = null;
	private String cLabel =  null;
	
	private String virtualComponentName = null;
	
	public void setVirtualComponentName (String virtualComponentName){
		this.virtualComponentName = virtualComponentName;
	}

	private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
		this.currentComponent= errorComponent;
		this.globalMap = globalMap;
		this.e = e;
	}
	
	private TalendException(Exception e, String errorComponent, String errorComponentLabel, final java.util.Map<String, Object> globalMap) {
		this(e, errorComponent, globalMap);
		this.cLabel = errorComponentLabel;
	}

	public Exception getException() {
		return this.e;
	}

	public String getCurrentComponent() {
		return this.currentComponent;
	}

	
    public String getExceptionCauseMessage(Exception e){
        Throwable cause = e;
        String message = null;
        int i = 10;
        while (null != cause && 0 < i--) {
            message = cause.getMessage();
            if (null == message) {
                cause = cause.getCause();
            } else {
                break;          
            }
        }
        if (null == message) {
            message = e.getClass().getName();
        }   
        return message;
    }

	@Override
	public void printStackTrace() {
		if (!(e instanceof TalendException || e instanceof TDieException)) {
			if(virtualComponentName!=null && currentComponent.indexOf(virtualComponentName+"_")==0){
				globalMap.put(virtualComponentName+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			}
			globalMap.put(currentComponent+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
		}
		if (!(e instanceof TDieException)) {
			if(e instanceof TalendException){
				e.printStackTrace();
			} else {
				e.printStackTrace();
				e.printStackTrace(errorMessagePS);
				DistribucionCI.this.exception = e;
			}
		}
		if (!(e instanceof TalendException)) {
		try {
			for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
				if (m.getName().compareTo(currentComponent + "_error") == 0) {
					m.invoke(DistribucionCI.this, new Object[] { e , currentComponent, globalMap});
					break;
				}
			}

			if(!(e instanceof TDieException)){
				tLogCatcher_1.addMessage("Java Exception", currentComponent, 6, e.getClass().getName() + ":" + e.getMessage(), 1);
				tLogCatcher_1Process(globalMap);
			}
			} catch (TalendException e) {
				// do nothing
			
		} catch (Exception e) {
			this.e.printStackTrace();
		}
		}
	}
}

			public void tPrejob_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tPrejob_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tJava_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputXML_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tFileInputXML_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaRow_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tFileInputXML_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleConnection_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
						try {
							
								if(this.execStat){
									runStat.updateStatOnConnection("OnComponentError1", 0, "error");
								}
							
							
								((java.util.Map)threadLocal.get()).put("errorCode", null);
								tDie_1Process(globalMap);
								if ( !"failure".equals(((java.util.Map)threadLocal.get()).get("status")) ) {
									((java.util.Map)threadLocal.get()).put("status", "end");
								}
								

						} catch (Exception e) {
							e.printStackTrace();
						}
						
					tOracleConnection_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDie_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDie_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostjob_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tPostjob_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tJava_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleClose_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleClose_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFixedFlowInput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tFixedFlowInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputDelimited_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tFixedFlowInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tJava_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFlowToIterate_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleRow_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleRow_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashOutput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashOutput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashOutput_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaRow_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaRow_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_11_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashOutput_9_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashOutput_10_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashOutput_11_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashOutput_12_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashOutput_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashOutput_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashOutput_7_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashOutput_8_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_10_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_10_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_7_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_10_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleOutput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_10_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleRow_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleRow_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_9_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_8_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_7_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_11_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_10_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogCatcher_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tLogCatcher_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputDelimited_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tLogCatcher_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRunJob_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tLogCatcher_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleRow_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tLogCatcher_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tJava_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row14_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row17_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row12_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row11_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row10_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row21_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row16_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_10_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tSortRow_1_SortOut_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
							tSortRow_1_SortIn_error(exception, errorComponent, globalMap);
						
						}
					
			public void tSortRow_1_SortIn_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPrejob_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileInputXML_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleConnection_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDie_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tPostjob_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_3_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleClose_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFixedFlowInput_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_4_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleInput_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleRow_3_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleInput_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleInput_3_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleInput_5_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleInput_4_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tHashInput_6_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tHashInput_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tHashInput_10_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleRow_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tLogCatcher_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
	









public void tPrejob_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPrejob_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tPrejob_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tPrejob_1", false);
		start_Hash.put("tPrejob_1", System.currentTimeMillis());
		
	
	currentComponent="tPrejob_1";
	
	
		int tos_count_tPrejob_1 = 0;
		

 



/**
 * [tPrejob_1 begin ] stop
 */
	
	/**
	 * [tPrejob_1 main ] start
	 */

	

	
	
	currentComponent="tPrejob_1";
	
	

 


	tos_count_tPrejob_1++;

/**
 * [tPrejob_1 main ] stop
 */
	
	/**
	 * [tPrejob_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tPrejob_1";
	
	

 



/**
 * [tPrejob_1 process_data_begin ] stop
 */
	
	/**
	 * [tPrejob_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tPrejob_1";
	
	

 



/**
 * [tPrejob_1 process_data_end ] stop
 */
	
	/**
	 * [tPrejob_1 end ] start
	 */

	

	
	
	currentComponent="tPrejob_1";
	
	

 

ok_Hash.put("tPrejob_1", true);
end_Hash.put("tPrejob_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk1", 0, "ok");
				}
				tJava_1Process(globalMap);



/**
 * [tPrejob_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPrejob_1 finally ] start
	 */

	

	
	
	currentComponent="tPrejob_1";
	
	

 



/**
 * [tPrejob_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPrejob_1_SUBPROCESS_STATE", 1);
	}
	


public void tJava_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tJava_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_1", false);
		start_Hash.put("tJava_1", System.currentTimeMillis());
		
	
	currentComponent="tJava_1";
	
	
		int tos_count_tJava_1 = 0;
		


context.FECHA_EJECUCION = TalendDate.getDate("DD/MM/YYYY");
context.HORA_INICIO = TalendDate.getDate("HH:mm:ss");

//VARIABLE QUE LLEVA EL CONTEO DE FILAS (REGISTROS) DEL ARCHIVO
globalMap.put("FILAS_ARCHIVO", 0);
//VARIABLE QUE LLEVA EL CONTEO DE FILAS DE ERROR DEL ARCHIVO
globalMap.put("FILAS_ERROR", 0);
//VARIABLE QUE LLEVA EL CONTEO DE FILAS DE ERROR DEL ARCHIVO POR CONFIGURACION
globalMap.put("FILAS_ERROR_CONFIGURACION", 0);
 



/**
 * [tJava_1 begin ] stop
 */
	
	/**
	 * [tJava_1 main ] start
	 */

	

	
	
	currentComponent="tJava_1";
	
	

 


	tos_count_tJava_1++;

/**
 * [tJava_1 main ] stop
 */
	
	/**
	 * [tJava_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_1";
	
	

 



/**
 * [tJava_1 process_data_begin ] stop
 */
	
	/**
	 * [tJava_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_1";
	
	

 



/**
 * [tJava_1 process_data_end ] stop
 */
	
	/**
	 * [tJava_1 end ] start
	 */

	

	
	
	currentComponent="tJava_1";
	
	

 

ok_Hash.put("tJava_1", true);
end_Hash.put("tJava_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk2", 0, "ok");
				}
				tFileInputXML_1Process(globalMap);



/**
 * [tJava_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_1 finally ] start
	 */

	

	
	
	currentComponent="tJava_1";
	
	

 



/**
 * [tJava_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_1_SUBPROCESS_STATE", 1);
	}
	


public static class row75Struct implements routines.system.IPersistableRow<row75Struct> {
    final static byte[] commonByteArrayLock_CEC_DISTRIBUCION_CI_DistribucionCI = new byte[0];
    static byte[] commonByteArray_CEC_DISTRIBUCION_CI_DistribucionCI = new byte[0];

	
			    public String Host;

				public String getHost () {
					return this.Host;
				}

				public Boolean HostIsNullable(){
				    return true;
				}
				public Boolean HostIsKey(){
				    return false;
				}
				public Integer HostLength(){
				    return 15;
				}
				public Integer HostPrecision(){
				    return 0;
				}
				public String HostDefault(){
				
					return null;
				
				}
				public String HostComment(){
				
				    return "";
				
				}
				public String HostPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String HostOriginalDbColumnName(){
				
					return "Host";
				
				}

				
			    public String Port;

				public String getPort () {
					return this.Port;
				}

				public Boolean PortIsNullable(){
				    return true;
				}
				public Boolean PortIsKey(){
				    return false;
				}
				public Integer PortLength(){
				    return 4;
				}
				public Integer PortPrecision(){
				    return 0;
				}
				public String PortDefault(){
				
					return null;
				
				}
				public String PortComment(){
				
				    return "";
				
				}
				public String PortPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String PortOriginalDbColumnName(){
				
					return "Port";
				
				}

				
			    public String Sid;

				public String getSid () {
					return this.Sid;
				}

				public Boolean SidIsNullable(){
				    return true;
				}
				public Boolean SidIsKey(){
				    return false;
				}
				public Integer SidLength(){
				    return 4;
				}
				public Integer SidPrecision(){
				    return 0;
				}
				public String SidDefault(){
				
					return null;
				
				}
				public String SidComment(){
				
				    return "";
				
				}
				public String SidPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String SidOriginalDbColumnName(){
				
					return "Sid";
				
				}

				
			    public String ServiceName;

				public String getServiceName () {
					return this.ServiceName;
				}

				public Boolean ServiceNameIsNullable(){
				    return true;
				}
				public Boolean ServiceNameIsKey(){
				    return false;
				}
				public Integer ServiceNameLength(){
				    return 7;
				}
				public Integer ServiceNamePrecision(){
				    return 0;
				}
				public String ServiceNameDefault(){
				
					return null;
				
				}
				public String ServiceNameComment(){
				
				    return "";
				
				}
				public String ServiceNamePattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String ServiceNameOriginalDbColumnName(){
				
					return "ServiceName";
				
				}

				
			    public String Schema;

				public String getSchema () {
					return this.Schema;
				}

				public Boolean SchemaIsNullable(){
				    return true;
				}
				public Boolean SchemaIsKey(){
				    return false;
				}
				public Integer SchemaLength(){
				    return 8;
				}
				public Integer SchemaPrecision(){
				    return 0;
				}
				public String SchemaDefault(){
				
					return null;
				
				}
				public String SchemaComment(){
				
				    return "";
				
				}
				public String SchemaPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String SchemaOriginalDbColumnName(){
				
					return "Schema";
				
				}

				
			    public String User;

				public String getUser () {
					return this.User;
				}

				public Boolean UserIsNullable(){
				    return true;
				}
				public Boolean UserIsKey(){
				    return false;
				}
				public Integer UserLength(){
				    return 8;
				}
				public Integer UserPrecision(){
				    return 0;
				}
				public String UserDefault(){
				
					return null;
				
				}
				public String UserComment(){
				
				    return "";
				
				}
				public String UserPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String UserOriginalDbColumnName(){
				
					return "User";
				
				}

				
			    public String Password;

				public String getPassword () {
					return this.Password;
				}

				public Boolean PasswordIsNullable(){
				    return true;
				}
				public Boolean PasswordIsKey(){
				    return false;
				}
				public Integer PasswordLength(){
				    return 15;
				}
				public Integer PasswordPrecision(){
				    return 0;
				}
				public String PasswordDefault(){
				
					return null;
				
				}
				public String PasswordComment(){
				
				    return "";
				
				}
				public String PasswordPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String PasswordOriginalDbColumnName(){
				
					return "Password";
				
				}

				
			    public String PathStorage;

				public String getPathStorage () {
					return this.PathStorage;
				}

				public Boolean PathStorageIsNullable(){
				    return true;
				}
				public Boolean PathStorageIsKey(){
				    return false;
				}
				public Integer PathStorageLength(){
				    return 44;
				}
				public Integer PathStoragePrecision(){
				    return 0;
				}
				public String PathStorageDefault(){
				
					return null;
				
				}
				public String PathStorageComment(){
				
				    return "";
				
				}
				public String PathStoragePattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String PathStorageOriginalDbColumnName(){
				
					return "PathStorage";
				
				}

				
			    public String SMTPHost;

				public String getSMTPHost () {
					return this.SMTPHost;
				}

				public Boolean SMTPHostIsNullable(){
				    return true;
				}
				public Boolean SMTPHostIsKey(){
				    return false;
				}
				public Integer SMTPHostLength(){
				    return 14;
				}
				public Integer SMTPHostPrecision(){
				    return 0;
				}
				public String SMTPHostDefault(){
				
					return null;
				
				}
				public String SMTPHostComment(){
				
				    return "";
				
				}
				public String SMTPHostPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String SMTPHostOriginalDbColumnName(){
				
					return "SMTPHost";
				
				}

				
			    public String SMTPPort;

				public String getSMTPPort () {
					return this.SMTPPort;
				}

				public Boolean SMTPPortIsNullable(){
				    return true;
				}
				public Boolean SMTPPortIsKey(){
				    return false;
				}
				public Integer SMTPPortLength(){
				    return 3;
				}
				public Integer SMTPPortPrecision(){
				    return 0;
				}
				public String SMTPPortDefault(){
				
					return null;
				
				}
				public String SMTPPortComment(){
				
				    return "";
				
				}
				public String SMTPPortPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String SMTPPortOriginalDbColumnName(){
				
					return "SMTPPort";
				
				}

				
			    public String UsernameMail;

				public String getUsernameMail () {
					return this.UsernameMail;
				}

				public Boolean UsernameMailIsNullable(){
				    return true;
				}
				public Boolean UsernameMailIsKey(){
				    return false;
				}
				public Integer UsernameMailLength(){
				    return 34;
				}
				public Integer UsernameMailPrecision(){
				    return 0;
				}
				public String UsernameMailDefault(){
				
					return null;
				
				}
				public String UsernameMailComment(){
				
				    return "";
				
				}
				public String UsernameMailPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String UsernameMailOriginalDbColumnName(){
				
					return "UsernameMail";
				
				}

				
			    public String PasswordMail;

				public String getPasswordMail () {
					return this.PasswordMail;
				}

				public Boolean PasswordMailIsNullable(){
				    return true;
				}
				public Boolean PasswordMailIsKey(){
				    return false;
				}
				public Integer PasswordMailLength(){
				    return 13;
				}
				public Integer PasswordMailPrecision(){
				    return 0;
				}
				public String PasswordMailDefault(){
				
					return null;
				
				}
				public String PasswordMailComment(){
				
				    return "";
				
				}
				public String PasswordMailPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String PasswordMailOriginalDbColumnName(){
				
					return "PasswordMail";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_CEC_DISTRIBUCION_CI_DistribucionCI.length) {
				if(length < 1024 && commonByteArray_CEC_DISTRIBUCION_CI_DistribucionCI.length == 0) {
   					commonByteArray_CEC_DISTRIBUCION_CI_DistribucionCI = new byte[1024];
				} else {
   					commonByteArray_CEC_DISTRIBUCION_CI_DistribucionCI = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_CEC_DISTRIBUCION_CI_DistribucionCI, 0, length);
			strReturn = new String(commonByteArray_CEC_DISTRIBUCION_CI_DistribucionCI, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_CEC_DISTRIBUCION_CI_DistribucionCI.length) {
				if(length < 1024 && commonByteArray_CEC_DISTRIBUCION_CI_DistribucionCI.length == 0) {
   					commonByteArray_CEC_DISTRIBUCION_CI_DistribucionCI = new byte[1024];
				} else {
   					commonByteArray_CEC_DISTRIBUCION_CI_DistribucionCI = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_CEC_DISTRIBUCION_CI_DistribucionCI, 0, length);
			strReturn = new String(commonByteArray_CEC_DISTRIBUCION_CI_DistribucionCI, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_CEC_DISTRIBUCION_CI_DistribucionCI) {

        	try {

        		int length = 0;
		
					this.Host = readString(dis);
					
					this.Port = readString(dis);
					
					this.Sid = readString(dis);
					
					this.ServiceName = readString(dis);
					
					this.Schema = readString(dis);
					
					this.User = readString(dis);
					
					this.Password = readString(dis);
					
					this.PathStorage = readString(dis);
					
					this.SMTPHost = readString(dis);
					
					this.SMTPPort = readString(dis);
					
					this.UsernameMail = readString(dis);
					
					this.PasswordMail = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_CEC_DISTRIBUCION_CI_DistribucionCI) {

        	try {

        		int length = 0;
		
					this.Host = readString(dis);
					
					this.Port = readString(dis);
					
					this.Sid = readString(dis);
					
					this.ServiceName = readString(dis);
					
					this.Schema = readString(dis);
					
					this.User = readString(dis);
					
					this.Password = readString(dis);
					
					this.PathStorage = readString(dis);
					
					this.SMTPHost = readString(dis);
					
					this.SMTPPort = readString(dis);
					
					this.UsernameMail = readString(dis);
					
					this.PasswordMail = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.Host,dos);
					
					// String
				
						writeString(this.Port,dos);
					
					// String
				
						writeString(this.Sid,dos);
					
					// String
				
						writeString(this.ServiceName,dos);
					
					// String
				
						writeString(this.Schema,dos);
					
					// String
				
						writeString(this.User,dos);
					
					// String
				
						writeString(this.Password,dos);
					
					// String
				
						writeString(this.PathStorage,dos);
					
					// String
				
						writeString(this.SMTPHost,dos);
					
					// String
				
						writeString(this.SMTPPort,dos);
					
					// String
				
						writeString(this.UsernameMail,dos);
					
					// String
				
						writeString(this.PasswordMail,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.Host,dos);
					
					// String
				
						writeString(this.Port,dos);
					
					// String
				
						writeString(this.Sid,dos);
					
					// String
				
						writeString(this.ServiceName,dos);
					
					// String
				
						writeString(this.Schema,dos);
					
					// String
				
						writeString(this.User,dos);
					
					// String
				
						writeString(this.Password,dos);
					
					// String
				
						writeString(this.PathStorage,dos);
					
					// String
				
						writeString(this.SMTPHost,dos);
					
					// String
				
						writeString(this.SMTPPort,dos);
					
					// String
				
						writeString(this.UsernameMail,dos);
					
					// String
				
						writeString(this.PasswordMail,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Host="+Host);
		sb.append(",Port="+Port);
		sb.append(",Sid="+Sid);
		sb.append(",ServiceName="+ServiceName);
		sb.append(",Schema="+Schema);
		sb.append(",User="+User);
		sb.append(",Password="+Password);
		sb.append(",PathStorage="+PathStorage);
		sb.append(",SMTPHost="+SMTPHost);
		sb.append(",SMTPPort="+SMTPPort);
		sb.append(",UsernameMail="+UsernameMail);
		sb.append(",PasswordMail="+PasswordMail);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row75Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tFileInputXML_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileInputXML_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row75Struct row75 = new row75Struct();




	
	/**
	 * [tJavaRow_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaRow_1", false);
		start_Hash.put("tJavaRow_1", System.currentTimeMillis());
		
	
	currentComponent="tJavaRow_1";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row75");
					}
				
		int tos_count_tJavaRow_1 = 0;
		

int nb_line_tJavaRow_1 = 0;

 



/**
 * [tJavaRow_1 begin ] stop
 */



	
	/**
	 * [tFileInputXML_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputXML_1", false);
		start_Hash.put("tFileInputXML_1", System.currentTimeMillis());
		
	
	currentComponent="tFileInputXML_1";
	
	
		int tos_count_tFileInputXML_1 = 0;
		

	

int nb_line_tFileInputXML_1 = 0;

	String os_tFileInputXML_1 = System.getProperty("os.name").toLowerCase();
	boolean isWindows_tFileInputXML_1=false;
	if(os_tFileInputXML_1.indexOf("windows") > -1 || os_tFileInputXML_1.indexOf("nt") > -1){
		isWindows_tFileInputXML_1=true;
	}
class XML_API_tFileInputXML_1{
	public boolean isDefNull(String[] node) throws javax.xml.transform.TransformerException {
        if(node[0] != null && node[1]!=null && ("true").equals(node[1])){
        	return true;
        }
        return false;
    }

    public boolean isMissing(String[] node) throws javax.xml.transform.TransformerException {
        return node[0] == null ? true : false;
    }

    public boolean isEmpty(String[] node) throws javax.xml.transform.TransformerException {
        if(node[0]!=null ){
        	return node[0].length() == 0;
        }
        return false;
    }
}
XML_API_tFileInputXML_1 xml_api_tFileInputXML_1 = new XML_API_tFileInputXML_1();

String[] queryPaths_tFileInputXML_1 = new String[]{	
	"Host"		
	,"Host"+"/@xsi:nil"	
	,"Port"		
	,"Port"+"/@xsi:nil"	
	,"Sid"		
	,"Sid"+"/@xsi:nil"	
	,"ServiceName"		
	,"ServiceName"+"/@xsi:nil"	
	,"Schema"		
	,"Schema"+"/@xsi:nil"	
	,"User"		
	,"User"+"/@xsi:nil"	
	,"Password"		
	,"Password"+"/@xsi:nil"	
	,"PathStorage"		
	,"PathStorage"+"/@xsi:nil"	
	,"SMTPHost"		
	,"SMTPHost"+"/@xsi:nil"	
	,"SMTPPort"		
	,"SMTPPort"+"/@xsi:nil"	
	,"UsernameMail"		
	,"UsernameMail"+"/@xsi:nil"	
	,"PasswordMail"		
	,"PasswordMail"+"/@xsi:nil"
};

boolean[] asXMLs_tFileInputXML_1 = new boolean[]{	
	false		
	,false	
	,false		
	,false	
	,false		
	,false	
	,false		
	,false	
	,false		
	,false	
	,false		
	,false	
	,false		
	,false	
	,false		
	,false	
	,false		
	,false	
	,false		
	,false	
	,false		
	,false	
	,false		
	,false
};

String str_tFileInputXML_1 = "";
String[] node_tFileInputXML_1 = null;
org.talend.xml.sax.SAXLooper looper_tFileInputXML_1 = new org.talend.xml.sax.SAXLooper("/connectionStrings",queryPaths_tFileInputXML_1,asXMLs_tFileInputXML_1);
looper_tFileInputXML_1.setEncoding("UTF-8");
Object filename_tFileInputXML_1 = null;
try {
	filename_tFileInputXML_1 = context.ORIGEN;
} catch(java.lang.Exception e) {
globalMap.put("tFileInputXML_1_ERROR_MESSAGE",e.getMessage());
	
	System.err.println(e.getMessage());
	
}
if(filename_tFileInputXML_1 != null && filename_tFileInputXML_1 instanceof String && filename_tFileInputXML_1.toString().startsWith("//")){
	if (!isWindows_tFileInputXML_1){
		filename_tFileInputXML_1 = filename_tFileInputXML_1.toString().replaceFirst("//","/");
	}
}
if(filename_tFileInputXML_1 instanceof java.io.InputStream){
	looper_tFileInputXML_1.parse((java.io.InputStream)filename_tFileInputXML_1);
}else{
	looper_tFileInputXML_1.parse(String.valueOf(filename_tFileInputXML_1));
}
java.util.Iterator<java.util.Map<String, String>> it_tFileInputXML_1  = looper_tFileInputXML_1.iterator();
while (it_tFileInputXML_1.hasNext()) {
	java.util.Map<String, String> row_tFileInputXML_1 = it_tFileInputXML_1.next();
	if (nb_line_tFileInputXML_1>=50) {
	
			looper_tFileInputXML_1.stopRead();
	
		break;
	}
		nb_line_tFileInputXML_1++;
		
	row75 = null;			
	boolean whetherReject_tFileInputXML_1 = false;
	row75 = new row75Struct();
	try{
	str_tFileInputXML_1 = row_tFileInputXML_1.get("Host");
	node_tFileInputXML_1 = new String[]{str_tFileInputXML_1,row_tFileInputXML_1.get("Host"+"/@xsi:nil")};
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row75.Host =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row75.Host ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row75.Host =null;
									}else{
		row75.Host = str_tFileInputXML_1;
	}
	str_tFileInputXML_1 = row_tFileInputXML_1.get("Port");
	node_tFileInputXML_1 = new String[]{str_tFileInputXML_1,row_tFileInputXML_1.get("Port"+"/@xsi:nil")};
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row75.Port =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row75.Port ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row75.Port =null;
									}else{
		row75.Port = str_tFileInputXML_1;
	}
	str_tFileInputXML_1 = row_tFileInputXML_1.get("Sid");
	node_tFileInputXML_1 = new String[]{str_tFileInputXML_1,row_tFileInputXML_1.get("Sid"+"/@xsi:nil")};
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row75.Sid =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row75.Sid ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row75.Sid =null;
									}else{
		row75.Sid = str_tFileInputXML_1;
	}
	str_tFileInputXML_1 = row_tFileInputXML_1.get("ServiceName");
	node_tFileInputXML_1 = new String[]{str_tFileInputXML_1,row_tFileInputXML_1.get("ServiceName"+"/@xsi:nil")};
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row75.ServiceName =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row75.ServiceName ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row75.ServiceName =null;
									}else{
		row75.ServiceName = str_tFileInputXML_1;
	}
	str_tFileInputXML_1 = row_tFileInputXML_1.get("Schema");
	node_tFileInputXML_1 = new String[]{str_tFileInputXML_1,row_tFileInputXML_1.get("Schema"+"/@xsi:nil")};
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row75.Schema =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row75.Schema ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row75.Schema =null;
									}else{
		row75.Schema = str_tFileInputXML_1;
	}
	str_tFileInputXML_1 = row_tFileInputXML_1.get("User");
	node_tFileInputXML_1 = new String[]{str_tFileInputXML_1,row_tFileInputXML_1.get("User"+"/@xsi:nil")};
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row75.User =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row75.User ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row75.User =null;
									}else{
		row75.User = str_tFileInputXML_1;
	}
	str_tFileInputXML_1 = row_tFileInputXML_1.get("Password");
	node_tFileInputXML_1 = new String[]{str_tFileInputXML_1,row_tFileInputXML_1.get("Password"+"/@xsi:nil")};
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row75.Password =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row75.Password ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row75.Password =null;
									}else{
		row75.Password = str_tFileInputXML_1;
	}
	str_tFileInputXML_1 = row_tFileInputXML_1.get("PathStorage");
	node_tFileInputXML_1 = new String[]{str_tFileInputXML_1,row_tFileInputXML_1.get("PathStorage"+"/@xsi:nil")};
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row75.PathStorage =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row75.PathStorage ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row75.PathStorage =null;
									}else{
		row75.PathStorage = str_tFileInputXML_1;
	}
	str_tFileInputXML_1 = row_tFileInputXML_1.get("SMTPHost");
	node_tFileInputXML_1 = new String[]{str_tFileInputXML_1,row_tFileInputXML_1.get("SMTPHost"+"/@xsi:nil")};
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row75.SMTPHost =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row75.SMTPHost ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row75.SMTPHost =null;
									}else{
		row75.SMTPHost = str_tFileInputXML_1;
	}
	str_tFileInputXML_1 = row_tFileInputXML_1.get("SMTPPort");
	node_tFileInputXML_1 = new String[]{str_tFileInputXML_1,row_tFileInputXML_1.get("SMTPPort"+"/@xsi:nil")};
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row75.SMTPPort =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row75.SMTPPort ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row75.SMTPPort =null;
									}else{
		row75.SMTPPort = str_tFileInputXML_1;
	}
	str_tFileInputXML_1 = row_tFileInputXML_1.get("UsernameMail");
	node_tFileInputXML_1 = new String[]{str_tFileInputXML_1,row_tFileInputXML_1.get("UsernameMail"+"/@xsi:nil")};
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row75.UsernameMail =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row75.UsernameMail ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row75.UsernameMail =null;
									}else{
		row75.UsernameMail = str_tFileInputXML_1;
	}
	str_tFileInputXML_1 = row_tFileInputXML_1.get("PasswordMail");
	node_tFileInputXML_1 = new String[]{str_tFileInputXML_1,row_tFileInputXML_1.get("PasswordMail"+"/@xsi:nil")};
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row75.PasswordMail =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row75.PasswordMail ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row75.PasswordMail =null;
									}else{
		row75.PasswordMail = str_tFileInputXML_1;
	} 
			
    } catch (java.lang.Exception e) {
globalMap.put("tFileInputXML_1_ERROR_MESSAGE",e.getMessage());
        whetherReject_tFileInputXML_1 = true;
                System.err.println(e.getMessage());
                row75 = null;
    }
			
			

 



/**
 * [tFileInputXML_1 begin ] stop
 */
	
	/**
	 * [tFileInputXML_1 main ] start
	 */

	

	
	
	currentComponent="tFileInputXML_1";
	
	

 


	tos_count_tFileInputXML_1++;

/**
 * [tFileInputXML_1 main ] stop
 */
	
	/**
	 * [tFileInputXML_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileInputXML_1";
	
	

 



/**
 * [tFileInputXML_1 process_data_begin ] stop
 */
// Start of branch "row75"
if(row75 != null) { 



	
	/**
	 * [tJavaRow_1 main ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row75"
						
						);
					}
					

    //Code generate according to input schema and output schema
context.db_origen_Server = row75.Host;
context.db_origen_Port = row75.Port;
//context.db_origen_Sid = row75.Sid;
context.db_origen_Login = row75.User;
context.db_origen_Password = row75.Password;
context.db_origen_ServiceName = row75.ServiceName;
context.PathStorage = row75.PathStorage;
//context.db_origen_Schema = row75.Schema;
    nb_line_tJavaRow_1++;   

 


	tos_count_tJavaRow_1++;

/**
 * [tJavaRow_1 main ] stop
 */
	
	/**
	 * [tJavaRow_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";
	
	

 



/**
 * [tJavaRow_1 process_data_begin ] stop
 */
	
	/**
	 * [tJavaRow_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";
	
	

 



/**
 * [tJavaRow_1 process_data_end ] stop
 */

} // End of branch "row75"




	
	/**
	 * [tFileInputXML_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileInputXML_1";
	
	

 



/**
 * [tFileInputXML_1 process_data_end ] stop
 */
	
	/**
	 * [tFileInputXML_1 end ] start
	 */

	

	
	
	currentComponent="tFileInputXML_1";
	
	


	}
	try {
		looper_tFileInputXML_1.handleTaskResponse();
	} catch(java.lang.Exception e) {
globalMap.put("tFileInputXML_1_ERROR_MESSAGE",e.getMessage());
		if(!(e.getCause() instanceof org.talend.xml.sax.exception.EnoughDataException))
	
		
		System.err.println(e.getMessage());	
	
	}
	globalMap.put("tFileInputXML_1_NB_LINE",nb_line_tFileInputXML_1);

	

 

ok_Hash.put("tFileInputXML_1", true);
end_Hash.put("tFileInputXML_1", System.currentTimeMillis());




/**
 * [tFileInputXML_1 end ] stop
 */

	
	/**
	 * [tJavaRow_1 end ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";
	
	

globalMap.put("tJavaRow_1_NB_LINE",nb_line_tJavaRow_1);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row75");
			  	}
			  	
 

ok_Hash.put("tJavaRow_1", true);
end_Hash.put("tJavaRow_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk3", 0, "ok");
				}
				tOracleConnection_1Process(globalMap);



/**
 * [tJavaRow_1 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileInputXML_1 finally ] start
	 */

	

	
	
	currentComponent="tFileInputXML_1";
	
	

 



/**
 * [tFileInputXML_1 finally ] stop
 */

	
	/**
	 * [tJavaRow_1 finally ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";
	
	

 



/**
 * [tJavaRow_1 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileInputXML_1_SUBPROCESS_STATE", 1);
	}
	


public void tOracleConnection_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleConnection_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tOracleConnection_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleConnection_1", false);
		start_Hash.put("tOracleConnection_1", System.currentTimeMillis());
		
	
	currentComponent="tOracleConnection_1";
	
	
		int tos_count_tOracleConnection_1 = 0;
		
	

	
        String url_tOracleConnection_1 = "jdbc:oracle:thin:@(description=(address=(protocol=tcp)(host=" + context.db_origen_Server + ")(port=" + context.db_origen_Port + "))(connect_data=(service_name=" + context.db_origen_ServiceName + ")))";
    	globalMap.put("connectionType_" + "tOracleConnection_1", "ORACLE_SERVICE_NAME");
	String dbUser_tOracleConnection_1 = context.db_origen_Login;
	
	
		
	final String decryptedPassword_tOracleConnection_1 = context.db_origen_Password; 
		String dbPwd_tOracleConnection_1 = decryptedPassword_tOracleConnection_1;
	
	
	java.sql.Connection conn_tOracleConnection_1 = null;
	
		
			String driverClass_tOracleConnection_1 = "oracle.jdbc.OracleDriver";
			java.lang.Class jdbcclazz_tOracleConnection_1 = java.lang.Class.forName(driverClass_tOracleConnection_1);
			globalMap.put("driverClass_tOracleConnection_1", driverClass_tOracleConnection_1);
		
			java.util.Properties atnParamsPrope_tOracleConnection_1 = new java.util.Properties();
			    atnParamsPrope_tOracleConnection_1.put("user",dbUser_tOracleConnection_1);
			    atnParamsPrope_tOracleConnection_1.put("password",dbPwd_tOracleConnection_1);
			if(context.db_origen_AdditionalParams != null && !"\"\"".equals(context.db_origen_AdditionalParams) && !"".equals(context.db_origen_AdditionalParams)){
                atnParamsPrope_tOracleConnection_1.load(new java.io.ByteArrayInputStream(context.db_origen_AdditionalParams.replace("&", "\n").getBytes()));
            }
         
			conn_tOracleConnection_1 = java.sql.DriverManager.getConnection(url_tOracleConnection_1, atnParamsPrope_tOracleConnection_1);

		globalMap.put("conn_tOracleConnection_1", conn_tOracleConnection_1);
	if (null != conn_tOracleConnection_1) {
		
			conn_tOracleConnection_1.setAutoCommit(true);
	}
        globalMap.put("host_" + "tOracleConnection_1",context.db_origen_Server);
        globalMap.put("port_" + "tOracleConnection_1",context.db_origen_Port);
        globalMap.put("dbname_" + "tOracleConnection_1",context.db_origen_ServiceName);

	globalMap.put("dbschema_" + "tOracleConnection_1", context.db_origen_Schema);
	globalMap.put("username_" + "tOracleConnection_1",context.db_origen_Login);
	globalMap.put("password_" + "tOracleConnection_1",dbPwd_tOracleConnection_1);

 



/**
 * [tOracleConnection_1 begin ] stop
 */
	
	/**
	 * [tOracleConnection_1 main ] start
	 */

	

	
	
	currentComponent="tOracleConnection_1";
	
	

 


	tos_count_tOracleConnection_1++;

/**
 * [tOracleConnection_1 main ] stop
 */
	
	/**
	 * [tOracleConnection_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleConnection_1";
	
	

 



/**
 * [tOracleConnection_1 process_data_begin ] stop
 */
	
	/**
	 * [tOracleConnection_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleConnection_1";
	
	

 



/**
 * [tOracleConnection_1 process_data_end ] stop
 */
	
	/**
	 * [tOracleConnection_1 end ] start
	 */

	

	
	
	currentComponent="tOracleConnection_1";
	
	

 

ok_Hash.put("tOracleConnection_1", true);
end_Hash.put("tOracleConnection_1", System.currentTimeMillis());




/**
 * [tOracleConnection_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleConnection_1 finally ] start
	 */

	

	
	
	currentComponent="tOracleConnection_1";
	
	

 



/**
 * [tOracleConnection_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleConnection_1_SUBPROCESS_STATE", 1);
	}
	


public void tDie_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDie_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tDie_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDie_1", false);
		start_Hash.put("tDie_1", System.currentTimeMillis());
		
	
	currentComponent="tDie_1";
	
	
		int tos_count_tDie_1 = 0;
		

 



/**
 * [tDie_1 begin ] stop
 */
	
	/**
	 * [tDie_1 main ] start
	 */

	

	
	
	currentComponent="tDie_1";
	
	

	try {
				tLogCatcher_1.addMessage("tDie", "tDie_1", 5, "Fail connection", 4);
				tLogCatcher_1Process(globalMap);
				
	globalMap.put("tDie_1_DIE_PRIORITY", 5);
	System.err.println("Fail connection");
	
	globalMap.put("tDie_1_DIE_MESSAGE", "Fail connection");
	globalMap.put("tDie_1_DIE_MESSAGES", "Fail connection");
	
	} catch (Exception | Error e_tDie_1) {
	    globalMap.put("tDie_1_ERROR_MESSAGE",e_tDie_1.getMessage());
		logIgnoredError(String.format("tDie_1 - tDie failed to log message due to internal error: %s", e_tDie_1), e_tDie_1);
	}
	
	currentComponent = "tDie_1";
	status = "failure";
    	errorCode = new Integer(4);
        ((java.util.Map)threadLocal.get()).put("errorCode", new Integer(4));
        ((java.util.Map)threadLocal.get()).put("status", "failure");
        globalMap.put("tDie_1_DIE_CODE", errorCode);

    
	

	
	
	System.exit(4);

 


	tos_count_tDie_1++;

/**
 * [tDie_1 main ] stop
 */
	
	/**
	 * [tDie_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDie_1";
	
	

 



/**
 * [tDie_1 process_data_begin ] stop
 */
	
	/**
	 * [tDie_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDie_1";
	
	

 



/**
 * [tDie_1 process_data_end ] stop
 */
	
	/**
	 * [tDie_1 end ] start
	 */

	

	
	
	currentComponent="tDie_1";
	
	

 

ok_Hash.put("tDie_1", true);
end_Hash.put("tDie_1", System.currentTimeMillis());




/**
 * [tDie_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDie_1 finally ] start
	 */

	

	
	
	currentComponent="tDie_1";
	
	

 



/**
 * [tDie_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDie_1_SUBPROCESS_STATE", 1);
	}
	


public void tPostjob_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPostjob_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tPostjob_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostjob_1", false);
		start_Hash.put("tPostjob_1", System.currentTimeMillis());
		
	
	currentComponent="tPostjob_1";
	
	
		int tos_count_tPostjob_1 = 0;
		

 



/**
 * [tPostjob_1 begin ] stop
 */
	
	/**
	 * [tPostjob_1 main ] start
	 */

	

	
	
	currentComponent="tPostjob_1";
	
	

 


	tos_count_tPostjob_1++;

/**
 * [tPostjob_1 main ] stop
 */
	
	/**
	 * [tPostjob_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tPostjob_1";
	
	

 



/**
 * [tPostjob_1 process_data_begin ] stop
 */
	
	/**
	 * [tPostjob_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tPostjob_1";
	
	

 



/**
 * [tPostjob_1 process_data_end ] stop
 */
	
	/**
	 * [tPostjob_1 end ] start
	 */

	

	
	
	currentComponent="tPostjob_1";
	
	

 

ok_Hash.put("tPostjob_1", true);
end_Hash.put("tPostjob_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk7", 0, "ok");
				}
				tJava_3Process(globalMap);



/**
 * [tPostjob_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPostjob_1 finally ] start
	 */

	

	
	
	currentComponent="tPostjob_1";
	
	

 



/**
 * [tPostjob_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPostjob_1_SUBPROCESS_STATE", 1);
	}
	


public void tJava_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_3_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tJava_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_3", false);
		start_Hash.put("tJava_3", System.currentTimeMillis());
		
	
	currentComponent="tJava_3";
	
	
		int tos_count_tJava_3 = 0;
		


context.HORA_FINAL = TalendDate.getDate("HH:mm:ss");
 



/**
 * [tJava_3 begin ] stop
 */
	
	/**
	 * [tJava_3 main ] start
	 */

	

	
	
	currentComponent="tJava_3";
	
	

 


	tos_count_tJava_3++;

/**
 * [tJava_3 main ] stop
 */
	
	/**
	 * [tJava_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_3";
	
	

 



/**
 * [tJava_3 process_data_begin ] stop
 */
	
	/**
	 * [tJava_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_3";
	
	

 



/**
 * [tJava_3 process_data_end ] stop
 */
	
	/**
	 * [tJava_3 end ] start
	 */

	

	
	
	currentComponent="tJava_3";
	
	

 

ok_Hash.put("tJava_3", true);
end_Hash.put("tJava_3", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk9", 0, "ok");
				}
				tOracleClose_2Process(globalMap);
				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk10", 0, "ok");
				}
				tFixedFlowInput_1Process(globalMap);



/**
 * [tJava_3 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_3 finally ] start
	 */

	

	
	
	currentComponent="tJava_3";
	
	

 



/**
 * [tJava_3 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_3_SUBPROCESS_STATE", 1);
	}
	


public void tOracleClose_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleClose_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tOracleClose_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleClose_2", false);
		start_Hash.put("tOracleClose_2", System.currentTimeMillis());
		
	
	currentComponent="tOracleClose_2";
	
	
		int tos_count_tOracleClose_2 = 0;
		

 



/**
 * [tOracleClose_2 begin ] stop
 */
	
	/**
	 * [tOracleClose_2 main ] start
	 */

	

	
	
	currentComponent="tOracleClose_2";
	
	

	java.sql.Connection conn_tOracleClose_2 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");
	
	if(conn_tOracleClose_2 != null && !conn_tOracleClose_2.isClosed())
	{
		
			conn_tOracleClose_2.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_tOracleConnection_1"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
	}

 


	tos_count_tOracleClose_2++;

/**
 * [tOracleClose_2 main ] stop
 */
	
	/**
	 * [tOracleClose_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleClose_2";
	
	

 



/**
 * [tOracleClose_2 process_data_begin ] stop
 */
	
	/**
	 * [tOracleClose_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleClose_2";
	
	

 



/**
 * [tOracleClose_2 process_data_end ] stop
 */
	
	/**
	 * [tOracleClose_2 end ] start
	 */

	

	
	
	currentComponent="tOracleClose_2";
	
	

 

ok_Hash.put("tOracleClose_2", true);
end_Hash.put("tOracleClose_2", System.currentTimeMillis());




/**
 * [tOracleClose_2 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleClose_2 finally ] start
	 */

	

	
	
	currentComponent="tOracleClose_2";
	
	

 



/**
 * [tOracleClose_2 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleClose_2_SUBPROCESS_STATE", 1);
	}
	


public static class row34Struct implements routines.system.IPersistableRow<row34Struct> {
    final static byte[] commonByteArrayLock_CEC_DISTRIBUCION_CI_DistribucionCI = new byte[0];
    static byte[] commonByteArray_CEC_DISTRIBUCION_CI_DistribucionCI = new byte[0];

	
			    public String FECHA_EJECUCION;

				public String getFECHA_EJECUCION () {
					return this.FECHA_EJECUCION;
				}

				public Boolean FECHA_EJECUCIONIsNullable(){
				    return true;
				}
				public Boolean FECHA_EJECUCIONIsKey(){
				    return false;
				}
				public Integer FECHA_EJECUCIONLength(){
				    return null;
				}
				public Integer FECHA_EJECUCIONPrecision(){
				    return null;
				}
				public String FECHA_EJECUCIONDefault(){
				
					return null;
				
				}
				public String FECHA_EJECUCIONComment(){
				
				    return "";
				
				}
				public String FECHA_EJECUCIONPattern(){
				
					return "";
				
				}
				public String FECHA_EJECUCIONOriginalDbColumnName(){
				
					return "FECHA_EJECUCION";
				
				}

				
			    public String HORA_INICIO;

				public String getHORA_INICIO () {
					return this.HORA_INICIO;
				}

				public Boolean HORA_INICIOIsNullable(){
				    return true;
				}
				public Boolean HORA_INICIOIsKey(){
				    return false;
				}
				public Integer HORA_INICIOLength(){
				    return null;
				}
				public Integer HORA_INICIOPrecision(){
				    return null;
				}
				public String HORA_INICIODefault(){
				
					return null;
				
				}
				public String HORA_INICIOComment(){
				
				    return "";
				
				}
				public String HORA_INICIOPattern(){
				
					return "";
				
				}
				public String HORA_INICIOOriginalDbColumnName(){
				
					return "HORA_INICIO";
				
				}

				
			    public String HORA_FINAL;

				public String getHORA_FINAL () {
					return this.HORA_FINAL;
				}

				public Boolean HORA_FINALIsNullable(){
				    return true;
				}
				public Boolean HORA_FINALIsKey(){
				    return false;
				}
				public Integer HORA_FINALLength(){
				    return null;
				}
				public Integer HORA_FINALPrecision(){
				    return null;
				}
				public String HORA_FINALDefault(){
				
					return null;
				
				}
				public String HORA_FINALComment(){
				
				    return "";
				
				}
				public String HORA_FINALPattern(){
				
					return "";
				
				}
				public String HORA_FINALOriginalDbColumnName(){
				
					return "HORA_FINAL";
				
				}

				
			    public String ESTADO;

				public String getESTADO () {
					return this.ESTADO;
				}

				public Boolean ESTADOIsNullable(){
				    return true;
				}
				public Boolean ESTADOIsKey(){
				    return false;
				}
				public Integer ESTADOLength(){
				    return null;
				}
				public Integer ESTADOPrecision(){
				    return null;
				}
				public String ESTADODefault(){
				
					return null;
				
				}
				public String ESTADOComment(){
				
				    return "";
				
				}
				public String ESTADOPattern(){
				
					return "";
				
				}
				public String ESTADOOriginalDbColumnName(){
				
					return "ESTADO";
				
				}

				
			    public String JOBS;

				public String getJOBS () {
					return this.JOBS;
				}

				public Boolean JOBSIsNullable(){
				    return true;
				}
				public Boolean JOBSIsKey(){
				    return false;
				}
				public Integer JOBSLength(){
				    return null;
				}
				public Integer JOBSPrecision(){
				    return null;
				}
				public String JOBSDefault(){
				
					return null;
				
				}
				public String JOBSComment(){
				
				    return "";
				
				}
				public String JOBSPattern(){
				
					return "";
				
				}
				public String JOBSOriginalDbColumnName(){
				
					return "JOBS";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_CEC_DISTRIBUCION_CI_DistribucionCI.length) {
				if(length < 1024 && commonByteArray_CEC_DISTRIBUCION_CI_DistribucionCI.length == 0) {
   					commonByteArray_CEC_DISTRIBUCION_CI_DistribucionCI = new byte[1024];
				} else {
   					commonByteArray_CEC_DISTRIBUCION_CI_DistribucionCI = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_CEC_DISTRIBUCION_CI_DistribucionCI, 0, length);
			strReturn = new String(commonByteArray_CEC_DISTRIBUCION_CI_DistribucionCI, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_CEC_DISTRIBUCION_CI_DistribucionCI.length) {
				if(length < 1024 && commonByteArray_CEC_DISTRIBUCION_CI_DistribucionCI.length == 0) {
   					commonByteArray_CEC_DISTRIBUCION_CI_DistribucionCI = new byte[1024];
				} else {
   					commonByteArray_CEC_DISTRIBUCION_CI_DistribucionCI = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_CEC_DISTRIBUCION_CI_DistribucionCI, 0, length);
			strReturn = new String(commonByteArray_CEC_DISTRIBUCION_CI_DistribucionCI, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_CEC_DISTRIBUCION_CI_DistribucionCI) {

        	try {

        		int length = 0;
		
					this.FECHA_EJECUCION = readString(dis);
					
					this.HORA_INICIO = readString(dis);
					
					this.HORA_FINAL = readString(dis);
					
					this.ESTADO = readString(dis);
					
					this.JOBS = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_CEC_DISTRIBUCION_CI_DistribucionCI) {

        	try {

        		int length = 0;
		
					this.FECHA_EJECUCION = readString(dis);
					
					this.HORA_INICIO = readString(dis);
					
					this.HORA_FINAL = readString(dis);
					
					this.ESTADO = readString(dis);
					
					this.JOBS = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.FECHA_EJECUCION,dos);
					
					// String
				
						writeString(this.HORA_INICIO,dos);
					
					// String
				
						writeString(this.HORA_FINAL,dos);
					
					// String
				
						writeString(this.ESTADO,dos);
					
					// String
				
						writeString(this.JOBS,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.FECHA_EJECUCION,dos);
					
					// String
				
						writeString(this.HORA_INICIO,dos);
					
					// String
				
						writeString(this.HORA_FINAL,dos);
					
					// String
				
						writeString(this.ESTADO,dos);
					
					// String
				
						writeString(this.JOBS,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("FECHA_EJECUCION="+FECHA_EJECUCION);
		sb.append(",HORA_INICIO="+HORA_INICIO);
		sb.append(",HORA_FINAL="+HORA_FINAL);
		sb.append(",ESTADO="+ESTADO);
		sb.append(",JOBS="+JOBS);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row34Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tFixedFlowInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFixedFlowInput_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row34Struct row34 = new row34Struct();




	
	/**
	 * [tFileOutputDelimited_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputDelimited_2", false);
		start_Hash.put("tFileOutputDelimited_2", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputDelimited_2";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row34");
					}
				
		int tos_count_tFileOutputDelimited_2 = 0;
		

String fileName_tFileOutputDelimited_2 = "";
    fileName_tFileOutputDelimited_2 = (new java.io.File(context.LOGS_EXECUTION)).getAbsolutePath().replace("\\","/");
    String fullName_tFileOutputDelimited_2 = null;
    String extension_tFileOutputDelimited_2 = null;
    String directory_tFileOutputDelimited_2 = null;
    if((fileName_tFileOutputDelimited_2.indexOf("/") != -1)) {
        if(fileName_tFileOutputDelimited_2.lastIndexOf(".") < fileName_tFileOutputDelimited_2.lastIndexOf("/")) {
            fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2;
            extension_tFileOutputDelimited_2 = "";
        } else {
            fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(0, fileName_tFileOutputDelimited_2.lastIndexOf("."));
            extension_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(fileName_tFileOutputDelimited_2.lastIndexOf("."));
        }
        directory_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(0, fileName_tFileOutputDelimited_2.lastIndexOf("/"));
    } else {
        if(fileName_tFileOutputDelimited_2.lastIndexOf(".") != -1) {
            fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(0, fileName_tFileOutputDelimited_2.lastIndexOf("."));
            extension_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(fileName_tFileOutputDelimited_2.lastIndexOf("."));
        } else {
            fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2;
            extension_tFileOutputDelimited_2 = "";
        }
        directory_tFileOutputDelimited_2 = "";
    }
    boolean isFileGenerated_tFileOutputDelimited_2 = true;
    java.io.File filetFileOutputDelimited_2 = new java.io.File(fileName_tFileOutputDelimited_2);
    globalMap.put("tFileOutputDelimited_2_FILE_NAME",fileName_tFileOutputDelimited_2);
        if(filetFileOutputDelimited_2.exists()){
            isFileGenerated_tFileOutputDelimited_2 = false;
        }
            int nb_line_tFileOutputDelimited_2 = 0;
            int splitedFileNo_tFileOutputDelimited_2 = 0;
            int currentRow_tFileOutputDelimited_2 = 0;

            final String OUT_DELIM_tFileOutputDelimited_2 = /** Start field tFileOutputDelimited_2:FIELDSEPARATOR */";"/** End field tFileOutputDelimited_2:FIELDSEPARATOR */;

            final String OUT_DELIM_ROWSEP_tFileOutputDelimited_2 = /** Start field tFileOutputDelimited_2:ROWSEPARATOR */"\n"/** End field tFileOutputDelimited_2:ROWSEPARATOR */;

                    //create directory only if not exists
                    if(directory_tFileOutputDelimited_2 != null && directory_tFileOutputDelimited_2.trim().length() != 0) {
                        java.io.File dir_tFileOutputDelimited_2 = new java.io.File(directory_tFileOutputDelimited_2);
                        if(!dir_tFileOutputDelimited_2.exists()) {
                            dir_tFileOutputDelimited_2.mkdirs();
                        }
                    }

                        //routines.system.Row
                        java.io.Writer outtFileOutputDelimited_2 = null;

                        outtFileOutputDelimited_2 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
                        new java.io.FileOutputStream(fileName_tFileOutputDelimited_2, true),"ISO-8859-15"));
                resourceMap.put("out_tFileOutputDelimited_2", outtFileOutputDelimited_2);
                        synchronized (multiThreadLockWrite) {
                                    if(filetFileOutputDelimited_2.length()==0){
                                        outtFileOutputDelimited_2.write("FECHA_EJECUCION");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("HORA_INICIO");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("HORA_FINAL");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("ESTADO");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("JOBS");
                                        outtFileOutputDelimited_2.write(OUT_DELIM_ROWSEP_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.flush();
                                    }
                        }


resourceMap.put("nb_line_tFileOutputDelimited_2", nb_line_tFileOutputDelimited_2);

 



/**
 * [tFileOutputDelimited_2 begin ] stop
 */



	
	/**
	 * [tFixedFlowInput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFixedFlowInput_1", false);
		start_Hash.put("tFixedFlowInput_1", System.currentTimeMillis());
		
	
	currentComponent="tFixedFlowInput_1";
	
	
		int tos_count_tFixedFlowInput_1 = 0;
		

	    for (int i_tFixedFlowInput_1 = 0 ; i_tFixedFlowInput_1 < 1 ; i_tFixedFlowInput_1++) {
	                	            	
    	            		row34.FECHA_EJECUCION = context.FECHA_EJECUCION;
    	            	        	            	
    	            		row34.HORA_INICIO = context.HORA_INICIO;
    	            	        	            	
    	            		row34.HORA_FINAL = context.HORA_FINAL;
    	            	        	            	
    	            		row34.ESTADO = context.ESTADO_EXEC;
    	            	        	            	
    	            		row34.JOBS = "CostosIndirectosDP";
    	            	

 



/**
 * [tFixedFlowInput_1 begin ] stop
 */
	
	/**
	 * [tFixedFlowInput_1 main ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_1";
	
	

 


	tos_count_tFixedFlowInput_1++;

/**
 * [tFixedFlowInput_1 main ] stop
 */
	
	/**
	 * [tFixedFlowInput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_1";
	
	

 



/**
 * [tFixedFlowInput_1 process_data_begin ] stop
 */

	
	/**
	 * [tFileOutputDelimited_2 main ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_2";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row34"
						
						);
					}
					


                    StringBuilder sb_tFileOutputDelimited_2 = new StringBuilder();
                            if(row34.FECHA_EJECUCION != null) {
                        sb_tFileOutputDelimited_2.append(
                            row34.FECHA_EJECUCION
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(row34.HORA_INICIO != null) {
                        sb_tFileOutputDelimited_2.append(
                            row34.HORA_INICIO
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(row34.HORA_FINAL != null) {
                        sb_tFileOutputDelimited_2.append(
                            row34.HORA_FINAL
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(row34.ESTADO != null) {
                        sb_tFileOutputDelimited_2.append(
                            row34.ESTADO
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(row34.JOBS != null) {
                        sb_tFileOutputDelimited_2.append(
                            row34.JOBS
                        );
                            }
                    sb_tFileOutputDelimited_2.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_2);


                    synchronized (multiThreadLockWrite) {
                    nb_line_tFileOutputDelimited_2++;
                    resourceMap.put("nb_line_tFileOutputDelimited_2", nb_line_tFileOutputDelimited_2);

                        outtFileOutputDelimited_2.write(sb_tFileOutputDelimited_2.toString());

                    }



 


	tos_count_tFileOutputDelimited_2++;

/**
 * [tFileOutputDelimited_2 main ] stop
 */
	
	/**
	 * [tFileOutputDelimited_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_2";
	
	

 



/**
 * [tFileOutputDelimited_2 process_data_begin ] stop
 */
	
	/**
	 * [tFileOutputDelimited_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_2";
	
	

 



/**
 * [tFileOutputDelimited_2 process_data_end ] stop
 */



	
	/**
	 * [tFixedFlowInput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_1";
	
	

 



/**
 * [tFixedFlowInput_1 process_data_end ] stop
 */
	
	/**
	 * [tFixedFlowInput_1 end ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_1";
	
	

        }
        globalMap.put("tFixedFlowInput_1_NB_LINE", 1);        

 

ok_Hash.put("tFixedFlowInput_1", true);
end_Hash.put("tFixedFlowInput_1", System.currentTimeMillis());




/**
 * [tFixedFlowInput_1 end ] stop
 */

	
	/**
	 * [tFileOutputDelimited_2 end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_2";
	
	



		
	   		synchronized (multiThreadLockWrite) {
		
			
					if(outtFileOutputDelimited_2!=null) {
						outtFileOutputDelimited_2.flush();
						outtFileOutputDelimited_2.close();
					}
				
				globalMap.put("tFileOutputDelimited_2_NB_LINE",nb_line_tFileOutputDelimited_2);
				globalMap.put("tFileOutputDelimited_2_FILE_NAME",fileName_tFileOutputDelimited_2);
			
		
			}
		
		
		resourceMap.put("finish_tFileOutputDelimited_2", true);
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row34");
			  	}
			  	
 

ok_Hash.put("tFileOutputDelimited_2", true);
end_Hash.put("tFileOutputDelimited_2", System.currentTimeMillis());




/**
 * [tFileOutputDelimited_2 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFixedFlowInput_1 finally ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_1";
	
	

 



/**
 * [tFixedFlowInput_1 finally ] stop
 */

	
	/**
	 * [tFileOutputDelimited_2 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_2";
	
	


		if(resourceMap.get("finish_tFileOutputDelimited_2") == null){ 
			
		   		synchronized (multiThreadLockWrite) {
			
				
						java.io.Writer outtFileOutputDelimited_2 = (java.io.Writer)resourceMap.get("out_tFileOutputDelimited_2");
						if(outtFileOutputDelimited_2!=null) {
							outtFileOutputDelimited_2.flush();
							outtFileOutputDelimited_2.close();
						}
					
				
				}
			
			
		}
	

 



/**
 * [tFileOutputDelimited_2 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFixedFlowInput_1_SUBPROCESS_STATE", 1);
	}
	


public void tJava_4Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_4_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tJava_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_4", false);
		start_Hash.put("tJava_4", System.currentTimeMillis());
		
	
	currentComponent="tJava_4";
	
	
		int tos_count_tJava_4 = 0;
		


// Obtiene el día actual
context.TmpPeriodo = TalendDate.formatDate("dd/MM/yyyy",TalendDate.getCurrentDate());

/* Para pruebas */
//context.TmpPeriodo = "21/05/2019";

// Asigna a formato dat
context.FechaToday = TalendDate.parseDate("dd/MM/yyyy", context.TmpPeriodo);





 



/**
 * [tJava_4 begin ] stop
 */
	
	/**
	 * [tJava_4 main ] start
	 */

	

	
	
	currentComponent="tJava_4";
	
	

 


	tos_count_tJava_4++;

/**
 * [tJava_4 main ] stop
 */
	
	/**
	 * [tJava_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_4";
	
	

 



/**
 * [tJava_4 process_data_begin ] stop
 */
	
	/**
	 * [tJava_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_4";
	
	

 



/**
 * [tJava_4 process_data_end ] stop
 */
	
	/**
	 * [tJava_4 end ] start
	 */

	

	
	
	currentComponent="tJava_4";
	
	

 

ok_Hash.put("tJava_4", true);
end_Hash.put("tJava_4", System.currentTimeMillis());




/**
 * [tJava_4 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tJava_4:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk5", 0, "ok");
								} 
							
							tOracleInput_1Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_4 finally ] start
	 */

	

	
	
	currentComponent="tJava_4";
	
	

 



/**
 * [tJava_4 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_4_SUBPROCESS_STATE", 1);
	}
	


public static class row18Struct implements routines.system.IPersistableRow<row18Struct> {
    final static byte[] commonByteArrayLock_CEC_DISTRIBUCION_CI_DistribucionCI = new byte[0];
    static byte[] commonByteArray_CEC_DISTRIBUCION_CI_DistribucionCI = new byte[0];

	
			    public int ID;

				public int getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return false;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return 0;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return "";
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public java.util.Date FECHA;

				public java.util.Date getFECHA () {
					return this.FECHA;
				}

				public Boolean FECHAIsNullable(){
				    return false;
				}
				public Boolean FECHAIsKey(){
				    return false;
				}
				public Integer FECHALength(){
				    return null;
				}
				public Integer FECHAPrecision(){
				    return null;
				}
				public String FECHADefault(){
				
					return null;
				
				}
				public String FECHAComment(){
				
				    return "";
				
				}
				public String FECHAPattern(){
				
					return "dd/MM/yyy";
				
				}
				public String FECHAOriginalDbColumnName(){
				
					return "FECHA";
				
				}

				
			    public java.util.Date PERIODO;

				public java.util.Date getPERIODO () {
					return this.PERIODO;
				}

				public Boolean PERIODOIsNullable(){
				    return true;
				}
				public Boolean PERIODOIsKey(){
				    return false;
				}
				public Integer PERIODOLength(){
				    return null;
				}
				public Integer PERIODOPrecision(){
				    return null;
				}
				public String PERIODODefault(){
				
					return null;
				
				}
				public String PERIODOComment(){
				
				    return "";
				
				}
				public String PERIODOPattern(){
				
					return "dd/MM/yyy";
				
				}
				public String PERIODOOriginalDbColumnName(){
				
					return "PERIODO";
				
				}

				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_CEC_DISTRIBUCION_CI_DistribucionCI) {

        	try {

        		int length = 0;
		
			        this.ID = dis.readInt();
					
					this.FECHA = readDate(dis);
					
					this.PERIODO = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_CEC_DISTRIBUCION_CI_DistribucionCI) {

        	try {

        		int length = 0;
		
			        this.ID = dis.readInt();
					
					this.FECHA = readDate(dis);
					
					this.PERIODO = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.ID);
					
					// java.util.Date
				
						writeDate(this.FECHA,dos);
					
					// java.util.Date
				
						writeDate(this.PERIODO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.ID);
					
					// java.util.Date
				
						writeDate(this.FECHA,dos);
					
					// java.util.Date
				
						writeDate(this.PERIODO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",FECHA="+String.valueOf(FECHA));
		sb.append(",PERIODO="+String.valueOf(PERIODO));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row18Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row18Struct row18 = new row18Struct();




	
	/**
	 * [tFlowToIterate_1 begin ] start
	 */

				
			int NB_ITERATE_tJava_5 = 0; //for statistics
			

	
		
		ok_Hash.put("tFlowToIterate_1", false);
		start_Hash.put("tFlowToIterate_1", System.currentTimeMillis());
		
	
	currentComponent="tFlowToIterate_1";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row18");
					}
				
		int tos_count_tFlowToIterate_1 = 0;
		

int nb_line_tFlowToIterate_1 = 0;
int counter_tFlowToIterate_1 = 0;

 



/**
 * [tFlowToIterate_1 begin ] stop
 */



	
	/**
	 * [tOracleInput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_1", false);
		start_Hash.put("tOracleInput_1", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_1";
	
	
		int tos_count_tOracleInput_1 = 0;
		
	


	
		    int nb_line_tOracleInput_1 = 0;
		    java.sql.Connection conn_tOracleInput_1 = null;
				conn_tOracleInput_1 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");
				
                boolean isTimeZoneNull_tOracleInput_1 = false;
				boolean isConnectionWrapped_tOracleInput_1 = !(conn_tOracleInput_1 instanceof oracle.jdbc.OracleConnection) && conn_tOracleInput_1.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tOracleInput_1 = null;
                if (isConnectionWrapped_tOracleInput_1) {
					unwrappedOraConn_tOracleInput_1 = conn_tOracleInput_1.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tOracleInput_1 != null) {
                        isTimeZoneNull_tOracleInput_1 = (unwrappedOraConn_tOracleInput_1.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tOracleInput_1 = (((oracle.jdbc.OracleConnection)conn_tOracleInput_1).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tOracleInput_1) {
					java.sql.Statement stmtGetTZ_tOracleInput_1 = conn_tOracleInput_1.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_1 = stmtGetTZ_tOracleInput_1.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_1 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tOracleInput_1.next()) {
						sessionTimezone_tOracleInput_1 = rsGetTZ_tOracleInput_1.getString(1);
					}
					if (isConnectionWrapped_tOracleInput_1 && unwrappedOraConn_tOracleInput_1 != null) {
                        unwrappedOraConn_tOracleInput_1.setSessionTimeZone(sessionTimezone_tOracleInput_1);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_1).setSessionTimeZone(sessionTimezone_tOracleInput_1);
                    }
				}
			
		    
			java.sql.Statement stmt_tOracleInput_1 = conn_tOracleInput_1.createStatement();

		    String dbquery_tOracleInput_1 = "select ca.id, ca.fecha, ca.periodo\n  from cec_anexos ca\n inner join cec_tanexos ct\n    on ca.tanexos_id = ct.id\n in"
+"ner join afi_estextderechos ae\n    on ca.estados_id = ae.id\n where ct.sigla = 'DISTCI'\n   and ca.fecha =to_date('"+context.TmpPeriodo +"','dd/MM/yyyy')   \n   and ca.estado='Activo'\n   and ca.estregistro_id = 1\n   and ae.estregistro_id = 1\n   and ae.co"
+"digo = 1\n   and ct.estregistro_id = 1";
		    

		    globalMap.put("tOracleInput_1_QUERY",dbquery_tOracleInput_1);

		    java.sql.ResultSet rs_tOracleInput_1 = null;

		    try {
		    	rs_tOracleInput_1 = stmt_tOracleInput_1.executeQuery(dbquery_tOracleInput_1);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_1 = rs_tOracleInput_1.getMetaData();
		    	int colQtyInRs_tOracleInput_1 = rsmd_tOracleInput_1.getColumnCount();

		    String tmpContent_tOracleInput_1 = null;
		    
		    
		    while (rs_tOracleInput_1.next()) {
		        nb_line_tOracleInput_1++;
		        
							if(colQtyInRs_tOracleInput_1 < 1) {
								row18.ID = 0;
							} else {
		                          
					if(rs_tOracleInput_1.getObject(1) != null) {
						row18.ID = rs_tOracleInput_1.getInt(1);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_1 < 2) {
								row18.FECHA = null;
							} else {
										
			row18.FECHA = routines.system.JDBCUtil.getDate(rs_tOracleInput_1, 2);
		                    }
							if(colQtyInRs_tOracleInput_1 < 3) {
								row18.PERIODO = null;
							} else {
										
			row18.PERIODO = routines.system.JDBCUtil.getDate(rs_tOracleInput_1, 3);
		                    }
					




 



/**
 * [tOracleInput_1 begin ] stop
 */
	
	/**
	 * [tOracleInput_1 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_1";
	
	

 


	tos_count_tOracleInput_1++;

/**
 * [tOracleInput_1 main ] stop
 */
	
	/**
	 * [tOracleInput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_1";
	
	

 



/**
 * [tOracleInput_1 process_data_begin ] stop
 */

	
	/**
	 * [tFlowToIterate_1 main ] start
	 */

	

	
	
	currentComponent="tFlowToIterate_1";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row18"
						
						);
					}
					


    	            
            globalMap.put("row18.ID", row18.ID);
    	            
            globalMap.put("row18.FECHA", row18.FECHA);
    	            
            globalMap.put("row18.PERIODO", row18.PERIODO);
    	
 
	   nb_line_tFlowToIterate_1++;  
       counter_tFlowToIterate_1++;
       globalMap.put("tFlowToIterate_1_CURRENT_ITERATION", counter_tFlowToIterate_1);
 


	tos_count_tFlowToIterate_1++;

/**
 * [tFlowToIterate_1 main ] stop
 */
	
	/**
	 * [tFlowToIterate_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFlowToIterate_1";
	
	

 



/**
 * [tFlowToIterate_1 process_data_begin ] stop
 */
	NB_ITERATE_tJava_5++;
	
	
					if(execStat){				
	       				runStat.updateStatOnConnection("row8", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row10", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("OnComponentOk12", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("CI_DEP", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row16", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("TotalDisanDEP", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("after_tHashInput_1", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("after_tHashInput_1", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("TotalDisan", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("after_tHashInput_1", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row17", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("after_tHashInput_1", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row15", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row13", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("OnSubjobOk8", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("OnSubjobOk4", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("after_tHashInput_1", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("CI_DEP_CECO", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row17", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row12", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row6", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("OnSubjobOk6", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("OnSubjobOk7", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row9", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("CI_GGRL", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("after_tHashInput_10", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row14", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row12", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row3", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("OnRowsEnd", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row11", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row16", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("InsVcups", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("TCV03", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row7", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row5", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row14", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row21", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("OnSubjobOk1", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("TCV01", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("after_tHashInput_1", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row21", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row11", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("OnSubjobOk9", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row2", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("OnSubjobOk2", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("after_tHashInput_6", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("CI_GGRL_CECO", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("TCV02", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("If2", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row6", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row10", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row4", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("TCV04", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row1", 3, 0);
					}           			
				
				if(execStat){
					runStat.updateStatOnConnection("iterate1", 1, "exec" + NB_ITERATE_tJava_5);
					//Thread.sleep(1000);
				}				
			

	
	/**
	 * [tJava_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_5", false);
		start_Hash.put("tJava_5", System.currentTimeMillis());
		
	
	currentComponent="tJava_5";
	
	
		int tos_count_tJava_5 = 0;
		


context.AnexoId = row18.ID;
context.Periodo = row18.PERIODO;
context.TmpPeriodo = "01/"+ TalendDate.formatDate("MM/yyyy",TalendDate.addDate(TalendDate.getCurrentDate(),-1,"MM"));

// Validación del día de programación
context.ControlDate = TalendDate.compareDate(context.FechaToday, row18.FECHA);

System.out.println("Fecha hoy: " + TalendDate.formatDate("dd/MM/yyyy", context.FechaToday));
System.out.println("AnexoId: " + context.AnexoId);
System.out.println("Periodo: " + context.TmpPeriodo);

 



/**
 * [tJava_5 begin ] stop
 */
	
	/**
	 * [tJava_5 main ] start
	 */

	

	
	
	currentComponent="tJava_5";
	
	

 


	tos_count_tJava_5++;

/**
 * [tJava_5 main ] stop
 */
	
	/**
	 * [tJava_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_5";
	
	

 



/**
 * [tJava_5 process_data_begin ] stop
 */
	
	/**
	 * [tJava_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_5";
	
	

 



/**
 * [tJava_5 process_data_end ] stop
 */
	
	/**
	 * [tJava_5 end ] start
	 */

	

	
	
	currentComponent="tJava_5";
	
	

 

ok_Hash.put("tJava_5", true);
end_Hash.put("tJava_5", System.currentTimeMillis());

   			if (context.ControlDate == 0) {
   				
					if(execStat){
   	 					runStat.updateStatOnConnection("If2", 0, "true");
					}
				tOracleRow_3Process(globalMap);
			}

			   
   				else{
					if(execStat){   
   	 					runStat.updateStatOnConnection("If2", 0, "false");
					}   	 
   				}



/**
 * [tJava_5 end ] stop
 */
						if(execStat){
							runStat.updateStatOnConnection("iterate1", 2, "exec" + NB_ITERATE_tJava_5);
						}				
					




	
	/**
	 * [tFlowToIterate_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFlowToIterate_1";
	
	

 



/**
 * [tFlowToIterate_1 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_1";
	
	

 



/**
 * [tOracleInput_1 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_1 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_1";
	
	

}
}finally{
	if (rs_tOracleInput_1 != null) {
		rs_tOracleInput_1.close();
	}
	if (stmt_tOracleInput_1 != null) {
		stmt_tOracleInput_1.close();
	}
}

globalMap.put("tOracleInput_1_NB_LINE",nb_line_tOracleInput_1);
 

ok_Hash.put("tOracleInput_1", true);
end_Hash.put("tOracleInput_1", System.currentTimeMillis());




/**
 * [tOracleInput_1 end ] stop
 */

	
	/**
	 * [tFlowToIterate_1 end ] start
	 */

	

	
	
	currentComponent="tFlowToIterate_1";
	
	

globalMap.put("tFlowToIterate_1_NB_LINE",nb_line_tFlowToIterate_1);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row18");
			  	}
			  	
 

ok_Hash.put("tFlowToIterate_1", true);
end_Hash.put("tFlowToIterate_1", System.currentTimeMillis());




/**
 * [tFlowToIterate_1 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleInput_1 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_1";
	
	

 



/**
 * [tOracleInput_1 finally ] stop
 */

	
	/**
	 * [tFlowToIterate_1 finally ] start
	 */

	

	
	
	currentComponent="tFlowToIterate_1";
	
	

 



/**
 * [tFlowToIterate_1 finally ] stop
 */

	
	/**
	 * [tJava_5 finally ] start
	 */

	

	
	
	currentComponent="tJava_5";
	
	

 



/**
 * [tJava_5 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_1_SUBPROCESS_STATE", 1);
	}
	


public void tOracleRow_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleRow_3_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tOracleRow_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleRow_3", false);
		start_Hash.put("tOracleRow_3", System.currentTimeMillis());
		
	
	currentComponent="tOracleRow_3";
	
	
		int tos_count_tOracleRow_3 = 0;
		

	java.sql.Connection conn_tOracleRow_3 = null;
	String query_tOracleRow_3 = "";
	boolean whetherReject_tOracleRow_3 = false;
	int count_tOracleRow_3 = 0;
				conn_tOracleRow_3 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");
			
        resourceMap.put("conn_tOracleRow_3", conn_tOracleRow_3);
        java.sql.Statement stmt_tOracleRow_3 = conn_tOracleRow_3.createStatement();
        resourceMap.put("stmt_tOracleRow_3", stmt_tOracleRow_3);

 



/**
 * [tOracleRow_3 begin ] stop
 */
	
	/**
	 * [tOracleRow_3 main ] start
	 */

	

	
	
	currentComponent="tOracleRow_3";
	
	

query_tOracleRow_3 = "update cec_anexos ca \nset ca.finicio = sysdate,\n ca.estregistro_id = 1,\n ca.estados_id = (select id from afi_estextd"
+"erechos ae where ae.codigo  = 5 and ae.estregistro_id = 1),\n ca.observacion = 'Distribución de costos indirectos inicia"
+"da'\nwhere ca.id =" + context.AnexoId;
whetherReject_tOracleRow_3 = false;
globalMap.put("tOracleRow_3_QUERY",query_tOracleRow_3);
try {
		stmt_tOracleRow_3.execute(query_tOracleRow_3);
		
	} catch (java.lang.Exception e) {
globalMap.put("tOracleRow_3_ERROR_MESSAGE",e.getMessage());
		whetherReject_tOracleRow_3 = true;
		
				System.err.print(e.getMessage());
				
	}
	
	if(!whetherReject_tOracleRow_3) {
		
	}
	

 


	tos_count_tOracleRow_3++;

/**
 * [tOracleRow_3 main ] stop
 */
	
	/**
	 * [tOracleRow_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleRow_3";
	
	

 



/**
 * [tOracleRow_3 process_data_begin ] stop
 */
	
	/**
	 * [tOracleRow_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleRow_3";
	
	

 



/**
 * [tOracleRow_3 process_data_end ] stop
 */
	
	/**
	 * [tOracleRow_3 end ] start
	 */

	

	
	
	currentComponent="tOracleRow_3";
	
	

	globalMap.put("tOracleRow_3_NB_LINE", count_tOracleRow_3);
        stmt_tOracleRow_3.close();
        resourceMap.remove("stmt_tOracleRow_3");
    resourceMap.put("statementClosed_tOracleRow_3", true);
    resourceMap.put("finish_tOracleRow_3", true);

 

ok_Hash.put("tOracleRow_3", true);
end_Hash.put("tOracleRow_3", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk12", 0, "ok");
				}
				tOracleInput_2Process(globalMap);



/**
 * [tOracleRow_3 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleRow_3 finally ] start
	 */

	

	
	
	currentComponent="tOracleRow_3";
	
	

    if (resourceMap.get("statementClosed_tOracleRow_3") == null) {
            java.sql.Statement stmtToClose_tOracleRow_3 = null;
            if ((stmtToClose_tOracleRow_3 = (java.sql.Statement) resourceMap.remove("stmt_tOracleRow_3")) != null) {
                stmtToClose_tOracleRow_3.close();
            }
    }
 



/**
 * [tOracleRow_3 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleRow_3_SUBPROCESS_STATE", 1);
	}
	


public static class row2Struct implements routines.system.IPersistableRow<row2Struct> {
    final static byte[] commonByteArrayLock_CEC_DISTRIBUCION_CI_DistribucionCI = new byte[0];
    static byte[] commonByteArray_CEC_DISTRIBUCION_CI_DistribucionCI = new byte[0];

	
			    public int FUERZA_ID;

				public int getFUERZA_ID () {
					return this.FUERZA_ID;
				}

				public Boolean FUERZA_IDIsNullable(){
				    return false;
				}
				public Boolean FUERZA_IDIsKey(){
				    return false;
				}
				public Integer FUERZA_IDLength(){
				    return 0;
				}
				public Integer FUERZA_IDPrecision(){
				    return null;
				}
				public String FUERZA_IDDefault(){
				
					return "";
				
				}
				public String FUERZA_IDComment(){
				
				    return "";
				
				}
				public String FUERZA_IDPattern(){
				
					return "";
				
				}
				public String FUERZA_IDOriginalDbColumnName(){
				
					return "FUERZA_ID";
				
				}

				
			    public String NOMBRE;

				public String getNOMBRE () {
					return this.NOMBRE;
				}

				public Boolean NOMBREIsNullable(){
				    return false;
				}
				public Boolean NOMBREIsKey(){
				    return false;
				}
				public Integer NOMBRELength(){
				    return 2000;
				}
				public Integer NOMBREPrecision(){
				    return 0;
				}
				public String NOMBREDefault(){
				
					return null;
				
				}
				public String NOMBREComment(){
				
				    return "";
				
				}
				public String NOMBREPattern(){
				
					return "";
				
				}
				public String NOMBREOriginalDbColumnName(){
				
					return "NOMBRE";
				
				}

				
			    public Double PORCENTAJE;

				public Double getPORCENTAJE () {
					return this.PORCENTAJE;
				}

				public Boolean PORCENTAJEIsNullable(){
				    return true;
				}
				public Boolean PORCENTAJEIsKey(){
				    return false;
				}
				public Integer PORCENTAJELength(){
				    return 0;
				}
				public Integer PORCENTAJEPrecision(){
				    return null;
				}
				public String PORCENTAJEDefault(){
				
					return "";
				
				}
				public String PORCENTAJEComment(){
				
				    return "";
				
				}
				public String PORCENTAJEPattern(){
				
					return "";
				
				}
				public String PORCENTAJEOriginalDbColumnName(){
				
					return "PORCENTAJE";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_CEC_DISTRIBUCION_CI_DistribucionCI.length) {
				if(length < 1024 && commonByteArray_CEC_DISTRIBUCION_CI_DistribucionCI.length == 0) {
   					commonByteArray_CEC_DISTRIBUCION_CI_DistribucionCI = new byte[1024];
				} else {
   					commonByteArray_CEC_DISTRIBUCION_CI_DistribucionCI = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_CEC_DISTRIBUCION_CI_DistribucionCI, 0, length);
			strReturn = new String(commonByteArray_CEC_DISTRIBUCION_CI_DistribucionCI, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_CEC_DISTRIBUCION_CI_DistribucionCI.length) {
				if(length < 1024 && commonByteArray_CEC_DISTRIBUCION_CI_DistribucionCI.length == 0) {
   					commonByteArray_CEC_DISTRIBUCION_CI_DistribucionCI = new byte[1024];
				} else {
   					commonByteArray_CEC_DISTRIBUCION_CI_DistribucionCI = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_CEC_DISTRIBUCION_CI_DistribucionCI, 0, length);
			strReturn = new String(commonByteArray_CEC_DISTRIBUCION_CI_DistribucionCI, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_CEC_DISTRIBUCION_CI_DistribucionCI) {

        	try {

        		int length = 0;
		
			        this.FUERZA_ID = dis.readInt();
					
					this.NOMBRE = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PORCENTAJE = null;
           				} else {
           			    	this.PORCENTAJE = dis.readDouble();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_CEC_DISTRIBUCION_CI_DistribucionCI) {

        	try {

        		int length = 0;
		
			        this.FUERZA_ID = dis.readInt();
					
					this.NOMBRE = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PORCENTAJE = null;
           				} else {
           			    	this.PORCENTAJE = dis.readDouble();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.FUERZA_ID);
					
					// String
				
						writeString(this.NOMBRE,dos);
					
					// Double
				
						if(this.PORCENTAJE == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PORCENTAJE);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.FUERZA_ID);
					
					// String
				
						writeString(this.NOMBRE,dos);
					
					// Double
				
						if(this.PORCENTAJE == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PORCENTAJE);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("FUERZA_ID="+String.valueOf(FUERZA_ID));
		sb.append(",NOMBRE="+NOMBRE);
		sb.append(",PORCENTAJE="+String.valueOf(PORCENTAJE));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row2Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row2Struct row2 = new row2Struct();




	
	/**
	 * [tHashOutput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashOutput_1", false);
		start_Hash.put("tHashOutput_1", System.currentTimeMillis());
		
	
	currentComponent="tHashOutput_1";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row2");
					}
				
		int tos_count_tHashOutput_1 = 0;
		



org.talend.designer.components.hashfile.common.MapHashFile mf_tHashOutput_1=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();    
		org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row2Struct> tHashFile_tHashOutput_1 = null;
		String hashKey_tHashOutput_1 = "tHashFile_DistribucionCI_" + pid + "_tHashOutput_1";
			synchronized(org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.get(hashKey_tHashOutput_1)){
			    if(mf_tHashOutput_1.getResourceMap().get(hashKey_tHashOutput_1) == null){
	      		    mf_tHashOutput_1.getResourceMap().put(hashKey_tHashOutput_1, new org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row2Struct>(org.talend.designer.components.hashfile.common.MATCHING_MODE.KEEP_ALL));
	      		    tHashFile_tHashOutput_1 = mf_tHashOutput_1.getResourceMap().get(hashKey_tHashOutput_1);
			    }else{
			    	tHashFile_tHashOutput_1 = mf_tHashOutput_1.getResourceMap().get(hashKey_tHashOutput_1);
			    }
			}
        int nb_line_tHashOutput_1 = 0;

 



/**
 * [tHashOutput_1 begin ] stop
 */



	
	/**
	 * [tOracleInput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_2", false);
		start_Hash.put("tOracleInput_2", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_2";
	
	
		int tos_count_tOracleInput_2 = 0;
		
	


	
		    int nb_line_tOracleInput_2 = 0;
		    java.sql.Connection conn_tOracleInput_2 = null;
				conn_tOracleInput_2 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");
				
                boolean isTimeZoneNull_tOracleInput_2 = false;
				boolean isConnectionWrapped_tOracleInput_2 = !(conn_tOracleInput_2 instanceof oracle.jdbc.OracleConnection) && conn_tOracleInput_2.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tOracleInput_2 = null;
                if (isConnectionWrapped_tOracleInput_2) {
					unwrappedOraConn_tOracleInput_2 = conn_tOracleInput_2.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tOracleInput_2 != null) {
                        isTimeZoneNull_tOracleInput_2 = (unwrappedOraConn_tOracleInput_2.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tOracleInput_2 = (((oracle.jdbc.OracleConnection)conn_tOracleInput_2).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tOracleInput_2) {
					java.sql.Statement stmtGetTZ_tOracleInput_2 = conn_tOracleInput_2.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_2 = stmtGetTZ_tOracleInput_2.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_2 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tOracleInput_2.next()) {
						sessionTimezone_tOracleInput_2 = rsGetTZ_tOracleInput_2.getString(1);
					}
					if (isConnectionWrapped_tOracleInput_2 && unwrappedOraConn_tOracleInput_2 != null) {
                        unwrappedOraConn_tOracleInput_2.setSessionTimeZone(sessionTimezone_tOracleInput_2);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_2).setSessionTimeZone(sessionTimezone_tOracleInput_2);
                    }
				}
			
		    
			java.sql.Statement stmt_tOracleInput_2 = conn_tOracleInput_2.createStatement();

		    String dbquery_tOracleInput_2 = "select gu.fuerza_id, gu.nombre, gu.porcentaje from gen_uorg gu inner join gen_tuorg gt\non gu.tuorg_id = gt.id\nwhere g"
+"t.nombre = 'DISAN'\nand gu.estado='Activo'\nand gu.estregistro_id = 1\nand gt.estado='Activo'\nand gt.estregistro_id = 1"
+""
;
		    

		    globalMap.put("tOracleInput_2_QUERY",dbquery_tOracleInput_2);

		    java.sql.ResultSet rs_tOracleInput_2 = null;

		    try {
		    	rs_tOracleInput_2 = stmt_tOracleInput_2.executeQuery(dbquery_tOracleInput_2);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_2 = rs_tOracleInput_2.getMetaData();
		    	int colQtyInRs_tOracleInput_2 = rsmd_tOracleInput_2.getColumnCount();

		    String tmpContent_tOracleInput_2 = null;
		    
		    
		    while (rs_tOracleInput_2.next()) {
		        nb_line_tOracleInput_2++;
		        
							if(colQtyInRs_tOracleInput_2 < 1) {
								row2.FUERZA_ID = 0;
							} else {
		                          
					if(rs_tOracleInput_2.getObject(1) != null) {
						row2.FUERZA_ID = rs_tOracleInput_2.getInt(1);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_2 < 2) {
								row2.NOMBRE = null;
							} else {
	                         		
        	row2.NOMBRE = routines.system.JDBCUtil.getString(rs_tOracleInput_2, 2, false);
		                    }
							if(colQtyInRs_tOracleInput_2 < 3) {
								row2.PORCENTAJE = null;
							} else {
	                         		
				row2.PORCENTAJE = routines.system.JDBCUtil.getDoubleObject(rs_tOracleInput_2, 3);
		                    }
					




 



/**
 * [tOracleInput_2 begin ] stop
 */
	
	/**
	 * [tOracleInput_2 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_2";
	
	

 


	tos_count_tOracleInput_2++;

/**
 * [tOracleInput_2 main ] stop
 */
	
	/**
	 * [tOracleInput_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_2";
	
	

 



/**
 * [tOracleInput_2 process_data_begin ] stop
 */

	
	/**
	 * [tHashOutput_1 main ] start
	 */

	

	
	
	currentComponent="tHashOutput_1";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row2"
						
						);
					}
					



    
		row2Struct oneRow_tHashOutput_1 = new row2Struct();
				
					oneRow_tHashOutput_1.FUERZA_ID = row2.FUERZA_ID;
					oneRow_tHashOutput_1.NOMBRE = row2.NOMBRE;
					oneRow_tHashOutput_1.PORCENTAJE = row2.PORCENTAJE;
		
        tHashFile_tHashOutput_1.put(oneRow_tHashOutput_1);
        nb_line_tHashOutput_1 ++;

 


	tos_count_tHashOutput_1++;

/**
 * [tHashOutput_1 main ] stop
 */
	
	/**
	 * [tHashOutput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashOutput_1";
	
	

 



/**
 * [tHashOutput_1 process_data_begin ] stop
 */
	
	/**
	 * [tHashOutput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashOutput_1";
	
	

 



/**
 * [tHashOutput_1 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_2";
	
	

 



/**
 * [tOracleInput_2 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_2 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_2";
	
	

}
}finally{
	if (rs_tOracleInput_2 != null) {
		rs_tOracleInput_2.close();
	}
	if (stmt_tOracleInput_2 != null) {
		stmt_tOracleInput_2.close();
	}
}

globalMap.put("tOracleInput_2_NB_LINE",nb_line_tOracleInput_2);
 

ok_Hash.put("tOracleInput_2", true);
end_Hash.put("tOracleInput_2", System.currentTimeMillis());




/**
 * [tOracleInput_2 end ] stop
 */

	
	/**
	 * [tHashOutput_1 end ] start
	 */

	

	
	
	currentComponent="tHashOutput_1";
	
	
globalMap.put("tHashOutput_1_NB_LINE", nb_line_tHashOutput_1);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row2");
			  	}
			  	
 

ok_Hash.put("tHashOutput_1", true);
end_Hash.put("tHashOutput_1", System.currentTimeMillis());




/**
 * [tHashOutput_1 end ] stop
 */



				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tOracleInput_2:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk6", 0, "ok");
								} 
							
							tOracleInput_3Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleInput_2 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_2";
	
	

 



/**
 * [tOracleInput_2 finally ] stop
 */

	
	/**
	 * [tHashOutput_1 finally ] start
	 */

	

	
	
	currentComponent="tHashOutput_1";
	
	

 



/**
 * [tHashOutput_1 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_2_SUBPROCESS_STATE", 1);
	}
	


public static class row3Struct implements routines.system.IPersistableRow<row3Struct> {
    final static byte[] commonByteArrayLock_CEC_DISTRIBUCION_CI_DistribucionCI = new byte[0];
    static byte[] commonByteArray_CEC_DISTRIBUCION_CI_DistribucionCI = new byte[0];

	
			    public Integer FUERZA_ID;

				public Integer getFUERZA_ID () {
					return this.FUERZA_ID;
				}

				public Boolean FUERZA_IDIsNullable(){
				    return true;
				}
				public Boolean FUERZA_IDIsKey(){
				    return false;
				}
				public Integer FUERZA_IDLength(){
				    return 0;
				}
				public Integer FUERZA_IDPrecision(){
				    return null;
				}
				public String FUERZA_IDDefault(){
				
					return "";
				
				}
				public String FUERZA_IDComment(){
				
				    return "";
				
				}
				public String FUERZA_IDPattern(){
				
					return "";
				
				}
				public String FUERZA_IDOriginalDbColumnName(){
				
					return "FUERZA_ID";
				
				}

				
			    public int ESMID;

				public int getESMID () {
					return this.ESMID;
				}

				public Boolean ESMIDIsNullable(){
				    return false;
				}
				public Boolean ESMIDIsKey(){
				    return false;
				}
				public Integer ESMIDLength(){
				    return 0;
				}
				public Integer ESMIDPrecision(){
				    return null;
				}
				public String ESMIDDefault(){
				
					return "";
				
				}
				public String ESMIDComment(){
				
				    return "";
				
				}
				public String ESMIDPattern(){
				
					return "";
				
				}
				public String ESMIDOriginalDbColumnName(){
				
					return "ESMID";
				
				}

				
			    public Double PESM;

				public Double getPESM () {
					return this.PESM;
				}

				public Boolean PESMIsNullable(){
				    return true;
				}
				public Boolean PESMIsKey(){
				    return false;
				}
				public Integer PESMLength(){
				    return 0;
				}
				public Integer PESMPrecision(){
				    return null;
				}
				public String PESMDefault(){
				
					return "";
				
				}
				public String PESMComment(){
				
				    return "";
				
				}
				public String PESMPattern(){
				
					return "";
				
				}
				public String PESMOriginalDbColumnName(){
				
					return "PESM";
				
				}

				
			    public int CECO_ID;

				public int getCECO_ID () {
					return this.CECO_ID;
				}

				public Boolean CECO_IDIsNullable(){
				    return false;
				}
				public Boolean CECO_IDIsKey(){
				    return false;
				}
				public Integer CECO_IDLength(){
				    return 0;
				}
				public Integer CECO_IDPrecision(){
				    return null;
				}
				public String CECO_IDDefault(){
				
					return "";
				
				}
				public String CECO_IDComment(){
				
				    return "";
				
				}
				public String CECO_IDPattern(){
				
					return "";
				
				}
				public String CECO_IDOriginalDbColumnName(){
				
					return "CECO_ID";
				
				}

				
			    public double PCECO;

				public double getPCECO () {
					return this.PCECO;
				}

				public Boolean PCECOIsNullable(){
				    return false;
				}
				public Boolean PCECOIsKey(){
				    return false;
				}
				public Integer PCECOLength(){
				    return 0;
				}
				public Integer PCECOPrecision(){
				    return null;
				}
				public String PCECODefault(){
				
					return "";
				
				}
				public String PCECOComment(){
				
				    return "";
				
				}
				public String PCECOPattern(){
				
					return "";
				
				}
				public String PCECOOriginalDbColumnName(){
				
					return "PCECO";
				
				}

				
			    public int CUPS_ID;

				public int getCUPS_ID () {
					return this.CUPS_ID;
				}

				public Boolean CUPS_IDIsNullable(){
				    return false;
				}
				public Boolean CUPS_IDIsKey(){
				    return false;
				}
				public Integer CUPS_IDLength(){
				    return 0;
				}
				public Integer CUPS_IDPrecision(){
				    return null;
				}
				public String CUPS_IDDefault(){
				
					return "";
				
				}
				public String CUPS_IDComment(){
				
				    return "";
				
				}
				public String CUPS_IDPattern(){
				
					return "";
				
				}
				public String CUPS_IDOriginalDbColumnName(){
				
					return "CUPS_ID";
				
				}

				
			    public double PCUPS;

				public double getPCUPS () {
					return this.PCUPS;
				}

				public Boolean PCUPSIsNullable(){
				    return false;
				}
				public Boolean PCUPSIsKey(){
				    return false;
				}
				public Integer PCUPSLength(){
				    return 0;
				}
				public Integer PCUPSPrecision(){
				    return null;
				}
				public String PCUPSDefault(){
				
					return "";
				
				}
				public String PCUPSComment(){
				
				    return "";
				
				}
				public String PCUPSPattern(){
				
					return "";
				
				}
				public String PCUPSOriginalDbColumnName(){
				
					return "PCUPS";
				
				}

				
			    public int CEBE_ID;

				public int getCEBE_ID () {
					return this.CEBE_ID;
				}

				public Boolean CEBE_IDIsNullable(){
				    return false;
				}
				public Boolean CEBE_IDIsKey(){
				    return false;
				}
				public Integer CEBE_IDLength(){
				    return 0;
				}
				public Integer CEBE_IDPrecision(){
				    return null;
				}
				public String CEBE_IDDefault(){
				
					return "";
				
				}
				public String CEBE_IDComment(){
				
				    return "";
				
				}
				public String CEBE_IDPattern(){
				
					return "";
				
				}
				public String CEBE_IDOriginalDbColumnName(){
				
					return "CEBE_ID";
				
				}

				
			    public Integer ESPECIALIDADES_ID;

				public Integer getESPECIALIDADES_ID () {
					return this.ESPECIALIDADES_ID;
				}

				public Boolean ESPECIALIDADES_IDIsNullable(){
				    return true;
				}
				public Boolean ESPECIALIDADES_IDIsKey(){
				    return false;
				}
				public Integer ESPECIALIDADES_IDLength(){
				    return 0;
				}
				public Integer ESPECIALIDADES_IDPrecision(){
				    return null;
				}
				public String ESPECIALIDADES_IDDefault(){
				
					return "";
				
				}
				public String ESPECIALIDADES_IDComment(){
				
				    return "";
				
				}
				public String ESPECIALIDADES_IDPattern(){
				
					return "";
				
				}
				public String ESPECIALIDADES_IDOriginalDbColumnName(){
				
					return "ESPECIALIDADES_ID";
				
				}

				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_CEC_DISTRIBUCION_CI_DistribucionCI) {

        	try {

        		int length = 0;
		
						this.FUERZA_ID = readInteger(dis);
					
			        this.ESMID = dis.readInt();
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PESM = null;
           				} else {
           			    	this.PESM = dis.readDouble();
           				}
					
			        this.CECO_ID = dis.readInt();
					
			        this.PCECO = dis.readDouble();
					
			        this.CUPS_ID = dis.readInt();
					
			        this.PCUPS = dis.readDouble();
					
			        this.CEBE_ID = dis.readInt();
					
						this.ESPECIALIDADES_ID = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_CEC_DISTRIBUCION_CI_DistribucionCI) {

        	try {

        		int length = 0;
		
						this.FUERZA_ID = readInteger(dis);
					
			        this.ESMID = dis.readInt();
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PESM = null;
           				} else {
           			    	this.PESM = dis.readDouble();
           				}
					
			        this.CECO_ID = dis.readInt();
					
			        this.PCECO = dis.readDouble();
					
			        this.CUPS_ID = dis.readInt();
					
			        this.PCUPS = dis.readDouble();
					
			        this.CEBE_ID = dis.readInt();
					
						this.ESPECIALIDADES_ID = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.FUERZA_ID,dos);
					
					// int
				
		            	dos.writeInt(this.ESMID);
					
					// Double
				
						if(this.PESM == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PESM);
		            	}
					
					// int
				
		            	dos.writeInt(this.CECO_ID);
					
					// double
				
		            	dos.writeDouble(this.PCECO);
					
					// int
				
		            	dos.writeInt(this.CUPS_ID);
					
					// double
				
		            	dos.writeDouble(this.PCUPS);
					
					// int
				
		            	dos.writeInt(this.CEBE_ID);
					
					// Integer
				
						writeInteger(this.ESPECIALIDADES_ID,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.FUERZA_ID,dos);
					
					// int
				
		            	dos.writeInt(this.ESMID);
					
					// Double
				
						if(this.PESM == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PESM);
		            	}
					
					// int
				
		            	dos.writeInt(this.CECO_ID);
					
					// double
				
		            	dos.writeDouble(this.PCECO);
					
					// int
				
		            	dos.writeInt(this.CUPS_ID);
					
					// double
				
		            	dos.writeDouble(this.PCUPS);
					
					// int
				
		            	dos.writeInt(this.CEBE_ID);
					
					// Integer
				
						writeInteger(this.ESPECIALIDADES_ID,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("FUERZA_ID="+String.valueOf(FUERZA_ID));
		sb.append(",ESMID="+String.valueOf(ESMID));
		sb.append(",PESM="+String.valueOf(PESM));
		sb.append(",CECO_ID="+String.valueOf(CECO_ID));
		sb.append(",PCECO="+String.valueOf(PCECO));
		sb.append(",CUPS_ID="+String.valueOf(CUPS_ID));
		sb.append(",PCUPS="+String.valueOf(PCUPS));
		sb.append(",CEBE_ID="+String.valueOf(CEBE_ID));
		sb.append(",ESPECIALIDADES_ID="+String.valueOf(ESPECIALIDADES_ID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row3Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_3_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row3Struct row3 = new row3Struct();




	
	/**
	 * [tHashOutput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashOutput_2", false);
		start_Hash.put("tHashOutput_2", System.currentTimeMillis());
		
	
	currentComponent="tHashOutput_2";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row3");
					}
				
		int tos_count_tHashOutput_2 = 0;
		



org.talend.designer.components.hashfile.common.MapHashFile mf_tHashOutput_2=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();    
		org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row3Struct> tHashFile_tHashOutput_2 = null;
		String hashKey_tHashOutput_2 = "tHashFile_DistribucionCI_" + pid + "_tHashOutput_2";
			synchronized(org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.get(hashKey_tHashOutput_2)){
			    if(mf_tHashOutput_2.getResourceMap().get(hashKey_tHashOutput_2) == null){
	      		    mf_tHashOutput_2.getResourceMap().put(hashKey_tHashOutput_2, new org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row3Struct>(org.talend.designer.components.hashfile.common.MATCHING_MODE.KEEP_ALL));
	      		    tHashFile_tHashOutput_2 = mf_tHashOutput_2.getResourceMap().get(hashKey_tHashOutput_2);
			    }else{
			    	tHashFile_tHashOutput_2 = mf_tHashOutput_2.getResourceMap().get(hashKey_tHashOutput_2);
			    }
			}
        int nb_line_tHashOutput_2 = 0;

 



/**
 * [tHashOutput_2 begin ] stop
 */



	
	/**
	 * [tOracleInput_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_3", false);
		start_Hash.put("tOracleInput_3", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_3";
	
	
		int tos_count_tOracleInput_3 = 0;
		
	


	
		    int nb_line_tOracleInput_3 = 0;
		    java.sql.Connection conn_tOracleInput_3 = null;
				conn_tOracleInput_3 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");
				
                boolean isTimeZoneNull_tOracleInput_3 = false;
				boolean isConnectionWrapped_tOracleInput_3 = !(conn_tOracleInput_3 instanceof oracle.jdbc.OracleConnection) && conn_tOracleInput_3.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tOracleInput_3 = null;
                if (isConnectionWrapped_tOracleInput_3) {
					unwrappedOraConn_tOracleInput_3 = conn_tOracleInput_3.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tOracleInput_3 != null) {
                        isTimeZoneNull_tOracleInput_3 = (unwrappedOraConn_tOracleInput_3.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tOracleInput_3 = (((oracle.jdbc.OracleConnection)conn_tOracleInput_3).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tOracleInput_3) {
					java.sql.Statement stmtGetTZ_tOracleInput_3 = conn_tOracleInput_3.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_3 = stmtGetTZ_tOracleInput_3.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_3 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tOracleInput_3.next()) {
						sessionTimezone_tOracleInput_3 = rsGetTZ_tOracleInput_3.getString(1);
					}
					if (isConnectionWrapped_tOracleInput_3 && unwrappedOraConn_tOracleInput_3 != null) {
                        unwrappedOraConn_tOracleInput_3.setSessionTimeZone(sessionTimezone_tOracleInput_3);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_3).setSessionTimeZone(sessionTimezone_tOracleInput_3);
                    }
				}
			
		    
			java.sql.Statement stmt_tOracleInput_3 = conn_tOracleInput_3.createStatement(java.sql.ResultSet.TYPE_FORWARD_ONLY,
																					java.sql.ResultSet.CONCUR_READ_ONLY);
			
                stmt_tOracleInput_3.setFetchSize(1000);


		    String dbquery_tOracleInput_3 = " \nselect distinct gu.fuerza_id,\n                gu.id          as esmId,\n                gu.porcentaje  as pesm,\n  "
+"              cc.id as ceco_id,\n                cuc.porcentaje as pceco,\n                ucc.cups_id,\n               "
+" ucc.porcentaje as pcups,\n                cc.cebe_id   ,\n                ge.id as Especialidades_id         \n  from c"
+"ec_uorg_ceco_cups ucc\n inner join cec_uorg_ceco cuc\n    on ucc.uorg_ceco_id = cuc.id\n   and cuc.estado = 'Activo'\n  "
+" and cuc.estregistro_id = 1\n inner join gen_uorg gu \n    on cuc.uorg_id = gu.id\n   and gu.estado = 'Activo'\n   and g"
+"u.estregistro_id = 1\n inner join cec_ceco cc\n    on cuc.ceco_id = cc.id\n   and cc.estado = 'Activo'\n   and cc.estreg"
+"istro_id = 1\n inner join cec_cebe ccb\n    on ccb.id= cc.cebe_id\n   and ccb.estado='Activo'\n   and ccb.estregistro_id"
+"=1\n inner join gen_fuerzas gf\n    on gu.fuerza_id = gf.id\n   and gf.codigo in (3, 4, 5)\n   and gf.estado = 'Activo'"
+"\n   and gf.estregistro_id = 1\n left join gen_especialidades ge\n    on cc.especialidades_id = ge.id\n   and ge.estado='"
+"Activo'\n   and ge.estregistro_id = 1\n inner join gen_servicios s\n    on s.id= ccb.servicios_id\n   and s.estado= 'Act"
+"ivo'\n   and s.estregistro_id=1\n inner join gen_cups gc\n    on ucc.cups_id = gc.id\n   and gc.estado = 'Activo'\n   an"
+"d gc.estregistro_id = 1\n inner join gen_espcups  gec\n    on gec.servicios_id=s.id\n   and gec.especialidades_id= ge.id"
+"\n   and gec.cups_id = gc.id\n   and gec.estado= 'Activo'\n   and gec.estregistro_id=1\n where ucc.estado = 'Activo'\n  "
+" and ucc.estregistro_id = 1\n   and cuc.porcentaje <> 0\n   and ucc.porcentaje <> 0\n";
		    

		    globalMap.put("tOracleInput_3_QUERY",dbquery_tOracleInput_3);

		    java.sql.ResultSet rs_tOracleInput_3 = null;

		    try {
		    	rs_tOracleInput_3 = stmt_tOracleInput_3.executeQuery(dbquery_tOracleInput_3);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_3 = rs_tOracleInput_3.getMetaData();
		    	int colQtyInRs_tOracleInput_3 = rsmd_tOracleInput_3.getColumnCount();

		    String tmpContent_tOracleInput_3 = null;
		    
		    
		    while (rs_tOracleInput_3.next()) {
		        nb_line_tOracleInput_3++;
		        
							if(colQtyInRs_tOracleInput_3 < 1) {
								row3.FUERZA_ID = null;
							} else {
		                          
					if(rs_tOracleInput_3.getObject(1) != null) {
						row3.FUERZA_ID = rs_tOracleInput_3.getInt(1);
					} else {
				
						row3.FUERZA_ID = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_3 < 2) {
								row3.ESMID = 0;
							} else {
		                          
					if(rs_tOracleInput_3.getObject(2) != null) {
						row3.ESMID = rs_tOracleInput_3.getInt(2);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_3 < 3) {
								row3.PESM = null;
							} else {
	                         		
				row3.PESM = routines.system.JDBCUtil.getDoubleObject(rs_tOracleInput_3, 3);
		                    }
							if(colQtyInRs_tOracleInput_3 < 4) {
								row3.CECO_ID = 0;
							} else {
		                          
					if(rs_tOracleInput_3.getObject(4) != null) {
						row3.CECO_ID = rs_tOracleInput_3.getInt(4);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_3 < 5) {
								row3.PCECO = 0;
							} else {
	                         		
				row3.PCECO = routines.system.JDBCUtil.getDouble(rs_tOracleInput_3, 5);
		                    }
							if(colQtyInRs_tOracleInput_3 < 6) {
								row3.CUPS_ID = 0;
							} else {
		                          
					if(rs_tOracleInput_3.getObject(6) != null) {
						row3.CUPS_ID = rs_tOracleInput_3.getInt(6);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_3 < 7) {
								row3.PCUPS = 0;
							} else {
	                         		
				row3.PCUPS = routines.system.JDBCUtil.getDouble(rs_tOracleInput_3, 7);
		                    }
							if(colQtyInRs_tOracleInput_3 < 8) {
								row3.CEBE_ID = 0;
							} else {
		                          
					if(rs_tOracleInput_3.getObject(8) != null) {
						row3.CEBE_ID = rs_tOracleInput_3.getInt(8);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_3 < 9) {
								row3.ESPECIALIDADES_ID = null;
							} else {
		                          
					if(rs_tOracleInput_3.getObject(9) != null) {
						row3.ESPECIALIDADES_ID = rs_tOracleInput_3.getInt(9);
					} else {
				
						row3.ESPECIALIDADES_ID = null;
					}
		                    }
					




 



/**
 * [tOracleInput_3 begin ] stop
 */
	
	/**
	 * [tOracleInput_3 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_3";
	
	

 


	tos_count_tOracleInput_3++;

/**
 * [tOracleInput_3 main ] stop
 */
	
	/**
	 * [tOracleInput_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_3";
	
	

 



/**
 * [tOracleInput_3 process_data_begin ] stop
 */

	
	/**
	 * [tHashOutput_2 main ] start
	 */

	

	
	
	currentComponent="tHashOutput_2";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row3"
						
						);
					}
					



    
		row3Struct oneRow_tHashOutput_2 = new row3Struct();
				
					oneRow_tHashOutput_2.FUERZA_ID = row3.FUERZA_ID;
					oneRow_tHashOutput_2.ESMID = row3.ESMID;
					oneRow_tHashOutput_2.PESM = row3.PESM;
					oneRow_tHashOutput_2.CECO_ID = row3.CECO_ID;
					oneRow_tHashOutput_2.PCECO = row3.PCECO;
					oneRow_tHashOutput_2.CUPS_ID = row3.CUPS_ID;
					oneRow_tHashOutput_2.PCUPS = row3.PCUPS;
					oneRow_tHashOutput_2.CEBE_ID = row3.CEBE_ID;
					oneRow_tHashOutput_2.ESPECIALIDADES_ID = row3.ESPECIALIDADES_ID;
		
        tHashFile_tHashOutput_2.put(oneRow_tHashOutput_2);
        nb_line_tHashOutput_2 ++;

 


	tos_count_tHashOutput_2++;

/**
 * [tHashOutput_2 main ] stop
 */
	
	/**
	 * [tHashOutput_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashOutput_2";
	
	

 



/**
 * [tHashOutput_2 process_data_begin ] stop
 */
	
	/**
	 * [tHashOutput_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashOutput_2";
	
	

 



/**
 * [tHashOutput_2 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_3";
	
	

 



/**
 * [tOracleInput_3 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_3 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_3";
	
	

}
}finally{
	if (rs_tOracleInput_3 != null) {
		rs_tOracleInput_3.close();
	}
	if (stmt_tOracleInput_3 != null) {
		stmt_tOracleInput_3.close();
	}
}

globalMap.put("tOracleInput_3_NB_LINE",nb_line_tOracleInput_3);
 

ok_Hash.put("tOracleInput_3", true);
end_Hash.put("tOracleInput_3", System.currentTimeMillis());




/**
 * [tOracleInput_3 end ] stop
 */

	
	/**
	 * [tHashOutput_2 end ] start
	 */

	

	
	
	currentComponent="tHashOutput_2";
	
	
globalMap.put("tHashOutput_2_NB_LINE", nb_line_tHashOutput_2);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row3");
			  	}
			  	
 

ok_Hash.put("tHashOutput_2", true);
end_Hash.put("tHashOutput_2", System.currentTimeMillis());




/**
 * [tHashOutput_2 end ] stop
 */



				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tOracleInput_3:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk7", 0, "ok");
								} 
							
							tOracleInput_5Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleInput_3 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_3";
	
	

 



/**
 * [tOracleInput_3 finally ] stop
 */

	
	/**
	 * [tHashOutput_2 finally ] start
	 */

	

	
	
	currentComponent="tHashOutput_2";
	
	

 



/**
 * [tHashOutput_2 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_3_SUBPROCESS_STATE", 1);
	}
	


public static class row9Struct implements routines.system.IPersistableRow<row9Struct> {
    final static byte[] commonByteArrayLock_CEC_DISTRIBUCION_CI_DistribucionCI = new byte[0];
    static byte[] commonByteArray_CEC_DISTRIBUCION_CI_DistribucionCI = new byte[0];

	
			    public Double VALOR;

				public Double getVALOR () {
					return this.VALOR;
				}

				public Boolean VALORIsNullable(){
				    return true;
				}
				public Boolean VALORIsKey(){
				    return false;
				}
				public Integer VALORLength(){
				    return 0;
				}
				public Integer VALORPrecision(){
				    return null;
				}
				public String VALORDefault(){
				
					return "";
				
				}
				public String VALORComment(){
				
				    return "";
				
				}
				public String VALORPattern(){
				
					return "";
				
				}
				public String VALOROriginalDbColumnName(){
				
					return "VALOR";
				
				}

				
			    public String SIGLA;

				public String getSIGLA () {
					return this.SIGLA;
				}

				public Boolean SIGLAIsNullable(){
				    return false;
				}
				public Boolean SIGLAIsKey(){
				    return false;
				}
				public Integer SIGLALength(){
				    return 20;
				}
				public Integer SIGLAPrecision(){
				    return 0;
				}
				public String SIGLADefault(){
				
					return null;
				
				}
				public String SIGLAComment(){
				
				    return "";
				
				}
				public String SIGLAPattern(){
				
					return "";
				
				}
				public String SIGLAOriginalDbColumnName(){
				
					return "SIGLA";
				
				}

				
			    public String NOMBRE;

				public String getNOMBRE () {
					return this.NOMBRE;
				}

				public Boolean NOMBREIsNullable(){
				    return true;
				}
				public Boolean NOMBREIsKey(){
				    return false;
				}
				public Integer NOMBRELength(){
				    return 200;
				}
				public Integer NOMBREPrecision(){
				    return 0;
				}
				public String NOMBREDefault(){
				
					return null;
				
				}
				public String NOMBREComment(){
				
				    return "";
				
				}
				public String NOMBREPattern(){
				
					return "";
				
				}
				public String NOMBREOriginalDbColumnName(){
				
					return "NOMBRE";
				
				}

				
			    public Integer FUERZA_ID;

				public Integer getFUERZA_ID () {
					return this.FUERZA_ID;
				}

				public Boolean FUERZA_IDIsNullable(){
				    return true;
				}
				public Boolean FUERZA_IDIsKey(){
				    return false;
				}
				public Integer FUERZA_IDLength(){
				    return 0;
				}
				public Integer FUERZA_IDPrecision(){
				    return null;
				}
				public String FUERZA_IDDefault(){
				
					return "";
				
				}
				public String FUERZA_IDComment(){
				
				    return "";
				
				}
				public String FUERZA_IDPattern(){
				
					return "";
				
				}
				public String FUERZA_IDOriginalDbColumnName(){
				
					return "FUERZA_ID";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_CEC_DISTRIBUCION_CI_DistribucionCI.length) {
				if(length < 1024 && commonByteArray_CEC_DISTRIBUCION_CI_DistribucionCI.length == 0) {
   					commonByteArray_CEC_DISTRIBUCION_CI_DistribucionCI = new byte[1024];
				} else {
   					commonByteArray_CEC_DISTRIBUCION_CI_DistribucionCI = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_CEC_DISTRIBUCION_CI_DistribucionCI, 0, length);
			strReturn = new String(commonByteArray_CEC_DISTRIBUCION_CI_DistribucionCI, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_CEC_DISTRIBUCION_CI_DistribucionCI.length) {
				if(length < 1024 && commonByteArray_CEC_DISTRIBUCION_CI_DistribucionCI.length == 0) {
   					commonByteArray_CEC_DISTRIBUCION_CI_DistribucionCI = new byte[1024];
				} else {
   					commonByteArray_CEC_DISTRIBUCION_CI_DistribucionCI = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_CEC_DISTRIBUCION_CI_DistribucionCI, 0, length);
			strReturn = new String(commonByteArray_CEC_DISTRIBUCION_CI_DistribucionCI, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_CEC_DISTRIBUCION_CI_DistribucionCI) {

        	try {

        		int length = 0;
		
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.VALOR = null;
           				} else {
           			    	this.VALOR = dis.readDouble();
           				}
					
					this.SIGLA = readString(dis);
					
					this.NOMBRE = readString(dis);
					
						this.FUERZA_ID = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_CEC_DISTRIBUCION_CI_DistribucionCI) {

        	try {

        		int length = 0;
		
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.VALOR = null;
           				} else {
           			    	this.VALOR = dis.readDouble();
           				}
					
					this.SIGLA = readString(dis);
					
					this.NOMBRE = readString(dis);
					
						this.FUERZA_ID = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Double
				
						if(this.VALOR == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.VALOR);
		            	}
					
					// String
				
						writeString(this.SIGLA,dos);
					
					// String
				
						writeString(this.NOMBRE,dos);
					
					// Integer
				
						writeInteger(this.FUERZA_ID,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Double
				
						if(this.VALOR == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.VALOR);
		            	}
					
					// String
				
						writeString(this.SIGLA,dos);
					
					// String
				
						writeString(this.NOMBRE,dos);
					
					// Integer
				
						writeInteger(this.FUERZA_ID,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("VALOR="+String.valueOf(VALOR));
		sb.append(",SIGLA="+SIGLA);
		sb.append(",NOMBRE="+NOMBRE);
		sb.append(",FUERZA_ID="+String.valueOf(FUERZA_ID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row9Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row7Struct implements routines.system.IPersistableRow<row7Struct> {
    final static byte[] commonByteArrayLock_CEC_DISTRIBUCION_CI_DistribucionCI = new byte[0];
    static byte[] commonByteArray_CEC_DISTRIBUCION_CI_DistribucionCI = new byte[0];

	
			    public Double VALOR;

				public Double getVALOR () {
					return this.VALOR;
				}

				public Boolean VALORIsNullable(){
				    return true;
				}
				public Boolean VALORIsKey(){
				    return false;
				}
				public Integer VALORLength(){
				    return 0;
				}
				public Integer VALORPrecision(){
				    return null;
				}
				public String VALORDefault(){
				
					return "";
				
				}
				public String VALORComment(){
				
				    return "";
				
				}
				public String VALORPattern(){
				
					return "";
				
				}
				public String VALOROriginalDbColumnName(){
				
					return "VALOR";
				
				}

				
			    public String SIGLA;

				public String getSIGLA () {
					return this.SIGLA;
				}

				public Boolean SIGLAIsNullable(){
				    return false;
				}
				public Boolean SIGLAIsKey(){
				    return false;
				}
				public Integer SIGLALength(){
				    return 20;
				}
				public Integer SIGLAPrecision(){
				    return 0;
				}
				public String SIGLADefault(){
				
					return null;
				
				}
				public String SIGLAComment(){
				
				    return "";
				
				}
				public String SIGLAPattern(){
				
					return "";
				
				}
				public String SIGLAOriginalDbColumnName(){
				
					return "SIGLA";
				
				}

				
			    public String NOMBRE;

				public String getNOMBRE () {
					return this.NOMBRE;
				}

				public Boolean NOMBREIsNullable(){
				    return true;
				}
				public Boolean NOMBREIsKey(){
				    return false;
				}
				public Integer NOMBRELength(){
				    return 200;
				}
				public Integer NOMBREPrecision(){
				    return 0;
				}
				public String NOMBREDefault(){
				
					return null;
				
				}
				public String NOMBREComment(){
				
				    return "";
				
				}
				public String NOMBREPattern(){
				
					return "";
				
				}
				public String NOMBREOriginalDbColumnName(){
				
					return "NOMBRE";
				
				}

				
			    public Integer FUERZA_ID;

				public Integer getFUERZA_ID () {
					return this.FUERZA_ID;
				}

				public Boolean FUERZA_IDIsNullable(){
				    return true;
				}
				public Boolean FUERZA_IDIsKey(){
				    return false;
				}
				public Integer FUERZA_IDLength(){
				    return 0;
				}
				public Integer FUERZA_IDPrecision(){
				    return null;
				}
				public String FUERZA_IDDefault(){
				
					return "";
				
				}
				public String FUERZA_IDComment(){
				
				    return "";
				
				}
				public String FUERZA_IDPattern(){
				
					return "";
				
				}
				public String FUERZA_IDOriginalDbColumnName(){
				
					return "FUERZA_ID";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_CEC_DISTRIBUCION_CI_DistribucionCI.length) {
				if(length < 1024 && commonByteArray_CEC_DISTRIBUCION_CI_DistribucionCI.length == 0) {
   					commonByteArray_CEC_DISTRIBUCION_CI_DistribucionCI = new byte[1024];
				} else {
   					commonByteArray_CEC_DISTRIBUCION_CI_DistribucionCI = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_CEC_DISTRIBUCION_CI_DistribucionCI, 0, length);
			strReturn = new String(commonByteArray_CEC_DISTRIBUCION_CI_DistribucionCI, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_CEC_DISTRIBUCION_CI_DistribucionCI.length) {
				if(length < 1024 && commonByteArray_CEC_DISTRIBUCION_CI_DistribucionCI.length == 0) {
   					commonByteArray_CEC_DISTRIBUCION_CI_DistribucionCI = new byte[1024];
				} else {
   					commonByteArray_CEC_DISTRIBUCION_CI_DistribucionCI = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_CEC_DISTRIBUCION_CI_DistribucionCI, 0, length);
			strReturn = new String(commonByteArray_CEC_DISTRIBUCION_CI_DistribucionCI, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_CEC_DISTRIBUCION_CI_DistribucionCI) {

        	try {

        		int length = 0;
		
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.VALOR = null;
           				} else {
           			    	this.VALOR = dis.readDouble();
           				}
					
					this.SIGLA = readString(dis);
					
					this.NOMBRE = readString(dis);
					
						this.FUERZA_ID = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_CEC_DISTRIBUCION_CI_DistribucionCI) {

        	try {

        		int length = 0;
		
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.VALOR = null;
           				} else {
           			    	this.VALOR = dis.readDouble();
           				}
					
					this.SIGLA = readString(dis);
					
					this.NOMBRE = readString(dis);
					
						this.FUERZA_ID = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Double
				
						if(this.VALOR == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.VALOR);
		            	}
					
					// String
				
						writeString(this.SIGLA,dos);
					
					// String
				
						writeString(this.NOMBRE,dos);
					
					// Integer
				
						writeInteger(this.FUERZA_ID,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Double
				
						if(this.VALOR == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.VALOR);
		            	}
					
					// String
				
						writeString(this.SIGLA,dos);
					
					// String
				
						writeString(this.NOMBRE,dos);
					
					// Integer
				
						writeInteger(this.FUERZA_ID,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("VALOR="+String.valueOf(VALOR));
		sb.append(",SIGLA="+SIGLA);
		sb.append(",NOMBRE="+NOMBRE);
		sb.append(",FUERZA_ID="+String.valueOf(FUERZA_ID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row7Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_5Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_5_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row7Struct row7 = new row7Struct();
row7Struct row9 = row7;





	
	/**
	 * [tJavaRow_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaRow_2", false);
		start_Hash.put("tJavaRow_2", System.currentTimeMillis());
		
	
	currentComponent="tJavaRow_2";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row9");
					}
				
		int tos_count_tJavaRow_2 = 0;
		

int nb_line_tJavaRow_2 = 0;

 



/**
 * [tJavaRow_2 begin ] stop
 */



	
	/**
	 * [tHashOutput_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashOutput_4", false);
		start_Hash.put("tHashOutput_4", System.currentTimeMillis());
		
	
	currentComponent="tHashOutput_4";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row7");
					}
				
		int tos_count_tHashOutput_4 = 0;
		



org.talend.designer.components.hashfile.common.MapHashFile mf_tHashOutput_4=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();    
		org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row7Struct> tHashFile_tHashOutput_4 = null;
		String hashKey_tHashOutput_4 = "tHashFile_DistribucionCI_" + pid + "_tHashOutput_4";
			synchronized(org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.get(hashKey_tHashOutput_4)){
			    if(mf_tHashOutput_4.getResourceMap().get(hashKey_tHashOutput_4) == null){
	      		    mf_tHashOutput_4.getResourceMap().put(hashKey_tHashOutput_4, new org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row7Struct>(org.talend.designer.components.hashfile.common.MATCHING_MODE.KEEP_ALL));
	      		    tHashFile_tHashOutput_4 = mf_tHashOutput_4.getResourceMap().get(hashKey_tHashOutput_4);
			    }else{
			    	tHashFile_tHashOutput_4 = mf_tHashOutput_4.getResourceMap().get(hashKey_tHashOutput_4);
			    }
			}
        int nb_line_tHashOutput_4 = 0;

 



/**
 * [tHashOutput_4 begin ] stop
 */



	
	/**
	 * [tOracleInput_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_5", false);
		start_Hash.put("tOracleInput_5", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_5";
	
	
		int tos_count_tOracleInput_5 = 0;
		
	


	
		    int nb_line_tOracleInput_5 = 0;
		    java.sql.Connection conn_tOracleInput_5 = null;
				conn_tOracleInput_5 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");
				
                boolean isTimeZoneNull_tOracleInput_5 = false;
				boolean isConnectionWrapped_tOracleInput_5 = !(conn_tOracleInput_5 instanceof oracle.jdbc.OracleConnection) && conn_tOracleInput_5.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tOracleInput_5 = null;
                if (isConnectionWrapped_tOracleInput_5) {
					unwrappedOraConn_tOracleInput_5 = conn_tOracleInput_5.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tOracleInput_5 != null) {
                        isTimeZoneNull_tOracleInput_5 = (unwrappedOraConn_tOracleInput_5.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tOracleInput_5 = (((oracle.jdbc.OracleConnection)conn_tOracleInput_5).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tOracleInput_5) {
					java.sql.Statement stmtGetTZ_tOracleInput_5 = conn_tOracleInput_5.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_5 = stmtGetTZ_tOracleInput_5.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_5 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tOracleInput_5.next()) {
						sessionTimezone_tOracleInput_5 = rsGetTZ_tOracleInput_5.getString(1);
					}
					if (isConnectionWrapped_tOracleInput_5 && unwrappedOraConn_tOracleInput_5 != null) {
                        unwrappedOraConn_tOracleInput_5.setSessionTimeZone(sessionTimezone_tOracleInput_5);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_5).setSessionTimeZone(sessionTimezone_tOracleInput_5);
                    }
				}
			
		    
			java.sql.Statement stmt_tOracleInput_5 = conn_tOracleInput_5.createStatement();

		    String dbquery_tOracleInput_5 = "select sum(cd.valor) as valor, ct.sigla, gt.nombre, gu.fuerza_id\n  from cec_anexos ca\n inner join cec_tanexos ct\n   "
+" on ca.tanexos_id = ct.id\n inner join cec_dcarga cd\n    on cd.anexos_id = ca.id\n inner join cec_tgastos cg\n    on cd"
+".tgastos_id = cg.id\n inner join gen_uorg gu\n    on ca.uorg_id = gu.id\n inner join gen_tuorg gt\n    on gu.tuorg_id = "
+"gt.id\n inner join afi_estextderechos ae\n on ca.estados_id = ae.id\n where ct.sigla in ('GGRL', 'DEP')\n   and gt.nombr"
+"e <> 'ESM' \n  and cd.periodo = to_date('"+context.TmpPeriodo+"','dd/MM/yyyy')\n  and ca.periodo = to_date('"+context.TmpPeriodo+"','dd/MM/yyyy')\n   and ae.codigo = 6   and ca.estregistro_id = 1 \n   and cg.sigla <> 'MATE'\n   and ct.estado = 'Acti"
+"vo'   \n   and ct.estregistro_id = 1   \n   and cd.estregistro_id = 1   \n   and cg.estado = 'Activo'   \n   and cg.estr"
+"egistro_id = 1\n   and gt.estado = 'Activo'\n   and gt.estregistro_id = 1\n   and gu.estado = 'Activo'\n   and gu.estreg"
+"istro_id = 1\n   and ae.estregistro_id = 1\n  group by ct.sigla, gt.nombre, gu.fuerza_id";
		    

		    globalMap.put("tOracleInput_5_QUERY",dbquery_tOracleInput_5);

		    java.sql.ResultSet rs_tOracleInput_5 = null;

		    try {
		    	rs_tOracleInput_5 = stmt_tOracleInput_5.executeQuery(dbquery_tOracleInput_5);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_5 = rs_tOracleInput_5.getMetaData();
		    	int colQtyInRs_tOracleInput_5 = rsmd_tOracleInput_5.getColumnCount();

		    String tmpContent_tOracleInput_5 = null;
		    
		    
		    while (rs_tOracleInput_5.next()) {
		        nb_line_tOracleInput_5++;
		        
							if(colQtyInRs_tOracleInput_5 < 1) {
								row7.VALOR = null;
							} else {
	                         		
				row7.VALOR = routines.system.JDBCUtil.getDoubleObject(rs_tOracleInput_5, 1);
		                    }
							if(colQtyInRs_tOracleInput_5 < 2) {
								row7.SIGLA = null;
							} else {
	                         		
        	row7.SIGLA = routines.system.JDBCUtil.getString(rs_tOracleInput_5, 2, false);
		                    }
							if(colQtyInRs_tOracleInput_5 < 3) {
								row7.NOMBRE = null;
							} else {
	                         		
        	row7.NOMBRE = routines.system.JDBCUtil.getString(rs_tOracleInput_5, 3, false);
		                    }
							if(colQtyInRs_tOracleInput_5 < 4) {
								row7.FUERZA_ID = null;
							} else {
		                          
					if(rs_tOracleInput_5.getObject(4) != null) {
						row7.FUERZA_ID = rs_tOracleInput_5.getInt(4);
					} else {
				
						row7.FUERZA_ID = null;
					}
		                    }
					




 



/**
 * [tOracleInput_5 begin ] stop
 */
	
	/**
	 * [tOracleInput_5 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_5";
	
	

 


	tos_count_tOracleInput_5++;

/**
 * [tOracleInput_5 main ] stop
 */
	
	/**
	 * [tOracleInput_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_5";
	
	

 



/**
 * [tOracleInput_5 process_data_begin ] stop
 */

	
	/**
	 * [tHashOutput_4 main ] start
	 */

	

	
	
	currentComponent="tHashOutput_4";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row7"
						
						);
					}
					



    
		row7Struct oneRow_tHashOutput_4 = new row7Struct();
				
					oneRow_tHashOutput_4.VALOR = row7.VALOR;
					oneRow_tHashOutput_4.SIGLA = row7.SIGLA;
					oneRow_tHashOutput_4.NOMBRE = row7.NOMBRE;
					oneRow_tHashOutput_4.FUERZA_ID = row7.FUERZA_ID;
		
        tHashFile_tHashOutput_4.put(oneRow_tHashOutput_4);
        nb_line_tHashOutput_4 ++;

 
     row9 = row7;


	tos_count_tHashOutput_4++;

/**
 * [tHashOutput_4 main ] stop
 */
	
	/**
	 * [tHashOutput_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashOutput_4";
	
	

 



/**
 * [tHashOutput_4 process_data_begin ] stop
 */

	
	/**
	 * [tJavaRow_2 main ] start
	 */

	

	
	
	currentComponent="tJavaRow_2";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row9"
						
						);
					}
					

    
if (row9.SIGLA.equals("DEP") && row9.NOMBRE.equals("DGSM"))
{
	context.ConsolidadoDEP += row9.VALOR;
	System.out.println("Consolidado DEP (DGSM): " + context.ConsolidadoDEP);

}
if (row9.SIGLA.equals("GGRL") && row9.NOMBRE.equals("DGSM"))
{
	context.ConsolidadoGGRL += row9.VALOR;
	System.out.println("Consolidado GGRL (DGSM): " + context.ConsolidadoGGRL);

}
    nb_line_tJavaRow_2++;   

 


	tos_count_tJavaRow_2++;

/**
 * [tJavaRow_2 main ] stop
 */
	
	/**
	 * [tJavaRow_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJavaRow_2";
	
	

 



/**
 * [tJavaRow_2 process_data_begin ] stop
 */
	
	/**
	 * [tJavaRow_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tJavaRow_2";
	
	

 



/**
 * [tJavaRow_2 process_data_end ] stop
 */



	
	/**
	 * [tHashOutput_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashOutput_4";
	
	

 



/**
 * [tHashOutput_4 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_5";
	
	

 



/**
 * [tOracleInput_5 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_5 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_5";
	
	

}
}finally{
	if (rs_tOracleInput_5 != null) {
		rs_tOracleInput_5.close();
	}
	if (stmt_tOracleInput_5 != null) {
		stmt_tOracleInput_5.close();
	}
}

globalMap.put("tOracleInput_5_NB_LINE",nb_line_tOracleInput_5);
 

ok_Hash.put("tOracleInput_5", true);
end_Hash.put("tOracleInput_5", System.currentTimeMillis());




/**
 * [tOracleInput_5 end ] stop
 */

	
	/**
	 * [tHashOutput_4 end ] start
	 */

	

	
	
	currentComponent="tHashOutput_4";
	
	
globalMap.put("tHashOutput_4_NB_LINE", nb_line_tHashOutput_4);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row7");
			  	}
			  	
 

ok_Hash.put("tHashOutput_4", true);
end_Hash.put("tHashOutput_4", System.currentTimeMillis());




/**
 * [tHashOutput_4 end ] stop
 */

	
	/**
	 * [tJavaRow_2 end ] start
	 */

	

	
	
	currentComponent="tJavaRow_2";
	
	

globalMap.put("tJavaRow_2_NB_LINE",nb_line_tJavaRow_2);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row9");
			  	}
			  	
 

ok_Hash.put("tJavaRow_2", true);
end_Hash.put("tJavaRow_2", System.currentTimeMillis());




/**
 * [tJavaRow_2 end ] stop
 */






				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tOracleInput_5:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk8", 0, "ok");
								} 
							
							tOracleInput_4Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleInput_5 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_5";
	
	

 



/**
 * [tOracleInput_5 finally ] stop
 */

	
	/**
	 * [tHashOutput_4 finally ] start
	 */

	

	
	
	currentComponent="tHashOutput_4";
	
	

 



/**
 * [tHashOutput_4 finally ] stop
 */

	
	/**
	 * [tJavaRow_2 finally ] start
	 */

	

	
	
	currentComponent="tJavaRow_2";
	
	

 



/**
 * [tJavaRow_2 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_5_SUBPROCESS_STATE", 1);
	}
	


public static class CI_GGRL_CECOStruct implements routines.system.IPersistableRow<CI_GGRL_CECOStruct> {
    final static byte[] commonByteArrayLock_CEC_DISTRIBUCION_CI_DistribucionCI = new byte[0];
    static byte[] commonByteArray_CEC_DISTRIBUCION_CI_DistribucionCI = new byte[0];

	
			    public Integer ESMID;

				public Integer getESMID () {
					return this.ESMID;
				}

				public Boolean ESMIDIsNullable(){
				    return true;
				}
				public Boolean ESMIDIsKey(){
				    return false;
				}
				public Integer ESMIDLength(){
				    return null;
				}
				public Integer ESMIDPrecision(){
				    return null;
				}
				public String ESMIDDefault(){
				
					return "";
				
				}
				public String ESMIDComment(){
				
				    return "";
				
				}
				public String ESMIDPattern(){
				
					return "";
				
				}
				public String ESMIDOriginalDbColumnName(){
				
					return "ESMID";
				
				}

				
			    public String SIGLA;

				public String getSIGLA () {
					return this.SIGLA;
				}

				public Boolean SIGLAIsNullable(){
				    return true;
				}
				public Boolean SIGLAIsKey(){
				    return false;
				}
				public Integer SIGLALength(){
				    return null;
				}
				public Integer SIGLAPrecision(){
				    return null;
				}
				public String SIGLADefault(){
				
					return null;
				
				}
				public String SIGLAComment(){
				
				    return "";
				
				}
				public String SIGLAPattern(){
				
					return "";
				
				}
				public String SIGLAOriginalDbColumnName(){
				
					return "SIGLA";
				
				}

				
			    public Integer FUERZA_ID;

				public Integer getFUERZA_ID () {
					return this.FUERZA_ID;
				}

				public Boolean FUERZA_IDIsNullable(){
				    return true;
				}
				public Boolean FUERZA_IDIsKey(){
				    return false;
				}
				public Integer FUERZA_IDLength(){
				    return null;
				}
				public Integer FUERZA_IDPrecision(){
				    return null;
				}
				public String FUERZA_IDDefault(){
				
					return "";
				
				}
				public String FUERZA_IDComment(){
				
				    return "";
				
				}
				public String FUERZA_IDPattern(){
				
					return "";
				
				}
				public String FUERZA_IDOriginalDbColumnName(){
				
					return "FUERZA_ID";
				
				}

				
			    public String SIGLACI;

				public String getSIGLACI () {
					return this.SIGLACI;
				}

				public Boolean SIGLACIIsNullable(){
				    return false;
				}
				public Boolean SIGLACIIsKey(){
				    return false;
				}
				public Integer SIGLACILength(){
				    return null;
				}
				public Integer SIGLACIPrecision(){
				    return null;
				}
				public String SIGLACIDefault(){
				
					return null;
				
				}
				public String SIGLACIComment(){
				
				    return "";
				
				}
				public String SIGLACIPattern(){
				
					return "";
				
				}
				public String SIGLACIOriginalDbColumnName(){
				
					return "SIGLACI";
				
				}

				
			    public Double VALOR;

				public Double getVALOR () {
					return this.VALOR;
				}

				public Boolean VALORIsNullable(){
				    return true;
				}
				public Boolean VALORIsKey(){
				    return false;
				}
				public Integer VALORLength(){
				    return null;
				}
				public Integer VALORPrecision(){
				    return null;
				}
				public String VALORDefault(){
				
					return "";
				
				}
				public String VALORComment(){
				
				    return "";
				
				}
				public String VALORPattern(){
				
					return "";
				
				}
				public String VALOROriginalDbColumnName(){
				
					return "VALOR";
				
				}

				
			    public double TANEXOS_ID;

				public double getTANEXOS_ID () {
					return this.TANEXOS_ID;
				}

				public Boolean TANEXOS_IDIsNullable(){
				    return false;
				}
				public Boolean TANEXOS_IDIsKey(){
				    return false;
				}
				public Integer TANEXOS_IDLength(){
				    return null;
				}
				public Integer TANEXOS_IDPrecision(){
				    return null;
				}
				public String TANEXOS_IDDefault(){
				
					return "";
				
				}
				public String TANEXOS_IDComment(){
				
				    return "";
				
				}
				public String TANEXOS_IDPattern(){
				
					return "";
				
				}
				public String TANEXOS_IDOriginalDbColumnName(){
				
					return "TANEXOS_ID";
				
				}

				
			    public Integer CECO_ID;

				public Integer getCECO_ID () {
					return this.CECO_ID;
				}

				public Boolean CECO_IDIsNullable(){
				    return true;
				}
				public Boolean CECO_IDIsKey(){
				    return false;
				}
				public Integer CECO_IDLength(){
				    return null;
				}
				public Integer CECO_IDPrecision(){
				    return null;
				}
				public String CECO_IDDefault(){
				
					return "";
				
				}
				public String CECO_IDComment(){
				
				    return "";
				
				}
				public String CECO_IDPattern(){
				
					return "";
				
				}
				public String CECO_IDOriginalDbColumnName(){
				
					return "CECO_ID";
				
				}

				
			    public Double ESPECIALIDADES_ID;

				public Double getESPECIALIDADES_ID () {
					return this.ESPECIALIDADES_ID;
				}

				public Boolean ESPECIALIDADES_IDIsNullable(){
				    return true;
				}
				public Boolean ESPECIALIDADES_IDIsKey(){
				    return false;
				}
				public Integer ESPECIALIDADES_IDLength(){
				    return null;
				}
				public Integer ESPECIALIDADES_IDPrecision(){
				    return null;
				}
				public String ESPECIALIDADES_IDDefault(){
				
					return "";
				
				}
				public String ESPECIALIDADES_IDComment(){
				
				    return "";
				
				}
				public String ESPECIALIDADES_IDPattern(){
				
					return "";
				
				}
				public String ESPECIALIDADES_IDOriginalDbColumnName(){
				
					return "ESPECIALIDADES_ID";
				
				}

				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_CEC_DISTRIBUCION_CI_DistribucionCI.length) {
				if(length < 1024 && commonByteArray_CEC_DISTRIBUCION_CI_DistribucionCI.length == 0) {
   					commonByteArray_CEC_DISTRIBUCION_CI_DistribucionCI = new byte[1024];
				} else {
   					commonByteArray_CEC_DISTRIBUCION_CI_DistribucionCI = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_CEC_DISTRIBUCION_CI_DistribucionCI, 0, length);
			strReturn = new String(commonByteArray_CEC_DISTRIBUCION_CI_DistribucionCI, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_CEC_DISTRIBUCION_CI_DistribucionCI.length) {
				if(length < 1024 && commonByteArray_CEC_DISTRIBUCION_CI_DistribucionCI.length == 0) {
   					commonByteArray_CEC_DISTRIBUCION_CI_DistribucionCI = new byte[1024];
				} else {
   					commonByteArray_CEC_DISTRIBUCION_CI_DistribucionCI = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_CEC_DISTRIBUCION_CI_DistribucionCI, 0, length);
			strReturn = new String(commonByteArray_CEC_DISTRIBUCION_CI_DistribucionCI, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_CEC_DISTRIBUCION_CI_DistribucionCI) {

        	try {

        		int length = 0;
		
						this.ESMID = readInteger(dis);
					
					this.SIGLA = readString(dis);
					
						this.FUERZA_ID = readInteger(dis);
					
					this.SIGLACI = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.VALOR = null;
           				} else {
           			    	this.VALOR = dis.readDouble();
           				}
					
			        this.TANEXOS_ID = dis.readDouble();
					
						this.CECO_ID = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.ESPECIALIDADES_ID = null;
           				} else {
           			    	this.ESPECIALIDADES_ID = dis.readDouble();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_CEC_DISTRIBUCION_CI_DistribucionCI) {

        	try {

        		int length = 0;
		
						this.ESMID = readInteger(dis);
					
					this.SIGLA = readString(dis);
					
						this.FUERZA_ID = readInteger(dis);
					
					this.SIGLACI = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.VALOR = null;
           				} else {
           			    	this.VALOR = dis.readDouble();
           				}
					
			        this.TANEXOS_ID = dis.readDouble();
					
						this.CECO_ID = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.ESPECIALIDADES_ID = null;
           				} else {
           			    	this.ESPECIALIDADES_ID = dis.readDouble();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.ESMID,dos);
					
					// String
				
						writeString(this.SIGLA,dos);
					
					// Integer
				
						writeInteger(this.FUERZA_ID,dos);
					
					// String
				
						writeString(this.SIGLACI,dos);
					
					// Double
				
						if(this.VALOR == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.VALOR);
		            	}
					
					// double
				
		            	dos.writeDouble(this.TANEXOS_ID);
					
					// Integer
				
						writeInteger(this.CECO_ID,dos);
					
					// Double
				
						if(this.ESPECIALIDADES_ID == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.ESPECIALIDADES_ID);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.ESMID,dos);
					
					// String
				
						writeString(this.SIGLA,dos);
					
					// Integer
				
						writeInteger(this.FUERZA_ID,dos);
					
					// String
				
						writeString(this.SIGLACI,dos);
					
					// Double
				
						if(this.VALOR == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.VALOR);
		            	}
					
					// double
				
		            	dos.writeDouble(this.TANEXOS_ID);
					
					// Integer
				
						writeInteger(this.CECO_ID,dos);
					
					// Double
				
						if(this.ESPECIALIDADES_ID == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.ESPECIALIDADES_ID);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ESMID="+String.valueOf(ESMID));
		sb.append(",SIGLA="+SIGLA);
		sb.append(",FUERZA_ID="+String.valueOf(FUERZA_ID));
		sb.append(",SIGLACI="+SIGLACI);
		sb.append(",VALOR="+String.valueOf(VALOR));
		sb.append(",TANEXOS_ID="+String.valueOf(TANEXOS_ID));
		sb.append(",CECO_ID="+String.valueOf(CECO_ID));
		sb.append(",ESPECIALIDADES_ID="+String.valueOf(ESPECIALIDADES_ID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(CI_GGRL_CECOStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class CI_GGRLStruct implements routines.system.IPersistableRow<CI_GGRLStruct> {
    final static byte[] commonByteArrayLock_CEC_DISTRIBUCION_CI_DistribucionCI = new byte[0];
    static byte[] commonByteArray_CEC_DISTRIBUCION_CI_DistribucionCI = new byte[0];

	
			    public Integer ESMID;

				public Integer getESMID () {
					return this.ESMID;
				}

				public Boolean ESMIDIsNullable(){
				    return true;
				}
				public Boolean ESMIDIsKey(){
				    return false;
				}
				public Integer ESMIDLength(){
				    return null;
				}
				public Integer ESMIDPrecision(){
				    return null;
				}
				public String ESMIDDefault(){
				
					return "";
				
				}
				public String ESMIDComment(){
				
				    return "";
				
				}
				public String ESMIDPattern(){
				
					return "";
				
				}
				public String ESMIDOriginalDbColumnName(){
				
					return "ESMID";
				
				}

				
			    public String SIGLA;

				public String getSIGLA () {
					return this.SIGLA;
				}

				public Boolean SIGLAIsNullable(){
				    return true;
				}
				public Boolean SIGLAIsKey(){
				    return false;
				}
				public Integer SIGLALength(){
				    return null;
				}
				public Integer SIGLAPrecision(){
				    return null;
				}
				public String SIGLADefault(){
				
					return null;
				
				}
				public String SIGLAComment(){
				
				    return "";
				
				}
				public String SIGLAPattern(){
				
					return "";
				
				}
				public String SIGLAOriginalDbColumnName(){
				
					return "SIGLA";
				
				}

				
			    public Integer FUERZA_ID;

				public Integer getFUERZA_ID () {
					return this.FUERZA_ID;
				}

				public Boolean FUERZA_IDIsNullable(){
				    return true;
				}
				public Boolean FUERZA_IDIsKey(){
				    return false;
				}
				public Integer FUERZA_IDLength(){
				    return null;
				}
				public Integer FUERZA_IDPrecision(){
				    return null;
				}
				public String FUERZA_IDDefault(){
				
					return "";
				
				}
				public String FUERZA_IDComment(){
				
				    return "";
				
				}
				public String FUERZA_IDPattern(){
				
					return "";
				
				}
				public String FUERZA_IDOriginalDbColumnName(){
				
					return "FUERZA_ID";
				
				}

				
			    public String SIGLACI;

				public String getSIGLACI () {
					return this.SIGLACI;
				}

				public Boolean SIGLACIIsNullable(){
				    return false;
				}
				public Boolean SIGLACIIsKey(){
				    return false;
				}
				public Integer SIGLACILength(){
				    return null;
				}
				public Integer SIGLACIPrecision(){
				    return null;
				}
				public String SIGLACIDefault(){
				
					return null;
				
				}
				public String SIGLACIComment(){
				
				    return "";
				
				}
				public String SIGLACIPattern(){
				
					return "";
				
				}
				public String SIGLACIOriginalDbColumnName(){
				
					return "SIGLACI";
				
				}

				
			    public Double VALOR;

				public Double getVALOR () {
					return this.VALOR;
				}

				public Boolean VALORIsNullable(){
				    return true;
				}
				public Boolean VALORIsKey(){
				    return false;
				}
				public Integer VALORLength(){
				    return null;
				}
				public Integer VALORPrecision(){
				    return null;
				}
				public String VALORDefault(){
				
					return "";
				
				}
				public String VALORComment(){
				
				    return "";
				
				}
				public String VALORPattern(){
				
					return "";
				
				}
				public String VALOROriginalDbColumnName(){
				
					return "VALOR";
				
				}

				
			    public double TANEXOS_ID;

				public double getTANEXOS_ID () {
					return this.TANEXOS_ID;
				}

				public Boolean TANEXOS_IDIsNullable(){
				    return false;
				}
				public Boolean TANEXOS_IDIsKey(){
				    return false;
				}
				public Integer TANEXOS_IDLength(){
				    return null;
				}
				public Integer TANEXOS_IDPrecision(){
				    return null;
				}
				public String TANEXOS_IDDefault(){
				
					return "";
				
				}
				public String TANEXOS_IDComment(){
				
				    return "";
				
				}
				public String TANEXOS_IDPattern(){
				
					return "";
				
				}
				public String TANEXOS_IDOriginalDbColumnName(){
				
					return "TANEXOS_ID";
				
				}

				
			    public Integer CECO_ID;

				public Integer getCECO_ID () {
					return this.CECO_ID;
				}

				public Boolean CECO_IDIsNullable(){
				    return true;
				}
				public Boolean CECO_IDIsKey(){
				    return false;
				}
				public Integer CECO_IDLength(){
				    return null;
				}
				public Integer CECO_IDPrecision(){
				    return null;
				}
				public String CECO_IDDefault(){
				
					return "";
				
				}
				public String CECO_IDComment(){
				
				    return "";
				
				}
				public String CECO_IDPattern(){
				
					return "";
				
				}
				public String CECO_IDOriginalDbColumnName(){
				
					return "CECO_ID";
				
				}

				
			    public Double ESPECIALIDADES_ID;

				public Double getESPECIALIDADES_ID () {
					return this.ESPECIALIDADES_ID;
				}

				public Boolean ESPECIALIDADES_IDIsNullable(){
				    return true;
				}
				public Boolean ESPECIALIDADES_IDIsKey(){
				    return false;
				}
				public Integer ESPECIALIDADES_IDLength(){
				    return null;
				}
				public Integer ESPECIALIDADES_IDPrecision(){
				    return null;
				}
				public String ESPECIALIDADES_IDDefault(){
				
					return "";
				
				}
				public String ESPECIALIDADES_IDComment(){
				
				    return "";
				
				}
				public String ESPECIALIDADES_IDPattern(){
				
					return "";
				
				}
				public String ESPECIALIDADES_IDOriginalDbColumnName(){
				
					return "ESPECIALIDADES_ID";
				
				}

				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_CEC_DISTRIBUCION_CI_DistribucionCI.length) {
				if(length < 1024 && commonByteArray_CEC_DISTRIBUCION_CI_DistribucionCI.length == 0) {
   					commonByteArray_CEC_DISTRIBUCION_CI_DistribucionCI = new byte[1024];
				} else {
   					commonByteArray_CEC_DISTRIBUCION_CI_DistribucionCI = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_CEC_DISTRIBUCION_CI_DistribucionCI, 0, length);
			strReturn = new String(commonByteArray_CEC_DISTRIBUCION_CI_DistribucionCI, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_CEC_DISTRIBUCION_CI_DistribucionCI.length) {
				if(length < 1024 && commonByteArray_CEC_DISTRIBUCION_CI_DistribucionCI.length == 0) {
   					commonByteArray_CEC_DISTRIBUCION_CI_DistribucionCI = new byte[1024];
				} else {
   					commonByteArray_CEC_DISTRIBUCION_CI_DistribucionCI = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_CEC_DISTRIBUCION_CI_DistribucionCI, 0, length);
			strReturn = new String(commonByteArray_CEC_DISTRIBUCION_CI_DistribucionCI, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_CEC_DISTRIBUCION_CI_DistribucionCI) {

        	try {

        		int length = 0;
		
						this.ESMID = readInteger(dis);
					
					this.SIGLA = readString(dis);
					
						this.FUERZA_ID = readInteger(dis);
					
					this.SIGLACI = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.VALOR = null;
           				} else {
           			    	this.VALOR = dis.readDouble();
           				}
					
			        this.TANEXOS_ID = dis.readDouble();
					
						this.CECO_ID = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.ESPECIALIDADES_ID = null;
           				} else {
           			    	this.ESPECIALIDADES_ID = dis.readDouble();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_CEC_DISTRIBUCION_CI_DistribucionCI) {

        	try {

        		int length = 0;
		
						this.ESMID = readInteger(dis);
					
					this.SIGLA = readString(dis);
					
						this.FUERZA_ID = readInteger(dis);
					
					this.SIGLACI = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.VALOR = null;
           				} else {
           			    	this.VALOR = dis.readDouble();
           				}
					
			        this.TANEXOS_ID = dis.readDouble();
					
						this.CECO_ID = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.ESPECIALIDADES_ID = null;
           				} else {
           			    	this.ESPECIALIDADES_ID = dis.readDouble();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.ESMID,dos);
					
					// String
				
						writeString(this.SIGLA,dos);
					
					// Integer
				
						writeInteger(this.FUERZA_ID,dos);
					
					// String
				
						writeString(this.SIGLACI,dos);
					
					// Double
				
						if(this.VALOR == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.VALOR);
		            	}
					
					// double
				
		            	dos.writeDouble(this.TANEXOS_ID);
					
					// Integer
				
						writeInteger(this.CECO_ID,dos);
					
					// Double
				
						if(this.ESPECIALIDADES_ID == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.ESPECIALIDADES_ID);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.ESMID,dos);
					
					// String
				
						writeString(this.SIGLA,dos);
					
					// Integer
				
						writeInteger(this.FUERZA_ID,dos);
					
					// String
				
						writeString(this.SIGLACI,dos);
					
					// Double
				
						if(this.VALOR == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.VALOR);
		            	}
					
					// double
				
		            	dos.writeDouble(this.TANEXOS_ID);
					
					// Integer
				
						writeInteger(this.CECO_ID,dos);
					
					// Double
				
						if(this.ESPECIALIDADES_ID == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.ESPECIALIDADES_ID);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ESMID="+String.valueOf(ESMID));
		sb.append(",SIGLA="+SIGLA);
		sb.append(",FUERZA_ID="+String.valueOf(FUERZA_ID));
		sb.append(",SIGLACI="+SIGLACI);
		sb.append(",VALOR="+String.valueOf(VALOR));
		sb.append(",TANEXOS_ID="+String.valueOf(TANEXOS_ID));
		sb.append(",CECO_ID="+String.valueOf(CECO_ID));
		sb.append(",ESPECIALIDADES_ID="+String.valueOf(ESPECIALIDADES_ID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(CI_GGRLStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class CI_DEP_CECOStruct implements routines.system.IPersistableRow<CI_DEP_CECOStruct> {
    final static byte[] commonByteArrayLock_CEC_DISTRIBUCION_CI_DistribucionCI = new byte[0];
    static byte[] commonByteArray_CEC_DISTRIBUCION_CI_DistribucionCI = new byte[0];

	
			    public Integer ESMID;

				public Integer getESMID () {
					return this.ESMID;
				}

				public Boolean ESMIDIsNullable(){
				    return true;
				}
				public Boolean ESMIDIsKey(){
				    return false;
				}
				public Integer ESMIDLength(){
				    return null;
				}
				public Integer ESMIDPrecision(){
				    return null;
				}
				public String ESMIDDefault(){
				
					return "";
				
				}
				public String ESMIDComment(){
				
				    return "";
				
				}
				public String ESMIDPattern(){
				
					return "";
				
				}
				public String ESMIDOriginalDbColumnName(){
				
					return "ESMID";
				
				}

				
			    public String SIGLA;

				public String getSIGLA () {
					return this.SIGLA;
				}

				public Boolean SIGLAIsNullable(){
				    return true;
				}
				public Boolean SIGLAIsKey(){
				    return false;
				}
				public Integer SIGLALength(){
				    return null;
				}
				public Integer SIGLAPrecision(){
				    return null;
				}
				public String SIGLADefault(){
				
					return null;
				
				}
				public String SIGLAComment(){
				
				    return "";
				
				}
				public String SIGLAPattern(){
				
					return "";
				
				}
				public String SIGLAOriginalDbColumnName(){
				
					return "SIGLA";
				
				}

				
			    public Integer FUERZA_ID;

				public Integer getFUERZA_ID () {
					return this.FUERZA_ID;
				}

				public Boolean FUERZA_IDIsNullable(){
				    return true;
				}
				public Boolean FUERZA_IDIsKey(){
				    return false;
				}
				public Integer FUERZA_IDLength(){
				    return null;
				}
				public Integer FUERZA_IDPrecision(){
				    return null;
				}
				public String FUERZA_IDDefault(){
				
					return "";
				
				}
				public String FUERZA_IDComment(){
				
				    return "";
				
				}
				public String FUERZA_IDPattern(){
				
					return "";
				
				}
				public String FUERZA_IDOriginalDbColumnName(){
				
					return "FUERZA_ID";
				
				}

				
			    public String SIGLACI;

				public String getSIGLACI () {
					return this.SIGLACI;
				}

				public Boolean SIGLACIIsNullable(){
				    return false;
				}
				public Boolean SIGLACIIsKey(){
				    return false;
				}
				public Integer SIGLACILength(){
				    return null;
				}
				public Integer SIGLACIPrecision(){
				    return null;
				}
				public String SIGLACIDefault(){
				
					return null;
				
				}
				public String SIGLACIComment(){
				
				    return "";
				
				}
				public String SIGLACIPattern(){
				
					return "";
				
				}
				public String SIGLACIOriginalDbColumnName(){
				
					return "SIGLACI";
				
				}

				
			    public Double VALOR;

				public Double getVALOR () {
					return this.VALOR;
				}

				public Boolean VALORIsNullable(){
				    return true;
				}
				public Boolean VALORIsKey(){
				    return false;
				}
				public Integer VALORLength(){
				    return null;
				}
				public Integer VALORPrecision(){
				    return null;
				}
				public String VALORDefault(){
				
					return "";
				
				}
				public String VALORComment(){
				
				    return "";
				
				}
				public String VALORPattern(){
				
					return "";
				
				}
				public String VALOROriginalDbColumnName(){
				
					return "VALOR";
				
				}

				
			    public double TANEXOS_ID;

				public double getTANEXOS_ID () {
					return this.TANEXOS_ID;
				}

				public Boolean TANEXOS_IDIsNullable(){
				    return false;
				}
				public Boolean TANEXOS_IDIsKey(){
				    return false;
				}
				public Integer TANEXOS_IDLength(){
				    return null;
				}
				public Integer TANEXOS_IDPrecision(){
				    return null;
				}
				public String TANEXOS_IDDefault(){
				
					return "";
				
				}
				public String TANEXOS_IDComment(){
				
				    return "";
				
				}
				public String TANEXOS_IDPattern(){
				
					return "";
				
				}
				public String TANEXOS_IDOriginalDbColumnName(){
				
					return "TANEXOS_ID";
				
				}

				
			    public Integer CECO_ID;

				public Integer getCECO_ID () {
					return this.CECO_ID;
				}

				public Boolean CECO_IDIsNullable(){
				    return true;
				}
				public Boolean CECO_IDIsKey(){
				    return false;
				}
				public Integer CECO_IDLength(){
				    return null;
				}
				public Integer CECO_IDPrecision(){
				    return null;
				}
				public String CECO_IDDefault(){
				
					return "";
				
				}
				public String CECO_IDComment(){
				
				    return "";
				
				}
				public String CECO_IDPattern(){
				
					return "";
				
				}
				public String CECO_IDOriginalDbColumnName(){
				
					return "CECO_ID";
				
				}

				
			    public Double ESPECIALIDADES_ID;

				public Double getESPECIALIDADES_ID () {
					return this.ESPECIALIDADES_ID;
				}

				public Boolean ESPECIALIDADES_IDIsNullable(){
				    return true;
				}
				public Boolean ESPECIALIDADES_IDIsKey(){
				    return false;
				}
				public Integer ESPECIALIDADES_IDLength(){
				    return null;
				}
				public Integer ESPECIALIDADES_IDPrecision(){
				    return null;
				}
				public String ESPECIALIDADES_IDDefault(){
				
					return "";
				
				}
				public String ESPECIALIDADES_IDComment(){
				
				    return "";
				
				}
				public String ESPECIALIDADES_IDPattern(){
				
					return "";
				
				}
				public String ESPECIALIDADES_IDOriginalDbColumnName(){
				
					return "ESPECIALIDADES_ID";
				
				}

				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_CEC_DISTRIBUCION_CI_DistribucionCI.length) {
				if(length < 1024 && commonByteArray_CEC_DISTRIBUCION_CI_DistribucionCI.length == 0) {
   					commonByteArray_CEC_DISTRIBUCION_CI_DistribucionCI = new byte[1024];
				} else {
   					commonByteArray_CEC_DISTRIBUCION_CI_DistribucionCI = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_CEC_DISTRIBUCION_CI_DistribucionCI, 0, length);
			strReturn = new String(commonByteArray_CEC_DISTRIBUCION_CI_DistribucionCI, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_CEC_DISTRIBUCION_CI_DistribucionCI.length) {
				if(length < 1024 && commonByteArray_CEC_DISTRIBUCION_CI_DistribucionCI.length == 0) {
   					commonByteArray_CEC_DISTRIBUCION_CI_DistribucionCI = new byte[1024];
				} else {
   					commonByteArray_CEC_DISTRIBUCION_CI_DistribucionCI = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_CEC_DISTRIBUCION_CI_DistribucionCI, 0, length);
			strReturn = new String(commonByteArray_CEC_DISTRIBUCION_CI_DistribucionCI, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_CEC_DISTRIBUCION_CI_DistribucionCI) {

        	try {

        		int length = 0;
		
						this.ESMID = readInteger(dis);
					
					this.SIGLA = readString(dis);
					
						this.FUERZA_ID = readInteger(dis);
					
					this.SIGLACI = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.VALOR = null;
           				} else {
           			    	this.VALOR = dis.readDouble();
           				}
					
			        this.TANEXOS_ID = dis.readDouble();
					
						this.CECO_ID = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.ESPECIALIDADES_ID = null;
           				} else {
           			    	this.ESPECIALIDADES_ID = dis.readDouble();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_CEC_DISTRIBUCION_CI_DistribucionCI) {

        	try {

        		int length = 0;
		
						this.ESMID = readInteger(dis);
					
					this.SIGLA = readString(dis);
					
						this.FUERZA_ID = readInteger(dis);
					
					this.SIGLACI = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.VALOR = null;
           				} else {
           			    	this.VALOR = dis.readDouble();
           				}
					
			        this.TANEXOS_ID = dis.readDouble();
					
						this.CECO_ID = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.ESPECIALIDADES_ID = null;
           				} else {
           			    	this.ESPECIALIDADES_ID = dis.readDouble();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.ESMID,dos);
					
					// String
				
						writeString(this.SIGLA,dos);
					
					// Integer
				
						writeInteger(this.FUERZA_ID,dos);
					
					// String
				
						writeString(this.SIGLACI,dos);
					
					// Double
				
						if(this.VALOR == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.VALOR);
		            	}
					
					// double
				
		            	dos.writeDouble(this.TANEXOS_ID);
					
					// Integer
				
						writeInteger(this.CECO_ID,dos);
					
					// Double
				
						if(this.ESPECIALIDADES_ID == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.ESPECIALIDADES_ID);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.ESMID,dos);
					
					// String
				
						writeString(this.SIGLA,dos);
					
					// Integer
				
						writeInteger(this.FUERZA_ID,dos);
					
					// String
				
						writeString(this.SIGLACI,dos);
					
					// Double
				
						if(this.VALOR == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.VALOR);
		            	}
					
					// double
				
		            	dos.writeDouble(this.TANEXOS_ID);
					
					// Integer
				
						writeInteger(this.CECO_ID,dos);
					
					// Double
				
						if(this.ESPECIALIDADES_ID == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.ESPECIALIDADES_ID);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ESMID="+String.valueOf(ESMID));
		sb.append(",SIGLA="+SIGLA);
		sb.append(",FUERZA_ID="+String.valueOf(FUERZA_ID));
		sb.append(",SIGLACI="+SIGLACI);
		sb.append(",VALOR="+String.valueOf(VALOR));
		sb.append(",TANEXOS_ID="+String.valueOf(TANEXOS_ID));
		sb.append(",CECO_ID="+String.valueOf(CECO_ID));
		sb.append(",ESPECIALIDADES_ID="+String.valueOf(ESPECIALIDADES_ID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(CI_DEP_CECOStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class CI_DEPStruct implements routines.system.IPersistableRow<CI_DEPStruct> {
    final static byte[] commonByteArrayLock_CEC_DISTRIBUCION_CI_DistribucionCI = new byte[0];
    static byte[] commonByteArray_CEC_DISTRIBUCION_CI_DistribucionCI = new byte[0];

	
			    public Integer ESMID;

				public Integer getESMID () {
					return this.ESMID;
				}

				public Boolean ESMIDIsNullable(){
				    return true;
				}
				public Boolean ESMIDIsKey(){
				    return false;
				}
				public Integer ESMIDLength(){
				    return null;
				}
				public Integer ESMIDPrecision(){
				    return null;
				}
				public String ESMIDDefault(){
				
					return "";
				
				}
				public String ESMIDComment(){
				
				    return "";
				
				}
				public String ESMIDPattern(){
				
					return "";
				
				}
				public String ESMIDOriginalDbColumnName(){
				
					return "ESMID";
				
				}

				
			    public String SIGLA;

				public String getSIGLA () {
					return this.SIGLA;
				}

				public Boolean SIGLAIsNullable(){
				    return true;
				}
				public Boolean SIGLAIsKey(){
				    return false;
				}
				public Integer SIGLALength(){
				    return null;
				}
				public Integer SIGLAPrecision(){
				    return null;
				}
				public String SIGLADefault(){
				
					return null;
				
				}
				public String SIGLAComment(){
				
				    return "";
				
				}
				public String SIGLAPattern(){
				
					return "";
				
				}
				public String SIGLAOriginalDbColumnName(){
				
					return "SIGLA";
				
				}

				
			    public Integer FUERZA_ID;

				public Integer getFUERZA_ID () {
					return this.FUERZA_ID;
				}

				public Boolean FUERZA_IDIsNullable(){
				    return true;
				}
				public Boolean FUERZA_IDIsKey(){
				    return false;
				}
				public Integer FUERZA_IDLength(){
				    return null;
				}
				public Integer FUERZA_IDPrecision(){
				    return null;
				}
				public String FUERZA_IDDefault(){
				
					return "";
				
				}
				public String FUERZA_IDComment(){
				
				    return "";
				
				}
				public String FUERZA_IDPattern(){
				
					return "";
				
				}
				public String FUERZA_IDOriginalDbColumnName(){
				
					return "FUERZA_ID";
				
				}

				
			    public String SIGLACI;

				public String getSIGLACI () {
					return this.SIGLACI;
				}

				public Boolean SIGLACIIsNullable(){
				    return false;
				}
				public Boolean SIGLACIIsKey(){
				    return false;
				}
				public Integer SIGLACILength(){
				    return null;
				}
				public Integer SIGLACIPrecision(){
				    return null;
				}
				public String SIGLACIDefault(){
				
					return null;
				
				}
				public String SIGLACIComment(){
				
				    return "";
				
				}
				public String SIGLACIPattern(){
				
					return "";
				
				}
				public String SIGLACIOriginalDbColumnName(){
				
					return "SIGLACI";
				
				}

				
			    public Double VALOR;

				public Double getVALOR () {
					return this.VALOR;
				}

				public Boolean VALORIsNullable(){
				    return true;
				}
				public Boolean VALORIsKey(){
				    return false;
				}
				public Integer VALORLength(){
				    return null;
				}
				public Integer VALORPrecision(){
				    return null;
				}
				public String VALORDefault(){
				
					return "";
				
				}
				public String VALORComment(){
				
				    return "";
				
				}
				public String VALORPattern(){
				
					return "";
				
				}
				public String VALOROriginalDbColumnName(){
				
					return "VALOR";
				
				}

				
			    public double TANEXOS_ID;

				public double getTANEXOS_ID () {
					return this.TANEXOS_ID;
				}

				public Boolean TANEXOS_IDIsNullable(){
				    return false;
				}
				public Boolean TANEXOS_IDIsKey(){
				    return false;
				}
				public Integer TANEXOS_IDLength(){
				    return null;
				}
				public Integer TANEXOS_IDPrecision(){
				    return null;
				}
				public String TANEXOS_IDDefault(){
				
					return "";
				
				}
				public String TANEXOS_IDComment(){
				
				    return "";
				
				}
				public String TANEXOS_IDPattern(){
				
					return "";
				
				}
				public String TANEXOS_IDOriginalDbColumnName(){
				
					return "TANEXOS_ID";
				
				}

				
			    public Integer CECO_ID;

				public Integer getCECO_ID () {
					return this.CECO_ID;
				}

				public Boolean CECO_IDIsNullable(){
				    return true;
				}
				public Boolean CECO_IDIsKey(){
				    return false;
				}
				public Integer CECO_IDLength(){
				    return null;
				}
				public Integer CECO_IDPrecision(){
				    return null;
				}
				public String CECO_IDDefault(){
				
					return "";
				
				}
				public String CECO_IDComment(){
				
				    return "";
				
				}
				public String CECO_IDPattern(){
				
					return "";
				
				}
				public String CECO_IDOriginalDbColumnName(){
				
					return "CECO_ID";
				
				}

				
			    public Double ESPECIALIDADES_ID;

				public Double getESPECIALIDADES_ID () {
					return this.ESPECIALIDADES_ID;
				}

				public Boolean ESPECIALIDADES_IDIsNullable(){
				    return true;
				}
				public Boolean ESPECIALIDADES_IDIsKey(){
				    return false;
				}
				public Integer ESPECIALIDADES_IDLength(){
				    return null;
				}
				public Integer ESPECIALIDADES_IDPrecision(){
				    return null;
				}
				public String ESPECIALIDADES_IDDefault(){
				
					return "";
				
				}
				public String ESPECIALIDADES_IDComment(){
				
				    return "";
				
				}
				public String ESPECIALIDADES_IDPattern(){
				
					return "";
				
				}
				public String ESPECIALIDADES_IDOriginalDbColumnName(){
				
					return "ESPECIALIDADES_ID";
				
				}

				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_CEC_DISTRIBUCION_CI_DistribucionCI.length) {
				if(length < 1024 && commonByteArray_CEC_DISTRIBUCION_CI_DistribucionCI.length == 0) {
   					commonByteArray_CEC_DISTRIBUCION_CI_DistribucionCI = new byte[1024];
				} else {
   					commonByteArray_CEC_DISTRIBUCION_CI_DistribucionCI = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_CEC_DISTRIBUCION_CI_DistribucionCI, 0, length);
			strReturn = new String(commonByteArray_CEC_DISTRIBUCION_CI_DistribucionCI, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_CEC_DISTRIBUCION_CI_DistribucionCI.length) {
				if(length < 1024 && commonByteArray_CEC_DISTRIBUCION_CI_DistribucionCI.length == 0) {
   					commonByteArray_CEC_DISTRIBUCION_CI_DistribucionCI = new byte[1024];
				} else {
   					commonByteArray_CEC_DISTRIBUCION_CI_DistribucionCI = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_CEC_DISTRIBUCION_CI_DistribucionCI, 0, length);
			strReturn = new String(commonByteArray_CEC_DISTRIBUCION_CI_DistribucionCI, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_CEC_DISTRIBUCION_CI_DistribucionCI) {

        	try {

        		int length = 0;
		
						this.ESMID = readInteger(dis);
					
					this.SIGLA = readString(dis);
					
						this.FUERZA_ID = readInteger(dis);
					
					this.SIGLACI = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.VALOR = null;
           				} else {
           			    	this.VALOR = dis.readDouble();
           				}
					
			        this.TANEXOS_ID = dis.readDouble();
					
						this.CECO_ID = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.ESPECIALIDADES_ID = null;
           				} else {
           			    	this.ESPECIALIDADES_ID = dis.readDouble();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_CEC_DISTRIBUCION_CI_DistribucionCI) {

        	try {

        		int length = 0;
		
						this.ESMID = readInteger(dis);
					
					this.SIGLA = readString(dis);
					
						this.FUERZA_ID = readInteger(dis);
					
					this.SIGLACI = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.VALOR = null;
           				} else {
           			    	this.VALOR = dis.readDouble();
           				}
					
			        this.TANEXOS_ID = dis.readDouble();
					
						this.CECO_ID = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.ESPECIALIDADES_ID = null;
           				} else {
           			    	this.ESPECIALIDADES_ID = dis.readDouble();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.ESMID,dos);
					
					// String
				
						writeString(this.SIGLA,dos);
					
					// Integer
				
						writeInteger(this.FUERZA_ID,dos);
					
					// String
				
						writeString(this.SIGLACI,dos);
					
					// Double
				
						if(this.VALOR == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.VALOR);
		            	}
					
					// double
				
		            	dos.writeDouble(this.TANEXOS_ID);
					
					// Integer
				
						writeInteger(this.CECO_ID,dos);
					
					// Double
				
						if(this.ESPECIALIDADES_ID == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.ESPECIALIDADES_ID);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.ESMID,dos);
					
					// String
				
						writeString(this.SIGLA,dos);
					
					// Integer
				
						writeInteger(this.FUERZA_ID,dos);
					
					// String
				
						writeString(this.SIGLACI,dos);
					
					// Double
				
						if(this.VALOR == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.VALOR);
		            	}
					
					// double
				
		            	dos.writeDouble(this.TANEXOS_ID);
					
					// Integer
				
						writeInteger(this.CECO_ID,dos);
					
					// Double
				
						if(this.ESPECIALIDADES_ID == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.ESPECIALIDADES_ID);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ESMID="+String.valueOf(ESMID));
		sb.append(",SIGLA="+SIGLA);
		sb.append(",FUERZA_ID="+String.valueOf(FUERZA_ID));
		sb.append(",SIGLACI="+SIGLACI);
		sb.append(",VALOR="+String.valueOf(VALOR));
		sb.append(",TANEXOS_ID="+String.valueOf(TANEXOS_ID));
		sb.append(",CECO_ID="+String.valueOf(CECO_ID));
		sb.append(",ESPECIALIDADES_ID="+String.valueOf(ESPECIALIDADES_ID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(CI_DEPStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row13Struct implements routines.system.IPersistableRow<row13Struct> {
    final static byte[] commonByteArrayLock_CEC_DISTRIBUCION_CI_DistribucionCI = new byte[0];
    static byte[] commonByteArray_CEC_DISTRIBUCION_CI_DistribucionCI = new byte[0];

	
			    public Integer ESMID;

				public Integer getESMID () {
					return this.ESMID;
				}

				public Boolean ESMIDIsNullable(){
				    return true;
				}
				public Boolean ESMIDIsKey(){
				    return false;
				}
				public Integer ESMIDLength(){
				    return null;
				}
				public Integer ESMIDPrecision(){
				    return null;
				}
				public String ESMIDDefault(){
				
					return "";
				
				}
				public String ESMIDComment(){
				
				    return "";
				
				}
				public String ESMIDPattern(){
				
					return "";
				
				}
				public String ESMIDOriginalDbColumnName(){
				
					return "ESMID";
				
				}

				
			    public String SIGLA;

				public String getSIGLA () {
					return this.SIGLA;
				}

				public Boolean SIGLAIsNullable(){
				    return true;
				}
				public Boolean SIGLAIsKey(){
				    return false;
				}
				public Integer SIGLALength(){
				    return null;
				}
				public Integer SIGLAPrecision(){
				    return null;
				}
				public String SIGLADefault(){
				
					return null;
				
				}
				public String SIGLAComment(){
				
				    return "";
				
				}
				public String SIGLAPattern(){
				
					return "";
				
				}
				public String SIGLAOriginalDbColumnName(){
				
					return "SIGLA";
				
				}

				
			    public Integer FUERZA_ID;

				public Integer getFUERZA_ID () {
					return this.FUERZA_ID;
				}

				public Boolean FUERZA_IDIsNullable(){
				    return true;
				}
				public Boolean FUERZA_IDIsKey(){
				    return false;
				}
				public Integer FUERZA_IDLength(){
				    return null;
				}
				public Integer FUERZA_IDPrecision(){
				    return null;
				}
				public String FUERZA_IDDefault(){
				
					return "";
				
				}
				public String FUERZA_IDComment(){
				
				    return "";
				
				}
				public String FUERZA_IDPattern(){
				
					return "";
				
				}
				public String FUERZA_IDOriginalDbColumnName(){
				
					return "FUERZA_ID";
				
				}

				
			    public String SIGLACI;

				public String getSIGLACI () {
					return this.SIGLACI;
				}

				public Boolean SIGLACIIsNullable(){
				    return false;
				}
				public Boolean SIGLACIIsKey(){
				    return false;
				}
				public Integer SIGLACILength(){
				    return null;
				}
				public Integer SIGLACIPrecision(){
				    return null;
				}
				public String SIGLACIDefault(){
				
					return null;
				
				}
				public String SIGLACIComment(){
				
				    return "";
				
				}
				public String SIGLACIPattern(){
				
					return "";
				
				}
				public String SIGLACIOriginalDbColumnName(){
				
					return "SIGLACI";
				
				}

				
			    public Double VALOR;

				public Double getVALOR () {
					return this.VALOR;
				}

				public Boolean VALORIsNullable(){
				    return true;
				}
				public Boolean VALORIsKey(){
				    return false;
				}
				public Integer VALORLength(){
				    return null;
				}
				public Integer VALORPrecision(){
				    return null;
				}
				public String VALORDefault(){
				
					return "";
				
				}
				public String VALORComment(){
				
				    return "";
				
				}
				public String VALORPattern(){
				
					return "";
				
				}
				public String VALOROriginalDbColumnName(){
				
					return "VALOR";
				
				}

				
			    public double TANEXOS_ID;

				public double getTANEXOS_ID () {
					return this.TANEXOS_ID;
				}

				public Boolean TANEXOS_IDIsNullable(){
				    return false;
				}
				public Boolean TANEXOS_IDIsKey(){
				    return false;
				}
				public Integer TANEXOS_IDLength(){
				    return null;
				}
				public Integer TANEXOS_IDPrecision(){
				    return null;
				}
				public String TANEXOS_IDDefault(){
				
					return "";
				
				}
				public String TANEXOS_IDComment(){
				
				    return "";
				
				}
				public String TANEXOS_IDPattern(){
				
					return "";
				
				}
				public String TANEXOS_IDOriginalDbColumnName(){
				
					return "TANEXOS_ID";
				
				}

				
			    public Integer CECO_ID;

				public Integer getCECO_ID () {
					return this.CECO_ID;
				}

				public Boolean CECO_IDIsNullable(){
				    return true;
				}
				public Boolean CECO_IDIsKey(){
				    return false;
				}
				public Integer CECO_IDLength(){
				    return null;
				}
				public Integer CECO_IDPrecision(){
				    return null;
				}
				public String CECO_IDDefault(){
				
					return "";
				
				}
				public String CECO_IDComment(){
				
				    return "";
				
				}
				public String CECO_IDPattern(){
				
					return "";
				
				}
				public String CECO_IDOriginalDbColumnName(){
				
					return "CECO_ID";
				
				}

				
			    public Double ESPECIALIDADES_ID;

				public Double getESPECIALIDADES_ID () {
					return this.ESPECIALIDADES_ID;
				}

				public Boolean ESPECIALIDADES_IDIsNullable(){
				    return true;
				}
				public Boolean ESPECIALIDADES_IDIsKey(){
				    return false;
				}
				public Integer ESPECIALIDADES_IDLength(){
				    return null;
				}
				public Integer ESPECIALIDADES_IDPrecision(){
				    return null;
				}
				public String ESPECIALIDADES_IDDefault(){
				
					return "";
				
				}
				public String ESPECIALIDADES_IDComment(){
				
				    return "";
				
				}
				public String ESPECIALIDADES_IDPattern(){
				
					return "";
				
				}
				public String ESPECIALIDADES_IDOriginalDbColumnName(){
				
					return "ESPECIALIDADES_ID";
				
				}

				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_CEC_DISTRIBUCION_CI_DistribucionCI.length) {
				if(length < 1024 && commonByteArray_CEC_DISTRIBUCION_CI_DistribucionCI.length == 0) {
   					commonByteArray_CEC_DISTRIBUCION_CI_DistribucionCI = new byte[1024];
				} else {
   					commonByteArray_CEC_DISTRIBUCION_CI_DistribucionCI = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_CEC_DISTRIBUCION_CI_DistribucionCI, 0, length);
			strReturn = new String(commonByteArray_CEC_DISTRIBUCION_CI_DistribucionCI, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_CEC_DISTRIBUCION_CI_DistribucionCI.length) {
				if(length < 1024 && commonByteArray_CEC_DISTRIBUCION_CI_DistribucionCI.length == 0) {
   					commonByteArray_CEC_DISTRIBUCION_CI_DistribucionCI = new byte[1024];
				} else {
   					commonByteArray_CEC_DISTRIBUCION_CI_DistribucionCI = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_CEC_DISTRIBUCION_CI_DistribucionCI, 0, length);
			strReturn = new String(commonByteArray_CEC_DISTRIBUCION_CI_DistribucionCI, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_CEC_DISTRIBUCION_CI_DistribucionCI) {

        	try {

        		int length = 0;
		
						this.ESMID = readInteger(dis);
					
					this.SIGLA = readString(dis);
					
						this.FUERZA_ID = readInteger(dis);
					
					this.SIGLACI = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.VALOR = null;
           				} else {
           			    	this.VALOR = dis.readDouble();
           				}
					
			        this.TANEXOS_ID = dis.readDouble();
					
						this.CECO_ID = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.ESPECIALIDADES_ID = null;
           				} else {
           			    	this.ESPECIALIDADES_ID = dis.readDouble();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_CEC_DISTRIBUCION_CI_DistribucionCI) {

        	try {

        		int length = 0;
		
						this.ESMID = readInteger(dis);
					
					this.SIGLA = readString(dis);
					
						this.FUERZA_ID = readInteger(dis);
					
					this.SIGLACI = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.VALOR = null;
           				} else {
           			    	this.VALOR = dis.readDouble();
           				}
					
			        this.TANEXOS_ID = dis.readDouble();
					
						this.CECO_ID = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.ESPECIALIDADES_ID = null;
           				} else {
           			    	this.ESPECIALIDADES_ID = dis.readDouble();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.ESMID,dos);
					
					// String
				
						writeString(this.SIGLA,dos);
					
					// Integer
				
						writeInteger(this.FUERZA_ID,dos);
					
					// String
				
						writeString(this.SIGLACI,dos);
					
					// Double
				
						if(this.VALOR == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.VALOR);
		            	}
					
					// double
				
		            	dos.writeDouble(this.TANEXOS_ID);
					
					// Integer
				
						writeInteger(this.CECO_ID,dos);
					
					// Double
				
						if(this.ESPECIALIDADES_ID == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.ESPECIALIDADES_ID);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.ESMID,dos);
					
					// String
				
						writeString(this.SIGLA,dos);
					
					// Integer
				
						writeInteger(this.FUERZA_ID,dos);
					
					// String
				
						writeString(this.SIGLACI,dos);
					
					// Double
				
						if(this.VALOR == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.VALOR);
		            	}
					
					// double
				
		            	dos.writeDouble(this.TANEXOS_ID);
					
					// Integer
				
						writeInteger(this.CECO_ID,dos);
					
					// Double
				
						if(this.ESPECIALIDADES_ID == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.ESPECIALIDADES_ID);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ESMID="+String.valueOf(ESMID));
		sb.append(",SIGLA="+SIGLA);
		sb.append(",FUERZA_ID="+String.valueOf(FUERZA_ID));
		sb.append(",SIGLACI="+SIGLACI);
		sb.append(",VALOR="+String.valueOf(VALOR));
		sb.append(",TANEXOS_ID="+String.valueOf(TANEXOS_ID));
		sb.append(",CECO_ID="+String.valueOf(CECO_ID));
		sb.append(",ESPECIALIDADES_ID="+String.valueOf(ESPECIALIDADES_ID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row13Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row4Struct implements routines.system.IPersistableRow<row4Struct> {
    final static byte[] commonByteArrayLock_CEC_DISTRIBUCION_CI_DistribucionCI = new byte[0];
    static byte[] commonByteArray_CEC_DISTRIBUCION_CI_DistribucionCI = new byte[0];

	
			    public Integer ESMID;

				public Integer getESMID () {
					return this.ESMID;
				}

				public Boolean ESMIDIsNullable(){
				    return true;
				}
				public Boolean ESMIDIsKey(){
				    return false;
				}
				public Integer ESMIDLength(){
				    return null;
				}
				public Integer ESMIDPrecision(){
				    return null;
				}
				public String ESMIDDefault(){
				
					return "";
				
				}
				public String ESMIDComment(){
				
				    return "";
				
				}
				public String ESMIDPattern(){
				
					return "";
				
				}
				public String ESMIDOriginalDbColumnName(){
				
					return "ESMID";
				
				}

				
			    public String SIGLA;

				public String getSIGLA () {
					return this.SIGLA;
				}

				public Boolean SIGLAIsNullable(){
				    return true;
				}
				public Boolean SIGLAIsKey(){
				    return false;
				}
				public Integer SIGLALength(){
				    return null;
				}
				public Integer SIGLAPrecision(){
				    return null;
				}
				public String SIGLADefault(){
				
					return null;
				
				}
				public String SIGLAComment(){
				
				    return "";
				
				}
				public String SIGLAPattern(){
				
					return "";
				
				}
				public String SIGLAOriginalDbColumnName(){
				
					return "SIGLA";
				
				}

				
			    public Integer FUERZA_ID;

				public Integer getFUERZA_ID () {
					return this.FUERZA_ID;
				}

				public Boolean FUERZA_IDIsNullable(){
				    return true;
				}
				public Boolean FUERZA_IDIsKey(){
				    return false;
				}
				public Integer FUERZA_IDLength(){
				    return null;
				}
				public Integer FUERZA_IDPrecision(){
				    return null;
				}
				public String FUERZA_IDDefault(){
				
					return "";
				
				}
				public String FUERZA_IDComment(){
				
				    return "";
				
				}
				public String FUERZA_IDPattern(){
				
					return "";
				
				}
				public String FUERZA_IDOriginalDbColumnName(){
				
					return "FUERZA_ID";
				
				}

				
			    public String SIGLACI;

				public String getSIGLACI () {
					return this.SIGLACI;
				}

				public Boolean SIGLACIIsNullable(){
				    return false;
				}
				public Boolean SIGLACIIsKey(){
				    return false;
				}
				public Integer SIGLACILength(){
				    return null;
				}
				public Integer SIGLACIPrecision(){
				    return null;
				}
				public String SIGLACIDefault(){
				
					return null;
				
				}
				public String SIGLACIComment(){
				
				    return "";
				
				}
				public String SIGLACIPattern(){
				
					return "";
				
				}
				public String SIGLACIOriginalDbColumnName(){
				
					return "SIGLACI";
				
				}

				
			    public Double VALOR;

				public Double getVALOR () {
					return this.VALOR;
				}

				public Boolean VALORIsNullable(){
				    return true;
				}
				public Boolean VALORIsKey(){
				    return false;
				}
				public Integer VALORLength(){
				    return null;
				}
				public Integer VALORPrecision(){
				    return null;
				}
				public String VALORDefault(){
				
					return "";
				
				}
				public String VALORComment(){
				
				    return "";
				
				}
				public String VALORPattern(){
				
					return "";
				
				}
				public String VALOROriginalDbColumnName(){
				
					return "VALOR";
				
				}

				
			    public double TANEXOS_ID;

				public double getTANEXOS_ID () {
					return this.TANEXOS_ID;
				}

				public Boolean TANEXOS_IDIsNullable(){
				    return false;
				}
				public Boolean TANEXOS_IDIsKey(){
				    return false;
				}
				public Integer TANEXOS_IDLength(){
				    return null;
				}
				public Integer TANEXOS_IDPrecision(){
				    return null;
				}
				public String TANEXOS_IDDefault(){
				
					return "";
				
				}
				public String TANEXOS_IDComment(){
				
				    return "";
				
				}
				public String TANEXOS_IDPattern(){
				
					return "";
				
				}
				public String TANEXOS_IDOriginalDbColumnName(){
				
					return "TANEXOS_ID";
				
				}

				
			    public Integer CECO_ID;

				public Integer getCECO_ID () {
					return this.CECO_ID;
				}

				public Boolean CECO_IDIsNullable(){
				    return true;
				}
				public Boolean CECO_IDIsKey(){
				    return false;
				}
				public Integer CECO_IDLength(){
				    return null;
				}
				public Integer CECO_IDPrecision(){
				    return null;
				}
				public String CECO_IDDefault(){
				
					return "";
				
				}
				public String CECO_IDComment(){
				
				    return "";
				
				}
				public String CECO_IDPattern(){
				
					return "";
				
				}
				public String CECO_IDOriginalDbColumnName(){
				
					return "CECO_ID";
				
				}

				
			    public Double ESPECIALIDADES_ID;

				public Double getESPECIALIDADES_ID () {
					return this.ESPECIALIDADES_ID;
				}

				public Boolean ESPECIALIDADES_IDIsNullable(){
				    return true;
				}
				public Boolean ESPECIALIDADES_IDIsKey(){
				    return false;
				}
				public Integer ESPECIALIDADES_IDLength(){
				    return null;
				}
				public Integer ESPECIALIDADES_IDPrecision(){
				    return null;
				}
				public String ESPECIALIDADES_IDDefault(){
				
					return "";
				
				}
				public String ESPECIALIDADES_IDComment(){
				
				    return "";
				
				}
				public String ESPECIALIDADES_IDPattern(){
				
					return "";
				
				}
				public String ESPECIALIDADES_IDOriginalDbColumnName(){
				
					return "ESPECIALIDADES_ID";
				
				}

				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_CEC_DISTRIBUCION_CI_DistribucionCI.length) {
				if(length < 1024 && commonByteArray_CEC_DISTRIBUCION_CI_DistribucionCI.length == 0) {
   					commonByteArray_CEC_DISTRIBUCION_CI_DistribucionCI = new byte[1024];
				} else {
   					commonByteArray_CEC_DISTRIBUCION_CI_DistribucionCI = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_CEC_DISTRIBUCION_CI_DistribucionCI, 0, length);
			strReturn = new String(commonByteArray_CEC_DISTRIBUCION_CI_DistribucionCI, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_CEC_DISTRIBUCION_CI_DistribucionCI.length) {
				if(length < 1024 && commonByteArray_CEC_DISTRIBUCION_CI_DistribucionCI.length == 0) {
   					commonByteArray_CEC_DISTRIBUCION_CI_DistribucionCI = new byte[1024];
				} else {
   					commonByteArray_CEC_DISTRIBUCION_CI_DistribucionCI = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_CEC_DISTRIBUCION_CI_DistribucionCI, 0, length);
			strReturn = new String(commonByteArray_CEC_DISTRIBUCION_CI_DistribucionCI, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_CEC_DISTRIBUCION_CI_DistribucionCI) {

        	try {

        		int length = 0;
		
						this.ESMID = readInteger(dis);
					
					this.SIGLA = readString(dis);
					
						this.FUERZA_ID = readInteger(dis);
					
					this.SIGLACI = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.VALOR = null;
           				} else {
           			    	this.VALOR = dis.readDouble();
           				}
					
			        this.TANEXOS_ID = dis.readDouble();
					
						this.CECO_ID = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.ESPECIALIDADES_ID = null;
           				} else {
           			    	this.ESPECIALIDADES_ID = dis.readDouble();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_CEC_DISTRIBUCION_CI_DistribucionCI) {

        	try {

        		int length = 0;
		
						this.ESMID = readInteger(dis);
					
					this.SIGLA = readString(dis);
					
						this.FUERZA_ID = readInteger(dis);
					
					this.SIGLACI = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.VALOR = null;
           				} else {
           			    	this.VALOR = dis.readDouble();
           				}
					
			        this.TANEXOS_ID = dis.readDouble();
					
						this.CECO_ID = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.ESPECIALIDADES_ID = null;
           				} else {
           			    	this.ESPECIALIDADES_ID = dis.readDouble();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.ESMID,dos);
					
					// String
				
						writeString(this.SIGLA,dos);
					
					// Integer
				
						writeInteger(this.FUERZA_ID,dos);
					
					// String
				
						writeString(this.SIGLACI,dos);
					
					// Double
				
						if(this.VALOR == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.VALOR);
		            	}
					
					// double
				
		            	dos.writeDouble(this.TANEXOS_ID);
					
					// Integer
				
						writeInteger(this.CECO_ID,dos);
					
					// Double
				
						if(this.ESPECIALIDADES_ID == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.ESPECIALIDADES_ID);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.ESMID,dos);
					
					// String
				
						writeString(this.SIGLA,dos);
					
					// Integer
				
						writeInteger(this.FUERZA_ID,dos);
					
					// String
				
						writeString(this.SIGLACI,dos);
					
					// Double
				
						if(this.VALOR == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.VALOR);
		            	}
					
					// double
				
		            	dos.writeDouble(this.TANEXOS_ID);
					
					// Integer
				
						writeInteger(this.CECO_ID,dos);
					
					// Double
				
						if(this.ESPECIALIDADES_ID == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.ESPECIALIDADES_ID);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ESMID="+String.valueOf(ESMID));
		sb.append(",SIGLA="+SIGLA);
		sb.append(",FUERZA_ID="+String.valueOf(FUERZA_ID));
		sb.append(",SIGLACI="+SIGLACI);
		sb.append(",VALOR="+String.valueOf(VALOR));
		sb.append(",TANEXOS_ID="+String.valueOf(TANEXOS_ID));
		sb.append(",CECO_ID="+String.valueOf(CECO_ID));
		sb.append(",ESPECIALIDADES_ID="+String.valueOf(ESPECIALIDADES_ID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row4Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_4Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_4_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row4Struct row4 = new row4Struct();
row13Struct row13 = new row13Struct();
CI_GGRL_CECOStruct CI_GGRL_CECO = new CI_GGRL_CECOStruct();
CI_GGRLStruct CI_GGRL = new CI_GGRLStruct();
CI_DEP_CECOStruct CI_DEP_CECO = new CI_DEP_CECOStruct();
CI_DEPStruct CI_DEP = new CI_DEPStruct();






	
	/**
	 * [tHashOutput_9 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashOutput_9", false);
		start_Hash.put("tHashOutput_9", System.currentTimeMillis());
		
	
	currentComponent="tHashOutput_9";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"CI_GGRL_CECO");
					}
				
		int tos_count_tHashOutput_9 = 0;
		



org.talend.designer.components.hashfile.common.MapHashFile mf_tHashOutput_9=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();    
		org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<CI_GGRL_CECOStruct> tHashFile_tHashOutput_9 = null;
		String hashKey_tHashOutput_9 = "tHashFile_DistribucionCI_" + pid + "_tHashOutput_9";
			synchronized(org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.get(hashKey_tHashOutput_9)){
			    if(mf_tHashOutput_9.getResourceMap().get(hashKey_tHashOutput_9) == null){
	      		    mf_tHashOutput_9.getResourceMap().put(hashKey_tHashOutput_9, new org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<CI_GGRL_CECOStruct>(org.talend.designer.components.hashfile.common.MATCHING_MODE.KEEP_ALL));
	      		    tHashFile_tHashOutput_9 = mf_tHashOutput_9.getResourceMap().get(hashKey_tHashOutput_9);
			    }else{
			    	tHashFile_tHashOutput_9 = mf_tHashOutput_9.getResourceMap().get(hashKey_tHashOutput_9);
			    }
			}
        int nb_line_tHashOutput_9 = 0;

 



/**
 * [tHashOutput_9 begin ] stop
 */




	
	/**
	 * [tHashOutput_10 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashOutput_10", false);
		start_Hash.put("tHashOutput_10", System.currentTimeMillis());
		
	
	currentComponent="tHashOutput_10";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"CI_GGRL");
					}
				
		int tos_count_tHashOutput_10 = 0;
		



org.talend.designer.components.hashfile.common.MapHashFile mf_tHashOutput_10=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();    
		org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<CI_GGRLStruct> tHashFile_tHashOutput_10 = null;
		String hashKey_tHashOutput_10 = "tHashFile_DistribucionCI_" + pid + "_tHashOutput_10";
			synchronized(org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.get(hashKey_tHashOutput_10)){
			    if(mf_tHashOutput_10.getResourceMap().get(hashKey_tHashOutput_10) == null){
	      		    mf_tHashOutput_10.getResourceMap().put(hashKey_tHashOutput_10, new org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<CI_GGRLStruct>(org.talend.designer.components.hashfile.common.MATCHING_MODE.KEEP_ALL));
	      		    tHashFile_tHashOutput_10 = mf_tHashOutput_10.getResourceMap().get(hashKey_tHashOutput_10);
			    }else{
			    	tHashFile_tHashOutput_10 = mf_tHashOutput_10.getResourceMap().get(hashKey_tHashOutput_10);
			    }
			}
        int nb_line_tHashOutput_10 = 0;

 



/**
 * [tHashOutput_10 begin ] stop
 */




	
	/**
	 * [tHashOutput_11 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashOutput_11", false);
		start_Hash.put("tHashOutput_11", System.currentTimeMillis());
		
	
	currentComponent="tHashOutput_11";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"CI_DEP_CECO");
					}
				
		int tos_count_tHashOutput_11 = 0;
		



org.talend.designer.components.hashfile.common.MapHashFile mf_tHashOutput_11=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();    
		org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<CI_DEP_CECOStruct> tHashFile_tHashOutput_11 = null;
		String hashKey_tHashOutput_11 = "tHashFile_DistribucionCI_" + pid + "_tHashOutput_11";
			synchronized(org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.get(hashKey_tHashOutput_11)){
			    if(mf_tHashOutput_11.getResourceMap().get(hashKey_tHashOutput_11) == null){
	      		    mf_tHashOutput_11.getResourceMap().put(hashKey_tHashOutput_11, new org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<CI_DEP_CECOStruct>(org.talend.designer.components.hashfile.common.MATCHING_MODE.KEEP_ALL));
	      		    tHashFile_tHashOutput_11 = mf_tHashOutput_11.getResourceMap().get(hashKey_tHashOutput_11);
			    }else{
			    	tHashFile_tHashOutput_11 = mf_tHashOutput_11.getResourceMap().get(hashKey_tHashOutput_11);
			    }
			}
        int nb_line_tHashOutput_11 = 0;

 



/**
 * [tHashOutput_11 begin ] stop
 */




	
	/**
	 * [tHashOutput_12 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashOutput_12", false);
		start_Hash.put("tHashOutput_12", System.currentTimeMillis());
		
	
	currentComponent="tHashOutput_12";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"CI_DEP");
					}
				
		int tos_count_tHashOutput_12 = 0;
		



org.talend.designer.components.hashfile.common.MapHashFile mf_tHashOutput_12=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();    
		org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<CI_DEPStruct> tHashFile_tHashOutput_12 = null;
		String hashKey_tHashOutput_12 = "tHashFile_DistribucionCI_" + pid + "_tHashOutput_12";
			synchronized(org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.get(hashKey_tHashOutput_12)){
			    if(mf_tHashOutput_12.getResourceMap().get(hashKey_tHashOutput_12) == null){
	      		    mf_tHashOutput_12.getResourceMap().put(hashKey_tHashOutput_12, new org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<CI_DEPStruct>(org.talend.designer.components.hashfile.common.MATCHING_MODE.KEEP_ALL));
	      		    tHashFile_tHashOutput_12 = mf_tHashOutput_12.getResourceMap().get(hashKey_tHashOutput_12);
			    }else{
			    	tHashFile_tHashOutput_12 = mf_tHashOutput_12.getResourceMap().get(hashKey_tHashOutput_12);
			    }
			}
        int nb_line_tHashOutput_12 = 0;

 



/**
 * [tHashOutput_12 begin ] stop
 */



	
	/**
	 * [tMap_11 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_11", false);
		start_Hash.put("tMap_11", System.currentTimeMillis());
		
	
	currentComponent="tMap_11";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row13");
					}
				
		int tos_count_tMap_11 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_11__Struct  {
}
Var__tMap_11__Struct Var__tMap_11 = new Var__tMap_11__Struct();
// ###############################

// ###############################
// # Outputs initialization
CI_GGRL_CECOStruct CI_GGRL_CECO_tmp = new CI_GGRL_CECOStruct();
CI_GGRLStruct CI_GGRL_tmp = new CI_GGRLStruct();
CI_DEP_CECOStruct CI_DEP_CECO_tmp = new CI_DEP_CECOStruct();
CI_DEPStruct CI_DEP_tmp = new CI_DEPStruct();
// ###############################

        
        



        









 



/**
 * [tMap_11 begin ] stop
 */



	
	/**
	 * [tJavaRow_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaRow_5", false);
		start_Hash.put("tJavaRow_5", System.currentTimeMillis());
		
	
	currentComponent="tJavaRow_5";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row4");
					}
				
		int tos_count_tJavaRow_5 = 0;
		

int nb_line_tJavaRow_5 = 0;

 



/**
 * [tJavaRow_5 begin ] stop
 */



	
	/**
	 * [tOracleInput_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_4", false);
		start_Hash.put("tOracleInput_4", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_4";
	
	
		int tos_count_tOracleInput_4 = 0;
		
	


	
		    int nb_line_tOracleInput_4 = 0;
		    java.sql.Connection conn_tOracleInput_4 = null;
				conn_tOracleInput_4 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");
				
                boolean isTimeZoneNull_tOracleInput_4 = false;
				boolean isConnectionWrapped_tOracleInput_4 = !(conn_tOracleInput_4 instanceof oracle.jdbc.OracleConnection) && conn_tOracleInput_4.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tOracleInput_4 = null;
                if (isConnectionWrapped_tOracleInput_4) {
					unwrappedOraConn_tOracleInput_4 = conn_tOracleInput_4.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tOracleInput_4 != null) {
                        isTimeZoneNull_tOracleInput_4 = (unwrappedOraConn_tOracleInput_4.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tOracleInput_4 = (((oracle.jdbc.OracleConnection)conn_tOracleInput_4).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tOracleInput_4) {
					java.sql.Statement stmtGetTZ_tOracleInput_4 = conn_tOracleInput_4.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_4 = stmtGetTZ_tOracleInput_4.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_4 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tOracleInput_4.next()) {
						sessionTimezone_tOracleInput_4 = rsGetTZ_tOracleInput_4.getString(1);
					}
					if (isConnectionWrapped_tOracleInput_4 && unwrappedOraConn_tOracleInput_4 != null) {
                        unwrappedOraConn_tOracleInput_4.setSessionTimeZone(sessionTimezone_tOracleInput_4);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_4).setSessionTimeZone(sessionTimezone_tOracleInput_4);
                    }
				}
			
		    
			java.sql.Statement stmt_tOracleInput_4 = conn_tOracleInput_4.createStatement();

		    String dbquery_tOracleInput_4 = "select ca.uorg_id as esmId,\n       gt.nombre as sigla,\n       gu.Fuerza_Id,\n       ce.sigla as siglaci,\n       sum("
+"cd.valor) as valor,\n       ce.id as tanexos_id,\n       cd.ceco_id,\n       ge.id as especialidades_id\n  from cec_anex"
+"os ca\n inner join cec_dcarga cd\n    on cd.anexos_id = ca.id\n inner join cec_tgastos ct\n    on cd.tgastos_id = ct.id"
+"\n inner join afi_estextderechos ae\n    on ca.estados_id = ae.id\n inner join cec_tanexos ce\n    on ca.tanexos_id = ce."
+"id\n inner join gen_uorg gu\n    on ca.uorg_id = gu.id\n inner join gen_tuorg gt\n    on gu.tuorg_id = gt.id\n left join"
+" cec_ceco cc\n    on cd.ceco_id = cc.id\n left join gen_especialidades ge\n    on cc.especialidades_id = ge.id\n   and g"
+"e.estado = 'Activo'\n   and ge.estregistro_id = 1\n where  cd.periodo = to_date('"+context.TmpPeriodo+"','dd/MM/yyyy')\n  and ca.periodo = to_date('"+context.TmpPeriodo+"','dd/MM/yyyy')\n and ae.codigo = 6\n   and ce.sigla in ('DEP', 'GGRL')\n   and ct.sigla <> 'MATE'\n   and ce.estado = "
+"'Activo'\n   and ce.estregistro_id = 1\n   and ae.estregistro_id = 1\n   and ca.estregistro_id = 1\n   and ca.estado = '"
+"Activo'\n   and ct.estado = 'Activo'\n   and ct.estregistro_id = 1\n   and cd.estregistro_id = 1\n   and gt.nombre in ('"
+"ESM', 'SATELITE')\n group by ca.uorg_id, gt.nombre, gu.Fuerza_Id,  ce.sigla, ce.id, cd.ceco_id, ge.id "
;
		    

		    globalMap.put("tOracleInput_4_QUERY",dbquery_tOracleInput_4);

		    java.sql.ResultSet rs_tOracleInput_4 = null;

		    try {
		    	rs_tOracleInput_4 = stmt_tOracleInput_4.executeQuery(dbquery_tOracleInput_4);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_4 = rs_tOracleInput_4.getMetaData();
		    	int colQtyInRs_tOracleInput_4 = rsmd_tOracleInput_4.getColumnCount();

		    String tmpContent_tOracleInput_4 = null;
		    
		    
		    while (rs_tOracleInput_4.next()) {
		        nb_line_tOracleInput_4++;
		        
							if(colQtyInRs_tOracleInput_4 < 1) {
								row4.ESMID = null;
							} else {
		                          
					if(rs_tOracleInput_4.getObject(1) != null) {
						row4.ESMID = rs_tOracleInput_4.getInt(1);
					} else {
				
						row4.ESMID = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_4 < 2) {
								row4.SIGLA = null;
							} else {
	                         		
        	row4.SIGLA = routines.system.JDBCUtil.getString(rs_tOracleInput_4, 2, false);
		                    }
							if(colQtyInRs_tOracleInput_4 < 3) {
								row4.FUERZA_ID = null;
							} else {
		                          
					if(rs_tOracleInput_4.getObject(3) != null) {
						row4.FUERZA_ID = rs_tOracleInput_4.getInt(3);
					} else {
				
						row4.FUERZA_ID = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_4 < 4) {
								row4.SIGLACI = null;
							} else {
	                         		
        	row4.SIGLACI = routines.system.JDBCUtil.getString(rs_tOracleInput_4, 4, false);
		                    }
							if(colQtyInRs_tOracleInput_4 < 5) {
								row4.VALOR = null;
							} else {
	                         		
				row4.VALOR = routines.system.JDBCUtil.getDoubleObject(rs_tOracleInput_4, 5);
		                    }
							if(colQtyInRs_tOracleInput_4 < 6) {
								row4.TANEXOS_ID = 0;
							} else {
	                         		
				row4.TANEXOS_ID = routines.system.JDBCUtil.getDouble(rs_tOracleInput_4, 6);
		                    }
							if(colQtyInRs_tOracleInput_4 < 7) {
								row4.CECO_ID = null;
							} else {
		                          
					if(rs_tOracleInput_4.getObject(7) != null) {
						row4.CECO_ID = rs_tOracleInput_4.getInt(7);
					} else {
				
						row4.CECO_ID = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_4 < 8) {
								row4.ESPECIALIDADES_ID = null;
							} else {
	                         		
				row4.ESPECIALIDADES_ID = routines.system.JDBCUtil.getDoubleObject(rs_tOracleInput_4, 8);
		                    }
					




 



/**
 * [tOracleInput_4 begin ] stop
 */
	
	/**
	 * [tOracleInput_4 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_4";
	
	

 


	tos_count_tOracleInput_4++;

/**
 * [tOracleInput_4 main ] stop
 */
	
	/**
	 * [tOracleInput_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_4";
	
	

 



/**
 * [tOracleInput_4 process_data_begin ] stop
 */

	
	/**
	 * [tJavaRow_5 main ] start
	 */

	

	
	
	currentComponent="tJavaRow_5";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row4"
						
						);
					}
					

    //Code generated according to input schema and output schema
row13.ESMID = row4.ESMID;
row13.SIGLA = row4.SIGLA;
row13.FUERZA_ID = row4.FUERZA_ID;
row13.SIGLACI = row4.SIGLACI;
row13.VALOR = row4.VALOR;
row13.TANEXOS_ID = row4.TANEXOS_ID;
row13.CECO_ID = row4.CECO_ID;
row13.ESPECIALIDADES_ID = row4.ESPECIALIDADES_ID;

if (row4.SIGLACI.equals("DEP") && row4.ESPECIALIDADES_ID == null)
{
	context.ConsolidadoDEP_ESM += row4.VALOR;
	System.out.println("Consolidado DEP (ESM): "+ context.ConsolidadoDEP_ESM );
}

if (row4.SIGLACI.equals("GGRL") && row4.ESPECIALIDADES_ID == null)
{
	context.ConsolidadoGGRL_ESM += row4.VALOR;
    System.out.println("Consolidado GGRL (ESM): "+ context.ConsolidadoGGRL_ESM);
}

    nb_line_tJavaRow_5++;   

 


	tos_count_tJavaRow_5++;

/**
 * [tJavaRow_5 main ] stop
 */
	
	/**
	 * [tJavaRow_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJavaRow_5";
	
	

 



/**
 * [tJavaRow_5 process_data_begin ] stop
 */

	
	/**
	 * [tMap_11 main ] start
	 */

	

	
	
	currentComponent="tMap_11";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row13"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_11 = false;
		
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_11 = false;
		boolean mainRowRejected_tMap_11 = false;
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_11__Struct Var = Var__tMap_11;// ###############################
        // ###############################
        // # Output tables

CI_GGRL_CECO = null;
CI_GGRL = null;
CI_DEP_CECO = null;
CI_DEP = null;


// # Output table : 'CI_GGRL_CECO'
// # Filter conditions 
if( 

row13.CECO_ID != null && row13.SIGLACI.equals("GGRL")

 ) {
CI_GGRL_CECO_tmp.ESMID = row13.ESMID ;
CI_GGRL_CECO_tmp.SIGLA = row13.SIGLA ;
CI_GGRL_CECO_tmp.FUERZA_ID = row13.FUERZA_ID ;
CI_GGRL_CECO_tmp.SIGLACI = row13.SIGLACI ;
CI_GGRL_CECO_tmp.VALOR = row13.VALOR ;
CI_GGRL_CECO_tmp.TANEXOS_ID = row13.TANEXOS_ID ;
CI_GGRL_CECO_tmp.CECO_ID = row13.CECO_ID ;
CI_GGRL_CECO_tmp.ESPECIALIDADES_ID = row13.ESPECIALIDADES_ID ;
CI_GGRL_CECO = CI_GGRL_CECO_tmp;
} // closing filter/reject

// # Output table : 'CI_GGRL'
// # Filter conditions 
if( 

row13.CECO_ID == null && row13.SIGLACI.equals("GGRL") 

 ) {
CI_GGRL_tmp.ESMID = row13.ESMID ;
CI_GGRL_tmp.SIGLA = row13.SIGLA ;
CI_GGRL_tmp.FUERZA_ID = row13.FUERZA_ID ;
CI_GGRL_tmp.SIGLACI = row13.SIGLACI ;
CI_GGRL_tmp.VALOR = row13.VALOR ;
CI_GGRL_tmp.TANEXOS_ID = row13.TANEXOS_ID ;
CI_GGRL_tmp.CECO_ID = row13.CECO_ID ;
CI_GGRL_tmp.ESPECIALIDADES_ID = row13.ESPECIALIDADES_ID ;
CI_GGRL = CI_GGRL_tmp;
} // closing filter/reject

// # Output table : 'CI_DEP_CECO'
// # Filter conditions 
if( 

row13.CECO_ID != null && row13.SIGLACI.equals("DEP") 

 ) {
CI_DEP_CECO_tmp.ESMID = row13.ESMID ;
CI_DEP_CECO_tmp.SIGLA = row13.SIGLA ;
CI_DEP_CECO_tmp.FUERZA_ID = row13.FUERZA_ID ;
CI_DEP_CECO_tmp.SIGLACI = row13.SIGLACI ;
CI_DEP_CECO_tmp.VALOR = row13.VALOR ;
CI_DEP_CECO_tmp.TANEXOS_ID = row13.TANEXOS_ID ;
CI_DEP_CECO_tmp.CECO_ID = row13.CECO_ID ;
CI_DEP_CECO_tmp.ESPECIALIDADES_ID = row13.ESPECIALIDADES_ID ;
CI_DEP_CECO = CI_DEP_CECO_tmp;
} // closing filter/reject

// # Output table : 'CI_DEP'
// # Filter conditions 
if( 

row13.CECO_ID == null && row13.SIGLACI.equals("DEP") 

 ) {
CI_DEP_tmp.ESMID = row13.ESMID ;
CI_DEP_tmp.SIGLA = row13.SIGLA ;
CI_DEP_tmp.FUERZA_ID = row13.FUERZA_ID ;
CI_DEP_tmp.SIGLACI = row13.SIGLACI ;
CI_DEP_tmp.VALOR = row13.VALOR ;
CI_DEP_tmp.TANEXOS_ID = row13.TANEXOS_ID ;
CI_DEP_tmp.CECO_ID = row13.CECO_ID ;
CI_DEP_tmp.ESPECIALIDADES_ID = row13.ESPECIALIDADES_ID ;
CI_DEP = CI_DEP_tmp;
} // closing filter/reject
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_11 = false;










 


	tos_count_tMap_11++;

/**
 * [tMap_11 main ] stop
 */
	
	/**
	 * [tMap_11 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_11";
	
	

 



/**
 * [tMap_11 process_data_begin ] stop
 */
// Start of branch "CI_GGRL_CECO"
if(CI_GGRL_CECO != null) { 



	
	/**
	 * [tHashOutput_9 main ] start
	 */

	

	
	
	currentComponent="tHashOutput_9";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"CI_GGRL_CECO"
						
						);
					}
					



    
		CI_GGRL_CECOStruct oneRow_tHashOutput_9 = new CI_GGRL_CECOStruct();
				
					oneRow_tHashOutput_9.ESMID = CI_GGRL_CECO.ESMID;
					oneRow_tHashOutput_9.SIGLA = CI_GGRL_CECO.SIGLA;
					oneRow_tHashOutput_9.FUERZA_ID = CI_GGRL_CECO.FUERZA_ID;
					oneRow_tHashOutput_9.SIGLACI = CI_GGRL_CECO.SIGLACI;
					oneRow_tHashOutput_9.VALOR = CI_GGRL_CECO.VALOR;
					oneRow_tHashOutput_9.TANEXOS_ID = CI_GGRL_CECO.TANEXOS_ID;
					oneRow_tHashOutput_9.CECO_ID = CI_GGRL_CECO.CECO_ID;
					oneRow_tHashOutput_9.ESPECIALIDADES_ID = CI_GGRL_CECO.ESPECIALIDADES_ID;
		
        tHashFile_tHashOutput_9.put(oneRow_tHashOutput_9);
        nb_line_tHashOutput_9 ++;

 


	tos_count_tHashOutput_9++;

/**
 * [tHashOutput_9 main ] stop
 */
	
	/**
	 * [tHashOutput_9 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashOutput_9";
	
	

 



/**
 * [tHashOutput_9 process_data_begin ] stop
 */
	
	/**
	 * [tHashOutput_9 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashOutput_9";
	
	

 



/**
 * [tHashOutput_9 process_data_end ] stop
 */

} // End of branch "CI_GGRL_CECO"




// Start of branch "CI_GGRL"
if(CI_GGRL != null) { 



	
	/**
	 * [tHashOutput_10 main ] start
	 */

	

	
	
	currentComponent="tHashOutput_10";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"CI_GGRL"
						
						);
					}
					



    
		CI_GGRLStruct oneRow_tHashOutput_10 = new CI_GGRLStruct();
				
					oneRow_tHashOutput_10.ESMID = CI_GGRL.ESMID;
					oneRow_tHashOutput_10.SIGLA = CI_GGRL.SIGLA;
					oneRow_tHashOutput_10.FUERZA_ID = CI_GGRL.FUERZA_ID;
					oneRow_tHashOutput_10.SIGLACI = CI_GGRL.SIGLACI;
					oneRow_tHashOutput_10.VALOR = CI_GGRL.VALOR;
					oneRow_tHashOutput_10.TANEXOS_ID = CI_GGRL.TANEXOS_ID;
					oneRow_tHashOutput_10.CECO_ID = CI_GGRL.CECO_ID;
					oneRow_tHashOutput_10.ESPECIALIDADES_ID = CI_GGRL.ESPECIALIDADES_ID;
		
        tHashFile_tHashOutput_10.put(oneRow_tHashOutput_10);
        nb_line_tHashOutput_10 ++;

 


	tos_count_tHashOutput_10++;

/**
 * [tHashOutput_10 main ] stop
 */
	
	/**
	 * [tHashOutput_10 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashOutput_10";
	
	

 



/**
 * [tHashOutput_10 process_data_begin ] stop
 */
	
	/**
	 * [tHashOutput_10 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashOutput_10";
	
	

 



/**
 * [tHashOutput_10 process_data_end ] stop
 */

} // End of branch "CI_GGRL"




// Start of branch "CI_DEP_CECO"
if(CI_DEP_CECO != null) { 



	
	/**
	 * [tHashOutput_11 main ] start
	 */

	

	
	
	currentComponent="tHashOutput_11";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"CI_DEP_CECO"
						
						);
					}
					



    
		CI_DEP_CECOStruct oneRow_tHashOutput_11 = new CI_DEP_CECOStruct();
				
					oneRow_tHashOutput_11.ESMID = CI_DEP_CECO.ESMID;
					oneRow_tHashOutput_11.SIGLA = CI_DEP_CECO.SIGLA;
					oneRow_tHashOutput_11.FUERZA_ID = CI_DEP_CECO.FUERZA_ID;
					oneRow_tHashOutput_11.SIGLACI = CI_DEP_CECO.SIGLACI;
					oneRow_tHashOutput_11.VALOR = CI_DEP_CECO.VALOR;
					oneRow_tHashOutput_11.TANEXOS_ID = CI_DEP_CECO.TANEXOS_ID;
					oneRow_tHashOutput_11.CECO_ID = CI_DEP_CECO.CECO_ID;
					oneRow_tHashOutput_11.ESPECIALIDADES_ID = CI_DEP_CECO.ESPECIALIDADES_ID;
		
        tHashFile_tHashOutput_11.put(oneRow_tHashOutput_11);
        nb_line_tHashOutput_11 ++;

 


	tos_count_tHashOutput_11++;

/**
 * [tHashOutput_11 main ] stop
 */
	
	/**
	 * [tHashOutput_11 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashOutput_11";
	
	

 



/**
 * [tHashOutput_11 process_data_begin ] stop
 */
	
	/**
	 * [tHashOutput_11 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashOutput_11";
	
	

 



/**
 * [tHashOutput_11 process_data_end ] stop
 */

} // End of branch "CI_DEP_CECO"




// Start of branch "CI_DEP"
if(CI_DEP != null) { 



	
	/**
	 * [tHashOutput_12 main ] start
	 */

	

	
	
	currentComponent="tHashOutput_12";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"CI_DEP"
						
						);
					}
					



    
		CI_DEPStruct oneRow_tHashOutput_12 = new CI_DEPStruct();
				
					oneRow_tHashOutput_12.ESMID = CI_DEP.ESMID;
					oneRow_tHashOutput_12.SIGLA = CI_DEP.SIGLA;
					oneRow_tHashOutput_12.FUERZA_ID = CI_DEP.FUERZA_ID;
					oneRow_tHashOutput_12.SIGLACI = CI_DEP.SIGLACI;
					oneRow_tHashOutput_12.VALOR = CI_DEP.VALOR;
					oneRow_tHashOutput_12.TANEXOS_ID = CI_DEP.TANEXOS_ID;
					oneRow_tHashOutput_12.CECO_ID = CI_DEP.CECO_ID;
					oneRow_tHashOutput_12.ESPECIALIDADES_ID = CI_DEP.ESPECIALIDADES_ID;
		
        tHashFile_tHashOutput_12.put(oneRow_tHashOutput_12);
        nb_line_tHashOutput_12 ++;

 


	tos_count_tHashOutput_12++;

/**
 * [tHashOutput_12 main ] stop
 */
	
	/**
	 * [tHashOutput_12 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashOutput_12";
	
	

 



/**
 * [tHashOutput_12 process_data_begin ] stop
 */
	
	/**
	 * [tHashOutput_12 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashOutput_12";
	
	

 



/**
 * [tHashOutput_12 process_data_end ] stop
 */

} // End of branch "CI_DEP"




	
	/**
	 * [tMap_11 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_11";
	
	

 



/**
 * [tMap_11 process_data_end ] stop
 */



	
	/**
	 * [tJavaRow_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tJavaRow_5";
	
	

 



/**
 * [tJavaRow_5 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_4";
	
	

 



/**
 * [tOracleInput_4 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_4 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_4";
	
	

}
}finally{
	if (rs_tOracleInput_4 != null) {
		rs_tOracleInput_4.close();
	}
	if (stmt_tOracleInput_4 != null) {
		stmt_tOracleInput_4.close();
	}
}

globalMap.put("tOracleInput_4_NB_LINE",nb_line_tOracleInput_4);
 

ok_Hash.put("tOracleInput_4", true);
end_Hash.put("tOracleInput_4", System.currentTimeMillis());




/**
 * [tOracleInput_4 end ] stop
 */

	
	/**
	 * [tJavaRow_5 end ] start
	 */

	

	
	
	currentComponent="tJavaRow_5";
	
	

globalMap.put("tJavaRow_5_NB_LINE",nb_line_tJavaRow_5);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row4");
			  	}
			  	
 

ok_Hash.put("tJavaRow_5", true);
end_Hash.put("tJavaRow_5", System.currentTimeMillis());




/**
 * [tJavaRow_5 end ] stop
 */

	
	/**
	 * [tMap_11 end ] start
	 */

	

	
	
	currentComponent="tMap_11";
	
	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row13");
			  	}
			  	
 

ok_Hash.put("tMap_11", true);
end_Hash.put("tMap_11", System.currentTimeMillis());




/**
 * [tMap_11 end ] stop
 */

	
	/**
	 * [tHashOutput_9 end ] start
	 */

	

	
	
	currentComponent="tHashOutput_9";
	
	
globalMap.put("tHashOutput_9_NB_LINE", nb_line_tHashOutput_9);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"CI_GGRL_CECO");
			  	}
			  	
 

ok_Hash.put("tHashOutput_9", true);
end_Hash.put("tHashOutput_9", System.currentTimeMillis());




/**
 * [tHashOutput_9 end ] stop
 */




	
	/**
	 * [tHashOutput_10 end ] start
	 */

	

	
	
	currentComponent="tHashOutput_10";
	
	
globalMap.put("tHashOutput_10_NB_LINE", nb_line_tHashOutput_10);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"CI_GGRL");
			  	}
			  	
 

ok_Hash.put("tHashOutput_10", true);
end_Hash.put("tHashOutput_10", System.currentTimeMillis());




/**
 * [tHashOutput_10 end ] stop
 */




	
	/**
	 * [tHashOutput_11 end ] start
	 */

	

	
	
	currentComponent="tHashOutput_11";
	
	
globalMap.put("tHashOutput_11_NB_LINE", nb_line_tHashOutput_11);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"CI_DEP_CECO");
			  	}
			  	
 

ok_Hash.put("tHashOutput_11", true);
end_Hash.put("tHashOutput_11", System.currentTimeMillis());




/**
 * [tHashOutput_11 end ] stop
 */




	
	/**
	 * [tHashOutput_12 end ] start
	 */

	

	
	
	currentComponent="tHashOutput_12";
	
	
globalMap.put("tHashOutput_12_NB_LINE", nb_line_tHashOutput_12);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"CI_DEP");
			  	}
			  	
 

ok_Hash.put("tHashOutput_12", true);
end_Hash.put("tHashOutput_12", System.currentTimeMillis());




/**
 * [tHashOutput_12 end ] stop
 */









				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tOracleInput_4:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk9", 0, "ok");
								} 
							
							tHashInput_6Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleInput_4 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_4";
	
	

 



/**
 * [tOracleInput_4 finally ] stop
 */

	
	/**
	 * [tJavaRow_5 finally ] start
	 */

	

	
	
	currentComponent="tJavaRow_5";
	
	

 



/**
 * [tJavaRow_5 finally ] stop
 */

	
	/**
	 * [tMap_11 finally ] start
	 */

	

	
	
	currentComponent="tMap_11";
	
	

 



/**
 * [tMap_11 finally ] stop
 */

	
	/**
	 * [tHashOutput_9 finally ] start
	 */

	

	
	
	currentComponent="tHashOutput_9";
	
	

 



/**
 * [tHashOutput_9 finally ] stop
 */




	
	/**
	 * [tHashOutput_10 finally ] start
	 */

	

	
	
	currentComponent="tHashOutput_10";
	
	

 



/**
 * [tHashOutput_10 finally ] stop
 */




	
	/**
	 * [tHashOutput_11 finally ] start
	 */

	

	
	
	currentComponent="tHashOutput_11";
	
	

 



/**
 * [tHashOutput_11 finally ] stop
 */




	
	/**
	 * [tHashOutput_12 finally ] start
	 */

	

	
	
	currentComponent="tHashOutput_12";
	
	

 



/**
 * [tHashOutput_12 finally ] stop
 */









				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_4_SUBPROCESS_STATE", 1);
	}
	


public static class TotalDisanStruct implements routines.system.IPersistableRow<TotalDisanStruct> {
    final static byte[] commonByteArrayLock_CEC_DISTRIBUCION_CI_DistribucionCI = new byte[0];
    static byte[] commonByteArray_CEC_DISTRIBUCION_CI_DistribucionCI = new byte[0];

	
			    public int FUERZA_ID;

				public int getFUERZA_ID () {
					return this.FUERZA_ID;
				}

				public Boolean FUERZA_IDIsNullable(){
				    return false;
				}
				public Boolean FUERZA_IDIsKey(){
				    return false;
				}
				public Integer FUERZA_IDLength(){
				    return 0;
				}
				public Integer FUERZA_IDPrecision(){
				    return null;
				}
				public String FUERZA_IDDefault(){
				
					return "";
				
				}
				public String FUERZA_IDComment(){
				
				    return "";
				
				}
				public String FUERZA_IDPattern(){
				
					return "";
				
				}
				public String FUERZA_IDOriginalDbColumnName(){
				
					return "FUERZA_ID";
				
				}

				
			    public String NOMBRE;

				public String getNOMBRE () {
					return this.NOMBRE;
				}

				public Boolean NOMBREIsNullable(){
				    return false;
				}
				public Boolean NOMBREIsKey(){
				    return false;
				}
				public Integer NOMBRELength(){
				    return 2000;
				}
				public Integer NOMBREPrecision(){
				    return 0;
				}
				public String NOMBREDefault(){
				
					return null;
				
				}
				public String NOMBREComment(){
				
				    return "";
				
				}
				public String NOMBREPattern(){
				
					return "";
				
				}
				public String NOMBREOriginalDbColumnName(){
				
					return "NOMBRE";
				
				}

				
			    public Double PORCENTAJE;

				public Double getPORCENTAJE () {
					return this.PORCENTAJE;
				}

				public Boolean PORCENTAJEIsNullable(){
				    return true;
				}
				public Boolean PORCENTAJEIsKey(){
				    return false;
				}
				public Integer PORCENTAJELength(){
				    return 0;
				}
				public Integer PORCENTAJEPrecision(){
				    return null;
				}
				public String PORCENTAJEDefault(){
				
					return "";
				
				}
				public String PORCENTAJEComment(){
				
				    return "";
				
				}
				public String PORCENTAJEPattern(){
				
					return "";
				
				}
				public String PORCENTAJEOriginalDbColumnName(){
				
					return "PORCENTAJE";
				
				}

				
			    public Double GGRL_DISAN_VALOR;

				public Double getGGRL_DISAN_VALOR () {
					return this.GGRL_DISAN_VALOR;
				}

				public Boolean GGRL_DISAN_VALORIsNullable(){
				    return true;
				}
				public Boolean GGRL_DISAN_VALORIsKey(){
				    return false;
				}
				public Integer GGRL_DISAN_VALORLength(){
				    return null;
				}
				public Integer GGRL_DISAN_VALORPrecision(){
				    return null;
				}
				public String GGRL_DISAN_VALORDefault(){
				
					return null;
				
				}
				public String GGRL_DISAN_VALORComment(){
				
				    return "";
				
				}
				public String GGRL_DISAN_VALORPattern(){
				
					return "";
				
				}
				public String GGRL_DISAN_VALOROriginalDbColumnName(){
				
					return "GGRL_DISAN_VALOR";
				
				}

				
			    public String SIGLA;

				public String getSIGLA () {
					return this.SIGLA;
				}

				public Boolean SIGLAIsNullable(){
				    return false;
				}
				public Boolean SIGLAIsKey(){
				    return false;
				}
				public Integer SIGLALength(){
				    return 20;
				}
				public Integer SIGLAPrecision(){
				    return 0;
				}
				public String SIGLADefault(){
				
					return null;
				
				}
				public String SIGLAComment(){
				
				    return "";
				
				}
				public String SIGLAPattern(){
				
					return "";
				
				}
				public String SIGLAOriginalDbColumnName(){
				
					return "SIGLA";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_CEC_DISTRIBUCION_CI_DistribucionCI.length) {
				if(length < 1024 && commonByteArray_CEC_DISTRIBUCION_CI_DistribucionCI.length == 0) {
   					commonByteArray_CEC_DISTRIBUCION_CI_DistribucionCI = new byte[1024];
				} else {
   					commonByteArray_CEC_DISTRIBUCION_CI_DistribucionCI = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_CEC_DISTRIBUCION_CI_DistribucionCI, 0, length);
			strReturn = new String(commonByteArray_CEC_DISTRIBUCION_CI_DistribucionCI, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_CEC_DISTRIBUCION_CI_DistribucionCI.length) {
				if(length < 1024 && commonByteArray_CEC_DISTRIBUCION_CI_DistribucionCI.length == 0) {
   					commonByteArray_CEC_DISTRIBUCION_CI_DistribucionCI = new byte[1024];
				} else {
   					commonByteArray_CEC_DISTRIBUCION_CI_DistribucionCI = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_CEC_DISTRIBUCION_CI_DistribucionCI, 0, length);
			strReturn = new String(commonByteArray_CEC_DISTRIBUCION_CI_DistribucionCI, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_CEC_DISTRIBUCION_CI_DistribucionCI) {

        	try {

        		int length = 0;
		
			        this.FUERZA_ID = dis.readInt();
					
					this.NOMBRE = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PORCENTAJE = null;
           				} else {
           			    	this.PORCENTAJE = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.GGRL_DISAN_VALOR = null;
           				} else {
           			    	this.GGRL_DISAN_VALOR = dis.readDouble();
           				}
					
					this.SIGLA = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_CEC_DISTRIBUCION_CI_DistribucionCI) {

        	try {

        		int length = 0;
		
			        this.FUERZA_ID = dis.readInt();
					
					this.NOMBRE = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PORCENTAJE = null;
           				} else {
           			    	this.PORCENTAJE = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.GGRL_DISAN_VALOR = null;
           				} else {
           			    	this.GGRL_DISAN_VALOR = dis.readDouble();
           				}
					
					this.SIGLA = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.FUERZA_ID);
					
					// String
				
						writeString(this.NOMBRE,dos);
					
					// Double
				
						if(this.PORCENTAJE == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PORCENTAJE);
		            	}
					
					// Double
				
						if(this.GGRL_DISAN_VALOR == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.GGRL_DISAN_VALOR);
		            	}
					
					// String
				
						writeString(this.SIGLA,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.FUERZA_ID);
					
					// String
				
						writeString(this.NOMBRE,dos);
					
					// Double
				
						if(this.PORCENTAJE == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PORCENTAJE);
		            	}
					
					// Double
				
						if(this.GGRL_DISAN_VALOR == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.GGRL_DISAN_VALOR);
		            	}
					
					// String
				
						writeString(this.SIGLA,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("FUERZA_ID="+String.valueOf(FUERZA_ID));
		sb.append(",NOMBRE="+NOMBRE);
		sb.append(",PORCENTAJE="+String.valueOf(PORCENTAJE));
		sb.append(",GGRL_DISAN_VALOR="+String.valueOf(GGRL_DISAN_VALOR));
		sb.append(",SIGLA="+SIGLA);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(TotalDisanStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class TotalDisanDEPStruct implements routines.system.IPersistableRow<TotalDisanDEPStruct> {
    final static byte[] commonByteArrayLock_CEC_DISTRIBUCION_CI_DistribucionCI = new byte[0];
    static byte[] commonByteArray_CEC_DISTRIBUCION_CI_DistribucionCI = new byte[0];

	
			    public int FUERZA_ID;

				public int getFUERZA_ID () {
					return this.FUERZA_ID;
				}

				public Boolean FUERZA_IDIsNullable(){
				    return false;
				}
				public Boolean FUERZA_IDIsKey(){
				    return false;
				}
				public Integer FUERZA_IDLength(){
				    return 0;
				}
				public Integer FUERZA_IDPrecision(){
				    return null;
				}
				public String FUERZA_IDDefault(){
				
					return "";
				
				}
				public String FUERZA_IDComment(){
				
				    return "";
				
				}
				public String FUERZA_IDPattern(){
				
					return "";
				
				}
				public String FUERZA_IDOriginalDbColumnName(){
				
					return "FUERZA_ID";
				
				}

				
			    public String NOMBRE;

				public String getNOMBRE () {
					return this.NOMBRE;
				}

				public Boolean NOMBREIsNullable(){
				    return false;
				}
				public Boolean NOMBREIsKey(){
				    return false;
				}
				public Integer NOMBRELength(){
				    return 2000;
				}
				public Integer NOMBREPrecision(){
				    return 0;
				}
				public String NOMBREDefault(){
				
					return null;
				
				}
				public String NOMBREComment(){
				
				    return "";
				
				}
				public String NOMBREPattern(){
				
					return "";
				
				}
				public String NOMBREOriginalDbColumnName(){
				
					return "NOMBRE";
				
				}

				
			    public Double PORCENTAJE;

				public Double getPORCENTAJE () {
					return this.PORCENTAJE;
				}

				public Boolean PORCENTAJEIsNullable(){
				    return true;
				}
				public Boolean PORCENTAJEIsKey(){
				    return false;
				}
				public Integer PORCENTAJELength(){
				    return 0;
				}
				public Integer PORCENTAJEPrecision(){
				    return null;
				}
				public String PORCENTAJEDefault(){
				
					return "";
				
				}
				public String PORCENTAJEComment(){
				
				    return "";
				
				}
				public String PORCENTAJEPattern(){
				
					return "";
				
				}
				public String PORCENTAJEOriginalDbColumnName(){
				
					return "PORCENTAJE";
				
				}

				
			    public Double DEP_DISAN_VALOR;

				public Double getDEP_DISAN_VALOR () {
					return this.DEP_DISAN_VALOR;
				}

				public Boolean DEP_DISAN_VALORIsNullable(){
				    return true;
				}
				public Boolean DEP_DISAN_VALORIsKey(){
				    return false;
				}
				public Integer DEP_DISAN_VALORLength(){
				    return null;
				}
				public Integer DEP_DISAN_VALORPrecision(){
				    return null;
				}
				public String DEP_DISAN_VALORDefault(){
				
					return null;
				
				}
				public String DEP_DISAN_VALORComment(){
				
				    return "";
				
				}
				public String DEP_DISAN_VALORPattern(){
				
					return "";
				
				}
				public String DEP_DISAN_VALOROriginalDbColumnName(){
				
					return "DEP_DISAN_VALOR";
				
				}

				
			    public String SIGLA;

				public String getSIGLA () {
					return this.SIGLA;
				}

				public Boolean SIGLAIsNullable(){
				    return false;
				}
				public Boolean SIGLAIsKey(){
				    return false;
				}
				public Integer SIGLALength(){
				    return 20;
				}
				public Integer SIGLAPrecision(){
				    return 0;
				}
				public String SIGLADefault(){
				
					return null;
				
				}
				public String SIGLAComment(){
				
				    return "";
				
				}
				public String SIGLAPattern(){
				
					return "";
				
				}
				public String SIGLAOriginalDbColumnName(){
				
					return "SIGLA";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_CEC_DISTRIBUCION_CI_DistribucionCI.length) {
				if(length < 1024 && commonByteArray_CEC_DISTRIBUCION_CI_DistribucionCI.length == 0) {
   					commonByteArray_CEC_DISTRIBUCION_CI_DistribucionCI = new byte[1024];
				} else {
   					commonByteArray_CEC_DISTRIBUCION_CI_DistribucionCI = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_CEC_DISTRIBUCION_CI_DistribucionCI, 0, length);
			strReturn = new String(commonByteArray_CEC_DISTRIBUCION_CI_DistribucionCI, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_CEC_DISTRIBUCION_CI_DistribucionCI.length) {
				if(length < 1024 && commonByteArray_CEC_DISTRIBUCION_CI_DistribucionCI.length == 0) {
   					commonByteArray_CEC_DISTRIBUCION_CI_DistribucionCI = new byte[1024];
				} else {
   					commonByteArray_CEC_DISTRIBUCION_CI_DistribucionCI = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_CEC_DISTRIBUCION_CI_DistribucionCI, 0, length);
			strReturn = new String(commonByteArray_CEC_DISTRIBUCION_CI_DistribucionCI, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_CEC_DISTRIBUCION_CI_DistribucionCI) {

        	try {

        		int length = 0;
		
			        this.FUERZA_ID = dis.readInt();
					
					this.NOMBRE = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PORCENTAJE = null;
           				} else {
           			    	this.PORCENTAJE = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.DEP_DISAN_VALOR = null;
           				} else {
           			    	this.DEP_DISAN_VALOR = dis.readDouble();
           				}
					
					this.SIGLA = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_CEC_DISTRIBUCION_CI_DistribucionCI) {

        	try {

        		int length = 0;
		
			        this.FUERZA_ID = dis.readInt();
					
					this.NOMBRE = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PORCENTAJE = null;
           				} else {
           			    	this.PORCENTAJE = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.DEP_DISAN_VALOR = null;
           				} else {
           			    	this.DEP_DISAN_VALOR = dis.readDouble();
           				}
					
					this.SIGLA = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.FUERZA_ID);
					
					// String
				
						writeString(this.NOMBRE,dos);
					
					// Double
				
						if(this.PORCENTAJE == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PORCENTAJE);
		            	}
					
					// Double
				
						if(this.DEP_DISAN_VALOR == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.DEP_DISAN_VALOR);
		            	}
					
					// String
				
						writeString(this.SIGLA,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.FUERZA_ID);
					
					// String
				
						writeString(this.NOMBRE,dos);
					
					// Double
				
						if(this.PORCENTAJE == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PORCENTAJE);
		            	}
					
					// Double
				
						if(this.DEP_DISAN_VALOR == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.DEP_DISAN_VALOR);
		            	}
					
					// String
				
						writeString(this.SIGLA,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("FUERZA_ID="+String.valueOf(FUERZA_ID));
		sb.append(",NOMBRE="+NOMBRE);
		sb.append(",PORCENTAJE="+String.valueOf(PORCENTAJE));
		sb.append(",DEP_DISAN_VALOR="+String.valueOf(DEP_DISAN_VALOR));
		sb.append(",SIGLA="+SIGLA);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(TotalDisanDEPStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row15Struct implements routines.system.IPersistableRow<row15Struct> {
    final static byte[] commonByteArrayLock_CEC_DISTRIBUCION_CI_DistribucionCI = new byte[0];
    static byte[] commonByteArray_CEC_DISTRIBUCION_CI_DistribucionCI = new byte[0];

	
			    public int FUERZA_ID;

				public int getFUERZA_ID () {
					return this.FUERZA_ID;
				}

				public Boolean FUERZA_IDIsNullable(){
				    return false;
				}
				public Boolean FUERZA_IDIsKey(){
				    return false;
				}
				public Integer FUERZA_IDLength(){
				    return 0;
				}
				public Integer FUERZA_IDPrecision(){
				    return null;
				}
				public String FUERZA_IDDefault(){
				
					return "";
				
				}
				public String FUERZA_IDComment(){
				
				    return "";
				
				}
				public String FUERZA_IDPattern(){
				
					return "";
				
				}
				public String FUERZA_IDOriginalDbColumnName(){
				
					return "FUERZA_ID";
				
				}

				
			    public String NOMBRE;

				public String getNOMBRE () {
					return this.NOMBRE;
				}

				public Boolean NOMBREIsNullable(){
				    return false;
				}
				public Boolean NOMBREIsKey(){
				    return false;
				}
				public Integer NOMBRELength(){
				    return 2000;
				}
				public Integer NOMBREPrecision(){
				    return 0;
				}
				public String NOMBREDefault(){
				
					return null;
				
				}
				public String NOMBREComment(){
				
				    return "";
				
				}
				public String NOMBREPattern(){
				
					return "";
				
				}
				public String NOMBREOriginalDbColumnName(){
				
					return "NOMBRE";
				
				}

				
			    public Double PORCENTAJE;

				public Double getPORCENTAJE () {
					return this.PORCENTAJE;
				}

				public Boolean PORCENTAJEIsNullable(){
				    return true;
				}
				public Boolean PORCENTAJEIsKey(){
				    return false;
				}
				public Integer PORCENTAJELength(){
				    return 0;
				}
				public Integer PORCENTAJEPrecision(){
				    return null;
				}
				public String PORCENTAJEDefault(){
				
					return "";
				
				}
				public String PORCENTAJEComment(){
				
				    return "";
				
				}
				public String PORCENTAJEPattern(){
				
					return "";
				
				}
				public String PORCENTAJEOriginalDbColumnName(){
				
					return "PORCENTAJE";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_CEC_DISTRIBUCION_CI_DistribucionCI.length) {
				if(length < 1024 && commonByteArray_CEC_DISTRIBUCION_CI_DistribucionCI.length == 0) {
   					commonByteArray_CEC_DISTRIBUCION_CI_DistribucionCI = new byte[1024];
				} else {
   					commonByteArray_CEC_DISTRIBUCION_CI_DistribucionCI = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_CEC_DISTRIBUCION_CI_DistribucionCI, 0, length);
			strReturn = new String(commonByteArray_CEC_DISTRIBUCION_CI_DistribucionCI, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_CEC_DISTRIBUCION_CI_DistribucionCI.length) {
				if(length < 1024 && commonByteArray_CEC_DISTRIBUCION_CI_DistribucionCI.length == 0) {
   					commonByteArray_CEC_DISTRIBUCION_CI_DistribucionCI = new byte[1024];
				} else {
   					commonByteArray_CEC_DISTRIBUCION_CI_DistribucionCI = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_CEC_DISTRIBUCION_CI_DistribucionCI, 0, length);
			strReturn = new String(commonByteArray_CEC_DISTRIBUCION_CI_DistribucionCI, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_CEC_DISTRIBUCION_CI_DistribucionCI) {

        	try {

        		int length = 0;
		
			        this.FUERZA_ID = dis.readInt();
					
					this.NOMBRE = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PORCENTAJE = null;
           				} else {
           			    	this.PORCENTAJE = dis.readDouble();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_CEC_DISTRIBUCION_CI_DistribucionCI) {

        	try {

        		int length = 0;
		
			        this.FUERZA_ID = dis.readInt();
					
					this.NOMBRE = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PORCENTAJE = null;
           				} else {
           			    	this.PORCENTAJE = dis.readDouble();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.FUERZA_ID);
					
					// String
				
						writeString(this.NOMBRE,dos);
					
					// Double
				
						if(this.PORCENTAJE == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PORCENTAJE);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.FUERZA_ID);
					
					// String
				
						writeString(this.NOMBRE,dos);
					
					// Double
				
						if(this.PORCENTAJE == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PORCENTAJE);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("FUERZA_ID="+String.valueOf(FUERZA_ID));
		sb.append(",NOMBRE="+NOMBRE);
		sb.append(",PORCENTAJE="+String.valueOf(PORCENTAJE));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row15Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class after_tHashInput_6Struct implements routines.system.IPersistableRow<after_tHashInput_6Struct> {
    final static byte[] commonByteArrayLock_CEC_DISTRIBUCION_CI_DistribucionCI = new byte[0];
    static byte[] commonByteArray_CEC_DISTRIBUCION_CI_DistribucionCI = new byte[0];

	
			    public int FUERZA_ID;

				public int getFUERZA_ID () {
					return this.FUERZA_ID;
				}

				public Boolean FUERZA_IDIsNullable(){
				    return false;
				}
				public Boolean FUERZA_IDIsKey(){
				    return false;
				}
				public Integer FUERZA_IDLength(){
				    return 0;
				}
				public Integer FUERZA_IDPrecision(){
				    return null;
				}
				public String FUERZA_IDDefault(){
				
					return "";
				
				}
				public String FUERZA_IDComment(){
				
				    return "";
				
				}
				public String FUERZA_IDPattern(){
				
					return "";
				
				}
				public String FUERZA_IDOriginalDbColumnName(){
				
					return "FUERZA_ID";
				
				}

				
			    public String NOMBRE;

				public String getNOMBRE () {
					return this.NOMBRE;
				}

				public Boolean NOMBREIsNullable(){
				    return false;
				}
				public Boolean NOMBREIsKey(){
				    return false;
				}
				public Integer NOMBRELength(){
				    return 2000;
				}
				public Integer NOMBREPrecision(){
				    return 0;
				}
				public String NOMBREDefault(){
				
					return null;
				
				}
				public String NOMBREComment(){
				
				    return "";
				
				}
				public String NOMBREPattern(){
				
					return "";
				
				}
				public String NOMBREOriginalDbColumnName(){
				
					return "NOMBRE";
				
				}

				
			    public Double PORCENTAJE;

				public Double getPORCENTAJE () {
					return this.PORCENTAJE;
				}

				public Boolean PORCENTAJEIsNullable(){
				    return true;
				}
				public Boolean PORCENTAJEIsKey(){
				    return false;
				}
				public Integer PORCENTAJELength(){
				    return 0;
				}
				public Integer PORCENTAJEPrecision(){
				    return null;
				}
				public String PORCENTAJEDefault(){
				
					return "";
				
				}
				public String PORCENTAJEComment(){
				
				    return "";
				
				}
				public String PORCENTAJEPattern(){
				
					return "";
				
				}
				public String PORCENTAJEOriginalDbColumnName(){
				
					return "PORCENTAJE";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_CEC_DISTRIBUCION_CI_DistribucionCI.length) {
				if(length < 1024 && commonByteArray_CEC_DISTRIBUCION_CI_DistribucionCI.length == 0) {
   					commonByteArray_CEC_DISTRIBUCION_CI_DistribucionCI = new byte[1024];
				} else {
   					commonByteArray_CEC_DISTRIBUCION_CI_DistribucionCI = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_CEC_DISTRIBUCION_CI_DistribucionCI, 0, length);
			strReturn = new String(commonByteArray_CEC_DISTRIBUCION_CI_DistribucionCI, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_CEC_DISTRIBUCION_CI_DistribucionCI.length) {
				if(length < 1024 && commonByteArray_CEC_DISTRIBUCION_CI_DistribucionCI.length == 0) {
   					commonByteArray_CEC_DISTRIBUCION_CI_DistribucionCI = new byte[1024];
				} else {
   					commonByteArray_CEC_DISTRIBUCION_CI_DistribucionCI = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_CEC_DISTRIBUCION_CI_DistribucionCI, 0, length);
			strReturn = new String(commonByteArray_CEC_DISTRIBUCION_CI_DistribucionCI, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_CEC_DISTRIBUCION_CI_DistribucionCI) {

        	try {

        		int length = 0;
		
			        this.FUERZA_ID = dis.readInt();
					
					this.NOMBRE = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PORCENTAJE = null;
           				} else {
           			    	this.PORCENTAJE = dis.readDouble();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_CEC_DISTRIBUCION_CI_DistribucionCI) {

        	try {

        		int length = 0;
		
			        this.FUERZA_ID = dis.readInt();
					
					this.NOMBRE = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PORCENTAJE = null;
           				} else {
           			    	this.PORCENTAJE = dis.readDouble();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.FUERZA_ID);
					
					// String
				
						writeString(this.NOMBRE,dos);
					
					// Double
				
						if(this.PORCENTAJE == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PORCENTAJE);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.FUERZA_ID);
					
					// String
				
						writeString(this.NOMBRE,dos);
					
					// Double
				
						if(this.PORCENTAJE == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PORCENTAJE);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("FUERZA_ID="+String.valueOf(FUERZA_ID));
		sb.append(",NOMBRE="+NOMBRE);
		sb.append(",PORCENTAJE="+String.valueOf(PORCENTAJE));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(after_tHashInput_6Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tHashInput_6Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tHashInput_6_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;


		tHashInput_7Process(globalMap);

		row15Struct row15 = new row15Struct();
TotalDisanStruct TotalDisan = new TotalDisanStruct();
TotalDisanDEPStruct TotalDisanDEP = new TotalDisanDEPStruct();





	
	/**
	 * [tHashOutput_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashOutput_5", false);
		start_Hash.put("tHashOutput_5", System.currentTimeMillis());
		
	
	currentComponent="tHashOutput_5";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"TotalDisan");
					}
				
		int tos_count_tHashOutput_5 = 0;
		



org.talend.designer.components.hashfile.common.MapHashFile mf_tHashOutput_5=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();    
		org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<TotalDisanStruct> tHashFile_tHashOutput_5 = null;
		String hashKey_tHashOutput_5 = "tHashFile_DistribucionCI_" + pid + "_tHashOutput_5";
			synchronized(org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.get(hashKey_tHashOutput_5)){
			    if(mf_tHashOutput_5.getResourceMap().get(hashKey_tHashOutput_5) == null){
	      		    mf_tHashOutput_5.getResourceMap().put(hashKey_tHashOutput_5, new org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<TotalDisanStruct>(org.talend.designer.components.hashfile.common.MATCHING_MODE.KEEP_ALL));
	      		    tHashFile_tHashOutput_5 = mf_tHashOutput_5.getResourceMap().get(hashKey_tHashOutput_5);
			    }else{
			    	tHashFile_tHashOutput_5 = mf_tHashOutput_5.getResourceMap().get(hashKey_tHashOutput_5);
			    }
			}
        int nb_line_tHashOutput_5 = 0;

 



/**
 * [tHashOutput_5 begin ] stop
 */




	
	/**
	 * [tHashOutput_6 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashOutput_6", false);
		start_Hash.put("tHashOutput_6", System.currentTimeMillis());
		
	
	currentComponent="tHashOutput_6";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"TotalDisanDEP");
					}
				
		int tos_count_tHashOutput_6 = 0;
		



org.talend.designer.components.hashfile.common.MapHashFile mf_tHashOutput_6=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();    
		org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<TotalDisanDEPStruct> tHashFile_tHashOutput_6 = null;
		String hashKey_tHashOutput_6 = "tHashFile_DistribucionCI_" + pid + "_tHashOutput_6";
			synchronized(org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.get(hashKey_tHashOutput_6)){
			    if(mf_tHashOutput_6.getResourceMap().get(hashKey_tHashOutput_6) == null){
	      		    mf_tHashOutput_6.getResourceMap().put(hashKey_tHashOutput_6, new org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<TotalDisanDEPStruct>(org.talend.designer.components.hashfile.common.MATCHING_MODE.KEEP_ALL));
	      		    tHashFile_tHashOutput_6 = mf_tHashOutput_6.getResourceMap().get(hashKey_tHashOutput_6);
			    }else{
			    	tHashFile_tHashOutput_6 = mf_tHashOutput_6.getResourceMap().get(hashKey_tHashOutput_6);
			    }
			}
        int nb_line_tHashOutput_6 = 0;

 



/**
 * [tHashOutput_6 begin ] stop
 */



	
	/**
	 * [tMap_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_4", false);
		start_Hash.put("tMap_4", System.currentTimeMillis());
		
	
	currentComponent="tMap_4";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row15");
					}
				
		int tos_count_tMap_4 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row16Struct> tHash_Lookup_row16 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row16Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row16Struct>) 
					globalMap.get( "tHash_Lookup_row16" ))
					;					
					
	

row16Struct row16HashKey = new row16Struct();
row16Struct row16Default = new row16Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_4__Struct  {
}
Var__tMap_4__Struct Var__tMap_4 = new Var__tMap_4__Struct();
// ###############################

// ###############################
// # Outputs initialization
TotalDisanStruct TotalDisan_tmp = new TotalDisanStruct();
TotalDisanDEPStruct TotalDisanDEP_tmp = new TotalDisanDEPStruct();
// ###############################

        
        



        









 



/**
 * [tMap_4 begin ] stop
 */



	
	/**
	 * [tHashInput_6 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_6", false);
		start_Hash.put("tHashInput_6", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_6";
	
	
		int tos_count_tHashInput_6 = 0;
		


int nb_line_tHashInput_6 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_6=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row2Struct> tHashFile_tHashInput_6 = mf_tHashInput_6.getAdvancedMemoryHashFile("tHashFile_DistribucionCI_" + pid +"_tHashOutput_1");
if(tHashFile_tHashInput_6==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<row2Struct> iterator_tHashInput_6 = tHashFile_tHashInput_6.iterator();
while (iterator_tHashInput_6.hasNext()) {
    row2Struct next_tHashInput_6 = iterator_tHashInput_6.next();

	row15.FUERZA_ID = next_tHashInput_6.FUERZA_ID;
	row15.NOMBRE = next_tHashInput_6.NOMBRE;
	row15.PORCENTAJE = next_tHashInput_6.PORCENTAJE;

 



/**
 * [tHashInput_6 begin ] stop
 */
	
	/**
	 * [tHashInput_6 main ] start
	 */

	

	
	
	currentComponent="tHashInput_6";
	
	

 


	tos_count_tHashInput_6++;

/**
 * [tHashInput_6 main ] stop
 */
	
	/**
	 * [tHashInput_6 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashInput_6";
	
	

 



/**
 * [tHashInput_6 process_data_begin ] stop
 */

	
	/**
	 * [tMap_4 main ] start
	 */

	

	
	
	currentComponent="tMap_4";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row15"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_4 = false;
		
						row16Struct row16 = null;
					
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_4 = false;
		boolean mainRowRejected_tMap_4 = false;
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row16" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow16 = false;
       		  	    	
       		  	    	
 							row16Struct row16ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_4) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_4 = false;
								
                        		    		    row16HashKey.FUERZA_ID = row15.FUERZA_ID ;
                        		    		

								
		                        	row16HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row16.lookup( row16HashKey );

	  							

	  							

 								
								  
								  if(!tHash_Lookup_row16.hasNext()) { // G_TM_M_090

  								
		  				
	  								
						
									
	
		  								forceLooprow16 = true;
	  					
  									
  									  		
 								
								  
								  } // G_TM_M_090

  								



							} // G_TM_M_020
			           		  	  
							
								
								else { // G 20 - G 21
   									forceLooprow16 = true;
			           		  	} // G 21
                    		  	
                    		

							
                    		  	 
							

								while ((tHash_Lookup_row16 != null && tHash_Lookup_row16.hasNext()) || forceLooprow16) { // G_TM_M_043

								
									 // CALL close loop of lookup 'row16'
									
                    		  	 
							   
                    		  	 
	       		  	    	row16Struct fromLookup_row16 = null;
							row16 = row16Default;
										 
							
								
								if(!forceLooprow16) { // G 46
								
							
								 
							
								
								fromLookup_row16 = tHash_Lookup_row16.next();

							

							if(fromLookup_row16 != null) {
								row16 = fromLookup_row16;
							}
							
							
							
			  							
								
	                    		  	
		                    
	                    	
	                    		} // G 46
	                    		  	
								forceLooprow16 = false;
									 	
							
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_4__Struct Var = Var__tMap_4;// ###############################
        // ###############################
        // # Output tables

TotalDisan = null;
TotalDisanDEP = null;


// # Output table : 'TotalDisan'
// # Filter conditions 
if( 

row16.FUERZA_ID != null	 && row16.SIGLA.equals("GGRL")

 ) {
TotalDisan_tmp.FUERZA_ID = row15.FUERZA_ID ;
TotalDisan_tmp.NOMBRE = row15.NOMBRE ;
TotalDisan_tmp.PORCENTAJE = row15.PORCENTAJE ;
TotalDisan_tmp.GGRL_DISAN_VALOR = ((row15.PORCENTAJE/100)*context.ConsolidadoGGRL)+row16.VALOR ;
TotalDisan_tmp.SIGLA = row16.SIGLA ;
TotalDisan = TotalDisan_tmp;
} // closing filter/reject

// # Output table : 'TotalDisanDEP'
// # Filter conditions 
if( 

row16.FUERZA_ID != null	 && row16.SIGLA.equals("DEP")

 ) {
TotalDisanDEP_tmp.FUERZA_ID = row15.FUERZA_ID  ;
TotalDisanDEP_tmp.NOMBRE = row15.NOMBRE  ;
TotalDisanDEP_tmp.PORCENTAJE = row15.PORCENTAJE  ;
TotalDisanDEP_tmp.DEP_DISAN_VALOR = ((row15.PORCENTAJE/100)*context.ConsolidadoDEP)+row16.VALOR ;
TotalDisanDEP_tmp.SIGLA = row16.SIGLA  ;
TotalDisanDEP = TotalDisanDEP_tmp;
} // closing filter/reject
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_4 = false;










 


	tos_count_tMap_4++;

/**
 * [tMap_4 main ] stop
 */
	
	/**
	 * [tMap_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_4";
	
	

 



/**
 * [tMap_4 process_data_begin ] stop
 */
// Start of branch "TotalDisan"
if(TotalDisan != null) { 



	
	/**
	 * [tHashOutput_5 main ] start
	 */

	

	
	
	currentComponent="tHashOutput_5";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"TotalDisan"
						
						);
					}
					



    
		TotalDisanStruct oneRow_tHashOutput_5 = new TotalDisanStruct();
				
					oneRow_tHashOutput_5.FUERZA_ID = TotalDisan.FUERZA_ID;
					oneRow_tHashOutput_5.NOMBRE = TotalDisan.NOMBRE;
					oneRow_tHashOutput_5.PORCENTAJE = TotalDisan.PORCENTAJE;
					oneRow_tHashOutput_5.GGRL_DISAN_VALOR = TotalDisan.GGRL_DISAN_VALOR;
					oneRow_tHashOutput_5.SIGLA = TotalDisan.SIGLA;
		
        tHashFile_tHashOutput_5.put(oneRow_tHashOutput_5);
        nb_line_tHashOutput_5 ++;

 


	tos_count_tHashOutput_5++;

/**
 * [tHashOutput_5 main ] stop
 */
	
	/**
	 * [tHashOutput_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashOutput_5";
	
	

 



/**
 * [tHashOutput_5 process_data_begin ] stop
 */
	
	/**
	 * [tHashOutput_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashOutput_5";
	
	

 



/**
 * [tHashOutput_5 process_data_end ] stop
 */

} // End of branch "TotalDisan"




// Start of branch "TotalDisanDEP"
if(TotalDisanDEP != null) { 



	
	/**
	 * [tHashOutput_6 main ] start
	 */

	

	
	
	currentComponent="tHashOutput_6";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"TotalDisanDEP"
						
						);
					}
					



    
		TotalDisanDEPStruct oneRow_tHashOutput_6 = new TotalDisanDEPStruct();
				
					oneRow_tHashOutput_6.FUERZA_ID = TotalDisanDEP.FUERZA_ID;
					oneRow_tHashOutput_6.NOMBRE = TotalDisanDEP.NOMBRE;
					oneRow_tHashOutput_6.PORCENTAJE = TotalDisanDEP.PORCENTAJE;
					oneRow_tHashOutput_6.DEP_DISAN_VALOR = TotalDisanDEP.DEP_DISAN_VALOR;
					oneRow_tHashOutput_6.SIGLA = TotalDisanDEP.SIGLA;
		
        tHashFile_tHashOutput_6.put(oneRow_tHashOutput_6);
        nb_line_tHashOutput_6 ++;

 


	tos_count_tHashOutput_6++;

/**
 * [tHashOutput_6 main ] stop
 */
	
	/**
	 * [tHashOutput_6 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashOutput_6";
	
	

 



/**
 * [tHashOutput_6 process_data_begin ] stop
 */
	
	/**
	 * [tHashOutput_6 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashOutput_6";
	
	

 



/**
 * [tHashOutput_6 process_data_end ] stop
 */

} // End of branch "TotalDisanDEP"



	
		} // close loop of lookup 'row16' // G_TM_M_043
	
	
	/**
	 * [tMap_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_4";
	
	

 



/**
 * [tMap_4 process_data_end ] stop
 */



	
	/**
	 * [tHashInput_6 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashInput_6";
	
	

 



/**
 * [tHashInput_6 process_data_end ] stop
 */
	
	/**
	 * [tHashInput_6 end ] start
	 */

	

	
	
	currentComponent="tHashInput_6";
	
	
    

		
			nb_line_tHashInput_6++;
		}	
    		
    		mf_tHashInput_6.clearCache("tHashFile_DistribucionCI_" + pid +"_tHashOutput_1");
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_DistribucionCI_" + pid +"_tHashOutput_1");
	


	globalMap.put("tHashInput_6_NB_LINE", nb_line_tHashInput_6);       

 

ok_Hash.put("tHashInput_6", true);
end_Hash.put("tHashInput_6", System.currentTimeMillis());




/**
 * [tHashInput_6 end ] stop
 */

	
	/**
	 * [tMap_4 end ] start
	 */

	

	
	
	currentComponent="tMap_4";
	
	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_row16 != null) {
						tHash_Lookup_row16.endGet();
					}
					globalMap.remove( "tHash_Lookup_row16" );

					
					
				
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row15");
			  	}
			  	
 

ok_Hash.put("tMap_4", true);
end_Hash.put("tMap_4", System.currentTimeMillis());




/**
 * [tMap_4 end ] stop
 */

	
	/**
	 * [tHashOutput_5 end ] start
	 */

	

	
	
	currentComponent="tHashOutput_5";
	
	
globalMap.put("tHashOutput_5_NB_LINE", nb_line_tHashOutput_5);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"TotalDisan");
			  	}
			  	
 

ok_Hash.put("tHashOutput_5", true);
end_Hash.put("tHashOutput_5", System.currentTimeMillis());




/**
 * [tHashOutput_5 end ] stop
 */




	
	/**
	 * [tHashOutput_6 end ] start
	 */

	

	
	
	currentComponent="tHashOutput_6";
	
	
globalMap.put("tHashOutput_6_NB_LINE", nb_line_tHashOutput_6);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"TotalDisanDEP");
			  	}
			  	
 

ok_Hash.put("tHashOutput_6", true);
end_Hash.put("tHashOutput_6", System.currentTimeMillis());




/**
 * [tHashOutput_6 end ] stop
 */






				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tHashInput_6:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk1", 0, "ok");
								} 
							
							tHashInput_1Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
					     			//free memory for "tMap_4"
					     			globalMap.remove("tHash_Lookup_row16"); 
				     			
				try{
					
	
	/**
	 * [tHashInput_6 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_6";
	
	

 



/**
 * [tHashInput_6 finally ] stop
 */

	
	/**
	 * [tMap_4 finally ] start
	 */

	

	
	
	currentComponent="tMap_4";
	
	

 



/**
 * [tMap_4 finally ] stop
 */

	
	/**
	 * [tHashOutput_5 finally ] start
	 */

	

	
	
	currentComponent="tHashOutput_5";
	
	

 



/**
 * [tHashOutput_5 finally ] stop
 */




	
	/**
	 * [tHashOutput_6 finally ] start
	 */

	

	
	
	currentComponent="tHashOutput_6";
	
	

 



/**
 * [tHashOutput_6 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tHashInput_6_SUBPROCESS_STATE", 1);
	}
	


public static class TCV04Struct implements routines.system.IPersistableRow<TCV04Struct> {
    final static byte[] commonByteArrayLock_CEC_DISTRIBUCION_CI_DistribucionCI = new byte[0];
    static byte[] commonByteArray_CEC_DISTRIBUCION_CI_DistribucionCI = new byte[0];

	
			    public Integer FUERZA_ID;

				public Integer getFUERZA_ID () {
					return this.FUERZA_ID;
				}

				public Boolean FUERZA_IDIsNullable(){
				    return true;
				}
				public Boolean FUERZA_IDIsKey(){
				    return false;
				}
				public Integer FUERZA_IDLength(){
				    return null;
				}
				public Integer FUERZA_IDPrecision(){
				    return null;
				}
				public String FUERZA_IDDefault(){
				
					return null;
				
				}
				public String FUERZA_IDComment(){
				
				    return "";
				
				}
				public String FUERZA_IDPattern(){
				
					return "";
				
				}
				public String FUERZA_IDOriginalDbColumnName(){
				
					return "FUERZA_ID";
				
				}

				
			    public int ESMID;

				public int getESMID () {
					return this.ESMID;
				}

				public Boolean ESMIDIsNullable(){
				    return false;
				}
				public Boolean ESMIDIsKey(){
				    return false;
				}
				public Integer ESMIDLength(){
				    return 0;
				}
				public Integer ESMIDPrecision(){
				    return null;
				}
				public String ESMIDDefault(){
				
					return "";
				
				}
				public String ESMIDComment(){
				
				    return "";
				
				}
				public String ESMIDPattern(){
				
					return "";
				
				}
				public String ESMIDOriginalDbColumnName(){
				
					return "ESMID";
				
				}

				
			    public Integer ESPECIALIDADES_ID;

				public Integer getESPECIALIDADES_ID () {
					return this.ESPECIALIDADES_ID;
				}

				public Boolean ESPECIALIDADES_IDIsNullable(){
				    return true;
				}
				public Boolean ESPECIALIDADES_IDIsKey(){
				    return false;
				}
				public Integer ESPECIALIDADES_IDLength(){
				    return 0;
				}
				public Integer ESPECIALIDADES_IDPrecision(){
				    return null;
				}
				public String ESPECIALIDADES_IDDefault(){
				
					return "";
				
				}
				public String ESPECIALIDADES_IDComment(){
				
				    return "";
				
				}
				public String ESPECIALIDADES_IDPattern(){
				
					return "";
				
				}
				public String ESPECIALIDADES_IDOriginalDbColumnName(){
				
					return "ESPECIALIDADES_ID";
				
				}

				
			    public int CUPS_ID;

				public int getCUPS_ID () {
					return this.CUPS_ID;
				}

				public Boolean CUPS_IDIsNullable(){
				    return false;
				}
				public Boolean CUPS_IDIsKey(){
				    return false;
				}
				public Integer CUPS_IDLength(){
				    return 0;
				}
				public Integer CUPS_IDPrecision(){
				    return null;
				}
				public String CUPS_IDDefault(){
				
					return "";
				
				}
				public String CUPS_IDComment(){
				
				    return "";
				
				}
				public String CUPS_IDPattern(){
				
					return "";
				
				}
				public String CUPS_IDOriginalDbColumnName(){
				
					return "CUPS_ID";
				
				}

				
			    public Double VALOR;

				public Double getVALOR () {
					return this.VALOR;
				}

				public Boolean VALORIsNullable(){
				    return true;
				}
				public Boolean VALORIsKey(){
				    return false;
				}
				public Integer VALORLength(){
				    return 0;
				}
				public Integer VALORPrecision(){
				    return null;
				}
				public String VALORDefault(){
				
					return "";
				
				}
				public String VALORComment(){
				
				    return "";
				
				}
				public String VALORPattern(){
				
					return "";
				
				}
				public String VALOROriginalDbColumnName(){
				
					return "VALOR";
				
				}

				
			    public Integer CEBE_ID;

				public Integer getCEBE_ID () {
					return this.CEBE_ID;
				}

				public Boolean CEBE_IDIsNullable(){
				    return true;
				}
				public Boolean CEBE_IDIsKey(){
				    return false;
				}
				public Integer CEBE_IDLength(){
				    return null;
				}
				public Integer CEBE_IDPrecision(){
				    return null;
				}
				public String CEBE_IDDefault(){
				
					return null;
				
				}
				public String CEBE_IDComment(){
				
				    return "";
				
				}
				public String CEBE_IDPattern(){
				
					return "";
				
				}
				public String CEBE_IDOriginalDbColumnName(){
				
					return "CEBE_ID";
				
				}

				
			    public Integer CECO_ID;

				public Integer getCECO_ID () {
					return this.CECO_ID;
				}

				public Boolean CECO_IDIsNullable(){
				    return true;
				}
				public Boolean CECO_IDIsKey(){
				    return false;
				}
				public Integer CECO_IDLength(){
				    return null;
				}
				public Integer CECO_IDPrecision(){
				    return null;
				}
				public String CECO_IDDefault(){
				
					return null;
				
				}
				public String CECO_IDComment(){
				
				    return "";
				
				}
				public String CECO_IDPattern(){
				
					return "";
				
				}
				public String CECO_IDOriginalDbColumnName(){
				
					return "CECO_ID";
				
				}

				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_CEC_DISTRIBUCION_CI_DistribucionCI) {

        	try {

        		int length = 0;
		
						this.FUERZA_ID = readInteger(dis);
					
			        this.ESMID = dis.readInt();
					
						this.ESPECIALIDADES_ID = readInteger(dis);
					
			        this.CUPS_ID = dis.readInt();
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.VALOR = null;
           				} else {
           			    	this.VALOR = dis.readDouble();
           				}
					
						this.CEBE_ID = readInteger(dis);
					
						this.CECO_ID = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_CEC_DISTRIBUCION_CI_DistribucionCI) {

        	try {

        		int length = 0;
		
						this.FUERZA_ID = readInteger(dis);
					
			        this.ESMID = dis.readInt();
					
						this.ESPECIALIDADES_ID = readInteger(dis);
					
			        this.CUPS_ID = dis.readInt();
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.VALOR = null;
           				} else {
           			    	this.VALOR = dis.readDouble();
           				}
					
						this.CEBE_ID = readInteger(dis);
					
						this.CECO_ID = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.FUERZA_ID,dos);
					
					// int
				
		            	dos.writeInt(this.ESMID);
					
					// Integer
				
						writeInteger(this.ESPECIALIDADES_ID,dos);
					
					// int
				
		            	dos.writeInt(this.CUPS_ID);
					
					// Double
				
						if(this.VALOR == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.VALOR);
		            	}
					
					// Integer
				
						writeInteger(this.CEBE_ID,dos);
					
					// Integer
				
						writeInteger(this.CECO_ID,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.FUERZA_ID,dos);
					
					// int
				
		            	dos.writeInt(this.ESMID);
					
					// Integer
				
						writeInteger(this.ESPECIALIDADES_ID,dos);
					
					// int
				
		            	dos.writeInt(this.CUPS_ID);
					
					// Double
				
						if(this.VALOR == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.VALOR);
		            	}
					
					// Integer
				
						writeInteger(this.CEBE_ID,dos);
					
					// Integer
				
						writeInteger(this.CECO_ID,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("FUERZA_ID="+String.valueOf(FUERZA_ID));
		sb.append(",ESMID="+String.valueOf(ESMID));
		sb.append(",ESPECIALIDADES_ID="+String.valueOf(ESPECIALIDADES_ID));
		sb.append(",CUPS_ID="+String.valueOf(CUPS_ID));
		sb.append(",VALOR="+String.valueOf(VALOR));
		sb.append(",CEBE_ID="+String.valueOf(CEBE_ID));
		sb.append(",CECO_ID="+String.valueOf(CECO_ID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(TCV04Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class TCV03Struct implements routines.system.IPersistableRow<TCV03Struct> {
    final static byte[] commonByteArrayLock_CEC_DISTRIBUCION_CI_DistribucionCI = new byte[0];
    static byte[] commonByteArray_CEC_DISTRIBUCION_CI_DistribucionCI = new byte[0];

	
			    public Integer FUERZA_ID;

				public Integer getFUERZA_ID () {
					return this.FUERZA_ID;
				}

				public Boolean FUERZA_IDIsNullable(){
				    return true;
				}
				public Boolean FUERZA_IDIsKey(){
				    return false;
				}
				public Integer FUERZA_IDLength(){
				    return null;
				}
				public Integer FUERZA_IDPrecision(){
				    return null;
				}
				public String FUERZA_IDDefault(){
				
					return null;
				
				}
				public String FUERZA_IDComment(){
				
				    return "";
				
				}
				public String FUERZA_IDPattern(){
				
					return "";
				
				}
				public String FUERZA_IDOriginalDbColumnName(){
				
					return "FUERZA_ID";
				
				}

				
			    public int ESMID;

				public int getESMID () {
					return this.ESMID;
				}

				public Boolean ESMIDIsNullable(){
				    return false;
				}
				public Boolean ESMIDIsKey(){
				    return false;
				}
				public Integer ESMIDLength(){
				    return 0;
				}
				public Integer ESMIDPrecision(){
				    return null;
				}
				public String ESMIDDefault(){
				
					return "";
				
				}
				public String ESMIDComment(){
				
				    return "";
				
				}
				public String ESMIDPattern(){
				
					return "";
				
				}
				public String ESMIDOriginalDbColumnName(){
				
					return "ESMID";
				
				}

				
			    public Integer ESPECIALIDADES_ID;

				public Integer getESPECIALIDADES_ID () {
					return this.ESPECIALIDADES_ID;
				}

				public Boolean ESPECIALIDADES_IDIsNullable(){
				    return true;
				}
				public Boolean ESPECIALIDADES_IDIsKey(){
				    return false;
				}
				public Integer ESPECIALIDADES_IDLength(){
				    return 0;
				}
				public Integer ESPECIALIDADES_IDPrecision(){
				    return null;
				}
				public String ESPECIALIDADES_IDDefault(){
				
					return "";
				
				}
				public String ESPECIALIDADES_IDComment(){
				
				    return "";
				
				}
				public String ESPECIALIDADES_IDPattern(){
				
					return "";
				
				}
				public String ESPECIALIDADES_IDOriginalDbColumnName(){
				
					return "ESPECIALIDADES_ID";
				
				}

				
			    public int CUPS_ID;

				public int getCUPS_ID () {
					return this.CUPS_ID;
				}

				public Boolean CUPS_IDIsNullable(){
				    return false;
				}
				public Boolean CUPS_IDIsKey(){
				    return false;
				}
				public Integer CUPS_IDLength(){
				    return 0;
				}
				public Integer CUPS_IDPrecision(){
				    return null;
				}
				public String CUPS_IDDefault(){
				
					return "";
				
				}
				public String CUPS_IDComment(){
				
				    return "";
				
				}
				public String CUPS_IDPattern(){
				
					return "";
				
				}
				public String CUPS_IDOriginalDbColumnName(){
				
					return "CUPS_ID";
				
				}

				
			    public Double VALOR;

				public Double getVALOR () {
					return this.VALOR;
				}

				public Boolean VALORIsNullable(){
				    return true;
				}
				public Boolean VALORIsKey(){
				    return false;
				}
				public Integer VALORLength(){
				    return 0;
				}
				public Integer VALORPrecision(){
				    return null;
				}
				public String VALORDefault(){
				
					return "";
				
				}
				public String VALORComment(){
				
				    return "";
				
				}
				public String VALORPattern(){
				
					return "";
				
				}
				public String VALOROriginalDbColumnName(){
				
					return "VALOR";
				
				}

				
			    public Integer CEBE_ID;

				public Integer getCEBE_ID () {
					return this.CEBE_ID;
				}

				public Boolean CEBE_IDIsNullable(){
				    return true;
				}
				public Boolean CEBE_IDIsKey(){
				    return false;
				}
				public Integer CEBE_IDLength(){
				    return null;
				}
				public Integer CEBE_IDPrecision(){
				    return null;
				}
				public String CEBE_IDDefault(){
				
					return null;
				
				}
				public String CEBE_IDComment(){
				
				    return "";
				
				}
				public String CEBE_IDPattern(){
				
					return "";
				
				}
				public String CEBE_IDOriginalDbColumnName(){
				
					return "CEBE_ID";
				
				}

				
			    public Integer CECO_ID;

				public Integer getCECO_ID () {
					return this.CECO_ID;
				}

				public Boolean CECO_IDIsNullable(){
				    return true;
				}
				public Boolean CECO_IDIsKey(){
				    return false;
				}
				public Integer CECO_IDLength(){
				    return null;
				}
				public Integer CECO_IDPrecision(){
				    return null;
				}
				public String CECO_IDDefault(){
				
					return null;
				
				}
				public String CECO_IDComment(){
				
				    return "";
				
				}
				public String CECO_IDPattern(){
				
					return "";
				
				}
				public String CECO_IDOriginalDbColumnName(){
				
					return "CECO_ID";
				
				}

				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_CEC_DISTRIBUCION_CI_DistribucionCI) {

        	try {

        		int length = 0;
		
						this.FUERZA_ID = readInteger(dis);
					
			        this.ESMID = dis.readInt();
					
						this.ESPECIALIDADES_ID = readInteger(dis);
					
			        this.CUPS_ID = dis.readInt();
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.VALOR = null;
           				} else {
           			    	this.VALOR = dis.readDouble();
           				}
					
						this.CEBE_ID = readInteger(dis);
					
						this.CECO_ID = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_CEC_DISTRIBUCION_CI_DistribucionCI) {

        	try {

        		int length = 0;
		
						this.FUERZA_ID = readInteger(dis);
					
			        this.ESMID = dis.readInt();
					
						this.ESPECIALIDADES_ID = readInteger(dis);
					
			        this.CUPS_ID = dis.readInt();
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.VALOR = null;
           				} else {
           			    	this.VALOR = dis.readDouble();
           				}
					
						this.CEBE_ID = readInteger(dis);
					
						this.CECO_ID = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.FUERZA_ID,dos);
					
					// int
				
		            	dos.writeInt(this.ESMID);
					
					// Integer
				
						writeInteger(this.ESPECIALIDADES_ID,dos);
					
					// int
				
		            	dos.writeInt(this.CUPS_ID);
					
					// Double
				
						if(this.VALOR == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.VALOR);
		            	}
					
					// Integer
				
						writeInteger(this.CEBE_ID,dos);
					
					// Integer
				
						writeInteger(this.CECO_ID,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.FUERZA_ID,dos);
					
					// int
				
		            	dos.writeInt(this.ESMID);
					
					// Integer
				
						writeInteger(this.ESPECIALIDADES_ID,dos);
					
					// int
				
		            	dos.writeInt(this.CUPS_ID);
					
					// Double
				
						if(this.VALOR == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.VALOR);
		            	}
					
					// Integer
				
						writeInteger(this.CEBE_ID,dos);
					
					// Integer
				
						writeInteger(this.CECO_ID,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("FUERZA_ID="+String.valueOf(FUERZA_ID));
		sb.append(",ESMID="+String.valueOf(ESMID));
		sb.append(",ESPECIALIDADES_ID="+String.valueOf(ESPECIALIDADES_ID));
		sb.append(",CUPS_ID="+String.valueOf(CUPS_ID));
		sb.append(",VALOR="+String.valueOf(VALOR));
		sb.append(",CEBE_ID="+String.valueOf(CEBE_ID));
		sb.append(",CECO_ID="+String.valueOf(CECO_ID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(TCV03Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class TCV01Struct implements routines.system.IPersistableRow<TCV01Struct> {
    final static byte[] commonByteArrayLock_CEC_DISTRIBUCION_CI_DistribucionCI = new byte[0];
    static byte[] commonByteArray_CEC_DISTRIBUCION_CI_DistribucionCI = new byte[0];

	
			    public Integer FUERZA_ID;

				public Integer getFUERZA_ID () {
					return this.FUERZA_ID;
				}

				public Boolean FUERZA_IDIsNullable(){
				    return true;
				}
				public Boolean FUERZA_IDIsKey(){
				    return false;
				}
				public Integer FUERZA_IDLength(){
				    return null;
				}
				public Integer FUERZA_IDPrecision(){
				    return null;
				}
				public String FUERZA_IDDefault(){
				
					return null;
				
				}
				public String FUERZA_IDComment(){
				
				    return "";
				
				}
				public String FUERZA_IDPattern(){
				
					return "";
				
				}
				public String FUERZA_IDOriginalDbColumnName(){
				
					return "FUERZA_ID";
				
				}

				
			    public int ESMID;

				public int getESMID () {
					return this.ESMID;
				}

				public Boolean ESMIDIsNullable(){
				    return false;
				}
				public Boolean ESMIDIsKey(){
				    return false;
				}
				public Integer ESMIDLength(){
				    return 0;
				}
				public Integer ESMIDPrecision(){
				    return null;
				}
				public String ESMIDDefault(){
				
					return "";
				
				}
				public String ESMIDComment(){
				
				    return "";
				
				}
				public String ESMIDPattern(){
				
					return "";
				
				}
				public String ESMIDOriginalDbColumnName(){
				
					return "ESMID";
				
				}

				
			    public Integer ESPECIALIDADES_ID;

				public Integer getESPECIALIDADES_ID () {
					return this.ESPECIALIDADES_ID;
				}

				public Boolean ESPECIALIDADES_IDIsNullable(){
				    return true;
				}
				public Boolean ESPECIALIDADES_IDIsKey(){
				    return false;
				}
				public Integer ESPECIALIDADES_IDLength(){
				    return 0;
				}
				public Integer ESPECIALIDADES_IDPrecision(){
				    return null;
				}
				public String ESPECIALIDADES_IDDefault(){
				
					return "";
				
				}
				public String ESPECIALIDADES_IDComment(){
				
				    return "";
				
				}
				public String ESPECIALIDADES_IDPattern(){
				
					return "";
				
				}
				public String ESPECIALIDADES_IDOriginalDbColumnName(){
				
					return "ESPECIALIDADES_ID";
				
				}

				
			    public int CUPS_ID;

				public int getCUPS_ID () {
					return this.CUPS_ID;
				}

				public Boolean CUPS_IDIsNullable(){
				    return false;
				}
				public Boolean CUPS_IDIsKey(){
				    return false;
				}
				public Integer CUPS_IDLength(){
				    return 0;
				}
				public Integer CUPS_IDPrecision(){
				    return null;
				}
				public String CUPS_IDDefault(){
				
					return "";
				
				}
				public String CUPS_IDComment(){
				
				    return "";
				
				}
				public String CUPS_IDPattern(){
				
					return "";
				
				}
				public String CUPS_IDOriginalDbColumnName(){
				
					return "CUPS_ID";
				
				}

				
			    public Double VALORCUPS;

				public Double getVALORCUPS () {
					return this.VALORCUPS;
				}

				public Boolean VALORCUPSIsNullable(){
				    return true;
				}
				public Boolean VALORCUPSIsKey(){
				    return false;
				}
				public Integer VALORCUPSLength(){
				    return 0;
				}
				public Integer VALORCUPSPrecision(){
				    return null;
				}
				public String VALORCUPSDefault(){
				
					return "";
				
				}
				public String VALORCUPSComment(){
				
				    return "";
				
				}
				public String VALORCUPSPattern(){
				
					return "";
				
				}
				public String VALORCUPSOriginalDbColumnName(){
				
					return "VALORCUPS";
				
				}

				
			    public Double PCECO;

				public Double getPCECO () {
					return this.PCECO;
				}

				public Boolean PCECOIsNullable(){
				    return true;
				}
				public Boolean PCECOIsKey(){
				    return false;
				}
				public Integer PCECOLength(){
				    return 0;
				}
				public Integer PCECOPrecision(){
				    return null;
				}
				public String PCECODefault(){
				
					return "";
				
				}
				public String PCECOComment(){
				
				    return "";
				
				}
				public String PCECOPattern(){
				
					return "";
				
				}
				public String PCECOOriginalDbColumnName(){
				
					return "PCECO";
				
				}

				
			    public Double PCUPS;

				public Double getPCUPS () {
					return this.PCUPS;
				}

				public Boolean PCUPSIsNullable(){
				    return true;
				}
				public Boolean PCUPSIsKey(){
				    return false;
				}
				public Integer PCUPSLength(){
				    return 0;
				}
				public Integer PCUPSPrecision(){
				    return null;
				}
				public String PCUPSDefault(){
				
					return "";
				
				}
				public String PCUPSComment(){
				
				    return "";
				
				}
				public String PCUPSPattern(){
				
					return "";
				
				}
				public String PCUPSOriginalDbColumnName(){
				
					return "PCUPS";
				
				}

				
			    public Double GGRL_DISAN_VALOR;

				public Double getGGRL_DISAN_VALOR () {
					return this.GGRL_DISAN_VALOR;
				}

				public Boolean GGRL_DISAN_VALORIsNullable(){
				    return true;
				}
				public Boolean GGRL_DISAN_VALORIsKey(){
				    return false;
				}
				public Integer GGRL_DISAN_VALORLength(){
				    return null;
				}
				public Integer GGRL_DISAN_VALORPrecision(){
				    return null;
				}
				public String GGRL_DISAN_VALORDefault(){
				
					return null;
				
				}
				public String GGRL_DISAN_VALORComment(){
				
				    return "";
				
				}
				public String GGRL_DISAN_VALORPattern(){
				
					return "";
				
				}
				public String GGRL_DISAN_VALOROriginalDbColumnName(){
				
					return "GGRL_DISAN_VALOR";
				
				}

				
			    public Double PESM;

				public Double getPESM () {
					return this.PESM;
				}

				public Boolean PESMIsNullable(){
				    return true;
				}
				public Boolean PESMIsKey(){
				    return false;
				}
				public Integer PESMLength(){
				    return 0;
				}
				public Integer PESMPrecision(){
				    return null;
				}
				public String PESMDefault(){
				
					return "";
				
				}
				public String PESMComment(){
				
				    return "";
				
				}
				public String PESMPattern(){
				
					return "";
				
				}
				public String PESMOriginalDbColumnName(){
				
					return "PESM";
				
				}

				
			    public Integer CEBE_ID;

				public Integer getCEBE_ID () {
					return this.CEBE_ID;
				}

				public Boolean CEBE_IDIsNullable(){
				    return true;
				}
				public Boolean CEBE_IDIsKey(){
				    return false;
				}
				public Integer CEBE_IDLength(){
				    return null;
				}
				public Integer CEBE_IDPrecision(){
				    return null;
				}
				public String CEBE_IDDefault(){
				
					return null;
				
				}
				public String CEBE_IDComment(){
				
				    return "";
				
				}
				public String CEBE_IDPattern(){
				
					return "";
				
				}
				public String CEBE_IDOriginalDbColumnName(){
				
					return "CEBE_ID";
				
				}

				
			    public Integer CECO_ID;

				public Integer getCECO_ID () {
					return this.CECO_ID;
				}

				public Boolean CECO_IDIsNullable(){
				    return true;
				}
				public Boolean CECO_IDIsKey(){
				    return false;
				}
				public Integer CECO_IDLength(){
				    return null;
				}
				public Integer CECO_IDPrecision(){
				    return null;
				}
				public String CECO_IDDefault(){
				
					return null;
				
				}
				public String CECO_IDComment(){
				
				    return "";
				
				}
				public String CECO_IDPattern(){
				
					return "";
				
				}
				public String CECO_IDOriginalDbColumnName(){
				
					return "CECO_ID";
				
				}

				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_CEC_DISTRIBUCION_CI_DistribucionCI) {

        	try {

        		int length = 0;
		
						this.FUERZA_ID = readInteger(dis);
					
			        this.ESMID = dis.readInt();
					
						this.ESPECIALIDADES_ID = readInteger(dis);
					
			        this.CUPS_ID = dis.readInt();
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.VALORCUPS = null;
           				} else {
           			    	this.VALORCUPS = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PCECO = null;
           				} else {
           			    	this.PCECO = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PCUPS = null;
           				} else {
           			    	this.PCUPS = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.GGRL_DISAN_VALOR = null;
           				} else {
           			    	this.GGRL_DISAN_VALOR = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PESM = null;
           				} else {
           			    	this.PESM = dis.readDouble();
           				}
					
						this.CEBE_ID = readInteger(dis);
					
						this.CECO_ID = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_CEC_DISTRIBUCION_CI_DistribucionCI) {

        	try {

        		int length = 0;
		
						this.FUERZA_ID = readInteger(dis);
					
			        this.ESMID = dis.readInt();
					
						this.ESPECIALIDADES_ID = readInteger(dis);
					
			        this.CUPS_ID = dis.readInt();
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.VALORCUPS = null;
           				} else {
           			    	this.VALORCUPS = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PCECO = null;
           				} else {
           			    	this.PCECO = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PCUPS = null;
           				} else {
           			    	this.PCUPS = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.GGRL_DISAN_VALOR = null;
           				} else {
           			    	this.GGRL_DISAN_VALOR = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PESM = null;
           				} else {
           			    	this.PESM = dis.readDouble();
           				}
					
						this.CEBE_ID = readInteger(dis);
					
						this.CECO_ID = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.FUERZA_ID,dos);
					
					// int
				
		            	dos.writeInt(this.ESMID);
					
					// Integer
				
						writeInteger(this.ESPECIALIDADES_ID,dos);
					
					// int
				
		            	dos.writeInt(this.CUPS_ID);
					
					// Double
				
						if(this.VALORCUPS == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.VALORCUPS);
		            	}
					
					// Double
				
						if(this.PCECO == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PCECO);
		            	}
					
					// Double
				
						if(this.PCUPS == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PCUPS);
		            	}
					
					// Double
				
						if(this.GGRL_DISAN_VALOR == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.GGRL_DISAN_VALOR);
		            	}
					
					// Double
				
						if(this.PESM == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PESM);
		            	}
					
					// Integer
				
						writeInteger(this.CEBE_ID,dos);
					
					// Integer
				
						writeInteger(this.CECO_ID,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.FUERZA_ID,dos);
					
					// int
				
		            	dos.writeInt(this.ESMID);
					
					// Integer
				
						writeInteger(this.ESPECIALIDADES_ID,dos);
					
					// int
				
		            	dos.writeInt(this.CUPS_ID);
					
					// Double
				
						if(this.VALORCUPS == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.VALORCUPS);
		            	}
					
					// Double
				
						if(this.PCECO == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PCECO);
		            	}
					
					// Double
				
						if(this.PCUPS == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PCUPS);
		            	}
					
					// Double
				
						if(this.GGRL_DISAN_VALOR == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.GGRL_DISAN_VALOR);
		            	}
					
					// Double
				
						if(this.PESM == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PESM);
		            	}
					
					// Integer
				
						writeInteger(this.CEBE_ID,dos);
					
					// Integer
				
						writeInteger(this.CECO_ID,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("FUERZA_ID="+String.valueOf(FUERZA_ID));
		sb.append(",ESMID="+String.valueOf(ESMID));
		sb.append(",ESPECIALIDADES_ID="+String.valueOf(ESPECIALIDADES_ID));
		sb.append(",CUPS_ID="+String.valueOf(CUPS_ID));
		sb.append(",VALORCUPS="+String.valueOf(VALORCUPS));
		sb.append(",PCECO="+String.valueOf(PCECO));
		sb.append(",PCUPS="+String.valueOf(PCUPS));
		sb.append(",GGRL_DISAN_VALOR="+String.valueOf(GGRL_DISAN_VALOR));
		sb.append(",PESM="+String.valueOf(PESM));
		sb.append(",CEBE_ID="+String.valueOf(CEBE_ID));
		sb.append(",CECO_ID="+String.valueOf(CECO_ID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(TCV01Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class TCV02Struct implements routines.system.IPersistableRow<TCV02Struct> {
    final static byte[] commonByteArrayLock_CEC_DISTRIBUCION_CI_DistribucionCI = new byte[0];
    static byte[] commonByteArray_CEC_DISTRIBUCION_CI_DistribucionCI = new byte[0];

	
			    public Integer FUERZA_ID;

				public Integer getFUERZA_ID () {
					return this.FUERZA_ID;
				}

				public Boolean FUERZA_IDIsNullable(){
				    return true;
				}
				public Boolean FUERZA_IDIsKey(){
				    return false;
				}
				public Integer FUERZA_IDLength(){
				    return null;
				}
				public Integer FUERZA_IDPrecision(){
				    return null;
				}
				public String FUERZA_IDDefault(){
				
					return null;
				
				}
				public String FUERZA_IDComment(){
				
				    return "";
				
				}
				public String FUERZA_IDPattern(){
				
					return "";
				
				}
				public String FUERZA_IDOriginalDbColumnName(){
				
					return "FUERZA_ID";
				
				}

				
			    public int ESMID;

				public int getESMID () {
					return this.ESMID;
				}

				public Boolean ESMIDIsNullable(){
				    return false;
				}
				public Boolean ESMIDIsKey(){
				    return false;
				}
				public Integer ESMIDLength(){
				    return 0;
				}
				public Integer ESMIDPrecision(){
				    return null;
				}
				public String ESMIDDefault(){
				
					return "";
				
				}
				public String ESMIDComment(){
				
				    return "";
				
				}
				public String ESMIDPattern(){
				
					return "";
				
				}
				public String ESMIDOriginalDbColumnName(){
				
					return "ESMID";
				
				}

				
			    public Integer ESPECIALIDADES_ID;

				public Integer getESPECIALIDADES_ID () {
					return this.ESPECIALIDADES_ID;
				}

				public Boolean ESPECIALIDADES_IDIsNullable(){
				    return true;
				}
				public Boolean ESPECIALIDADES_IDIsKey(){
				    return false;
				}
				public Integer ESPECIALIDADES_IDLength(){
				    return 0;
				}
				public Integer ESPECIALIDADES_IDPrecision(){
				    return null;
				}
				public String ESPECIALIDADES_IDDefault(){
				
					return "";
				
				}
				public String ESPECIALIDADES_IDComment(){
				
				    return "";
				
				}
				public String ESPECIALIDADES_IDPattern(){
				
					return "";
				
				}
				public String ESPECIALIDADES_IDOriginalDbColumnName(){
				
					return "ESPECIALIDADES_ID";
				
				}

				
			    public int CUPS_ID;

				public int getCUPS_ID () {
					return this.CUPS_ID;
				}

				public Boolean CUPS_IDIsNullable(){
				    return false;
				}
				public Boolean CUPS_IDIsKey(){
				    return false;
				}
				public Integer CUPS_IDLength(){
				    return 0;
				}
				public Integer CUPS_IDPrecision(){
				    return null;
				}
				public String CUPS_IDDefault(){
				
					return "";
				
				}
				public String CUPS_IDComment(){
				
				    return "";
				
				}
				public String CUPS_IDPattern(){
				
					return "";
				
				}
				public String CUPS_IDOriginalDbColumnName(){
				
					return "CUPS_ID";
				
				}

				
			    public Double VALORCUPS;

				public Double getVALORCUPS () {
					return this.VALORCUPS;
				}

				public Boolean VALORCUPSIsNullable(){
				    return true;
				}
				public Boolean VALORCUPSIsKey(){
				    return false;
				}
				public Integer VALORCUPSLength(){
				    return 0;
				}
				public Integer VALORCUPSPrecision(){
				    return null;
				}
				public String VALORCUPSDefault(){
				
					return "";
				
				}
				public String VALORCUPSComment(){
				
				    return "";
				
				}
				public String VALORCUPSPattern(){
				
					return "";
				
				}
				public String VALORCUPSOriginalDbColumnName(){
				
					return "VALORCUPS";
				
				}

				
			    public Double PCECO;

				public Double getPCECO () {
					return this.PCECO;
				}

				public Boolean PCECOIsNullable(){
				    return true;
				}
				public Boolean PCECOIsKey(){
				    return false;
				}
				public Integer PCECOLength(){
				    return 0;
				}
				public Integer PCECOPrecision(){
				    return null;
				}
				public String PCECODefault(){
				
					return "";
				
				}
				public String PCECOComment(){
				
				    return "";
				
				}
				public String PCECOPattern(){
				
					return "";
				
				}
				public String PCECOOriginalDbColumnName(){
				
					return "PCECO";
				
				}

				
			    public Double PCUPS;

				public Double getPCUPS () {
					return this.PCUPS;
				}

				public Boolean PCUPSIsNullable(){
				    return true;
				}
				public Boolean PCUPSIsKey(){
				    return false;
				}
				public Integer PCUPSLength(){
				    return 0;
				}
				public Integer PCUPSPrecision(){
				    return null;
				}
				public String PCUPSDefault(){
				
					return "";
				
				}
				public String PCUPSComment(){
				
				    return "";
				
				}
				public String PCUPSPattern(){
				
					return "";
				
				}
				public String PCUPSOriginalDbColumnName(){
				
					return "PCUPS";
				
				}

				
			    public Double DEP_DISAN_VALOR;

				public Double getDEP_DISAN_VALOR () {
					return this.DEP_DISAN_VALOR;
				}

				public Boolean DEP_DISAN_VALORIsNullable(){
				    return true;
				}
				public Boolean DEP_DISAN_VALORIsKey(){
				    return false;
				}
				public Integer DEP_DISAN_VALORLength(){
				    return null;
				}
				public Integer DEP_DISAN_VALORPrecision(){
				    return null;
				}
				public String DEP_DISAN_VALORDefault(){
				
					return null;
				
				}
				public String DEP_DISAN_VALORComment(){
				
				    return "";
				
				}
				public String DEP_DISAN_VALORPattern(){
				
					return "";
				
				}
				public String DEP_DISAN_VALOROriginalDbColumnName(){
				
					return "DEP_DISAN_VALOR";
				
				}

				
			    public Double PESM;

				public Double getPESM () {
					return this.PESM;
				}

				public Boolean PESMIsNullable(){
				    return true;
				}
				public Boolean PESMIsKey(){
				    return false;
				}
				public Integer PESMLength(){
				    return 0;
				}
				public Integer PESMPrecision(){
				    return null;
				}
				public String PESMDefault(){
				
					return "";
				
				}
				public String PESMComment(){
				
				    return "";
				
				}
				public String PESMPattern(){
				
					return "";
				
				}
				public String PESMOriginalDbColumnName(){
				
					return "PESM";
				
				}

				
			    public Integer CEBE_ID;

				public Integer getCEBE_ID () {
					return this.CEBE_ID;
				}

				public Boolean CEBE_IDIsNullable(){
				    return true;
				}
				public Boolean CEBE_IDIsKey(){
				    return false;
				}
				public Integer CEBE_IDLength(){
				    return null;
				}
				public Integer CEBE_IDPrecision(){
				    return null;
				}
				public String CEBE_IDDefault(){
				
					return null;
				
				}
				public String CEBE_IDComment(){
				
				    return "";
				
				}
				public String CEBE_IDPattern(){
				
					return "";
				
				}
				public String CEBE_IDOriginalDbColumnName(){
				
					return "CEBE_ID";
				
				}

				
			    public Integer CECO_ID;

				public Integer getCECO_ID () {
					return this.CECO_ID;
				}

				public Boolean CECO_IDIsNullable(){
				    return true;
				}
				public Boolean CECO_IDIsKey(){
				    return false;
				}
				public Integer CECO_IDLength(){
				    return null;
				}
				public Integer CECO_IDPrecision(){
				    return null;
				}
				public String CECO_IDDefault(){
				
					return null;
				
				}
				public String CECO_IDComment(){
				
				    return "";
				
				}
				public String CECO_IDPattern(){
				
					return "";
				
				}
				public String CECO_IDOriginalDbColumnName(){
				
					return "CECO_ID";
				
				}

				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_CEC_DISTRIBUCION_CI_DistribucionCI) {

        	try {

        		int length = 0;
		
						this.FUERZA_ID = readInteger(dis);
					
			        this.ESMID = dis.readInt();
					
						this.ESPECIALIDADES_ID = readInteger(dis);
					
			        this.CUPS_ID = dis.readInt();
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.VALORCUPS = null;
           				} else {
           			    	this.VALORCUPS = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PCECO = null;
           				} else {
           			    	this.PCECO = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PCUPS = null;
           				} else {
           			    	this.PCUPS = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.DEP_DISAN_VALOR = null;
           				} else {
           			    	this.DEP_DISAN_VALOR = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PESM = null;
           				} else {
           			    	this.PESM = dis.readDouble();
           				}
					
						this.CEBE_ID = readInteger(dis);
					
						this.CECO_ID = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_CEC_DISTRIBUCION_CI_DistribucionCI) {

        	try {

        		int length = 0;
		
						this.FUERZA_ID = readInteger(dis);
					
			        this.ESMID = dis.readInt();
					
						this.ESPECIALIDADES_ID = readInteger(dis);
					
			        this.CUPS_ID = dis.readInt();
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.VALORCUPS = null;
           				} else {
           			    	this.VALORCUPS = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PCECO = null;
           				} else {
           			    	this.PCECO = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PCUPS = null;
           				} else {
           			    	this.PCUPS = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.DEP_DISAN_VALOR = null;
           				} else {
           			    	this.DEP_DISAN_VALOR = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PESM = null;
           				} else {
           			    	this.PESM = dis.readDouble();
           				}
					
						this.CEBE_ID = readInteger(dis);
					
						this.CECO_ID = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.FUERZA_ID,dos);
					
					// int
				
		            	dos.writeInt(this.ESMID);
					
					// Integer
				
						writeInteger(this.ESPECIALIDADES_ID,dos);
					
					// int
				
		            	dos.writeInt(this.CUPS_ID);
					
					// Double
				
						if(this.VALORCUPS == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.VALORCUPS);
		            	}
					
					// Double
				
						if(this.PCECO == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PCECO);
		            	}
					
					// Double
				
						if(this.PCUPS == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PCUPS);
		            	}
					
					// Double
				
						if(this.DEP_DISAN_VALOR == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.DEP_DISAN_VALOR);
		            	}
					
					// Double
				
						if(this.PESM == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PESM);
		            	}
					
					// Integer
				
						writeInteger(this.CEBE_ID,dos);
					
					// Integer
				
						writeInteger(this.CECO_ID,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.FUERZA_ID,dos);
					
					// int
				
		            	dos.writeInt(this.ESMID);
					
					// Integer
				
						writeInteger(this.ESPECIALIDADES_ID,dos);
					
					// int
				
		            	dos.writeInt(this.CUPS_ID);
					
					// Double
				
						if(this.VALORCUPS == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.VALORCUPS);
		            	}
					
					// Double
				
						if(this.PCECO == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PCECO);
		            	}
					
					// Double
				
						if(this.PCUPS == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PCUPS);
		            	}
					
					// Double
				
						if(this.DEP_DISAN_VALOR == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.DEP_DISAN_VALOR);
		            	}
					
					// Double
				
						if(this.PESM == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PESM);
		            	}
					
					// Integer
				
						writeInteger(this.CEBE_ID,dos);
					
					// Integer
				
						writeInteger(this.CECO_ID,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("FUERZA_ID="+String.valueOf(FUERZA_ID));
		sb.append(",ESMID="+String.valueOf(ESMID));
		sb.append(",ESPECIALIDADES_ID="+String.valueOf(ESPECIALIDADES_ID));
		sb.append(",CUPS_ID="+String.valueOf(CUPS_ID));
		sb.append(",VALORCUPS="+String.valueOf(VALORCUPS));
		sb.append(",PCECO="+String.valueOf(PCECO));
		sb.append(",PCUPS="+String.valueOf(PCUPS));
		sb.append(",DEP_DISAN_VALOR="+String.valueOf(DEP_DISAN_VALOR));
		sb.append(",PESM="+String.valueOf(PESM));
		sb.append(",CEBE_ID="+String.valueOf(CEBE_ID));
		sb.append(",CECO_ID="+String.valueOf(CECO_ID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(TCV02Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row8Struct implements routines.system.IPersistableRow<row8Struct> {
    final static byte[] commonByteArrayLock_CEC_DISTRIBUCION_CI_DistribucionCI = new byte[0];
    static byte[] commonByteArray_CEC_DISTRIBUCION_CI_DistribucionCI = new byte[0];

	
			    public Integer FUERZA_ID;

				public Integer getFUERZA_ID () {
					return this.FUERZA_ID;
				}

				public Boolean FUERZA_IDIsNullable(){
				    return true;
				}
				public Boolean FUERZA_IDIsKey(){
				    return false;
				}
				public Integer FUERZA_IDLength(){
				    return 0;
				}
				public Integer FUERZA_IDPrecision(){
				    return null;
				}
				public String FUERZA_IDDefault(){
				
					return "";
				
				}
				public String FUERZA_IDComment(){
				
				    return "";
				
				}
				public String FUERZA_IDPattern(){
				
					return "";
				
				}
				public String FUERZA_IDOriginalDbColumnName(){
				
					return "FUERZA_ID";
				
				}

				
			    public int ESMID;

				public int getESMID () {
					return this.ESMID;
				}

				public Boolean ESMIDIsNullable(){
				    return false;
				}
				public Boolean ESMIDIsKey(){
				    return false;
				}
				public Integer ESMIDLength(){
				    return 0;
				}
				public Integer ESMIDPrecision(){
				    return null;
				}
				public String ESMIDDefault(){
				
					return "";
				
				}
				public String ESMIDComment(){
				
				    return "";
				
				}
				public String ESMIDPattern(){
				
					return "";
				
				}
				public String ESMIDOriginalDbColumnName(){
				
					return "ESMID";
				
				}

				
			    public Double PESM;

				public Double getPESM () {
					return this.PESM;
				}

				public Boolean PESMIsNullable(){
				    return true;
				}
				public Boolean PESMIsKey(){
				    return false;
				}
				public Integer PESMLength(){
				    return 0;
				}
				public Integer PESMPrecision(){
				    return null;
				}
				public String PESMDefault(){
				
					return "";
				
				}
				public String PESMComment(){
				
				    return "";
				
				}
				public String PESMPattern(){
				
					return "";
				
				}
				public String PESMOriginalDbColumnName(){
				
					return "PESM";
				
				}

				
			    public int CECO_ID;

				public int getCECO_ID () {
					return this.CECO_ID;
				}

				public Boolean CECO_IDIsNullable(){
				    return false;
				}
				public Boolean CECO_IDIsKey(){
				    return false;
				}
				public Integer CECO_IDLength(){
				    return 0;
				}
				public Integer CECO_IDPrecision(){
				    return null;
				}
				public String CECO_IDDefault(){
				
					return "";
				
				}
				public String CECO_IDComment(){
				
				    return "";
				
				}
				public String CECO_IDPattern(){
				
					return "";
				
				}
				public String CECO_IDOriginalDbColumnName(){
				
					return "CECO_ID";
				
				}

				
			    public double PCECO;

				public double getPCECO () {
					return this.PCECO;
				}

				public Boolean PCECOIsNullable(){
				    return false;
				}
				public Boolean PCECOIsKey(){
				    return false;
				}
				public Integer PCECOLength(){
				    return 0;
				}
				public Integer PCECOPrecision(){
				    return null;
				}
				public String PCECODefault(){
				
					return "";
				
				}
				public String PCECOComment(){
				
				    return "";
				
				}
				public String PCECOPattern(){
				
					return "";
				
				}
				public String PCECOOriginalDbColumnName(){
				
					return "PCECO";
				
				}

				
			    public int CUPS_ID;

				public int getCUPS_ID () {
					return this.CUPS_ID;
				}

				public Boolean CUPS_IDIsNullable(){
				    return false;
				}
				public Boolean CUPS_IDIsKey(){
				    return false;
				}
				public Integer CUPS_IDLength(){
				    return 0;
				}
				public Integer CUPS_IDPrecision(){
				    return null;
				}
				public String CUPS_IDDefault(){
				
					return "";
				
				}
				public String CUPS_IDComment(){
				
				    return "";
				
				}
				public String CUPS_IDPattern(){
				
					return "";
				
				}
				public String CUPS_IDOriginalDbColumnName(){
				
					return "CUPS_ID";
				
				}

				
			    public double PCUPS;

				public double getPCUPS () {
					return this.PCUPS;
				}

				public Boolean PCUPSIsNullable(){
				    return false;
				}
				public Boolean PCUPSIsKey(){
				    return false;
				}
				public Integer PCUPSLength(){
				    return 0;
				}
				public Integer PCUPSPrecision(){
				    return null;
				}
				public String PCUPSDefault(){
				
					return "";
				
				}
				public String PCUPSComment(){
				
				    return "";
				
				}
				public String PCUPSPattern(){
				
					return "";
				
				}
				public String PCUPSOriginalDbColumnName(){
				
					return "PCUPS";
				
				}

				
			    public int CEBE_ID;

				public int getCEBE_ID () {
					return this.CEBE_ID;
				}

				public Boolean CEBE_IDIsNullable(){
				    return false;
				}
				public Boolean CEBE_IDIsKey(){
				    return false;
				}
				public Integer CEBE_IDLength(){
				    return 0;
				}
				public Integer CEBE_IDPrecision(){
				    return null;
				}
				public String CEBE_IDDefault(){
				
					return "";
				
				}
				public String CEBE_IDComment(){
				
				    return "";
				
				}
				public String CEBE_IDPattern(){
				
					return "";
				
				}
				public String CEBE_IDOriginalDbColumnName(){
				
					return "CEBE_ID";
				
				}

				
			    public Integer ESPECIALIDADES_ID;

				public Integer getESPECIALIDADES_ID () {
					return this.ESPECIALIDADES_ID;
				}

				public Boolean ESPECIALIDADES_IDIsNullable(){
				    return true;
				}
				public Boolean ESPECIALIDADES_IDIsKey(){
				    return false;
				}
				public Integer ESPECIALIDADES_IDLength(){
				    return 0;
				}
				public Integer ESPECIALIDADES_IDPrecision(){
				    return null;
				}
				public String ESPECIALIDADES_IDDefault(){
				
					return "";
				
				}
				public String ESPECIALIDADES_IDComment(){
				
				    return "";
				
				}
				public String ESPECIALIDADES_IDPattern(){
				
					return "";
				
				}
				public String ESPECIALIDADES_IDOriginalDbColumnName(){
				
					return "ESPECIALIDADES_ID";
				
				}

				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_CEC_DISTRIBUCION_CI_DistribucionCI) {

        	try {

        		int length = 0;
		
						this.FUERZA_ID = readInteger(dis);
					
			        this.ESMID = dis.readInt();
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PESM = null;
           				} else {
           			    	this.PESM = dis.readDouble();
           				}
					
			        this.CECO_ID = dis.readInt();
					
			        this.PCECO = dis.readDouble();
					
			        this.CUPS_ID = dis.readInt();
					
			        this.PCUPS = dis.readDouble();
					
			        this.CEBE_ID = dis.readInt();
					
						this.ESPECIALIDADES_ID = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_CEC_DISTRIBUCION_CI_DistribucionCI) {

        	try {

        		int length = 0;
		
						this.FUERZA_ID = readInteger(dis);
					
			        this.ESMID = dis.readInt();
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PESM = null;
           				} else {
           			    	this.PESM = dis.readDouble();
           				}
					
			        this.CECO_ID = dis.readInt();
					
			        this.PCECO = dis.readDouble();
					
			        this.CUPS_ID = dis.readInt();
					
			        this.PCUPS = dis.readDouble();
					
			        this.CEBE_ID = dis.readInt();
					
						this.ESPECIALIDADES_ID = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.FUERZA_ID,dos);
					
					// int
				
		            	dos.writeInt(this.ESMID);
					
					// Double
				
						if(this.PESM == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PESM);
		            	}
					
					// int
				
		            	dos.writeInt(this.CECO_ID);
					
					// double
				
		            	dos.writeDouble(this.PCECO);
					
					// int
				
		            	dos.writeInt(this.CUPS_ID);
					
					// double
				
		            	dos.writeDouble(this.PCUPS);
					
					// int
				
		            	dos.writeInt(this.CEBE_ID);
					
					// Integer
				
						writeInteger(this.ESPECIALIDADES_ID,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.FUERZA_ID,dos);
					
					// int
				
		            	dos.writeInt(this.ESMID);
					
					// Double
				
						if(this.PESM == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PESM);
		            	}
					
					// int
				
		            	dos.writeInt(this.CECO_ID);
					
					// double
				
		            	dos.writeDouble(this.PCECO);
					
					// int
				
		            	dos.writeInt(this.CUPS_ID);
					
					// double
				
		            	dos.writeDouble(this.PCUPS);
					
					// int
				
		            	dos.writeInt(this.CEBE_ID);
					
					// Integer
				
						writeInteger(this.ESPECIALIDADES_ID,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("FUERZA_ID="+String.valueOf(FUERZA_ID));
		sb.append(",ESMID="+String.valueOf(ESMID));
		sb.append(",PESM="+String.valueOf(PESM));
		sb.append(",CECO_ID="+String.valueOf(CECO_ID));
		sb.append(",PCECO="+String.valueOf(PCECO));
		sb.append(",CUPS_ID="+String.valueOf(CUPS_ID));
		sb.append(",PCUPS="+String.valueOf(PCUPS));
		sb.append(",CEBE_ID="+String.valueOf(CEBE_ID));
		sb.append(",ESPECIALIDADES_ID="+String.valueOf(ESPECIALIDADES_ID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row8Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class OnRowsEndStructtSortRow_1 implements routines.system.IPersistableRow<OnRowsEndStructtSortRow_1> {
    final static byte[] commonByteArrayLock_CEC_DISTRIBUCION_CI_DistribucionCI = new byte[0];
    static byte[] commonByteArray_CEC_DISTRIBUCION_CI_DistribucionCI = new byte[0];

	
			    public Integer FUERZA_ID;

				public Integer getFUERZA_ID () {
					return this.FUERZA_ID;
				}

				public Boolean FUERZA_IDIsNullable(){
				    return true;
				}
				public Boolean FUERZA_IDIsKey(){
				    return false;
				}
				public Integer FUERZA_IDLength(){
				    return 0;
				}
				public Integer FUERZA_IDPrecision(){
				    return null;
				}
				public String FUERZA_IDDefault(){
				
					return "";
				
				}
				public String FUERZA_IDComment(){
				
				    return "";
				
				}
				public String FUERZA_IDPattern(){
				
					return "";
				
				}
				public String FUERZA_IDOriginalDbColumnName(){
				
					return "FUERZA_ID";
				
				}

				
			    public int ESMID;

				public int getESMID () {
					return this.ESMID;
				}

				public Boolean ESMIDIsNullable(){
				    return false;
				}
				public Boolean ESMIDIsKey(){
				    return false;
				}
				public Integer ESMIDLength(){
				    return 0;
				}
				public Integer ESMIDPrecision(){
				    return null;
				}
				public String ESMIDDefault(){
				
					return "";
				
				}
				public String ESMIDComment(){
				
				    return "";
				
				}
				public String ESMIDPattern(){
				
					return "";
				
				}
				public String ESMIDOriginalDbColumnName(){
				
					return "ESMID";
				
				}

				
			    public Double PESM;

				public Double getPESM () {
					return this.PESM;
				}

				public Boolean PESMIsNullable(){
				    return true;
				}
				public Boolean PESMIsKey(){
				    return false;
				}
				public Integer PESMLength(){
				    return 0;
				}
				public Integer PESMPrecision(){
				    return null;
				}
				public String PESMDefault(){
				
					return "";
				
				}
				public String PESMComment(){
				
				    return "";
				
				}
				public String PESMPattern(){
				
					return "";
				
				}
				public String PESMOriginalDbColumnName(){
				
					return "PESM";
				
				}

				
			    public int CECO_ID;

				public int getCECO_ID () {
					return this.CECO_ID;
				}

				public Boolean CECO_IDIsNullable(){
				    return false;
				}
				public Boolean CECO_IDIsKey(){
				    return false;
				}
				public Integer CECO_IDLength(){
				    return 0;
				}
				public Integer CECO_IDPrecision(){
				    return null;
				}
				public String CECO_IDDefault(){
				
					return "";
				
				}
				public String CECO_IDComment(){
				
				    return "";
				
				}
				public String CECO_IDPattern(){
				
					return "";
				
				}
				public String CECO_IDOriginalDbColumnName(){
				
					return "CECO_ID";
				
				}

				
			    public double PCECO;

				public double getPCECO () {
					return this.PCECO;
				}

				public Boolean PCECOIsNullable(){
				    return false;
				}
				public Boolean PCECOIsKey(){
				    return false;
				}
				public Integer PCECOLength(){
				    return 0;
				}
				public Integer PCECOPrecision(){
				    return null;
				}
				public String PCECODefault(){
				
					return "";
				
				}
				public String PCECOComment(){
				
				    return "";
				
				}
				public String PCECOPattern(){
				
					return "";
				
				}
				public String PCECOOriginalDbColumnName(){
				
					return "PCECO";
				
				}

				
			    public int CUPS_ID;

				public int getCUPS_ID () {
					return this.CUPS_ID;
				}

				public Boolean CUPS_IDIsNullable(){
				    return false;
				}
				public Boolean CUPS_IDIsKey(){
				    return false;
				}
				public Integer CUPS_IDLength(){
				    return 0;
				}
				public Integer CUPS_IDPrecision(){
				    return null;
				}
				public String CUPS_IDDefault(){
				
					return "";
				
				}
				public String CUPS_IDComment(){
				
				    return "";
				
				}
				public String CUPS_IDPattern(){
				
					return "";
				
				}
				public String CUPS_IDOriginalDbColumnName(){
				
					return "CUPS_ID";
				
				}

				
			    public double PCUPS;

				public double getPCUPS () {
					return this.PCUPS;
				}

				public Boolean PCUPSIsNullable(){
				    return false;
				}
				public Boolean PCUPSIsKey(){
				    return false;
				}
				public Integer PCUPSLength(){
				    return 0;
				}
				public Integer PCUPSPrecision(){
				    return null;
				}
				public String PCUPSDefault(){
				
					return "";
				
				}
				public String PCUPSComment(){
				
				    return "";
				
				}
				public String PCUPSPattern(){
				
					return "";
				
				}
				public String PCUPSOriginalDbColumnName(){
				
					return "PCUPS";
				
				}

				
			    public int CEBE_ID;

				public int getCEBE_ID () {
					return this.CEBE_ID;
				}

				public Boolean CEBE_IDIsNullable(){
				    return false;
				}
				public Boolean CEBE_IDIsKey(){
				    return false;
				}
				public Integer CEBE_IDLength(){
				    return 0;
				}
				public Integer CEBE_IDPrecision(){
				    return null;
				}
				public String CEBE_IDDefault(){
				
					return "";
				
				}
				public String CEBE_IDComment(){
				
				    return "";
				
				}
				public String CEBE_IDPattern(){
				
					return "";
				
				}
				public String CEBE_IDOriginalDbColumnName(){
				
					return "CEBE_ID";
				
				}

				
			    public Integer ESPECIALIDADES_ID;

				public Integer getESPECIALIDADES_ID () {
					return this.ESPECIALIDADES_ID;
				}

				public Boolean ESPECIALIDADES_IDIsNullable(){
				    return true;
				}
				public Boolean ESPECIALIDADES_IDIsKey(){
				    return false;
				}
				public Integer ESPECIALIDADES_IDLength(){
				    return 0;
				}
				public Integer ESPECIALIDADES_IDPrecision(){
				    return null;
				}
				public String ESPECIALIDADES_IDDefault(){
				
					return "";
				
				}
				public String ESPECIALIDADES_IDComment(){
				
				    return "";
				
				}
				public String ESPECIALIDADES_IDPattern(){
				
					return "";
				
				}
				public String ESPECIALIDADES_IDOriginalDbColumnName(){
				
					return "ESPECIALIDADES_ID";
				
				}

				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_CEC_DISTRIBUCION_CI_DistribucionCI) {

        	try {

        		int length = 0;
		
						this.FUERZA_ID = readInteger(dis);
					
			        this.ESMID = dis.readInt();
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PESM = null;
           				} else {
           			    	this.PESM = dis.readDouble();
           				}
					
			        this.CECO_ID = dis.readInt();
					
			        this.PCECO = dis.readDouble();
					
			        this.CUPS_ID = dis.readInt();
					
			        this.PCUPS = dis.readDouble();
					
			        this.CEBE_ID = dis.readInt();
					
						this.ESPECIALIDADES_ID = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_CEC_DISTRIBUCION_CI_DistribucionCI) {

        	try {

        		int length = 0;
		
						this.FUERZA_ID = readInteger(dis);
					
			        this.ESMID = dis.readInt();
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PESM = null;
           				} else {
           			    	this.PESM = dis.readDouble();
           				}
					
			        this.CECO_ID = dis.readInt();
					
			        this.PCECO = dis.readDouble();
					
			        this.CUPS_ID = dis.readInt();
					
			        this.PCUPS = dis.readDouble();
					
			        this.CEBE_ID = dis.readInt();
					
						this.ESPECIALIDADES_ID = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.FUERZA_ID,dos);
					
					// int
				
		            	dos.writeInt(this.ESMID);
					
					// Double
				
						if(this.PESM == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PESM);
		            	}
					
					// int
				
		            	dos.writeInt(this.CECO_ID);
					
					// double
				
		            	dos.writeDouble(this.PCECO);
					
					// int
				
		            	dos.writeInt(this.CUPS_ID);
					
					// double
				
		            	dos.writeDouble(this.PCUPS);
					
					// int
				
		            	dos.writeInt(this.CEBE_ID);
					
					// Integer
				
						writeInteger(this.ESPECIALIDADES_ID,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.FUERZA_ID,dos);
					
					// int
				
		            	dos.writeInt(this.ESMID);
					
					// Double
				
						if(this.PESM == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PESM);
		            	}
					
					// int
				
		            	dos.writeInt(this.CECO_ID);
					
					// double
				
		            	dos.writeDouble(this.PCECO);
					
					// int
				
		            	dos.writeInt(this.CUPS_ID);
					
					// double
				
		            	dos.writeDouble(this.PCUPS);
					
					// int
				
		            	dos.writeInt(this.CEBE_ID);
					
					// Integer
				
						writeInteger(this.ESPECIALIDADES_ID,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("FUERZA_ID="+String.valueOf(FUERZA_ID));
		sb.append(",ESMID="+String.valueOf(ESMID));
		sb.append(",PESM="+String.valueOf(PESM));
		sb.append(",CECO_ID="+String.valueOf(CECO_ID));
		sb.append(",PCECO="+String.valueOf(PCECO));
		sb.append(",CUPS_ID="+String.valueOf(CUPS_ID));
		sb.append(",PCUPS="+String.valueOf(PCUPS));
		sb.append(",CEBE_ID="+String.valueOf(CEBE_ID));
		sb.append(",ESPECIALIDADES_ID="+String.valueOf(ESPECIALIDADES_ID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(OnRowsEndStructtSortRow_1 other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row5Struct implements routines.system.IPersistableRow<row5Struct> {
    final static byte[] commonByteArrayLock_CEC_DISTRIBUCION_CI_DistribucionCI = new byte[0];
    static byte[] commonByteArray_CEC_DISTRIBUCION_CI_DistribucionCI = new byte[0];

	
			    public Integer FUERZA_ID;

				public Integer getFUERZA_ID () {
					return this.FUERZA_ID;
				}

				public Boolean FUERZA_IDIsNullable(){
				    return true;
				}
				public Boolean FUERZA_IDIsKey(){
				    return false;
				}
				public Integer FUERZA_IDLength(){
				    return 0;
				}
				public Integer FUERZA_IDPrecision(){
				    return null;
				}
				public String FUERZA_IDDefault(){
				
					return "";
				
				}
				public String FUERZA_IDComment(){
				
				    return "";
				
				}
				public String FUERZA_IDPattern(){
				
					return "";
				
				}
				public String FUERZA_IDOriginalDbColumnName(){
				
					return "FUERZA_ID";
				
				}

				
			    public int ESMID;

				public int getESMID () {
					return this.ESMID;
				}

				public Boolean ESMIDIsNullable(){
				    return false;
				}
				public Boolean ESMIDIsKey(){
				    return false;
				}
				public Integer ESMIDLength(){
				    return 0;
				}
				public Integer ESMIDPrecision(){
				    return null;
				}
				public String ESMIDDefault(){
				
					return "";
				
				}
				public String ESMIDComment(){
				
				    return "";
				
				}
				public String ESMIDPattern(){
				
					return "";
				
				}
				public String ESMIDOriginalDbColumnName(){
				
					return "ESMID";
				
				}

				
			    public Double PESM;

				public Double getPESM () {
					return this.PESM;
				}

				public Boolean PESMIsNullable(){
				    return true;
				}
				public Boolean PESMIsKey(){
				    return false;
				}
				public Integer PESMLength(){
				    return 0;
				}
				public Integer PESMPrecision(){
				    return null;
				}
				public String PESMDefault(){
				
					return "";
				
				}
				public String PESMComment(){
				
				    return "";
				
				}
				public String PESMPattern(){
				
					return "";
				
				}
				public String PESMOriginalDbColumnName(){
				
					return "PESM";
				
				}

				
			    public int CECO_ID;

				public int getCECO_ID () {
					return this.CECO_ID;
				}

				public Boolean CECO_IDIsNullable(){
				    return false;
				}
				public Boolean CECO_IDIsKey(){
				    return false;
				}
				public Integer CECO_IDLength(){
				    return 0;
				}
				public Integer CECO_IDPrecision(){
				    return null;
				}
				public String CECO_IDDefault(){
				
					return "";
				
				}
				public String CECO_IDComment(){
				
				    return "";
				
				}
				public String CECO_IDPattern(){
				
					return "";
				
				}
				public String CECO_IDOriginalDbColumnName(){
				
					return "CECO_ID";
				
				}

				
			    public double PCECO;

				public double getPCECO () {
					return this.PCECO;
				}

				public Boolean PCECOIsNullable(){
				    return false;
				}
				public Boolean PCECOIsKey(){
				    return false;
				}
				public Integer PCECOLength(){
				    return 0;
				}
				public Integer PCECOPrecision(){
				    return null;
				}
				public String PCECODefault(){
				
					return "";
				
				}
				public String PCECOComment(){
				
				    return "";
				
				}
				public String PCECOPattern(){
				
					return "";
				
				}
				public String PCECOOriginalDbColumnName(){
				
					return "PCECO";
				
				}

				
			    public int CUPS_ID;

				public int getCUPS_ID () {
					return this.CUPS_ID;
				}

				public Boolean CUPS_IDIsNullable(){
				    return false;
				}
				public Boolean CUPS_IDIsKey(){
				    return false;
				}
				public Integer CUPS_IDLength(){
				    return 0;
				}
				public Integer CUPS_IDPrecision(){
				    return null;
				}
				public String CUPS_IDDefault(){
				
					return "";
				
				}
				public String CUPS_IDComment(){
				
				    return "";
				
				}
				public String CUPS_IDPattern(){
				
					return "";
				
				}
				public String CUPS_IDOriginalDbColumnName(){
				
					return "CUPS_ID";
				
				}

				
			    public double PCUPS;

				public double getPCUPS () {
					return this.PCUPS;
				}

				public Boolean PCUPSIsNullable(){
				    return false;
				}
				public Boolean PCUPSIsKey(){
				    return false;
				}
				public Integer PCUPSLength(){
				    return 0;
				}
				public Integer PCUPSPrecision(){
				    return null;
				}
				public String PCUPSDefault(){
				
					return "";
				
				}
				public String PCUPSComment(){
				
				    return "";
				
				}
				public String PCUPSPattern(){
				
					return "";
				
				}
				public String PCUPSOriginalDbColumnName(){
				
					return "PCUPS";
				
				}

				
			    public int CEBE_ID;

				public int getCEBE_ID () {
					return this.CEBE_ID;
				}

				public Boolean CEBE_IDIsNullable(){
				    return false;
				}
				public Boolean CEBE_IDIsKey(){
				    return false;
				}
				public Integer CEBE_IDLength(){
				    return 0;
				}
				public Integer CEBE_IDPrecision(){
				    return null;
				}
				public String CEBE_IDDefault(){
				
					return "";
				
				}
				public String CEBE_IDComment(){
				
				    return "";
				
				}
				public String CEBE_IDPattern(){
				
					return "";
				
				}
				public String CEBE_IDOriginalDbColumnName(){
				
					return "CEBE_ID";
				
				}

				
			    public Integer ESPECIALIDADES_ID;

				public Integer getESPECIALIDADES_ID () {
					return this.ESPECIALIDADES_ID;
				}

				public Boolean ESPECIALIDADES_IDIsNullable(){
				    return true;
				}
				public Boolean ESPECIALIDADES_IDIsKey(){
				    return false;
				}
				public Integer ESPECIALIDADES_IDLength(){
				    return 0;
				}
				public Integer ESPECIALIDADES_IDPrecision(){
				    return null;
				}
				public String ESPECIALIDADES_IDDefault(){
				
					return "";
				
				}
				public String ESPECIALIDADES_IDComment(){
				
				    return "";
				
				}
				public String ESPECIALIDADES_IDPattern(){
				
					return "";
				
				}
				public String ESPECIALIDADES_IDOriginalDbColumnName(){
				
					return "ESPECIALIDADES_ID";
				
				}

				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_CEC_DISTRIBUCION_CI_DistribucionCI) {

        	try {

        		int length = 0;
		
						this.FUERZA_ID = readInteger(dis);
					
			        this.ESMID = dis.readInt();
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PESM = null;
           				} else {
           			    	this.PESM = dis.readDouble();
           				}
					
			        this.CECO_ID = dis.readInt();
					
			        this.PCECO = dis.readDouble();
					
			        this.CUPS_ID = dis.readInt();
					
			        this.PCUPS = dis.readDouble();
					
			        this.CEBE_ID = dis.readInt();
					
						this.ESPECIALIDADES_ID = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_CEC_DISTRIBUCION_CI_DistribucionCI) {

        	try {

        		int length = 0;
		
						this.FUERZA_ID = readInteger(dis);
					
			        this.ESMID = dis.readInt();
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PESM = null;
           				} else {
           			    	this.PESM = dis.readDouble();
           				}
					
			        this.CECO_ID = dis.readInt();
					
			        this.PCECO = dis.readDouble();
					
			        this.CUPS_ID = dis.readInt();
					
			        this.PCUPS = dis.readDouble();
					
			        this.CEBE_ID = dis.readInt();
					
						this.ESPECIALIDADES_ID = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.FUERZA_ID,dos);
					
					// int
				
		            	dos.writeInt(this.ESMID);
					
					// Double
				
						if(this.PESM == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PESM);
		            	}
					
					// int
				
		            	dos.writeInt(this.CECO_ID);
					
					// double
				
		            	dos.writeDouble(this.PCECO);
					
					// int
				
		            	dos.writeInt(this.CUPS_ID);
					
					// double
				
		            	dos.writeDouble(this.PCUPS);
					
					// int
				
		            	dos.writeInt(this.CEBE_ID);
					
					// Integer
				
						writeInteger(this.ESPECIALIDADES_ID,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.FUERZA_ID,dos);
					
					// int
				
		            	dos.writeInt(this.ESMID);
					
					// Double
				
						if(this.PESM == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PESM);
		            	}
					
					// int
				
		            	dos.writeInt(this.CECO_ID);
					
					// double
				
		            	dos.writeDouble(this.PCECO);
					
					// int
				
		            	dos.writeInt(this.CUPS_ID);
					
					// double
				
		            	dos.writeDouble(this.PCUPS);
					
					// int
				
		            	dos.writeInt(this.CEBE_ID);
					
					// Integer
				
						writeInteger(this.ESPECIALIDADES_ID,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("FUERZA_ID="+String.valueOf(FUERZA_ID));
		sb.append(",ESMID="+String.valueOf(ESMID));
		sb.append(",PESM="+String.valueOf(PESM));
		sb.append(",CECO_ID="+String.valueOf(CECO_ID));
		sb.append(",PCECO="+String.valueOf(PCECO));
		sb.append(",CUPS_ID="+String.valueOf(CUPS_ID));
		sb.append(",PCUPS="+String.valueOf(PCUPS));
		sb.append(",CEBE_ID="+String.valueOf(CEBE_ID));
		sb.append(",ESPECIALIDADES_ID="+String.valueOf(ESPECIALIDADES_ID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row5Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class after_tHashInput_1Struct implements routines.system.IPersistableRow<after_tHashInput_1Struct> {
    final static byte[] commonByteArrayLock_CEC_DISTRIBUCION_CI_DistribucionCI = new byte[0];
    static byte[] commonByteArray_CEC_DISTRIBUCION_CI_DistribucionCI = new byte[0];

	
			    public Integer FUERZA_ID;

				public Integer getFUERZA_ID () {
					return this.FUERZA_ID;
				}

				public Boolean FUERZA_IDIsNullable(){
				    return true;
				}
				public Boolean FUERZA_IDIsKey(){
				    return false;
				}
				public Integer FUERZA_IDLength(){
				    return 0;
				}
				public Integer FUERZA_IDPrecision(){
				    return null;
				}
				public String FUERZA_IDDefault(){
				
					return "";
				
				}
				public String FUERZA_IDComment(){
				
				    return "";
				
				}
				public String FUERZA_IDPattern(){
				
					return "";
				
				}
				public String FUERZA_IDOriginalDbColumnName(){
				
					return "FUERZA_ID";
				
				}

				
			    public int ESMID;

				public int getESMID () {
					return this.ESMID;
				}

				public Boolean ESMIDIsNullable(){
				    return false;
				}
				public Boolean ESMIDIsKey(){
				    return false;
				}
				public Integer ESMIDLength(){
				    return 0;
				}
				public Integer ESMIDPrecision(){
				    return null;
				}
				public String ESMIDDefault(){
				
					return "";
				
				}
				public String ESMIDComment(){
				
				    return "";
				
				}
				public String ESMIDPattern(){
				
					return "";
				
				}
				public String ESMIDOriginalDbColumnName(){
				
					return "ESMID";
				
				}

				
			    public Double PESM;

				public Double getPESM () {
					return this.PESM;
				}

				public Boolean PESMIsNullable(){
				    return true;
				}
				public Boolean PESMIsKey(){
				    return false;
				}
				public Integer PESMLength(){
				    return 0;
				}
				public Integer PESMPrecision(){
				    return null;
				}
				public String PESMDefault(){
				
					return "";
				
				}
				public String PESMComment(){
				
				    return "";
				
				}
				public String PESMPattern(){
				
					return "";
				
				}
				public String PESMOriginalDbColumnName(){
				
					return "PESM";
				
				}

				
			    public int CECO_ID;

				public int getCECO_ID () {
					return this.CECO_ID;
				}

				public Boolean CECO_IDIsNullable(){
				    return false;
				}
				public Boolean CECO_IDIsKey(){
				    return false;
				}
				public Integer CECO_IDLength(){
				    return 0;
				}
				public Integer CECO_IDPrecision(){
				    return null;
				}
				public String CECO_IDDefault(){
				
					return "";
				
				}
				public String CECO_IDComment(){
				
				    return "";
				
				}
				public String CECO_IDPattern(){
				
					return "";
				
				}
				public String CECO_IDOriginalDbColumnName(){
				
					return "CECO_ID";
				
				}

				
			    public double PCECO;

				public double getPCECO () {
					return this.PCECO;
				}

				public Boolean PCECOIsNullable(){
				    return false;
				}
				public Boolean PCECOIsKey(){
				    return false;
				}
				public Integer PCECOLength(){
				    return 0;
				}
				public Integer PCECOPrecision(){
				    return null;
				}
				public String PCECODefault(){
				
					return "";
				
				}
				public String PCECOComment(){
				
				    return "";
				
				}
				public String PCECOPattern(){
				
					return "";
				
				}
				public String PCECOOriginalDbColumnName(){
				
					return "PCECO";
				
				}

				
			    public int CUPS_ID;

				public int getCUPS_ID () {
					return this.CUPS_ID;
				}

				public Boolean CUPS_IDIsNullable(){
				    return false;
				}
				public Boolean CUPS_IDIsKey(){
				    return false;
				}
				public Integer CUPS_IDLength(){
				    return 0;
				}
				public Integer CUPS_IDPrecision(){
				    return null;
				}
				public String CUPS_IDDefault(){
				
					return "";
				
				}
				public String CUPS_IDComment(){
				
				    return "";
				
				}
				public String CUPS_IDPattern(){
				
					return "";
				
				}
				public String CUPS_IDOriginalDbColumnName(){
				
					return "CUPS_ID";
				
				}

				
			    public double PCUPS;

				public double getPCUPS () {
					return this.PCUPS;
				}

				public Boolean PCUPSIsNullable(){
				    return false;
				}
				public Boolean PCUPSIsKey(){
				    return false;
				}
				public Integer PCUPSLength(){
				    return 0;
				}
				public Integer PCUPSPrecision(){
				    return null;
				}
				public String PCUPSDefault(){
				
					return "";
				
				}
				public String PCUPSComment(){
				
				    return "";
				
				}
				public String PCUPSPattern(){
				
					return "";
				
				}
				public String PCUPSOriginalDbColumnName(){
				
					return "PCUPS";
				
				}

				
			    public int CEBE_ID;

				public int getCEBE_ID () {
					return this.CEBE_ID;
				}

				public Boolean CEBE_IDIsNullable(){
				    return false;
				}
				public Boolean CEBE_IDIsKey(){
				    return false;
				}
				public Integer CEBE_IDLength(){
				    return 0;
				}
				public Integer CEBE_IDPrecision(){
				    return null;
				}
				public String CEBE_IDDefault(){
				
					return "";
				
				}
				public String CEBE_IDComment(){
				
				    return "";
				
				}
				public String CEBE_IDPattern(){
				
					return "";
				
				}
				public String CEBE_IDOriginalDbColumnName(){
				
					return "CEBE_ID";
				
				}

				
			    public Integer ESPECIALIDADES_ID;

				public Integer getESPECIALIDADES_ID () {
					return this.ESPECIALIDADES_ID;
				}

				public Boolean ESPECIALIDADES_IDIsNullable(){
				    return true;
				}
				public Boolean ESPECIALIDADES_IDIsKey(){
				    return false;
				}
				public Integer ESPECIALIDADES_IDLength(){
				    return 0;
				}
				public Integer ESPECIALIDADES_IDPrecision(){
				    return null;
				}
				public String ESPECIALIDADES_IDDefault(){
				
					return "";
				
				}
				public String ESPECIALIDADES_IDComment(){
				
				    return "";
				
				}
				public String ESPECIALIDADES_IDPattern(){
				
					return "";
				
				}
				public String ESPECIALIDADES_IDOriginalDbColumnName(){
				
					return "ESPECIALIDADES_ID";
				
				}

				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_CEC_DISTRIBUCION_CI_DistribucionCI) {

        	try {

        		int length = 0;
		
						this.FUERZA_ID = readInteger(dis);
					
			        this.ESMID = dis.readInt();
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PESM = null;
           				} else {
           			    	this.PESM = dis.readDouble();
           				}
					
			        this.CECO_ID = dis.readInt();
					
			        this.PCECO = dis.readDouble();
					
			        this.CUPS_ID = dis.readInt();
					
			        this.PCUPS = dis.readDouble();
					
			        this.CEBE_ID = dis.readInt();
					
						this.ESPECIALIDADES_ID = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_CEC_DISTRIBUCION_CI_DistribucionCI) {

        	try {

        		int length = 0;
		
						this.FUERZA_ID = readInteger(dis);
					
			        this.ESMID = dis.readInt();
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PESM = null;
           				} else {
           			    	this.PESM = dis.readDouble();
           				}
					
			        this.CECO_ID = dis.readInt();
					
			        this.PCECO = dis.readDouble();
					
			        this.CUPS_ID = dis.readInt();
					
			        this.PCUPS = dis.readDouble();
					
			        this.CEBE_ID = dis.readInt();
					
						this.ESPECIALIDADES_ID = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.FUERZA_ID,dos);
					
					// int
				
		            	dos.writeInt(this.ESMID);
					
					// Double
				
						if(this.PESM == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PESM);
		            	}
					
					// int
				
		            	dos.writeInt(this.CECO_ID);
					
					// double
				
		            	dos.writeDouble(this.PCECO);
					
					// int
				
		            	dos.writeInt(this.CUPS_ID);
					
					// double
				
		            	dos.writeDouble(this.PCUPS);
					
					// int
				
		            	dos.writeInt(this.CEBE_ID);
					
					// Integer
				
						writeInteger(this.ESPECIALIDADES_ID,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.FUERZA_ID,dos);
					
					// int
				
		            	dos.writeInt(this.ESMID);
					
					// Double
				
						if(this.PESM == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PESM);
		            	}
					
					// int
				
		            	dos.writeInt(this.CECO_ID);
					
					// double
				
		            	dos.writeDouble(this.PCECO);
					
					// int
				
		            	dos.writeInt(this.CUPS_ID);
					
					// double
				
		            	dos.writeDouble(this.PCUPS);
					
					// int
				
		            	dos.writeInt(this.CEBE_ID);
					
					// Integer
				
						writeInteger(this.ESPECIALIDADES_ID,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("FUERZA_ID="+String.valueOf(FUERZA_ID));
		sb.append(",ESMID="+String.valueOf(ESMID));
		sb.append(",PESM="+String.valueOf(PESM));
		sb.append(",CECO_ID="+String.valueOf(CECO_ID));
		sb.append(",PCECO="+String.valueOf(PCECO));
		sb.append(",CUPS_ID="+String.valueOf(CUPS_ID));
		sb.append(",PCUPS="+String.valueOf(PCUPS));
		sb.append(",CEBE_ID="+String.valueOf(CEBE_ID));
		sb.append(",ESPECIALIDADES_ID="+String.valueOf(ESPECIALIDADES_ID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(after_tHashInput_1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tHashInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tHashInput_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

		String currentVirtualComponent = null;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;


		tHashInput_5Process(globalMap);
		tHashInput_2Process(globalMap);
		tHashInput_3Process(globalMap);
		tHashInput_4Process(globalMap);
		tHashInput_9Process(globalMap);
		tHashInput_8Process(globalMap);

		row5Struct row5 = new row5Struct();
row8Struct row8 = new row8Struct();
TCV01Struct TCV01 = new TCV01Struct();
TCV03Struct TCV03 = new TCV03Struct();
TCV02Struct TCV02 = new TCV02Struct();
TCV04Struct TCV04 = new TCV04Struct();




	
	/**
	 * [tSortRow_1_SortOut begin ] start
	 */

	

	
		
		ok_Hash.put("tSortRow_1_SortOut", false);
		start_Hash.put("tSortRow_1_SortOut", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tSortRow_1";
	
	currentComponent="tSortRow_1_SortOut";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row5");
					}
				
		int tos_count_tSortRow_1_SortOut = 0;
		


class Comparablerow5Struct extends row5Struct implements Comparable<Comparablerow5Struct> {
	
	public int compareTo(Comparablerow5Struct other) {

		if(this.ESMID != other.ESMID){
						
				return this.ESMID > other.ESMID ? 1 : -1;
							
		}
		if(this.CECO_ID != other.CECO_ID){
						
				return this.CECO_ID > other.CECO_ID ? 1 : -1;
							
		}
		return 0;
	}
}

java.util.List<Comparablerow5Struct> list_tSortRow_1_SortOut = new java.util.ArrayList<Comparablerow5Struct>();


 



/**
 * [tSortRow_1_SortOut begin ] stop
 */



	
	/**
	 * [tHashInput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_1", false);
		start_Hash.put("tHashInput_1", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_1";
	
	
		int tos_count_tHashInput_1 = 0;
		


int nb_line_tHashInput_1 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_1=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row3Struct> tHashFile_tHashInput_1 = mf_tHashInput_1.getAdvancedMemoryHashFile("tHashFile_DistribucionCI_" + pid +"_tHashOutput_2");
if(tHashFile_tHashInput_1==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<row3Struct> iterator_tHashInput_1 = tHashFile_tHashInput_1.iterator();
while (iterator_tHashInput_1.hasNext()) {
    row3Struct next_tHashInput_1 = iterator_tHashInput_1.next();

	row5.FUERZA_ID = next_tHashInput_1.FUERZA_ID;
	row5.ESMID = next_tHashInput_1.ESMID;
	row5.PESM = next_tHashInput_1.PESM;
	row5.CECO_ID = next_tHashInput_1.CECO_ID;
	row5.PCECO = next_tHashInput_1.PCECO;
	row5.CUPS_ID = next_tHashInput_1.CUPS_ID;
	row5.PCUPS = next_tHashInput_1.PCUPS;
	row5.CEBE_ID = next_tHashInput_1.CEBE_ID;
	row5.ESPECIALIDADES_ID = next_tHashInput_1.ESPECIALIDADES_ID;

 



/**
 * [tHashInput_1 begin ] stop
 */
	
	/**
	 * [tHashInput_1 main ] start
	 */

	

	
	
	currentComponent="tHashInput_1";
	
	

 


	tos_count_tHashInput_1++;

/**
 * [tHashInput_1 main ] stop
 */
	
	/**
	 * [tHashInput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashInput_1";
	
	

 



/**
 * [tHashInput_1 process_data_begin ] stop
 */

	
	/**
	 * [tSortRow_1_SortOut main ] start
	 */

	

	
	
		currentVirtualComponent = "tSortRow_1";
	
	currentComponent="tSortRow_1_SortOut";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row5"
						
						);
					}
					



	Comparablerow5Struct arrayRowtSortRow_1_SortOut = new Comparablerow5Struct();

	arrayRowtSortRow_1_SortOut.FUERZA_ID = row5.FUERZA_ID;
	arrayRowtSortRow_1_SortOut.ESMID = row5.ESMID;
	arrayRowtSortRow_1_SortOut.PESM = row5.PESM;
	arrayRowtSortRow_1_SortOut.CECO_ID = row5.CECO_ID;
	arrayRowtSortRow_1_SortOut.PCECO = row5.PCECO;
	arrayRowtSortRow_1_SortOut.CUPS_ID = row5.CUPS_ID;
	arrayRowtSortRow_1_SortOut.PCUPS = row5.PCUPS;
	arrayRowtSortRow_1_SortOut.CEBE_ID = row5.CEBE_ID;
	arrayRowtSortRow_1_SortOut.ESPECIALIDADES_ID = row5.ESPECIALIDADES_ID;	
	list_tSortRow_1_SortOut.add(arrayRowtSortRow_1_SortOut);

 


	tos_count_tSortRow_1_SortOut++;

/**
 * [tSortRow_1_SortOut main ] stop
 */
	
	/**
	 * [tSortRow_1_SortOut process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tSortRow_1";
	
	currentComponent="tSortRow_1_SortOut";
	
	

 



/**
 * [tSortRow_1_SortOut process_data_begin ] stop
 */
	
	/**
	 * [tSortRow_1_SortOut process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tSortRow_1";
	
	currentComponent="tSortRow_1_SortOut";
	
	

 



/**
 * [tSortRow_1_SortOut process_data_end ] stop
 */



	
	/**
	 * [tHashInput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashInput_1";
	
	

 



/**
 * [tHashInput_1 process_data_end ] stop
 */
	
	/**
	 * [tHashInput_1 end ] start
	 */

	

	
	
	currentComponent="tHashInput_1";
	
	
    

		
			nb_line_tHashInput_1++;
		}	
    		
    		mf_tHashInput_1.clearCache("tHashFile_DistribucionCI_" + pid +"_tHashOutput_2");
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_DistribucionCI_" + pid +"_tHashOutput_2");
	


	globalMap.put("tHashInput_1_NB_LINE", nb_line_tHashInput_1);       

 

ok_Hash.put("tHashInput_1", true);
end_Hash.put("tHashInput_1", System.currentTimeMillis());




/**
 * [tHashInput_1 end ] stop
 */

	
	/**
	 * [tSortRow_1_SortOut end ] start
	 */

	

	
	
		currentVirtualComponent = "tSortRow_1";
	
	currentComponent="tSortRow_1_SortOut";
	
	

row5Struct[] array_tSortRow_1_SortOut = list_tSortRow_1_SortOut.toArray(new Comparablerow5Struct[0]);

java.util.Arrays.sort(array_tSortRow_1_SortOut);

globalMap.put("tSortRow_1",array_tSortRow_1_SortOut);


				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row5");
			  	}
			  	
 

ok_Hash.put("tSortRow_1_SortOut", true);
end_Hash.put("tSortRow_1_SortOut", System.currentTimeMillis());




/**
 * [tSortRow_1_SortOut end ] stop
 */




	
	/**
	 * [tHashOutput_7 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashOutput_7", false);
		start_Hash.put("tHashOutput_7", System.currentTimeMillis());
		
	
	currentComponent="tHashOutput_7";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"TCV03");
					}
				
		int tos_count_tHashOutput_7 = 0;
		



org.talend.designer.components.hashfile.common.MapHashFile mf_tHashOutput_7=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();    
		org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<TCV03Struct> tHashFile_tHashOutput_7 = null;
		String hashKey_tHashOutput_7 = "tHashFile_DistribucionCI_" + pid + "_tHashOutput_7";
			synchronized(org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.get(hashKey_tHashOutput_7)){
			    if(mf_tHashOutput_7.getResourceMap().get(hashKey_tHashOutput_7) == null){
	      		    mf_tHashOutput_7.getResourceMap().put(hashKey_tHashOutput_7, new org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<TCV03Struct>(org.talend.designer.components.hashfile.common.MATCHING_MODE.KEEP_ALL));
	      		    tHashFile_tHashOutput_7 = mf_tHashOutput_7.getResourceMap().get(hashKey_tHashOutput_7);
			    }else{
			    	tHashFile_tHashOutput_7 = mf_tHashOutput_7.getResourceMap().get(hashKey_tHashOutput_7);
			    }
			}
        int nb_line_tHashOutput_7 = 0;

 



/**
 * [tHashOutput_7 begin ] stop
 */



	
	/**
	 * [tMap_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_2", false);
		start_Hash.put("tMap_2", System.currentTimeMillis());
		
	
	currentComponent="tMap_2";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"TCV01");
					}
				
		int tos_count_tMap_2 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row11Struct> tHash_Lookup_row11 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row11Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row11Struct>) 
					globalMap.get( "tHash_Lookup_row11" ))
					;					
					
	

row11Struct row11HashKey = new row11Struct();
row11Struct row11Default = new row11Struct();
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row10Struct> tHash_Lookup_row10 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row10Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row10Struct>) 
					globalMap.get( "tHash_Lookup_row10" ))
					;					
					
	

row10Struct row10HashKey = new row10Struct();
row10Struct row10Default = new row10Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_2__Struct  {
	double GGRL;
	double DIST;
}
Var__tMap_2__Struct Var__tMap_2 = new Var__tMap_2__Struct();
// ###############################

// ###############################
// # Outputs initialization
TCV03Struct TCV03_tmp = new TCV03Struct();
// ###############################

        
        



        









 



/**
 * [tMap_2 begin ] stop
 */





	
	/**
	 * [tHashOutput_8 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashOutput_8", false);
		start_Hash.put("tHashOutput_8", System.currentTimeMillis());
		
	
	currentComponent="tHashOutput_8";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"TCV04");
					}
				
		int tos_count_tHashOutput_8 = 0;
		



org.talend.designer.components.hashfile.common.MapHashFile mf_tHashOutput_8=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();    
		org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<TCV04Struct> tHashFile_tHashOutput_8 = null;
		String hashKey_tHashOutput_8 = "tHashFile_DistribucionCI_" + pid + "_tHashOutput_8";
			synchronized(org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.get(hashKey_tHashOutput_8)){
			    if(mf_tHashOutput_8.getResourceMap().get(hashKey_tHashOutput_8) == null){
	      		    mf_tHashOutput_8.getResourceMap().put(hashKey_tHashOutput_8, new org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<TCV04Struct>(org.talend.designer.components.hashfile.common.MATCHING_MODE.KEEP_ALL));
	      		    tHashFile_tHashOutput_8 = mf_tHashOutput_8.getResourceMap().get(hashKey_tHashOutput_8);
			    }else{
			    	tHashFile_tHashOutput_8 = mf_tHashOutput_8.getResourceMap().get(hashKey_tHashOutput_8);
			    }
			}
        int nb_line_tHashOutput_8 = 0;

 



/**
 * [tHashOutput_8 begin ] stop
 */



	
	/**
	 * [tMap_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_3", false);
		start_Hash.put("tMap_3", System.currentTimeMillis());
		
	
	currentComponent="tMap_3";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"TCV02");
					}
				
		int tos_count_tMap_3 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row12Struct> tHash_Lookup_row12 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row12Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row12Struct>) 
					globalMap.get( "tHash_Lookup_row12" ))
					;					
					
	

row12Struct row12HashKey = new row12Struct();
row12Struct row12Default = new row12Struct();
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row21Struct> tHash_Lookup_row21 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row21Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row21Struct>) 
					globalMap.get( "tHash_Lookup_row21" ))
					;					
					
	

row21Struct row21HashKey = new row21Struct();
row21Struct row21Default = new row21Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_3__Struct  {
	double DEP;
	double DIST;
}
Var__tMap_3__Struct Var__tMap_3 = new Var__tMap_3__Struct();
// ###############################

// ###############################
// # Outputs initialization
TCV04Struct TCV04_tmp = new TCV04Struct();
// ###############################

        
        



        









 



/**
 * [tMap_3 begin ] stop
 */



	
	/**
	 * [tMap_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_1", false);
		start_Hash.put("tMap_1", System.currentTimeMillis());
		
	
	currentComponent="tMap_1";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row8");
					}
				
		int tos_count_tMap_1 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row14Struct> tHash_Lookup_row14 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row14Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row14Struct>) 
					globalMap.get( "tHash_Lookup_row14" ))
					;					
					
	

row14Struct row14HashKey = new row14Struct();
row14Struct row14Default = new row14Struct();
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row17Struct> tHash_Lookup_row17 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row17Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row17Struct>) 
					globalMap.get( "tHash_Lookup_row17" ))
					;					
					
	

row17Struct row17HashKey = new row17Struct();
row17Struct row17Default = new row17Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_1__Struct  {
}
Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
// ###############################

// ###############################
// # Outputs initialization
TCV01Struct TCV01_tmp = new TCV01Struct();
TCV02Struct TCV02_tmp = new TCV02Struct();
// ###############################

        
        



        









 



/**
 * [tMap_1 begin ] stop
 */



	
	/**
	 * [tSortRow_1_SortIn begin ] start
	 */

	

	
		
		ok_Hash.put("tSortRow_1_SortIn", false);
		start_Hash.put("tSortRow_1_SortIn", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tSortRow_1";
	
	currentComponent="tSortRow_1_SortIn";
	
	
		int tos_count_tSortRow_1_SortIn = 0;
		


row5Struct[] array_tSortRow_1_SortIn = (row5Struct[]) globalMap.remove("tSortRow_1");

int nb_line_tSortRow_1_SortIn = 0;

row5Struct current_tSortRow_1_SortIn = null;

for(int i_tSortRow_1_SortIn = 0; i_tSortRow_1_SortIn < array_tSortRow_1_SortIn.length; i_tSortRow_1_SortIn++){
	current_tSortRow_1_SortIn = array_tSortRow_1_SortIn[i_tSortRow_1_SortIn];
	row8.FUERZA_ID = current_tSortRow_1_SortIn.FUERZA_ID;
	row8.ESMID = current_tSortRow_1_SortIn.ESMID;
	row8.PESM = current_tSortRow_1_SortIn.PESM;
	row8.CECO_ID = current_tSortRow_1_SortIn.CECO_ID;
	row8.PCECO = current_tSortRow_1_SortIn.PCECO;
	row8.CUPS_ID = current_tSortRow_1_SortIn.CUPS_ID;
	row8.PCUPS = current_tSortRow_1_SortIn.PCUPS;
	row8.CEBE_ID = current_tSortRow_1_SortIn.CEBE_ID;
	row8.ESPECIALIDADES_ID = current_tSortRow_1_SortIn.ESPECIALIDADES_ID;
	// increase number of line sorted
	nb_line_tSortRow_1_SortIn++;

 



/**
 * [tSortRow_1_SortIn begin ] stop
 */
	
	/**
	 * [tSortRow_1_SortIn main ] start
	 */

	

	
	
		currentVirtualComponent = "tSortRow_1";
	
	currentComponent="tSortRow_1_SortIn";
	
	

 


	tos_count_tSortRow_1_SortIn++;

/**
 * [tSortRow_1_SortIn main ] stop
 */
	
	/**
	 * [tSortRow_1_SortIn process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tSortRow_1";
	
	currentComponent="tSortRow_1_SortIn";
	
	

 



/**
 * [tSortRow_1_SortIn process_data_begin ] stop
 */

	
	/**
	 * [tMap_1 main ] start
	 */

	

	
	
	currentComponent="tMap_1";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row8"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;
		
						row14Struct row14 = null;
					
						row17Struct row17 = null;
					
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_1 = false;
		boolean mainRowRejected_tMap_1 = false;
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row14" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow14 = false;
       		  	    	
       		  	    	
 							row14Struct row14ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_1) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_1 = false;
								
	                        		    	Object exprKeyValue_row14__FUERZA_ID = row8.FUERZA_ID ;
	                        		    	if(exprKeyValue_row14__FUERZA_ID == null) {
	                        		    		hasCasePrimitiveKeyWithNull_tMap_1 = true;
	                        		    	} else {
                        		    			row14HashKey.FUERZA_ID = (int)(Integer) exprKeyValue_row14__FUERZA_ID;
                        		    		}
                        		    		

								
		                        	row14HashKey.hashCodeDirty = true;
                        		
	  					
	  							
	
		  							if(!hasCasePrimitiveKeyWithNull_tMap_1) { // G_TM_M_091
		  							
			  					
			  					
			  					
	  					
		  							tHash_Lookup_row14.lookup( row14HashKey );

	  							

	  							

			  						} // G_TM_M_091
			  						
			  					

 								
								  
								  if(hasCasePrimitiveKeyWithNull_tMap_1 || !tHash_Lookup_row14.hasNext()) { // G_TM_M_090

  								
		  				
	  								
						
									
	
		  								forceLooprow14 = true;
	  					
  									
  									  		
 								
								  
								  } // G_TM_M_090

  								



							} // G_TM_M_020
			           		  	  
							
								
								else { // G 20 - G 21
   									forceLooprow14 = true;
			           		  	} // G 21
                    		  	
                    		

							
                    		  	 
							

								while ((tHash_Lookup_row14 != null && tHash_Lookup_row14.hasNext()) || forceLooprow14) { // G_TM_M_043

								
									 // CALL close loop of lookup 'row14'
									
                    		  	 
							   
                    		  	 
	       		  	    	row14Struct fromLookup_row14 = null;
							row14 = row14Default;
										 
							
								
								if(!forceLooprow14) { // G 46
								
							
								 
							
								
								fromLookup_row14 = tHash_Lookup_row14.next();

							

							if(fromLookup_row14 != null) {
								row14 = fromLookup_row14;
							}
							
							
							
			  							
								
	                    		  	
		                    
	                    	
	                    		} // G 46
	                    		  	
								forceLooprow14 = false;
									 	
							
	            	
	           	
	            	
	            

				///////////////////////////////////////////////
				// Starting Lookup Table "row17" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow17 = false;
       		  	    	
       		  	    	
 							row17Struct row17ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_1) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_1 = false;
								
	                        		    	Object exprKeyValue_row17__FUERZA_ID = row8.FUERZA_ID ;
	                        		    	if(exprKeyValue_row17__FUERZA_ID == null) {
	                        		    		hasCasePrimitiveKeyWithNull_tMap_1 = true;
	                        		    	} else {
                        		    			row17HashKey.FUERZA_ID = (int)(Integer) exprKeyValue_row17__FUERZA_ID;
                        		    		}
                        		    		

								
		                        	row17HashKey.hashCodeDirty = true;
                        		
	  					
	  							
	
		  							if(!hasCasePrimitiveKeyWithNull_tMap_1) { // G_TM_M_091
		  							
			  					
			  					
			  					
	  					
		  							tHash_Lookup_row17.lookup( row17HashKey );

	  							

	  							

			  						} // G_TM_M_091
			  						
			  					

 								
								  
								  if(hasCasePrimitiveKeyWithNull_tMap_1 || !tHash_Lookup_row17.hasNext()) { // G_TM_M_090

  								
		  				
	  								
						
									
	
		  								forceLooprow17 = true;
	  					
  									
  									  		
 								
								  
								  } // G_TM_M_090

  								



							} // G_TM_M_020
			           		  	  
							
								
								else { // G 20 - G 21
   									forceLooprow17 = true;
			           		  	} // G 21
                    		  	
                    		

							
                    		  	 
							

								while ((tHash_Lookup_row17 != null && tHash_Lookup_row17.hasNext()) || forceLooprow17) { // G_TM_M_043

								
									 // CALL close loop of lookup 'row17'
									
                    		  	 
							   
                    		  	 
	       		  	    	row17Struct fromLookup_row17 = null;
							row17 = row17Default;
										 
							
								
								if(!forceLooprow17) { // G 46
								
							
								 
							
								
								fromLookup_row17 = tHash_Lookup_row17.next();

							

							if(fromLookup_row17 != null) {
								row17 = fromLookup_row17;
							}
							
							
							
			  							
								
	                    		  	
		                    
	                    	
	                    		} // G 46
	                    		  	
								forceLooprow17 = false;
									 	
							
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
        // ###############################
        // # Output tables

TCV01 = null;
TCV02 = null;


// # Output table : 'TCV01'
TCV01_tmp.FUERZA_ID = row8.FUERZA_ID ;
TCV01_tmp.ESMID = row8.ESMID ;
TCV01_tmp.ESPECIALIDADES_ID = row8.ESPECIALIDADES_ID ;
TCV01_tmp.CUPS_ID = row8.CUPS_ID ;
TCV01_tmp.VALORCUPS = row14.GGRL_DISAN_VALOR != null ? row14.GGRL_DISAN_VALOR*(row8.PESM /100)*(row8.PCECO/100)*(row8.PCUPS/100) : 0 ;
TCV01_tmp.PCECO = row8.PCECO ;
TCV01_tmp.PCUPS = row8.PCUPS ;
TCV01_tmp.GGRL_DISAN_VALOR = row14.GGRL_DISAN_VALOR != null ? row14.GGRL_DISAN_VALOR : 0 ;
TCV01_tmp.PESM = row8.PESM ;
TCV01_tmp.CEBE_ID = row8.CEBE_ID ;
TCV01_tmp.CECO_ID = row8.CECO_ID;
TCV01 = TCV01_tmp;

// # Output table : 'TCV02'
TCV02_tmp.FUERZA_ID = row8.FUERZA_ID  ;
TCV02_tmp.ESMID = row8.ESMID  ;
TCV02_tmp.ESPECIALIDADES_ID = row8.ESPECIALIDADES_ID  ;
TCV02_tmp.CUPS_ID = row8.CUPS_ID  ;
TCV02_tmp.VALORCUPS = row17.DEP_DISAN_VALOR != null ? row17.DEP_DISAN_VALOR*(row8.PESM /100)*(row8.PCECO/100)*(row8.PCUPS/100) : 0 ;
TCV02_tmp.PCECO = row8.PCECO ;
TCV02_tmp.PCUPS = row8.PCUPS ;
TCV02_tmp.DEP_DISAN_VALOR = row17.DEP_DISAN_VALOR != null ? row17.DEP_DISAN_VALOR : 0 ;
TCV02_tmp.PESM = row8.PESM ;
TCV02_tmp.CEBE_ID = row8.CEBE_ID ;
TCV02_tmp.CECO_ID = row8.CECO_ID;
TCV02 = TCV02_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_1 = false;










 


	tos_count_tMap_1++;

/**
 * [tMap_1 main ] stop
 */
	
	/**
	 * [tMap_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_1";
	
	

 



/**
 * [tMap_1 process_data_begin ] stop
 */
// Start of branch "TCV01"
if(TCV01 != null) { 



	
	/**
	 * [tMap_2 main ] start
	 */

	

	
	
	currentComponent="tMap_2";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"TCV01"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_2 = false;
		
						row11Struct row11 = null;
					
						row10Struct row10 = null;
					
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_2 = false;
		boolean mainRowRejected_tMap_2 = false;
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row11" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow11 = false;
       		  	    	
       		  	    	
 							row11Struct row11ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_2) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_2 = false;
								
                        		    		    row11HashKey.ESMID = TCV01.ESMID ;
                        		    		
                        		    		    row11HashKey.FUERZA_ID = TCV01.FUERZA_ID ;
                        		    		
                        		    		    row11HashKey.CECO_ID = TCV01.CECO_ID ;
                        		    		

								
		                        	row11HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row11.lookup( row11HashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row11 != null && tHash_Lookup_row11.getCount(row11HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row11' and it contains more one result from keys :  row11.ESMID = '" + row11HashKey.ESMID + "', row11.FUERZA_ID = '" + row11HashKey.FUERZA_ID + "', row11.CECO_ID = '" + row11HashKey.CECO_ID + "'");
								} // G 071
							

							
                    		  	 
							   
                    		  	 
	       		  	    	row11Struct fromLookup_row11 = null;
							row11 = row11Default;
										 
							
								 
							
							
								if (tHash_Lookup_row11 !=null && tHash_Lookup_row11.hasNext()) { // G 099
								
							
								
								fromLookup_row11 = tHash_Lookup_row11.next();

							
							
								} // G 099
							
							

							if(fromLookup_row11 != null) {
								row11 = fromLookup_row11;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	           	
	            	
	            

				///////////////////////////////////////////////
				// Starting Lookup Table "row10" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow10 = false;
       		  	    	
       		  	    	
 							row10Struct row10ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_2) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_2 = false;
								
                        		    		    row10HashKey.ESMID = TCV01.ESMID ;
                        		    		

								
		                        	row10HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row10.lookup( row10HashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row10 != null && tHash_Lookup_row10.getCount(row10HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row10' and it contains more one result from keys :  row10.ESMID = '" + row10HashKey.ESMID + "'");
								} // G 071
							

							
                    		  	 
							   
                    		  	 
	       		  	    	row10Struct fromLookup_row10 = null;
							row10 = row10Default;
										 
							
								 
							
							
								if (tHash_Lookup_row10 !=null && tHash_Lookup_row10.hasNext()) { // G 099
								
							
								
								fromLookup_row10 = tHash_Lookup_row10.next();

							
							
								} // G 099
							
							

							if(fromLookup_row10 != null) {
								row10 = fromLookup_row10;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_2__Struct Var = Var__tMap_2;
Var.GGRL = ValidateRows.ValidateNull2(row11.VALOR, TCV01.PCUPS, TCV01.PCECO, row11.SIGLACI, TCV01.VALORCUPS) ;
Var.DIST = ValidateRows.ValidateDistESM2(TCV01.PCECO, TCV01.PCUPS,row10.VALOR, TCV01.ESMID, row10.ESMID, row10.SIGLACI) ;// ###############################
        // ###############################
        // # Output tables

TCV03 = null;


// # Output table : 'TCV03'
TCV03_tmp.FUERZA_ID = TCV01.FUERZA_ID ;
TCV03_tmp.ESMID = TCV01.ESMID ;
TCV03_tmp.ESPECIALIDADES_ID = TCV01.ESPECIALIDADES_ID ;
TCV03_tmp.CUPS_ID = TCV01.CUPS_ID ;
TCV03_tmp.VALOR = Var.GGRL +  Var.DIST ;
TCV03_tmp.CEBE_ID = TCV01.CEBE_ID ;
TCV03_tmp.CECO_ID = TCV01.CECO_ID;
TCV03 = TCV03_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_2 = false;










 


	tos_count_tMap_2++;

/**
 * [tMap_2 main ] stop
 */
	
	/**
	 * [tMap_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_2";
	
	

 



/**
 * [tMap_2 process_data_begin ] stop
 */
// Start of branch "TCV03"
if(TCV03 != null) { 



	
	/**
	 * [tHashOutput_7 main ] start
	 */

	

	
	
	currentComponent="tHashOutput_7";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"TCV03"
						
						);
					}
					



    
		TCV03Struct oneRow_tHashOutput_7 = new TCV03Struct();
				
					oneRow_tHashOutput_7.FUERZA_ID = TCV03.FUERZA_ID;
					oneRow_tHashOutput_7.ESMID = TCV03.ESMID;
					oneRow_tHashOutput_7.ESPECIALIDADES_ID = TCV03.ESPECIALIDADES_ID;
					oneRow_tHashOutput_7.CUPS_ID = TCV03.CUPS_ID;
					oneRow_tHashOutput_7.VALOR = TCV03.VALOR;
					oneRow_tHashOutput_7.CEBE_ID = TCV03.CEBE_ID;
					oneRow_tHashOutput_7.CECO_ID = TCV03.CECO_ID;
		
        tHashFile_tHashOutput_7.put(oneRow_tHashOutput_7);
        nb_line_tHashOutput_7 ++;

 


	tos_count_tHashOutput_7++;

/**
 * [tHashOutput_7 main ] stop
 */
	
	/**
	 * [tHashOutput_7 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashOutput_7";
	
	

 



/**
 * [tHashOutput_7 process_data_begin ] stop
 */
	
	/**
	 * [tHashOutput_7 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashOutput_7";
	
	

 



/**
 * [tHashOutput_7 process_data_end ] stop
 */

} // End of branch "TCV03"




	
	/**
	 * [tMap_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_2";
	
	

 



/**
 * [tMap_2 process_data_end ] stop
 */

} // End of branch "TCV01"




// Start of branch "TCV02"
if(TCV02 != null) { 



	
	/**
	 * [tMap_3 main ] start
	 */

	

	
	
	currentComponent="tMap_3";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"TCV02"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_3 = false;
		
						row12Struct row12 = null;
					
						row21Struct row21 = null;
					
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_3 = false;
		boolean mainRowRejected_tMap_3 = false;
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row12" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow12 = false;
       		  	    	
       		  	    	
 							row12Struct row12ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_3) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_3 = false;
								
                        		    		    row12HashKey.ESMID = TCV02.ESMID ;
                        		    		
                        		    		    row12HashKey.FUERZA_ID = TCV02.FUERZA_ID ;
                        		    		
                        		    		    row12HashKey.CECO_ID = TCV02.CECO_ID ;
                        		    		

								
		                        	row12HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row12.lookup( row12HashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row12 != null && tHash_Lookup_row12.getCount(row12HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row12' and it contains more one result from keys :  row12.ESMID = '" + row12HashKey.ESMID + "', row12.FUERZA_ID = '" + row12HashKey.FUERZA_ID + "', row12.CECO_ID = '" + row12HashKey.CECO_ID + "'");
								} // G 071
							

							
                    		  	 
							   
                    		  	 
	       		  	    	row12Struct fromLookup_row12 = null;
							row12 = row12Default;
										 
							
								 
							
							
								if (tHash_Lookup_row12 !=null && tHash_Lookup_row12.hasNext()) { // G 099
								
							
								
								fromLookup_row12 = tHash_Lookup_row12.next();

							
							
								} // G 099
							
							

							if(fromLookup_row12 != null) {
								row12 = fromLookup_row12;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	           	
	            	
	            

				///////////////////////////////////////////////
				// Starting Lookup Table "row21" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow21 = false;
       		  	    	
       		  	    	
 							row21Struct row21ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_3) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_3 = false;
								
                        		    		    row21HashKey.ESMID = TCV02.ESMID ;
                        		    		

								
		                        	row21HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row21.lookup( row21HashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row21 != null && tHash_Lookup_row21.getCount(row21HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row21' and it contains more one result from keys :  row21.ESMID = '" + row21HashKey.ESMID + "'");
								} // G 071
							

							
                    		  	 
							   
                    		  	 
	       		  	    	row21Struct fromLookup_row21 = null;
							row21 = row21Default;
										 
							
								 
							
							
								if (tHash_Lookup_row21 !=null && tHash_Lookup_row21.hasNext()) { // G 099
								
							
								
								fromLookup_row21 = tHash_Lookup_row21.next();

							
							
								} // G 099
							
							

							if(fromLookup_row21 != null) {
								row21 = fromLookup_row21;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_3__Struct Var = Var__tMap_3;
Var.DEP = ValidateRows.ValidateNull(row12.VALOR, TCV02.PCUPS, TCV02.PCECO, row12.SIGLACI, TCV02.VALORCUPS) ;
Var.DIST = ValidateRows.ValidateDistESM(TCV02.PCECO, TCV02.PCUPS,row21.VALOR, TCV02.ESMID, row21.ESMID, row21.SIGLACI) ;// ###############################
        // ###############################
        // # Output tables

TCV04 = null;


// # Output table : 'TCV04'
TCV04_tmp.FUERZA_ID = TCV02.FUERZA_ID ;
TCV04_tmp.ESMID = TCV02.ESMID ;
TCV04_tmp.ESPECIALIDADES_ID = TCV02.ESPECIALIDADES_ID ;
TCV04_tmp.CUPS_ID = TCV02.CUPS_ID ;
TCV04_tmp.VALOR = Var.DEP + Var.DIST;
TCV04_tmp.CEBE_ID = TCV02.CEBE_ID ;
TCV04_tmp.CECO_ID = TCV02.CECO_ID ;
TCV04 = TCV04_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_3 = false;










 


	tos_count_tMap_3++;

/**
 * [tMap_3 main ] stop
 */
	
	/**
	 * [tMap_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_3";
	
	

 



/**
 * [tMap_3 process_data_begin ] stop
 */
// Start of branch "TCV04"
if(TCV04 != null) { 



	
	/**
	 * [tHashOutput_8 main ] start
	 */

	

	
	
	currentComponent="tHashOutput_8";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"TCV04"
						
						);
					}
					



    
		TCV04Struct oneRow_tHashOutput_8 = new TCV04Struct();
				
					oneRow_tHashOutput_8.FUERZA_ID = TCV04.FUERZA_ID;
					oneRow_tHashOutput_8.ESMID = TCV04.ESMID;
					oneRow_tHashOutput_8.ESPECIALIDADES_ID = TCV04.ESPECIALIDADES_ID;
					oneRow_tHashOutput_8.CUPS_ID = TCV04.CUPS_ID;
					oneRow_tHashOutput_8.VALOR = TCV04.VALOR;
					oneRow_tHashOutput_8.CEBE_ID = TCV04.CEBE_ID;
					oneRow_tHashOutput_8.CECO_ID = TCV04.CECO_ID;
		
        tHashFile_tHashOutput_8.put(oneRow_tHashOutput_8);
        nb_line_tHashOutput_8 ++;

 


	tos_count_tHashOutput_8++;

/**
 * [tHashOutput_8 main ] stop
 */
	
	/**
	 * [tHashOutput_8 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashOutput_8";
	
	

 



/**
 * [tHashOutput_8 process_data_begin ] stop
 */
	
	/**
	 * [tHashOutput_8 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashOutput_8";
	
	

 



/**
 * [tHashOutput_8 process_data_end ] stop
 */

} // End of branch "TCV04"




	
	/**
	 * [tMap_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_3";
	
	

 



/**
 * [tMap_3 process_data_end ] stop
 */

} // End of branch "TCV02"



	
		} // close loop of lookup 'row17' // G_TM_M_043
		
		} // close loop of lookup 'row14' // G_TM_M_043
	
	
	/**
	 * [tMap_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_1";
	
	

 



/**
 * [tMap_1 process_data_end ] stop
 */



	
	/**
	 * [tSortRow_1_SortIn process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tSortRow_1";
	
	currentComponent="tSortRow_1_SortIn";
	
	

 



/**
 * [tSortRow_1_SortIn process_data_end ] stop
 */
	
	/**
	 * [tSortRow_1_SortIn end ] start
	 */

	

	
	
		currentVirtualComponent = "tSortRow_1";
	
	currentComponent="tSortRow_1_SortIn";
	
	


}

globalMap.put("tSortRow_1_SortIn_NB_LINE",nb_line_tSortRow_1_SortIn);

 

ok_Hash.put("tSortRow_1_SortIn", true);
end_Hash.put("tSortRow_1_SortIn", System.currentTimeMillis());




/**
 * [tSortRow_1_SortIn end ] stop
 */

	
	/**
	 * [tMap_1 end ] start
	 */

	

	
	
	currentComponent="tMap_1";
	
	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_row14 != null) {
						tHash_Lookup_row14.endGet();
					}
					globalMap.remove( "tHash_Lookup_row14" );

					
					
				
					if(tHash_Lookup_row17 != null) {
						tHash_Lookup_row17.endGet();
					}
					globalMap.remove( "tHash_Lookup_row17" );

					
					
				
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row8");
			  	}
			  	
 

ok_Hash.put("tMap_1", true);
end_Hash.put("tMap_1", System.currentTimeMillis());




/**
 * [tMap_1 end ] stop
 */

	
	/**
	 * [tMap_2 end ] start
	 */

	

	
	
	currentComponent="tMap_2";
	
	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_row11 != null) {
						tHash_Lookup_row11.endGet();
					}
					globalMap.remove( "tHash_Lookup_row11" );

					
					
				
					if(tHash_Lookup_row10 != null) {
						tHash_Lookup_row10.endGet();
					}
					globalMap.remove( "tHash_Lookup_row10" );

					
					
				
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"TCV01");
			  	}
			  	
 

ok_Hash.put("tMap_2", true);
end_Hash.put("tMap_2", System.currentTimeMillis());




/**
 * [tMap_2 end ] stop
 */

	
	/**
	 * [tHashOutput_7 end ] start
	 */

	

	
	
	currentComponent="tHashOutput_7";
	
	
globalMap.put("tHashOutput_7_NB_LINE", nb_line_tHashOutput_7);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"TCV03");
			  	}
			  	
 

ok_Hash.put("tHashOutput_7", true);
end_Hash.put("tHashOutput_7", System.currentTimeMillis());




/**
 * [tHashOutput_7 end ] stop
 */







	
	/**
	 * [tMap_3 end ] start
	 */

	

	
	
	currentComponent="tMap_3";
	
	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_row12 != null) {
						tHash_Lookup_row12.endGet();
					}
					globalMap.remove( "tHash_Lookup_row12" );

					
					
				
					if(tHash_Lookup_row21 != null) {
						tHash_Lookup_row21.endGet();
					}
					globalMap.remove( "tHash_Lookup_row21" );

					
					
				
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"TCV02");
			  	}
			  	
 

ok_Hash.put("tMap_3", true);
end_Hash.put("tMap_3", System.currentTimeMillis());




/**
 * [tMap_3 end ] stop
 */

	
	/**
	 * [tHashOutput_8 end ] start
	 */

	

	
	
	currentComponent="tHashOutput_8";
	
	
globalMap.put("tHashOutput_8_NB_LINE", nb_line_tHashOutput_8);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"TCV04");
			  	}
			  	
 

ok_Hash.put("tHashOutput_8", true);
end_Hash.put("tHashOutput_8", System.currentTimeMillis());




/**
 * [tHashOutput_8 end ] stop
 */















				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tHashInput_1:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk2", 0, "ok");
								} 
							
							tHashInput_10Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
					te.setVirtualComponentName(currentVirtualComponent);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
					     			//free memory for "tMap_3"
					     			globalMap.remove("tHash_Lookup_row12"); 
				     			
					     			//free memory for "tMap_3"
					     			globalMap.remove("tHash_Lookup_row21"); 
				     			
					     			//free memory for "tMap_2"
					     			globalMap.remove("tHash_Lookup_row11"); 
				     			
					     			//free memory for "tMap_2"
					     			globalMap.remove("tHash_Lookup_row10"); 
				     			
					     			//free memory for "tMap_1"
					     			globalMap.remove("tHash_Lookup_row14"); 
				     			
					     			//free memory for "tMap_1"
					     			globalMap.remove("tHash_Lookup_row17"); 
				     			
							//free memory for "tSortRow_1_SortIn"
							globalMap.remove("tSortRow_1");
						
				try{
					
	
	/**
	 * [tHashInput_1 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_1";
	
	

 



/**
 * [tHashInput_1 finally ] stop
 */

	
	/**
	 * [tSortRow_1_SortOut finally ] start
	 */

	

	
	
		currentVirtualComponent = "tSortRow_1";
	
	currentComponent="tSortRow_1_SortOut";
	
	

 



/**
 * [tSortRow_1_SortOut finally ] stop
 */

	
	/**
	 * [tSortRow_1_SortIn finally ] start
	 */

	

	
	
		currentVirtualComponent = "tSortRow_1";
	
	currentComponent="tSortRow_1_SortIn";
	
	

 



/**
 * [tSortRow_1_SortIn finally ] stop
 */

	
	/**
	 * [tMap_1 finally ] start
	 */

	

	
	
	currentComponent="tMap_1";
	
	

 



/**
 * [tMap_1 finally ] stop
 */

	
	/**
	 * [tMap_2 finally ] start
	 */

	

	
	
	currentComponent="tMap_2";
	
	

 



/**
 * [tMap_2 finally ] stop
 */

	
	/**
	 * [tHashOutput_7 finally ] start
	 */

	

	
	
	currentComponent="tHashOutput_7";
	
	

 



/**
 * [tHashOutput_7 finally ] stop
 */







	
	/**
	 * [tMap_3 finally ] start
	 */

	

	
	
	currentComponent="tMap_3";
	
	

 



/**
 * [tMap_3 finally ] stop
 */

	
	/**
	 * [tHashOutput_8 finally ] start
	 */

	

	
	
	currentComponent="tHashOutput_8";
	
	

 



/**
 * [tHashOutput_8 finally ] stop
 */















				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tHashInput_1_SUBPROCESS_STATE", 1);
	}
	


public static class InsVcupsStruct implements routines.system.IPersistableRow<InsVcupsStruct> {
    final static byte[] commonByteArrayLock_CEC_DISTRIBUCION_CI_DistribucionCI = new byte[0];
    static byte[] commonByteArray_CEC_DISTRIBUCION_CI_DistribucionCI = new byte[0];

	
			    public int UORG_ID;

				public int getUORG_ID () {
					return this.UORG_ID;
				}

				public Boolean UORG_IDIsNullable(){
				    return false;
				}
				public Boolean UORG_IDIsKey(){
				    return false;
				}
				public Integer UORG_IDLength(){
				    return 0;
				}
				public Integer UORG_IDPrecision(){
				    return null;
				}
				public String UORG_IDDefault(){
				
					return "";
				
				}
				public String UORG_IDComment(){
				
				    return "";
				
				}
				public String UORG_IDPattern(){
				
					return "";
				
				}
				public String UORG_IDOriginalDbColumnName(){
				
					return "UORG_ID";
				
				}

				
			    public Integer CECO_ID;

				public Integer getCECO_ID () {
					return this.CECO_ID;
				}

				public Boolean CECO_IDIsNullable(){
				    return true;
				}
				public Boolean CECO_IDIsKey(){
				    return false;
				}
				public Integer CECO_IDLength(){
				    return 0;
				}
				public Integer CECO_IDPrecision(){
				    return null;
				}
				public String CECO_IDDefault(){
				
					return "";
				
				}
				public String CECO_IDComment(){
				
				    return "";
				
				}
				public String CECO_IDPattern(){
				
					return "";
				
				}
				public String CECO_IDOriginalDbColumnName(){
				
					return "CECO_ID";
				
				}

				
			    public int CUPS_ID;

				public int getCUPS_ID () {
					return this.CUPS_ID;
				}

				public Boolean CUPS_IDIsNullable(){
				    return false;
				}
				public Boolean CUPS_IDIsKey(){
				    return false;
				}
				public Integer CUPS_IDLength(){
				    return 0;
				}
				public Integer CUPS_IDPrecision(){
				    return null;
				}
				public String CUPS_IDDefault(){
				
					return "";
				
				}
				public String CUPS_IDComment(){
				
				    return "";
				
				}
				public String CUPS_IDPattern(){
				
					return "";
				
				}
				public String CUPS_IDOriginalDbColumnName(){
				
					return "CUPS_ID";
				
				}

				
			    public Integer CEBE_ID;

				public Integer getCEBE_ID () {
					return this.CEBE_ID;
				}

				public Boolean CEBE_IDIsNullable(){
				    return true;
				}
				public Boolean CEBE_IDIsKey(){
				    return false;
				}
				public Integer CEBE_IDLength(){
				    return null;
				}
				public Integer CEBE_IDPrecision(){
				    return null;
				}
				public String CEBE_IDDefault(){
				
					return null;
				
				}
				public String CEBE_IDComment(){
				
				    return "";
				
				}
				public String CEBE_IDPattern(){
				
					return "";
				
				}
				public String CEBE_IDOriginalDbColumnName(){
				
					return "CEBE_ID";
				
				}

				
			    public Double VALOR;

				public Double getVALOR () {
					return this.VALOR;
				}

				public Boolean VALORIsNullable(){
				    return true;
				}
				public Boolean VALORIsKey(){
				    return false;
				}
				public Integer VALORLength(){
				    return 0;
				}
				public Integer VALORPrecision(){
				    return null;
				}
				public String VALORDefault(){
				
					return "";
				
				}
				public String VALORComment(){
				
				    return "";
				
				}
				public String VALORPattern(){
				
					return "";
				
				}
				public String VALOROriginalDbColumnName(){
				
					return "VALOR";
				
				}

				
			    public java.util.Date PERIODO;

				public java.util.Date getPERIODO () {
					return this.PERIODO;
				}

				public Boolean PERIODOIsNullable(){
				    return true;
				}
				public Boolean PERIODOIsKey(){
				    return false;
				}
				public Integer PERIODOLength(){
				    return null;
				}
				public Integer PERIODOPrecision(){
				    return null;
				}
				public String PERIODODefault(){
				
					return null;
				
				}
				public String PERIODOComment(){
				
				    return "";
				
				}
				public String PERIODOPattern(){
				
					return "dd/MM/yyyy";
				
				}
				public String PERIODOOriginalDbColumnName(){
				
					return "PERIODO";
				
				}

				
			    public Integer ANEXOS_ID;

				public Integer getANEXOS_ID () {
					return this.ANEXOS_ID;
				}

				public Boolean ANEXOS_IDIsNullable(){
				    return true;
				}
				public Boolean ANEXOS_IDIsKey(){
				    return false;
				}
				public Integer ANEXOS_IDLength(){
				    return null;
				}
				public Integer ANEXOS_IDPrecision(){
				    return null;
				}
				public String ANEXOS_IDDefault(){
				
					return null;
				
				}
				public String ANEXOS_IDComment(){
				
				    return "";
				
				}
				public String ANEXOS_IDPattern(){
				
					return "";
				
				}
				public String ANEXOS_IDOriginalDbColumnName(){
				
					return "ANEXOS_ID";
				
				}

				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_CEC_DISTRIBUCION_CI_DistribucionCI) {

        	try {

        		int length = 0;
		
			        this.UORG_ID = dis.readInt();
					
						this.CECO_ID = readInteger(dis);
					
			        this.CUPS_ID = dis.readInt();
					
						this.CEBE_ID = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.VALOR = null;
           				} else {
           			    	this.VALOR = dis.readDouble();
           				}
					
					this.PERIODO = readDate(dis);
					
						this.ANEXOS_ID = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_CEC_DISTRIBUCION_CI_DistribucionCI) {

        	try {

        		int length = 0;
		
			        this.UORG_ID = dis.readInt();
					
						this.CECO_ID = readInteger(dis);
					
			        this.CUPS_ID = dis.readInt();
					
						this.CEBE_ID = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.VALOR = null;
           				} else {
           			    	this.VALOR = dis.readDouble();
           				}
					
					this.PERIODO = readDate(dis);
					
						this.ANEXOS_ID = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.UORG_ID);
					
					// Integer
				
						writeInteger(this.CECO_ID,dos);
					
					// int
				
		            	dos.writeInt(this.CUPS_ID);
					
					// Integer
				
						writeInteger(this.CEBE_ID,dos);
					
					// Double
				
						if(this.VALOR == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.VALOR);
		            	}
					
					// java.util.Date
				
						writeDate(this.PERIODO,dos);
					
					// Integer
				
						writeInteger(this.ANEXOS_ID,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.UORG_ID);
					
					// Integer
				
						writeInteger(this.CECO_ID,dos);
					
					// int
				
		            	dos.writeInt(this.CUPS_ID);
					
					// Integer
				
						writeInteger(this.CEBE_ID,dos);
					
					// Double
				
						if(this.VALOR == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.VALOR);
		            	}
					
					// java.util.Date
				
						writeDate(this.PERIODO,dos);
					
					// Integer
				
						writeInteger(this.ANEXOS_ID,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("UORG_ID="+String.valueOf(UORG_ID));
		sb.append(",CECO_ID="+String.valueOf(CECO_ID));
		sb.append(",CUPS_ID="+String.valueOf(CUPS_ID));
		sb.append(",CEBE_ID="+String.valueOf(CEBE_ID));
		sb.append(",VALOR="+String.valueOf(VALOR));
		sb.append(",PERIODO="+String.valueOf(PERIODO));
		sb.append(",ANEXOS_ID="+String.valueOf(ANEXOS_ID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(InsVcupsStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
    final static byte[] commonByteArrayLock_CEC_DISTRIBUCION_CI_DistribucionCI = new byte[0];
    static byte[] commonByteArray_CEC_DISTRIBUCION_CI_DistribucionCI = new byte[0];

	
			    public Integer FUERZA_ID;

				public Integer getFUERZA_ID () {
					return this.FUERZA_ID;
				}

				public Boolean FUERZA_IDIsNullable(){
				    return true;
				}
				public Boolean FUERZA_IDIsKey(){
				    return false;
				}
				public Integer FUERZA_IDLength(){
				    return null;
				}
				public Integer FUERZA_IDPrecision(){
				    return null;
				}
				public String FUERZA_IDDefault(){
				
					return null;
				
				}
				public String FUERZA_IDComment(){
				
				    return "";
				
				}
				public String FUERZA_IDPattern(){
				
					return "";
				
				}
				public String FUERZA_IDOriginalDbColumnName(){
				
					return "FUERZA_ID";
				
				}

				
			    public int ESMID;

				public int getESMID () {
					return this.ESMID;
				}

				public Boolean ESMIDIsNullable(){
				    return false;
				}
				public Boolean ESMIDIsKey(){
				    return false;
				}
				public Integer ESMIDLength(){
				    return 0;
				}
				public Integer ESMIDPrecision(){
				    return null;
				}
				public String ESMIDDefault(){
				
					return "";
				
				}
				public String ESMIDComment(){
				
				    return "";
				
				}
				public String ESMIDPattern(){
				
					return "";
				
				}
				public String ESMIDOriginalDbColumnName(){
				
					return "ESMID";
				
				}

				
			    public Integer ESPECIALIDADES_ID;

				public Integer getESPECIALIDADES_ID () {
					return this.ESPECIALIDADES_ID;
				}

				public Boolean ESPECIALIDADES_IDIsNullable(){
				    return true;
				}
				public Boolean ESPECIALIDADES_IDIsKey(){
				    return false;
				}
				public Integer ESPECIALIDADES_IDLength(){
				    return 0;
				}
				public Integer ESPECIALIDADES_IDPrecision(){
				    return null;
				}
				public String ESPECIALIDADES_IDDefault(){
				
					return "";
				
				}
				public String ESPECIALIDADES_IDComment(){
				
				    return "";
				
				}
				public String ESPECIALIDADES_IDPattern(){
				
					return "";
				
				}
				public String ESPECIALIDADES_IDOriginalDbColumnName(){
				
					return "ESPECIALIDADES_ID";
				
				}

				
			    public int CUPS_ID;

				public int getCUPS_ID () {
					return this.CUPS_ID;
				}

				public Boolean CUPS_IDIsNullable(){
				    return false;
				}
				public Boolean CUPS_IDIsKey(){
				    return false;
				}
				public Integer CUPS_IDLength(){
				    return 0;
				}
				public Integer CUPS_IDPrecision(){
				    return null;
				}
				public String CUPS_IDDefault(){
				
					return "";
				
				}
				public String CUPS_IDComment(){
				
				    return "";
				
				}
				public String CUPS_IDPattern(){
				
					return "";
				
				}
				public String CUPS_IDOriginalDbColumnName(){
				
					return "CUPS_ID";
				
				}

				
			    public Double VALOR;

				public Double getVALOR () {
					return this.VALOR;
				}

				public Boolean VALORIsNullable(){
				    return true;
				}
				public Boolean VALORIsKey(){
				    return false;
				}
				public Integer VALORLength(){
				    return null;
				}
				public Integer VALORPrecision(){
				    return null;
				}
				public String VALORDefault(){
				
					return "";
				
				}
				public String VALORComment(){
				
				    return "";
				
				}
				public String VALORPattern(){
				
					return "";
				
				}
				public String VALOROriginalDbColumnName(){
				
					return "VALOR";
				
				}

				
			    public Integer CEBE_ID;

				public Integer getCEBE_ID () {
					return this.CEBE_ID;
				}

				public Boolean CEBE_IDIsNullable(){
				    return true;
				}
				public Boolean CEBE_IDIsKey(){
				    return false;
				}
				public Integer CEBE_IDLength(){
				    return null;
				}
				public Integer CEBE_IDPrecision(){
				    return null;
				}
				public String CEBE_IDDefault(){
				
					return null;
				
				}
				public String CEBE_IDComment(){
				
				    return "";
				
				}
				public String CEBE_IDPattern(){
				
					return "";
				
				}
				public String CEBE_IDOriginalDbColumnName(){
				
					return "CEBE_ID";
				
				}

				
			    public Integer CECO_ID;

				public Integer getCECO_ID () {
					return this.CECO_ID;
				}

				public Boolean CECO_IDIsNullable(){
				    return true;
				}
				public Boolean CECO_IDIsKey(){
				    return false;
				}
				public Integer CECO_IDLength(){
				    return null;
				}
				public Integer CECO_IDPrecision(){
				    return null;
				}
				public String CECO_IDDefault(){
				
					return null;
				
				}
				public String CECO_IDComment(){
				
				    return "";
				
				}
				public String CECO_IDPattern(){
				
					return "";
				
				}
				public String CECO_IDOriginalDbColumnName(){
				
					return "CECO_ID";
				
				}

				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_CEC_DISTRIBUCION_CI_DistribucionCI) {

        	try {

        		int length = 0;
		
						this.FUERZA_ID = readInteger(dis);
					
			        this.ESMID = dis.readInt();
					
						this.ESPECIALIDADES_ID = readInteger(dis);
					
			        this.CUPS_ID = dis.readInt();
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.VALOR = null;
           				} else {
           			    	this.VALOR = dis.readDouble();
           				}
					
						this.CEBE_ID = readInteger(dis);
					
						this.CECO_ID = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_CEC_DISTRIBUCION_CI_DistribucionCI) {

        	try {

        		int length = 0;
		
						this.FUERZA_ID = readInteger(dis);
					
			        this.ESMID = dis.readInt();
					
						this.ESPECIALIDADES_ID = readInteger(dis);
					
			        this.CUPS_ID = dis.readInt();
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.VALOR = null;
           				} else {
           			    	this.VALOR = dis.readDouble();
           				}
					
						this.CEBE_ID = readInteger(dis);
					
						this.CECO_ID = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.FUERZA_ID,dos);
					
					// int
				
		            	dos.writeInt(this.ESMID);
					
					// Integer
				
						writeInteger(this.ESPECIALIDADES_ID,dos);
					
					// int
				
		            	dos.writeInt(this.CUPS_ID);
					
					// Double
				
						if(this.VALOR == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.VALOR);
		            	}
					
					// Integer
				
						writeInteger(this.CEBE_ID,dos);
					
					// Integer
				
						writeInteger(this.CECO_ID,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.FUERZA_ID,dos);
					
					// int
				
		            	dos.writeInt(this.ESMID);
					
					// Integer
				
						writeInteger(this.ESPECIALIDADES_ID,dos);
					
					// int
				
		            	dos.writeInt(this.CUPS_ID);
					
					// Double
				
						if(this.VALOR == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.VALOR);
		            	}
					
					// Integer
				
						writeInteger(this.CEBE_ID,dos);
					
					// Integer
				
						writeInteger(this.CECO_ID,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("FUERZA_ID="+String.valueOf(FUERZA_ID));
		sb.append(",ESMID="+String.valueOf(ESMID));
		sb.append(",ESPECIALIDADES_ID="+String.valueOf(ESPECIALIDADES_ID));
		sb.append(",CUPS_ID="+String.valueOf(CUPS_ID));
		sb.append(",VALOR="+String.valueOf(VALOR));
		sb.append(",CEBE_ID="+String.valueOf(CEBE_ID));
		sb.append(",CECO_ID="+String.valueOf(CECO_ID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class after_tHashInput_10Struct implements routines.system.IPersistableRow<after_tHashInput_10Struct> {
    final static byte[] commonByteArrayLock_CEC_DISTRIBUCION_CI_DistribucionCI = new byte[0];
    static byte[] commonByteArray_CEC_DISTRIBUCION_CI_DistribucionCI = new byte[0];

	
			    public Integer FUERZA_ID;

				public Integer getFUERZA_ID () {
					return this.FUERZA_ID;
				}

				public Boolean FUERZA_IDIsNullable(){
				    return true;
				}
				public Boolean FUERZA_IDIsKey(){
				    return false;
				}
				public Integer FUERZA_IDLength(){
				    return null;
				}
				public Integer FUERZA_IDPrecision(){
				    return null;
				}
				public String FUERZA_IDDefault(){
				
					return null;
				
				}
				public String FUERZA_IDComment(){
				
				    return "";
				
				}
				public String FUERZA_IDPattern(){
				
					return "";
				
				}
				public String FUERZA_IDOriginalDbColumnName(){
				
					return "FUERZA_ID";
				
				}

				
			    public int ESMID;

				public int getESMID () {
					return this.ESMID;
				}

				public Boolean ESMIDIsNullable(){
				    return false;
				}
				public Boolean ESMIDIsKey(){
				    return false;
				}
				public Integer ESMIDLength(){
				    return 0;
				}
				public Integer ESMIDPrecision(){
				    return null;
				}
				public String ESMIDDefault(){
				
					return "";
				
				}
				public String ESMIDComment(){
				
				    return "";
				
				}
				public String ESMIDPattern(){
				
					return "";
				
				}
				public String ESMIDOriginalDbColumnName(){
				
					return "ESMID";
				
				}

				
			    public Integer ESPECIALIDADES_ID;

				public Integer getESPECIALIDADES_ID () {
					return this.ESPECIALIDADES_ID;
				}

				public Boolean ESPECIALIDADES_IDIsNullable(){
				    return true;
				}
				public Boolean ESPECIALIDADES_IDIsKey(){
				    return false;
				}
				public Integer ESPECIALIDADES_IDLength(){
				    return 0;
				}
				public Integer ESPECIALIDADES_IDPrecision(){
				    return null;
				}
				public String ESPECIALIDADES_IDDefault(){
				
					return "";
				
				}
				public String ESPECIALIDADES_IDComment(){
				
				    return "";
				
				}
				public String ESPECIALIDADES_IDPattern(){
				
					return "";
				
				}
				public String ESPECIALIDADES_IDOriginalDbColumnName(){
				
					return "ESPECIALIDADES_ID";
				
				}

				
			    public int CUPS_ID;

				public int getCUPS_ID () {
					return this.CUPS_ID;
				}

				public Boolean CUPS_IDIsNullable(){
				    return false;
				}
				public Boolean CUPS_IDIsKey(){
				    return false;
				}
				public Integer CUPS_IDLength(){
				    return 0;
				}
				public Integer CUPS_IDPrecision(){
				    return null;
				}
				public String CUPS_IDDefault(){
				
					return "";
				
				}
				public String CUPS_IDComment(){
				
				    return "";
				
				}
				public String CUPS_IDPattern(){
				
					return "";
				
				}
				public String CUPS_IDOriginalDbColumnName(){
				
					return "CUPS_ID";
				
				}

				
			    public Double VALOR;

				public Double getVALOR () {
					return this.VALOR;
				}

				public Boolean VALORIsNullable(){
				    return true;
				}
				public Boolean VALORIsKey(){
				    return false;
				}
				public Integer VALORLength(){
				    return null;
				}
				public Integer VALORPrecision(){
				    return null;
				}
				public String VALORDefault(){
				
					return "";
				
				}
				public String VALORComment(){
				
				    return "";
				
				}
				public String VALORPattern(){
				
					return "";
				
				}
				public String VALOROriginalDbColumnName(){
				
					return "VALOR";
				
				}

				
			    public Integer CEBE_ID;

				public Integer getCEBE_ID () {
					return this.CEBE_ID;
				}

				public Boolean CEBE_IDIsNullable(){
				    return true;
				}
				public Boolean CEBE_IDIsKey(){
				    return false;
				}
				public Integer CEBE_IDLength(){
				    return null;
				}
				public Integer CEBE_IDPrecision(){
				    return null;
				}
				public String CEBE_IDDefault(){
				
					return null;
				
				}
				public String CEBE_IDComment(){
				
				    return "";
				
				}
				public String CEBE_IDPattern(){
				
					return "";
				
				}
				public String CEBE_IDOriginalDbColumnName(){
				
					return "CEBE_ID";
				
				}

				
			    public Integer CECO_ID;

				public Integer getCECO_ID () {
					return this.CECO_ID;
				}

				public Boolean CECO_IDIsNullable(){
				    return true;
				}
				public Boolean CECO_IDIsKey(){
				    return false;
				}
				public Integer CECO_IDLength(){
				    return null;
				}
				public Integer CECO_IDPrecision(){
				    return null;
				}
				public String CECO_IDDefault(){
				
					return null;
				
				}
				public String CECO_IDComment(){
				
				    return "";
				
				}
				public String CECO_IDPattern(){
				
					return "";
				
				}
				public String CECO_IDOriginalDbColumnName(){
				
					return "CECO_ID";
				
				}

				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_CEC_DISTRIBUCION_CI_DistribucionCI) {

        	try {

        		int length = 0;
		
						this.FUERZA_ID = readInteger(dis);
					
			        this.ESMID = dis.readInt();
					
						this.ESPECIALIDADES_ID = readInteger(dis);
					
			        this.CUPS_ID = dis.readInt();
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.VALOR = null;
           				} else {
           			    	this.VALOR = dis.readDouble();
           				}
					
						this.CEBE_ID = readInteger(dis);
					
						this.CECO_ID = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_CEC_DISTRIBUCION_CI_DistribucionCI) {

        	try {

        		int length = 0;
		
						this.FUERZA_ID = readInteger(dis);
					
			        this.ESMID = dis.readInt();
					
						this.ESPECIALIDADES_ID = readInteger(dis);
					
			        this.CUPS_ID = dis.readInt();
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.VALOR = null;
           				} else {
           			    	this.VALOR = dis.readDouble();
           				}
					
						this.CEBE_ID = readInteger(dis);
					
						this.CECO_ID = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.FUERZA_ID,dos);
					
					// int
				
		            	dos.writeInt(this.ESMID);
					
					// Integer
				
						writeInteger(this.ESPECIALIDADES_ID,dos);
					
					// int
				
		            	dos.writeInt(this.CUPS_ID);
					
					// Double
				
						if(this.VALOR == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.VALOR);
		            	}
					
					// Integer
				
						writeInteger(this.CEBE_ID,dos);
					
					// Integer
				
						writeInteger(this.CECO_ID,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.FUERZA_ID,dos);
					
					// int
				
		            	dos.writeInt(this.ESMID);
					
					// Integer
				
						writeInteger(this.ESPECIALIDADES_ID,dos);
					
					// int
				
		            	dos.writeInt(this.CUPS_ID);
					
					// Double
				
						if(this.VALOR == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.VALOR);
		            	}
					
					// Integer
				
						writeInteger(this.CEBE_ID,dos);
					
					// Integer
				
						writeInteger(this.CECO_ID,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("FUERZA_ID="+String.valueOf(FUERZA_ID));
		sb.append(",ESMID="+String.valueOf(ESMID));
		sb.append(",ESPECIALIDADES_ID="+String.valueOf(ESPECIALIDADES_ID));
		sb.append(",CUPS_ID="+String.valueOf(CUPS_ID));
		sb.append(",VALOR="+String.valueOf(VALOR));
		sb.append(",CEBE_ID="+String.valueOf(CEBE_ID));
		sb.append(",CECO_ID="+String.valueOf(CECO_ID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(after_tHashInput_10Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tHashInput_10Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tHashInput_10_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;


		tHashInput_11Process(globalMap);

		row1Struct row1 = new row1Struct();
InsVcupsStruct InsVcups = new InsVcupsStruct();





	
	/**
	 * [tOracleOutput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleOutput_1", false);
		start_Hash.put("tOracleOutput_1", System.currentTimeMillis());
		
	
	currentComponent="tOracleOutput_1";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"InsVcups");
					}
				
		int tos_count_tOracleOutput_1 = 0;
		






    
    int nb_line_tOracleOutput_1 = 0;
    int nb_line_update_tOracleOutput_1 = 0;
    int nb_line_inserted_tOracleOutput_1 = 0;
    int nb_line_deleted_tOracleOutput_1 = 0;
    int nb_line_rejected_tOracleOutput_1 = 0;

    int tmp_batchUpdateCount_tOracleOutput_1 = 0;

    int deletedCount_tOracleOutput_1=0;
    int updatedCount_tOracleOutput_1=0;
    int insertedCount_tOracleOutput_1=0;
    int rowsToCommitCount_tOracleOutput_1=0;
    int rejectedCount_tOracleOutput_1=0;

    boolean whetherReject_tOracleOutput_1 = false;

    java.sql.Connection conn_tOracleOutput_1 = null;

    //optional table
    String dbschema_tOracleOutput_1 = null;
    String tableName_tOracleOutput_1 = null;
                    String driverClass_tOracleOutput_1 = "oracle.jdbc.OracleDriver";


                java.lang.Class.forName(driverClass_tOracleOutput_1);
                String url_tOracleOutput_1 = null;
                    url_tOracleOutput_1 = "jdbc:oracle:thin:@(description=(address=(protocol=tcp)(host=" + context.db_origen_Server + ")(port=" + context.db_origen_Port + "))(connect_data=(service_name=" + context.db_origen_ServiceName + ")))";
                String dbUser_tOracleOutput_1 = context.db_origen_Login;

	final String decryptedPassword_tOracleOutput_1 = context.db_origen_Password; 

                String dbPwd_tOracleOutput_1 = decryptedPassword_tOracleOutput_1;
                dbschema_tOracleOutput_1 = context.db_origen_Schema;


                    java.util.Properties atnParamsPrope_tOracleOutput_1 = new java.util.Properties();
                    atnParamsPrope_tOracleOutput_1.put("user",dbUser_tOracleOutput_1);
                    atnParamsPrope_tOracleOutput_1.put("password",dbPwd_tOracleOutput_1);
                    if(context.db_origen_AdditionalParams != null && !"\"\"".equals(context.db_origen_AdditionalParams) && !"".equals(context.db_origen_AdditionalParams)){
                        atnParamsPrope_tOracleOutput_1.load(new java.io.ByteArrayInputStream(context.db_origen_AdditionalParams.replace("&", "\n").getBytes()));
                    }
                    conn_tOracleOutput_1 = java.sql.DriverManager.getConnection(url_tOracleOutput_1, atnParamsPrope_tOracleOutput_1);
        resourceMap.put("conn_tOracleOutput_1", conn_tOracleOutput_1);
            conn_tOracleOutput_1.setAutoCommit(false);
            int commitEvery_tOracleOutput_1 = 1000;
            int commitCounter_tOracleOutput_1 = 0;
        int batchSize_tOracleOutput_1 = 10000;
        int batchSizeCounter_tOracleOutput_1=0;
        int count_tOracleOutput_1=0;

        if(dbschema_tOracleOutput_1 == null || dbschema_tOracleOutput_1.trim().length() == 0) {
            tableName_tOracleOutput_1 = ("cec_vcupscireal");
        } else {
            tableName_tOracleOutput_1 = dbschema_tOracleOutput_1 + "." + ("cec_vcupscireal");
        }
                String insert_tOracleOutput_1 = "INSERT INTO " + tableName_tOracleOutput_1 + " (UORG_ID,CECO_ID,CUPS_ID,CEBE_ID,VALOR,PERIODO,ANEXOS_ID) VALUES (?,?,?,?,?,?,?)";    

                        java.sql.PreparedStatement pstmt_tOracleOutput_1 = conn_tOracleOutput_1.prepareStatement(insert_tOracleOutput_1);
                        resourceMap.put("pstmt_tOracleOutput_1", pstmt_tOracleOutput_1);





 



/**
 * [tOracleOutput_1 begin ] stop
 */



	
	/**
	 * [tMap_7 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_7", false);
		start_Hash.put("tMap_7", System.currentTimeMillis());
		
	
	currentComponent="tMap_7";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row1");
					}
				
		int tos_count_tMap_7 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row6Struct> tHash_Lookup_row6 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row6Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row6Struct>) 
					globalMap.get( "tHash_Lookup_row6" ))
					;					
					
	

row6Struct row6HashKey = new row6Struct();
row6Struct row6Default = new row6Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_7__Struct  {
}
Var__tMap_7__Struct Var__tMap_7 = new Var__tMap_7__Struct();
// ###############################

// ###############################
// # Outputs initialization
InsVcupsStruct InsVcups_tmp = new InsVcupsStruct();
// ###############################

        
        



        









 



/**
 * [tMap_7 begin ] stop
 */



	
	/**
	 * [tHashInput_10 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_10", false);
		start_Hash.put("tHashInput_10", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_10";
	
	
		int tos_count_tHashInput_10 = 0;
		


int nb_line_tHashInput_10 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_10=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<TCV03Struct> tHashFile_tHashInput_10 = mf_tHashInput_10.getAdvancedMemoryHashFile("tHashFile_DistribucionCI_" + pid +"_tHashOutput_7");
if(tHashFile_tHashInput_10==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<TCV03Struct> iterator_tHashInput_10 = tHashFile_tHashInput_10.iterator();
while (iterator_tHashInput_10.hasNext()) {
    TCV03Struct next_tHashInput_10 = iterator_tHashInput_10.next();

	row1.FUERZA_ID = next_tHashInput_10.FUERZA_ID;
	row1.ESMID = next_tHashInput_10.ESMID;
	row1.ESPECIALIDADES_ID = next_tHashInput_10.ESPECIALIDADES_ID;
	row1.CUPS_ID = next_tHashInput_10.CUPS_ID;
	row1.VALOR = next_tHashInput_10.VALOR;
	row1.CEBE_ID = next_tHashInput_10.CEBE_ID;
	row1.CECO_ID = next_tHashInput_10.CECO_ID;

 



/**
 * [tHashInput_10 begin ] stop
 */
	
	/**
	 * [tHashInput_10 main ] start
	 */

	

	
	
	currentComponent="tHashInput_10";
	
	

 


	tos_count_tHashInput_10++;

/**
 * [tHashInput_10 main ] stop
 */
	
	/**
	 * [tHashInput_10 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashInput_10";
	
	

 



/**
 * [tHashInput_10 process_data_begin ] stop
 */

	
	/**
	 * [tMap_7 main ] start
	 */

	

	
	
	currentComponent="tMap_7";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row1"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_7 = false;
		
						row6Struct row6 = null;
					
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_7 = false;
		boolean mainRowRejected_tMap_7 = false;
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row6" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow6 = false;
       		  	    	
       		  	    	
 							row6Struct row6ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_7) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_7 = false;
								
                        		    		    row6HashKey.FUERZA_ID = row1.FUERZA_ID ;
                        		    		
	                        		    	Object exprKeyValue_row6__ESMID = row1.ESMID ;
	                        		    	if(exprKeyValue_row6__ESMID == null) {
	                        		    		hasCasePrimitiveKeyWithNull_tMap_7 = true;
	                        		    	} else {
                        		    			row6HashKey.ESMID = (int)(Integer) exprKeyValue_row6__ESMID;
                        		    		}
                        		    		
	                        		    	Object exprKeyValue_row6__CUPS_ID = row1.CUPS_ID ;
	                        		    	if(exprKeyValue_row6__CUPS_ID == null) {
	                        		    		hasCasePrimitiveKeyWithNull_tMap_7 = true;
	                        		    	} else {
                        		    			row6HashKey.CUPS_ID = (int)(Integer) exprKeyValue_row6__CUPS_ID;
                        		    		}
                        		    		
                        		    		    row6HashKey.CEBE_ID = row1.CEBE_ID ;
                        		    		
                        		    		    row6HashKey.CECO_ID = row1.CECO_ID ;
                        		    		

								
		                        	row6HashKey.hashCodeDirty = true;
                        		
	  					
	  							
	
		  							if(!hasCasePrimitiveKeyWithNull_tMap_7) { // G_TM_M_091
		  							
			  					
			  					
			  					
	  					
		  							tHash_Lookup_row6.lookup( row6HashKey );

	  							

	  							

			  						} // G_TM_M_091
			  						
			  					

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row6 != null && tHash_Lookup_row6.getCount(row6HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row6' and it contains more one result from keys :  row6.FUERZA_ID = '" + row6HashKey.FUERZA_ID + "', row6.ESMID = '" + row6HashKey.ESMID + "', row6.CUPS_ID = '" + row6HashKey.CUPS_ID + "', row6.CEBE_ID = '" + row6HashKey.CEBE_ID + "', row6.CECO_ID = '" + row6HashKey.CECO_ID + "'");
								} // G 071
							

							
                    		  	 
							   
                    		  	 
	       		  	    	row6Struct fromLookup_row6 = null;
							row6 = row6Default;
										 
							
								 
							
							
								if (tHash_Lookup_row6 !=null && tHash_Lookup_row6.hasNext()) { // G 099
								
							
								
								fromLookup_row6 = tHash_Lookup_row6.next();

							
							
								} // G 099
							
							

							if(fromLookup_row6 != null) {
								row6 = fromLookup_row6;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_7__Struct Var = Var__tMap_7;// ###############################
        // ###############################
        // # Output tables

InsVcups = null;


// # Output table : 'InsVcups'
InsVcups_tmp.UORG_ID = row1.ESMID ;
InsVcups_tmp.CECO_ID = row1.CECO_ID;
InsVcups_tmp.CUPS_ID = row1.CUPS_ID ;
InsVcups_tmp.CEBE_ID = row1.CEBE_ID ;
InsVcups_tmp.VALOR = row6.VALOR +  row1.VALOR ;
InsVcups_tmp.PERIODO = context.Periodo;
InsVcups_tmp.ANEXOS_ID = context.AnexoId;
InsVcups = InsVcups_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_7 = false;










 


	tos_count_tMap_7++;

/**
 * [tMap_7 main ] stop
 */
	
	/**
	 * [tMap_7 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_7";
	
	

 



/**
 * [tMap_7 process_data_begin ] stop
 */
// Start of branch "InsVcups"
if(InsVcups != null) { 



	
	/**
	 * [tOracleOutput_1 main ] start
	 */

	

	
	
	currentComponent="tOracleOutput_1";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"InsVcups"
						
						);
					}
					



        whetherReject_tOracleOutput_1 = false;
                        pstmt_tOracleOutput_1.setInt(1, InsVcups.UORG_ID);

                        if(InsVcups.CECO_ID == null) {
pstmt_tOracleOutput_1.setNull(2, java.sql.Types.INTEGER);
} else {pstmt_tOracleOutput_1.setInt(2, InsVcups.CECO_ID);
}

                        pstmt_tOracleOutput_1.setInt(3, InsVcups.CUPS_ID);

                        if(InsVcups.CEBE_ID == null) {
pstmt_tOracleOutput_1.setNull(4, java.sql.Types.INTEGER);
} else {pstmt_tOracleOutput_1.setInt(4, InsVcups.CEBE_ID);
}

                        if(InsVcups.VALOR == null) {
pstmt_tOracleOutput_1.setNull(5, java.sql.Types.DOUBLE);
} else {pstmt_tOracleOutput_1.setDouble(5, InsVcups.VALOR);
}

                        if(InsVcups.PERIODO != null) {
pstmt_tOracleOutput_1.setObject(6, new java.sql.Timestamp(InsVcups.PERIODO.getTime()),java.sql.Types.DATE);
} else {
pstmt_tOracleOutput_1.setNull(6, java.sql.Types.DATE);
}

                        if(InsVcups.ANEXOS_ID == null) {
pstmt_tOracleOutput_1.setNull(7, java.sql.Types.INTEGER);
} else {pstmt_tOracleOutput_1.setInt(7, InsVcups.ANEXOS_ID);
}

                pstmt_tOracleOutput_1.addBatch();
                nb_line_tOracleOutput_1++;
                batchSizeCounter_tOracleOutput_1++;
            if (batchSize_tOracleOutput_1 > 0 &&  batchSize_tOracleOutput_1 <= batchSizeCounter_tOracleOutput_1) {
                try {
                    pstmt_tOracleOutput_1.executeBatch();
                }catch (java.sql.BatchUpdateException e_tOracleOutput_1){
globalMap.put("tOracleOutput_1_ERROR_MESSAGE",e_tOracleOutput_1.getMessage());
			        java.sql.SQLException ne_tOracleOutput_1 = e_tOracleOutput_1.getNextException(),sqle_tOracleOutput_1=null;
			    	String errormessage_tOracleOutput_1;
					if (ne_tOracleOutput_1 != null) {
						// build new exception to provide the original cause
						sqle_tOracleOutput_1 = new java.sql.SQLException(e_tOracleOutput_1.getMessage() + "\ncaused by: " + ne_tOracleOutput_1.getMessage(), ne_tOracleOutput_1.getSQLState(), ne_tOracleOutput_1.getErrorCode(), ne_tOracleOutput_1);
						errormessage_tOracleOutput_1 = sqle_tOracleOutput_1.getMessage();
					}else{
						errormessage_tOracleOutput_1 = e_tOracleOutput_1.getMessage();
					}
	            	
	                	System.err.println(errormessage_tOracleOutput_1);
	            	
	        	}
                tmp_batchUpdateCount_tOracleOutput_1 = pstmt_tOracleOutput_1.getUpdateCount();
                    insertedCount_tOracleOutput_1
                += (tmp_batchUpdateCount_tOracleOutput_1!=-1?tmp_batchUpdateCount_tOracleOutput_1:0);
                rowsToCommitCount_tOracleOutput_1 += (tmp_batchUpdateCount_tOracleOutput_1!=-1?tmp_batchUpdateCount_tOracleOutput_1:0);
                batchSizeCounter_tOracleOutput_1 = 0;
            }
                commitCounter_tOracleOutput_1++;
                if(commitEvery_tOracleOutput_1 <= commitCounter_tOracleOutput_1) {
                    if(batchSizeCounter_tOracleOutput_1 > 0) {
                        try {
                            pstmt_tOracleOutput_1.executeBatch();
                        }catch (java.sql.BatchUpdateException e_tOracleOutput_1){
globalMap.put("tOracleOutput_1_ERROR_MESSAGE",e_tOracleOutput_1.getMessage());
					        java.sql.SQLException ne_tOracleOutput_1 = e_tOracleOutput_1.getNextException(),sqle_tOracleOutput_1=null;
					    	String errormessage_tOracleOutput_1;
							if (ne_tOracleOutput_1 != null) {
								// build new exception to provide the original cause
								sqle_tOracleOutput_1 = new java.sql.SQLException(e_tOracleOutput_1.getMessage() + "\ncaused by: " + ne_tOracleOutput_1.getMessage(), ne_tOracleOutput_1.getSQLState(), ne_tOracleOutput_1.getErrorCode(), ne_tOracleOutput_1);
								errormessage_tOracleOutput_1 = sqle_tOracleOutput_1.getMessage();
							}else{
								errormessage_tOracleOutput_1 = e_tOracleOutput_1.getMessage();
							}
			            	
			                	System.err.println(errormessage_tOracleOutput_1);
			            	
			        	}
                        tmp_batchUpdateCount_tOracleOutput_1 = pstmt_tOracleOutput_1.getUpdateCount();
                            insertedCount_tOracleOutput_1
                        += (tmp_batchUpdateCount_tOracleOutput_1!=-1?tmp_batchUpdateCount_tOracleOutput_1:0);
                        rowsToCommitCount_tOracleOutput_1 += (tmp_batchUpdateCount_tOracleOutput_1!=-1?tmp_batchUpdateCount_tOracleOutput_1:0);
                    }
                    if(rowsToCommitCount_tOracleOutput_1 != 0){
                    	
                    }
                    conn_tOracleOutput_1.commit();
                    if(rowsToCommitCount_tOracleOutput_1 != 0){
                    	
                    	rowsToCommitCount_tOracleOutput_1 = 0;
                    }
                    commitCounter_tOracleOutput_1=0;
                    	batchSizeCounter_tOracleOutput_1=0;
                }

 


	tos_count_tOracleOutput_1++;

/**
 * [tOracleOutput_1 main ] stop
 */
	
	/**
	 * [tOracleOutput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleOutput_1";
	
	

 



/**
 * [tOracleOutput_1 process_data_begin ] stop
 */
	
	/**
	 * [tOracleOutput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_1";
	
	

 



/**
 * [tOracleOutput_1 process_data_end ] stop
 */

} // End of branch "InsVcups"




	
	/**
	 * [tMap_7 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_7";
	
	

 



/**
 * [tMap_7 process_data_end ] stop
 */



	
	/**
	 * [tHashInput_10 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashInput_10";
	
	

 



/**
 * [tHashInput_10 process_data_end ] stop
 */
	
	/**
	 * [tHashInput_10 end ] start
	 */

	

	
	
	currentComponent="tHashInput_10";
	
	
    

		
			nb_line_tHashInput_10++;
		}	
    		
    		mf_tHashInput_10.clearCache("tHashFile_DistribucionCI_" + pid +"_tHashOutput_7");
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_DistribucionCI_" + pid +"_tHashOutput_7");
	


	globalMap.put("tHashInput_10_NB_LINE", nb_line_tHashInput_10);       

 

ok_Hash.put("tHashInput_10", true);
end_Hash.put("tHashInput_10", System.currentTimeMillis());




/**
 * [tHashInput_10 end ] stop
 */

	
	/**
	 * [tMap_7 end ] start
	 */

	

	
	
	currentComponent="tMap_7";
	
	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_row6 != null) {
						tHash_Lookup_row6.endGet();
					}
					globalMap.remove( "tHash_Lookup_row6" );

					
					
				
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row1");
			  	}
			  	
 

ok_Hash.put("tMap_7", true);
end_Hash.put("tMap_7", System.currentTimeMillis());




/**
 * [tMap_7 end ] stop
 */

	
	/**
	 * [tOracleOutput_1 end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_1";
	
	
	



	
        if(batchSizeCounter_tOracleOutput_1 > 0) {
            try {
            	if (pstmt_tOracleOutput_1 != null) {
					
					pstmt_tOracleOutput_1.executeBatch();
					
        	    }
            }catch (java.sql.BatchUpdateException e_tOracleOutput_1){
globalMap.put("tOracleOutput_1_ERROR_MESSAGE",e_tOracleOutput_1.getMessage());
		        java.sql.SQLException ne_tOracleOutput_1 = e_tOracleOutput_1.getNextException(),sqle_tOracleOutput_1=null;
		    	String errormessage_tOracleOutput_1;
				if (ne_tOracleOutput_1 != null) {
					// build new exception to provide the original cause
					sqle_tOracleOutput_1 = new java.sql.SQLException(e_tOracleOutput_1.getMessage() + "\ncaused by: " + ne_tOracleOutput_1.getMessage(), ne_tOracleOutput_1.getSQLState(), ne_tOracleOutput_1.getErrorCode(), ne_tOracleOutput_1);
					errormessage_tOracleOutput_1 = sqle_tOracleOutput_1.getMessage();
				}else{
					errormessage_tOracleOutput_1 = e_tOracleOutput_1.getMessage();
				}
            	
                	System.err.println(errormessage_tOracleOutput_1);
            	
        	}
        	if (pstmt_tOracleOutput_1 != null) {
            	tmp_batchUpdateCount_tOracleOutput_1 = pstmt_tOracleOutput_1.getUpdateCount();
    	    	
    	    		insertedCount_tOracleOutput_1
    	    	
    	    	+= (tmp_batchUpdateCount_tOracleOutput_1!=-1?tmp_batchUpdateCount_tOracleOutput_1:0);
				rowsToCommitCount_tOracleOutput_1 += (tmp_batchUpdateCount_tOracleOutput_1!=-1?tmp_batchUpdateCount_tOracleOutput_1:0);
            }
        }
        if(pstmt_tOracleOutput_1 != null) {
			
				pstmt_tOracleOutput_1.close();
				resourceMap.remove("pstmt_tOracleOutput_1");
			
        }
    resourceMap.put("statementClosed_tOracleOutput_1", true);
		if(commitCounter_tOracleOutput_1 > 0 && rowsToCommitCount_tOracleOutput_1 != 0) {
			
		}
		conn_tOracleOutput_1.commit();
		if(commitCounter_tOracleOutput_1 > 0 && rowsToCommitCount_tOracleOutput_1 != 0) {
			
			rowsToCommitCount_tOracleOutput_1 = 0;
		}
		commitCounter_tOracleOutput_1 = 0;
		
		
		conn_tOracleOutput_1 .close();
		
		resourceMap.put("finish_tOracleOutput_1", true);
   	

	
	nb_line_deleted_tOracleOutput_1=nb_line_deleted_tOracleOutput_1+ deletedCount_tOracleOutput_1;
	nb_line_update_tOracleOutput_1=nb_line_update_tOracleOutput_1 + updatedCount_tOracleOutput_1;
	nb_line_inserted_tOracleOutput_1=nb_line_inserted_tOracleOutput_1 + insertedCount_tOracleOutput_1;
	nb_line_rejected_tOracleOutput_1=nb_line_rejected_tOracleOutput_1 + rejectedCount_tOracleOutput_1;
	
        globalMap.put("tOracleOutput_1_NB_LINE",nb_line_tOracleOutput_1);
        globalMap.put("tOracleOutput_1_NB_LINE_UPDATED",nb_line_update_tOracleOutput_1);
        globalMap.put("tOracleOutput_1_NB_LINE_INSERTED",nb_line_inserted_tOracleOutput_1);
        globalMap.put("tOracleOutput_1_NB_LINE_DELETED",nb_line_deleted_tOracleOutput_1);
        globalMap.put("tOracleOutput_1_NB_LINE_REJECTED", nb_line_rejected_tOracleOutput_1);
    

	



				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"InsVcups");
			  	}
			  	
 

ok_Hash.put("tOracleOutput_1", true);
end_Hash.put("tOracleOutput_1", System.currentTimeMillis());




/**
 * [tOracleOutput_1 end ] stop
 */






				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tHashInput_10:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk4", 0, "ok");
								} 
							
							tOracleRow_2Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
					     			//free memory for "tMap_7"
					     			globalMap.remove("tHash_Lookup_row6"); 
				     			
				try{
					
	
	/**
	 * [tHashInput_10 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_10";
	
	

 



/**
 * [tHashInput_10 finally ] stop
 */

	
	/**
	 * [tMap_7 finally ] start
	 */

	

	
	
	currentComponent="tMap_7";
	
	

 



/**
 * [tMap_7 finally ] stop
 */

	
	/**
	 * [tOracleOutput_1 finally ] start
	 */

	

	
	
	currentComponent="tOracleOutput_1";
	
	



    try {
    if (resourceMap.get("statementClosed_tOracleOutput_1") == null) {
                java.sql.PreparedStatement pstmtToClose_tOracleOutput_1 = null;
                if ((pstmtToClose_tOracleOutput_1 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tOracleOutput_1")) != null) {
                    pstmtToClose_tOracleOutput_1.close();
                }
    }
    } finally {
        if(resourceMap.get("finish_tOracleOutput_1") == null){
            java.sql.Connection ctn_tOracleOutput_1 = null;
            if((ctn_tOracleOutput_1 = (java.sql.Connection)resourceMap.get("conn_tOracleOutput_1")) != null){
                try {
                    ctn_tOracleOutput_1.close();
                } catch (java.sql.SQLException sqlEx_tOracleOutput_1) {
                    String errorMessage_tOracleOutput_1 = "failed to close the connection in tOracleOutput_1 :" + sqlEx_tOracleOutput_1.getMessage();
                    System.err.println(errorMessage_tOracleOutput_1);
                }
            }
        }
    }
 



/**
 * [tOracleOutput_1 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tHashInput_10_SUBPROCESS_STATE", 1);
	}
	


public void tOracleRow_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleRow_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tOracleRow_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleRow_2", false);
		start_Hash.put("tOracleRow_2", System.currentTimeMillis());
		
	
	currentComponent="tOracleRow_2";
	
	
		int tos_count_tOracleRow_2 = 0;
		

	java.sql.Connection conn_tOracleRow_2 = null;
	String query_tOracleRow_2 = "";
	boolean whetherReject_tOracleRow_2 = false;
	int count_tOracleRow_2 = 0;
				conn_tOracleRow_2 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");
			
        resourceMap.put("conn_tOracleRow_2", conn_tOracleRow_2);
        java.sql.Statement stmt_tOracleRow_2 = conn_tOracleRow_2.createStatement();
        resourceMap.put("stmt_tOracleRow_2", stmt_tOracleRow_2);

 



/**
 * [tOracleRow_2 begin ] stop
 */
	
	/**
	 * [tOracleRow_2 main ] start
	 */

	

	
	
	currentComponent="tOracleRow_2";
	
	

query_tOracleRow_2 = "update cec_anexos ca \nset ca.ffin = sysdate,\n ca.estregistro_id = 1,\n ca.estados_id = (select id from afi_estextdere"
+"chos ae where ae.codigo  = 6  and ae.estregistro_id = 1),\n ca.observacion = 'Distribución de costos indirectos realizad"
+"a satisfatoriamente'\nwhere ca.id ="+context.AnexoId;
whetherReject_tOracleRow_2 = false;
globalMap.put("tOracleRow_2_QUERY",query_tOracleRow_2);
try {
		stmt_tOracleRow_2.execute(query_tOracleRow_2);
		
	} catch (java.lang.Exception e) {
globalMap.put("tOracleRow_2_ERROR_MESSAGE",e.getMessage());
		whetherReject_tOracleRow_2 = true;
		
				System.err.print(e.getMessage());
				
	}
	

 


	tos_count_tOracleRow_2++;

/**
 * [tOracleRow_2 main ] stop
 */
	
	/**
	 * [tOracleRow_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleRow_2";
	
	

 



/**
 * [tOracleRow_2 process_data_begin ] stop
 */
	
	/**
	 * [tOracleRow_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleRow_2";
	
	

 



/**
 * [tOracleRow_2 process_data_end ] stop
 */
	
	/**
	 * [tOracleRow_2 end ] start
	 */

	

	
	
	currentComponent="tOracleRow_2";
	
	

	globalMap.put("tOracleRow_2_NB_LINE", count_tOracleRow_2);
        stmt_tOracleRow_2.close();
        resourceMap.remove("stmt_tOracleRow_2");
    resourceMap.put("statementClosed_tOracleRow_2", true);
    resourceMap.put("finish_tOracleRow_2", true);

 

ok_Hash.put("tOracleRow_2", true);
end_Hash.put("tOracleRow_2", System.currentTimeMillis());




/**
 * [tOracleRow_2 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleRow_2 finally ] start
	 */

	

	
	
	currentComponent="tOracleRow_2";
	
	

    if (resourceMap.get("statementClosed_tOracleRow_2") == null) {
            java.sql.Statement stmtToClose_tOracleRow_2 = null;
            if ((stmtToClose_tOracleRow_2 = (java.sql.Statement) resourceMap.remove("stmt_tOracleRow_2")) != null) {
                stmtToClose_tOracleRow_2.close();
            }
    }
 



/**
 * [tOracleRow_2 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleRow_2_SUBPROCESS_STATE", 1);
	}
	


public static class row14Struct implements routines.system.IPersistableComparableLookupRow<row14Struct> {
    final static byte[] commonByteArrayLock_CEC_DISTRIBUCION_CI_DistribucionCI = new byte[0];
    static byte[] commonByteArray_CEC_DISTRIBUCION_CI_DistribucionCI = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public int FUERZA_ID;

				public int getFUERZA_ID () {
					return this.FUERZA_ID;
				}

				public Boolean FUERZA_IDIsNullable(){
				    return false;
				}
				public Boolean FUERZA_IDIsKey(){
				    return false;
				}
				public Integer FUERZA_IDLength(){
				    return 0;
				}
				public Integer FUERZA_IDPrecision(){
				    return null;
				}
				public String FUERZA_IDDefault(){
				
					return "";
				
				}
				public String FUERZA_IDComment(){
				
				    return "";
				
				}
				public String FUERZA_IDPattern(){
				
					return "";
				
				}
				public String FUERZA_IDOriginalDbColumnName(){
				
					return "FUERZA_ID";
				
				}

				
			    public String NOMBRE;

				public String getNOMBRE () {
					return this.NOMBRE;
				}

				public Boolean NOMBREIsNullable(){
				    return false;
				}
				public Boolean NOMBREIsKey(){
				    return false;
				}
				public Integer NOMBRELength(){
				    return 2000;
				}
				public Integer NOMBREPrecision(){
				    return 0;
				}
				public String NOMBREDefault(){
				
					return null;
				
				}
				public String NOMBREComment(){
				
				    return "";
				
				}
				public String NOMBREPattern(){
				
					return "";
				
				}
				public String NOMBREOriginalDbColumnName(){
				
					return "NOMBRE";
				
				}

				
			    public Double PORCENTAJE;

				public Double getPORCENTAJE () {
					return this.PORCENTAJE;
				}

				public Boolean PORCENTAJEIsNullable(){
				    return true;
				}
				public Boolean PORCENTAJEIsKey(){
				    return false;
				}
				public Integer PORCENTAJELength(){
				    return 0;
				}
				public Integer PORCENTAJEPrecision(){
				    return null;
				}
				public String PORCENTAJEDefault(){
				
					return "";
				
				}
				public String PORCENTAJEComment(){
				
				    return "";
				
				}
				public String PORCENTAJEPattern(){
				
					return "";
				
				}
				public String PORCENTAJEOriginalDbColumnName(){
				
					return "PORCENTAJE";
				
				}

				
			    public Double GGRL_DISAN_VALOR;

				public Double getGGRL_DISAN_VALOR () {
					return this.GGRL_DISAN_VALOR;
				}

				public Boolean GGRL_DISAN_VALORIsNullable(){
				    return true;
				}
				public Boolean GGRL_DISAN_VALORIsKey(){
				    return false;
				}
				public Integer GGRL_DISAN_VALORLength(){
				    return null;
				}
				public Integer GGRL_DISAN_VALORPrecision(){
				    return null;
				}
				public String GGRL_DISAN_VALORDefault(){
				
					return null;
				
				}
				public String GGRL_DISAN_VALORComment(){
				
				    return "";
				
				}
				public String GGRL_DISAN_VALORPattern(){
				
					return "";
				
				}
				public String GGRL_DISAN_VALOROriginalDbColumnName(){
				
					return "GGRL_DISAN_VALOR";
				
				}

				
			    public String SIGLA;

				public String getSIGLA () {
					return this.SIGLA;
				}

				public Boolean SIGLAIsNullable(){
				    return false;
				}
				public Boolean SIGLAIsKey(){
				    return false;
				}
				public Integer SIGLALength(){
				    return 20;
				}
				public Integer SIGLAPrecision(){
				    return 0;
				}
				public String SIGLADefault(){
				
					return null;
				
				}
				public String SIGLAComment(){
				
				    return "";
				
				}
				public String SIGLAPattern(){
				
					return "";
				
				}
				public String SIGLAOriginalDbColumnName(){
				
					return "SIGLA";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
							result = prime * result + (int) this.FUERZA_ID;
						
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row14Struct other = (row14Struct) obj;
		
						if (this.FUERZA_ID != other.FUERZA_ID)
							return false;
					

		return true;
    }

	public void copyDataTo(row14Struct other) {

		other.FUERZA_ID = this.FUERZA_ID;
	            other.NOMBRE = this.NOMBRE;
	            other.PORCENTAJE = this.PORCENTAJE;
	            other.GGRL_DISAN_VALOR = this.GGRL_DISAN_VALOR;
	            other.SIGLA = this.SIGLA;
	            
	}

	public void copyKeysDataTo(row14Struct other) {

		other.FUERZA_ID = this.FUERZA_ID;
	            	
	}



	
	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			unmarshaller.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private void writeString(String str, DataOutputStream dos, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_CEC_DISTRIBUCION_CI_DistribucionCI) {

        	try {

        		int length = 0;
		
			        this.FUERZA_ID = dis.readInt();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_CEC_DISTRIBUCION_CI_DistribucionCI) {

        	try {

        		int length = 0;
		
			        this.FUERZA_ID = dis.readInt();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.FUERZA_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.FUERZA_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.NOMBRE = readString(dis,ois);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PORCENTAJE = null;
           				} else {
           			    	this.PORCENTAJE = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.GGRL_DISAN_VALOR = null;
           				} else {
           			    	this.GGRL_DISAN_VALOR = dis.readDouble();
           				}
					
						this.SIGLA = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		
						this.NOMBRE = readString(dis,objectIn);
					
			            length = objectIn.readByte();
           				if (length == -1) {
           	    			this.PORCENTAJE = null;
           				} else {
           			    	this.PORCENTAJE = objectIn.readDouble();
           				}
					
			            length = objectIn.readByte();
           				if (length == -1) {
           	    			this.GGRL_DISAN_VALOR = null;
           				} else {
           			    	this.GGRL_DISAN_VALOR = objectIn.readDouble();
           				}
					
						this.SIGLA = readString(dis,objectIn);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeString(this.NOMBRE, dos, oos);
					
						if(this.PORCENTAJE == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PORCENTAJE);
		            	}
					
						if(this.GGRL_DISAN_VALOR == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.GGRL_DISAN_VALOR);
		            	}
					
						writeString(this.SIGLA, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
						writeString(this.NOMBRE, dos, objectOut);
					
						if(this.PORCENTAJE == null) {
							objectOut.writeByte(-1);
						} else {
							objectOut.writeByte(0);
							objectOut.writeDouble(this.PORCENTAJE);
		            	}
					
						if(this.GGRL_DISAN_VALOR == null) {
							objectOut.writeByte(-1);
						} else {
							objectOut.writeByte(0);
							objectOut.writeDouble(this.GGRL_DISAN_VALOR);
		            	}
					
						writeString(this.SIGLA, dos, objectOut);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("FUERZA_ID="+String.valueOf(FUERZA_ID));
		sb.append(",NOMBRE="+NOMBRE);
		sb.append(",PORCENTAJE="+String.valueOf(PORCENTAJE));
		sb.append(",GGRL_DISAN_VALOR="+String.valueOf(GGRL_DISAN_VALOR));
		sb.append(",SIGLA="+SIGLA);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row14Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.FUERZA_ID, other.FUERZA_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tHashInput_5Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tHashInput_5_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row14Struct row14 = new row14Struct();




	
	/**
	 * [tAdvancedHash_row14 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row14", false);
		start_Hash.put("tAdvancedHash_row14", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row14";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row14");
					}
				
		int tos_count_tAdvancedHash_row14 = 0;
		

			   		// connection name:row14
			   		// source node:tHashInput_5 - inputs:(after_tHashInput_1) outputs:(row14,row14) | target node:tAdvancedHash_row14 - inputs:(row14) outputs:()
			   		// linked node: tMap_1 - inputs:(row8,row14,row17) outputs:(TCV01,TCV02)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row14 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.ALL_MATCHES;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row14Struct> tHash_Lookup_row14 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row14Struct>getLookup(matchingModeEnum_row14);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row14", tHash_Lookup_row14);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row14 begin ] stop
 */



	
	/**
	 * [tHashInput_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_5", false);
		start_Hash.put("tHashInput_5", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_5";
	
	
		int tos_count_tHashInput_5 = 0;
		


int nb_line_tHashInput_5 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_5=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<TotalDisanStruct> tHashFile_tHashInput_5 = mf_tHashInput_5.getAdvancedMemoryHashFile("tHashFile_DistribucionCI_" + pid +"_tHashOutput_5");
if(tHashFile_tHashInput_5==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<TotalDisanStruct> iterator_tHashInput_5 = tHashFile_tHashInput_5.iterator();
while (iterator_tHashInput_5.hasNext()) {
    TotalDisanStruct next_tHashInput_5 = iterator_tHashInput_5.next();

	row14.FUERZA_ID = next_tHashInput_5.FUERZA_ID;
	row14.NOMBRE = next_tHashInput_5.NOMBRE;
	row14.PORCENTAJE = next_tHashInput_5.PORCENTAJE;
	row14.GGRL_DISAN_VALOR = next_tHashInput_5.GGRL_DISAN_VALOR;
	row14.SIGLA = next_tHashInput_5.SIGLA;

 



/**
 * [tHashInput_5 begin ] stop
 */
	
	/**
	 * [tHashInput_5 main ] start
	 */

	

	
	
	currentComponent="tHashInput_5";
	
	

 


	tos_count_tHashInput_5++;

/**
 * [tHashInput_5 main ] stop
 */
	
	/**
	 * [tHashInput_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashInput_5";
	
	

 



/**
 * [tHashInput_5 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row14 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row14";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row14"
						
						);
					}
					


			   
			   

					row14Struct row14_HashRow = new row14Struct();
		   	   	   
				
				row14_HashRow.FUERZA_ID = row14.FUERZA_ID;
				
				row14_HashRow.NOMBRE = row14.NOMBRE;
				
				row14_HashRow.PORCENTAJE = row14.PORCENTAJE;
				
				row14_HashRow.GGRL_DISAN_VALOR = row14.GGRL_DISAN_VALOR;
				
				row14_HashRow.SIGLA = row14.SIGLA;
				
			tHash_Lookup_row14.put(row14_HashRow);
			
            




 


	tos_count_tAdvancedHash_row14++;

/**
 * [tAdvancedHash_row14 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row14 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row14";
	
	

 



/**
 * [tAdvancedHash_row14 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row14 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row14";
	
	

 



/**
 * [tAdvancedHash_row14 process_data_end ] stop
 */



	
	/**
	 * [tHashInput_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashInput_5";
	
	

 



/**
 * [tHashInput_5 process_data_end ] stop
 */
	
	/**
	 * [tHashInput_5 end ] start
	 */

	

	
	
	currentComponent="tHashInput_5";
	
	
    

		
			nb_line_tHashInput_5++;
		}	
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_DistribucionCI_" + pid +"_tHashOutput_5");
	


	globalMap.put("tHashInput_5_NB_LINE", nb_line_tHashInput_5);       

 

ok_Hash.put("tHashInput_5", true);
end_Hash.put("tHashInput_5", System.currentTimeMillis());




/**
 * [tHashInput_5 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row14 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row14";
	
	

tHash_Lookup_row14.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row14");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row14", true);
end_Hash.put("tAdvancedHash_row14", System.currentTimeMillis());




/**
 * [tAdvancedHash_row14 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tHashInput_5 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_5";
	
	

 



/**
 * [tHashInput_5 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row14 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row14";
	
	

 



/**
 * [tAdvancedHash_row14 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tHashInput_5_SUBPROCESS_STATE", 1);
	}
	


public static class row17Struct implements routines.system.IPersistableComparableLookupRow<row17Struct> {
    final static byte[] commonByteArrayLock_CEC_DISTRIBUCION_CI_DistribucionCI = new byte[0];
    static byte[] commonByteArray_CEC_DISTRIBUCION_CI_DistribucionCI = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public int FUERZA_ID;

				public int getFUERZA_ID () {
					return this.FUERZA_ID;
				}

				public Boolean FUERZA_IDIsNullable(){
				    return false;
				}
				public Boolean FUERZA_IDIsKey(){
				    return false;
				}
				public Integer FUERZA_IDLength(){
				    return 0;
				}
				public Integer FUERZA_IDPrecision(){
				    return null;
				}
				public String FUERZA_IDDefault(){
				
					return "";
				
				}
				public String FUERZA_IDComment(){
				
				    return "";
				
				}
				public String FUERZA_IDPattern(){
				
					return "";
				
				}
				public String FUERZA_IDOriginalDbColumnName(){
				
					return "FUERZA_ID";
				
				}

				
			    public String NOMBRE;

				public String getNOMBRE () {
					return this.NOMBRE;
				}

				public Boolean NOMBREIsNullable(){
				    return false;
				}
				public Boolean NOMBREIsKey(){
				    return false;
				}
				public Integer NOMBRELength(){
				    return 2000;
				}
				public Integer NOMBREPrecision(){
				    return 0;
				}
				public String NOMBREDefault(){
				
					return null;
				
				}
				public String NOMBREComment(){
				
				    return "";
				
				}
				public String NOMBREPattern(){
				
					return "";
				
				}
				public String NOMBREOriginalDbColumnName(){
				
					return "NOMBRE";
				
				}

				
			    public Double PORCENTAJE;

				public Double getPORCENTAJE () {
					return this.PORCENTAJE;
				}

				public Boolean PORCENTAJEIsNullable(){
				    return true;
				}
				public Boolean PORCENTAJEIsKey(){
				    return false;
				}
				public Integer PORCENTAJELength(){
				    return 0;
				}
				public Integer PORCENTAJEPrecision(){
				    return null;
				}
				public String PORCENTAJEDefault(){
				
					return "";
				
				}
				public String PORCENTAJEComment(){
				
				    return "";
				
				}
				public String PORCENTAJEPattern(){
				
					return "";
				
				}
				public String PORCENTAJEOriginalDbColumnName(){
				
					return "PORCENTAJE";
				
				}

				
			    public Double DEP_DISAN_VALOR;

				public Double getDEP_DISAN_VALOR () {
					return this.DEP_DISAN_VALOR;
				}

				public Boolean DEP_DISAN_VALORIsNullable(){
				    return true;
				}
				public Boolean DEP_DISAN_VALORIsKey(){
				    return false;
				}
				public Integer DEP_DISAN_VALORLength(){
				    return null;
				}
				public Integer DEP_DISAN_VALORPrecision(){
				    return null;
				}
				public String DEP_DISAN_VALORDefault(){
				
					return null;
				
				}
				public String DEP_DISAN_VALORComment(){
				
				    return "";
				
				}
				public String DEP_DISAN_VALORPattern(){
				
					return "";
				
				}
				public String DEP_DISAN_VALOROriginalDbColumnName(){
				
					return "DEP_DISAN_VALOR";
				
				}

				
			    public String SIGLA;

				public String getSIGLA () {
					return this.SIGLA;
				}

				public Boolean SIGLAIsNullable(){
				    return false;
				}
				public Boolean SIGLAIsKey(){
				    return false;
				}
				public Integer SIGLALength(){
				    return 20;
				}
				public Integer SIGLAPrecision(){
				    return 0;
				}
				public String SIGLADefault(){
				
					return null;
				
				}
				public String SIGLAComment(){
				
				    return "";
				
				}
				public String SIGLAPattern(){
				
					return "";
				
				}
				public String SIGLAOriginalDbColumnName(){
				
					return "SIGLA";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
							result = prime * result + (int) this.FUERZA_ID;
						
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row17Struct other = (row17Struct) obj;
		
						if (this.FUERZA_ID != other.FUERZA_ID)
							return false;
					

		return true;
    }

	public void copyDataTo(row17Struct other) {

		other.FUERZA_ID = this.FUERZA_ID;
	            other.NOMBRE = this.NOMBRE;
	            other.PORCENTAJE = this.PORCENTAJE;
	            other.DEP_DISAN_VALOR = this.DEP_DISAN_VALOR;
	            other.SIGLA = this.SIGLA;
	            
	}

	public void copyKeysDataTo(row17Struct other) {

		other.FUERZA_ID = this.FUERZA_ID;
	            	
	}



	
	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			unmarshaller.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private void writeString(String str, DataOutputStream dos, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_CEC_DISTRIBUCION_CI_DistribucionCI) {

        	try {

        		int length = 0;
		
			        this.FUERZA_ID = dis.readInt();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_CEC_DISTRIBUCION_CI_DistribucionCI) {

        	try {

        		int length = 0;
		
			        this.FUERZA_ID = dis.readInt();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.FUERZA_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.FUERZA_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.NOMBRE = readString(dis,ois);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PORCENTAJE = null;
           				} else {
           			    	this.PORCENTAJE = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.DEP_DISAN_VALOR = null;
           				} else {
           			    	this.DEP_DISAN_VALOR = dis.readDouble();
           				}
					
						this.SIGLA = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		
						this.NOMBRE = readString(dis,objectIn);
					
			            length = objectIn.readByte();
           				if (length == -1) {
           	    			this.PORCENTAJE = null;
           				} else {
           			    	this.PORCENTAJE = objectIn.readDouble();
           				}
					
			            length = objectIn.readByte();
           				if (length == -1) {
           	    			this.DEP_DISAN_VALOR = null;
           				} else {
           			    	this.DEP_DISAN_VALOR = objectIn.readDouble();
           				}
					
						this.SIGLA = readString(dis,objectIn);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeString(this.NOMBRE, dos, oos);
					
						if(this.PORCENTAJE == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PORCENTAJE);
		            	}
					
						if(this.DEP_DISAN_VALOR == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.DEP_DISAN_VALOR);
		            	}
					
						writeString(this.SIGLA, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
						writeString(this.NOMBRE, dos, objectOut);
					
						if(this.PORCENTAJE == null) {
							objectOut.writeByte(-1);
						} else {
							objectOut.writeByte(0);
							objectOut.writeDouble(this.PORCENTAJE);
		            	}
					
						if(this.DEP_DISAN_VALOR == null) {
							objectOut.writeByte(-1);
						} else {
							objectOut.writeByte(0);
							objectOut.writeDouble(this.DEP_DISAN_VALOR);
		            	}
					
						writeString(this.SIGLA, dos, objectOut);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("FUERZA_ID="+String.valueOf(FUERZA_ID));
		sb.append(",NOMBRE="+NOMBRE);
		sb.append(",PORCENTAJE="+String.valueOf(PORCENTAJE));
		sb.append(",DEP_DISAN_VALOR="+String.valueOf(DEP_DISAN_VALOR));
		sb.append(",SIGLA="+SIGLA);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row17Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.FUERZA_ID, other.FUERZA_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tHashInput_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tHashInput_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row17Struct row17 = new row17Struct();




	
	/**
	 * [tAdvancedHash_row17 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row17", false);
		start_Hash.put("tAdvancedHash_row17", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row17";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row17");
					}
				
		int tos_count_tAdvancedHash_row17 = 0;
		

			   		// connection name:row17
			   		// source node:tHashInput_2 - inputs:(after_tHashInput_1) outputs:(row17,row17) | target node:tAdvancedHash_row17 - inputs:(row17) outputs:()
			   		// linked node: tMap_1 - inputs:(row8,row14,row17) outputs:(TCV01,TCV02)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row17 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.ALL_MATCHES;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row17Struct> tHash_Lookup_row17 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row17Struct>getLookup(matchingModeEnum_row17);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row17", tHash_Lookup_row17);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row17 begin ] stop
 */



	
	/**
	 * [tHashInput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_2", false);
		start_Hash.put("tHashInput_2", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_2";
	
	
		int tos_count_tHashInput_2 = 0;
		


int nb_line_tHashInput_2 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_2=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<TotalDisanDEPStruct> tHashFile_tHashInput_2 = mf_tHashInput_2.getAdvancedMemoryHashFile("tHashFile_DistribucionCI_" + pid +"_tHashOutput_6");
if(tHashFile_tHashInput_2==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<TotalDisanDEPStruct> iterator_tHashInput_2 = tHashFile_tHashInput_2.iterator();
while (iterator_tHashInput_2.hasNext()) {
    TotalDisanDEPStruct next_tHashInput_2 = iterator_tHashInput_2.next();

	row17.FUERZA_ID = next_tHashInput_2.FUERZA_ID;
	row17.NOMBRE = next_tHashInput_2.NOMBRE;
	row17.PORCENTAJE = next_tHashInput_2.PORCENTAJE;
	row17.DEP_DISAN_VALOR = next_tHashInput_2.DEP_DISAN_VALOR;
	row17.SIGLA = next_tHashInput_2.SIGLA;

 



/**
 * [tHashInput_2 begin ] stop
 */
	
	/**
	 * [tHashInput_2 main ] start
	 */

	

	
	
	currentComponent="tHashInput_2";
	
	

 


	tos_count_tHashInput_2++;

/**
 * [tHashInput_2 main ] stop
 */
	
	/**
	 * [tHashInput_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashInput_2";
	
	

 



/**
 * [tHashInput_2 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row17 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row17";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row17"
						
						);
					}
					


			   
			   

					row17Struct row17_HashRow = new row17Struct();
		   	   	   
				
				row17_HashRow.FUERZA_ID = row17.FUERZA_ID;
				
				row17_HashRow.NOMBRE = row17.NOMBRE;
				
				row17_HashRow.PORCENTAJE = row17.PORCENTAJE;
				
				row17_HashRow.DEP_DISAN_VALOR = row17.DEP_DISAN_VALOR;
				
				row17_HashRow.SIGLA = row17.SIGLA;
				
			tHash_Lookup_row17.put(row17_HashRow);
			
            




 


	tos_count_tAdvancedHash_row17++;

/**
 * [tAdvancedHash_row17 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row17 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row17";
	
	

 



/**
 * [tAdvancedHash_row17 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row17 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row17";
	
	

 



/**
 * [tAdvancedHash_row17 process_data_end ] stop
 */



	
	/**
	 * [tHashInput_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashInput_2";
	
	

 



/**
 * [tHashInput_2 process_data_end ] stop
 */
	
	/**
	 * [tHashInput_2 end ] start
	 */

	

	
	
	currentComponent="tHashInput_2";
	
	
    

		
			nb_line_tHashInput_2++;
		}	
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_DistribucionCI_" + pid +"_tHashOutput_6");
	


	globalMap.put("tHashInput_2_NB_LINE", nb_line_tHashInput_2);       

 

ok_Hash.put("tHashInput_2", true);
end_Hash.put("tHashInput_2", System.currentTimeMillis());




/**
 * [tHashInput_2 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row17 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row17";
	
	

tHash_Lookup_row17.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row17");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row17", true);
end_Hash.put("tAdvancedHash_row17", System.currentTimeMillis());




/**
 * [tAdvancedHash_row17 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tHashInput_2 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_2";
	
	

 



/**
 * [tHashInput_2 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row17 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row17";
	
	

 



/**
 * [tAdvancedHash_row17 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tHashInput_2_SUBPROCESS_STATE", 1);
	}
	


public static class row12Struct implements routines.system.IPersistableComparableLookupRow<row12Struct> {
    final static byte[] commonByteArrayLock_CEC_DISTRIBUCION_CI_DistribucionCI = new byte[0];
    static byte[] commonByteArray_CEC_DISTRIBUCION_CI_DistribucionCI = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public Integer ESMID;

				public Integer getESMID () {
					return this.ESMID;
				}

				public Boolean ESMIDIsNullable(){
				    return true;
				}
				public Boolean ESMIDIsKey(){
				    return false;
				}
				public Integer ESMIDLength(){
				    return null;
				}
				public Integer ESMIDPrecision(){
				    return null;
				}
				public String ESMIDDefault(){
				
					return "";
				
				}
				public String ESMIDComment(){
				
				    return "";
				
				}
				public String ESMIDPattern(){
				
					return "";
				
				}
				public String ESMIDOriginalDbColumnName(){
				
					return "ESMID";
				
				}

				
			    public String SIGLA;

				public String getSIGLA () {
					return this.SIGLA;
				}

				public Boolean SIGLAIsNullable(){
				    return true;
				}
				public Boolean SIGLAIsKey(){
				    return false;
				}
				public Integer SIGLALength(){
				    return null;
				}
				public Integer SIGLAPrecision(){
				    return null;
				}
				public String SIGLADefault(){
				
					return null;
				
				}
				public String SIGLAComment(){
				
				    return "";
				
				}
				public String SIGLAPattern(){
				
					return "";
				
				}
				public String SIGLAOriginalDbColumnName(){
				
					return "SIGLA";
				
				}

				
			    public Integer FUERZA_ID;

				public Integer getFUERZA_ID () {
					return this.FUERZA_ID;
				}

				public Boolean FUERZA_IDIsNullable(){
				    return true;
				}
				public Boolean FUERZA_IDIsKey(){
				    return false;
				}
				public Integer FUERZA_IDLength(){
				    return null;
				}
				public Integer FUERZA_IDPrecision(){
				    return null;
				}
				public String FUERZA_IDDefault(){
				
					return "";
				
				}
				public String FUERZA_IDComment(){
				
				    return "";
				
				}
				public String FUERZA_IDPattern(){
				
					return "";
				
				}
				public String FUERZA_IDOriginalDbColumnName(){
				
					return "FUERZA_ID";
				
				}

				
			    public String SIGLACI;

				public String getSIGLACI () {
					return this.SIGLACI;
				}

				public Boolean SIGLACIIsNullable(){
				    return false;
				}
				public Boolean SIGLACIIsKey(){
				    return false;
				}
				public Integer SIGLACILength(){
				    return null;
				}
				public Integer SIGLACIPrecision(){
				    return null;
				}
				public String SIGLACIDefault(){
				
					return null;
				
				}
				public String SIGLACIComment(){
				
				    return "";
				
				}
				public String SIGLACIPattern(){
				
					return "";
				
				}
				public String SIGLACIOriginalDbColumnName(){
				
					return "SIGLACI";
				
				}

				
			    public Double VALOR;

				public Double getVALOR () {
					return this.VALOR;
				}

				public Boolean VALORIsNullable(){
				    return true;
				}
				public Boolean VALORIsKey(){
				    return false;
				}
				public Integer VALORLength(){
				    return null;
				}
				public Integer VALORPrecision(){
				    return null;
				}
				public String VALORDefault(){
				
					return "";
				
				}
				public String VALORComment(){
				
				    return "";
				
				}
				public String VALORPattern(){
				
					return "";
				
				}
				public String VALOROriginalDbColumnName(){
				
					return "VALOR";
				
				}

				
			    public double TANEXOS_ID;

				public double getTANEXOS_ID () {
					return this.TANEXOS_ID;
				}

				public Boolean TANEXOS_IDIsNullable(){
				    return false;
				}
				public Boolean TANEXOS_IDIsKey(){
				    return false;
				}
				public Integer TANEXOS_IDLength(){
				    return null;
				}
				public Integer TANEXOS_IDPrecision(){
				    return null;
				}
				public String TANEXOS_IDDefault(){
				
					return "";
				
				}
				public String TANEXOS_IDComment(){
				
				    return "";
				
				}
				public String TANEXOS_IDPattern(){
				
					return "";
				
				}
				public String TANEXOS_IDOriginalDbColumnName(){
				
					return "TANEXOS_ID";
				
				}

				
			    public Integer CECO_ID;

				public Integer getCECO_ID () {
					return this.CECO_ID;
				}

				public Boolean CECO_IDIsNullable(){
				    return true;
				}
				public Boolean CECO_IDIsKey(){
				    return false;
				}
				public Integer CECO_IDLength(){
				    return null;
				}
				public Integer CECO_IDPrecision(){
				    return null;
				}
				public String CECO_IDDefault(){
				
					return "";
				
				}
				public String CECO_IDComment(){
				
				    return "";
				
				}
				public String CECO_IDPattern(){
				
					return "";
				
				}
				public String CECO_IDOriginalDbColumnName(){
				
					return "CECO_ID";
				
				}

				
			    public Double ESPECIALIDADES_ID;

				public Double getESPECIALIDADES_ID () {
					return this.ESPECIALIDADES_ID;
				}

				public Boolean ESPECIALIDADES_IDIsNullable(){
				    return true;
				}
				public Boolean ESPECIALIDADES_IDIsKey(){
				    return false;
				}
				public Integer ESPECIALIDADES_IDLength(){
				    return null;
				}
				public Integer ESPECIALIDADES_IDPrecision(){
				    return null;
				}
				public String ESPECIALIDADES_IDDefault(){
				
					return "";
				
				}
				public String ESPECIALIDADES_IDComment(){
				
				    return "";
				
				}
				public String ESPECIALIDADES_IDPattern(){
				
					return "";
				
				}
				public String ESPECIALIDADES_IDOriginalDbColumnName(){
				
					return "ESPECIALIDADES_ID";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.ESMID == null) ? 0 : this.ESMID.hashCode());
					
						result = prime * result + ((this.FUERZA_ID == null) ? 0 : this.FUERZA_ID.hashCode());
					
						result = prime * result + ((this.CECO_ID == null) ? 0 : this.CECO_ID.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row12Struct other = (row12Struct) obj;
		
						if (this.ESMID == null) {
							if (other.ESMID != null)
								return false;
						
						} else if (!this.ESMID.equals(other.ESMID))
						
							return false;
					
						if (this.FUERZA_ID == null) {
							if (other.FUERZA_ID != null)
								return false;
						
						} else if (!this.FUERZA_ID.equals(other.FUERZA_ID))
						
							return false;
					
						if (this.CECO_ID == null) {
							if (other.CECO_ID != null)
								return false;
						
						} else if (!this.CECO_ID.equals(other.CECO_ID))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row12Struct other) {

		other.ESMID = this.ESMID;
	            other.SIGLA = this.SIGLA;
	            other.FUERZA_ID = this.FUERZA_ID;
	            other.SIGLACI = this.SIGLACI;
	            other.VALOR = this.VALOR;
	            other.TANEXOS_ID = this.TANEXOS_ID;
	            other.CECO_ID = this.CECO_ID;
	            other.ESPECIALIDADES_ID = this.ESPECIALIDADES_ID;
	            
	}

	public void copyKeysDataTo(row12Struct other) {

		other.ESMID = this.ESMID;
	            	other.FUERZA_ID = this.FUERZA_ID;
	            	other.CECO_ID = this.CECO_ID;
	            	
	}



	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}
	
	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			unmarshaller.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private void writeString(String str, DataOutputStream dos, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_CEC_DISTRIBUCION_CI_DistribucionCI) {

        	try {

        		int length = 0;
		
						this.ESMID = readInteger(dis);
					
						this.FUERZA_ID = readInteger(dis);
					
						this.CECO_ID = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_CEC_DISTRIBUCION_CI_DistribucionCI) {

        	try {

        		int length = 0;
		
						this.ESMID = readInteger(dis);
					
						this.FUERZA_ID = readInteger(dis);
					
						this.CECO_ID = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.ESMID,dos);
					
					// Integer
				
						writeInteger(this.FUERZA_ID,dos);
					
					// Integer
				
						writeInteger(this.CECO_ID,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.ESMID,dos);
					
					// Integer
				
						writeInteger(this.FUERZA_ID,dos);
					
					// Integer
				
						writeInteger(this.CECO_ID,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.SIGLA = readString(dis,ois);
					
						this.SIGLACI = readString(dis,ois);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.VALOR = null;
           				} else {
           			    	this.VALOR = dis.readDouble();
           				}
					
			            this.TANEXOS_ID = dis.readDouble();
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.ESPECIALIDADES_ID = null;
           				} else {
           			    	this.ESPECIALIDADES_ID = dis.readDouble();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		
						this.SIGLA = readString(dis,objectIn);
					
						this.SIGLACI = readString(dis,objectIn);
					
			            length = objectIn.readByte();
           				if (length == -1) {
           	    			this.VALOR = null;
           				} else {
           			    	this.VALOR = objectIn.readDouble();
           				}
					
			            this.TANEXOS_ID = objectIn.readDouble();
					
			            length = objectIn.readByte();
           				if (length == -1) {
           	    			this.ESPECIALIDADES_ID = null;
           				} else {
           			    	this.ESPECIALIDADES_ID = objectIn.readDouble();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeString(this.SIGLA, dos, oos);
					
						writeString(this.SIGLACI, dos, oos);
					
						if(this.VALOR == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.VALOR);
		            	}
					
		            	dos.writeDouble(this.TANEXOS_ID);
					
						if(this.ESPECIALIDADES_ID == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.ESPECIALIDADES_ID);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
						writeString(this.SIGLA, dos, objectOut);
					
						writeString(this.SIGLACI, dos, objectOut);
					
						if(this.VALOR == null) {
							objectOut.writeByte(-1);
						} else {
							objectOut.writeByte(0);
							objectOut.writeDouble(this.VALOR);
		            	}
					
					objectOut.writeDouble(this.TANEXOS_ID);
					
						if(this.ESPECIALIDADES_ID == null) {
							objectOut.writeByte(-1);
						} else {
							objectOut.writeByte(0);
							objectOut.writeDouble(this.ESPECIALIDADES_ID);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ESMID="+String.valueOf(ESMID));
		sb.append(",SIGLA="+SIGLA);
		sb.append(",FUERZA_ID="+String.valueOf(FUERZA_ID));
		sb.append(",SIGLACI="+SIGLACI);
		sb.append(",VALOR="+String.valueOf(VALOR));
		sb.append(",TANEXOS_ID="+String.valueOf(TANEXOS_ID));
		sb.append(",CECO_ID="+String.valueOf(CECO_ID));
		sb.append(",ESPECIALIDADES_ID="+String.valueOf(ESPECIALIDADES_ID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row12Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.ESMID, other.ESMID);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.FUERZA_ID, other.FUERZA_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.CECO_ID, other.CECO_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tHashInput_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tHashInput_3_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row12Struct row12 = new row12Struct();




	
	/**
	 * [tAdvancedHash_row12 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row12", false);
		start_Hash.put("tAdvancedHash_row12", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row12";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row12");
					}
				
		int tos_count_tAdvancedHash_row12 = 0;
		

			   		// connection name:row12
			   		// source node:tHashInput_3 - inputs:(after_tHashInput_1) outputs:(row12,row12) | target node:tAdvancedHash_row12 - inputs:(row12) outputs:()
			   		// linked node: tMap_3 - inputs:(TCV02,row12,row21) outputs:(TCV04)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row12 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row12Struct> tHash_Lookup_row12 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row12Struct>getLookup(matchingModeEnum_row12);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row12", tHash_Lookup_row12);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row12 begin ] stop
 */



	
	/**
	 * [tHashInput_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_3", false);
		start_Hash.put("tHashInput_3", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_3";
	
	
		int tos_count_tHashInput_3 = 0;
		


int nb_line_tHashInput_3 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_3=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<CI_DEP_CECOStruct> tHashFile_tHashInput_3 = mf_tHashInput_3.getAdvancedMemoryHashFile("tHashFile_DistribucionCI_" + pid +"_tHashOutput_11");
if(tHashFile_tHashInput_3==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<CI_DEP_CECOStruct> iterator_tHashInput_3 = tHashFile_tHashInput_3.iterator();
while (iterator_tHashInput_3.hasNext()) {
    CI_DEP_CECOStruct next_tHashInput_3 = iterator_tHashInput_3.next();

	row12.ESMID = next_tHashInput_3.ESMID;
	row12.SIGLA = next_tHashInput_3.SIGLA;
	row12.FUERZA_ID = next_tHashInput_3.FUERZA_ID;
	row12.SIGLACI = next_tHashInput_3.SIGLACI;
	row12.VALOR = next_tHashInput_3.VALOR;
	row12.TANEXOS_ID = next_tHashInput_3.TANEXOS_ID;
	row12.CECO_ID = next_tHashInput_3.CECO_ID;
	row12.ESPECIALIDADES_ID = next_tHashInput_3.ESPECIALIDADES_ID;

 



/**
 * [tHashInput_3 begin ] stop
 */
	
	/**
	 * [tHashInput_3 main ] start
	 */

	

	
	
	currentComponent="tHashInput_3";
	
	

 


	tos_count_tHashInput_3++;

/**
 * [tHashInput_3 main ] stop
 */
	
	/**
	 * [tHashInput_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashInput_3";
	
	

 



/**
 * [tHashInput_3 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row12 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row12";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row12"
						
						);
					}
					


			   
			   

					row12Struct row12_HashRow = new row12Struct();
		   	   	   
				
				row12_HashRow.ESMID = row12.ESMID;
				
				row12_HashRow.SIGLA = row12.SIGLA;
				
				row12_HashRow.FUERZA_ID = row12.FUERZA_ID;
				
				row12_HashRow.SIGLACI = row12.SIGLACI;
				
				row12_HashRow.VALOR = row12.VALOR;
				
				row12_HashRow.TANEXOS_ID = row12.TANEXOS_ID;
				
				row12_HashRow.CECO_ID = row12.CECO_ID;
				
				row12_HashRow.ESPECIALIDADES_ID = row12.ESPECIALIDADES_ID;
				
			tHash_Lookup_row12.put(row12_HashRow);
			
            




 


	tos_count_tAdvancedHash_row12++;

/**
 * [tAdvancedHash_row12 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row12 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row12";
	
	

 



/**
 * [tAdvancedHash_row12 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row12 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row12";
	
	

 



/**
 * [tAdvancedHash_row12 process_data_end ] stop
 */



	
	/**
	 * [tHashInput_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashInput_3";
	
	

 



/**
 * [tHashInput_3 process_data_end ] stop
 */
	
	/**
	 * [tHashInput_3 end ] start
	 */

	

	
	
	currentComponent="tHashInput_3";
	
	
    

		
			nb_line_tHashInput_3++;
		}	
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_DistribucionCI_" + pid +"_tHashOutput_11");
	


	globalMap.put("tHashInput_3_NB_LINE", nb_line_tHashInput_3);       

 

ok_Hash.put("tHashInput_3", true);
end_Hash.put("tHashInput_3", System.currentTimeMillis());




/**
 * [tHashInput_3 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row12 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row12";
	
	

tHash_Lookup_row12.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row12");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row12", true);
end_Hash.put("tAdvancedHash_row12", System.currentTimeMillis());




/**
 * [tAdvancedHash_row12 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tHashInput_3 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_3";
	
	

 



/**
 * [tHashInput_3 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row12 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row12";
	
	

 



/**
 * [tAdvancedHash_row12 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tHashInput_3_SUBPROCESS_STATE", 1);
	}
	


public static class row11Struct implements routines.system.IPersistableComparableLookupRow<row11Struct> {
    final static byte[] commonByteArrayLock_CEC_DISTRIBUCION_CI_DistribucionCI = new byte[0];
    static byte[] commonByteArray_CEC_DISTRIBUCION_CI_DistribucionCI = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public Integer ESMID;

				public Integer getESMID () {
					return this.ESMID;
				}

				public Boolean ESMIDIsNullable(){
				    return true;
				}
				public Boolean ESMIDIsKey(){
				    return false;
				}
				public Integer ESMIDLength(){
				    return null;
				}
				public Integer ESMIDPrecision(){
				    return null;
				}
				public String ESMIDDefault(){
				
					return "";
				
				}
				public String ESMIDComment(){
				
				    return "";
				
				}
				public String ESMIDPattern(){
				
					return "";
				
				}
				public String ESMIDOriginalDbColumnName(){
				
					return "ESMID";
				
				}

				
			    public String SIGLA;

				public String getSIGLA () {
					return this.SIGLA;
				}

				public Boolean SIGLAIsNullable(){
				    return true;
				}
				public Boolean SIGLAIsKey(){
				    return false;
				}
				public Integer SIGLALength(){
				    return null;
				}
				public Integer SIGLAPrecision(){
				    return null;
				}
				public String SIGLADefault(){
				
					return null;
				
				}
				public String SIGLAComment(){
				
				    return "";
				
				}
				public String SIGLAPattern(){
				
					return "";
				
				}
				public String SIGLAOriginalDbColumnName(){
				
					return "SIGLA";
				
				}

				
			    public Integer FUERZA_ID;

				public Integer getFUERZA_ID () {
					return this.FUERZA_ID;
				}

				public Boolean FUERZA_IDIsNullable(){
				    return true;
				}
				public Boolean FUERZA_IDIsKey(){
				    return false;
				}
				public Integer FUERZA_IDLength(){
				    return null;
				}
				public Integer FUERZA_IDPrecision(){
				    return null;
				}
				public String FUERZA_IDDefault(){
				
					return "";
				
				}
				public String FUERZA_IDComment(){
				
				    return "";
				
				}
				public String FUERZA_IDPattern(){
				
					return "";
				
				}
				public String FUERZA_IDOriginalDbColumnName(){
				
					return "FUERZA_ID";
				
				}

				
			    public String SIGLACI;

				public String getSIGLACI () {
					return this.SIGLACI;
				}

				public Boolean SIGLACIIsNullable(){
				    return false;
				}
				public Boolean SIGLACIIsKey(){
				    return false;
				}
				public Integer SIGLACILength(){
				    return null;
				}
				public Integer SIGLACIPrecision(){
				    return null;
				}
				public String SIGLACIDefault(){
				
					return null;
				
				}
				public String SIGLACIComment(){
				
				    return "";
				
				}
				public String SIGLACIPattern(){
				
					return "";
				
				}
				public String SIGLACIOriginalDbColumnName(){
				
					return "SIGLACI";
				
				}

				
			    public Double VALOR;

				public Double getVALOR () {
					return this.VALOR;
				}

				public Boolean VALORIsNullable(){
				    return true;
				}
				public Boolean VALORIsKey(){
				    return false;
				}
				public Integer VALORLength(){
				    return null;
				}
				public Integer VALORPrecision(){
				    return null;
				}
				public String VALORDefault(){
				
					return "";
				
				}
				public String VALORComment(){
				
				    return "";
				
				}
				public String VALORPattern(){
				
					return "";
				
				}
				public String VALOROriginalDbColumnName(){
				
					return "VALOR";
				
				}

				
			    public double TANEXOS_ID;

				public double getTANEXOS_ID () {
					return this.TANEXOS_ID;
				}

				public Boolean TANEXOS_IDIsNullable(){
				    return false;
				}
				public Boolean TANEXOS_IDIsKey(){
				    return false;
				}
				public Integer TANEXOS_IDLength(){
				    return null;
				}
				public Integer TANEXOS_IDPrecision(){
				    return null;
				}
				public String TANEXOS_IDDefault(){
				
					return "";
				
				}
				public String TANEXOS_IDComment(){
				
				    return "";
				
				}
				public String TANEXOS_IDPattern(){
				
					return "";
				
				}
				public String TANEXOS_IDOriginalDbColumnName(){
				
					return "TANEXOS_ID";
				
				}

				
			    public Integer CECO_ID;

				public Integer getCECO_ID () {
					return this.CECO_ID;
				}

				public Boolean CECO_IDIsNullable(){
				    return true;
				}
				public Boolean CECO_IDIsKey(){
				    return false;
				}
				public Integer CECO_IDLength(){
				    return null;
				}
				public Integer CECO_IDPrecision(){
				    return null;
				}
				public String CECO_IDDefault(){
				
					return "";
				
				}
				public String CECO_IDComment(){
				
				    return "";
				
				}
				public String CECO_IDPattern(){
				
					return "";
				
				}
				public String CECO_IDOriginalDbColumnName(){
				
					return "CECO_ID";
				
				}

				
			    public Double ESPECIALIDADES_ID;

				public Double getESPECIALIDADES_ID () {
					return this.ESPECIALIDADES_ID;
				}

				public Boolean ESPECIALIDADES_IDIsNullable(){
				    return true;
				}
				public Boolean ESPECIALIDADES_IDIsKey(){
				    return false;
				}
				public Integer ESPECIALIDADES_IDLength(){
				    return null;
				}
				public Integer ESPECIALIDADES_IDPrecision(){
				    return null;
				}
				public String ESPECIALIDADES_IDDefault(){
				
					return "";
				
				}
				public String ESPECIALIDADES_IDComment(){
				
				    return "";
				
				}
				public String ESPECIALIDADES_IDPattern(){
				
					return "";
				
				}
				public String ESPECIALIDADES_IDOriginalDbColumnName(){
				
					return "ESPECIALIDADES_ID";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.ESMID == null) ? 0 : this.ESMID.hashCode());
					
						result = prime * result + ((this.FUERZA_ID == null) ? 0 : this.FUERZA_ID.hashCode());
					
						result = prime * result + ((this.CECO_ID == null) ? 0 : this.CECO_ID.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row11Struct other = (row11Struct) obj;
		
						if (this.ESMID == null) {
							if (other.ESMID != null)
								return false;
						
						} else if (!this.ESMID.equals(other.ESMID))
						
							return false;
					
						if (this.FUERZA_ID == null) {
							if (other.FUERZA_ID != null)
								return false;
						
						} else if (!this.FUERZA_ID.equals(other.FUERZA_ID))
						
							return false;
					
						if (this.CECO_ID == null) {
							if (other.CECO_ID != null)
								return false;
						
						} else if (!this.CECO_ID.equals(other.CECO_ID))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row11Struct other) {

		other.ESMID = this.ESMID;
	            other.SIGLA = this.SIGLA;
	            other.FUERZA_ID = this.FUERZA_ID;
	            other.SIGLACI = this.SIGLACI;
	            other.VALOR = this.VALOR;
	            other.TANEXOS_ID = this.TANEXOS_ID;
	            other.CECO_ID = this.CECO_ID;
	            other.ESPECIALIDADES_ID = this.ESPECIALIDADES_ID;
	            
	}

	public void copyKeysDataTo(row11Struct other) {

		other.ESMID = this.ESMID;
	            	other.FUERZA_ID = this.FUERZA_ID;
	            	other.CECO_ID = this.CECO_ID;
	            	
	}



	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}
	
	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			unmarshaller.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private void writeString(String str, DataOutputStream dos, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_CEC_DISTRIBUCION_CI_DistribucionCI) {

        	try {

        		int length = 0;
		
						this.ESMID = readInteger(dis);
					
						this.FUERZA_ID = readInteger(dis);
					
						this.CECO_ID = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_CEC_DISTRIBUCION_CI_DistribucionCI) {

        	try {

        		int length = 0;
		
						this.ESMID = readInteger(dis);
					
						this.FUERZA_ID = readInteger(dis);
					
						this.CECO_ID = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.ESMID,dos);
					
					// Integer
				
						writeInteger(this.FUERZA_ID,dos);
					
					// Integer
				
						writeInteger(this.CECO_ID,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.ESMID,dos);
					
					// Integer
				
						writeInteger(this.FUERZA_ID,dos);
					
					// Integer
				
						writeInteger(this.CECO_ID,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.SIGLA = readString(dis,ois);
					
						this.SIGLACI = readString(dis,ois);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.VALOR = null;
           				} else {
           			    	this.VALOR = dis.readDouble();
           				}
					
			            this.TANEXOS_ID = dis.readDouble();
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.ESPECIALIDADES_ID = null;
           				} else {
           			    	this.ESPECIALIDADES_ID = dis.readDouble();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		
						this.SIGLA = readString(dis,objectIn);
					
						this.SIGLACI = readString(dis,objectIn);
					
			            length = objectIn.readByte();
           				if (length == -1) {
           	    			this.VALOR = null;
           				} else {
           			    	this.VALOR = objectIn.readDouble();
           				}
					
			            this.TANEXOS_ID = objectIn.readDouble();
					
			            length = objectIn.readByte();
           				if (length == -1) {
           	    			this.ESPECIALIDADES_ID = null;
           				} else {
           			    	this.ESPECIALIDADES_ID = objectIn.readDouble();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeString(this.SIGLA, dos, oos);
					
						writeString(this.SIGLACI, dos, oos);
					
						if(this.VALOR == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.VALOR);
		            	}
					
		            	dos.writeDouble(this.TANEXOS_ID);
					
						if(this.ESPECIALIDADES_ID == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.ESPECIALIDADES_ID);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
						writeString(this.SIGLA, dos, objectOut);
					
						writeString(this.SIGLACI, dos, objectOut);
					
						if(this.VALOR == null) {
							objectOut.writeByte(-1);
						} else {
							objectOut.writeByte(0);
							objectOut.writeDouble(this.VALOR);
		            	}
					
					objectOut.writeDouble(this.TANEXOS_ID);
					
						if(this.ESPECIALIDADES_ID == null) {
							objectOut.writeByte(-1);
						} else {
							objectOut.writeByte(0);
							objectOut.writeDouble(this.ESPECIALIDADES_ID);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ESMID="+String.valueOf(ESMID));
		sb.append(",SIGLA="+SIGLA);
		sb.append(",FUERZA_ID="+String.valueOf(FUERZA_ID));
		sb.append(",SIGLACI="+SIGLACI);
		sb.append(",VALOR="+String.valueOf(VALOR));
		sb.append(",TANEXOS_ID="+String.valueOf(TANEXOS_ID));
		sb.append(",CECO_ID="+String.valueOf(CECO_ID));
		sb.append(",ESPECIALIDADES_ID="+String.valueOf(ESPECIALIDADES_ID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row11Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.ESMID, other.ESMID);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.FUERZA_ID, other.FUERZA_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.CECO_ID, other.CECO_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tHashInput_4Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tHashInput_4_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row11Struct row11 = new row11Struct();




	
	/**
	 * [tAdvancedHash_row11 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row11", false);
		start_Hash.put("tAdvancedHash_row11", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row11";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row11");
					}
				
		int tos_count_tAdvancedHash_row11 = 0;
		

			   		// connection name:row11
			   		// source node:tHashInput_4 - inputs:(after_tHashInput_1) outputs:(row11,row11) | target node:tAdvancedHash_row11 - inputs:(row11) outputs:()
			   		// linked node: tMap_2 - inputs:(TCV01,row11,row10) outputs:(TCV03)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row11 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row11Struct> tHash_Lookup_row11 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row11Struct>getLookup(matchingModeEnum_row11);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row11", tHash_Lookup_row11);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row11 begin ] stop
 */



	
	/**
	 * [tHashInput_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_4", false);
		start_Hash.put("tHashInput_4", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_4";
	
	
		int tos_count_tHashInput_4 = 0;
		


int nb_line_tHashInput_4 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_4=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<CI_GGRL_CECOStruct> tHashFile_tHashInput_4 = mf_tHashInput_4.getAdvancedMemoryHashFile("tHashFile_DistribucionCI_" + pid +"_tHashOutput_9");
if(tHashFile_tHashInput_4==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<CI_GGRL_CECOStruct> iterator_tHashInput_4 = tHashFile_tHashInput_4.iterator();
while (iterator_tHashInput_4.hasNext()) {
    CI_GGRL_CECOStruct next_tHashInput_4 = iterator_tHashInput_4.next();

	row11.ESMID = next_tHashInput_4.ESMID;
	row11.SIGLA = next_tHashInput_4.SIGLA;
	row11.FUERZA_ID = next_tHashInput_4.FUERZA_ID;
	row11.SIGLACI = next_tHashInput_4.SIGLACI;
	row11.VALOR = next_tHashInput_4.VALOR;
	row11.TANEXOS_ID = next_tHashInput_4.TANEXOS_ID;
	row11.CECO_ID = next_tHashInput_4.CECO_ID;
	row11.ESPECIALIDADES_ID = next_tHashInput_4.ESPECIALIDADES_ID;

 



/**
 * [tHashInput_4 begin ] stop
 */
	
	/**
	 * [tHashInput_4 main ] start
	 */

	

	
	
	currentComponent="tHashInput_4";
	
	

 


	tos_count_tHashInput_4++;

/**
 * [tHashInput_4 main ] stop
 */
	
	/**
	 * [tHashInput_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashInput_4";
	
	

 



/**
 * [tHashInput_4 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row11 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row11";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row11"
						
						);
					}
					


			   
			   

					row11Struct row11_HashRow = new row11Struct();
		   	   	   
				
				row11_HashRow.ESMID = row11.ESMID;
				
				row11_HashRow.SIGLA = row11.SIGLA;
				
				row11_HashRow.FUERZA_ID = row11.FUERZA_ID;
				
				row11_HashRow.SIGLACI = row11.SIGLACI;
				
				row11_HashRow.VALOR = row11.VALOR;
				
				row11_HashRow.TANEXOS_ID = row11.TANEXOS_ID;
				
				row11_HashRow.CECO_ID = row11.CECO_ID;
				
				row11_HashRow.ESPECIALIDADES_ID = row11.ESPECIALIDADES_ID;
				
			tHash_Lookup_row11.put(row11_HashRow);
			
            




 


	tos_count_tAdvancedHash_row11++;

/**
 * [tAdvancedHash_row11 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row11 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row11";
	
	

 



/**
 * [tAdvancedHash_row11 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row11 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row11";
	
	

 



/**
 * [tAdvancedHash_row11 process_data_end ] stop
 */



	
	/**
	 * [tHashInput_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashInput_4";
	
	

 



/**
 * [tHashInput_4 process_data_end ] stop
 */
	
	/**
	 * [tHashInput_4 end ] start
	 */

	

	
	
	currentComponent="tHashInput_4";
	
	
    

		
			nb_line_tHashInput_4++;
		}	
    		
    		mf_tHashInput_4.clearCache("tHashFile_DistribucionCI_" + pid +"_tHashOutput_9");
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_DistribucionCI_" + pid +"_tHashOutput_9");
	


	globalMap.put("tHashInput_4_NB_LINE", nb_line_tHashInput_4);       

 

ok_Hash.put("tHashInput_4", true);
end_Hash.put("tHashInput_4", System.currentTimeMillis());




/**
 * [tHashInput_4 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row11 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row11";
	
	

tHash_Lookup_row11.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row11");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row11", true);
end_Hash.put("tAdvancedHash_row11", System.currentTimeMillis());




/**
 * [tAdvancedHash_row11 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tHashInput_4 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_4";
	
	

 



/**
 * [tHashInput_4 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row11 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row11";
	
	

 



/**
 * [tAdvancedHash_row11 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tHashInput_4_SUBPROCESS_STATE", 1);
	}
	


public static class row10Struct implements routines.system.IPersistableComparableLookupRow<row10Struct> {
    final static byte[] commonByteArrayLock_CEC_DISTRIBUCION_CI_DistribucionCI = new byte[0];
    static byte[] commonByteArray_CEC_DISTRIBUCION_CI_DistribucionCI = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public Integer ESMID;

				public Integer getESMID () {
					return this.ESMID;
				}

				public Boolean ESMIDIsNullable(){
				    return true;
				}
				public Boolean ESMIDIsKey(){
				    return false;
				}
				public Integer ESMIDLength(){
				    return null;
				}
				public Integer ESMIDPrecision(){
				    return null;
				}
				public String ESMIDDefault(){
				
					return "";
				
				}
				public String ESMIDComment(){
				
				    return "";
				
				}
				public String ESMIDPattern(){
				
					return "";
				
				}
				public String ESMIDOriginalDbColumnName(){
				
					return "ESMID";
				
				}

				
			    public String SIGLA;

				public String getSIGLA () {
					return this.SIGLA;
				}

				public Boolean SIGLAIsNullable(){
				    return true;
				}
				public Boolean SIGLAIsKey(){
				    return false;
				}
				public Integer SIGLALength(){
				    return null;
				}
				public Integer SIGLAPrecision(){
				    return null;
				}
				public String SIGLADefault(){
				
					return null;
				
				}
				public String SIGLAComment(){
				
				    return "";
				
				}
				public String SIGLAPattern(){
				
					return "";
				
				}
				public String SIGLAOriginalDbColumnName(){
				
					return "SIGLA";
				
				}

				
			    public Integer FUERZA_ID;

				public Integer getFUERZA_ID () {
					return this.FUERZA_ID;
				}

				public Boolean FUERZA_IDIsNullable(){
				    return true;
				}
				public Boolean FUERZA_IDIsKey(){
				    return false;
				}
				public Integer FUERZA_IDLength(){
				    return null;
				}
				public Integer FUERZA_IDPrecision(){
				    return null;
				}
				public String FUERZA_IDDefault(){
				
					return "";
				
				}
				public String FUERZA_IDComment(){
				
				    return "";
				
				}
				public String FUERZA_IDPattern(){
				
					return "";
				
				}
				public String FUERZA_IDOriginalDbColumnName(){
				
					return "FUERZA_ID";
				
				}

				
			    public String SIGLACI;

				public String getSIGLACI () {
					return this.SIGLACI;
				}

				public Boolean SIGLACIIsNullable(){
				    return false;
				}
				public Boolean SIGLACIIsKey(){
				    return false;
				}
				public Integer SIGLACILength(){
				    return null;
				}
				public Integer SIGLACIPrecision(){
				    return null;
				}
				public String SIGLACIDefault(){
				
					return null;
				
				}
				public String SIGLACIComment(){
				
				    return "";
				
				}
				public String SIGLACIPattern(){
				
					return "";
				
				}
				public String SIGLACIOriginalDbColumnName(){
				
					return "SIGLACI";
				
				}

				
			    public Double VALOR;

				public Double getVALOR () {
					return this.VALOR;
				}

				public Boolean VALORIsNullable(){
				    return true;
				}
				public Boolean VALORIsKey(){
				    return false;
				}
				public Integer VALORLength(){
				    return null;
				}
				public Integer VALORPrecision(){
				    return null;
				}
				public String VALORDefault(){
				
					return "";
				
				}
				public String VALORComment(){
				
				    return "";
				
				}
				public String VALORPattern(){
				
					return "";
				
				}
				public String VALOROriginalDbColumnName(){
				
					return "VALOR";
				
				}

				
			    public double TANEXOS_ID;

				public double getTANEXOS_ID () {
					return this.TANEXOS_ID;
				}

				public Boolean TANEXOS_IDIsNullable(){
				    return false;
				}
				public Boolean TANEXOS_IDIsKey(){
				    return false;
				}
				public Integer TANEXOS_IDLength(){
				    return null;
				}
				public Integer TANEXOS_IDPrecision(){
				    return null;
				}
				public String TANEXOS_IDDefault(){
				
					return "";
				
				}
				public String TANEXOS_IDComment(){
				
				    return "";
				
				}
				public String TANEXOS_IDPattern(){
				
					return "";
				
				}
				public String TANEXOS_IDOriginalDbColumnName(){
				
					return "TANEXOS_ID";
				
				}

				
			    public Integer CECO_ID;

				public Integer getCECO_ID () {
					return this.CECO_ID;
				}

				public Boolean CECO_IDIsNullable(){
				    return true;
				}
				public Boolean CECO_IDIsKey(){
				    return false;
				}
				public Integer CECO_IDLength(){
				    return null;
				}
				public Integer CECO_IDPrecision(){
				    return null;
				}
				public String CECO_IDDefault(){
				
					return "";
				
				}
				public String CECO_IDComment(){
				
				    return "";
				
				}
				public String CECO_IDPattern(){
				
					return "";
				
				}
				public String CECO_IDOriginalDbColumnName(){
				
					return "CECO_ID";
				
				}

				
			    public Double ESPECIALIDADES_ID;

				public Double getESPECIALIDADES_ID () {
					return this.ESPECIALIDADES_ID;
				}

				public Boolean ESPECIALIDADES_IDIsNullable(){
				    return true;
				}
				public Boolean ESPECIALIDADES_IDIsKey(){
				    return false;
				}
				public Integer ESPECIALIDADES_IDLength(){
				    return null;
				}
				public Integer ESPECIALIDADES_IDPrecision(){
				    return null;
				}
				public String ESPECIALIDADES_IDDefault(){
				
					return "";
				
				}
				public String ESPECIALIDADES_IDComment(){
				
				    return "";
				
				}
				public String ESPECIALIDADES_IDPattern(){
				
					return "";
				
				}
				public String ESPECIALIDADES_IDOriginalDbColumnName(){
				
					return "ESPECIALIDADES_ID";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.ESMID == null) ? 0 : this.ESMID.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row10Struct other = (row10Struct) obj;
		
						if (this.ESMID == null) {
							if (other.ESMID != null)
								return false;
						
						} else if (!this.ESMID.equals(other.ESMID))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row10Struct other) {

		other.ESMID = this.ESMID;
	            other.SIGLA = this.SIGLA;
	            other.FUERZA_ID = this.FUERZA_ID;
	            other.SIGLACI = this.SIGLACI;
	            other.VALOR = this.VALOR;
	            other.TANEXOS_ID = this.TANEXOS_ID;
	            other.CECO_ID = this.CECO_ID;
	            other.ESPECIALIDADES_ID = this.ESPECIALIDADES_ID;
	            
	}

	public void copyKeysDataTo(row10Struct other) {

		other.ESMID = this.ESMID;
	            	
	}



	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}
	
	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			unmarshaller.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private void writeString(String str, DataOutputStream dos, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}
	private Integer readInteger(DataInputStream dis, ObjectInputStream ois) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
			intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		Integer intReturn;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
			intReturn = unmarshaller.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, DataOutputStream dos,org.jboss.marshalling.Marshaller marshaller ) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_CEC_DISTRIBUCION_CI_DistribucionCI) {

        	try {

        		int length = 0;
		
						this.ESMID = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_CEC_DISTRIBUCION_CI_DistribucionCI) {

        	try {

        		int length = 0;
		
						this.ESMID = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.ESMID,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.ESMID,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.SIGLA = readString(dis,ois);
					
						this.FUERZA_ID = readInteger(dis,ois);
					
						this.SIGLACI = readString(dis,ois);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.VALOR = null;
           				} else {
           			    	this.VALOR = dis.readDouble();
           				}
					
			            this.TANEXOS_ID = dis.readDouble();
					
						this.CECO_ID = readInteger(dis,ois);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.ESPECIALIDADES_ID = null;
           				} else {
           			    	this.ESPECIALIDADES_ID = dis.readDouble();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		
						this.SIGLA = readString(dis,objectIn);
					
						this.FUERZA_ID = readInteger(dis,objectIn);
					
						this.SIGLACI = readString(dis,objectIn);
					
			            length = objectIn.readByte();
           				if (length == -1) {
           	    			this.VALOR = null;
           				} else {
           			    	this.VALOR = objectIn.readDouble();
           				}
					
			            this.TANEXOS_ID = objectIn.readDouble();
					
						this.CECO_ID = readInteger(dis,objectIn);
					
			            length = objectIn.readByte();
           				if (length == -1) {
           	    			this.ESPECIALIDADES_ID = null;
           				} else {
           			    	this.ESPECIALIDADES_ID = objectIn.readDouble();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeString(this.SIGLA, dos, oos);
					
					writeInteger(this.FUERZA_ID, dos, oos);
					
						writeString(this.SIGLACI, dos, oos);
					
						if(this.VALOR == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.VALOR);
		            	}
					
		            	dos.writeDouble(this.TANEXOS_ID);
					
					writeInteger(this.CECO_ID, dos, oos);
					
						if(this.ESPECIALIDADES_ID == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.ESPECIALIDADES_ID);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
						writeString(this.SIGLA, dos, objectOut);
					
					writeInteger(this.FUERZA_ID, dos, objectOut);
					
						writeString(this.SIGLACI, dos, objectOut);
					
						if(this.VALOR == null) {
							objectOut.writeByte(-1);
						} else {
							objectOut.writeByte(0);
							objectOut.writeDouble(this.VALOR);
		            	}
					
					objectOut.writeDouble(this.TANEXOS_ID);
					
					writeInteger(this.CECO_ID, dos, objectOut);
					
						if(this.ESPECIALIDADES_ID == null) {
							objectOut.writeByte(-1);
						} else {
							objectOut.writeByte(0);
							objectOut.writeDouble(this.ESPECIALIDADES_ID);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ESMID="+String.valueOf(ESMID));
		sb.append(",SIGLA="+SIGLA);
		sb.append(",FUERZA_ID="+String.valueOf(FUERZA_ID));
		sb.append(",SIGLACI="+SIGLACI);
		sb.append(",VALOR="+String.valueOf(VALOR));
		sb.append(",TANEXOS_ID="+String.valueOf(TANEXOS_ID));
		sb.append(",CECO_ID="+String.valueOf(CECO_ID));
		sb.append(",ESPECIALIDADES_ID="+String.valueOf(ESPECIALIDADES_ID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row10Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.ESMID, other.ESMID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tHashInput_9Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tHashInput_9_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row10Struct row10 = new row10Struct();




	
	/**
	 * [tAdvancedHash_row10 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row10", false);
		start_Hash.put("tAdvancedHash_row10", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row10";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row10");
					}
				
		int tos_count_tAdvancedHash_row10 = 0;
		

			   		// connection name:row10
			   		// source node:tHashInput_9 - inputs:(after_tHashInput_1) outputs:(row10,row10) | target node:tAdvancedHash_row10 - inputs:(row10) outputs:()
			   		// linked node: tMap_2 - inputs:(TCV01,row11,row10) outputs:(TCV03)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row10 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row10Struct> tHash_Lookup_row10 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row10Struct>getLookup(matchingModeEnum_row10);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row10", tHash_Lookup_row10);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row10 begin ] stop
 */



	
	/**
	 * [tHashInput_9 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_9", false);
		start_Hash.put("tHashInput_9", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_9";
	
	
		int tos_count_tHashInput_9 = 0;
		


int nb_line_tHashInput_9 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_9=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<CI_GGRLStruct> tHashFile_tHashInput_9 = mf_tHashInput_9.getAdvancedMemoryHashFile("tHashFile_DistribucionCI_" + pid +"_tHashOutput_10");
if(tHashFile_tHashInput_9==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<CI_GGRLStruct> iterator_tHashInput_9 = tHashFile_tHashInput_9.iterator();
while (iterator_tHashInput_9.hasNext()) {
    CI_GGRLStruct next_tHashInput_9 = iterator_tHashInput_9.next();

	row10.ESMID = next_tHashInput_9.ESMID;
	row10.SIGLA = next_tHashInput_9.SIGLA;
	row10.FUERZA_ID = next_tHashInput_9.FUERZA_ID;
	row10.SIGLACI = next_tHashInput_9.SIGLACI;
	row10.VALOR = next_tHashInput_9.VALOR;
	row10.TANEXOS_ID = next_tHashInput_9.TANEXOS_ID;
	row10.CECO_ID = next_tHashInput_9.CECO_ID;
	row10.ESPECIALIDADES_ID = next_tHashInput_9.ESPECIALIDADES_ID;

 



/**
 * [tHashInput_9 begin ] stop
 */
	
	/**
	 * [tHashInput_9 main ] start
	 */

	

	
	
	currentComponent="tHashInput_9";
	
	

 


	tos_count_tHashInput_9++;

/**
 * [tHashInput_9 main ] stop
 */
	
	/**
	 * [tHashInput_9 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashInput_9";
	
	

 



/**
 * [tHashInput_9 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row10 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row10";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row10"
						
						);
					}
					


			   
			   

					row10Struct row10_HashRow = new row10Struct();
		   	   	   
				
				row10_HashRow.ESMID = row10.ESMID;
				
				row10_HashRow.SIGLA = row10.SIGLA;
				
				row10_HashRow.FUERZA_ID = row10.FUERZA_ID;
				
				row10_HashRow.SIGLACI = row10.SIGLACI;
				
				row10_HashRow.VALOR = row10.VALOR;
				
				row10_HashRow.TANEXOS_ID = row10.TANEXOS_ID;
				
				row10_HashRow.CECO_ID = row10.CECO_ID;
				
				row10_HashRow.ESPECIALIDADES_ID = row10.ESPECIALIDADES_ID;
				
			tHash_Lookup_row10.put(row10_HashRow);
			
            




 


	tos_count_tAdvancedHash_row10++;

/**
 * [tAdvancedHash_row10 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row10 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row10";
	
	

 



/**
 * [tAdvancedHash_row10 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row10 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row10";
	
	

 



/**
 * [tAdvancedHash_row10 process_data_end ] stop
 */



	
	/**
	 * [tHashInput_9 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashInput_9";
	
	

 



/**
 * [tHashInput_9 process_data_end ] stop
 */
	
	/**
	 * [tHashInput_9 end ] start
	 */

	

	
	
	currentComponent="tHashInput_9";
	
	
    

		
			nb_line_tHashInput_9++;
		}	
    		
    		mf_tHashInput_9.clearCache("tHashFile_DistribucionCI_" + pid +"_tHashOutput_10");
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_DistribucionCI_" + pid +"_tHashOutput_10");
	


	globalMap.put("tHashInput_9_NB_LINE", nb_line_tHashInput_9);       

 

ok_Hash.put("tHashInput_9", true);
end_Hash.put("tHashInput_9", System.currentTimeMillis());




/**
 * [tHashInput_9 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row10 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row10";
	
	

tHash_Lookup_row10.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row10");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row10", true);
end_Hash.put("tAdvancedHash_row10", System.currentTimeMillis());




/**
 * [tAdvancedHash_row10 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tHashInput_9 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_9";
	
	

 



/**
 * [tHashInput_9 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row10 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row10";
	
	

 



/**
 * [tAdvancedHash_row10 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tHashInput_9_SUBPROCESS_STATE", 1);
	}
	


public static class row21Struct implements routines.system.IPersistableComparableLookupRow<row21Struct> {
    final static byte[] commonByteArrayLock_CEC_DISTRIBUCION_CI_DistribucionCI = new byte[0];
    static byte[] commonByteArray_CEC_DISTRIBUCION_CI_DistribucionCI = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public Integer ESMID;

				public Integer getESMID () {
					return this.ESMID;
				}

				public Boolean ESMIDIsNullable(){
				    return true;
				}
				public Boolean ESMIDIsKey(){
				    return false;
				}
				public Integer ESMIDLength(){
				    return null;
				}
				public Integer ESMIDPrecision(){
				    return null;
				}
				public String ESMIDDefault(){
				
					return "";
				
				}
				public String ESMIDComment(){
				
				    return "";
				
				}
				public String ESMIDPattern(){
				
					return "";
				
				}
				public String ESMIDOriginalDbColumnName(){
				
					return "ESMID";
				
				}

				
			    public String SIGLA;

				public String getSIGLA () {
					return this.SIGLA;
				}

				public Boolean SIGLAIsNullable(){
				    return true;
				}
				public Boolean SIGLAIsKey(){
				    return false;
				}
				public Integer SIGLALength(){
				    return null;
				}
				public Integer SIGLAPrecision(){
				    return null;
				}
				public String SIGLADefault(){
				
					return null;
				
				}
				public String SIGLAComment(){
				
				    return "";
				
				}
				public String SIGLAPattern(){
				
					return "";
				
				}
				public String SIGLAOriginalDbColumnName(){
				
					return "SIGLA";
				
				}

				
			    public Integer FUERZA_ID;

				public Integer getFUERZA_ID () {
					return this.FUERZA_ID;
				}

				public Boolean FUERZA_IDIsNullable(){
				    return true;
				}
				public Boolean FUERZA_IDIsKey(){
				    return false;
				}
				public Integer FUERZA_IDLength(){
				    return null;
				}
				public Integer FUERZA_IDPrecision(){
				    return null;
				}
				public String FUERZA_IDDefault(){
				
					return "";
				
				}
				public String FUERZA_IDComment(){
				
				    return "";
				
				}
				public String FUERZA_IDPattern(){
				
					return "";
				
				}
				public String FUERZA_IDOriginalDbColumnName(){
				
					return "FUERZA_ID";
				
				}

				
			    public String SIGLACI;

				public String getSIGLACI () {
					return this.SIGLACI;
				}

				public Boolean SIGLACIIsNullable(){
				    return false;
				}
				public Boolean SIGLACIIsKey(){
				    return false;
				}
				public Integer SIGLACILength(){
				    return null;
				}
				public Integer SIGLACIPrecision(){
				    return null;
				}
				public String SIGLACIDefault(){
				
					return null;
				
				}
				public String SIGLACIComment(){
				
				    return "";
				
				}
				public String SIGLACIPattern(){
				
					return "";
				
				}
				public String SIGLACIOriginalDbColumnName(){
				
					return "SIGLACI";
				
				}

				
			    public Double VALOR;

				public Double getVALOR () {
					return this.VALOR;
				}

				public Boolean VALORIsNullable(){
				    return true;
				}
				public Boolean VALORIsKey(){
				    return false;
				}
				public Integer VALORLength(){
				    return null;
				}
				public Integer VALORPrecision(){
				    return null;
				}
				public String VALORDefault(){
				
					return "";
				
				}
				public String VALORComment(){
				
				    return "";
				
				}
				public String VALORPattern(){
				
					return "";
				
				}
				public String VALOROriginalDbColumnName(){
				
					return "VALOR";
				
				}

				
			    public double TANEXOS_ID;

				public double getTANEXOS_ID () {
					return this.TANEXOS_ID;
				}

				public Boolean TANEXOS_IDIsNullable(){
				    return false;
				}
				public Boolean TANEXOS_IDIsKey(){
				    return false;
				}
				public Integer TANEXOS_IDLength(){
				    return null;
				}
				public Integer TANEXOS_IDPrecision(){
				    return null;
				}
				public String TANEXOS_IDDefault(){
				
					return "";
				
				}
				public String TANEXOS_IDComment(){
				
				    return "";
				
				}
				public String TANEXOS_IDPattern(){
				
					return "";
				
				}
				public String TANEXOS_IDOriginalDbColumnName(){
				
					return "TANEXOS_ID";
				
				}

				
			    public Integer CECO_ID;

				public Integer getCECO_ID () {
					return this.CECO_ID;
				}

				public Boolean CECO_IDIsNullable(){
				    return true;
				}
				public Boolean CECO_IDIsKey(){
				    return false;
				}
				public Integer CECO_IDLength(){
				    return null;
				}
				public Integer CECO_IDPrecision(){
				    return null;
				}
				public String CECO_IDDefault(){
				
					return "";
				
				}
				public String CECO_IDComment(){
				
				    return "";
				
				}
				public String CECO_IDPattern(){
				
					return "";
				
				}
				public String CECO_IDOriginalDbColumnName(){
				
					return "CECO_ID";
				
				}

				
			    public Double ESPECIALIDADES_ID;

				public Double getESPECIALIDADES_ID () {
					return this.ESPECIALIDADES_ID;
				}

				public Boolean ESPECIALIDADES_IDIsNullable(){
				    return true;
				}
				public Boolean ESPECIALIDADES_IDIsKey(){
				    return false;
				}
				public Integer ESPECIALIDADES_IDLength(){
				    return null;
				}
				public Integer ESPECIALIDADES_IDPrecision(){
				    return null;
				}
				public String ESPECIALIDADES_IDDefault(){
				
					return "";
				
				}
				public String ESPECIALIDADES_IDComment(){
				
				    return "";
				
				}
				public String ESPECIALIDADES_IDPattern(){
				
					return "";
				
				}
				public String ESPECIALIDADES_IDOriginalDbColumnName(){
				
					return "ESPECIALIDADES_ID";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.ESMID == null) ? 0 : this.ESMID.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row21Struct other = (row21Struct) obj;
		
						if (this.ESMID == null) {
							if (other.ESMID != null)
								return false;
						
						} else if (!this.ESMID.equals(other.ESMID))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row21Struct other) {

		other.ESMID = this.ESMID;
	            other.SIGLA = this.SIGLA;
	            other.FUERZA_ID = this.FUERZA_ID;
	            other.SIGLACI = this.SIGLACI;
	            other.VALOR = this.VALOR;
	            other.TANEXOS_ID = this.TANEXOS_ID;
	            other.CECO_ID = this.CECO_ID;
	            other.ESPECIALIDADES_ID = this.ESPECIALIDADES_ID;
	            
	}

	public void copyKeysDataTo(row21Struct other) {

		other.ESMID = this.ESMID;
	            	
	}



	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}
	
	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			unmarshaller.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private void writeString(String str, DataOutputStream dos, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}
	private Integer readInteger(DataInputStream dis, ObjectInputStream ois) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
			intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		Integer intReturn;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
			intReturn = unmarshaller.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, DataOutputStream dos,org.jboss.marshalling.Marshaller marshaller ) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_CEC_DISTRIBUCION_CI_DistribucionCI) {

        	try {

        		int length = 0;
		
						this.ESMID = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_CEC_DISTRIBUCION_CI_DistribucionCI) {

        	try {

        		int length = 0;
		
						this.ESMID = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.ESMID,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.ESMID,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.SIGLA = readString(dis,ois);
					
						this.FUERZA_ID = readInteger(dis,ois);
					
						this.SIGLACI = readString(dis,ois);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.VALOR = null;
           				} else {
           			    	this.VALOR = dis.readDouble();
           				}
					
			            this.TANEXOS_ID = dis.readDouble();
					
						this.CECO_ID = readInteger(dis,ois);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.ESPECIALIDADES_ID = null;
           				} else {
           			    	this.ESPECIALIDADES_ID = dis.readDouble();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		
						this.SIGLA = readString(dis,objectIn);
					
						this.FUERZA_ID = readInteger(dis,objectIn);
					
						this.SIGLACI = readString(dis,objectIn);
					
			            length = objectIn.readByte();
           				if (length == -1) {
           	    			this.VALOR = null;
           				} else {
           			    	this.VALOR = objectIn.readDouble();
           				}
					
			            this.TANEXOS_ID = objectIn.readDouble();
					
						this.CECO_ID = readInteger(dis,objectIn);
					
			            length = objectIn.readByte();
           				if (length == -1) {
           	    			this.ESPECIALIDADES_ID = null;
           				} else {
           			    	this.ESPECIALIDADES_ID = objectIn.readDouble();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeString(this.SIGLA, dos, oos);
					
					writeInteger(this.FUERZA_ID, dos, oos);
					
						writeString(this.SIGLACI, dos, oos);
					
						if(this.VALOR == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.VALOR);
		            	}
					
		            	dos.writeDouble(this.TANEXOS_ID);
					
					writeInteger(this.CECO_ID, dos, oos);
					
						if(this.ESPECIALIDADES_ID == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.ESPECIALIDADES_ID);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
						writeString(this.SIGLA, dos, objectOut);
					
					writeInteger(this.FUERZA_ID, dos, objectOut);
					
						writeString(this.SIGLACI, dos, objectOut);
					
						if(this.VALOR == null) {
							objectOut.writeByte(-1);
						} else {
							objectOut.writeByte(0);
							objectOut.writeDouble(this.VALOR);
		            	}
					
					objectOut.writeDouble(this.TANEXOS_ID);
					
					writeInteger(this.CECO_ID, dos, objectOut);
					
						if(this.ESPECIALIDADES_ID == null) {
							objectOut.writeByte(-1);
						} else {
							objectOut.writeByte(0);
							objectOut.writeDouble(this.ESPECIALIDADES_ID);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ESMID="+String.valueOf(ESMID));
		sb.append(",SIGLA="+SIGLA);
		sb.append(",FUERZA_ID="+String.valueOf(FUERZA_ID));
		sb.append(",SIGLACI="+SIGLACI);
		sb.append(",VALOR="+String.valueOf(VALOR));
		sb.append(",TANEXOS_ID="+String.valueOf(TANEXOS_ID));
		sb.append(",CECO_ID="+String.valueOf(CECO_ID));
		sb.append(",ESPECIALIDADES_ID="+String.valueOf(ESPECIALIDADES_ID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row21Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.ESMID, other.ESMID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tHashInput_8Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tHashInput_8_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row21Struct row21 = new row21Struct();




	
	/**
	 * [tAdvancedHash_row21 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row21", false);
		start_Hash.put("tAdvancedHash_row21", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row21";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row21");
					}
				
		int tos_count_tAdvancedHash_row21 = 0;
		

			   		// connection name:row21
			   		// source node:tHashInput_8 - inputs:(after_tHashInput_1) outputs:(row21,row21) | target node:tAdvancedHash_row21 - inputs:(row21) outputs:()
			   		// linked node: tMap_3 - inputs:(TCV02,row12,row21) outputs:(TCV04)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row21 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row21Struct> tHash_Lookup_row21 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row21Struct>getLookup(matchingModeEnum_row21);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row21", tHash_Lookup_row21);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row21 begin ] stop
 */



	
	/**
	 * [tHashInput_8 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_8", false);
		start_Hash.put("tHashInput_8", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_8";
	
	
		int tos_count_tHashInput_8 = 0;
		


int nb_line_tHashInput_8 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_8=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<CI_DEPStruct> tHashFile_tHashInput_8 = mf_tHashInput_8.getAdvancedMemoryHashFile("tHashFile_DistribucionCI_" + pid +"_tHashOutput_12");
if(tHashFile_tHashInput_8==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<CI_DEPStruct> iterator_tHashInput_8 = tHashFile_tHashInput_8.iterator();
while (iterator_tHashInput_8.hasNext()) {
    CI_DEPStruct next_tHashInput_8 = iterator_tHashInput_8.next();

	row21.ESMID = next_tHashInput_8.ESMID;
	row21.SIGLA = next_tHashInput_8.SIGLA;
	row21.FUERZA_ID = next_tHashInput_8.FUERZA_ID;
	row21.SIGLACI = next_tHashInput_8.SIGLACI;
	row21.VALOR = next_tHashInput_8.VALOR;
	row21.TANEXOS_ID = next_tHashInput_8.TANEXOS_ID;
	row21.CECO_ID = next_tHashInput_8.CECO_ID;
	row21.ESPECIALIDADES_ID = next_tHashInput_8.ESPECIALIDADES_ID;

 



/**
 * [tHashInput_8 begin ] stop
 */
	
	/**
	 * [tHashInput_8 main ] start
	 */

	

	
	
	currentComponent="tHashInput_8";
	
	

 


	tos_count_tHashInput_8++;

/**
 * [tHashInput_8 main ] stop
 */
	
	/**
	 * [tHashInput_8 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashInput_8";
	
	

 



/**
 * [tHashInput_8 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row21 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row21";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row21"
						
						);
					}
					


			   
			   

					row21Struct row21_HashRow = new row21Struct();
		   	   	   
				
				row21_HashRow.ESMID = row21.ESMID;
				
				row21_HashRow.SIGLA = row21.SIGLA;
				
				row21_HashRow.FUERZA_ID = row21.FUERZA_ID;
				
				row21_HashRow.SIGLACI = row21.SIGLACI;
				
				row21_HashRow.VALOR = row21.VALOR;
				
				row21_HashRow.TANEXOS_ID = row21.TANEXOS_ID;
				
				row21_HashRow.CECO_ID = row21.CECO_ID;
				
				row21_HashRow.ESPECIALIDADES_ID = row21.ESPECIALIDADES_ID;
				
			tHash_Lookup_row21.put(row21_HashRow);
			
            




 


	tos_count_tAdvancedHash_row21++;

/**
 * [tAdvancedHash_row21 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row21 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row21";
	
	

 



/**
 * [tAdvancedHash_row21 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row21 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row21";
	
	

 



/**
 * [tAdvancedHash_row21 process_data_end ] stop
 */



	
	/**
	 * [tHashInput_8 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashInput_8";
	
	

 



/**
 * [tHashInput_8 process_data_end ] stop
 */
	
	/**
	 * [tHashInput_8 end ] start
	 */

	

	
	
	currentComponent="tHashInput_8";
	
	
    

		
			nb_line_tHashInput_8++;
		}	
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_DistribucionCI_" + pid +"_tHashOutput_12");
	


	globalMap.put("tHashInput_8_NB_LINE", nb_line_tHashInput_8);       

 

ok_Hash.put("tHashInput_8", true);
end_Hash.put("tHashInput_8", System.currentTimeMillis());




/**
 * [tHashInput_8 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row21 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row21";
	
	

tHash_Lookup_row21.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row21");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row21", true);
end_Hash.put("tAdvancedHash_row21", System.currentTimeMillis());




/**
 * [tAdvancedHash_row21 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tHashInput_8 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_8";
	
	

 



/**
 * [tHashInput_8 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row21 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row21";
	
	

 



/**
 * [tAdvancedHash_row21 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tHashInput_8_SUBPROCESS_STATE", 1);
	}
	


public static class row16Struct implements routines.system.IPersistableComparableLookupRow<row16Struct> {
    final static byte[] commonByteArrayLock_CEC_DISTRIBUCION_CI_DistribucionCI = new byte[0];
    static byte[] commonByteArray_CEC_DISTRIBUCION_CI_DistribucionCI = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public Double VALOR;

				public Double getVALOR () {
					return this.VALOR;
				}

				public Boolean VALORIsNullable(){
				    return true;
				}
				public Boolean VALORIsKey(){
				    return false;
				}
				public Integer VALORLength(){
				    return 0;
				}
				public Integer VALORPrecision(){
				    return null;
				}
				public String VALORDefault(){
				
					return "";
				
				}
				public String VALORComment(){
				
				    return "";
				
				}
				public String VALORPattern(){
				
					return "";
				
				}
				public String VALOROriginalDbColumnName(){
				
					return "VALOR";
				
				}

				
			    public String SIGLA;

				public String getSIGLA () {
					return this.SIGLA;
				}

				public Boolean SIGLAIsNullable(){
				    return false;
				}
				public Boolean SIGLAIsKey(){
				    return false;
				}
				public Integer SIGLALength(){
				    return 20;
				}
				public Integer SIGLAPrecision(){
				    return 0;
				}
				public String SIGLADefault(){
				
					return null;
				
				}
				public String SIGLAComment(){
				
				    return "";
				
				}
				public String SIGLAPattern(){
				
					return "";
				
				}
				public String SIGLAOriginalDbColumnName(){
				
					return "SIGLA";
				
				}

				
			    public String NOMBRE;

				public String getNOMBRE () {
					return this.NOMBRE;
				}

				public Boolean NOMBREIsNullable(){
				    return true;
				}
				public Boolean NOMBREIsKey(){
				    return false;
				}
				public Integer NOMBRELength(){
				    return 200;
				}
				public Integer NOMBREPrecision(){
				    return 0;
				}
				public String NOMBREDefault(){
				
					return null;
				
				}
				public String NOMBREComment(){
				
				    return "";
				
				}
				public String NOMBREPattern(){
				
					return "";
				
				}
				public String NOMBREOriginalDbColumnName(){
				
					return "NOMBRE";
				
				}

				
			    public Integer FUERZA_ID;

				public Integer getFUERZA_ID () {
					return this.FUERZA_ID;
				}

				public Boolean FUERZA_IDIsNullable(){
				    return true;
				}
				public Boolean FUERZA_IDIsKey(){
				    return false;
				}
				public Integer FUERZA_IDLength(){
				    return 0;
				}
				public Integer FUERZA_IDPrecision(){
				    return null;
				}
				public String FUERZA_IDDefault(){
				
					return "";
				
				}
				public String FUERZA_IDComment(){
				
				    return "";
				
				}
				public String FUERZA_IDPattern(){
				
					return "";
				
				}
				public String FUERZA_IDOriginalDbColumnName(){
				
					return "FUERZA_ID";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.FUERZA_ID == null) ? 0 : this.FUERZA_ID.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row16Struct other = (row16Struct) obj;
		
						if (this.FUERZA_ID == null) {
							if (other.FUERZA_ID != null)
								return false;
						
						} else if (!this.FUERZA_ID.equals(other.FUERZA_ID))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row16Struct other) {

		other.VALOR = this.VALOR;
	            other.SIGLA = this.SIGLA;
	            other.NOMBRE = this.NOMBRE;
	            other.FUERZA_ID = this.FUERZA_ID;
	            
	}

	public void copyKeysDataTo(row16Struct other) {

		other.FUERZA_ID = this.FUERZA_ID;
	            	
	}



	
	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			unmarshaller.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private void writeString(String str, DataOutputStream dos, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_CEC_DISTRIBUCION_CI_DistribucionCI) {

        	try {

        		int length = 0;
		
						this.FUERZA_ID = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_CEC_DISTRIBUCION_CI_DistribucionCI) {

        	try {

        		int length = 0;
		
						this.FUERZA_ID = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.FUERZA_ID,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.FUERZA_ID,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.VALOR = null;
           				} else {
           			    	this.VALOR = dis.readDouble();
           				}
					
						this.SIGLA = readString(dis,ois);
					
						this.NOMBRE = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		
			            length = objectIn.readByte();
           				if (length == -1) {
           	    			this.VALOR = null;
           				} else {
           			    	this.VALOR = objectIn.readDouble();
           				}
					
						this.SIGLA = readString(dis,objectIn);
					
						this.NOMBRE = readString(dis,objectIn);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						if(this.VALOR == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.VALOR);
		            	}
					
						writeString(this.SIGLA, dos, oos);
					
						writeString(this.NOMBRE, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
						if(this.VALOR == null) {
							objectOut.writeByte(-1);
						} else {
							objectOut.writeByte(0);
							objectOut.writeDouble(this.VALOR);
		            	}
					
						writeString(this.SIGLA, dos, objectOut);
					
						writeString(this.NOMBRE, dos, objectOut);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("VALOR="+String.valueOf(VALOR));
		sb.append(",SIGLA="+SIGLA);
		sb.append(",NOMBRE="+NOMBRE);
		sb.append(",FUERZA_ID="+String.valueOf(FUERZA_ID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row16Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.FUERZA_ID, other.FUERZA_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tHashInput_7Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tHashInput_7_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row16Struct row16 = new row16Struct();




	
	/**
	 * [tAdvancedHash_row16 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row16", false);
		start_Hash.put("tAdvancedHash_row16", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row16";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row16");
					}
				
		int tos_count_tAdvancedHash_row16 = 0;
		

			   		// connection name:row16
			   		// source node:tHashInput_7 - inputs:(after_tHashInput_6) outputs:(row16,row16) | target node:tAdvancedHash_row16 - inputs:(row16) outputs:()
			   		// linked node: tMap_4 - inputs:(row15,row16) outputs:(TotalDisan,TotalDisanDEP)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row16 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.ALL_MATCHES;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row16Struct> tHash_Lookup_row16 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row16Struct>getLookup(matchingModeEnum_row16);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row16", tHash_Lookup_row16);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row16 begin ] stop
 */



	
	/**
	 * [tHashInput_7 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_7", false);
		start_Hash.put("tHashInput_7", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_7";
	
	
		int tos_count_tHashInput_7 = 0;
		


int nb_line_tHashInput_7 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_7=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row7Struct> tHashFile_tHashInput_7 = mf_tHashInput_7.getAdvancedMemoryHashFile("tHashFile_DistribucionCI_" + pid +"_tHashOutput_4");
if(tHashFile_tHashInput_7==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<row7Struct> iterator_tHashInput_7 = tHashFile_tHashInput_7.iterator();
while (iterator_tHashInput_7.hasNext()) {
    row7Struct next_tHashInput_7 = iterator_tHashInput_7.next();

	row16.VALOR = next_tHashInput_7.VALOR;
	row16.SIGLA = next_tHashInput_7.SIGLA;
	row16.NOMBRE = next_tHashInput_7.NOMBRE;
	row16.FUERZA_ID = next_tHashInput_7.FUERZA_ID;

 



/**
 * [tHashInput_7 begin ] stop
 */
	
	/**
	 * [tHashInput_7 main ] start
	 */

	

	
	
	currentComponent="tHashInput_7";
	
	

 


	tos_count_tHashInput_7++;

/**
 * [tHashInput_7 main ] stop
 */
	
	/**
	 * [tHashInput_7 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashInput_7";
	
	

 



/**
 * [tHashInput_7 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row16 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row16";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row16"
						
						);
					}
					


			   
			   

					row16Struct row16_HashRow = new row16Struct();
		   	   	   
				
				row16_HashRow.VALOR = row16.VALOR;
				
				row16_HashRow.SIGLA = row16.SIGLA;
				
				row16_HashRow.NOMBRE = row16.NOMBRE;
				
				row16_HashRow.FUERZA_ID = row16.FUERZA_ID;
				
			tHash_Lookup_row16.put(row16_HashRow);
			
            




 


	tos_count_tAdvancedHash_row16++;

/**
 * [tAdvancedHash_row16 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row16 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row16";
	
	

 



/**
 * [tAdvancedHash_row16 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row16 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row16";
	
	

 



/**
 * [tAdvancedHash_row16 process_data_end ] stop
 */



	
	/**
	 * [tHashInput_7 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashInput_7";
	
	

 



/**
 * [tHashInput_7 process_data_end ] stop
 */
	
	/**
	 * [tHashInput_7 end ] start
	 */

	

	
	
	currentComponent="tHashInput_7";
	
	
    

		
			nb_line_tHashInput_7++;
		}	
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_DistribucionCI_" + pid +"_tHashOutput_4");
	


	globalMap.put("tHashInput_7_NB_LINE", nb_line_tHashInput_7);       

 

ok_Hash.put("tHashInput_7", true);
end_Hash.put("tHashInput_7", System.currentTimeMillis());




/**
 * [tHashInput_7 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row16 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row16";
	
	

tHash_Lookup_row16.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row16");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row16", true);
end_Hash.put("tAdvancedHash_row16", System.currentTimeMillis());




/**
 * [tAdvancedHash_row16 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tHashInput_7 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_7";
	
	

 



/**
 * [tHashInput_7 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row16 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row16";
	
	

 



/**
 * [tAdvancedHash_row16 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tHashInput_7_SUBPROCESS_STATE", 1);
	}
	


public static class row6Struct implements routines.system.IPersistableComparableLookupRow<row6Struct> {
    final static byte[] commonByteArrayLock_CEC_DISTRIBUCION_CI_DistribucionCI = new byte[0];
    static byte[] commonByteArray_CEC_DISTRIBUCION_CI_DistribucionCI = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public Integer FUERZA_ID;

				public Integer getFUERZA_ID () {
					return this.FUERZA_ID;
				}

				public Boolean FUERZA_IDIsNullable(){
				    return true;
				}
				public Boolean FUERZA_IDIsKey(){
				    return false;
				}
				public Integer FUERZA_IDLength(){
				    return null;
				}
				public Integer FUERZA_IDPrecision(){
				    return null;
				}
				public String FUERZA_IDDefault(){
				
					return null;
				
				}
				public String FUERZA_IDComment(){
				
				    return "";
				
				}
				public String FUERZA_IDPattern(){
				
					return "";
				
				}
				public String FUERZA_IDOriginalDbColumnName(){
				
					return "FUERZA_ID";
				
				}

				
			    public int ESMID;

				public int getESMID () {
					return this.ESMID;
				}

				public Boolean ESMIDIsNullable(){
				    return false;
				}
				public Boolean ESMIDIsKey(){
				    return false;
				}
				public Integer ESMIDLength(){
				    return 0;
				}
				public Integer ESMIDPrecision(){
				    return null;
				}
				public String ESMIDDefault(){
				
					return "";
				
				}
				public String ESMIDComment(){
				
				    return "";
				
				}
				public String ESMIDPattern(){
				
					return "";
				
				}
				public String ESMIDOriginalDbColumnName(){
				
					return "ESMID";
				
				}

				
			    public Integer ESPECIALIDADES_ID;

				public Integer getESPECIALIDADES_ID () {
					return this.ESPECIALIDADES_ID;
				}

				public Boolean ESPECIALIDADES_IDIsNullable(){
				    return true;
				}
				public Boolean ESPECIALIDADES_IDIsKey(){
				    return false;
				}
				public Integer ESPECIALIDADES_IDLength(){
				    return 0;
				}
				public Integer ESPECIALIDADES_IDPrecision(){
				    return null;
				}
				public String ESPECIALIDADES_IDDefault(){
				
					return "";
				
				}
				public String ESPECIALIDADES_IDComment(){
				
				    return "";
				
				}
				public String ESPECIALIDADES_IDPattern(){
				
					return "";
				
				}
				public String ESPECIALIDADES_IDOriginalDbColumnName(){
				
					return "ESPECIALIDADES_ID";
				
				}

				
			    public int CUPS_ID;

				public int getCUPS_ID () {
					return this.CUPS_ID;
				}

				public Boolean CUPS_IDIsNullable(){
				    return false;
				}
				public Boolean CUPS_IDIsKey(){
				    return false;
				}
				public Integer CUPS_IDLength(){
				    return 0;
				}
				public Integer CUPS_IDPrecision(){
				    return null;
				}
				public String CUPS_IDDefault(){
				
					return "";
				
				}
				public String CUPS_IDComment(){
				
				    return "";
				
				}
				public String CUPS_IDPattern(){
				
					return "";
				
				}
				public String CUPS_IDOriginalDbColumnName(){
				
					return "CUPS_ID";
				
				}

				
			    public Double VALOR;

				public Double getVALOR () {
					return this.VALOR;
				}

				public Boolean VALORIsNullable(){
				    return true;
				}
				public Boolean VALORIsKey(){
				    return false;
				}
				public Integer VALORLength(){
				    return 0;
				}
				public Integer VALORPrecision(){
				    return null;
				}
				public String VALORDefault(){
				
					return "";
				
				}
				public String VALORComment(){
				
				    return "";
				
				}
				public String VALORPattern(){
				
					return "";
				
				}
				public String VALOROriginalDbColumnName(){
				
					return "VALOR";
				
				}

				
			    public Integer CEBE_ID;

				public Integer getCEBE_ID () {
					return this.CEBE_ID;
				}

				public Boolean CEBE_IDIsNullable(){
				    return true;
				}
				public Boolean CEBE_IDIsKey(){
				    return false;
				}
				public Integer CEBE_IDLength(){
				    return null;
				}
				public Integer CEBE_IDPrecision(){
				    return null;
				}
				public String CEBE_IDDefault(){
				
					return null;
				
				}
				public String CEBE_IDComment(){
				
				    return "";
				
				}
				public String CEBE_IDPattern(){
				
					return "";
				
				}
				public String CEBE_IDOriginalDbColumnName(){
				
					return "CEBE_ID";
				
				}

				
			    public Integer CECO_ID;

				public Integer getCECO_ID () {
					return this.CECO_ID;
				}

				public Boolean CECO_IDIsNullable(){
				    return true;
				}
				public Boolean CECO_IDIsKey(){
				    return false;
				}
				public Integer CECO_IDLength(){
				    return null;
				}
				public Integer CECO_IDPrecision(){
				    return null;
				}
				public String CECO_IDDefault(){
				
					return null;
				
				}
				public String CECO_IDComment(){
				
				    return "";
				
				}
				public String CECO_IDPattern(){
				
					return "";
				
				}
				public String CECO_IDOriginalDbColumnName(){
				
					return "CECO_ID";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.FUERZA_ID == null) ? 0 : this.FUERZA_ID.hashCode());
					
							result = prime * result + (int) this.ESMID;
						
							result = prime * result + (int) this.CUPS_ID;
						
						result = prime * result + ((this.CEBE_ID == null) ? 0 : this.CEBE_ID.hashCode());
					
						result = prime * result + ((this.CECO_ID == null) ? 0 : this.CECO_ID.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row6Struct other = (row6Struct) obj;
		
						if (this.FUERZA_ID == null) {
							if (other.FUERZA_ID != null)
								return false;
						
						} else if (!this.FUERZA_ID.equals(other.FUERZA_ID))
						
							return false;
					
						if (this.ESMID != other.ESMID)
							return false;
					
						if (this.CUPS_ID != other.CUPS_ID)
							return false;
					
						if (this.CEBE_ID == null) {
							if (other.CEBE_ID != null)
								return false;
						
						} else if (!this.CEBE_ID.equals(other.CEBE_ID))
						
							return false;
					
						if (this.CECO_ID == null) {
							if (other.CECO_ID != null)
								return false;
						
						} else if (!this.CECO_ID.equals(other.CECO_ID))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row6Struct other) {

		other.FUERZA_ID = this.FUERZA_ID;
	            other.ESMID = this.ESMID;
	            other.ESPECIALIDADES_ID = this.ESPECIALIDADES_ID;
	            other.CUPS_ID = this.CUPS_ID;
	            other.VALOR = this.VALOR;
	            other.CEBE_ID = this.CEBE_ID;
	            other.CECO_ID = this.CECO_ID;
	            
	}

	public void copyKeysDataTo(row6Struct other) {

		other.FUERZA_ID = this.FUERZA_ID;
	            	other.ESMID = this.ESMID;
	            	other.CUPS_ID = this.CUPS_ID;
	            	other.CEBE_ID = this.CEBE_ID;
	            	other.CECO_ID = this.CECO_ID;
	            	
	}



	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}
	private Integer readInteger(DataInputStream dis, ObjectInputStream ois) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
			intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		Integer intReturn;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
			intReturn = unmarshaller.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, DataOutputStream dos,org.jboss.marshalling.Marshaller marshaller ) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_CEC_DISTRIBUCION_CI_DistribucionCI) {

        	try {

        		int length = 0;
		
						this.FUERZA_ID = readInteger(dis);
					
			        this.ESMID = dis.readInt();
					
			        this.CUPS_ID = dis.readInt();
					
						this.CEBE_ID = readInteger(dis);
					
						this.CECO_ID = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_CEC_DISTRIBUCION_CI_DistribucionCI) {

        	try {

        		int length = 0;
		
						this.FUERZA_ID = readInteger(dis);
					
			        this.ESMID = dis.readInt();
					
			        this.CUPS_ID = dis.readInt();
					
						this.CEBE_ID = readInteger(dis);
					
						this.CECO_ID = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.FUERZA_ID,dos);
					
					// int
				
		            	dos.writeInt(this.ESMID);
					
					// int
				
		            	dos.writeInt(this.CUPS_ID);
					
					// Integer
				
						writeInteger(this.CEBE_ID,dos);
					
					// Integer
				
						writeInteger(this.CECO_ID,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.FUERZA_ID,dos);
					
					// int
				
		            	dos.writeInt(this.ESMID);
					
					// int
				
		            	dos.writeInt(this.CUPS_ID);
					
					// Integer
				
						writeInteger(this.CEBE_ID,dos);
					
					// Integer
				
						writeInteger(this.CECO_ID,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.ESPECIALIDADES_ID = readInteger(dis,ois);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.VALOR = null;
           				} else {
           			    	this.VALOR = dis.readDouble();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		
						this.ESPECIALIDADES_ID = readInteger(dis,objectIn);
					
			            length = objectIn.readByte();
           				if (length == -1) {
           	    			this.VALOR = null;
           				} else {
           			    	this.VALOR = objectIn.readDouble();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
					writeInteger(this.ESPECIALIDADES_ID, dos, oos);
					
						if(this.VALOR == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.VALOR);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
					writeInteger(this.ESPECIALIDADES_ID, dos, objectOut);
					
						if(this.VALOR == null) {
							objectOut.writeByte(-1);
						} else {
							objectOut.writeByte(0);
							objectOut.writeDouble(this.VALOR);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("FUERZA_ID="+String.valueOf(FUERZA_ID));
		sb.append(",ESMID="+String.valueOf(ESMID));
		sb.append(",ESPECIALIDADES_ID="+String.valueOf(ESPECIALIDADES_ID));
		sb.append(",CUPS_ID="+String.valueOf(CUPS_ID));
		sb.append(",VALOR="+String.valueOf(VALOR));
		sb.append(",CEBE_ID="+String.valueOf(CEBE_ID));
		sb.append(",CECO_ID="+String.valueOf(CECO_ID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row6Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.FUERZA_ID, other.FUERZA_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.ESMID, other.ESMID);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.CUPS_ID, other.CUPS_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.CEBE_ID, other.CEBE_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.CECO_ID, other.CECO_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tHashInput_11Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tHashInput_11_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row6Struct row6 = new row6Struct();




	
	/**
	 * [tAdvancedHash_row6 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row6", false);
		start_Hash.put("tAdvancedHash_row6", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row6";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row6");
					}
				
		int tos_count_tAdvancedHash_row6 = 0;
		

			   		// connection name:row6
			   		// source node:tHashInput_11 - inputs:(after_tHashInput_10) outputs:(row6,row6) | target node:tAdvancedHash_row6 - inputs:(row6) outputs:()
			   		// linked node: tMap_7 - inputs:(row1,row6) outputs:(InsVcups)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row6 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row6Struct> tHash_Lookup_row6 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row6Struct>getLookup(matchingModeEnum_row6);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row6", tHash_Lookup_row6);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row6 begin ] stop
 */



	
	/**
	 * [tHashInput_11 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_11", false);
		start_Hash.put("tHashInput_11", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_11";
	
	
		int tos_count_tHashInput_11 = 0;
		


int nb_line_tHashInput_11 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_11=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<TCV04Struct> tHashFile_tHashInput_11 = mf_tHashInput_11.getAdvancedMemoryHashFile("tHashFile_DistribucionCI_" + pid +"_tHashOutput_8");
if(tHashFile_tHashInput_11==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<TCV04Struct> iterator_tHashInput_11 = tHashFile_tHashInput_11.iterator();
while (iterator_tHashInput_11.hasNext()) {
    TCV04Struct next_tHashInput_11 = iterator_tHashInput_11.next();

	row6.FUERZA_ID = next_tHashInput_11.FUERZA_ID;
	row6.ESMID = next_tHashInput_11.ESMID;
	row6.ESPECIALIDADES_ID = next_tHashInput_11.ESPECIALIDADES_ID;
	row6.CUPS_ID = next_tHashInput_11.CUPS_ID;
	row6.VALOR = next_tHashInput_11.VALOR;
	row6.CEBE_ID = next_tHashInput_11.CEBE_ID;
	row6.CECO_ID = next_tHashInput_11.CECO_ID;

 



/**
 * [tHashInput_11 begin ] stop
 */
	
	/**
	 * [tHashInput_11 main ] start
	 */

	

	
	
	currentComponent="tHashInput_11";
	
	

 


	tos_count_tHashInput_11++;

/**
 * [tHashInput_11 main ] stop
 */
	
	/**
	 * [tHashInput_11 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashInput_11";
	
	

 



/**
 * [tHashInput_11 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row6 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row6";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row6"
						
						);
					}
					


			   
			   

					row6Struct row6_HashRow = new row6Struct();
		   	   	   
				
				row6_HashRow.FUERZA_ID = row6.FUERZA_ID;
				
				row6_HashRow.ESMID = row6.ESMID;
				
				row6_HashRow.ESPECIALIDADES_ID = row6.ESPECIALIDADES_ID;
				
				row6_HashRow.CUPS_ID = row6.CUPS_ID;
				
				row6_HashRow.VALOR = row6.VALOR;
				
				row6_HashRow.CEBE_ID = row6.CEBE_ID;
				
				row6_HashRow.CECO_ID = row6.CECO_ID;
				
			tHash_Lookup_row6.put(row6_HashRow);
			
            




 


	tos_count_tAdvancedHash_row6++;

/**
 * [tAdvancedHash_row6 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row6 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row6";
	
	

 



/**
 * [tAdvancedHash_row6 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row6 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row6";
	
	

 



/**
 * [tAdvancedHash_row6 process_data_end ] stop
 */



	
	/**
	 * [tHashInput_11 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashInput_11";
	
	

 



/**
 * [tHashInput_11 process_data_end ] stop
 */
	
	/**
	 * [tHashInput_11 end ] start
	 */

	

	
	
	currentComponent="tHashInput_11";
	
	
    

		
			nb_line_tHashInput_11++;
		}	
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_DistribucionCI_" + pid +"_tHashOutput_8");
	


	globalMap.put("tHashInput_11_NB_LINE", nb_line_tHashInput_11);       

 

ok_Hash.put("tHashInput_11", true);
end_Hash.put("tHashInput_11", System.currentTimeMillis());




/**
 * [tHashInput_11 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row6 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row6";
	
	

tHash_Lookup_row6.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row6");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row6", true);
end_Hash.put("tAdvancedHash_row6", System.currentTimeMillis());




/**
 * [tAdvancedHash_row6 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tHashInput_11 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_11";
	
	

 



/**
 * [tHashInput_11 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row6 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row6";
	
	

 



/**
 * [tAdvancedHash_row6 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tHashInput_11_SUBPROCESS_STATE", 1);
	}
	


public static class row19Struct implements routines.system.IPersistableRow<row19Struct> {
    final static byte[] commonByteArrayLock_CEC_DISTRIBUCION_CI_DistribucionCI = new byte[0];
    static byte[] commonByteArray_CEC_DISTRIBUCION_CI_DistribucionCI = new byte[0];

	
			    public java.util.Date moment;

				public java.util.Date getMoment () {
					return this.moment;
				}

				public Boolean momentIsNullable(){
				    return true;
				}
				public Boolean momentIsKey(){
				    return false;
				}
				public Integer momentLength(){
				    return 0;
				}
				public Integer momentPrecision(){
				    return 0;
				}
				public String momentDefault(){
				
					return null;
				
				}
				public String momentComment(){
				
				    return null;
				
				}
				public String momentPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String momentOriginalDbColumnName(){
				
					return "moment";
				
				}

				
			    public String project;

				public String getProject () {
					return this.project;
				}

				public Boolean projectIsNullable(){
				    return true;
				}
				public Boolean projectIsKey(){
				    return false;
				}
				public Integer projectLength(){
				    return 50;
				}
				public Integer projectPrecision(){
				    return 0;
				}
				public String projectDefault(){
				
					return null;
				
				}
				public String projectComment(){
				
				    return null;
				
				}
				public String projectPattern(){
				
				    return null;
				
				}
				public String projectOriginalDbColumnName(){
				
					return "project";
				
				}

				
			    public String job;

				public String getJob () {
					return this.job;
				}

				public Boolean jobIsNullable(){
				    return true;
				}
				public Boolean jobIsKey(){
				    return false;
				}
				public Integer jobLength(){
				    return 255;
				}
				public Integer jobPrecision(){
				    return 0;
				}
				public String jobDefault(){
				
					return null;
				
				}
				public String jobComment(){
				
				    return null;
				
				}
				public String jobPattern(){
				
				    return null;
				
				}
				public String jobOriginalDbColumnName(){
				
					return "job";
				
				}

				
			    public String context;

				public String getContext () {
					return this.context;
				}

				public Boolean contextIsNullable(){
				    return true;
				}
				public Boolean contextIsKey(){
				    return false;
				}
				public Integer contextLength(){
				    return 50;
				}
				public Integer contextPrecision(){
				    return 0;
				}
				public String contextDefault(){
				
					return null;
				
				}
				public String contextComment(){
				
				    return null;
				
				}
				public String contextPattern(){
				
				    return null;
				
				}
				public String contextOriginalDbColumnName(){
				
					return "context";
				
				}

				
			    public String origin;

				public String getOrigin () {
					return this.origin;
				}

				public Boolean originIsNullable(){
				    return true;
				}
				public Boolean originIsKey(){
				    return false;
				}
				public Integer originLength(){
				    return 255;
				}
				public Integer originPrecision(){
				    return 0;
				}
				public String originDefault(){
				
					return null;
				
				}
				public String originComment(){
				
				    return null;
				
				}
				public String originPattern(){
				
				    return null;
				
				}
				public String originOriginalDbColumnName(){
				
					return "origin";
				
				}

				
			    public String message;

				public String getMessage () {
					return this.message;
				}

				public Boolean messageIsNullable(){
				    return true;
				}
				public Boolean messageIsKey(){
				    return false;
				}
				public Integer messageLength(){
				    return 255;
				}
				public Integer messagePrecision(){
				    return 0;
				}
				public String messageDefault(){
				
					return null;
				
				}
				public String messageComment(){
				
				    return null;
				
				}
				public String messagePattern(){
				
				    return null;
				
				}
				public String messageOriginalDbColumnName(){
				
					return "message";
				
				}

				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_CEC_DISTRIBUCION_CI_DistribucionCI.length) {
				if(length < 1024 && commonByteArray_CEC_DISTRIBUCION_CI_DistribucionCI.length == 0) {
   					commonByteArray_CEC_DISTRIBUCION_CI_DistribucionCI = new byte[1024];
				} else {
   					commonByteArray_CEC_DISTRIBUCION_CI_DistribucionCI = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_CEC_DISTRIBUCION_CI_DistribucionCI, 0, length);
			strReturn = new String(commonByteArray_CEC_DISTRIBUCION_CI_DistribucionCI, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_CEC_DISTRIBUCION_CI_DistribucionCI.length) {
				if(length < 1024 && commonByteArray_CEC_DISTRIBUCION_CI_DistribucionCI.length == 0) {
   					commonByteArray_CEC_DISTRIBUCION_CI_DistribucionCI = new byte[1024];
				} else {
   					commonByteArray_CEC_DISTRIBUCION_CI_DistribucionCI = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_CEC_DISTRIBUCION_CI_DistribucionCI, 0, length);
			strReturn = new String(commonByteArray_CEC_DISTRIBUCION_CI_DistribucionCI, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_CEC_DISTRIBUCION_CI_DistribucionCI) {

        	try {

        		int length = 0;
		
					this.moment = readDate(dis);
					
					this.project = readString(dis);
					
					this.job = readString(dis);
					
					this.context = readString(dis);
					
					this.origin = readString(dis);
					
					this.message = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_CEC_DISTRIBUCION_CI_DistribucionCI) {

        	try {

        		int length = 0;
		
					this.moment = readDate(dis);
					
					this.project = readString(dis);
					
					this.job = readString(dis);
					
					this.context = readString(dis);
					
					this.origin = readString(dis);
					
					this.message = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.project,dos);
					
					// String
				
						writeString(this.job,dos);
					
					// String
				
						writeString(this.context,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.message,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.project,dos);
					
					// String
				
						writeString(this.job,dos);
					
					// String
				
						writeString(this.context,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.message,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("moment="+String.valueOf(moment));
		sb.append(",project="+project);
		sb.append(",job="+job);
		sb.append(",context="+context);
		sb.append(",origin="+origin);
		sb.append(",message="+message);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row19Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row80Struct implements routines.system.IPersistableRow<row80Struct> {
    final static byte[] commonByteArrayLock_CEC_DISTRIBUCION_CI_DistribucionCI = new byte[0];
    static byte[] commonByteArray_CEC_DISTRIBUCION_CI_DistribucionCI = new byte[0];

	
			    public java.util.Date moment;

				public java.util.Date getMoment () {
					return this.moment;
				}

				public Boolean momentIsNullable(){
				    return true;
				}
				public Boolean momentIsKey(){
				    return false;
				}
				public Integer momentLength(){
				    return 0;
				}
				public Integer momentPrecision(){
				    return 0;
				}
				public String momentDefault(){
				
					return null;
				
				}
				public String momentComment(){
				
				    return null;
				
				}
				public String momentPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String momentOriginalDbColumnName(){
				
					return "moment";
				
				}

				
			    public String pid;

				public String getPid () {
					return this.pid;
				}

				public Boolean pidIsNullable(){
				    return true;
				}
				public Boolean pidIsKey(){
				    return false;
				}
				public Integer pidLength(){
				    return 20;
				}
				public Integer pidPrecision(){
				    return 0;
				}
				public String pidDefault(){
				
					return null;
				
				}
				public String pidComment(){
				
				    return null;
				
				}
				public String pidPattern(){
				
				    return null;
				
				}
				public String pidOriginalDbColumnName(){
				
					return "pid";
				
				}

				
			    public String root_pid;

				public String getRoot_pid () {
					return this.root_pid;
				}

				public Boolean root_pidIsNullable(){
				    return true;
				}
				public Boolean root_pidIsKey(){
				    return false;
				}
				public Integer root_pidLength(){
				    return 20;
				}
				public Integer root_pidPrecision(){
				    return 0;
				}
				public String root_pidDefault(){
				
					return null;
				
				}
				public String root_pidComment(){
				
				    return null;
				
				}
				public String root_pidPattern(){
				
				    return null;
				
				}
				public String root_pidOriginalDbColumnName(){
				
					return "root_pid";
				
				}

				
			    public String father_pid;

				public String getFather_pid () {
					return this.father_pid;
				}

				public Boolean father_pidIsNullable(){
				    return true;
				}
				public Boolean father_pidIsKey(){
				    return false;
				}
				public Integer father_pidLength(){
				    return 20;
				}
				public Integer father_pidPrecision(){
				    return 0;
				}
				public String father_pidDefault(){
				
					return null;
				
				}
				public String father_pidComment(){
				
				    return null;
				
				}
				public String father_pidPattern(){
				
				    return null;
				
				}
				public String father_pidOriginalDbColumnName(){
				
					return "father_pid";
				
				}

				
			    public String project;

				public String getProject () {
					return this.project;
				}

				public Boolean projectIsNullable(){
				    return true;
				}
				public Boolean projectIsKey(){
				    return false;
				}
				public Integer projectLength(){
				    return 50;
				}
				public Integer projectPrecision(){
				    return 0;
				}
				public String projectDefault(){
				
					return null;
				
				}
				public String projectComment(){
				
				    return null;
				
				}
				public String projectPattern(){
				
				    return null;
				
				}
				public String projectOriginalDbColumnName(){
				
					return "project";
				
				}

				
			    public String job;

				public String getJob () {
					return this.job;
				}

				public Boolean jobIsNullable(){
				    return true;
				}
				public Boolean jobIsKey(){
				    return false;
				}
				public Integer jobLength(){
				    return 255;
				}
				public Integer jobPrecision(){
				    return 0;
				}
				public String jobDefault(){
				
					return null;
				
				}
				public String jobComment(){
				
				    return null;
				
				}
				public String jobPattern(){
				
				    return null;
				
				}
				public String jobOriginalDbColumnName(){
				
					return "job";
				
				}

				
			    public String context;

				public String getContext () {
					return this.context;
				}

				public Boolean contextIsNullable(){
				    return true;
				}
				public Boolean contextIsKey(){
				    return false;
				}
				public Integer contextLength(){
				    return 50;
				}
				public Integer contextPrecision(){
				    return 0;
				}
				public String contextDefault(){
				
					return null;
				
				}
				public String contextComment(){
				
				    return null;
				
				}
				public String contextPattern(){
				
				    return null;
				
				}
				public String contextOriginalDbColumnName(){
				
					return "context";
				
				}

				
			    public Integer priority;

				public Integer getPriority () {
					return this.priority;
				}

				public Boolean priorityIsNullable(){
				    return true;
				}
				public Boolean priorityIsKey(){
				    return false;
				}
				public Integer priorityLength(){
				    return 3;
				}
				public Integer priorityPrecision(){
				    return 0;
				}
				public String priorityDefault(){
				
					return "";
				
				}
				public String priorityComment(){
				
				    return null;
				
				}
				public String priorityPattern(){
				
				    return null;
				
				}
				public String priorityOriginalDbColumnName(){
				
					return "priority";
				
				}

				
			    public String type;

				public String getType () {
					return this.type;
				}

				public Boolean typeIsNullable(){
				    return true;
				}
				public Boolean typeIsKey(){
				    return false;
				}
				public Integer typeLength(){
				    return 255;
				}
				public Integer typePrecision(){
				    return 0;
				}
				public String typeDefault(){
				
					return null;
				
				}
				public String typeComment(){
				
				    return null;
				
				}
				public String typePattern(){
				
				    return null;
				
				}
				public String typeOriginalDbColumnName(){
				
					return "type";
				
				}

				
			    public String origin;

				public String getOrigin () {
					return this.origin;
				}

				public Boolean originIsNullable(){
				    return true;
				}
				public Boolean originIsKey(){
				    return false;
				}
				public Integer originLength(){
				    return 255;
				}
				public Integer originPrecision(){
				    return 0;
				}
				public String originDefault(){
				
					return null;
				
				}
				public String originComment(){
				
				    return null;
				
				}
				public String originPattern(){
				
				    return null;
				
				}
				public String originOriginalDbColumnName(){
				
					return "origin";
				
				}

				
			    public String message;

				public String getMessage () {
					return this.message;
				}

				public Boolean messageIsNullable(){
				    return true;
				}
				public Boolean messageIsKey(){
				    return false;
				}
				public Integer messageLength(){
				    return 255;
				}
				public Integer messagePrecision(){
				    return 0;
				}
				public String messageDefault(){
				
					return null;
				
				}
				public String messageComment(){
				
				    return null;
				
				}
				public String messagePattern(){
				
				    return null;
				
				}
				public String messageOriginalDbColumnName(){
				
					return "message";
				
				}

				
			    public Integer code;

				public Integer getCode () {
					return this.code;
				}

				public Boolean codeIsNullable(){
				    return true;
				}
				public Boolean codeIsKey(){
				    return false;
				}
				public Integer codeLength(){
				    return 3;
				}
				public Integer codePrecision(){
				    return 0;
				}
				public String codeDefault(){
				
					return "";
				
				}
				public String codeComment(){
				
				    return null;
				
				}
				public String codePattern(){
				
				    return null;
				
				}
				public String codeOriginalDbColumnName(){
				
					return "code";
				
				}

				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_CEC_DISTRIBUCION_CI_DistribucionCI.length) {
				if(length < 1024 && commonByteArray_CEC_DISTRIBUCION_CI_DistribucionCI.length == 0) {
   					commonByteArray_CEC_DISTRIBUCION_CI_DistribucionCI = new byte[1024];
				} else {
   					commonByteArray_CEC_DISTRIBUCION_CI_DistribucionCI = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_CEC_DISTRIBUCION_CI_DistribucionCI, 0, length);
			strReturn = new String(commonByteArray_CEC_DISTRIBUCION_CI_DistribucionCI, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_CEC_DISTRIBUCION_CI_DistribucionCI.length) {
				if(length < 1024 && commonByteArray_CEC_DISTRIBUCION_CI_DistribucionCI.length == 0) {
   					commonByteArray_CEC_DISTRIBUCION_CI_DistribucionCI = new byte[1024];
				} else {
   					commonByteArray_CEC_DISTRIBUCION_CI_DistribucionCI = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_CEC_DISTRIBUCION_CI_DistribucionCI, 0, length);
			strReturn = new String(commonByteArray_CEC_DISTRIBUCION_CI_DistribucionCI, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_CEC_DISTRIBUCION_CI_DistribucionCI) {

        	try {

        		int length = 0;
		
					this.moment = readDate(dis);
					
					this.pid = readString(dis);
					
					this.root_pid = readString(dis);
					
					this.father_pid = readString(dis);
					
					this.project = readString(dis);
					
					this.job = readString(dis);
					
					this.context = readString(dis);
					
						this.priority = readInteger(dis);
					
					this.type = readString(dis);
					
					this.origin = readString(dis);
					
					this.message = readString(dis);
					
						this.code = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_CEC_DISTRIBUCION_CI_DistribucionCI) {

        	try {

        		int length = 0;
		
					this.moment = readDate(dis);
					
					this.pid = readString(dis);
					
					this.root_pid = readString(dis);
					
					this.father_pid = readString(dis);
					
					this.project = readString(dis);
					
					this.job = readString(dis);
					
					this.context = readString(dis);
					
						this.priority = readInteger(dis);
					
					this.type = readString(dis);
					
					this.origin = readString(dis);
					
					this.message = readString(dis);
					
						this.code = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.pid,dos);
					
					// String
				
						writeString(this.root_pid,dos);
					
					// String
				
						writeString(this.father_pid,dos);
					
					// String
				
						writeString(this.project,dos);
					
					// String
				
						writeString(this.job,dos);
					
					// String
				
						writeString(this.context,dos);
					
					// Integer
				
						writeInteger(this.priority,dos);
					
					// String
				
						writeString(this.type,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.message,dos);
					
					// Integer
				
						writeInteger(this.code,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.pid,dos);
					
					// String
				
						writeString(this.root_pid,dos);
					
					// String
				
						writeString(this.father_pid,dos);
					
					// String
				
						writeString(this.project,dos);
					
					// String
				
						writeString(this.job,dos);
					
					// String
				
						writeString(this.context,dos);
					
					// Integer
				
						writeInteger(this.priority,dos);
					
					// String
				
						writeString(this.type,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.message,dos);
					
					// Integer
				
						writeInteger(this.code,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("moment="+String.valueOf(moment));
		sb.append(",pid="+pid);
		sb.append(",root_pid="+root_pid);
		sb.append(",father_pid="+father_pid);
		sb.append(",project="+project);
		sb.append(",job="+job);
		sb.append(",context="+context);
		sb.append(",priority="+String.valueOf(priority));
		sb.append(",type="+type);
		sb.append(",origin="+origin);
		sb.append(",message="+message);
		sb.append(",code="+String.valueOf(code));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row80Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row79Struct implements routines.system.IPersistableRow<row79Struct> {
    final static byte[] commonByteArrayLock_CEC_DISTRIBUCION_CI_DistribucionCI = new byte[0];
    static byte[] commonByteArray_CEC_DISTRIBUCION_CI_DistribucionCI = new byte[0];

	
			    public java.util.Date moment;

				public java.util.Date getMoment () {
					return this.moment;
				}

				public Boolean momentIsNullable(){
				    return true;
				}
				public Boolean momentIsKey(){
				    return false;
				}
				public Integer momentLength(){
				    return 0;
				}
				public Integer momentPrecision(){
				    return 0;
				}
				public String momentDefault(){
				
					return null;
				
				}
				public String momentComment(){
				
				    return null;
				
				}
				public String momentPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String momentOriginalDbColumnName(){
				
					return "moment";
				
				}

				
			    public String pid;

				public String getPid () {
					return this.pid;
				}

				public Boolean pidIsNullable(){
				    return true;
				}
				public Boolean pidIsKey(){
				    return false;
				}
				public Integer pidLength(){
				    return 20;
				}
				public Integer pidPrecision(){
				    return 0;
				}
				public String pidDefault(){
				
					return null;
				
				}
				public String pidComment(){
				
				    return null;
				
				}
				public String pidPattern(){
				
				    return null;
				
				}
				public String pidOriginalDbColumnName(){
				
					return "pid";
				
				}

				
			    public String root_pid;

				public String getRoot_pid () {
					return this.root_pid;
				}

				public Boolean root_pidIsNullable(){
				    return true;
				}
				public Boolean root_pidIsKey(){
				    return false;
				}
				public Integer root_pidLength(){
				    return 20;
				}
				public Integer root_pidPrecision(){
				    return 0;
				}
				public String root_pidDefault(){
				
					return null;
				
				}
				public String root_pidComment(){
				
				    return null;
				
				}
				public String root_pidPattern(){
				
				    return null;
				
				}
				public String root_pidOriginalDbColumnName(){
				
					return "root_pid";
				
				}

				
			    public String father_pid;

				public String getFather_pid () {
					return this.father_pid;
				}

				public Boolean father_pidIsNullable(){
				    return true;
				}
				public Boolean father_pidIsKey(){
				    return false;
				}
				public Integer father_pidLength(){
				    return 20;
				}
				public Integer father_pidPrecision(){
				    return 0;
				}
				public String father_pidDefault(){
				
					return null;
				
				}
				public String father_pidComment(){
				
				    return null;
				
				}
				public String father_pidPattern(){
				
				    return null;
				
				}
				public String father_pidOriginalDbColumnName(){
				
					return "father_pid";
				
				}

				
			    public String project;

				public String getProject () {
					return this.project;
				}

				public Boolean projectIsNullable(){
				    return true;
				}
				public Boolean projectIsKey(){
				    return false;
				}
				public Integer projectLength(){
				    return 50;
				}
				public Integer projectPrecision(){
				    return 0;
				}
				public String projectDefault(){
				
					return null;
				
				}
				public String projectComment(){
				
				    return null;
				
				}
				public String projectPattern(){
				
				    return null;
				
				}
				public String projectOriginalDbColumnName(){
				
					return "project";
				
				}

				
			    public String job;

				public String getJob () {
					return this.job;
				}

				public Boolean jobIsNullable(){
				    return true;
				}
				public Boolean jobIsKey(){
				    return false;
				}
				public Integer jobLength(){
				    return 255;
				}
				public Integer jobPrecision(){
				    return 0;
				}
				public String jobDefault(){
				
					return null;
				
				}
				public String jobComment(){
				
				    return null;
				
				}
				public String jobPattern(){
				
				    return null;
				
				}
				public String jobOriginalDbColumnName(){
				
					return "job";
				
				}

				
			    public String context;

				public String getContext () {
					return this.context;
				}

				public Boolean contextIsNullable(){
				    return true;
				}
				public Boolean contextIsKey(){
				    return false;
				}
				public Integer contextLength(){
				    return 50;
				}
				public Integer contextPrecision(){
				    return 0;
				}
				public String contextDefault(){
				
					return null;
				
				}
				public String contextComment(){
				
				    return null;
				
				}
				public String contextPattern(){
				
				    return null;
				
				}
				public String contextOriginalDbColumnName(){
				
					return "context";
				
				}

				
			    public Integer priority;

				public Integer getPriority () {
					return this.priority;
				}

				public Boolean priorityIsNullable(){
				    return true;
				}
				public Boolean priorityIsKey(){
				    return false;
				}
				public Integer priorityLength(){
				    return 3;
				}
				public Integer priorityPrecision(){
				    return 0;
				}
				public String priorityDefault(){
				
					return "";
				
				}
				public String priorityComment(){
				
				    return null;
				
				}
				public String priorityPattern(){
				
				    return null;
				
				}
				public String priorityOriginalDbColumnName(){
				
					return "priority";
				
				}

				
			    public String type;

				public String getType () {
					return this.type;
				}

				public Boolean typeIsNullable(){
				    return true;
				}
				public Boolean typeIsKey(){
				    return false;
				}
				public Integer typeLength(){
				    return 255;
				}
				public Integer typePrecision(){
				    return 0;
				}
				public String typeDefault(){
				
					return null;
				
				}
				public String typeComment(){
				
				    return null;
				
				}
				public String typePattern(){
				
				    return null;
				
				}
				public String typeOriginalDbColumnName(){
				
					return "type";
				
				}

				
			    public String origin;

				public String getOrigin () {
					return this.origin;
				}

				public Boolean originIsNullable(){
				    return true;
				}
				public Boolean originIsKey(){
				    return false;
				}
				public Integer originLength(){
				    return 255;
				}
				public Integer originPrecision(){
				    return 0;
				}
				public String originDefault(){
				
					return null;
				
				}
				public String originComment(){
				
				    return null;
				
				}
				public String originPattern(){
				
				    return null;
				
				}
				public String originOriginalDbColumnName(){
				
					return "origin";
				
				}

				
			    public String message;

				public String getMessage () {
					return this.message;
				}

				public Boolean messageIsNullable(){
				    return true;
				}
				public Boolean messageIsKey(){
				    return false;
				}
				public Integer messageLength(){
				    return 255;
				}
				public Integer messagePrecision(){
				    return 0;
				}
				public String messageDefault(){
				
					return null;
				
				}
				public String messageComment(){
				
				    return null;
				
				}
				public String messagePattern(){
				
				    return null;
				
				}
				public String messageOriginalDbColumnName(){
				
					return "message";
				
				}

				
			    public Integer code;

				public Integer getCode () {
					return this.code;
				}

				public Boolean codeIsNullable(){
				    return true;
				}
				public Boolean codeIsKey(){
				    return false;
				}
				public Integer codeLength(){
				    return 3;
				}
				public Integer codePrecision(){
				    return 0;
				}
				public String codeDefault(){
				
					return "";
				
				}
				public String codeComment(){
				
				    return null;
				
				}
				public String codePattern(){
				
				    return null;
				
				}
				public String codeOriginalDbColumnName(){
				
					return "code";
				
				}

				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_CEC_DISTRIBUCION_CI_DistribucionCI.length) {
				if(length < 1024 && commonByteArray_CEC_DISTRIBUCION_CI_DistribucionCI.length == 0) {
   					commonByteArray_CEC_DISTRIBUCION_CI_DistribucionCI = new byte[1024];
				} else {
   					commonByteArray_CEC_DISTRIBUCION_CI_DistribucionCI = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_CEC_DISTRIBUCION_CI_DistribucionCI, 0, length);
			strReturn = new String(commonByteArray_CEC_DISTRIBUCION_CI_DistribucionCI, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_CEC_DISTRIBUCION_CI_DistribucionCI.length) {
				if(length < 1024 && commonByteArray_CEC_DISTRIBUCION_CI_DistribucionCI.length == 0) {
   					commonByteArray_CEC_DISTRIBUCION_CI_DistribucionCI = new byte[1024];
				} else {
   					commonByteArray_CEC_DISTRIBUCION_CI_DistribucionCI = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_CEC_DISTRIBUCION_CI_DistribucionCI, 0, length);
			strReturn = new String(commonByteArray_CEC_DISTRIBUCION_CI_DistribucionCI, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_CEC_DISTRIBUCION_CI_DistribucionCI) {

        	try {

        		int length = 0;
		
					this.moment = readDate(dis);
					
					this.pid = readString(dis);
					
					this.root_pid = readString(dis);
					
					this.father_pid = readString(dis);
					
					this.project = readString(dis);
					
					this.job = readString(dis);
					
					this.context = readString(dis);
					
						this.priority = readInteger(dis);
					
					this.type = readString(dis);
					
					this.origin = readString(dis);
					
					this.message = readString(dis);
					
						this.code = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_CEC_DISTRIBUCION_CI_DistribucionCI) {

        	try {

        		int length = 0;
		
					this.moment = readDate(dis);
					
					this.pid = readString(dis);
					
					this.root_pid = readString(dis);
					
					this.father_pid = readString(dis);
					
					this.project = readString(dis);
					
					this.job = readString(dis);
					
					this.context = readString(dis);
					
						this.priority = readInteger(dis);
					
					this.type = readString(dis);
					
					this.origin = readString(dis);
					
					this.message = readString(dis);
					
						this.code = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.pid,dos);
					
					// String
				
						writeString(this.root_pid,dos);
					
					// String
				
						writeString(this.father_pid,dos);
					
					// String
				
						writeString(this.project,dos);
					
					// String
				
						writeString(this.job,dos);
					
					// String
				
						writeString(this.context,dos);
					
					// Integer
				
						writeInteger(this.priority,dos);
					
					// String
				
						writeString(this.type,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.message,dos);
					
					// Integer
				
						writeInteger(this.code,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.pid,dos);
					
					// String
				
						writeString(this.root_pid,dos);
					
					// String
				
						writeString(this.father_pid,dos);
					
					// String
				
						writeString(this.project,dos);
					
					// String
				
						writeString(this.job,dos);
					
					// String
				
						writeString(this.context,dos);
					
					// Integer
				
						writeInteger(this.priority,dos);
					
					// String
				
						writeString(this.type,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.message,dos);
					
					// Integer
				
						writeInteger(this.code,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("moment="+String.valueOf(moment));
		sb.append(",pid="+pid);
		sb.append(",root_pid="+root_pid);
		sb.append(",father_pid="+father_pid);
		sb.append(",project="+project);
		sb.append(",job="+job);
		sb.append(",context="+context);
		sb.append(",priority="+String.valueOf(priority));
		sb.append(",type="+type);
		sb.append(",origin="+origin);
		sb.append(",message="+message);
		sb.append(",code="+String.valueOf(code));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row79Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tLogCatcher_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tLogCatcher_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row79Struct row79 = new row79Struct();
row79Struct row80 = row79;
row19Struct row19 = new row19Struct();






	
	/**
	 * [tOracleRow_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleRow_1", false);
		start_Hash.put("tOracleRow_1", System.currentTimeMillis());
		
	
	currentComponent="tOracleRow_1";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row19");
					}
				
		int tos_count_tOracleRow_1 = 0;
		

	java.sql.Connection conn_tOracleRow_1 = null;
	String query_tOracleRow_1 = "";
	boolean whetherReject_tOracleRow_1 = false;
	int count_tOracleRow_1 = 0;
				conn_tOracleRow_1 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");
			
        resourceMap.put("conn_tOracleRow_1", conn_tOracleRow_1);
        java.sql.Statement stmt_tOracleRow_1 = conn_tOracleRow_1.createStatement();
        resourceMap.put("stmt_tOracleRow_1", stmt_tOracleRow_1);

 



/**
 * [tOracleRow_1 begin ] stop
 */



	
	/**
	 * [tRunJob_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tRunJob_1", false);
		start_Hash.put("tRunJob_1", System.currentTimeMillis());
		
	
	currentComponent="tRunJob_1";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row80");
					}
				
		int tos_count_tRunJob_1 = 0;
		
class DealChildJobLibrary_tRunJob_1 {

	public String replaceJarPathsFromCrcMap(String originalClassPathLine) throws java.lang.Exception {
		String classPathLine = "";
		String crcMapPath = new java.io.File("../crcMap").getCanonicalPath();
		if (isNeedAddLibsPath( crcMapPath)) {
			java.util.Map<String, String> crcMap = null;
			java.io.ObjectInputStream ois = new java.io.ObjectInputStream(new java.io.FileInputStream(crcMapPath)) {
				@Override
				public Class<?> resolveClass(java.io.ObjectStreamClass desc) throws java.io.IOException, ClassNotFoundException {
					if(!"java.util.HashMap".equals(desc.getName())) {
						throw new java.io.InvalidClassException("Unauthorized deserialization attempt : " + desc.getName());
					}
					return super.resolveClass(desc);
				}
			};
			crcMap = (java.util.Map<String, String>) ois.readObject();
			ois.close();
			classPathLine = addLibsPath(originalClassPathLine, crcMap);
		} else {
			classPathLine = originalClassPathLine;
		}
		return classPathLine;
	}
	
	private boolean isNeedAddLibsPath(String crcMapPath) {
		if (!(new java.io.File(crcMapPath).exists())) {// when not use cache
			return false;
		}
		return true;
	}
	
	
	private String addLibsPath(String line, java.util.Map<String, String> crcMap) {
		for (java.util.Map.Entry<String, String> entry : crcMap.entrySet()) {
			line = adaptLibPaths(line, entry);
		}
		return line;
	}
	
	private String adaptLibPaths(String line, java.util.Map.Entry<String, String> entry) {
		String jarName = entry.getValue();
		String crc = entry.getKey();
		String libStringFinder = "../lib/" + jarName;
		if (line.contains(libStringFinder)) {
			line = line.replace(libStringFinder, "../../../cache/lib/" + crc + "/" + jarName);
		} else if (line.contains(":$ROOT_PATH/" + jarName + ":")) {
			line = line.replace(":$ROOT_PATH/" + jarName + ":", ":$ROOT_PATH/../../../cache/lib/" + crc + "/" + jarName + ":");
		} else if (line.contains(";" + jarName + ";")) {
			line = line.replace(";" + jarName + ";", ";../../../cache/lib/" + crc + "/" + jarName + ";");
		}
		return line;
	}
	
}
	DealChildJobLibrary_tRunJob_1 dealChildJobLibrary_tRunJob_1 = new DealChildJobLibrary_tRunJob_1();

	class JVMArgumentHelper_tRunJob_1 {
		
		
		
		private void addClasspath(java.util.List<String> target_argument_list, String job_origin_classpath) {
			
			String extra_classpath = null;
			String path_separator = System.getProperty("path.separator");
			if (path_separator != null && path_separator.length() > 1) {
				throw new RuntimeException("path separator should be single character");
			}
			
			if(extra_classpath!=null && !extra_classpath.isEmpty()) {
				if(extra_classpath.endsWith(path_separator)) {
					target_argument_list.add(extra_classpath+job_origin_classpath);
				} else if(extra_classpath.contains(path_separator)) {
					target_argument_list.add(concatStr(extra_classpath, path_separator, job_origin_classpath));
				} else if(extra_classpath.endsWith(":")) {
					target_argument_list.add(extra_classpath.replace(":", path_separator)+job_origin_classpath);
				} else if(extra_classpath.endsWith(";")) {
					target_argument_list.add(extra_classpath.replace(";", path_separator)+job_origin_classpath);
				} else if(extra_classpath.contains(":")) {
					target_argument_list.add(concatStr(extra_classpath.replace(":", path_separator), path_separator, job_origin_classpath));
				} else if(extra_classpath.contains(";")) {
					target_argument_list.add(concatStr(extra_classpath.replace(";", path_separator), path_separator, job_origin_classpath));
				} else {
					target_argument_list.add(concatStr(extra_classpath, path_separator, job_origin_classpath));
				}
				return;
			}
			
			target_argument_list.add(job_origin_classpath);
		}
		
		private String concatStr(String s1, String s2, String s3) {
			java.lang.StringBuilder strB = new java.lang.StringBuilder();
			strB.append(s1).append(s2).append(s3);
			return strB.toString();
		}
		
		public void addArgumentsTo(java.util.List<String> target_argument_list, String argument_from_child) {
			addArgumentsTo(target_argument_list, argument_from_child, false);
		}
		
		public void addArgumentsTo(java.util.List<String> target_argument_list, String argument_from_child, boolean isCP) {
			if(isCP) {
				addClasspath(target_argument_list, argument_from_child);
				return;
			}
		
			
			
			
			target_argument_list.add(argument_from_child);
			
		}
		
		
	}
	
	JVMArgumentHelper_tRunJob_1 jvm_argument_helper_tRunJob_1 = new JVMArgumentHelper_tRunJob_1();
	
	String audit_jar_path_tRunJob_1 = System.getProperty("classpath.extended");
	

 



/**
 * [tRunJob_1 begin ] stop
 */



	
	/**
	 * [tFileOutputDelimited_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputDelimited_1", false);
		start_Hash.put("tFileOutputDelimited_1", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputDelimited_1";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row79");
					}
				
		int tos_count_tFileOutputDelimited_1 = 0;
		

String fileName_tFileOutputDelimited_1 = "";
    fileName_tFileOutputDelimited_1 = (new java.io.File(context.LOGS_ERROR)).getAbsolutePath().replace("\\","/");
    String fullName_tFileOutputDelimited_1 = null;
    String extension_tFileOutputDelimited_1 = null;
    String directory_tFileOutputDelimited_1 = null;
    if((fileName_tFileOutputDelimited_1.indexOf("/") != -1)) {
        if(fileName_tFileOutputDelimited_1.lastIndexOf(".") < fileName_tFileOutputDelimited_1.lastIndexOf("/")) {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
            extension_tFileOutputDelimited_1 = "";
        } else {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0, fileName_tFileOutputDelimited_1.lastIndexOf("."));
            extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(fileName_tFileOutputDelimited_1.lastIndexOf("."));
        }
        directory_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0, fileName_tFileOutputDelimited_1.lastIndexOf("/"));
    } else {
        if(fileName_tFileOutputDelimited_1.lastIndexOf(".") != -1) {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0, fileName_tFileOutputDelimited_1.lastIndexOf("."));
            extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(fileName_tFileOutputDelimited_1.lastIndexOf("."));
        } else {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
            extension_tFileOutputDelimited_1 = "";
        }
        directory_tFileOutputDelimited_1 = "";
    }
    boolean isFileGenerated_tFileOutputDelimited_1 = true;
    java.io.File filetFileOutputDelimited_1 = new java.io.File(fileName_tFileOutputDelimited_1);
    globalMap.put("tFileOutputDelimited_1_FILE_NAME",fileName_tFileOutputDelimited_1);
        if(filetFileOutputDelimited_1.exists()){
            isFileGenerated_tFileOutputDelimited_1 = false;
        }
            int nb_line_tFileOutputDelimited_1 = 0;
            int splitedFileNo_tFileOutputDelimited_1 = 0;
            int currentRow_tFileOutputDelimited_1 = 0;

            final String OUT_DELIM_tFileOutputDelimited_1 = /** Start field tFileOutputDelimited_1:FIELDSEPARATOR */";"/** End field tFileOutputDelimited_1:FIELDSEPARATOR */;

            final String OUT_DELIM_ROWSEP_tFileOutputDelimited_1 = /** Start field tFileOutputDelimited_1:ROWSEPARATOR */"\n"/** End field tFileOutputDelimited_1:ROWSEPARATOR */;

                    //create directory only if not exists
                    if(directory_tFileOutputDelimited_1 != null && directory_tFileOutputDelimited_1.trim().length() != 0) {
                        java.io.File dir_tFileOutputDelimited_1 = new java.io.File(directory_tFileOutputDelimited_1);
                        if(!dir_tFileOutputDelimited_1.exists()) {
                            dir_tFileOutputDelimited_1.mkdirs();
                        }
                    }

                        //routines.system.Row
                        java.io.Writer outtFileOutputDelimited_1 = null;

                        outtFileOutputDelimited_1 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
                        new java.io.FileOutputStream(fileName_tFileOutputDelimited_1, true),"ISO-8859-15"));
                resourceMap.put("out_tFileOutputDelimited_1", outtFileOutputDelimited_1);
                        synchronized (multiThreadLockWrite) {
                                    if(filetFileOutputDelimited_1.length()==0){
                                        outtFileOutputDelimited_1.write("moment");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("pid");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("root_pid");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("father_pid");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("project");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("job");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("context");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("priority");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("type");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("origin");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("message");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("code");
                                        outtFileOutputDelimited_1.write(OUT_DELIM_ROWSEP_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.flush();
                                    }
                        }


resourceMap.put("nb_line_tFileOutputDelimited_1", nb_line_tFileOutputDelimited_1);

 



/**
 * [tFileOutputDelimited_1 begin ] stop
 */



	
	/**
	 * [tLogCatcher_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogCatcher_1", false);
		start_Hash.put("tLogCatcher_1", System.currentTimeMillis());
		
	
	currentComponent="tLogCatcher_1";
	
	
		int tos_count_tLogCatcher_1 = 0;
		

try {
	for (LogCatcherUtils.LogCatcherMessage lcm : tLogCatcher_1.getMessages()) {
		row79.type = lcm.getType();
		row79.origin = (lcm.getOrigin()==null || lcm.getOrigin().length()<1 ? null : lcm.getOrigin());
		row79.priority = lcm.getPriority();
		row79.message = lcm.getMessage();
		row79.code = lcm.getCode();
		
		row79.moment = java.util.Calendar.getInstance().getTime();
	
    	row79.pid = pid;
		row79.root_pid = rootPid;
		row79.father_pid = fatherPid;
	
    	row79.project = projectName;
    	row79.job = jobName;
    	row79.context = contextStr;
    		
 



/**
 * [tLogCatcher_1 begin ] stop
 */
	
	/**
	 * [tLogCatcher_1 main ] start
	 */

	

	
	
	currentComponent="tLogCatcher_1";
	
	

 


	tos_count_tLogCatcher_1++;

/**
 * [tLogCatcher_1 main ] stop
 */
	
	/**
	 * [tLogCatcher_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogCatcher_1";
	
	

 



/**
 * [tLogCatcher_1 process_data_begin ] stop
 */

	
	/**
	 * [tFileOutputDelimited_1 main ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row79"
						
						);
					}
					


                    StringBuilder sb_tFileOutputDelimited_1 = new StringBuilder();
                            if(row79.moment != null) {
                        sb_tFileOutputDelimited_1.append(
                            FormatterUtils.format_Date(row79.moment, "yyyy-MM-dd HH:mm:ss")
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row79.pid != null) {
                        sb_tFileOutputDelimited_1.append(
                            row79.pid
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row79.root_pid != null) {
                        sb_tFileOutputDelimited_1.append(
                            row79.root_pid
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row79.father_pid != null) {
                        sb_tFileOutputDelimited_1.append(
                            row79.father_pid
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row79.project != null) {
                        sb_tFileOutputDelimited_1.append(
                            row79.project
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row79.job != null) {
                        sb_tFileOutputDelimited_1.append(
                            row79.job
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row79.context != null) {
                        sb_tFileOutputDelimited_1.append(
                            row79.context
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row79.priority != null) {
                        sb_tFileOutputDelimited_1.append(
                            row79.priority
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row79.type != null) {
                        sb_tFileOutputDelimited_1.append(
                            row79.type
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row79.origin != null) {
                        sb_tFileOutputDelimited_1.append(
                            row79.origin
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row79.message != null) {
                        sb_tFileOutputDelimited_1.append(
                            row79.message
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row79.code != null) {
                        sb_tFileOutputDelimited_1.append(
                            row79.code
                        );
                            }
                    sb_tFileOutputDelimited_1.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_1);


                    synchronized (multiThreadLockWrite) {
                    nb_line_tFileOutputDelimited_1++;
                    resourceMap.put("nb_line_tFileOutputDelimited_1", nb_line_tFileOutputDelimited_1);

                        outtFileOutputDelimited_1.write(sb_tFileOutputDelimited_1.toString());

                    }



 
     row80 = row79;


	tos_count_tFileOutputDelimited_1++;

/**
 * [tFileOutputDelimited_1 main ] stop
 */
	
	/**
	 * [tFileOutputDelimited_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";
	
	

 



/**
 * [tFileOutputDelimited_1 process_data_begin ] stop
 */

	
	/**
	 * [tRunJob_1 main ] start
	 */

	

	
	
	currentComponent="tRunJob_1";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row80"
						
						);
					}
					
	java.util.List<String> paraList_tRunJob_1 = new java.util.ArrayList<String>();
	
			
			String osName_tRunJob_1 = System.getProperty("os.name");
			if (osName_tRunJob_1 != null && osName_tRunJob_1.toLowerCase(java.util.Locale.US).startsWith("win")){
				
						paraList_tRunJob_1.add("java");
						String m2 = System.getProperty("talend.component.manager.m2.repository");
						if (m2 != null){
							paraList_tRunJob_1.add("-Dtalend.component.manager.m2.repository=" + m2);
						}
						
						if (Boolean.getBoolean("propagateLoggingConfiguration")) {
							String log4j1_config_tRunJob_1 = System.getProperty("log4j.configuration");
							if (log4j1_config_tRunJob_1 != null){
								paraList_tRunJob_1.add("-Dlog4j.configuration=" + log4j1_config_tRunJob_1);
							}
							String log4j2_config_tRunJob_1 = System.getProperty("log4j.configurationFile");
							if (log4j2_config_tRunJob_1 != null){
								paraList_tRunJob_1.add("-Dlog4j.configurationFile=" + log4j2_config_tRunJob_1);
							}
							if (log4j1_config_tRunJob_1 != null || log4j2_config_tRunJob_1 != null) {
								paraList_tRunJob_1.add("-DpropagateLoggingConfiguration=true");
							}
						}
						
						if(enableLogStash){
							System.getProperties().stringPropertyNames().stream()
								.filter(it -> it.startsWith("audit."))
								.forEach(key -> paraList_tRunJob_1.add("-D" + key + "=" + System.getProperty(key)));
						}
							
						System.getProperties().stringPropertyNames().stream()
							.filter(it -> it.startsWith("runtime.lineage.") || "classpath.extended".equals(it))
							.forEach(key -> paraList_tRunJob_1.add("-D" + key + "=" + System.getProperty(key)));
					
		      					jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "-Dtalend.component.manager.m2.repository=../lib");
		      				
		      					jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "-Xms256M");
		      				
		      					jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "-Xmx1024M");
		      				
		      					jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "-cp");
		      				
              					String classpath_tRunJob_1_5 = ".;../lib/routines.jar;../lib/log4j-slf4j-impl-2.17.1.jar;../lib/log4j-api-2.17.1.jar;../lib/log4j-core-2.17.1.jar;../lib/activation-1.1.jar;../lib/jakarta.mail-1.6.7.jar;../lib/xercesImpl-2.12.2.jar;../lib/xml-apis-1.4.01.jar;../lib/slf4j-api-1.7.34.jar;../lib/crypto-utils-7.1.16.jar;../lib/TalendSAX.jar;../lib/jboss-marshalling-2.0.12.Final.jar;../lib/dom4j-2.1.3.jar;mail_1_3.jar;";
              					
              					if(audit_jar_path_tRunJob_1!=null && !audit_jar_path_tRunJob_1.isEmpty()) {
		      						classpath_tRunJob_1_5 += audit_jar_path_tRunJob_1;
		      					}
		      					
	        					jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, dealChildJobLibrary_tRunJob_1.replaceJarPathsFromCrcMap(classpath_tRunJob_1_5), true);
		      				
		      					jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "cec_distribucion_ci.mail_1_3.Mail");
		      				
		      					jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "--father_pid="+pid);
		      				
		      					jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "--root_pid="+rootPid);
		      				
		      					jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "--father_node=tRunJob_1");
		      				
		      					jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "--context=Default");
		      				
		      					jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "%*");
		      				
			} else {
	      		
						paraList_tRunJob_1.add("java");
						String m2 = System.getProperty("talend.component.manager.m2.repository");
						if (m2 != null){
							paraList_tRunJob_1.add("-Dtalend.component.manager.m2.repository=" + m2);
						}
						
						if (Boolean.getBoolean("propagateLoggingConfiguration")) {
							String log4j1_config_tRunJob_1 = System.getProperty("log4j.configuration");
							if (log4j1_config_tRunJob_1 != null){
								paraList_tRunJob_1.add("-Dlog4j.configuration=" + log4j1_config_tRunJob_1);
							}
							String log4j2_config_tRunJob_1 = System.getProperty("log4j.configurationFile");
							if (log4j2_config_tRunJob_1 != null){
								paraList_tRunJob_1.add("-Dlog4j.configurationFile=" + log4j2_config_tRunJob_1);
							}
							if (log4j1_config_tRunJob_1 != null || log4j2_config_tRunJob_1 != null) {
								paraList_tRunJob_1.add("-DpropagateLoggingConfiguration=true");
							}
						}
						
						if(enableLogStash){
							System.getProperties().stringPropertyNames().stream()
								.filter(it -> it.startsWith("audit."))
								.forEach(key -> paraList_tRunJob_1.add("-D" + key + "=" + System.getProperty(key)));
						}
							
						System.getProperties().stringPropertyNames().stream()
							.filter(it -> it.startsWith("runtime.lineage.") || "classpath.extended".equals(it))
							.forEach(key -> paraList_tRunJob_1.add("-D" + key + "=" + System.getProperty(key)));
					
								jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "-Dtalend.component.manager.m2.repository=../lib");
		      				
								jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "-Xms256M");
		      				
								jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "-Xmx1024M");
		      				
								jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "-cp");
		      				
		      					String classpath_tRunJob_1_5 = ".:$ROOT_PATH:$ROOT_PATH/../lib/routines.jar:$ROOT_PATH/../lib/log4j-slf4j-impl-2.17.1.jar:$ROOT_PATH/../lib/log4j-api-2.17.1.jar:$ROOT_PATH/../lib/log4j-core-2.17.1.jar:$ROOT_PATH/../lib/activation-1.1.jar:$ROOT_PATH/../lib/jakarta.mail-1.6.7.jar:$ROOT_PATH/../lib/xercesImpl-2.12.2.jar:$ROOT_PATH/../lib/xml-apis-1.4.01.jar:$ROOT_PATH/../lib/slf4j-api-1.7.34.jar:$ROOT_PATH/../lib/crypto-utils-7.1.16.jar:$ROOT_PATH/../lib/TalendSAX.jar:$ROOT_PATH/../lib/jboss-marshalling-2.0.12.Final.jar:$ROOT_PATH/../lib/dom4j-2.1.3.jar:$ROOT_PATH/mail_1_3.jar:";
		      					
		      					if(audit_jar_path_tRunJob_1!=null && !audit_jar_path_tRunJob_1.isEmpty()) {
		      						classpath_tRunJob_1_5 += audit_jar_path_tRunJob_1;
		      					}
		      					
								jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, dealChildJobLibrary_tRunJob_1.replaceJarPathsFromCrcMap(classpath_tRunJob_1_5).replace("$ROOT_PATH",System.getProperty("user.dir")), true);
		      				
								jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "cec_distribucion_ci.mail_1_3.Mail");
		      				
								jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "--father_pid="+pid);
		      				
								jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "--root_pid="+rootPid);
		      				
								jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "--father_node=tRunJob_1");
		      				
								jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "--context=Default");
		      				
								jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "$@");
		      				
			}

			
			
	  	
		if(enableLogStash){
			paraList_tRunJob_1.add("--audit.enabled="+enableLogStash);
		}
		
	//for feature:10589
	
		paraList_tRunJob_1.add("--stat_port=" + null);
	

	if(resuming_logs_dir_path != null){
		paraList_tRunJob_1.add("--resuming_logs_dir_path=" + resuming_logs_dir_path);
	}
	String childResumePath_tRunJob_1 = ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path);
	String tRunJobName_tRunJob_1 = ResumeUtil.getRighttRunJob(resuming_checkpoint_path);
	if("tRunJob_1".equals(tRunJobName_tRunJob_1) && childResumePath_tRunJob_1 != null){
		paraList_tRunJob_1.add("--resuming_checkpoint_path=" + ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path));
	}
	paraList_tRunJob_1.add("--parent_part_launcher=JOB:" + jobName + "/NODE:tRunJob_1");
	
	java.util.Map<String, Object> parentContextMap_tRunJob_1 = new java.util.HashMap<String, Object>();

	

	Object obj_tRunJob_1 = null;

	
		obj_tRunJob_1 = row80.moment;
		if(obj_tRunJob_1!=null) {
			if (obj_tRunJob_1.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_1.add("--context_param moment=" + ((java.util.Date) obj_tRunJob_1).getTime());
			} else {
				
					paraList_tRunJob_1.add("--context_param moment=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_1));
					
				
			}
		} else {
			paraList_tRunJob_1.add("--context_param moment=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_1.put("moment", obj_tRunJob_1);
	
		obj_tRunJob_1 = row80.project;
		if(obj_tRunJob_1!=null) {
			if (obj_tRunJob_1.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_1.add("--context_param project=" + ((java.util.Date) obj_tRunJob_1).getTime());
			} else {
				
					paraList_tRunJob_1.add("--context_param project=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_1));
					
				
			}
		} else {
			paraList_tRunJob_1.add("--context_param project=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_1.put("project", obj_tRunJob_1);
	
		obj_tRunJob_1 = row80.job;
		if(obj_tRunJob_1!=null) {
			if (obj_tRunJob_1.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_1.add("--context_param job=" + ((java.util.Date) obj_tRunJob_1).getTime());
			} else {
				
					paraList_tRunJob_1.add("--context_param job=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_1));
					
				
			}
		} else {
			paraList_tRunJob_1.add("--context_param job=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_1.put("job", obj_tRunJob_1);
	
		obj_tRunJob_1 = row80.context;
		if(obj_tRunJob_1!=null) {
			if (obj_tRunJob_1.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_1.add("--context_param context=" + ((java.util.Date) obj_tRunJob_1).getTime());
			} else {
				
					paraList_tRunJob_1.add("--context_param context=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_1));
					
				
			}
		} else {
			paraList_tRunJob_1.add("--context_param context=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_1.put("context", obj_tRunJob_1);
	
		obj_tRunJob_1 = row80.origin;
		if(obj_tRunJob_1!=null) {
			if (obj_tRunJob_1.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_1.add("--context_param origin=" + ((java.util.Date) obj_tRunJob_1).getTime());
			} else {
				
					paraList_tRunJob_1.add("--context_param origin=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_1));
					
				
			}
		} else {
			paraList_tRunJob_1.add("--context_param origin=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_1.put("origin", obj_tRunJob_1);
	
		obj_tRunJob_1 = row80.message;
		if(obj_tRunJob_1!=null) {
			if (obj_tRunJob_1.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_1.add("--context_param message=" + ((java.util.Date) obj_tRunJob_1).getTime());
			} else {
				
					paraList_tRunJob_1.add("--context_param message=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_1));
					
				
			}
		} else {
			paraList_tRunJob_1.add("--context_param message=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_1.put("message", obj_tRunJob_1);
	
		obj_tRunJob_1 = context.db_origen_Server;
		if(obj_tRunJob_1!=null) {
			if (obj_tRunJob_1.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_1.add("--context_param server_origen=" + ((java.util.Date) obj_tRunJob_1).getTime());
			} else {
				
					paraList_tRunJob_1.add("--context_param server_origen=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_1));
					
				
			}
		} else {
			paraList_tRunJob_1.add("--context_param server_origen=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_1.put("server_origen", obj_tRunJob_1);
	
		obj_tRunJob_1 = context.db_origen_Login;
		if(obj_tRunJob_1!=null) {
			if (obj_tRunJob_1.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_1.add("--context_param user_origen=" + ((java.util.Date) obj_tRunJob_1).getTime());
			} else {
				
					paraList_tRunJob_1.add("--context_param user_origen=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_1));
					
				
			}
		} else {
			paraList_tRunJob_1.add("--context_param user_origen=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_1.put("user_origen", obj_tRunJob_1);
	
		obj_tRunJob_1 = context.db_origen_ServiceName;
		if(obj_tRunJob_1!=null) {
			if (obj_tRunJob_1.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_1.add("--context_param service_name_origen=" + ((java.util.Date) obj_tRunJob_1).getTime());
			} else {
				
					paraList_tRunJob_1.add("--context_param service_name_origen=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_1));
					
				
			}
		} else {
			paraList_tRunJob_1.add("--context_param service_name_origen=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_1.put("service_name_origen", obj_tRunJob_1);
	
		obj_tRunJob_1 = context.db_destino_Server;
		if(obj_tRunJob_1!=null) {
			if (obj_tRunJob_1.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_1.add("--context_param server_destino=" + ((java.util.Date) obj_tRunJob_1).getTime());
			} else {
				
					paraList_tRunJob_1.add("--context_param server_destino=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_1));
					
				
			}
		} else {
			paraList_tRunJob_1.add("--context_param server_destino=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_1.put("server_destino", obj_tRunJob_1);
	
		obj_tRunJob_1 = context.db_destino_Login;
		if(obj_tRunJob_1!=null) {
			if (obj_tRunJob_1.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_1.add("--context_param user_destino=" + ((java.util.Date) obj_tRunJob_1).getTime());
			} else {
				
					paraList_tRunJob_1.add("--context_param user_destino=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_1));
					
				
			}
		} else {
			paraList_tRunJob_1.add("--context_param user_destino=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_1.put("user_destino", obj_tRunJob_1);
	
		obj_tRunJob_1 = context.db_destino_ServiceName;
		if(obj_tRunJob_1!=null) {
			if (obj_tRunJob_1.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_1.add("--context_param service_name_destino=" + ((java.util.Date) obj_tRunJob_1).getTime());
			} else {
				
					paraList_tRunJob_1.add("--context_param service_name_destino=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_1));
					
				
			}
		} else {
			paraList_tRunJob_1.add("--context_param service_name_destino=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_1.put("service_name_destino", obj_tRunJob_1);
	
	
				class ConsoleHelper_tRunJob_1 {
					private Thread getNormalThread(Process process) {
						return new Thread() {
							public void run() {
								try {
									java.io.BufferedReader reader = new java.io.BufferedReader(
											new java.io.InputStreamReader(
													process.getInputStream()));
									String line = "";
									try {
										while ((line = reader.readLine()) != null) {
											System.out.println(line);
										}
									} finally {
										reader.close();
									}
								} catch (java.io.IOException ioe) {
globalMap.put("tRunJob_1_ERROR_MESSAGE",ioe.getMessage());
						            
									ioe.printStackTrace();
								}
							}
						};
					}

					private Thread getErrorThread(Process process, StringBuffer sb) {
						return new Thread() {
							public void run() {
								try {
									java.io.BufferedReader reader = new java.io.BufferedReader(
											new java.io.InputStreamReader(
													process.getErrorStream()));
									String line = "";
									try {
										while ((line = reader.readLine()) != null) {
											sb.append(line)
													.append("\n");
										}
									} finally {
										reader.close();
									}
								} catch (java.io.IOException ioe) {
globalMap.put("tRunJob_1_ERROR_MESSAGE",ioe.getMessage());
						            
									ioe.printStackTrace();
								}
							}
						};
					}
				}
				ConsoleHelper_tRunJob_1 consoleHelper_tRunJob_1 = new ConsoleHelper_tRunJob_1();

		Runtime runtime_tRunJob_1 = Runtime.getRuntime();
		Process ps_tRunJob_1 = null;
		
		//0 indicates normal termination
        int result_tRunJob_1;
        StringBuffer errorMsg_tRunJob_1 = new StringBuffer();
        try {
            ps_tRunJob_1 = runtime_tRunJob_1.exec((String[])paraList_tRunJob_1.toArray(new String[paraList_tRunJob_1.size()]));

            Thread normal_tRunJob_1 = consoleHelper_tRunJob_1.getNormalThread(ps_tRunJob_1);
            normal_tRunJob_1.start();

            Thread error_tRunJob_1 = consoleHelper_tRunJob_1.getErrorThread(ps_tRunJob_1, errorMsg_tRunJob_1);
            error_tRunJob_1.start();

            result_tRunJob_1 = ps_tRunJob_1.waitFor();
            normal_tRunJob_1.join();
            error_tRunJob_1.join();
        } catch (ThreadDeath tde) {
globalMap.put("tRunJob_1_ERROR_MESSAGE",tde.getMessage());
            ps_tRunJob_1.destroy();
            throw tde;
        }

		globalMap.put("tRunJob_1_CHILD_RETURN_CODE",result_tRunJob_1);
		if(result_tRunJob_1 != 0){
   			globalMap.put("tRunJob_1_CHILD_EXCEPTION_STACKTRACE",errorMsg_tRunJob_1.toString());
			  
	    		throw new RuntimeException("Child job returns " + result_tRunJob_1 + ". It doesn't terminate normally.\n" + errorMsg_tRunJob_1.toString());
			
  		}

		

 


	tos_count_tRunJob_1++;

/**
 * [tRunJob_1 main ] stop
 */
	
	/**
	 * [tRunJob_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tRunJob_1";
	
	

 



/**
 * [tRunJob_1 process_data_begin ] stop
 */

	
	/**
	 * [tOracleRow_1 main ] start
	 */

	

	
	
	currentComponent="tOracleRow_1";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row19"
						
						);
					}
					

query_tOracleRow_1 = "update cec_anexos ca \nset ca.ffin = sysdate,\n ca.estregistro_id = 1,\n ca.estados_id = (select id from afi_estextdere"
+"chos ae where ae.codigo  = 8 and ae.estregistro_id = 1),\n ca.observacion = 'Error durante la distribución de costos ind"
+"irectos'\nwhere ca.id ="+context.AnexoId;
whetherReject_tOracleRow_1 = false;
globalMap.put("tOracleRow_1_QUERY",query_tOracleRow_1);
try {
		stmt_tOracleRow_1.execute(query_tOracleRow_1);
		
	} catch (java.lang.Exception e) {
globalMap.put("tOracleRow_1_ERROR_MESSAGE",e.getMessage());
		whetherReject_tOracleRow_1 = true;
		
				System.err.print(e.getMessage());
				
	}
	

 


	tos_count_tOracleRow_1++;

/**
 * [tOracleRow_1 main ] stop
 */
	
	/**
	 * [tOracleRow_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleRow_1";
	
	

 



/**
 * [tOracleRow_1 process_data_begin ] stop
 */
	
	/**
	 * [tOracleRow_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleRow_1";
	
	

 



/**
 * [tOracleRow_1 process_data_end ] stop
 */



	
	/**
	 * [tRunJob_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tRunJob_1";
	
	

 



/**
 * [tRunJob_1 process_data_end ] stop
 */



	
	/**
	 * [tFileOutputDelimited_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";
	
	

 



/**
 * [tFileOutputDelimited_1 process_data_end ] stop
 */



	
	/**
	 * [tLogCatcher_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogCatcher_1";
	
	

 



/**
 * [tLogCatcher_1 process_data_end ] stop
 */
	
	/**
	 * [tLogCatcher_1 end ] start
	 */

	

	
	
	currentComponent="tLogCatcher_1";
	
	
	}
} catch (Exception e_tLogCatcher_1) {
globalMap.put("tLogCatcher_1_ERROR_MESSAGE",e_tLogCatcher_1.getMessage());
	logIgnoredError(String.format("tLogCatcher_1 - tLogCatcher failed to process log message(s) due to internal error: %s", e_tLogCatcher_1), e_tLogCatcher_1);
}

 

ok_Hash.put("tLogCatcher_1", true);
end_Hash.put("tLogCatcher_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk6", 0, "ok");
				}
				tJava_2Process(globalMap);



/**
 * [tLogCatcher_1 end ] stop
 */

	
	/**
	 * [tFileOutputDelimited_1 end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";
	
	



		
	   		synchronized (multiThreadLockWrite) {
		
			
					if(outtFileOutputDelimited_1!=null) {
						outtFileOutputDelimited_1.flush();
						outtFileOutputDelimited_1.close();
					}
				
				globalMap.put("tFileOutputDelimited_1_NB_LINE",nb_line_tFileOutputDelimited_1);
				globalMap.put("tFileOutputDelimited_1_FILE_NAME",fileName_tFileOutputDelimited_1);
			
		
			}
		
		
		resourceMap.put("finish_tFileOutputDelimited_1", true);
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row79");
			  	}
			  	
 

ok_Hash.put("tFileOutputDelimited_1", true);
end_Hash.put("tFileOutputDelimited_1", System.currentTimeMillis());




/**
 * [tFileOutputDelimited_1 end ] stop
 */

	
	/**
	 * [tRunJob_1 end ] start
	 */

	

	
	
	currentComponent="tRunJob_1";
	
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row80");
			  	}
			  	
 

ok_Hash.put("tRunJob_1", true);
end_Hash.put("tRunJob_1", System.currentTimeMillis());




/**
 * [tRunJob_1 end ] stop
 */

	
	/**
	 * [tOracleRow_1 end ] start
	 */

	

	
	
	currentComponent="tOracleRow_1";
	
	

	globalMap.put("tOracleRow_1_NB_LINE", count_tOracleRow_1);
        stmt_tOracleRow_1.close();
        resourceMap.remove("stmt_tOracleRow_1");
    resourceMap.put("statementClosed_tOracleRow_1", true);
    resourceMap.put("finish_tOracleRow_1", true);

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row19");
			  	}
			  	
 

ok_Hash.put("tOracleRow_1", true);
end_Hash.put("tOracleRow_1", System.currentTimeMillis());




/**
 * [tOracleRow_1 end ] stop
 */









				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tLogCatcher_1 finally ] start
	 */

	

	
	
	currentComponent="tLogCatcher_1";
	
	

 



/**
 * [tLogCatcher_1 finally ] stop
 */

	
	/**
	 * [tFileOutputDelimited_1 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";
	
	


		if(resourceMap.get("finish_tFileOutputDelimited_1") == null){ 
			
		   		synchronized (multiThreadLockWrite) {
			
				
						java.io.Writer outtFileOutputDelimited_1 = (java.io.Writer)resourceMap.get("out_tFileOutputDelimited_1");
						if(outtFileOutputDelimited_1!=null) {
							outtFileOutputDelimited_1.flush();
							outtFileOutputDelimited_1.close();
						}
					
				
				}
			
			
		}
	

 



/**
 * [tFileOutputDelimited_1 finally ] stop
 */

	
	/**
	 * [tRunJob_1 finally ] start
	 */

	

	
	
	currentComponent="tRunJob_1";
	
	
	
 



/**
 * [tRunJob_1 finally ] stop
 */

	
	/**
	 * [tOracleRow_1 finally ] start
	 */

	

	
	
	currentComponent="tOracleRow_1";
	
	

    if (resourceMap.get("statementClosed_tOracleRow_1") == null) {
            java.sql.Statement stmtToClose_tOracleRow_1 = null;
            if ((stmtToClose_tOracleRow_1 = (java.sql.Statement) resourceMap.remove("stmt_tOracleRow_1")) != null) {
                stmtToClose_tOracleRow_1.close();
            }
    }
 



/**
 * [tOracleRow_1 finally ] stop
 */









				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tLogCatcher_1_SUBPROCESS_STATE", 1);
	}
	


public void tJava_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tJava_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_2", false);
		start_Hash.put("tJava_2", System.currentTimeMillis());
		
	
	currentComponent="tJava_2";
	
	
		int tos_count_tJava_2 = 0;
		


context.FECHA_EJECUCION = TalendDate.getDate("DD/MM/YYYY");
context.ESTADO_EXEC = "Interrumpido";
 



/**
 * [tJava_2 begin ] stop
 */
	
	/**
	 * [tJava_2 main ] start
	 */

	

	
	
	currentComponent="tJava_2";
	
	

 


	tos_count_tJava_2++;

/**
 * [tJava_2 main ] stop
 */
	
	/**
	 * [tJava_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_2";
	
	

 



/**
 * [tJava_2 process_data_begin ] stop
 */
	
	/**
	 * [tJava_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_2";
	
	

 



/**
 * [tJava_2 process_data_end ] stop
 */
	
	/**
	 * [tJava_2 end ] start
	 */

	

	
	
	currentComponent="tJava_2";
	
	

 

ok_Hash.put("tJava_2", true);
end_Hash.put("tJava_2", System.currentTimeMillis());




/**
 * [tJava_2 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_2 finally ] start
	 */

	

	
	
	currentComponent="tJava_2";
	
	

 



/**
 * [tJava_2 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_2_SUBPROCESS_STATE", 1);
	}
	
    public String resuming_logs_dir_path = null;
    public String resuming_checkpoint_path = null;
    public String parent_part_launcher = null;
    private String resumeEntryMethodName = null;
    private boolean globalResumeTicket = false;

    public boolean watch = false;
    // portStats is null, it means don't execute the statistics
    public Integer portStats = null;
    public int portTraces = 4334;
    public String clientHost;
    public String defaultClientHost = "localhost";
    public String contextStr = "Default";
    public boolean isDefaultContext = true;
    public String pid = "0";
    public String rootPid = null;
    public String fatherPid = null;
    public String fatherNode = null;
    public long startTime = 0;
    public boolean isChildJob = false;
    public String log4jLevel = "";
    
    private boolean enableLogStash;

    private boolean execStat = true;

    private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
        protected java.util.Map<String, String> initialValue() {
            java.util.Map<String,String> threadRunResultMap = new java.util.HashMap<String, String>();
            threadRunResultMap.put("errorCode", null);
            threadRunResultMap.put("status", "");
            return threadRunResultMap;
        };
    };

    private SyncInt runningThreadCount =new SyncInt();

    private class SyncInt
    {
        private int count = 0;
        public synchronized void add(int i)
        {
            count +=i;
        }

        public synchronized int getCount()
        {
            return count;
        }
    }

    protected PropertiesWithType context_param = new PropertiesWithType();
    public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

    public String status= "";
    
    
    private final static java.util.Properties jobInfo = new java.util.Properties();
    private final static java.util.Map<String,String> mdcInfo = new java.util.HashMap<>();
    private final static java.util.concurrent.atomic.AtomicLong subJobPidCounter = new java.util.concurrent.atomic.AtomicLong();


    public static void main(String[] args){
        final DistribucionCI DistribucionCIClass = new DistribucionCI();

        int exitCode = DistribucionCIClass.runJobInTOS(args);

        System.exit(exitCode);
    }
	

	
	
	private void getjobInfo() {
		final String TEMPLATE_PATH = "src/main/templates/jobInfo_template.properties";
		final String BUILD_PATH = "../jobInfo.properties";
		final String path = this.getClass().getResource("").getPath();
		if(path.lastIndexOf("target") > 0) {
			final java.io.File templateFile = new java.io.File(
					path.substring(0, path.lastIndexOf("target")).concat(TEMPLATE_PATH));
			if (templateFile.exists()) {
				readJobInfo(templateFile);
				return;
			}
		}
			readJobInfo(new java.io.File(BUILD_PATH));
	}

    private void readJobInfo(java.io.File jobInfoFile){
	
        if(jobInfoFile.exists()) {
            try (java.io.InputStream is = new java.io.FileInputStream(jobInfoFile)) {
            	jobInfo.load(is);
            } catch (IOException e) {
            	 
                
            }
        }
    }


    public String[][] runJob(String[] args) {

        int exitCode = runJobInTOS(args);
        String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

        return bufferValue;
    }

    public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;
    	
        return hastBufferOutput;
    }

    public int runJobInTOS(String[] args) {
	   	// reset status
	   	status = "";
	   	
        String lastStr = "";
        for (String arg : args) {
            if (arg.equalsIgnoreCase("--context_param")) {
                lastStr = arg;
            } else if (lastStr.equals("")) {
                evalParam(arg);
            } else {
                evalParam(lastStr + " " + arg);
                lastStr = "";
            }
        }
        enableLogStash = "true".equalsIgnoreCase(System.getProperty("audit.enabled"));


		
		

        if(clientHost == null) {
            clientHost = defaultClientHost;
        }

        if(pid == null || "0".equals(pid)) {
            pid = TalendString.getAsciiRandomString(6);
        }


        if (rootPid==null) {
            rootPid = pid;
        }


        if (fatherPid==null) {
            fatherPid = pid;
        }else{
            isChildJob = true;
        }

        if (portStats != null) {
            // portStats = -1; //for testing
            if (portStats < 0 || portStats > 65535) {
                // issue:10869, the portStats is invalid, so this client socket can't open
                System.err.println("The statistics socket port " + portStats + " is invalid.");
                execStat = false;
            }
        } else {
            execStat = false;
        }
        boolean inOSGi = routines.system.BundleUtils.inOSGi();

        try {
            java.util.Dictionary<String, Object> jobProperties = null;
            if (inOSGi) {
                jobProperties = routines.system.BundleUtils.getJobProperties(jobName);
    
                if (jobProperties != null && jobProperties.get("context") != null) {
                    contextStr = (String)jobProperties.get("context");
                }
            }
            //call job/subjob with an existing context, like: --context=production. if without this parameter, there will use the default context instead.
            java.io.InputStream inContext = DistribucionCI.class.getClassLoader().getResourceAsStream("cec_distribucion_ci/distribucionci_0_1/contexts/" + contextStr + ".properties");
            if (inContext == null) {
                inContext = DistribucionCI.class.getClassLoader().getResourceAsStream("config/contexts/" + contextStr + ".properties");
            }
            if (inContext != null) {
                try {
                    //defaultProps is in order to keep the original context value
                    if(context != null && context.isEmpty()) {
    	                defaultProps.load(inContext);
    	                if (inOSGi && jobProperties != null) {
                             java.util.Enumeration<String> keys = jobProperties.keys();
                             while (keys.hasMoreElements()) {
                                 String propKey = keys.nextElement();
                                 if (defaultProps.containsKey(propKey)) {
                                     defaultProps.put(propKey, (String) jobProperties.get(propKey));
                                 }
                             }
    	                }
    	                context = new ContextProperties(defaultProps);
                    }
                } finally {
                    inContext.close();
                }
            } else if (!isDefaultContext) {
                //print info and job continue to run, for case: context_param is not empty.
                System.err.println("Could not find the context " + contextStr);
            }
            
            if(!context_param.isEmpty()) {
                context.putAll(context_param);
				//set types for params from parentJobs
				for (Object key: context_param.keySet()){
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
            }
            class ContextProcessing {
                private void processContext_0() {
                        context.setContextType("db_origen_AdditionalParams", "id_String");
                        if(context.getStringValue("db_origen_AdditionalParams") == null) {
                            context.db_origen_AdditionalParams = null;
                        } else {
                            context.db_origen_AdditionalParams=(String) context.getProperty("db_origen_AdditionalParams");
                        }
                        context.setContextType("db_origen_Login", "id_String");
                        if(context.getStringValue("db_origen_Login") == null) {
                            context.db_origen_Login = null;
                        } else {
                            context.db_origen_Login=(String) context.getProperty("db_origen_Login");
                        }
                        context.setContextType("db_origen_Password", "id_Password");
                        if(context.getStringValue("db_origen_Password") == null) {
                            context.db_origen_Password = null;
                        } else {
                            String pwd_db_origen_Password_value = context.getProperty("db_origen_Password");
                            context.db_origen_Password = null;
                            if(pwd_db_origen_Password_value!=null) {
                                if(context_param.containsKey("db_origen_Password")) {//no need to decrypt if it come from program argument or parent job runtime
                                    context.db_origen_Password = pwd_db_origen_Password_value;
                                } else if (!pwd_db_origen_Password_value.isEmpty()) {
                                    try {
                                        context.db_origen_Password = routines.system.PasswordEncryptUtil.decryptPassword(pwd_db_origen_Password_value);
                                        context.put("db_origen_Password",context.db_origen_Password);
                                    } catch (java.lang.RuntimeException e) {
                                        //do nothing
                                    }
                                }
                            }
                        }
                        context.setContextType("db_origen_Port", "id_String");
                        if(context.getStringValue("db_origen_Port") == null) {
                            context.db_origen_Port = null;
                        } else {
                            context.db_origen_Port=(String) context.getProperty("db_origen_Port");
                        }
                        context.setContextType("db_origen_Schema", "id_String");
                        if(context.getStringValue("db_origen_Schema") == null) {
                            context.db_origen_Schema = null;
                        } else {
                            context.db_origen_Schema=(String) context.getProperty("db_origen_Schema");
                        }
                        context.setContextType("db_origen_Server", "id_String");
                        if(context.getStringValue("db_origen_Server") == null) {
                            context.db_origen_Server = null;
                        } else {
                            context.db_origen_Server=(String) context.getProperty("db_origen_Server");
                        }
                        context.setContextType("db_origen_ServiceName", "id_String");
                        if(context.getStringValue("db_origen_ServiceName") == null) {
                            context.db_origen_ServiceName = null;
                        } else {
                            context.db_origen_ServiceName=(String) context.getProperty("db_origen_ServiceName");
                        }
                        context.setContextType("PathStorage", "id_String");
                        if(context.getStringValue("PathStorage") == null) {
                            context.PathStorage = null;
                        } else {
                            context.PathStorage=(String) context.getProperty("PathStorage");
                        }
                        context.setContextType("db_destino_AdditionalParams", "id_String");
                        if(context.getStringValue("db_destino_AdditionalParams") == null) {
                            context.db_destino_AdditionalParams = null;
                        } else {
                            context.db_destino_AdditionalParams=(String) context.getProperty("db_destino_AdditionalParams");
                        }
                        context.setContextType("db_destino_Login", "id_String");
                        if(context.getStringValue("db_destino_Login") == null) {
                            context.db_destino_Login = null;
                        } else {
                            context.db_destino_Login=(String) context.getProperty("db_destino_Login");
                        }
                        context.setContextType("db_destino_Password", "id_Password");
                        if(context.getStringValue("db_destino_Password") == null) {
                            context.db_destino_Password = null;
                        } else {
                            String pwd_db_destino_Password_value = context.getProperty("db_destino_Password");
                            context.db_destino_Password = null;
                            if(pwd_db_destino_Password_value!=null) {
                                if(context_param.containsKey("db_destino_Password")) {//no need to decrypt if it come from program argument or parent job runtime
                                    context.db_destino_Password = pwd_db_destino_Password_value;
                                } else if (!pwd_db_destino_Password_value.isEmpty()) {
                                    try {
                                        context.db_destino_Password = routines.system.PasswordEncryptUtil.decryptPassword(pwd_db_destino_Password_value);
                                        context.put("db_destino_Password",context.db_destino_Password);
                                    } catch (java.lang.RuntimeException e) {
                                        //do nothing
                                    }
                                }
                            }
                        }
                        context.setContextType("db_destino_Port", "id_String");
                        if(context.getStringValue("db_destino_Port") == null) {
                            context.db_destino_Port = null;
                        } else {
                            context.db_destino_Port=(String) context.getProperty("db_destino_Port");
                        }
                        context.setContextType("db_destino_Schema", "id_String");
                        if(context.getStringValue("db_destino_Schema") == null) {
                            context.db_destino_Schema = null;
                        } else {
                            context.db_destino_Schema=(String) context.getProperty("db_destino_Schema");
                        }
                        context.setContextType("db_destino_Server", "id_String");
                        if(context.getStringValue("db_destino_Server") == null) {
                            context.db_destino_Server = null;
                        } else {
                            context.db_destino_Server=(String) context.getProperty("db_destino_Server");
                        }
                        context.setContextType("db_destino_ServiceName", "id_String");
                        if(context.getStringValue("db_destino_ServiceName") == null) {
                            context.db_destino_ServiceName = null;
                        } else {
                            context.db_destino_ServiceName=(String) context.getProperty("db_destino_ServiceName");
                        }
                        context.setContextType("AnexoId", "id_Integer");
                        if(context.getStringValue("AnexoId") == null) {
                            context.AnexoId = null;
                        } else {
                            try{
                                context.AnexoId=routines.system.ParserUtils.parseTo_Integer (context.getProperty("AnexoId"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "AnexoId", e.getMessage()));
                                context.AnexoId=null;
                            }
                        }
                        context.setContextType("ConsolidadoDEP", "id_Double");
                        if(context.getStringValue("ConsolidadoDEP") == null) {
                            context.ConsolidadoDEP = null;
                        } else {
                            try{
                                context.ConsolidadoDEP=routines.system.ParserUtils.parseTo_Double (context.getProperty("ConsolidadoDEP"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "ConsolidadoDEP", e.getMessage()));
                                context.ConsolidadoDEP=null;
                            }
                        }
                        context.setContextType("ConsolidadoDEP_ESM", "id_Double");
                        if(context.getStringValue("ConsolidadoDEP_ESM") == null) {
                            context.ConsolidadoDEP_ESM = null;
                        } else {
                            try{
                                context.ConsolidadoDEP_ESM=routines.system.ParserUtils.parseTo_Double (context.getProperty("ConsolidadoDEP_ESM"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "ConsolidadoDEP_ESM", e.getMessage()));
                                context.ConsolidadoDEP_ESM=null;
                            }
                        }
                        context.setContextType("ConsolidadoGGRL", "id_Double");
                        if(context.getStringValue("ConsolidadoGGRL") == null) {
                            context.ConsolidadoGGRL = null;
                        } else {
                            try{
                                context.ConsolidadoGGRL=routines.system.ParserUtils.parseTo_Double (context.getProperty("ConsolidadoGGRL"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "ConsolidadoGGRL", e.getMessage()));
                                context.ConsolidadoGGRL=null;
                            }
                        }
                        context.setContextType("ConsolidadoGGRL_ESM", "id_Double");
                        if(context.getStringValue("ConsolidadoGGRL_ESM") == null) {
                            context.ConsolidadoGGRL_ESM = null;
                        } else {
                            try{
                                context.ConsolidadoGGRL_ESM=routines.system.ParserUtils.parseTo_Double (context.getProperty("ConsolidadoGGRL_ESM"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "ConsolidadoGGRL_ESM", e.getMessage()));
                                context.ConsolidadoGGRL_ESM=null;
                            }
                        }
                        context.setContextType("ControlDate", "id_Integer");
                        if(context.getStringValue("ControlDate") == null) {
                            context.ControlDate = null;
                        } else {
                            try{
                                context.ControlDate=routines.system.ParserUtils.parseTo_Integer (context.getProperty("ControlDate"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "ControlDate", e.getMessage()));
                                context.ControlDate=null;
                            }
                        }
                        context.setContextType("FechaToday", "id_Date");
                        if(context.getStringValue("FechaToday") == null) {
                            context.FechaToday = null;
                        } else {
                            String context_FechaToday_value = context.getProperty("FechaToday");
                            try{
                                if (context_FechaToday_value == null){
                                    context_FechaToday_value = "";
                                }
                                int context_FechaToday_pos = context_FechaToday_value.indexOf(";");
                                String context_FechaToday_pattern =  "yyyy-MM-dd HH:mm:ss";
                                if(context_FechaToday_pos > -1){
                                    context_FechaToday_pattern = context_FechaToday_value.substring(0, context_FechaToday_pos);
                                    context_FechaToday_value = context_FechaToday_value.substring(context_FechaToday_pos + 1);
                                }

                                context.FechaToday=(java.util.Date)(new java.text.SimpleDateFormat(context_FechaToday_pattern).parse(context_FechaToday_value));

                            } catch(ParseException e) {
                                try { 
                                    long context_FechaToday_longValue = Long.valueOf(context_FechaToday_value);
                                    context.FechaToday = new java.util.Date(context_FechaToday_longValue);
                                } catch (NumberFormatException cantParseToLongException) {
                                        System.err.println(String.format("Null value will be used for context parameter %s: %s", "FechaToday", "Can't parse date string: " + e.getMessage() + " and long: " + cantParseToLongException.getMessage()));
                                    context.FechaToday=null;
                                }
                            }
                        }
                        context.setContextType("Periodo", "id_Date");
                        if(context.getStringValue("Periodo") == null) {
                            context.Periodo = null;
                        } else {
                            String context_Periodo_value = context.getProperty("Periodo");
                            try{
                                if (context_Periodo_value == null){
                                    context_Periodo_value = "";
                                }
                                int context_Periodo_pos = context_Periodo_value.indexOf(";");
                                String context_Periodo_pattern =  "yyyy-MM-dd HH:mm:ss";
                                if(context_Periodo_pos > -1){
                                    context_Periodo_pattern = context_Periodo_value.substring(0, context_Periodo_pos);
                                    context_Periodo_value = context_Periodo_value.substring(context_Periodo_pos + 1);
                                }

                                context.Periodo=(java.util.Date)(new java.text.SimpleDateFormat(context_Periodo_pattern).parse(context_Periodo_value));

                            } catch(ParseException e) {
                                try { 
                                    long context_Periodo_longValue = Long.valueOf(context_Periodo_value);
                                    context.Periodo = new java.util.Date(context_Periodo_longValue);
                                } catch (NumberFormatException cantParseToLongException) {
                                        System.err.println(String.format("Null value will be used for context parameter %s: %s", "Periodo", "Can't parse date string: " + e.getMessage() + " and long: " + cantParseToLongException.getMessage()));
                                    context.Periodo=null;
                                }
                            }
                        }
                        context.setContextType("TmpPeriodo", "id_String");
                        if(context.getStringValue("TmpPeriodo") == null) {
                            context.TmpPeriodo = null;
                        } else {
                            context.TmpPeriodo=(String) context.getProperty("TmpPeriodo");
                        }
                        context.setContextType("Valor", "id_Double");
                        if(context.getStringValue("Valor") == null) {
                            context.Valor = null;
                        } else {
                            try{
                                context.Valor=routines.system.ParserUtils.parseTo_Double (context.getProperty("Valor"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "Valor", e.getMessage()));
                                context.Valor=null;
                            }
                        }
                        context.setContextType("BODEGA", "id_String");
                        if(context.getStringValue("BODEGA") == null) {
                            context.BODEGA = null;
                        } else {
                            context.BODEGA=(String) context.getProperty("BODEGA");
                        }
                        context.setContextType("ERROR", "id_String");
                        if(context.getStringValue("ERROR") == null) {
                            context.ERROR = null;
                        } else {
                            context.ERROR=(String) context.getProperty("ERROR");
                        }
                        context.setContextType("ESTADO", "id_String");
                        if(context.getStringValue("ESTADO") == null) {
                            context.ESTADO = null;
                        } else {
                            context.ESTADO=(String) context.getProperty("ESTADO");
                        }
                        context.setContextType("ESTADO_EXEC", "id_String");
                        if(context.getStringValue("ESTADO_EXEC") == null) {
                            context.ESTADO_EXEC = null;
                        } else {
                            context.ESTADO_EXEC=(String) context.getProperty("ESTADO_EXEC");
                        }
                        context.setContextType("FANTERIOR", "id_String");
                        if(context.getStringValue("FANTERIOR") == null) {
                            context.FANTERIOR = null;
                        } else {
                            context.FANTERIOR=(String) context.getProperty("FANTERIOR");
                        }
                        context.setContextType("FECHA_EJECUCION", "id_String");
                        if(context.getStringValue("FECHA_EJECUCION") == null) {
                            context.FECHA_EJECUCION = null;
                        } else {
                            context.FECHA_EJECUCION=(String) context.getProperty("FECHA_EJECUCION");
                        }
                        context.setContextType("HORA_FINAL", "id_String");
                        if(context.getStringValue("HORA_FINAL") == null) {
                            context.HORA_FINAL = null;
                        } else {
                            context.HORA_FINAL=(String) context.getProperty("HORA_FINAL");
                        }
                        context.setContextType("HORA_INICIO", "id_String");
                        if(context.getStringValue("HORA_INICIO") == null) {
                            context.HORA_INICIO = null;
                        } else {
                            context.HORA_INICIO=(String) context.getProperty("HORA_INICIO");
                        }
                        context.setContextType("LOGS_ERROR", "id_String");
                        if(context.getStringValue("LOGS_ERROR") == null) {
                            context.LOGS_ERROR = null;
                        } else {
                            context.LOGS_ERROR=(String) context.getProperty("LOGS_ERROR");
                        }
                        context.setContextType("LOGS_EXECUTION", "id_String");
                        if(context.getStringValue("LOGS_EXECUTION") == null) {
                            context.LOGS_EXECUTION = null;
                        } else {
                            context.LOGS_EXECUTION=(String) context.getProperty("LOGS_EXECUTION");
                        }
                        context.setContextType("ORIGEN", "id_String");
                        if(context.getStringValue("ORIGEN") == null) {
                            context.ORIGEN = null;
                        } else {
                            context.ORIGEN=(String) context.getProperty("ORIGEN");
                        }
                } 
                public void processAllContext() {
                        processContext_0();
                }
            }

            new ContextProcessing().processAllContext();
        } catch (java.io.IOException ie) {
            System.err.println("Could not load context "+contextStr);
            ie.printStackTrace();
        }

        // get context value from parent directly
        if (parentContextMap != null && !parentContextMap.isEmpty()) {if (parentContextMap.containsKey("db_origen_AdditionalParams")) {
                context.db_origen_AdditionalParams = (String) parentContextMap.get("db_origen_AdditionalParams");
            }if (parentContextMap.containsKey("db_origen_Login")) {
                context.db_origen_Login = (String) parentContextMap.get("db_origen_Login");
            }if (parentContextMap.containsKey("db_origen_Password")) {
                context.db_origen_Password = (java.lang.String) parentContextMap.get("db_origen_Password");
            }if (parentContextMap.containsKey("db_origen_Port")) {
                context.db_origen_Port = (String) parentContextMap.get("db_origen_Port");
            }if (parentContextMap.containsKey("db_origen_Schema")) {
                context.db_origen_Schema = (String) parentContextMap.get("db_origen_Schema");
            }if (parentContextMap.containsKey("db_origen_Server")) {
                context.db_origen_Server = (String) parentContextMap.get("db_origen_Server");
            }if (parentContextMap.containsKey("db_origen_ServiceName")) {
                context.db_origen_ServiceName = (String) parentContextMap.get("db_origen_ServiceName");
            }if (parentContextMap.containsKey("PathStorage")) {
                context.PathStorage = (String) parentContextMap.get("PathStorage");
            }if (parentContextMap.containsKey("db_destino_AdditionalParams")) {
                context.db_destino_AdditionalParams = (String) parentContextMap.get("db_destino_AdditionalParams");
            }if (parentContextMap.containsKey("db_destino_Login")) {
                context.db_destino_Login = (String) parentContextMap.get("db_destino_Login");
            }if (parentContextMap.containsKey("db_destino_Password")) {
                context.db_destino_Password = (java.lang.String) parentContextMap.get("db_destino_Password");
            }if (parentContextMap.containsKey("db_destino_Port")) {
                context.db_destino_Port = (String) parentContextMap.get("db_destino_Port");
            }if (parentContextMap.containsKey("db_destino_Schema")) {
                context.db_destino_Schema = (String) parentContextMap.get("db_destino_Schema");
            }if (parentContextMap.containsKey("db_destino_Server")) {
                context.db_destino_Server = (String) parentContextMap.get("db_destino_Server");
            }if (parentContextMap.containsKey("db_destino_ServiceName")) {
                context.db_destino_ServiceName = (String) parentContextMap.get("db_destino_ServiceName");
            }if (parentContextMap.containsKey("AnexoId")) {
                context.AnexoId = (Integer) parentContextMap.get("AnexoId");
            }if (parentContextMap.containsKey("ConsolidadoDEP")) {
                context.ConsolidadoDEP = (Double) parentContextMap.get("ConsolidadoDEP");
            }if (parentContextMap.containsKey("ConsolidadoDEP_ESM")) {
                context.ConsolidadoDEP_ESM = (Double) parentContextMap.get("ConsolidadoDEP_ESM");
            }if (parentContextMap.containsKey("ConsolidadoGGRL")) {
                context.ConsolidadoGGRL = (Double) parentContextMap.get("ConsolidadoGGRL");
            }if (parentContextMap.containsKey("ConsolidadoGGRL_ESM")) {
                context.ConsolidadoGGRL_ESM = (Double) parentContextMap.get("ConsolidadoGGRL_ESM");
            }if (parentContextMap.containsKey("ControlDate")) {
                context.ControlDate = (Integer) parentContextMap.get("ControlDate");
            }if (parentContextMap.containsKey("FechaToday")) {
                context.FechaToday = (java.util.Date) parentContextMap.get("FechaToday");
            }if (parentContextMap.containsKey("Periodo")) {
                context.Periodo = (java.util.Date) parentContextMap.get("Periodo");
            }if (parentContextMap.containsKey("TmpPeriodo")) {
                context.TmpPeriodo = (String) parentContextMap.get("TmpPeriodo");
            }if (parentContextMap.containsKey("Valor")) {
                context.Valor = (Double) parentContextMap.get("Valor");
            }if (parentContextMap.containsKey("BODEGA")) {
                context.BODEGA = (String) parentContextMap.get("BODEGA");
            }if (parentContextMap.containsKey("ERROR")) {
                context.ERROR = (String) parentContextMap.get("ERROR");
            }if (parentContextMap.containsKey("ESTADO")) {
                context.ESTADO = (String) parentContextMap.get("ESTADO");
            }if (parentContextMap.containsKey("ESTADO_EXEC")) {
                context.ESTADO_EXEC = (String) parentContextMap.get("ESTADO_EXEC");
            }if (parentContextMap.containsKey("FANTERIOR")) {
                context.FANTERIOR = (String) parentContextMap.get("FANTERIOR");
            }if (parentContextMap.containsKey("FECHA_EJECUCION")) {
                context.FECHA_EJECUCION = (String) parentContextMap.get("FECHA_EJECUCION");
            }if (parentContextMap.containsKey("HORA_FINAL")) {
                context.HORA_FINAL = (String) parentContextMap.get("HORA_FINAL");
            }if (parentContextMap.containsKey("HORA_INICIO")) {
                context.HORA_INICIO = (String) parentContextMap.get("HORA_INICIO");
            }if (parentContextMap.containsKey("LOGS_ERROR")) {
                context.LOGS_ERROR = (String) parentContextMap.get("LOGS_ERROR");
            }if (parentContextMap.containsKey("LOGS_EXECUTION")) {
                context.LOGS_EXECUTION = (String) parentContextMap.get("LOGS_EXECUTION");
            }if (parentContextMap.containsKey("ORIGEN")) {
                context.ORIGEN = (String) parentContextMap.get("ORIGEN");
            }
        }

        //Resume: init the resumeUtil
        resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
        resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
        resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
			parametersToEncrypt.add("db_origen_Password");
			parametersToEncrypt.add("db_destino_Password");
        //Resume: jobStart
        resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","","","",resumeUtil.convertToJsonText(context,ContextProperties.class,parametersToEncrypt));


if(execStat) {
    try {
        runStat.openSocket(!isChildJob);
        runStat.setAllPID(rootPid, fatherPid, pid, jobName);
        runStat.startThreadStat(clientHost, portStats);
        runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
    } catch (java.io.IOException ioException) {
        ioException.printStackTrace();
    }
}



	
	    java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
	    globalMap.put("concurrentHashMap", concurrentHashMap);
	

    long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
    long endUsedMemory = 0;
    long end = 0;

    startTime = System.currentTimeMillis();


this.globalResumeTicket = true;//to run tPreJob

try {
errorCode = null;tPrejob_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tPrejob_1) {
globalMap.put("tPrejob_1_SUBPROCESS_STATE", -1);

e_tPrejob_1.printStackTrace();

}




this.globalResumeTicket = false;//to run others jobs
final Thread launchingThread = Thread.currentThread();
        runningThreadCount.add(1);
        new Thread(){
            public void run() {

                java.util.Map threadRunResultMap = new java.util.HashMap();
                threadRunResultMap.put("errorCode", null);
                threadRunResultMap.put("status", "");
                threadLocal.set(threadRunResultMap);

                try {
((java.util.Map) threadLocal.get()).put("errorCode", null);tJava_4Process(globalMap);
if ( !"failure".equals(((java.util.Map)threadLocal.get()).get("status")) ) {
((java.util.Map) threadLocal.get()).put("status", "end");
}
}catch (TalendException e_tJava_4) {
globalMap.put("tJava_4_SUBPROCESS_STATE", -1);

e_tJava_4.printStackTrace();

}catch (java.lang.Error e_tJava_4) {
globalMap.put("tJava_4_SUBPROCESS_STATE", -1);
((java.util.Map) threadLocal.get()).put("status", "failure");throw e_tJava_4;

}
                finally {
                    Integer localErrorCode = (Integer)(((java.util.Map)threadLocal.get()).get("errorCode"));
                    String localStatus = (String)(((java.util.Map)threadLocal.get()).get("status"));
                    if (localErrorCode != null) {
                        if (errorCode == null || localErrorCode.compareTo(errorCode) > 0) {
                           errorCode = localErrorCode;
                        }
                    }
                    if (!status.equals("failure")){
                        status = localStatus;
                    }

                    if ("true".equals(((java.util.Map) threadLocal.get()).get("JobInterrupted"))) {
                        launchingThread.interrupt();
                    }

                    runningThreadCount.add(-1);
                }
            }
        }.start();

    boolean interrupted = false;
    while (runningThreadCount.getCount() > 0) {
        try {
            Thread.sleep(10);
        } catch (java.lang.InterruptedException e) {
            interrupted = true;
        } catch (java.lang.Exception e) {
            e.printStackTrace();
        }
    }

    if (interrupted) {
        Thread.currentThread().interrupt();
    }



this.globalResumeTicket = true;//to run tPostJob

try {
errorCode = null;tPostjob_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tPostjob_1) {
globalMap.put("tPostjob_1_SUBPROCESS_STATE", -1);

e_tPostjob_1.printStackTrace();

}



        end = System.currentTimeMillis();

        if (watch) {
            System.out.println((end-startTime)+" milliseconds");
        }

        endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
        if (false) {
            System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : DistribucionCI");
        }



if (execStat) {
    runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
    runStat.stopThreadStat();
}
    int returnCode = 0;

        Integer localErrorCode = (Integer)(((java.util.Map)threadLocal.get()).get("errorCode"));
        String localStatus = (String)(((java.util.Map)threadLocal.get()).get("status"));
        if (localErrorCode != null) {
            if (errorCode == null || localErrorCode.compareTo(errorCode) > 0) {
                   errorCode = localErrorCode;
            }
        }
        if (localStatus != null && !status.equals("failure")){
            status = localStatus;
        }

    if(errorCode == null) {
         returnCode = status != null && status.equals("failure") ? 1 : 0;
    } else {
         returnCode = errorCode.intValue();
    }
    resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","" + returnCode,"","","");
    resumeUtil.flush();


    return returnCode;

  }

    // only for OSGi env
    public void destroy() {
    closeSqlDbConnections();


    }



    private void closeSqlDbConnections() {
        try {
            Object obj_conn;
            obj_conn = globalMap.remove("conn_tOracleConnection_1");
            if (null != obj_conn) {
                ((java.sql.Connection) obj_conn).close();
            }
        } catch (java.lang.Exception e) {
        }
    }











    private java.util.Map<String, Object> getSharedConnections4REST() {
        java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();
            connections.put("conn_tOracleConnection_1", globalMap.get("conn_tOracleConnection_1"));






        return connections;
    }

    private void evalParam(String arg) {
        if (arg.startsWith("--resuming_logs_dir_path")) {
            resuming_logs_dir_path = arg.substring(25);
        } else if (arg.startsWith("--resuming_checkpoint_path")) {
            resuming_checkpoint_path = arg.substring(27);
        } else if (arg.startsWith("--parent_part_launcher")) {
            parent_part_launcher = arg.substring(23);
        } else if (arg.startsWith("--watch")) {
            watch = true;
        } else if (arg.startsWith("--stat_port=")) {
            String portStatsStr = arg.substring(12);
            if (portStatsStr != null && !portStatsStr.equals("null")) {
                portStats = Integer.parseInt(portStatsStr);
            }
        } else if (arg.startsWith("--trace_port=")) {
            portTraces = Integer.parseInt(arg.substring(13));
        } else if (arg.startsWith("--client_host=")) {
            clientHost = arg.substring(14);
        } else if (arg.startsWith("--context=")) {
            contextStr = arg.substring(10);
            isDefaultContext = false;
        } else if (arg.startsWith("--father_pid=")) {
            fatherPid = arg.substring(13);
        } else if (arg.startsWith("--root_pid=")) {
            rootPid = arg.substring(11);
        } else if (arg.startsWith("--father_node=")) {
            fatherNode = arg.substring(14);
        } else if (arg.startsWith("--pid=")) {
            pid = arg.substring(6);
        } else if (arg.startsWith("--context_type")) {
            String keyValue = arg.substring(15);
			int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.setContextType(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }

            }

		} else if (arg.startsWith("--context_param")) {
            String keyValue = arg.substring(16);
            int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }
            }
        } else if (arg.startsWith("--context_file")) {
        	String keyValue = arg.substring(15);
        	String filePath = new String(java.util.Base64.getDecoder().decode(keyValue));
        	java.nio.file.Path contextFile = java.nio.file.Paths.get(filePath);
            try (java.io.BufferedReader reader = java.nio.file.Files.newBufferedReader(contextFile)) {
                String line;
                while ((line = reader.readLine()) != null) {
                    int index = -1;
                    if ( (index = line.indexOf('=')) > -1) {
							if (line.startsWith("--context_param")) {
								if ("id_Password".equals(context_param.getContextType(line.substring(16, index)))) {
									context_param.put(line.substring(16, index), routines.system.PasswordEncryptUtil.decryptPassword(
											line.substring(index + 1)));
								} else {
									context_param.put(line.substring(16, index), line.substring(index + 1));
								}
							}else {//--context_type
								context_param.setContextType(line.substring(15, index), line.substring(index + 1));
							}
                    }
                }
            } catch (java.io.IOException e) {
            	System.err.println("Could not load the context file: " + filePath);
                e.printStackTrace();
            }
        } else if (arg.startsWith("--log4jLevel=")) {
            log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--audit.enabled") && arg.contains("=")) {//for trunjob call
		    final int equal = arg.indexOf('=');
			final String key = arg.substring("--".length(), equal);
			System.setProperty(key, arg.substring(equal + 1));
		}
    }
    
    private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

    private final String[][] escapeChars = {
        {"\\\\","\\"},{"\\n","\n"},{"\\'","\'"},{"\\r","\r"},
        {"\\f","\f"},{"\\b","\b"},{"\\t","\t"}
        };
    private String replaceEscapeChars (String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0],currIndex);
				if (index>=0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0], strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
    }

    public Integer getErrorCode() {
        return errorCode;
    }


    public String getStatus() {
        return status;
    }

    ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 *     972270 characters generated by Talend Open Studio for ESB 
 *     on the November 1, 2024, 10:50:24 AM COT
 ************************************************************************************************/