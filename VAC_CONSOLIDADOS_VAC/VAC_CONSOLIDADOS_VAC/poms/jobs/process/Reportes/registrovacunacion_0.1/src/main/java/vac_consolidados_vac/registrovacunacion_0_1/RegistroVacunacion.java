// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for ESB
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


package vac_consolidados_vac.registrovacunacion_0_1;

import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.Relational;
import routines.GenerarUUID;
import routines.Mathematical;
import routines.Numeric;
import routines.TalendStringUtil;
import routines.RegistroVacunacionPoi;
import routines.TalendString;
import routines.Utils;
import routines.StringHandling;
import routines.TalendDate;
import routines.StylesRegistroVacunacion;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;
 




	//the import part of tJavaRow_1
	//import java.util.List;

	//the import part of tJava_1
	//import java.util.List;

	//the import part of tJava_3
	import java.util.ArrayList;
import java.io.File;

	//the import part of tJavaRow_4
	import java.util.List;


	//the import part of tJava_2
	import java.util.List;


	//the import part of tJavaRow_5
	//import java.util.List;

	//the import part of tJava_6
	//import java.util.List;

	//the import part of tJavaRow_7
	//import java.util.List;

	//the import part of tJava_4
	//import java.util.List;


@SuppressWarnings("unused")

/**
 * Job: RegistroVacunacion Purpose: Registro de vacunación<br>
 * Description: Utilizado para obtener el registro de vacunación diario y por periodos <br>
 * @author jorgejlhc@gmail.com
 * @version 8.8.8.20240722_1936-SNAPSHOT
 * @status 
 */
public class RegistroVacunacion implements TalendJob {

protected static void logIgnoredError(String message, Throwable cause) {
       System.err.println(message);
       if (cause != null) {
               cause.printStackTrace();
       }

}


	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}
	
	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	
	private final static String utf8Charset = "UTF-8";
	

	//contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String,String> propertyTypes = new java.util.HashMap<>();
		
		public PropertiesWithType(java.util.Properties properties){
			super(properties);
		}
		public PropertiesWithType(){
			super();
		}
		
		public void setContextType(String key, String type) {
			propertyTypes.put(key,type);
		}
	
		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}	
	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();
		

	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties){
			super(properties);
		}
		public ContextProperties(){
			super();
		}

		public void synchronizeContext(){
			
			if(DAPLICADAS_LIST != null){
				
					this.setProperty("DAPLICADAS_LIST", DAPLICADAS_LIST.toString());
				
			}
			
			if(CARPETA_SALIDA != null){
				
					this.setProperty("CARPETA_SALIDA", CARPETA_SALIDA.toString());
				
			}
			
			if(NOMBRE_ARCHIVO != null){
				
					this.setProperty("NOMBRE_ARCHIVO", NOMBRE_ARCHIVO.toString());
				
			}
			
			if(NOMBRE_ZIP != null){
				
					this.setProperty("NOMBRE_ZIP", NOMBRE_ZIP.toString());
				
			}
			
			if(ES_WEB_SERVICE != null){
				
					this.setProperty("ES_WEB_SERVICE", ES_WEB_SERVICE.toString());
				
			}
			
			if(CONTADOR != null){
				
					this.setProperty("CONTADOR", CONTADOR.toString());
				
			}
			
			if(db_destino_AdditionalParams != null){
				
					this.setProperty("db_destino_AdditionalParams", db_destino_AdditionalParams.toString());
				
			}
			
			if(db_destino_Login != null){
				
					this.setProperty("db_destino_Login", db_destino_Login.toString());
				
			}
			
			if(db_destino_Password != null){
				
					this.setProperty("db_destino_Password", db_destino_Password.toString());
				
			}
			
			if(db_destino_Port != null){
				
					this.setProperty("db_destino_Port", db_destino_Port.toString());
				
			}
			
			if(db_destino_Schema != null){
				
					this.setProperty("db_destino_Schema", db_destino_Schema.toString());
				
			}
			
			if(db_destino_Server != null){
				
					this.setProperty("db_destino_Server", db_destino_Server.toString());
				
			}
			
			if(db_destino_ServiceName != null){
				
					this.setProperty("db_destino_ServiceName", db_destino_ServiceName.toString());
				
			}
			
			if(db_origen_AdditionalParams != null){
				
					this.setProperty("db_origen_AdditionalParams", db_origen_AdditionalParams.toString());
				
			}
			
			if(db_origen_Login != null){
				
					this.setProperty("db_origen_Login", db_origen_Login.toString());
				
			}
			
			if(db_origen_Password != null){
				
					this.setProperty("db_origen_Password", db_origen_Password.toString());
				
			}
			
			if(db_origen_Port != null){
				
					this.setProperty("db_origen_Port", db_origen_Port.toString());
				
			}
			
			if(db_origen_Schema != null){
				
					this.setProperty("db_origen_Schema", db_origen_Schema.toString());
				
			}
			
			if(db_origen_Server != null){
				
					this.setProperty("db_origen_Server", db_origen_Server.toString());
				
			}
			
			if(db_origen_ServiceName != null){
				
					this.setProperty("db_origen_ServiceName", db_origen_ServiceName.toString());
				
			}
			
			if(ACTUALIZACION != null){
				
					this.setProperty("ACTUALIZACION", ACTUALIZACION.toString());
				
			}
			
			if(FECHA_FINAL != null){
				
					this.setProperty("FECHA_FINAL", FECHA_FINAL.toString());
				
			}
			
			if(FECHA_INICIAL != null){
				
					this.setProperty("FECHA_INICIAL", FECHA_INICIAL.toString());
				
			}
			
			if(FUERZA_ID != null){
				
					this.setProperty("FUERZA_ID", FUERZA_ID.toString());
				
			}
			
			if(FUERZA_NOMBRE != null){
				
					this.setProperty("FUERZA_NOMBRE", FUERZA_NOMBRE.toString());
				
			}
			
			if(TESQUEMA != null){
				
					this.setProperty("TESQUEMA", TESQUEMA.toString());
				
			}
			
			if(UORG_ID != null){
				
					this.setProperty("UORG_ID", UORG_ID.toString());
				
			}
			
			if(UORG_NOMBRE != null){
				
					this.setProperty("UORG_NOMBRE", UORG_NOMBRE.toString());
				
			}
			
			if(BODEGA != null){
				
					this.setProperty("BODEGA", BODEGA.toString());
				
			}
			
			if(ESTADO_EXEC != null){
				
					this.setProperty("ESTADO_EXEC", ESTADO_EXEC.toString());
				
			}
			
			if(FECHA_EJECUCION != null){
				
					this.setProperty("FECHA_EJECUCION", FECHA_EJECUCION.toString());
				
			}
			
			if(HORA_FINAL != null){
				
					this.setProperty("HORA_FINAL", HORA_FINAL.toString());
				
			}
			
			if(HORA_INICIO != null){
				
					this.setProperty("HORA_INICIO", HORA_INICIO.toString());
				
			}
			
			if(JOB != null){
				
					this.setProperty("JOB", JOB.toString());
				
			}
			
			if(LOGS_ERROR != null){
				
					this.setProperty("LOGS_ERROR", LOGS_ERROR.toString());
				
			}
			
			if(LOGS_EXECUTION != null){
				
					this.setProperty("LOGS_EXECUTION", LOGS_EXECUTION.toString());
				
			}
			
			if(ORIGEN != null){
				
					this.setProperty("ORIGEN", ORIGEN.toString());
				
			}
			
			if(STORAGE != null){
				
					this.setProperty("STORAGE", STORAGE.toString());
				
			}
			
			if(MODULO != null){
				
					this.setProperty("MODULO", MODULO.toString());
				
			}
			
			if(SARCHIVO_ID != null){
				
					this.setProperty("SARCHIVO_ID", SARCHIVO_ID.toString());
				
			}
			
			if(SIGLA != null){
				
					this.setProperty("SIGLA", SIGLA.toString());
				
			}
			
			if(USUARIO_ID != null){
				
					this.setProperty("USUARIO_ID", USUARIO_ID.toString());
				
			}
			
			if(USUARIO_NOMBRE != null){
				
					this.setProperty("USUARIO_NOMBRE", USUARIO_NOMBRE.toString());
				
			}
			
			if(TDOSIS_ID != null){
				
					this.setProperty("TDOSIS_ID", TDOSIS_ID.toString());
				
			}
			
			if(PERIODO_INICIAL != null){
				
					this.setProperty("PERIODO_INICIAL", PERIODO_INICIAL.toString());
				
			}
			
			if(DPTO_NOMBRE != null){
				
					this.setProperty("DPTO_NOMBRE", DPTO_NOMBRE.toString());
				
			}
			
			if(MCPIO_NOMBRE != null){
				
					this.setProperty("MCPIO_NOMBRE", MCPIO_NOMBRE.toString());
				
			}
			
			if(BIOLOGICO_NOMBRE != null){
				
					this.setProperty("BIOLOGICO_NOMBRE", BIOLOGICO_NOMBRE.toString());
				
			}
			
			if(MCPIO_COD != null){
				
					this.setProperty("MCPIO_COD", MCPIO_COD.toString());
				
			}
			
			if(TDOSIS_NOMBRE != null){
				
					this.setProperty("TDOSIS_NOMBRE", TDOSIS_NOMBRE.toString());
				
			}
			
			if(PERIODO != null){
				
					this.setProperty("PERIODO", PERIODO.toString());
				
			}
			
			if(BIOLOGICO_ID != null){
				
					this.setProperty("BIOLOGICO_ID", BIOLOGICO_ID.toString());
				
			}
			
			if(PERIODO_FINAL != null){
				
					this.setProperty("PERIODO_FINAL", PERIODO_FINAL.toString());
				
			}
			
			if(DPTO_COD != null){
				
					this.setProperty("DPTO_COD", DPTO_COD.toString());
				
			}
			
			if(UORG_SOLICITUD_NOMBRE != null){
				
					this.setProperty("UORG_SOLICITUD_NOMBRE", UORG_SOLICITUD_NOMBRE.toString());
				
			}
			
			if(FILTROS != null){
				
					this.setProperty("FILTROS", FILTROS.toString());
				
			}
			
			if(UORG_SOLICITUD_ID != null){
				
					this.setProperty("UORG_SOLICITUD_ID", UORG_SOLICITUD_ID.toString());
				
			}
			
			if(TARCHIVO != null){
				
					this.setProperty("TARCHIVO", TARCHIVO.toString());
				
			}
			
		}
		
		//if the stored or passed value is "<TALEND_NULL>" string, it mean null
		public String getStringValue(String key) {
			String origin_value = this.getProperty(key);
			if(NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY.equals(origin_value)) {
				return null;
			}
			return origin_value;
		}

public String DAPLICADAS_LIST;
public String getDAPLICADAS_LIST(){
	return this.DAPLICADAS_LIST;
}
public String CARPETA_SALIDA;
public String getCARPETA_SALIDA(){
	return this.CARPETA_SALIDA;
}
public String NOMBRE_ARCHIVO;
public String getNOMBRE_ARCHIVO(){
	return this.NOMBRE_ARCHIVO;
}
public String NOMBRE_ZIP;
public String getNOMBRE_ZIP(){
	return this.NOMBRE_ZIP;
}
public Boolean ES_WEB_SERVICE;
public Boolean getES_WEB_SERVICE(){
	return this.ES_WEB_SERVICE;
}
public Integer CONTADOR;
public Integer getCONTADOR(){
	return this.CONTADOR;
}
public String db_destino_AdditionalParams;
public String getDb_destino_AdditionalParams(){
	return this.db_destino_AdditionalParams;
}
public String db_destino_Login;
public String getDb_destino_Login(){
	return this.db_destino_Login;
}
public java.lang.String db_destino_Password;
public java.lang.String getDb_destino_Password(){
	return this.db_destino_Password;
}
public String db_destino_Port;
public String getDb_destino_Port(){
	return this.db_destino_Port;
}
public String db_destino_Schema;
public String getDb_destino_Schema(){
	return this.db_destino_Schema;
}
public String db_destino_Server;
public String getDb_destino_Server(){
	return this.db_destino_Server;
}
public String db_destino_ServiceName;
public String getDb_destino_ServiceName(){
	return this.db_destino_ServiceName;
}
public String db_origen_AdditionalParams;
public String getDb_origen_AdditionalParams(){
	return this.db_origen_AdditionalParams;
}
public String db_origen_Login;
public String getDb_origen_Login(){
	return this.db_origen_Login;
}
public java.lang.String db_origen_Password;
public java.lang.String getDb_origen_Password(){
	return this.db_origen_Password;
}
public String db_origen_Port;
public String getDb_origen_Port(){
	return this.db_origen_Port;
}
public String db_origen_Schema;
public String getDb_origen_Schema(){
	return this.db_origen_Schema;
}
public String db_origen_Server;
public String getDb_origen_Server(){
	return this.db_origen_Server;
}
public String db_origen_ServiceName;
public String getDb_origen_ServiceName(){
	return this.db_origen_ServiceName;
}
public String ACTUALIZACION;
public String getACTUALIZACION(){
	return this.ACTUALIZACION;
}
public String FECHA_FINAL;
public String getFECHA_FINAL(){
	return this.FECHA_FINAL;
}
public String FECHA_INICIAL;
public String getFECHA_INICIAL(){
	return this.FECHA_INICIAL;
}
public String FUERZA_ID;
public String getFUERZA_ID(){
	return this.FUERZA_ID;
}
public String FUERZA_NOMBRE;
public String getFUERZA_NOMBRE(){
	return this.FUERZA_NOMBRE;
}
public String TESQUEMA;
public String getTESQUEMA(){
	return this.TESQUEMA;
}
public String UORG_ID;
public String getUORG_ID(){
	return this.UORG_ID;
}
public String UORG_NOMBRE;
public String getUORG_NOMBRE(){
	return this.UORG_NOMBRE;
}
public String BODEGA;
public String getBODEGA(){
	return this.BODEGA;
}
public String ESTADO_EXEC;
public String getESTADO_EXEC(){
	return this.ESTADO_EXEC;
}
public String FECHA_EJECUCION;
public String getFECHA_EJECUCION(){
	return this.FECHA_EJECUCION;
}
public String HORA_FINAL;
public String getHORA_FINAL(){
	return this.HORA_FINAL;
}
public String HORA_INICIO;
public String getHORA_INICIO(){
	return this.HORA_INICIO;
}
public String JOB;
public String getJOB(){
	return this.JOB;
}
public String LOGS_ERROR;
public String getLOGS_ERROR(){
	return this.LOGS_ERROR;
}
public String LOGS_EXECUTION;
public String getLOGS_EXECUTION(){
	return this.LOGS_EXECUTION;
}
public String ORIGEN;
public String getORIGEN(){
	return this.ORIGEN;
}
public String STORAGE;
public String getSTORAGE(){
	return this.STORAGE;
}
public String MODULO;
public String getMODULO(){
	return this.MODULO;
}
public BigDecimal SARCHIVO_ID;
public BigDecimal getSARCHIVO_ID(){
	return this.SARCHIVO_ID;
}
public String SIGLA;
public String getSIGLA(){
	return this.SIGLA;
}
public BigDecimal USUARIO_ID;
public BigDecimal getUSUARIO_ID(){
	return this.USUARIO_ID;
}
public String USUARIO_NOMBRE;
public String getUSUARIO_NOMBRE(){
	return this.USUARIO_NOMBRE;
}
public String TDOSIS_ID;
public String getTDOSIS_ID(){
	return this.TDOSIS_ID;
}
public String PERIODO_INICIAL;
public String getPERIODO_INICIAL(){
	return this.PERIODO_INICIAL;
}
public String DPTO_NOMBRE;
public String getDPTO_NOMBRE(){
	return this.DPTO_NOMBRE;
}
public String MCPIO_NOMBRE;
public String getMCPIO_NOMBRE(){
	return this.MCPIO_NOMBRE;
}
public String BIOLOGICO_NOMBRE;
public String getBIOLOGICO_NOMBRE(){
	return this.BIOLOGICO_NOMBRE;
}
public String MCPIO_COD;
public String getMCPIO_COD(){
	return this.MCPIO_COD;
}
public String TDOSIS_NOMBRE;
public String getTDOSIS_NOMBRE(){
	return this.TDOSIS_NOMBRE;
}
public String PERIODO;
public String getPERIODO(){
	return this.PERIODO;
}
public String BIOLOGICO_ID;
public String getBIOLOGICO_ID(){
	return this.BIOLOGICO_ID;
}
public String PERIODO_FINAL;
public String getPERIODO_FINAL(){
	return this.PERIODO_FINAL;
}
public String DPTO_COD;
public String getDPTO_COD(){
	return this.DPTO_COD;
}
public String UORG_SOLICITUD_NOMBRE;
public String getUORG_SOLICITUD_NOMBRE(){
	return this.UORG_SOLICITUD_NOMBRE;
}
public String FILTROS;
public String getFILTROS(){
	return this.FILTROS;
}
public BigDecimal UORG_SOLICITUD_ID;
public BigDecimal getUORG_SOLICITUD_ID(){
	return this.UORG_SOLICITUD_ID;
}
public String TARCHIVO;
public String getTARCHIVO(){
	return this.TARCHIVO;
}
	}
			
	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.
	public ContextProperties getContext() {
		return this.context;
	}
	private final String jobVersion = "0.1";
	private final String jobName = "RegistroVacunacion";
	private final String projectName = "VAC_CONSOLIDADOS_VAC";
	public Integer errorCode = null;
	private String currentComponent = "";
	
	private String cLabel =  null;
	
		private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
        private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();
	
		private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
		public  final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();
	

private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";
	
	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(), new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}
	
	public void setDataSourceReferences(List serviceReferences) throws Exception{
		
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		java.util.Map<String, javax.sql.DataSource> dataSources = new java.util.HashMap<String, javax.sql.DataSource>();
		
		for (java.util.Map.Entry<String, javax.sql.DataSource> entry : BundleUtils.getServices(serviceReferences,  javax.sql.DataSource.class).entrySet()) {
                    dataSources.put(entry.getKey(), entry.getValue());
                    talendDataSources.put(entry.getKey(), new routines.system.TalendDataSource(entry.getValue()));
		}

		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}

	LogCatcherUtils tLogCatcher_1 = new LogCatcherUtils();

private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

public String getExceptionStackTrace() {
	if ("failure".equals(this.getStatus())) {
		errorMessagePS.flush();
		return baos.toString();
	}
	return null;
}

private Exception exception;

public Exception getException() {
	if ("failure".equals(this.getStatus())) {
		return this.exception;
	}
	return null;
}

private class TalendException extends Exception {

	private static final long serialVersionUID = 1L;

	private java.util.Map<String, Object> globalMap = null;
	private Exception e = null;
	
	private String currentComponent = null;
	private String cLabel =  null;
	
	private String virtualComponentName = null;
	
	public void setVirtualComponentName (String virtualComponentName){
		this.virtualComponentName = virtualComponentName;
	}

	private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
		this.currentComponent= errorComponent;
		this.globalMap = globalMap;
		this.e = e;
	}
	
	private TalendException(Exception e, String errorComponent, String errorComponentLabel, final java.util.Map<String, Object> globalMap) {
		this(e, errorComponent, globalMap);
		this.cLabel = errorComponentLabel;
	}

	public Exception getException() {
		return this.e;
	}

	public String getCurrentComponent() {
		return this.currentComponent;
	}

	
    public String getExceptionCauseMessage(Exception e){
        Throwable cause = e;
        String message = null;
        int i = 10;
        while (null != cause && 0 < i--) {
            message = cause.getMessage();
            if (null == message) {
                cause = cause.getCause();
            } else {
                break;          
            }
        }
        if (null == message) {
            message = e.getClass().getName();
        }   
        return message;
    }

	@Override
	public void printStackTrace() {
		if (!(e instanceof TalendException || e instanceof TDieException)) {
			if(virtualComponentName!=null && currentComponent.indexOf(virtualComponentName+"_")==0){
				globalMap.put(virtualComponentName+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			}
			globalMap.put(currentComponent+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
		}
		if (!(e instanceof TDieException)) {
			if(e instanceof TalendException){
				e.printStackTrace();
			} else {
				e.printStackTrace();
				e.printStackTrace(errorMessagePS);
				RegistroVacunacion.this.exception = e;
			}
		}
		if (!(e instanceof TalendException)) {
		try {
			for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
				if (m.getName().compareTo(currentComponent + "_error") == 0) {
					m.invoke(RegistroVacunacion.this, new Object[] { e , currentComponent, globalMap});
					break;
				}
			}

			if(!(e instanceof TDieException)){
				tLogCatcher_1.addMessage("Java Exception", currentComponent, 6, e.getClass().getName() + ":" + e.getMessage(), 1);
				tLogCatcher_1Process(globalMap);
			}
			} catch (TalendException e) {
				// do nothing
			
		} catch (Exception e) {
			this.e.printStackTrace();
		}
		}
	}
}

			public void tPrejob_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPrejob_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputXML_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputXML_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaRow_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputXML_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleConnection_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleConnection_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogCatcher_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tLogCatcher_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputDelimited_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tLogCatcher_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tLogCatcher_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRunJob_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tLogCatcher_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostjob_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostjob_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tJava_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleClose_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleClose_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFixedFlowInput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFixedFlowInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputDelimited_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFixedFlowInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tJava_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaRow_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashOutput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tJava_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaRow_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashOutput_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tJava_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHashInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tNormalize_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHashInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHashInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHashInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaRow_7_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHashInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tJava_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileArchive_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileArchive_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileDelete_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileDelete_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFixedFlowInput_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFixedFlowInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tBufferOutput_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFixedFlowInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFixedFlowInput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFixedFlowInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tBufferOutput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFixedFlowInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHashInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHashInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHashInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row9_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHashInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPrejob_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileInputXML_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleConnection_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tLogCatcher_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tPostjob_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleClose_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFixedFlowInput_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_3_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleInput_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleInput_5_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_6_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tHashInput_3_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_4_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileArchive_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileDelete_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFixedFlowInput_3_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFixedFlowInput_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
	









public void tPrejob_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPrejob_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tPrejob_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tPrejob_1", false);
		start_Hash.put("tPrejob_1", System.currentTimeMillis());
		
	
	currentComponent="tPrejob_1";
	
	
		int tos_count_tPrejob_1 = 0;
		

 



/**
 * [tPrejob_1 begin ] stop
 */
	
	/**
	 * [tPrejob_1 main ] start
	 */

	

	
	
	currentComponent="tPrejob_1";
	
	

 


	tos_count_tPrejob_1++;

/**
 * [tPrejob_1 main ] stop
 */
	
	/**
	 * [tPrejob_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tPrejob_1";
	
	

 



/**
 * [tPrejob_1 process_data_begin ] stop
 */
	
	/**
	 * [tPrejob_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tPrejob_1";
	
	

 



/**
 * [tPrejob_1 process_data_end ] stop
 */
	
	/**
	 * [tPrejob_1 end ] start
	 */

	

	
	
	currentComponent="tPrejob_1";
	
	

 

ok_Hash.put("tPrejob_1", true);
end_Hash.put("tPrejob_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk1", 0, "ok");
				}
				tFileInputXML_1Process(globalMap);



/**
 * [tPrejob_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPrejob_1 finally ] start
	 */

	

	
	
	currentComponent="tPrejob_1";
	
	

 



/**
 * [tPrejob_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPrejob_1_SUBPROCESS_STATE", 1);
	}
	


public static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
    final static byte[] commonByteArrayLock_VAC_CONSOLIDADOS_VAC_RegistroVacunacion = new byte[0];
    static byte[] commonByteArray_VAC_CONSOLIDADOS_VAC_RegistroVacunacion = new byte[0];

	
			    public String Host;

				public String getHost () {
					return this.Host;
				}

				public Boolean HostIsNullable(){
				    return true;
				}
				public Boolean HostIsKey(){
				    return false;
				}
				public Integer HostLength(){
				    return 15;
				}
				public Integer HostPrecision(){
				    return 0;
				}
				public String HostDefault(){
				
					return null;
				
				}
				public String HostComment(){
				
				    return "";
				
				}
				public String HostPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String HostOriginalDbColumnName(){
				
					return "Host";
				
				}

				
			    public String Port;

				public String getPort () {
					return this.Port;
				}

				public Boolean PortIsNullable(){
				    return true;
				}
				public Boolean PortIsKey(){
				    return false;
				}
				public Integer PortLength(){
				    return 4;
				}
				public Integer PortPrecision(){
				    return 0;
				}
				public String PortDefault(){
				
					return null;
				
				}
				public String PortComment(){
				
				    return "";
				
				}
				public String PortPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String PortOriginalDbColumnName(){
				
					return "Port";
				
				}

				
			    public String Sid;

				public String getSid () {
					return this.Sid;
				}

				public Boolean SidIsNullable(){
				    return true;
				}
				public Boolean SidIsKey(){
				    return false;
				}
				public Integer SidLength(){
				    return 4;
				}
				public Integer SidPrecision(){
				    return 0;
				}
				public String SidDefault(){
				
					return null;
				
				}
				public String SidComment(){
				
				    return "";
				
				}
				public String SidPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String SidOriginalDbColumnName(){
				
					return "Sid";
				
				}

				
			    public String ServiceName;

				public String getServiceName () {
					return this.ServiceName;
				}

				public Boolean ServiceNameIsNullable(){
				    return true;
				}
				public Boolean ServiceNameIsKey(){
				    return false;
				}
				public Integer ServiceNameLength(){
				    return 7;
				}
				public Integer ServiceNamePrecision(){
				    return 0;
				}
				public String ServiceNameDefault(){
				
					return null;
				
				}
				public String ServiceNameComment(){
				
				    return "";
				
				}
				public String ServiceNamePattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String ServiceNameOriginalDbColumnName(){
				
					return "ServiceName";
				
				}

				
			    public String Schema;

				public String getSchema () {
					return this.Schema;
				}

				public Boolean SchemaIsNullable(){
				    return true;
				}
				public Boolean SchemaIsKey(){
				    return false;
				}
				public Integer SchemaLength(){
				    return 8;
				}
				public Integer SchemaPrecision(){
				    return 0;
				}
				public String SchemaDefault(){
				
					return null;
				
				}
				public String SchemaComment(){
				
				    return "";
				
				}
				public String SchemaPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String SchemaOriginalDbColumnName(){
				
					return "Schema";
				
				}

				
			    public String User;

				public String getUser () {
					return this.User;
				}

				public Boolean UserIsNullable(){
				    return true;
				}
				public Boolean UserIsKey(){
				    return false;
				}
				public Integer UserLength(){
				    return 8;
				}
				public Integer UserPrecision(){
				    return 0;
				}
				public String UserDefault(){
				
					return null;
				
				}
				public String UserComment(){
				
				    return "";
				
				}
				public String UserPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String UserOriginalDbColumnName(){
				
					return "User";
				
				}

				
			    public String Password;

				public String getPassword () {
					return this.Password;
				}

				public Boolean PasswordIsNullable(){
				    return true;
				}
				public Boolean PasswordIsKey(){
				    return false;
				}
				public Integer PasswordLength(){
				    return 15;
				}
				public Integer PasswordPrecision(){
				    return 0;
				}
				public String PasswordDefault(){
				
					return null;
				
				}
				public String PasswordComment(){
				
				    return "";
				
				}
				public String PasswordPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String PasswordOriginalDbColumnName(){
				
					return "Password";
				
				}

				
			    public String PathStorage;

				public String getPathStorage () {
					return this.PathStorage;
				}

				public Boolean PathStorageIsNullable(){
				    return true;
				}
				public Boolean PathStorageIsKey(){
				    return false;
				}
				public Integer PathStorageLength(){
				    return 44;
				}
				public Integer PathStoragePrecision(){
				    return 0;
				}
				public String PathStorageDefault(){
				
					return null;
				
				}
				public String PathStorageComment(){
				
				    return "";
				
				}
				public String PathStoragePattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String PathStorageOriginalDbColumnName(){
				
					return "PathStorage";
				
				}

				
			    public String SMTPHost;

				public String getSMTPHost () {
					return this.SMTPHost;
				}

				public Boolean SMTPHostIsNullable(){
				    return true;
				}
				public Boolean SMTPHostIsKey(){
				    return false;
				}
				public Integer SMTPHostLength(){
				    return 14;
				}
				public Integer SMTPHostPrecision(){
				    return 0;
				}
				public String SMTPHostDefault(){
				
					return null;
				
				}
				public String SMTPHostComment(){
				
				    return "";
				
				}
				public String SMTPHostPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String SMTPHostOriginalDbColumnName(){
				
					return "SMTPHost";
				
				}

				
			    public String SMTPPort;

				public String getSMTPPort () {
					return this.SMTPPort;
				}

				public Boolean SMTPPortIsNullable(){
				    return true;
				}
				public Boolean SMTPPortIsKey(){
				    return false;
				}
				public Integer SMTPPortLength(){
				    return 3;
				}
				public Integer SMTPPortPrecision(){
				    return 0;
				}
				public String SMTPPortDefault(){
				
					return null;
				
				}
				public String SMTPPortComment(){
				
				    return "";
				
				}
				public String SMTPPortPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String SMTPPortOriginalDbColumnName(){
				
					return "SMTPPort";
				
				}

				
			    public String UsernameMail;

				public String getUsernameMail () {
					return this.UsernameMail;
				}

				public Boolean UsernameMailIsNullable(){
				    return true;
				}
				public Boolean UsernameMailIsKey(){
				    return false;
				}
				public Integer UsernameMailLength(){
				    return 34;
				}
				public Integer UsernameMailPrecision(){
				    return 0;
				}
				public String UsernameMailDefault(){
				
					return null;
				
				}
				public String UsernameMailComment(){
				
				    return "";
				
				}
				public String UsernameMailPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String UsernameMailOriginalDbColumnName(){
				
					return "UsernameMail";
				
				}

				
			    public String PasswordMail;

				public String getPasswordMail () {
					return this.PasswordMail;
				}

				public Boolean PasswordMailIsNullable(){
				    return true;
				}
				public Boolean PasswordMailIsKey(){
				    return false;
				}
				public Integer PasswordMailLength(){
				    return 13;
				}
				public Integer PasswordMailPrecision(){
				    return 0;
				}
				public String PasswordMailDefault(){
				
					return null;
				
				}
				public String PasswordMailComment(){
				
				    return "";
				
				}
				public String PasswordMailPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String PasswordMailOriginalDbColumnName(){
				
					return "PasswordMail";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_VAC_CONSOLIDADOS_VAC_RegistroVacunacion.length) {
				if(length < 1024 && commonByteArray_VAC_CONSOLIDADOS_VAC_RegistroVacunacion.length == 0) {
   					commonByteArray_VAC_CONSOLIDADOS_VAC_RegistroVacunacion = new byte[1024];
				} else {
   					commonByteArray_VAC_CONSOLIDADOS_VAC_RegistroVacunacion = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_VAC_CONSOLIDADOS_VAC_RegistroVacunacion, 0, length);
			strReturn = new String(commonByteArray_VAC_CONSOLIDADOS_VAC_RegistroVacunacion, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_VAC_CONSOLIDADOS_VAC_RegistroVacunacion.length) {
				if(length < 1024 && commonByteArray_VAC_CONSOLIDADOS_VAC_RegistroVacunacion.length == 0) {
   					commonByteArray_VAC_CONSOLIDADOS_VAC_RegistroVacunacion = new byte[1024];
				} else {
   					commonByteArray_VAC_CONSOLIDADOS_VAC_RegistroVacunacion = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_VAC_CONSOLIDADOS_VAC_RegistroVacunacion, 0, length);
			strReturn = new String(commonByteArray_VAC_CONSOLIDADOS_VAC_RegistroVacunacion, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_VAC_CONSOLIDADOS_VAC_RegistroVacunacion) {

        	try {

        		int length = 0;
		
					this.Host = readString(dis);
					
					this.Port = readString(dis);
					
					this.Sid = readString(dis);
					
					this.ServiceName = readString(dis);
					
					this.Schema = readString(dis);
					
					this.User = readString(dis);
					
					this.Password = readString(dis);
					
					this.PathStorage = readString(dis);
					
					this.SMTPHost = readString(dis);
					
					this.SMTPPort = readString(dis);
					
					this.UsernameMail = readString(dis);
					
					this.PasswordMail = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_VAC_CONSOLIDADOS_VAC_RegistroVacunacion) {

        	try {

        		int length = 0;
		
					this.Host = readString(dis);
					
					this.Port = readString(dis);
					
					this.Sid = readString(dis);
					
					this.ServiceName = readString(dis);
					
					this.Schema = readString(dis);
					
					this.User = readString(dis);
					
					this.Password = readString(dis);
					
					this.PathStorage = readString(dis);
					
					this.SMTPHost = readString(dis);
					
					this.SMTPPort = readString(dis);
					
					this.UsernameMail = readString(dis);
					
					this.PasswordMail = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.Host,dos);
					
					// String
				
						writeString(this.Port,dos);
					
					// String
				
						writeString(this.Sid,dos);
					
					// String
				
						writeString(this.ServiceName,dos);
					
					// String
				
						writeString(this.Schema,dos);
					
					// String
				
						writeString(this.User,dos);
					
					// String
				
						writeString(this.Password,dos);
					
					// String
				
						writeString(this.PathStorage,dos);
					
					// String
				
						writeString(this.SMTPHost,dos);
					
					// String
				
						writeString(this.SMTPPort,dos);
					
					// String
				
						writeString(this.UsernameMail,dos);
					
					// String
				
						writeString(this.PasswordMail,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.Host,dos);
					
					// String
				
						writeString(this.Port,dos);
					
					// String
				
						writeString(this.Sid,dos);
					
					// String
				
						writeString(this.ServiceName,dos);
					
					// String
				
						writeString(this.Schema,dos);
					
					// String
				
						writeString(this.User,dos);
					
					// String
				
						writeString(this.Password,dos);
					
					// String
				
						writeString(this.PathStorage,dos);
					
					// String
				
						writeString(this.SMTPHost,dos);
					
					// String
				
						writeString(this.SMTPPort,dos);
					
					// String
				
						writeString(this.UsernameMail,dos);
					
					// String
				
						writeString(this.PasswordMail,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Host="+Host);
		sb.append(",Port="+Port);
		sb.append(",Sid="+Sid);
		sb.append(",ServiceName="+ServiceName);
		sb.append(",Schema="+Schema);
		sb.append(",User="+User);
		sb.append(",Password="+Password);
		sb.append(",PathStorage="+PathStorage);
		sb.append(",SMTPHost="+SMTPHost);
		sb.append(",SMTPPort="+SMTPPort);
		sb.append(",UsernameMail="+UsernameMail);
		sb.append(",PasswordMail="+PasswordMail);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tFileInputXML_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileInputXML_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row1Struct row1 = new row1Struct();




	
	/**
	 * [tJavaRow_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaRow_1", false);
		start_Hash.put("tJavaRow_1", System.currentTimeMillis());
		
	
	currentComponent="tJavaRow_1";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row1");
					}
				
		int tos_count_tJavaRow_1 = 0;
		

int nb_line_tJavaRow_1 = 0;

 



/**
 * [tJavaRow_1 begin ] stop
 */



	
	/**
	 * [tFileInputXML_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputXML_1", false);
		start_Hash.put("tFileInputXML_1", System.currentTimeMillis());
		
	
	currentComponent="tFileInputXML_1";
	
	
		int tos_count_tFileInputXML_1 = 0;
		

	

int nb_line_tFileInputXML_1 = 0;

	String os_tFileInputXML_1 = System.getProperty("os.name").toLowerCase();
	boolean isWindows_tFileInputXML_1=false;
	if(os_tFileInputXML_1.indexOf("windows") > -1 || os_tFileInputXML_1.indexOf("nt") > -1){
		isWindows_tFileInputXML_1=true;
	}
class XML_API_tFileInputXML_1{
	public boolean isDefNull(String[] node) throws javax.xml.transform.TransformerException {
        if(node[0] != null && node[1]!=null && ("true").equals(node[1])){
        	return true;
        }
        return false;
    }

    public boolean isMissing(String[] node) throws javax.xml.transform.TransformerException {
        return node[0] == null ? true : false;
    }

    public boolean isEmpty(String[] node) throws javax.xml.transform.TransformerException {
        if(node[0]!=null ){
        	return node[0].length() == 0;
        }
        return false;
    }
}
XML_API_tFileInputXML_1 xml_api_tFileInputXML_1 = new XML_API_tFileInputXML_1();

String[] queryPaths_tFileInputXML_1 = new String[]{	
	"Host"		
	,"Host"+"/@xsi:nil"	
	,"Port"		
	,"Port"+"/@xsi:nil"	
	,"Sid"		
	,"Sid"+"/@xsi:nil"	
	,"ServiceName"		
	,"ServiceName"+"/@xsi:nil"	
	,"Schema"		
	,"Schema"+"/@xsi:nil"	
	,"User"		
	,"User"+"/@xsi:nil"	
	,"Password"		
	,"Password"+"/@xsi:nil"	
	,"PathStorage"		
	,"PathStorage"+"/@xsi:nil"	
	,"SMTPHost"		
	,"SMTPHost"+"/@xsi:nil"	
	,"SMTPPort"		
	,"SMTPPort"+"/@xsi:nil"	
	,"UsernameMail"		
	,"UsernameMail"+"/@xsi:nil"	
	,"PasswordMail"		
	,"PasswordMail"+"/@xsi:nil"
};

boolean[] asXMLs_tFileInputXML_1 = new boolean[]{	
	false		
	,false	
	,false		
	,false	
	,false		
	,false	
	,false		
	,false	
	,false		
	,false	
	,false		
	,false	
	,false		
	,false	
	,false		
	,false	
	,false		
	,false	
	,false		
	,false	
	,false		
	,false	
	,false		
	,false
};

String str_tFileInputXML_1 = "";
String[] node_tFileInputXML_1 = null;
org.talend.xml.sax.SAXLooper looper_tFileInputXML_1 = new org.talend.xml.sax.SAXLooper("/connectionStrings",queryPaths_tFileInputXML_1,asXMLs_tFileInputXML_1);
looper_tFileInputXML_1.setEncoding("UTF-8");
Object filename_tFileInputXML_1 = null;
try {
	filename_tFileInputXML_1 = context.ORIGEN;
} catch(java.lang.Exception e) {
globalMap.put("tFileInputXML_1_ERROR_MESSAGE",e.getMessage());
	
	System.err.println(e.getMessage());
	
}
if(filename_tFileInputXML_1 != null && filename_tFileInputXML_1 instanceof String && filename_tFileInputXML_1.toString().startsWith("//")){
	if (!isWindows_tFileInputXML_1){
		filename_tFileInputXML_1 = filename_tFileInputXML_1.toString().replaceFirst("//","/");
	}
}
if(filename_tFileInputXML_1 instanceof java.io.InputStream){
	looper_tFileInputXML_1.parse((java.io.InputStream)filename_tFileInputXML_1);
}else{
	looper_tFileInputXML_1.parse(String.valueOf(filename_tFileInputXML_1));
}
java.util.Iterator<java.util.Map<String, String>> it_tFileInputXML_1  = looper_tFileInputXML_1.iterator();
while (it_tFileInputXML_1.hasNext()) {
	java.util.Map<String, String> row_tFileInputXML_1 = it_tFileInputXML_1.next();
	if (nb_line_tFileInputXML_1>=50) {
	
			looper_tFileInputXML_1.stopRead();
	
		break;
	}
		nb_line_tFileInputXML_1++;
		
	row1 = null;			
	boolean whetherReject_tFileInputXML_1 = false;
	row1 = new row1Struct();
	try{
	str_tFileInputXML_1 = row_tFileInputXML_1.get("Host");
	node_tFileInputXML_1 = new String[]{str_tFileInputXML_1,row_tFileInputXML_1.get("Host"+"/@xsi:nil")};
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row1.Host =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row1.Host ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row1.Host =null;
									}else{
		row1.Host = str_tFileInputXML_1;
	}
	str_tFileInputXML_1 = row_tFileInputXML_1.get("Port");
	node_tFileInputXML_1 = new String[]{str_tFileInputXML_1,row_tFileInputXML_1.get("Port"+"/@xsi:nil")};
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row1.Port =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row1.Port ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row1.Port =null;
									}else{
		row1.Port = str_tFileInputXML_1;
	}
	str_tFileInputXML_1 = row_tFileInputXML_1.get("Sid");
	node_tFileInputXML_1 = new String[]{str_tFileInputXML_1,row_tFileInputXML_1.get("Sid"+"/@xsi:nil")};
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row1.Sid =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row1.Sid ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row1.Sid =null;
									}else{
		row1.Sid = str_tFileInputXML_1;
	}
	str_tFileInputXML_1 = row_tFileInputXML_1.get("ServiceName");
	node_tFileInputXML_1 = new String[]{str_tFileInputXML_1,row_tFileInputXML_1.get("ServiceName"+"/@xsi:nil")};
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row1.ServiceName =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row1.ServiceName ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row1.ServiceName =null;
									}else{
		row1.ServiceName = str_tFileInputXML_1;
	}
	str_tFileInputXML_1 = row_tFileInputXML_1.get("Schema");
	node_tFileInputXML_1 = new String[]{str_tFileInputXML_1,row_tFileInputXML_1.get("Schema"+"/@xsi:nil")};
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row1.Schema =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row1.Schema ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row1.Schema =null;
									}else{
		row1.Schema = str_tFileInputXML_1;
	}
	str_tFileInputXML_1 = row_tFileInputXML_1.get("User");
	node_tFileInputXML_1 = new String[]{str_tFileInputXML_1,row_tFileInputXML_1.get("User"+"/@xsi:nil")};
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row1.User =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row1.User ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row1.User =null;
									}else{
		row1.User = str_tFileInputXML_1;
	}
	str_tFileInputXML_1 = row_tFileInputXML_1.get("Password");
	node_tFileInputXML_1 = new String[]{str_tFileInputXML_1,row_tFileInputXML_1.get("Password"+"/@xsi:nil")};
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row1.Password =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row1.Password ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row1.Password =null;
									}else{
		row1.Password = str_tFileInputXML_1;
	}
	str_tFileInputXML_1 = row_tFileInputXML_1.get("PathStorage");
	node_tFileInputXML_1 = new String[]{str_tFileInputXML_1,row_tFileInputXML_1.get("PathStorage"+"/@xsi:nil")};
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row1.PathStorage =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row1.PathStorage ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row1.PathStorage =null;
									}else{
		row1.PathStorage = str_tFileInputXML_1;
	}
	str_tFileInputXML_1 = row_tFileInputXML_1.get("SMTPHost");
	node_tFileInputXML_1 = new String[]{str_tFileInputXML_1,row_tFileInputXML_1.get("SMTPHost"+"/@xsi:nil")};
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row1.SMTPHost =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row1.SMTPHost ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row1.SMTPHost =null;
									}else{
		row1.SMTPHost = str_tFileInputXML_1;
	}
	str_tFileInputXML_1 = row_tFileInputXML_1.get("SMTPPort");
	node_tFileInputXML_1 = new String[]{str_tFileInputXML_1,row_tFileInputXML_1.get("SMTPPort"+"/@xsi:nil")};
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row1.SMTPPort =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row1.SMTPPort ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row1.SMTPPort =null;
									}else{
		row1.SMTPPort = str_tFileInputXML_1;
	}
	str_tFileInputXML_1 = row_tFileInputXML_1.get("UsernameMail");
	node_tFileInputXML_1 = new String[]{str_tFileInputXML_1,row_tFileInputXML_1.get("UsernameMail"+"/@xsi:nil")};
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row1.UsernameMail =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row1.UsernameMail ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row1.UsernameMail =null;
									}else{
		row1.UsernameMail = str_tFileInputXML_1;
	}
	str_tFileInputXML_1 = row_tFileInputXML_1.get("PasswordMail");
	node_tFileInputXML_1 = new String[]{str_tFileInputXML_1,row_tFileInputXML_1.get("PasswordMail"+"/@xsi:nil")};
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row1.PasswordMail =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row1.PasswordMail ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row1.PasswordMail =null;
									}else{
		row1.PasswordMail = str_tFileInputXML_1;
	} 
			
    } catch (java.lang.Exception e) {
globalMap.put("tFileInputXML_1_ERROR_MESSAGE",e.getMessage());
        whetherReject_tFileInputXML_1 = true;
                System.err.println(e.getMessage());
                row1 = null;
    }
			
			

 



/**
 * [tFileInputXML_1 begin ] stop
 */
	
	/**
	 * [tFileInputXML_1 main ] start
	 */

	

	
	
	currentComponent="tFileInputXML_1";
	
	

 


	tos_count_tFileInputXML_1++;

/**
 * [tFileInputXML_1 main ] stop
 */
	
	/**
	 * [tFileInputXML_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileInputXML_1";
	
	

 



/**
 * [tFileInputXML_1 process_data_begin ] stop
 */
// Start of branch "row1"
if(row1 != null) { 



	
	/**
	 * [tJavaRow_1 main ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row1"
						
						);
					}
					

    //Guarda en variables de contexto los parametros de conexión a la bd saludsis
context.db_origen_Server = row1.Host;
context.db_origen_Port = row1.Port;
context.db_origen_ServiceName = row1.ServiceName;
context.db_origen_Schema = row1.Schema;
context.db_origen_Login = row1.User;
context.db_origen_Password = row1.Password;
context.STORAGE = row1.PathStorage;

//Guarda en variables de contexto la fecha de ejecución y la hora de inicio
context.FECHA_EJECUCION = TalendDate.getDate("DD/MM/YYYY");
context.HORA_INICIO = TalendDate.getDate("HH:mm:ss");
context.JOB = "RDVAC";

//Imprime en consola el job, la fecha de ejecución y la hora de inicio
System.out.println(context.JOB+" :-Start: "+context.FECHA_EJECUCION+" "+context.HORA_INICIO);


    nb_line_tJavaRow_1++;   

 


	tos_count_tJavaRow_1++;

/**
 * [tJavaRow_1 main ] stop
 */
	
	/**
	 * [tJavaRow_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";
	
	

 



/**
 * [tJavaRow_1 process_data_begin ] stop
 */
	
	/**
	 * [tJavaRow_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";
	
	

 



/**
 * [tJavaRow_1 process_data_end ] stop
 */

} // End of branch "row1"




	
	/**
	 * [tFileInputXML_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileInputXML_1";
	
	

 



/**
 * [tFileInputXML_1 process_data_end ] stop
 */
	
	/**
	 * [tFileInputXML_1 end ] start
	 */

	

	
	
	currentComponent="tFileInputXML_1";
	
	


	}
	try {
		looper_tFileInputXML_1.handleTaskResponse();
	} catch(java.lang.Exception e) {
globalMap.put("tFileInputXML_1_ERROR_MESSAGE",e.getMessage());
		if(!(e.getCause() instanceof org.talend.xml.sax.exception.EnoughDataException))
	
		
		System.err.println(e.getMessage());	
	
	}
	globalMap.put("tFileInputXML_1_NB_LINE",nb_line_tFileInputXML_1);

	

 

ok_Hash.put("tFileInputXML_1", true);
end_Hash.put("tFileInputXML_1", System.currentTimeMillis());




/**
 * [tFileInputXML_1 end ] stop
 */

	
	/**
	 * [tJavaRow_1 end ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";
	
	

globalMap.put("tJavaRow_1_NB_LINE",nb_line_tJavaRow_1);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row1");
			  	}
			  	
 

ok_Hash.put("tJavaRow_1", true);
end_Hash.put("tJavaRow_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk2", 0, "ok");
				}
				tOracleConnection_1Process(globalMap);



/**
 * [tJavaRow_1 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileInputXML_1 finally ] start
	 */

	

	
	
	currentComponent="tFileInputXML_1";
	
	

 



/**
 * [tFileInputXML_1 finally ] stop
 */

	
	/**
	 * [tJavaRow_1 finally ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";
	
	

 



/**
 * [tJavaRow_1 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileInputXML_1_SUBPROCESS_STATE", 1);
	}
	


public void tOracleConnection_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleConnection_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tOracleConnection_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleConnection_1", false);
		start_Hash.put("tOracleConnection_1", System.currentTimeMillis());
		
	
	currentComponent="tOracleConnection_1";
	
	
		int tos_count_tOracleConnection_1 = 0;
		
	

	
        String url_tOracleConnection_1 = "jdbc:oracle:thin:@(description=(address=(protocol=tcp)(host=" + context.db_origen_Server + ")(port=" + context.db_origen_Port + "))(connect_data=(service_name=" + context.db_origen_ServiceName + ")))";
    	globalMap.put("connectionType_" + "tOracleConnection_1", "ORACLE_SERVICE_NAME");
	String dbUser_tOracleConnection_1 = context.db_origen_Login;
	
	
		
	final String decryptedPassword_tOracleConnection_1 = context.db_origen_Password; 
		String dbPwd_tOracleConnection_1 = decryptedPassword_tOracleConnection_1;
	
	
	java.sql.Connection conn_tOracleConnection_1 = null;
	
		
			String driverClass_tOracleConnection_1 = "oracle.jdbc.OracleDriver";
			java.lang.Class jdbcclazz_tOracleConnection_1 = java.lang.Class.forName(driverClass_tOracleConnection_1);
			globalMap.put("driverClass_tOracleConnection_1", driverClass_tOracleConnection_1);
		
			java.util.Properties atnParamsPrope_tOracleConnection_1 = new java.util.Properties();
			    atnParamsPrope_tOracleConnection_1.put("user",dbUser_tOracleConnection_1);
			    atnParamsPrope_tOracleConnection_1.put("password",dbPwd_tOracleConnection_1);
			if(context.db_origen_AdditionalParams != null && !"\"\"".equals(context.db_origen_AdditionalParams) && !"".equals(context.db_origen_AdditionalParams)){
                atnParamsPrope_tOracleConnection_1.load(new java.io.ByteArrayInputStream(context.db_origen_AdditionalParams.replace("&", "\n").getBytes()));
            }
         
			conn_tOracleConnection_1 = java.sql.DriverManager.getConnection(url_tOracleConnection_1, atnParamsPrope_tOracleConnection_1);

		globalMap.put("conn_tOracleConnection_1", conn_tOracleConnection_1);
	if (null != conn_tOracleConnection_1) {
		
			conn_tOracleConnection_1.setAutoCommit(false);
	}
        globalMap.put("host_" + "tOracleConnection_1",context.db_origen_Server);
        globalMap.put("port_" + "tOracleConnection_1",context.db_origen_Port);
        globalMap.put("dbname_" + "tOracleConnection_1",context.db_origen_ServiceName);

	globalMap.put("dbschema_" + "tOracleConnection_1", context.db_origen_Schema);
	globalMap.put("username_" + "tOracleConnection_1",context.db_origen_Login);
	globalMap.put("password_" + "tOracleConnection_1",dbPwd_tOracleConnection_1);

 



/**
 * [tOracleConnection_1 begin ] stop
 */
	
	/**
	 * [tOracleConnection_1 main ] start
	 */

	

	
	
	currentComponent="tOracleConnection_1";
	
	

 


	tos_count_tOracleConnection_1++;

/**
 * [tOracleConnection_1 main ] stop
 */
	
	/**
	 * [tOracleConnection_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleConnection_1";
	
	

 



/**
 * [tOracleConnection_1 process_data_begin ] stop
 */
	
	/**
	 * [tOracleConnection_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleConnection_1";
	
	

 



/**
 * [tOracleConnection_1 process_data_end ] stop
 */
	
	/**
	 * [tOracleConnection_1 end ] start
	 */

	

	
	
	currentComponent="tOracleConnection_1";
	
	

 

ok_Hash.put("tOracleConnection_1", true);
end_Hash.put("tOracleConnection_1", System.currentTimeMillis());




/**
 * [tOracleConnection_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleConnection_1 finally ] start
	 */

	

	
	
	currentComponent="tOracleConnection_1";
	
	

 



/**
 * [tOracleConnection_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleConnection_1_SUBPROCESS_STATE", 1);
	}
	


public static class mailStruct implements routines.system.IPersistableRow<mailStruct> {
    final static byte[] commonByteArrayLock_VAC_CONSOLIDADOS_VAC_RegistroVacunacion = new byte[0];
    static byte[] commonByteArray_VAC_CONSOLIDADOS_VAC_RegistroVacunacion = new byte[0];

	
			    public java.util.Date moment;

				public java.util.Date getMoment () {
					return this.moment;
				}

				public Boolean momentIsNullable(){
				    return true;
				}
				public Boolean momentIsKey(){
				    return false;
				}
				public Integer momentLength(){
				    return 0;
				}
				public Integer momentPrecision(){
				    return 0;
				}
				public String momentDefault(){
				
					return null;
				
				}
				public String momentComment(){
				
				    return null;
				
				}
				public String momentPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String momentOriginalDbColumnName(){
				
					return "moment";
				
				}

				
			    public String pid;

				public String getPid () {
					return this.pid;
				}

				public Boolean pidIsNullable(){
				    return true;
				}
				public Boolean pidIsKey(){
				    return false;
				}
				public Integer pidLength(){
				    return 20;
				}
				public Integer pidPrecision(){
				    return 0;
				}
				public String pidDefault(){
				
					return null;
				
				}
				public String pidComment(){
				
				    return null;
				
				}
				public String pidPattern(){
				
				    return null;
				
				}
				public String pidOriginalDbColumnName(){
				
					return "pid";
				
				}

				
			    public String root_pid;

				public String getRoot_pid () {
					return this.root_pid;
				}

				public Boolean root_pidIsNullable(){
				    return true;
				}
				public Boolean root_pidIsKey(){
				    return false;
				}
				public Integer root_pidLength(){
				    return 20;
				}
				public Integer root_pidPrecision(){
				    return 0;
				}
				public String root_pidDefault(){
				
					return null;
				
				}
				public String root_pidComment(){
				
				    return null;
				
				}
				public String root_pidPattern(){
				
				    return null;
				
				}
				public String root_pidOriginalDbColumnName(){
				
					return "root_pid";
				
				}

				
			    public String father_pid;

				public String getFather_pid () {
					return this.father_pid;
				}

				public Boolean father_pidIsNullable(){
				    return true;
				}
				public Boolean father_pidIsKey(){
				    return false;
				}
				public Integer father_pidLength(){
				    return 20;
				}
				public Integer father_pidPrecision(){
				    return 0;
				}
				public String father_pidDefault(){
				
					return null;
				
				}
				public String father_pidComment(){
				
				    return null;
				
				}
				public String father_pidPattern(){
				
				    return null;
				
				}
				public String father_pidOriginalDbColumnName(){
				
					return "father_pid";
				
				}

				
			    public String project;

				public String getProject () {
					return this.project;
				}

				public Boolean projectIsNullable(){
				    return true;
				}
				public Boolean projectIsKey(){
				    return false;
				}
				public Integer projectLength(){
				    return 50;
				}
				public Integer projectPrecision(){
				    return 0;
				}
				public String projectDefault(){
				
					return null;
				
				}
				public String projectComment(){
				
				    return null;
				
				}
				public String projectPattern(){
				
				    return null;
				
				}
				public String projectOriginalDbColumnName(){
				
					return "project";
				
				}

				
			    public String job;

				public String getJob () {
					return this.job;
				}

				public Boolean jobIsNullable(){
				    return true;
				}
				public Boolean jobIsKey(){
				    return false;
				}
				public Integer jobLength(){
				    return 255;
				}
				public Integer jobPrecision(){
				    return 0;
				}
				public String jobDefault(){
				
					return null;
				
				}
				public String jobComment(){
				
				    return null;
				
				}
				public String jobPattern(){
				
				    return null;
				
				}
				public String jobOriginalDbColumnName(){
				
					return "job";
				
				}

				
			    public String context;

				public String getContext () {
					return this.context;
				}

				public Boolean contextIsNullable(){
				    return true;
				}
				public Boolean contextIsKey(){
				    return false;
				}
				public Integer contextLength(){
				    return 50;
				}
				public Integer contextPrecision(){
				    return 0;
				}
				public String contextDefault(){
				
					return null;
				
				}
				public String contextComment(){
				
				    return null;
				
				}
				public String contextPattern(){
				
				    return null;
				
				}
				public String contextOriginalDbColumnName(){
				
					return "context";
				
				}

				
			    public Integer priority;

				public Integer getPriority () {
					return this.priority;
				}

				public Boolean priorityIsNullable(){
				    return true;
				}
				public Boolean priorityIsKey(){
				    return false;
				}
				public Integer priorityLength(){
				    return 3;
				}
				public Integer priorityPrecision(){
				    return 0;
				}
				public String priorityDefault(){
				
					return "";
				
				}
				public String priorityComment(){
				
				    return null;
				
				}
				public String priorityPattern(){
				
				    return null;
				
				}
				public String priorityOriginalDbColumnName(){
				
					return "priority";
				
				}

				
			    public String type;

				public String getType () {
					return this.type;
				}

				public Boolean typeIsNullable(){
				    return true;
				}
				public Boolean typeIsKey(){
				    return false;
				}
				public Integer typeLength(){
				    return 255;
				}
				public Integer typePrecision(){
				    return 0;
				}
				public String typeDefault(){
				
					return null;
				
				}
				public String typeComment(){
				
				    return null;
				
				}
				public String typePattern(){
				
				    return null;
				
				}
				public String typeOriginalDbColumnName(){
				
					return "type";
				
				}

				
			    public String origin;

				public String getOrigin () {
					return this.origin;
				}

				public Boolean originIsNullable(){
				    return true;
				}
				public Boolean originIsKey(){
				    return false;
				}
				public Integer originLength(){
				    return 255;
				}
				public Integer originPrecision(){
				    return 0;
				}
				public String originDefault(){
				
					return null;
				
				}
				public String originComment(){
				
				    return null;
				
				}
				public String originPattern(){
				
				    return null;
				
				}
				public String originOriginalDbColumnName(){
				
					return "origin";
				
				}

				
			    public String message;

				public String getMessage () {
					return this.message;
				}

				public Boolean messageIsNullable(){
				    return true;
				}
				public Boolean messageIsKey(){
				    return false;
				}
				public Integer messageLength(){
				    return 255;
				}
				public Integer messagePrecision(){
				    return 0;
				}
				public String messageDefault(){
				
					return null;
				
				}
				public String messageComment(){
				
				    return null;
				
				}
				public String messagePattern(){
				
				    return null;
				
				}
				public String messageOriginalDbColumnName(){
				
					return "message";
				
				}

				
			    public Integer code;

				public Integer getCode () {
					return this.code;
				}

				public Boolean codeIsNullable(){
				    return true;
				}
				public Boolean codeIsKey(){
				    return false;
				}
				public Integer codeLength(){
				    return 3;
				}
				public Integer codePrecision(){
				    return 0;
				}
				public String codeDefault(){
				
					return "";
				
				}
				public String codeComment(){
				
				    return null;
				
				}
				public String codePattern(){
				
				    return null;
				
				}
				public String codeOriginalDbColumnName(){
				
					return "code";
				
				}

				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_VAC_CONSOLIDADOS_VAC_RegistroVacunacion.length) {
				if(length < 1024 && commonByteArray_VAC_CONSOLIDADOS_VAC_RegistroVacunacion.length == 0) {
   					commonByteArray_VAC_CONSOLIDADOS_VAC_RegistroVacunacion = new byte[1024];
				} else {
   					commonByteArray_VAC_CONSOLIDADOS_VAC_RegistroVacunacion = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_VAC_CONSOLIDADOS_VAC_RegistroVacunacion, 0, length);
			strReturn = new String(commonByteArray_VAC_CONSOLIDADOS_VAC_RegistroVacunacion, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_VAC_CONSOLIDADOS_VAC_RegistroVacunacion.length) {
				if(length < 1024 && commonByteArray_VAC_CONSOLIDADOS_VAC_RegistroVacunacion.length == 0) {
   					commonByteArray_VAC_CONSOLIDADOS_VAC_RegistroVacunacion = new byte[1024];
				} else {
   					commonByteArray_VAC_CONSOLIDADOS_VAC_RegistroVacunacion = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_VAC_CONSOLIDADOS_VAC_RegistroVacunacion, 0, length);
			strReturn = new String(commonByteArray_VAC_CONSOLIDADOS_VAC_RegistroVacunacion, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_VAC_CONSOLIDADOS_VAC_RegistroVacunacion) {

        	try {

        		int length = 0;
		
					this.moment = readDate(dis);
					
					this.pid = readString(dis);
					
					this.root_pid = readString(dis);
					
					this.father_pid = readString(dis);
					
					this.project = readString(dis);
					
					this.job = readString(dis);
					
					this.context = readString(dis);
					
						this.priority = readInteger(dis);
					
					this.type = readString(dis);
					
					this.origin = readString(dis);
					
					this.message = readString(dis);
					
						this.code = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_VAC_CONSOLIDADOS_VAC_RegistroVacunacion) {

        	try {

        		int length = 0;
		
					this.moment = readDate(dis);
					
					this.pid = readString(dis);
					
					this.root_pid = readString(dis);
					
					this.father_pid = readString(dis);
					
					this.project = readString(dis);
					
					this.job = readString(dis);
					
					this.context = readString(dis);
					
						this.priority = readInteger(dis);
					
					this.type = readString(dis);
					
					this.origin = readString(dis);
					
					this.message = readString(dis);
					
						this.code = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.pid,dos);
					
					// String
				
						writeString(this.root_pid,dos);
					
					// String
				
						writeString(this.father_pid,dos);
					
					// String
				
						writeString(this.project,dos);
					
					// String
				
						writeString(this.job,dos);
					
					// String
				
						writeString(this.context,dos);
					
					// Integer
				
						writeInteger(this.priority,dos);
					
					// String
				
						writeString(this.type,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.message,dos);
					
					// Integer
				
						writeInteger(this.code,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.pid,dos);
					
					// String
				
						writeString(this.root_pid,dos);
					
					// String
				
						writeString(this.father_pid,dos);
					
					// String
				
						writeString(this.project,dos);
					
					// String
				
						writeString(this.job,dos);
					
					// String
				
						writeString(this.context,dos);
					
					// Integer
				
						writeInteger(this.priority,dos);
					
					// String
				
						writeString(this.type,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.message,dos);
					
					// Integer
				
						writeInteger(this.code,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("moment="+String.valueOf(moment));
		sb.append(",pid="+pid);
		sb.append(",root_pid="+root_pid);
		sb.append(",father_pid="+father_pid);
		sb.append(",project="+project);
		sb.append(",job="+job);
		sb.append(",context="+context);
		sb.append(",priority="+String.valueOf(priority));
		sb.append(",type="+type);
		sb.append(",origin="+origin);
		sb.append(",message="+message);
		sb.append(",code="+String.valueOf(code));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(mailStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row2Struct implements routines.system.IPersistableRow<row2Struct> {
    final static byte[] commonByteArrayLock_VAC_CONSOLIDADOS_VAC_RegistroVacunacion = new byte[0];
    static byte[] commonByteArray_VAC_CONSOLIDADOS_VAC_RegistroVacunacion = new byte[0];

	
			    public java.util.Date moment;

				public java.util.Date getMoment () {
					return this.moment;
				}

				public Boolean momentIsNullable(){
				    return true;
				}
				public Boolean momentIsKey(){
				    return false;
				}
				public Integer momentLength(){
				    return 0;
				}
				public Integer momentPrecision(){
				    return 0;
				}
				public String momentDefault(){
				
					return null;
				
				}
				public String momentComment(){
				
				    return null;
				
				}
				public String momentPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String momentOriginalDbColumnName(){
				
					return "moment";
				
				}

				
			    public String pid;

				public String getPid () {
					return this.pid;
				}

				public Boolean pidIsNullable(){
				    return true;
				}
				public Boolean pidIsKey(){
				    return false;
				}
				public Integer pidLength(){
				    return 20;
				}
				public Integer pidPrecision(){
				    return 0;
				}
				public String pidDefault(){
				
					return null;
				
				}
				public String pidComment(){
				
				    return null;
				
				}
				public String pidPattern(){
				
				    return null;
				
				}
				public String pidOriginalDbColumnName(){
				
					return "pid";
				
				}

				
			    public String root_pid;

				public String getRoot_pid () {
					return this.root_pid;
				}

				public Boolean root_pidIsNullable(){
				    return true;
				}
				public Boolean root_pidIsKey(){
				    return false;
				}
				public Integer root_pidLength(){
				    return 20;
				}
				public Integer root_pidPrecision(){
				    return 0;
				}
				public String root_pidDefault(){
				
					return null;
				
				}
				public String root_pidComment(){
				
				    return null;
				
				}
				public String root_pidPattern(){
				
				    return null;
				
				}
				public String root_pidOriginalDbColumnName(){
				
					return "root_pid";
				
				}

				
			    public String father_pid;

				public String getFather_pid () {
					return this.father_pid;
				}

				public Boolean father_pidIsNullable(){
				    return true;
				}
				public Boolean father_pidIsKey(){
				    return false;
				}
				public Integer father_pidLength(){
				    return 20;
				}
				public Integer father_pidPrecision(){
				    return 0;
				}
				public String father_pidDefault(){
				
					return null;
				
				}
				public String father_pidComment(){
				
				    return null;
				
				}
				public String father_pidPattern(){
				
				    return null;
				
				}
				public String father_pidOriginalDbColumnName(){
				
					return "father_pid";
				
				}

				
			    public String project;

				public String getProject () {
					return this.project;
				}

				public Boolean projectIsNullable(){
				    return true;
				}
				public Boolean projectIsKey(){
				    return false;
				}
				public Integer projectLength(){
				    return 50;
				}
				public Integer projectPrecision(){
				    return 0;
				}
				public String projectDefault(){
				
					return null;
				
				}
				public String projectComment(){
				
				    return null;
				
				}
				public String projectPattern(){
				
				    return null;
				
				}
				public String projectOriginalDbColumnName(){
				
					return "project";
				
				}

				
			    public String job;

				public String getJob () {
					return this.job;
				}

				public Boolean jobIsNullable(){
				    return true;
				}
				public Boolean jobIsKey(){
				    return false;
				}
				public Integer jobLength(){
				    return 255;
				}
				public Integer jobPrecision(){
				    return 0;
				}
				public String jobDefault(){
				
					return null;
				
				}
				public String jobComment(){
				
				    return null;
				
				}
				public String jobPattern(){
				
				    return null;
				
				}
				public String jobOriginalDbColumnName(){
				
					return "job";
				
				}

				
			    public String context;

				public String getContext () {
					return this.context;
				}

				public Boolean contextIsNullable(){
				    return true;
				}
				public Boolean contextIsKey(){
				    return false;
				}
				public Integer contextLength(){
				    return 50;
				}
				public Integer contextPrecision(){
				    return 0;
				}
				public String contextDefault(){
				
					return null;
				
				}
				public String contextComment(){
				
				    return null;
				
				}
				public String contextPattern(){
				
				    return null;
				
				}
				public String contextOriginalDbColumnName(){
				
					return "context";
				
				}

				
			    public Integer priority;

				public Integer getPriority () {
					return this.priority;
				}

				public Boolean priorityIsNullable(){
				    return true;
				}
				public Boolean priorityIsKey(){
				    return false;
				}
				public Integer priorityLength(){
				    return 3;
				}
				public Integer priorityPrecision(){
				    return 0;
				}
				public String priorityDefault(){
				
					return "";
				
				}
				public String priorityComment(){
				
				    return null;
				
				}
				public String priorityPattern(){
				
				    return null;
				
				}
				public String priorityOriginalDbColumnName(){
				
					return "priority";
				
				}

				
			    public String type;

				public String getType () {
					return this.type;
				}

				public Boolean typeIsNullable(){
				    return true;
				}
				public Boolean typeIsKey(){
				    return false;
				}
				public Integer typeLength(){
				    return 255;
				}
				public Integer typePrecision(){
				    return 0;
				}
				public String typeDefault(){
				
					return null;
				
				}
				public String typeComment(){
				
				    return null;
				
				}
				public String typePattern(){
				
				    return null;
				
				}
				public String typeOriginalDbColumnName(){
				
					return "type";
				
				}

				
			    public String origin;

				public String getOrigin () {
					return this.origin;
				}

				public Boolean originIsNullable(){
				    return true;
				}
				public Boolean originIsKey(){
				    return false;
				}
				public Integer originLength(){
				    return 255;
				}
				public Integer originPrecision(){
				    return 0;
				}
				public String originDefault(){
				
					return null;
				
				}
				public String originComment(){
				
				    return null;
				
				}
				public String originPattern(){
				
				    return null;
				
				}
				public String originOriginalDbColumnName(){
				
					return "origin";
				
				}

				
			    public String message;

				public String getMessage () {
					return this.message;
				}

				public Boolean messageIsNullable(){
				    return true;
				}
				public Boolean messageIsKey(){
				    return false;
				}
				public Integer messageLength(){
				    return 255;
				}
				public Integer messagePrecision(){
				    return 0;
				}
				public String messageDefault(){
				
					return null;
				
				}
				public String messageComment(){
				
				    return null;
				
				}
				public String messagePattern(){
				
				    return null;
				
				}
				public String messageOriginalDbColumnName(){
				
					return "message";
				
				}

				
			    public Integer code;

				public Integer getCode () {
					return this.code;
				}

				public Boolean codeIsNullable(){
				    return true;
				}
				public Boolean codeIsKey(){
				    return false;
				}
				public Integer codeLength(){
				    return 3;
				}
				public Integer codePrecision(){
				    return 0;
				}
				public String codeDefault(){
				
					return "";
				
				}
				public String codeComment(){
				
				    return null;
				
				}
				public String codePattern(){
				
				    return null;
				
				}
				public String codeOriginalDbColumnName(){
				
					return "code";
				
				}

				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_VAC_CONSOLIDADOS_VAC_RegistroVacunacion.length) {
				if(length < 1024 && commonByteArray_VAC_CONSOLIDADOS_VAC_RegistroVacunacion.length == 0) {
   					commonByteArray_VAC_CONSOLIDADOS_VAC_RegistroVacunacion = new byte[1024];
				} else {
   					commonByteArray_VAC_CONSOLIDADOS_VAC_RegistroVacunacion = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_VAC_CONSOLIDADOS_VAC_RegistroVacunacion, 0, length);
			strReturn = new String(commonByteArray_VAC_CONSOLIDADOS_VAC_RegistroVacunacion, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_VAC_CONSOLIDADOS_VAC_RegistroVacunacion.length) {
				if(length < 1024 && commonByteArray_VAC_CONSOLIDADOS_VAC_RegistroVacunacion.length == 0) {
   					commonByteArray_VAC_CONSOLIDADOS_VAC_RegistroVacunacion = new byte[1024];
				} else {
   					commonByteArray_VAC_CONSOLIDADOS_VAC_RegistroVacunacion = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_VAC_CONSOLIDADOS_VAC_RegistroVacunacion, 0, length);
			strReturn = new String(commonByteArray_VAC_CONSOLIDADOS_VAC_RegistroVacunacion, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_VAC_CONSOLIDADOS_VAC_RegistroVacunacion) {

        	try {

        		int length = 0;
		
					this.moment = readDate(dis);
					
					this.pid = readString(dis);
					
					this.root_pid = readString(dis);
					
					this.father_pid = readString(dis);
					
					this.project = readString(dis);
					
					this.job = readString(dis);
					
					this.context = readString(dis);
					
						this.priority = readInteger(dis);
					
					this.type = readString(dis);
					
					this.origin = readString(dis);
					
					this.message = readString(dis);
					
						this.code = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_VAC_CONSOLIDADOS_VAC_RegistroVacunacion) {

        	try {

        		int length = 0;
		
					this.moment = readDate(dis);
					
					this.pid = readString(dis);
					
					this.root_pid = readString(dis);
					
					this.father_pid = readString(dis);
					
					this.project = readString(dis);
					
					this.job = readString(dis);
					
					this.context = readString(dis);
					
						this.priority = readInteger(dis);
					
					this.type = readString(dis);
					
					this.origin = readString(dis);
					
					this.message = readString(dis);
					
						this.code = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.pid,dos);
					
					// String
				
						writeString(this.root_pid,dos);
					
					// String
				
						writeString(this.father_pid,dos);
					
					// String
				
						writeString(this.project,dos);
					
					// String
				
						writeString(this.job,dos);
					
					// String
				
						writeString(this.context,dos);
					
					// Integer
				
						writeInteger(this.priority,dos);
					
					// String
				
						writeString(this.type,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.message,dos);
					
					// Integer
				
						writeInteger(this.code,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.pid,dos);
					
					// String
				
						writeString(this.root_pid,dos);
					
					// String
				
						writeString(this.father_pid,dos);
					
					// String
				
						writeString(this.project,dos);
					
					// String
				
						writeString(this.job,dos);
					
					// String
				
						writeString(this.context,dos);
					
					// Integer
				
						writeInteger(this.priority,dos);
					
					// String
				
						writeString(this.type,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.message,dos);
					
					// Integer
				
						writeInteger(this.code,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("moment="+String.valueOf(moment));
		sb.append(",pid="+pid);
		sb.append(",root_pid="+root_pid);
		sb.append(",father_pid="+father_pid);
		sb.append(",project="+project);
		sb.append(",job="+job);
		sb.append(",context="+context);
		sb.append(",priority="+String.valueOf(priority));
		sb.append(",type="+type);
		sb.append(",origin="+origin);
		sb.append(",message="+message);
		sb.append(",code="+String.valueOf(code));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row2Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row3Struct implements routines.system.IPersistableRow<row3Struct> {
    final static byte[] commonByteArrayLock_VAC_CONSOLIDADOS_VAC_RegistroVacunacion = new byte[0];
    static byte[] commonByteArray_VAC_CONSOLIDADOS_VAC_RegistroVacunacion = new byte[0];

	
			    public java.util.Date moment;

				public java.util.Date getMoment () {
					return this.moment;
				}

				public Boolean momentIsNullable(){
				    return true;
				}
				public Boolean momentIsKey(){
				    return false;
				}
				public Integer momentLength(){
				    return 0;
				}
				public Integer momentPrecision(){
				    return 0;
				}
				public String momentDefault(){
				
					return null;
				
				}
				public String momentComment(){
				
				    return null;
				
				}
				public String momentPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String momentOriginalDbColumnName(){
				
					return "moment";
				
				}

				
			    public String pid;

				public String getPid () {
					return this.pid;
				}

				public Boolean pidIsNullable(){
				    return true;
				}
				public Boolean pidIsKey(){
				    return false;
				}
				public Integer pidLength(){
				    return 20;
				}
				public Integer pidPrecision(){
				    return 0;
				}
				public String pidDefault(){
				
					return null;
				
				}
				public String pidComment(){
				
				    return null;
				
				}
				public String pidPattern(){
				
				    return null;
				
				}
				public String pidOriginalDbColumnName(){
				
					return "pid";
				
				}

				
			    public String root_pid;

				public String getRoot_pid () {
					return this.root_pid;
				}

				public Boolean root_pidIsNullable(){
				    return true;
				}
				public Boolean root_pidIsKey(){
				    return false;
				}
				public Integer root_pidLength(){
				    return 20;
				}
				public Integer root_pidPrecision(){
				    return 0;
				}
				public String root_pidDefault(){
				
					return null;
				
				}
				public String root_pidComment(){
				
				    return null;
				
				}
				public String root_pidPattern(){
				
				    return null;
				
				}
				public String root_pidOriginalDbColumnName(){
				
					return "root_pid";
				
				}

				
			    public String father_pid;

				public String getFather_pid () {
					return this.father_pid;
				}

				public Boolean father_pidIsNullable(){
				    return true;
				}
				public Boolean father_pidIsKey(){
				    return false;
				}
				public Integer father_pidLength(){
				    return 20;
				}
				public Integer father_pidPrecision(){
				    return 0;
				}
				public String father_pidDefault(){
				
					return null;
				
				}
				public String father_pidComment(){
				
				    return null;
				
				}
				public String father_pidPattern(){
				
				    return null;
				
				}
				public String father_pidOriginalDbColumnName(){
				
					return "father_pid";
				
				}

				
			    public String project;

				public String getProject () {
					return this.project;
				}

				public Boolean projectIsNullable(){
				    return true;
				}
				public Boolean projectIsKey(){
				    return false;
				}
				public Integer projectLength(){
				    return 50;
				}
				public Integer projectPrecision(){
				    return 0;
				}
				public String projectDefault(){
				
					return null;
				
				}
				public String projectComment(){
				
				    return null;
				
				}
				public String projectPattern(){
				
				    return null;
				
				}
				public String projectOriginalDbColumnName(){
				
					return "project";
				
				}

				
			    public String job;

				public String getJob () {
					return this.job;
				}

				public Boolean jobIsNullable(){
				    return true;
				}
				public Boolean jobIsKey(){
				    return false;
				}
				public Integer jobLength(){
				    return 255;
				}
				public Integer jobPrecision(){
				    return 0;
				}
				public String jobDefault(){
				
					return null;
				
				}
				public String jobComment(){
				
				    return null;
				
				}
				public String jobPattern(){
				
				    return null;
				
				}
				public String jobOriginalDbColumnName(){
				
					return "job";
				
				}

				
			    public String context;

				public String getContext () {
					return this.context;
				}

				public Boolean contextIsNullable(){
				    return true;
				}
				public Boolean contextIsKey(){
				    return false;
				}
				public Integer contextLength(){
				    return 50;
				}
				public Integer contextPrecision(){
				    return 0;
				}
				public String contextDefault(){
				
					return null;
				
				}
				public String contextComment(){
				
				    return null;
				
				}
				public String contextPattern(){
				
				    return null;
				
				}
				public String contextOriginalDbColumnName(){
				
					return "context";
				
				}

				
			    public Integer priority;

				public Integer getPriority () {
					return this.priority;
				}

				public Boolean priorityIsNullable(){
				    return true;
				}
				public Boolean priorityIsKey(){
				    return false;
				}
				public Integer priorityLength(){
				    return 3;
				}
				public Integer priorityPrecision(){
				    return 0;
				}
				public String priorityDefault(){
				
					return "";
				
				}
				public String priorityComment(){
				
				    return null;
				
				}
				public String priorityPattern(){
				
				    return null;
				
				}
				public String priorityOriginalDbColumnName(){
				
					return "priority";
				
				}

				
			    public String type;

				public String getType () {
					return this.type;
				}

				public Boolean typeIsNullable(){
				    return true;
				}
				public Boolean typeIsKey(){
				    return false;
				}
				public Integer typeLength(){
				    return 255;
				}
				public Integer typePrecision(){
				    return 0;
				}
				public String typeDefault(){
				
					return null;
				
				}
				public String typeComment(){
				
				    return null;
				
				}
				public String typePattern(){
				
				    return null;
				
				}
				public String typeOriginalDbColumnName(){
				
					return "type";
				
				}

				
			    public String origin;

				public String getOrigin () {
					return this.origin;
				}

				public Boolean originIsNullable(){
				    return true;
				}
				public Boolean originIsKey(){
				    return false;
				}
				public Integer originLength(){
				    return 255;
				}
				public Integer originPrecision(){
				    return 0;
				}
				public String originDefault(){
				
					return null;
				
				}
				public String originComment(){
				
				    return null;
				
				}
				public String originPattern(){
				
				    return null;
				
				}
				public String originOriginalDbColumnName(){
				
					return "origin";
				
				}

				
			    public String message;

				public String getMessage () {
					return this.message;
				}

				public Boolean messageIsNullable(){
				    return true;
				}
				public Boolean messageIsKey(){
				    return false;
				}
				public Integer messageLength(){
				    return 255;
				}
				public Integer messagePrecision(){
				    return 0;
				}
				public String messageDefault(){
				
					return null;
				
				}
				public String messageComment(){
				
				    return null;
				
				}
				public String messagePattern(){
				
				    return null;
				
				}
				public String messageOriginalDbColumnName(){
				
					return "message";
				
				}

				
			    public Integer code;

				public Integer getCode () {
					return this.code;
				}

				public Boolean codeIsNullable(){
				    return true;
				}
				public Boolean codeIsKey(){
				    return false;
				}
				public Integer codeLength(){
				    return 3;
				}
				public Integer codePrecision(){
				    return 0;
				}
				public String codeDefault(){
				
					return "";
				
				}
				public String codeComment(){
				
				    return null;
				
				}
				public String codePattern(){
				
				    return null;
				
				}
				public String codeOriginalDbColumnName(){
				
					return "code";
				
				}

				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_VAC_CONSOLIDADOS_VAC_RegistroVacunacion.length) {
				if(length < 1024 && commonByteArray_VAC_CONSOLIDADOS_VAC_RegistroVacunacion.length == 0) {
   					commonByteArray_VAC_CONSOLIDADOS_VAC_RegistroVacunacion = new byte[1024];
				} else {
   					commonByteArray_VAC_CONSOLIDADOS_VAC_RegistroVacunacion = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_VAC_CONSOLIDADOS_VAC_RegistroVacunacion, 0, length);
			strReturn = new String(commonByteArray_VAC_CONSOLIDADOS_VAC_RegistroVacunacion, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_VAC_CONSOLIDADOS_VAC_RegistroVacunacion.length) {
				if(length < 1024 && commonByteArray_VAC_CONSOLIDADOS_VAC_RegistroVacunacion.length == 0) {
   					commonByteArray_VAC_CONSOLIDADOS_VAC_RegistroVacunacion = new byte[1024];
				} else {
   					commonByteArray_VAC_CONSOLIDADOS_VAC_RegistroVacunacion = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_VAC_CONSOLIDADOS_VAC_RegistroVacunacion, 0, length);
			strReturn = new String(commonByteArray_VAC_CONSOLIDADOS_VAC_RegistroVacunacion, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_VAC_CONSOLIDADOS_VAC_RegistroVacunacion) {

        	try {

        		int length = 0;
		
					this.moment = readDate(dis);
					
					this.pid = readString(dis);
					
					this.root_pid = readString(dis);
					
					this.father_pid = readString(dis);
					
					this.project = readString(dis);
					
					this.job = readString(dis);
					
					this.context = readString(dis);
					
						this.priority = readInteger(dis);
					
					this.type = readString(dis);
					
					this.origin = readString(dis);
					
					this.message = readString(dis);
					
						this.code = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_VAC_CONSOLIDADOS_VAC_RegistroVacunacion) {

        	try {

        		int length = 0;
		
					this.moment = readDate(dis);
					
					this.pid = readString(dis);
					
					this.root_pid = readString(dis);
					
					this.father_pid = readString(dis);
					
					this.project = readString(dis);
					
					this.job = readString(dis);
					
					this.context = readString(dis);
					
						this.priority = readInteger(dis);
					
					this.type = readString(dis);
					
					this.origin = readString(dis);
					
					this.message = readString(dis);
					
						this.code = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.pid,dos);
					
					// String
				
						writeString(this.root_pid,dos);
					
					// String
				
						writeString(this.father_pid,dos);
					
					// String
				
						writeString(this.project,dos);
					
					// String
				
						writeString(this.job,dos);
					
					// String
				
						writeString(this.context,dos);
					
					// Integer
				
						writeInteger(this.priority,dos);
					
					// String
				
						writeString(this.type,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.message,dos);
					
					// Integer
				
						writeInteger(this.code,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.pid,dos);
					
					// String
				
						writeString(this.root_pid,dos);
					
					// String
				
						writeString(this.father_pid,dos);
					
					// String
				
						writeString(this.project,dos);
					
					// String
				
						writeString(this.job,dos);
					
					// String
				
						writeString(this.context,dos);
					
					// Integer
				
						writeInteger(this.priority,dos);
					
					// String
				
						writeString(this.type,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.message,dos);
					
					// Integer
				
						writeInteger(this.code,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("moment="+String.valueOf(moment));
		sb.append(",pid="+pid);
		sb.append(",root_pid="+root_pid);
		sb.append(",father_pid="+father_pid);
		sb.append(",project="+project);
		sb.append(",job="+job);
		sb.append(",context="+context);
		sb.append(",priority="+String.valueOf(priority));
		sb.append(",type="+type);
		sb.append(",origin="+origin);
		sb.append(",message="+message);
		sb.append(",code="+String.valueOf(code));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row3Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tLogCatcher_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tLogCatcher_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row3Struct row3 = new row3Struct();
row3Struct row2 = row3;
mailStruct mail = new mailStruct();






	
	/**
	 * [tRunJob_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tRunJob_1", false);
		start_Hash.put("tRunJob_1", System.currentTimeMillis());
		
	
	currentComponent="tRunJob_1";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"mail");
					}
				
		int tos_count_tRunJob_1 = 0;
		
class DealChildJobLibrary_tRunJob_1 {

	public String replaceJarPathsFromCrcMap(String originalClassPathLine) throws java.lang.Exception {
		String classPathLine = "";
		String crcMapPath = new java.io.File("../crcMap").getCanonicalPath();
		if (isNeedAddLibsPath( crcMapPath)) {
			java.util.Map<String, String> crcMap = null;
			java.io.ObjectInputStream ois = new java.io.ObjectInputStream(new java.io.FileInputStream(crcMapPath)) {
				@Override
				public Class<?> resolveClass(java.io.ObjectStreamClass desc) throws java.io.IOException, ClassNotFoundException {
					if(!"java.util.HashMap".equals(desc.getName())) {
						throw new java.io.InvalidClassException("Unauthorized deserialization attempt : " + desc.getName());
					}
					return super.resolveClass(desc);
				}
			};
			crcMap = (java.util.Map<String, String>) ois.readObject();
			ois.close();
			classPathLine = addLibsPath(originalClassPathLine, crcMap);
		} else {
			classPathLine = originalClassPathLine;
		}
		return classPathLine;
	}
	
	private boolean isNeedAddLibsPath(String crcMapPath) {
		if (!(new java.io.File(crcMapPath).exists())) {// when not use cache
			return false;
		}
		return true;
	}
	
	
	private String addLibsPath(String line, java.util.Map<String, String> crcMap) {
		for (java.util.Map.Entry<String, String> entry : crcMap.entrySet()) {
			line = adaptLibPaths(line, entry);
		}
		return line;
	}
	
	private String adaptLibPaths(String line, java.util.Map.Entry<String, String> entry) {
		String jarName = entry.getValue();
		String crc = entry.getKey();
		String libStringFinder = "../lib/" + jarName;
		if (line.contains(libStringFinder)) {
			line = line.replace(libStringFinder, "../../../cache/lib/" + crc + "/" + jarName);
		} else if (line.contains(":$ROOT_PATH/" + jarName + ":")) {
			line = line.replace(":$ROOT_PATH/" + jarName + ":", ":$ROOT_PATH/../../../cache/lib/" + crc + "/" + jarName + ":");
		} else if (line.contains(";" + jarName + ";")) {
			line = line.replace(";" + jarName + ";", ";../../../cache/lib/" + crc + "/" + jarName + ";");
		}
		return line;
	}
	
}
	DealChildJobLibrary_tRunJob_1 dealChildJobLibrary_tRunJob_1 = new DealChildJobLibrary_tRunJob_1();

	class JVMArgumentHelper_tRunJob_1 {
		
		
		
		private void addClasspath(java.util.List<String> target_argument_list, String job_origin_classpath) {
			
			String extra_classpath = null;
			String path_separator = System.getProperty("path.separator");
			if (path_separator != null && path_separator.length() > 1) {
				throw new RuntimeException("path separator should be single character");
			}
			
			if(extra_classpath!=null && !extra_classpath.isEmpty()) {
				if(extra_classpath.endsWith(path_separator)) {
					target_argument_list.add(extra_classpath+job_origin_classpath);
				} else if(extra_classpath.contains(path_separator)) {
					target_argument_list.add(concatStr(extra_classpath, path_separator, job_origin_classpath));
				} else if(extra_classpath.endsWith(":")) {
					target_argument_list.add(extra_classpath.replace(":", path_separator)+job_origin_classpath);
				} else if(extra_classpath.endsWith(";")) {
					target_argument_list.add(extra_classpath.replace(";", path_separator)+job_origin_classpath);
				} else if(extra_classpath.contains(":")) {
					target_argument_list.add(concatStr(extra_classpath.replace(":", path_separator), path_separator, job_origin_classpath));
				} else if(extra_classpath.contains(";")) {
					target_argument_list.add(concatStr(extra_classpath.replace(";", path_separator), path_separator, job_origin_classpath));
				} else {
					target_argument_list.add(concatStr(extra_classpath, path_separator, job_origin_classpath));
				}
				return;
			}
			
			target_argument_list.add(job_origin_classpath);
		}
		
		private String concatStr(String s1, String s2, String s3) {
			java.lang.StringBuilder strB = new java.lang.StringBuilder();
			strB.append(s1).append(s2).append(s3);
			return strB.toString();
		}
		
		public void addArgumentsTo(java.util.List<String> target_argument_list, String argument_from_child) {
			addArgumentsTo(target_argument_list, argument_from_child, false);
		}
		
		public void addArgumentsTo(java.util.List<String> target_argument_list, String argument_from_child, boolean isCP) {
			if(isCP) {
				addClasspath(target_argument_list, argument_from_child);
				return;
			}
		
			
			
			
			target_argument_list.add(argument_from_child);
			
		}
		
		
	}
	
	JVMArgumentHelper_tRunJob_1 jvm_argument_helper_tRunJob_1 = new JVMArgumentHelper_tRunJob_1();
	
	String audit_jar_path_tRunJob_1 = System.getProperty("classpath.extended");
	

 



/**
 * [tRunJob_1 begin ] stop
 */



	
	/**
	 * [tMap_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_3", false);
		start_Hash.put("tMap_3", System.currentTimeMillis());
		
	
	currentComponent="tMap_3";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row2");
					}
				
		int tos_count_tMap_3 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_3__Struct  {
}
Var__tMap_3__Struct Var__tMap_3 = new Var__tMap_3__Struct();
// ###############################

// ###############################
// # Outputs initialization
mailStruct mail_tmp = new mailStruct();
// ###############################

        
        



        









 



/**
 * [tMap_3 begin ] stop
 */



	
	/**
	 * [tFileOutputDelimited_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputDelimited_1", false);
		start_Hash.put("tFileOutputDelimited_1", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputDelimited_1";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row3");
					}
				
		int tos_count_tFileOutputDelimited_1 = 0;
		

String fileName_tFileOutputDelimited_1 = "";
    fileName_tFileOutputDelimited_1 = (new java.io.File(context.LOGS_ERROR)).getAbsolutePath().replace("\\","/");
    String fullName_tFileOutputDelimited_1 = null;
    String extension_tFileOutputDelimited_1 = null;
    String directory_tFileOutputDelimited_1 = null;
    if((fileName_tFileOutputDelimited_1.indexOf("/") != -1)) {
        if(fileName_tFileOutputDelimited_1.lastIndexOf(".") < fileName_tFileOutputDelimited_1.lastIndexOf("/")) {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
            extension_tFileOutputDelimited_1 = "";
        } else {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0, fileName_tFileOutputDelimited_1.lastIndexOf("."));
            extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(fileName_tFileOutputDelimited_1.lastIndexOf("."));
        }
        directory_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0, fileName_tFileOutputDelimited_1.lastIndexOf("/"));
    } else {
        if(fileName_tFileOutputDelimited_1.lastIndexOf(".") != -1) {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0, fileName_tFileOutputDelimited_1.lastIndexOf("."));
            extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(fileName_tFileOutputDelimited_1.lastIndexOf("."));
        } else {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
            extension_tFileOutputDelimited_1 = "";
        }
        directory_tFileOutputDelimited_1 = "";
    }
    boolean isFileGenerated_tFileOutputDelimited_1 = true;
    java.io.File filetFileOutputDelimited_1 = new java.io.File(fileName_tFileOutputDelimited_1);
    globalMap.put("tFileOutputDelimited_1_FILE_NAME",fileName_tFileOutputDelimited_1);
        if(filetFileOutputDelimited_1.exists()){
            isFileGenerated_tFileOutputDelimited_1 = false;
        }
            int nb_line_tFileOutputDelimited_1 = 0;
            int splitedFileNo_tFileOutputDelimited_1 = 0;
            int currentRow_tFileOutputDelimited_1 = 0;

            final String OUT_DELIM_tFileOutputDelimited_1 = /** Start field tFileOutputDelimited_1:FIELDSEPARATOR */";"/** End field tFileOutputDelimited_1:FIELDSEPARATOR */;

            final String OUT_DELIM_ROWSEP_tFileOutputDelimited_1 = /** Start field tFileOutputDelimited_1:ROWSEPARATOR */"\n"/** End field tFileOutputDelimited_1:ROWSEPARATOR */;

                    //create directory only if not exists
                    if(directory_tFileOutputDelimited_1 != null && directory_tFileOutputDelimited_1.trim().length() != 0) {
                        java.io.File dir_tFileOutputDelimited_1 = new java.io.File(directory_tFileOutputDelimited_1);
                        if(!dir_tFileOutputDelimited_1.exists()) {
                            dir_tFileOutputDelimited_1.mkdirs();
                        }
                    }

                        //routines.system.Row
                        java.io.Writer outtFileOutputDelimited_1 = null;

                        outtFileOutputDelimited_1 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
                        new java.io.FileOutputStream(fileName_tFileOutputDelimited_1, true),"ISO-8859-15"));
                resourceMap.put("out_tFileOutputDelimited_1", outtFileOutputDelimited_1);
                                    if(filetFileOutputDelimited_1.length()==0){
                                        outtFileOutputDelimited_1.write("moment");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("pid");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("root_pid");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("father_pid");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("project");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("job");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("context");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("priority");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("type");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("origin");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("message");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("code");
                                        outtFileOutputDelimited_1.write(OUT_DELIM_ROWSEP_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.flush();
                                    }


resourceMap.put("nb_line_tFileOutputDelimited_1", nb_line_tFileOutputDelimited_1);

 



/**
 * [tFileOutputDelimited_1 begin ] stop
 */



	
	/**
	 * [tLogCatcher_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogCatcher_1", false);
		start_Hash.put("tLogCatcher_1", System.currentTimeMillis());
		
	
	currentComponent="tLogCatcher_1";
	
	
		int tos_count_tLogCatcher_1 = 0;
		

try {
	for (LogCatcherUtils.LogCatcherMessage lcm : tLogCatcher_1.getMessages()) {
		row3.type = lcm.getType();
		row3.origin = (lcm.getOrigin()==null || lcm.getOrigin().length()<1 ? null : lcm.getOrigin());
		row3.priority = lcm.getPriority();
		row3.message = lcm.getMessage();
		row3.code = lcm.getCode();
		
		row3.moment = java.util.Calendar.getInstance().getTime();
	
    	row3.pid = pid;
		row3.root_pid = rootPid;
		row3.father_pid = fatherPid;
	
    	row3.project = projectName;
    	row3.job = jobName;
    	row3.context = contextStr;
    		
 



/**
 * [tLogCatcher_1 begin ] stop
 */
	
	/**
	 * [tLogCatcher_1 main ] start
	 */

	

	
	
	currentComponent="tLogCatcher_1";
	
	

 


	tos_count_tLogCatcher_1++;

/**
 * [tLogCatcher_1 main ] stop
 */
	
	/**
	 * [tLogCatcher_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogCatcher_1";
	
	

 



/**
 * [tLogCatcher_1 process_data_begin ] stop
 */

	
	/**
	 * [tFileOutputDelimited_1 main ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row3"
						
						);
					}
					


                    StringBuilder sb_tFileOutputDelimited_1 = new StringBuilder();
                            if(row3.moment != null) {
                        sb_tFileOutputDelimited_1.append(
                            FormatterUtils.format_Date(row3.moment, "yyyy-MM-dd HH:mm:ss")
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row3.pid != null) {
                        sb_tFileOutputDelimited_1.append(
                            row3.pid
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row3.root_pid != null) {
                        sb_tFileOutputDelimited_1.append(
                            row3.root_pid
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row3.father_pid != null) {
                        sb_tFileOutputDelimited_1.append(
                            row3.father_pid
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row3.project != null) {
                        sb_tFileOutputDelimited_1.append(
                            row3.project
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row3.job != null) {
                        sb_tFileOutputDelimited_1.append(
                            row3.job
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row3.context != null) {
                        sb_tFileOutputDelimited_1.append(
                            row3.context
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row3.priority != null) {
                        sb_tFileOutputDelimited_1.append(
                            row3.priority
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row3.type != null) {
                        sb_tFileOutputDelimited_1.append(
                            row3.type
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row3.origin != null) {
                        sb_tFileOutputDelimited_1.append(
                            row3.origin
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row3.message != null) {
                        sb_tFileOutputDelimited_1.append(
                            row3.message
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row3.code != null) {
                        sb_tFileOutputDelimited_1.append(
                            row3.code
                        );
                            }
                    sb_tFileOutputDelimited_1.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_1);


                    nb_line_tFileOutputDelimited_1++;
                    resourceMap.put("nb_line_tFileOutputDelimited_1", nb_line_tFileOutputDelimited_1);

                        outtFileOutputDelimited_1.write(sb_tFileOutputDelimited_1.toString());




 
     row2 = row3;


	tos_count_tFileOutputDelimited_1++;

/**
 * [tFileOutputDelimited_1 main ] stop
 */
	
	/**
	 * [tFileOutputDelimited_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";
	
	

 



/**
 * [tFileOutputDelimited_1 process_data_begin ] stop
 */

	
	/**
	 * [tMap_3 main ] start
	 */

	

	
	
	currentComponent="tMap_3";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row2"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_3 = false;
		
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_3 = false;
		boolean mainRowRejected_tMap_3 = false;
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_3__Struct Var = Var__tMap_3;// ###############################
        // ###############################
        // # Output tables

mail = null;


// # Output table : 'mail'
mail_tmp.moment = row2.moment ;
mail_tmp.pid = row2.pid ;
mail_tmp.root_pid = row2.root_pid ;
mail_tmp.father_pid = row2.father_pid ;
mail_tmp.project = row2.project ;
mail_tmp.job = row2.job ;
mail_tmp.context = row2.context ;
mail_tmp.priority = row2.priority ;
mail_tmp.type = row2.type ;
mail_tmp.origin = row2.origin ;
mail_tmp.message = row2.message ;
mail_tmp.code = row2.code ;
mail = mail_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_3 = false;










 


	tos_count_tMap_3++;

/**
 * [tMap_3 main ] stop
 */
	
	/**
	 * [tMap_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_3";
	
	

 



/**
 * [tMap_3 process_data_begin ] stop
 */
// Start of branch "mail"
if(mail != null) { 



	
	/**
	 * [tRunJob_1 main ] start
	 */

	

	
	
	currentComponent="tRunJob_1";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"mail"
						
						);
					}
					
	java.util.List<String> paraList_tRunJob_1 = new java.util.ArrayList<String>();
	
			
			String osName_tRunJob_1 = System.getProperty("os.name");
			if (osName_tRunJob_1 != null && osName_tRunJob_1.toLowerCase(java.util.Locale.US).startsWith("win")){
				
						paraList_tRunJob_1.add("java");
						String m2 = System.getProperty("talend.component.manager.m2.repository");
						if (m2 != null){
							paraList_tRunJob_1.add("-Dtalend.component.manager.m2.repository=" + m2);
						}
						
						if (Boolean.getBoolean("propagateLoggingConfiguration")) {
							String log4j1_config_tRunJob_1 = System.getProperty("log4j.configuration");
							if (log4j1_config_tRunJob_1 != null){
								paraList_tRunJob_1.add("-Dlog4j.configuration=" + log4j1_config_tRunJob_1);
							}
							String log4j2_config_tRunJob_1 = System.getProperty("log4j.configurationFile");
							if (log4j2_config_tRunJob_1 != null){
								paraList_tRunJob_1.add("-Dlog4j.configurationFile=" + log4j2_config_tRunJob_1);
							}
							if (log4j1_config_tRunJob_1 != null || log4j2_config_tRunJob_1 != null) {
								paraList_tRunJob_1.add("-DpropagateLoggingConfiguration=true");
							}
						}
						
						if(enableLogStash){
							System.getProperties().stringPropertyNames().stream()
								.filter(it -> it.startsWith("audit."))
								.forEach(key -> paraList_tRunJob_1.add("-D" + key + "=" + System.getProperty(key)));
						}
							
						System.getProperties().stringPropertyNames().stream()
							.filter(it -> it.startsWith("runtime.lineage.") || "classpath.extended".equals(it))
							.forEach(key -> paraList_tRunJob_1.add("-D" + key + "=" + System.getProperty(key)));
					
		      					jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "-Dtalend.component.manager.m2.repository=../lib");
		      				
		      					jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "-Xms256M");
		      				
		      					jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "-Xmx1024M");
		      				
		      					jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "-cp");
		      				
              					String classpath_tRunJob_1_5 = ".;../lib/routines.jar;../lib/log4j-slf4j-impl-2.17.1.jar;../lib/log4j-api-2.17.1.jar;../lib/log4j-core-2.17.1.jar;../lib/activation-1.1.jar;../lib/jakarta.mail-1.6.7.jar;../lib/xercesImpl-2.12.2.jar;../lib/xml-apis-1.4.01.jar;../lib/slf4j-api-1.7.34.jar;../lib/crypto-utils-7.1.16.jar;../lib/TalendSAX.jar;../lib/jboss-marshalling-2.0.12.Final.jar;../lib/dom4j-2.1.3.jar;mail_0_1.jar;";
              					
              					if(audit_jar_path_tRunJob_1!=null && !audit_jar_path_tRunJob_1.isEmpty()) {
		      						classpath_tRunJob_1_5 += audit_jar_path_tRunJob_1;
		      					}
		      					
	        					jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, dealChildJobLibrary_tRunJob_1.replaceJarPathsFromCrcMap(classpath_tRunJob_1_5), true);
		      				
		      					jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "vac_consolidados_vac.mail_0_1.Mail");
		      				
		      					jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "--father_pid="+pid);
		      				
		      					jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "--root_pid="+rootPid);
		      				
		      					jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "--father_node=tRunJob_1");
		      				
		      					jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "--context=Default");
		      				
		      					jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "%*");
		      				
			} else {
	      		
						paraList_tRunJob_1.add("java");
						String m2 = System.getProperty("talend.component.manager.m2.repository");
						if (m2 != null){
							paraList_tRunJob_1.add("-Dtalend.component.manager.m2.repository=" + m2);
						}
						
						if (Boolean.getBoolean("propagateLoggingConfiguration")) {
							String log4j1_config_tRunJob_1 = System.getProperty("log4j.configuration");
							if (log4j1_config_tRunJob_1 != null){
								paraList_tRunJob_1.add("-Dlog4j.configuration=" + log4j1_config_tRunJob_1);
							}
							String log4j2_config_tRunJob_1 = System.getProperty("log4j.configurationFile");
							if (log4j2_config_tRunJob_1 != null){
								paraList_tRunJob_1.add("-Dlog4j.configurationFile=" + log4j2_config_tRunJob_1);
							}
							if (log4j1_config_tRunJob_1 != null || log4j2_config_tRunJob_1 != null) {
								paraList_tRunJob_1.add("-DpropagateLoggingConfiguration=true");
							}
						}
						
						if(enableLogStash){
							System.getProperties().stringPropertyNames().stream()
								.filter(it -> it.startsWith("audit."))
								.forEach(key -> paraList_tRunJob_1.add("-D" + key + "=" + System.getProperty(key)));
						}
							
						System.getProperties().stringPropertyNames().stream()
							.filter(it -> it.startsWith("runtime.lineage.") || "classpath.extended".equals(it))
							.forEach(key -> paraList_tRunJob_1.add("-D" + key + "=" + System.getProperty(key)));
					
								jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "-Dtalend.component.manager.m2.repository=../lib");
		      				
								jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "-Xms256M");
		      				
								jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "-Xmx1024M");
		      				
								jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "-cp");
		      				
		      					String classpath_tRunJob_1_5 = ".:$ROOT_PATH:$ROOT_PATH/../lib/routines.jar:$ROOT_PATH/../lib/log4j-slf4j-impl-2.17.1.jar:$ROOT_PATH/../lib/log4j-api-2.17.1.jar:$ROOT_PATH/../lib/log4j-core-2.17.1.jar:$ROOT_PATH/../lib/activation-1.1.jar:$ROOT_PATH/../lib/jakarta.mail-1.6.7.jar:$ROOT_PATH/../lib/xercesImpl-2.12.2.jar:$ROOT_PATH/../lib/xml-apis-1.4.01.jar:$ROOT_PATH/../lib/slf4j-api-1.7.34.jar:$ROOT_PATH/../lib/crypto-utils-7.1.16.jar:$ROOT_PATH/../lib/TalendSAX.jar:$ROOT_PATH/../lib/jboss-marshalling-2.0.12.Final.jar:$ROOT_PATH/../lib/dom4j-2.1.3.jar:$ROOT_PATH/mail_0_1.jar:";
		      					
		      					if(audit_jar_path_tRunJob_1!=null && !audit_jar_path_tRunJob_1.isEmpty()) {
		      						classpath_tRunJob_1_5 += audit_jar_path_tRunJob_1;
		      					}
		      					
								jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, dealChildJobLibrary_tRunJob_1.replaceJarPathsFromCrcMap(classpath_tRunJob_1_5).replace("$ROOT_PATH",System.getProperty("user.dir")), true);
		      				
								jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "vac_consolidados_vac.mail_0_1.Mail");
		      				
								jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "--father_pid="+pid);
		      				
								jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "--root_pid="+rootPid);
		      				
								jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "--father_node=tRunJob_1");
		      				
								jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "--context=Default");
		      				
								jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "$@");
		      				
			}

			
			
	  	
		if(enableLogStash){
			paraList_tRunJob_1.add("--audit.enabled="+enableLogStash);
		}
		
	//for feature:10589
	
		paraList_tRunJob_1.add("--stat_port=" + null);
	

	if(resuming_logs_dir_path != null){
		paraList_tRunJob_1.add("--resuming_logs_dir_path=" + resuming_logs_dir_path);
	}
	String childResumePath_tRunJob_1 = ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path);
	String tRunJobName_tRunJob_1 = ResumeUtil.getRighttRunJob(resuming_checkpoint_path);
	if("tRunJob_1".equals(tRunJobName_tRunJob_1) && childResumePath_tRunJob_1 != null){
		paraList_tRunJob_1.add("--resuming_checkpoint_path=" + ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path));
	}
	paraList_tRunJob_1.add("--parent_part_launcher=JOB:" + jobName + "/NODE:tRunJob_1");
	
	java.util.Map<String, Object> parentContextMap_tRunJob_1 = new java.util.HashMap<String, Object>();

	
		
		context.synchronizeContext();
            class ContextProcessor_tRunJob_1 {
                    private void transmitContext_0() {
                    parentContextMap_tRunJob_1.put("DAPLICADAS_LIST", context.DAPLICADAS_LIST);
                    paraList_tRunJob_1.add("--context_type " + "DAPLICADAS_LIST" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("CARPETA_SALIDA", context.CARPETA_SALIDA);
                    paraList_tRunJob_1.add("--context_type " + "CARPETA_SALIDA" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("NOMBRE_ARCHIVO", context.NOMBRE_ARCHIVO);
                    paraList_tRunJob_1.add("--context_type " + "NOMBRE_ARCHIVO" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("NOMBRE_ZIP", context.NOMBRE_ZIP);
                    paraList_tRunJob_1.add("--context_type " + "NOMBRE_ZIP" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("ES_WEB_SERVICE", context.ES_WEB_SERVICE);
                    paraList_tRunJob_1.add("--context_type " + "ES_WEB_SERVICE" + "=" + "id_Boolean");
                    parentContextMap_tRunJob_1.put("CONTADOR", context.CONTADOR);
                    paraList_tRunJob_1.add("--context_type " + "CONTADOR" + "=" + "id_Integer");
                    parentContextMap_tRunJob_1.put("db_destino_AdditionalParams", context.db_destino_AdditionalParams);
                    paraList_tRunJob_1.add("--context_type " + "db_destino_AdditionalParams" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("db_destino_Login", context.db_destino_Login);
                    paraList_tRunJob_1.add("--context_type " + "db_destino_Login" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("db_destino_Password", context.db_destino_Password);
                    paraList_tRunJob_1.add("--context_type " + "db_destino_Password" + "=" + "id_Password");
                    parentContextMap_tRunJob_1.put("db_destino_Port", context.db_destino_Port);
                    paraList_tRunJob_1.add("--context_type " + "db_destino_Port" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("db_destino_Schema", context.db_destino_Schema);
                    paraList_tRunJob_1.add("--context_type " + "db_destino_Schema" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("db_destino_Server", context.db_destino_Server);
                    paraList_tRunJob_1.add("--context_type " + "db_destino_Server" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("db_destino_ServiceName", context.db_destino_ServiceName);
                    paraList_tRunJob_1.add("--context_type " + "db_destino_ServiceName" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("db_origen_AdditionalParams", context.db_origen_AdditionalParams);
                    paraList_tRunJob_1.add("--context_type " + "db_origen_AdditionalParams" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("db_origen_Login", context.db_origen_Login);
                    paraList_tRunJob_1.add("--context_type " + "db_origen_Login" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("db_origen_Password", context.db_origen_Password);
                    paraList_tRunJob_1.add("--context_type " + "db_origen_Password" + "=" + "id_Password");
                    parentContextMap_tRunJob_1.put("db_origen_Port", context.db_origen_Port);
                    paraList_tRunJob_1.add("--context_type " + "db_origen_Port" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("db_origen_Schema", context.db_origen_Schema);
                    paraList_tRunJob_1.add("--context_type " + "db_origen_Schema" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("db_origen_Server", context.db_origen_Server);
                    paraList_tRunJob_1.add("--context_type " + "db_origen_Server" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("db_origen_ServiceName", context.db_origen_ServiceName);
                    paraList_tRunJob_1.add("--context_type " + "db_origen_ServiceName" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("ACTUALIZACION", context.ACTUALIZACION);
                    paraList_tRunJob_1.add("--context_type " + "ACTUALIZACION" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("FECHA_FINAL", context.FECHA_FINAL);
                    paraList_tRunJob_1.add("--context_type " + "FECHA_FINAL" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("FECHA_INICIAL", context.FECHA_INICIAL);
                    paraList_tRunJob_1.add("--context_type " + "FECHA_INICIAL" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("FUERZA_ID", context.FUERZA_ID);
                    paraList_tRunJob_1.add("--context_type " + "FUERZA_ID" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("FUERZA_NOMBRE", context.FUERZA_NOMBRE);
                    paraList_tRunJob_1.add("--context_type " + "FUERZA_NOMBRE" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("TESQUEMA", context.TESQUEMA);
                    paraList_tRunJob_1.add("--context_type " + "TESQUEMA" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("UORG_ID", context.UORG_ID);
                    paraList_tRunJob_1.add("--context_type " + "UORG_ID" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("UORG_NOMBRE", context.UORG_NOMBRE);
                    paraList_tRunJob_1.add("--context_type " + "UORG_NOMBRE" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("BODEGA", context.BODEGA);
                    paraList_tRunJob_1.add("--context_type " + "BODEGA" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("ESTADO_EXEC", context.ESTADO_EXEC);
                    paraList_tRunJob_1.add("--context_type " + "ESTADO_EXEC" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("FECHA_EJECUCION", context.FECHA_EJECUCION);
                    paraList_tRunJob_1.add("--context_type " + "FECHA_EJECUCION" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("HORA_FINAL", context.HORA_FINAL);
                    paraList_tRunJob_1.add("--context_type " + "HORA_FINAL" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("HORA_INICIO", context.HORA_INICIO);
                    paraList_tRunJob_1.add("--context_type " + "HORA_INICIO" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("JOB", context.JOB);
                    paraList_tRunJob_1.add("--context_type " + "JOB" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("LOGS_ERROR", context.LOGS_ERROR);
                    paraList_tRunJob_1.add("--context_type " + "LOGS_ERROR" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("LOGS_EXECUTION", context.LOGS_EXECUTION);
                    paraList_tRunJob_1.add("--context_type " + "LOGS_EXECUTION" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("ORIGEN", context.ORIGEN);
                    paraList_tRunJob_1.add("--context_type " + "ORIGEN" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("STORAGE", context.STORAGE);
                    paraList_tRunJob_1.add("--context_type " + "STORAGE" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("MODULO", context.MODULO);
                    paraList_tRunJob_1.add("--context_type " + "MODULO" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("SARCHIVO_ID", context.SARCHIVO_ID);
                    paraList_tRunJob_1.add("--context_type " + "SARCHIVO_ID" + "=" + "id_BigDecimal");
                    parentContextMap_tRunJob_1.put("SIGLA", context.SIGLA);
                    paraList_tRunJob_1.add("--context_type " + "SIGLA" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("USUARIO_ID", context.USUARIO_ID);
                    paraList_tRunJob_1.add("--context_type " + "USUARIO_ID" + "=" + "id_BigDecimal");
                    parentContextMap_tRunJob_1.put("USUARIO_NOMBRE", context.USUARIO_NOMBRE);
                    paraList_tRunJob_1.add("--context_type " + "USUARIO_NOMBRE" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("TDOSIS_ID", context.TDOSIS_ID);
                    paraList_tRunJob_1.add("--context_type " + "TDOSIS_ID" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("PERIODO_INICIAL", context.PERIODO_INICIAL);
                    paraList_tRunJob_1.add("--context_type " + "PERIODO_INICIAL" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("DPTO_NOMBRE", context.DPTO_NOMBRE);
                    paraList_tRunJob_1.add("--context_type " + "DPTO_NOMBRE" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("MCPIO_NOMBRE", context.MCPIO_NOMBRE);
                    paraList_tRunJob_1.add("--context_type " + "MCPIO_NOMBRE" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("BIOLOGICO_NOMBRE", context.BIOLOGICO_NOMBRE);
                    paraList_tRunJob_1.add("--context_type " + "BIOLOGICO_NOMBRE" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("MCPIO_COD", context.MCPIO_COD);
                    paraList_tRunJob_1.add("--context_type " + "MCPIO_COD" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("TDOSIS_NOMBRE", context.TDOSIS_NOMBRE);
                    paraList_tRunJob_1.add("--context_type " + "TDOSIS_NOMBRE" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("PERIODO", context.PERIODO);
                    paraList_tRunJob_1.add("--context_type " + "PERIODO" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("BIOLOGICO_ID", context.BIOLOGICO_ID);
                    paraList_tRunJob_1.add("--context_type " + "BIOLOGICO_ID" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("PERIODO_FINAL", context.PERIODO_FINAL);
                    paraList_tRunJob_1.add("--context_type " + "PERIODO_FINAL" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("DPTO_COD", context.DPTO_COD);
                    paraList_tRunJob_1.add("--context_type " + "DPTO_COD" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("UORG_SOLICITUD_NOMBRE", context.UORG_SOLICITUD_NOMBRE);
                    paraList_tRunJob_1.add("--context_type " + "UORG_SOLICITUD_NOMBRE" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("FILTROS", context.FILTROS);
                    paraList_tRunJob_1.add("--context_type " + "FILTROS" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("UORG_SOLICITUD_ID", context.UORG_SOLICITUD_ID);
                    paraList_tRunJob_1.add("--context_type " + "UORG_SOLICITUD_ID" + "=" + "id_BigDecimal");
                    parentContextMap_tRunJob_1.put("TARCHIVO", context.TARCHIVO);
                    paraList_tRunJob_1.add("--context_type " + "TARCHIVO" + "=" + "id_String");
                        }
                    public void transmitAllContext() {
                        transmitContext_0();
                    }
            }
            new ContextProcessor_tRunJob_1().transmitAllContext();
		java.util.Enumeration<?> propertyNames_tRunJob_1 = context.propertyNames();
		while (propertyNames_tRunJob_1.hasMoreElements()) {
			String key_tRunJob_1 = (String) propertyNames_tRunJob_1.nextElement();
			Object value_tRunJob_1 = (Object) context.get(key_tRunJob_1);
			if(value_tRunJob_1!=null) {  
				
					paraList_tRunJob_1.add("--context_param " + key_tRunJob_1 + "=" + value_tRunJob_1);
					
			} else {
				paraList_tRunJob_1.add("--context_param " + key_tRunJob_1 + "=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
			}
			
		}
		

	Object obj_tRunJob_1 = null;

	
		obj_tRunJob_1 = mail.moment;
		if(obj_tRunJob_1!=null) {
			if (obj_tRunJob_1.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_1.add("--context_param moment=" + ((java.util.Date) obj_tRunJob_1).getTime());
			} else {
				
					paraList_tRunJob_1.add("--context_param moment=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_1));
					
				
			}
		} else {
			paraList_tRunJob_1.add("--context_param moment=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_1.put("moment", obj_tRunJob_1);
	
		obj_tRunJob_1 = mail.project;
		if(obj_tRunJob_1!=null) {
			if (obj_tRunJob_1.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_1.add("--context_param Project=" + ((java.util.Date) obj_tRunJob_1).getTime());
			} else {
				
					paraList_tRunJob_1.add("--context_param Project=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_1));
					
				
			}
		} else {
			paraList_tRunJob_1.add("--context_param Project=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_1.put("Project", obj_tRunJob_1);
	
		obj_tRunJob_1 = mail.job;
		if(obj_tRunJob_1!=null) {
			if (obj_tRunJob_1.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_1.add("--context_param job=" + ((java.util.Date) obj_tRunJob_1).getTime());
			} else {
				
					paraList_tRunJob_1.add("--context_param job=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_1));
					
				
			}
		} else {
			paraList_tRunJob_1.add("--context_param job=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_1.put("job", obj_tRunJob_1);
	
		obj_tRunJob_1 = mail.context;
		if(obj_tRunJob_1!=null) {
			if (obj_tRunJob_1.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_1.add("--context_param context=" + ((java.util.Date) obj_tRunJob_1).getTime());
			} else {
				
					paraList_tRunJob_1.add("--context_param context=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_1));
					
				
			}
		} else {
			paraList_tRunJob_1.add("--context_param context=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_1.put("context", obj_tRunJob_1);
	
		obj_tRunJob_1 = mail.origin;
		if(obj_tRunJob_1!=null) {
			if (obj_tRunJob_1.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_1.add("--context_param origen=" + ((java.util.Date) obj_tRunJob_1).getTime());
			} else {
				
					paraList_tRunJob_1.add("--context_param origen=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_1));
					
				
			}
		} else {
			paraList_tRunJob_1.add("--context_param origen=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_1.put("origen", obj_tRunJob_1);
	
		obj_tRunJob_1 = mail.message;
		if(obj_tRunJob_1!=null) {
			if (obj_tRunJob_1.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_1.add("--context_param message=" + ((java.util.Date) obj_tRunJob_1).getTime());
			} else {
				
					paraList_tRunJob_1.add("--context_param message=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_1));
					
				
			}
		} else {
			paraList_tRunJob_1.add("--context_param message=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_1.put("message", obj_tRunJob_1);
	
		obj_tRunJob_1 = context.db_origen_Server;
		if(obj_tRunJob_1!=null) {
			if (obj_tRunJob_1.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_1.add("--context_param server_origen=" + ((java.util.Date) obj_tRunJob_1).getTime());
			} else {
				
					paraList_tRunJob_1.add("--context_param server_origen=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_1));
					
				
			}
		} else {
			paraList_tRunJob_1.add("--context_param server_origen=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_1.put("server_origen", obj_tRunJob_1);
	
		obj_tRunJob_1 = context.db_origen_ServiceName;
		if(obj_tRunJob_1!=null) {
			if (obj_tRunJob_1.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_1.add("--context_param service_name_origen=" + ((java.util.Date) obj_tRunJob_1).getTime());
			} else {
				
					paraList_tRunJob_1.add("--context_param service_name_origen=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_1));
					
				
			}
		} else {
			paraList_tRunJob_1.add("--context_param service_name_origen=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_1.put("service_name_origen", obj_tRunJob_1);
	
		obj_tRunJob_1 = context.db_origen_Login;
		if(obj_tRunJob_1!=null) {
			if (obj_tRunJob_1.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_1.add("--context_param user_origen=" + ((java.util.Date) obj_tRunJob_1).getTime());
			} else {
				
					paraList_tRunJob_1.add("--context_param user_origen=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_1));
					
				
			}
		} else {
			paraList_tRunJob_1.add("--context_param user_origen=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_1.put("user_origen", obj_tRunJob_1);
	
		obj_tRunJob_1 = context.db_destino_Server;
		if(obj_tRunJob_1!=null) {
			if (obj_tRunJob_1.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_1.add("--context_param server_destino=" + ((java.util.Date) obj_tRunJob_1).getTime());
			} else {
				
					paraList_tRunJob_1.add("--context_param server_destino=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_1));
					
				
			}
		} else {
			paraList_tRunJob_1.add("--context_param server_destino=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_1.put("server_destino", obj_tRunJob_1);
	
		obj_tRunJob_1 = context.db_destino_ServiceName;
		if(obj_tRunJob_1!=null) {
			if (obj_tRunJob_1.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_1.add("--context_param service_name_destino=" + ((java.util.Date) obj_tRunJob_1).getTime());
			} else {
				
					paraList_tRunJob_1.add("--context_param service_name_destino=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_1));
					
				
			}
		} else {
			paraList_tRunJob_1.add("--context_param service_name_destino=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_1.put("service_name_destino", obj_tRunJob_1);
	
		obj_tRunJob_1 = context.db_destino_Login;
		if(obj_tRunJob_1!=null) {
			if (obj_tRunJob_1.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_1.add("--context_param user_destino=" + ((java.util.Date) obj_tRunJob_1).getTime());
			} else {
				
					paraList_tRunJob_1.add("--context_param user_destino=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_1));
					
				
			}
		} else {
			paraList_tRunJob_1.add("--context_param user_destino=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_1.put("user_destino", obj_tRunJob_1);
	
	
				class ConsoleHelper_tRunJob_1 {
					private Thread getNormalThread(Process process) {
						return new Thread() {
							public void run() {
								try {
									java.io.BufferedReader reader = new java.io.BufferedReader(
											new java.io.InputStreamReader(
													process.getInputStream()));
									String line = "";
									try {
										while ((line = reader.readLine()) != null) {
											System.out.println(line);
										}
									} finally {
										reader.close();
									}
								} catch (java.io.IOException ioe) {
globalMap.put("tRunJob_1_ERROR_MESSAGE",ioe.getMessage());
						            
									ioe.printStackTrace();
								}
							}
						};
					}

					private Thread getErrorThread(Process process, StringBuffer sb) {
						return new Thread() {
							public void run() {
								try {
									java.io.BufferedReader reader = new java.io.BufferedReader(
											new java.io.InputStreamReader(
													process.getErrorStream()));
									String line = "";
									try {
										while ((line = reader.readLine()) != null) {
											sb.append(line)
													.append("\n");
										}
									} finally {
										reader.close();
									}
								} catch (java.io.IOException ioe) {
globalMap.put("tRunJob_1_ERROR_MESSAGE",ioe.getMessage());
						            
									ioe.printStackTrace();
								}
							}
						};
					}
				}
				ConsoleHelper_tRunJob_1 consoleHelper_tRunJob_1 = new ConsoleHelper_tRunJob_1();

		Runtime runtime_tRunJob_1 = Runtime.getRuntime();
		Process ps_tRunJob_1 = null;
		
		//0 indicates normal termination
        int result_tRunJob_1;
        StringBuffer errorMsg_tRunJob_1 = new StringBuffer();
        try {
            ps_tRunJob_1 = runtime_tRunJob_1.exec((String[])paraList_tRunJob_1.toArray(new String[paraList_tRunJob_1.size()]));

            Thread normal_tRunJob_1 = consoleHelper_tRunJob_1.getNormalThread(ps_tRunJob_1);
            normal_tRunJob_1.start();

            Thread error_tRunJob_1 = consoleHelper_tRunJob_1.getErrorThread(ps_tRunJob_1, errorMsg_tRunJob_1);
            error_tRunJob_1.start();

            result_tRunJob_1 = ps_tRunJob_1.waitFor();
            normal_tRunJob_1.join();
            error_tRunJob_1.join();
        } catch (ThreadDeath tde) {
globalMap.put("tRunJob_1_ERROR_MESSAGE",tde.getMessage());
            ps_tRunJob_1.destroy();
            throw tde;
        }

		globalMap.put("tRunJob_1_CHILD_RETURN_CODE",result_tRunJob_1);
		if(result_tRunJob_1 != 0){
   			globalMap.put("tRunJob_1_CHILD_EXCEPTION_STACKTRACE",errorMsg_tRunJob_1.toString());
			  
	    		throw new RuntimeException("Child job returns " + result_tRunJob_1 + ". It doesn't terminate normally.\n" + errorMsg_tRunJob_1.toString());
			
  		}

		

 


	tos_count_tRunJob_1++;

/**
 * [tRunJob_1 main ] stop
 */
	
	/**
	 * [tRunJob_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tRunJob_1";
	
	

 



/**
 * [tRunJob_1 process_data_begin ] stop
 */
	
	/**
	 * [tRunJob_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tRunJob_1";
	
	

 



/**
 * [tRunJob_1 process_data_end ] stop
 */

} // End of branch "mail"




	
	/**
	 * [tMap_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_3";
	
	

 



/**
 * [tMap_3 process_data_end ] stop
 */



	
	/**
	 * [tFileOutputDelimited_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";
	
	

 



/**
 * [tFileOutputDelimited_1 process_data_end ] stop
 */



	
	/**
	 * [tLogCatcher_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogCatcher_1";
	
	

 



/**
 * [tLogCatcher_1 process_data_end ] stop
 */
	
	/**
	 * [tLogCatcher_1 end ] start
	 */

	

	
	
	currentComponent="tLogCatcher_1";
	
	
	}
} catch (Exception e_tLogCatcher_1) {
globalMap.put("tLogCatcher_1_ERROR_MESSAGE",e_tLogCatcher_1.getMessage());
	logIgnoredError(String.format("tLogCatcher_1 - tLogCatcher failed to process log message(s) due to internal error: %s", e_tLogCatcher_1), e_tLogCatcher_1);
}

 

ok_Hash.put("tLogCatcher_1", true);
end_Hash.put("tLogCatcher_1", System.currentTimeMillis());




/**
 * [tLogCatcher_1 end ] stop
 */

	
	/**
	 * [tFileOutputDelimited_1 end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";
	
	



		
			
					if(outtFileOutputDelimited_1!=null) {
						outtFileOutputDelimited_1.flush();
						outtFileOutputDelimited_1.close();
					}
				
				globalMap.put("tFileOutputDelimited_1_NB_LINE",nb_line_tFileOutputDelimited_1);
				globalMap.put("tFileOutputDelimited_1_FILE_NAME",fileName_tFileOutputDelimited_1);
			
		
		
		resourceMap.put("finish_tFileOutputDelimited_1", true);
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row3");
			  	}
			  	
 

ok_Hash.put("tFileOutputDelimited_1", true);
end_Hash.put("tFileOutputDelimited_1", System.currentTimeMillis());




/**
 * [tFileOutputDelimited_1 end ] stop
 */

	
	/**
	 * [tMap_3 end ] start
	 */

	

	
	
	currentComponent="tMap_3";
	
	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row2");
			  	}
			  	
 

ok_Hash.put("tMap_3", true);
end_Hash.put("tMap_3", System.currentTimeMillis());




/**
 * [tMap_3 end ] stop
 */

	
	/**
	 * [tRunJob_1 end ] start
	 */

	

	
	
	currentComponent="tRunJob_1";
	
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"mail");
			  	}
			  	
 

ok_Hash.put("tRunJob_1", true);
end_Hash.put("tRunJob_1", System.currentTimeMillis());




/**
 * [tRunJob_1 end ] stop
 */









				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tLogCatcher_1 finally ] start
	 */

	

	
	
	currentComponent="tLogCatcher_1";
	
	

 



/**
 * [tLogCatcher_1 finally ] stop
 */

	
	/**
	 * [tFileOutputDelimited_1 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";
	
	


		if(resourceMap.get("finish_tFileOutputDelimited_1") == null){ 
			
				
						java.io.Writer outtFileOutputDelimited_1 = (java.io.Writer)resourceMap.get("out_tFileOutputDelimited_1");
						if(outtFileOutputDelimited_1!=null) {
							outtFileOutputDelimited_1.flush();
							outtFileOutputDelimited_1.close();
						}
					
				
			
		}
	

 



/**
 * [tFileOutputDelimited_1 finally ] stop
 */

	
	/**
	 * [tMap_3 finally ] start
	 */

	

	
	
	currentComponent="tMap_3";
	
	

 



/**
 * [tMap_3 finally ] stop
 */

	
	/**
	 * [tRunJob_1 finally ] start
	 */

	

	
	
	currentComponent="tRunJob_1";
	
	
	
 



/**
 * [tRunJob_1 finally ] stop
 */









				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tLogCatcher_1_SUBPROCESS_STATE", 1);
	}
	


public void tPostjob_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPostjob_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tPostjob_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostjob_1", false);
		start_Hash.put("tPostjob_1", System.currentTimeMillis());
		
	
	currentComponent="tPostjob_1";
	
	
		int tos_count_tPostjob_1 = 0;
		

 



/**
 * [tPostjob_1 begin ] stop
 */
	
	/**
	 * [tPostjob_1 main ] start
	 */

	

	
	
	currentComponent="tPostjob_1";
	
	

 


	tos_count_tPostjob_1++;

/**
 * [tPostjob_1 main ] stop
 */
	
	/**
	 * [tPostjob_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tPostjob_1";
	
	

 



/**
 * [tPostjob_1 process_data_begin ] stop
 */
	
	/**
	 * [tPostjob_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tPostjob_1";
	
	

 



/**
 * [tPostjob_1 process_data_end ] stop
 */
	
	/**
	 * [tPostjob_1 end ] start
	 */

	

	
	
	currentComponent="tPostjob_1";
	
	

 

ok_Hash.put("tPostjob_1", true);
end_Hash.put("tPostjob_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk3", 0, "ok");
				}
				tJava_1Process(globalMap);



/**
 * [tPostjob_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPostjob_1 finally ] start
	 */

	

	
	
	currentComponent="tPostjob_1";
	
	

 



/**
 * [tPostjob_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPostjob_1_SUBPROCESS_STATE", 1);
	}
	


public void tJava_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tJava_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_1", false);
		start_Hash.put("tJava_1", System.currentTimeMillis());
		
	
	currentComponent="tJava_1";
	
	
		int tos_count_tJava_1 = 0;
		


//Guarda en variables de contexto la hora final de ejecución del etl, actualiza el estado a succes y los imprime en consola

context.HORA_FINAL = TalendDate.getDate("HH:mm:ss");
context.ESTADO_EXEC = "Succes";

System.out.println("- End: "+context.HORA_FINAL );
System.out.println("- Estado: "+context.ESTADO_EXEC );
 



/**
 * [tJava_1 begin ] stop
 */
	
	/**
	 * [tJava_1 main ] start
	 */

	

	
	
	currentComponent="tJava_1";
	
	

 


	tos_count_tJava_1++;

/**
 * [tJava_1 main ] stop
 */
	
	/**
	 * [tJava_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_1";
	
	

 



/**
 * [tJava_1 process_data_begin ] stop
 */
	
	/**
	 * [tJava_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_1";
	
	

 



/**
 * [tJava_1 process_data_end ] stop
 */
	
	/**
	 * [tJava_1 end ] start
	 */

	

	
	
	currentComponent="tJava_1";
	
	

 

ok_Hash.put("tJava_1", true);
end_Hash.put("tJava_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk6", 0, "ok");
				}
				tOracleClose_1Process(globalMap);
				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk8", 0, "ok");
				}
				tFixedFlowInput_1Process(globalMap);



/**
 * [tJava_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_1 finally ] start
	 */

	

	
	
	currentComponent="tJava_1";
	
	

 



/**
 * [tJava_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_1_SUBPROCESS_STATE", 1);
	}
	


public void tOracleClose_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleClose_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tOracleClose_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleClose_1", false);
		start_Hash.put("tOracleClose_1", System.currentTimeMillis());
		
	
	currentComponent="tOracleClose_1";
	
	
		int tos_count_tOracleClose_1 = 0;
		

 



/**
 * [tOracleClose_1 begin ] stop
 */
	
	/**
	 * [tOracleClose_1 main ] start
	 */

	

	
	
	currentComponent="tOracleClose_1";
	
	

	java.sql.Connection conn_tOracleClose_1 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");
	
	if(conn_tOracleClose_1 != null && !conn_tOracleClose_1.isClosed())
	{
		
			conn_tOracleClose_1.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_tOracleConnection_1"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
	}

 


	tos_count_tOracleClose_1++;

/**
 * [tOracleClose_1 main ] stop
 */
	
	/**
	 * [tOracleClose_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleClose_1";
	
	

 



/**
 * [tOracleClose_1 process_data_begin ] stop
 */
	
	/**
	 * [tOracleClose_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleClose_1";
	
	

 



/**
 * [tOracleClose_1 process_data_end ] stop
 */
	
	/**
	 * [tOracleClose_1 end ] start
	 */

	

	
	
	currentComponent="tOracleClose_1";
	
	

 

ok_Hash.put("tOracleClose_1", true);
end_Hash.put("tOracleClose_1", System.currentTimeMillis());




/**
 * [tOracleClose_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleClose_1 finally ] start
	 */

	

	
	
	currentComponent="tOracleClose_1";
	
	

 



/**
 * [tOracleClose_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleClose_1_SUBPROCESS_STATE", 1);
	}
	


public static class row4Struct implements routines.system.IPersistableRow<row4Struct> {
    final static byte[] commonByteArrayLock_VAC_CONSOLIDADOS_VAC_RegistroVacunacion = new byte[0];
    static byte[] commonByteArray_VAC_CONSOLIDADOS_VAC_RegistroVacunacion = new byte[0];

	
			    public String FECHA_EJECUCION;

				public String getFECHA_EJECUCION () {
					return this.FECHA_EJECUCION;
				}

				public Boolean FECHA_EJECUCIONIsNullable(){
				    return true;
				}
				public Boolean FECHA_EJECUCIONIsKey(){
				    return false;
				}
				public Integer FECHA_EJECUCIONLength(){
				    return null;
				}
				public Integer FECHA_EJECUCIONPrecision(){
				    return null;
				}
				public String FECHA_EJECUCIONDefault(){
				
					return null;
				
				}
				public String FECHA_EJECUCIONComment(){
				
				    return "";
				
				}
				public String FECHA_EJECUCIONPattern(){
				
					return "";
				
				}
				public String FECHA_EJECUCIONOriginalDbColumnName(){
				
					return "FECHA_EJECUCION";
				
				}

				
			    public String HORA_INICIO;

				public String getHORA_INICIO () {
					return this.HORA_INICIO;
				}

				public Boolean HORA_INICIOIsNullable(){
				    return true;
				}
				public Boolean HORA_INICIOIsKey(){
				    return false;
				}
				public Integer HORA_INICIOLength(){
				    return null;
				}
				public Integer HORA_INICIOPrecision(){
				    return null;
				}
				public String HORA_INICIODefault(){
				
					return null;
				
				}
				public String HORA_INICIOComment(){
				
				    return "";
				
				}
				public String HORA_INICIOPattern(){
				
					return "";
				
				}
				public String HORA_INICIOOriginalDbColumnName(){
				
					return "HORA_INICIO";
				
				}

				
			    public String HORA_FINAL;

				public String getHORA_FINAL () {
					return this.HORA_FINAL;
				}

				public Boolean HORA_FINALIsNullable(){
				    return true;
				}
				public Boolean HORA_FINALIsKey(){
				    return false;
				}
				public Integer HORA_FINALLength(){
				    return null;
				}
				public Integer HORA_FINALPrecision(){
				    return null;
				}
				public String HORA_FINALDefault(){
				
					return null;
				
				}
				public String HORA_FINALComment(){
				
				    return "";
				
				}
				public String HORA_FINALPattern(){
				
					return "";
				
				}
				public String HORA_FINALOriginalDbColumnName(){
				
					return "HORA_FINAL";
				
				}

				
			    public String ESTADO;

				public String getESTADO () {
					return this.ESTADO;
				}

				public Boolean ESTADOIsNullable(){
				    return true;
				}
				public Boolean ESTADOIsKey(){
				    return false;
				}
				public Integer ESTADOLength(){
				    return null;
				}
				public Integer ESTADOPrecision(){
				    return null;
				}
				public String ESTADODefault(){
				
					return null;
				
				}
				public String ESTADOComment(){
				
				    return "";
				
				}
				public String ESTADOPattern(){
				
					return "";
				
				}
				public String ESTADOOriginalDbColumnName(){
				
					return "ESTADO";
				
				}

				
			    public String JOBS;

				public String getJOBS () {
					return this.JOBS;
				}

				public Boolean JOBSIsNullable(){
				    return true;
				}
				public Boolean JOBSIsKey(){
				    return false;
				}
				public Integer JOBSLength(){
				    return null;
				}
				public Integer JOBSPrecision(){
				    return null;
				}
				public String JOBSDefault(){
				
					return null;
				
				}
				public String JOBSComment(){
				
				    return "";
				
				}
				public String JOBSPattern(){
				
					return "";
				
				}
				public String JOBSOriginalDbColumnName(){
				
					return "JOBS";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_VAC_CONSOLIDADOS_VAC_RegistroVacunacion.length) {
				if(length < 1024 && commonByteArray_VAC_CONSOLIDADOS_VAC_RegistroVacunacion.length == 0) {
   					commonByteArray_VAC_CONSOLIDADOS_VAC_RegistroVacunacion = new byte[1024];
				} else {
   					commonByteArray_VAC_CONSOLIDADOS_VAC_RegistroVacunacion = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_VAC_CONSOLIDADOS_VAC_RegistroVacunacion, 0, length);
			strReturn = new String(commonByteArray_VAC_CONSOLIDADOS_VAC_RegistroVacunacion, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_VAC_CONSOLIDADOS_VAC_RegistroVacunacion.length) {
				if(length < 1024 && commonByteArray_VAC_CONSOLIDADOS_VAC_RegistroVacunacion.length == 0) {
   					commonByteArray_VAC_CONSOLIDADOS_VAC_RegistroVacunacion = new byte[1024];
				} else {
   					commonByteArray_VAC_CONSOLIDADOS_VAC_RegistroVacunacion = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_VAC_CONSOLIDADOS_VAC_RegistroVacunacion, 0, length);
			strReturn = new String(commonByteArray_VAC_CONSOLIDADOS_VAC_RegistroVacunacion, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_VAC_CONSOLIDADOS_VAC_RegistroVacunacion) {

        	try {

        		int length = 0;
		
					this.FECHA_EJECUCION = readString(dis);
					
					this.HORA_INICIO = readString(dis);
					
					this.HORA_FINAL = readString(dis);
					
					this.ESTADO = readString(dis);
					
					this.JOBS = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_VAC_CONSOLIDADOS_VAC_RegistroVacunacion) {

        	try {

        		int length = 0;
		
					this.FECHA_EJECUCION = readString(dis);
					
					this.HORA_INICIO = readString(dis);
					
					this.HORA_FINAL = readString(dis);
					
					this.ESTADO = readString(dis);
					
					this.JOBS = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.FECHA_EJECUCION,dos);
					
					// String
				
						writeString(this.HORA_INICIO,dos);
					
					// String
				
						writeString(this.HORA_FINAL,dos);
					
					// String
				
						writeString(this.ESTADO,dos);
					
					// String
				
						writeString(this.JOBS,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.FECHA_EJECUCION,dos);
					
					// String
				
						writeString(this.HORA_INICIO,dos);
					
					// String
				
						writeString(this.HORA_FINAL,dos);
					
					// String
				
						writeString(this.ESTADO,dos);
					
					// String
				
						writeString(this.JOBS,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("FECHA_EJECUCION="+FECHA_EJECUCION);
		sb.append(",HORA_INICIO="+HORA_INICIO);
		sb.append(",HORA_FINAL="+HORA_FINAL);
		sb.append(",ESTADO="+ESTADO);
		sb.append(",JOBS="+JOBS);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row4Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tFixedFlowInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFixedFlowInput_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row4Struct row4 = new row4Struct();




	
	/**
	 * [tFileOutputDelimited_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputDelimited_2", false);
		start_Hash.put("tFileOutputDelimited_2", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputDelimited_2";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row4");
					}
				
		int tos_count_tFileOutputDelimited_2 = 0;
		

String fileName_tFileOutputDelimited_2 = "";
    fileName_tFileOutputDelimited_2 = (new java.io.File(context.LOGS_EXECUTION)).getAbsolutePath().replace("\\","/");
    String fullName_tFileOutputDelimited_2 = null;
    String extension_tFileOutputDelimited_2 = null;
    String directory_tFileOutputDelimited_2 = null;
    if((fileName_tFileOutputDelimited_2.indexOf("/") != -1)) {
        if(fileName_tFileOutputDelimited_2.lastIndexOf(".") < fileName_tFileOutputDelimited_2.lastIndexOf("/")) {
            fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2;
            extension_tFileOutputDelimited_2 = "";
        } else {
            fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(0, fileName_tFileOutputDelimited_2.lastIndexOf("."));
            extension_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(fileName_tFileOutputDelimited_2.lastIndexOf("."));
        }
        directory_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(0, fileName_tFileOutputDelimited_2.lastIndexOf("/"));
    } else {
        if(fileName_tFileOutputDelimited_2.lastIndexOf(".") != -1) {
            fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(0, fileName_tFileOutputDelimited_2.lastIndexOf("."));
            extension_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(fileName_tFileOutputDelimited_2.lastIndexOf("."));
        } else {
            fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2;
            extension_tFileOutputDelimited_2 = "";
        }
        directory_tFileOutputDelimited_2 = "";
    }
    boolean isFileGenerated_tFileOutputDelimited_2 = true;
    java.io.File filetFileOutputDelimited_2 = new java.io.File(fileName_tFileOutputDelimited_2);
    globalMap.put("tFileOutputDelimited_2_FILE_NAME",fileName_tFileOutputDelimited_2);
        if(filetFileOutputDelimited_2.exists()){
            isFileGenerated_tFileOutputDelimited_2 = false;
        }
            int nb_line_tFileOutputDelimited_2 = 0;
            int splitedFileNo_tFileOutputDelimited_2 = 0;
            int currentRow_tFileOutputDelimited_2 = 0;

            final String OUT_DELIM_tFileOutputDelimited_2 = /** Start field tFileOutputDelimited_2:FIELDSEPARATOR */";"/** End field tFileOutputDelimited_2:FIELDSEPARATOR */;

            final String OUT_DELIM_ROWSEP_tFileOutputDelimited_2 = /** Start field tFileOutputDelimited_2:ROWSEPARATOR */"\n"/** End field tFileOutputDelimited_2:ROWSEPARATOR */;

                    //create directory only if not exists
                    if(directory_tFileOutputDelimited_2 != null && directory_tFileOutputDelimited_2.trim().length() != 0) {
                        java.io.File dir_tFileOutputDelimited_2 = new java.io.File(directory_tFileOutputDelimited_2);
                        if(!dir_tFileOutputDelimited_2.exists()) {
                            dir_tFileOutputDelimited_2.mkdirs();
                        }
                    }

                        //routines.system.Row
                        java.io.Writer outtFileOutputDelimited_2 = null;

                        outtFileOutputDelimited_2 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
                        new java.io.FileOutputStream(fileName_tFileOutputDelimited_2, true),"ISO-8859-15"));
                resourceMap.put("out_tFileOutputDelimited_2", outtFileOutputDelimited_2);
                                    if(filetFileOutputDelimited_2.length()==0){
                                        outtFileOutputDelimited_2.write("FECHA_EJECUCION");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("HORA_INICIO");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("HORA_FINAL");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("ESTADO");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("JOBS");
                                        outtFileOutputDelimited_2.write(OUT_DELIM_ROWSEP_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.flush();
                                    }


resourceMap.put("nb_line_tFileOutputDelimited_2", nb_line_tFileOutputDelimited_2);

 



/**
 * [tFileOutputDelimited_2 begin ] stop
 */



	
	/**
	 * [tFixedFlowInput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFixedFlowInput_1", false);
		start_Hash.put("tFixedFlowInput_1", System.currentTimeMillis());
		
	
	currentComponent="tFixedFlowInput_1";
	
	
		int tos_count_tFixedFlowInput_1 = 0;
		

	    for (int i_tFixedFlowInput_1 = 0 ; i_tFixedFlowInput_1 < 1 ; i_tFixedFlowInput_1++) {
	                	            	
    	            		row4.FECHA_EJECUCION = context.FECHA_EJECUCION;
    	            	        	            	
    	            		row4.HORA_INICIO = context.HORA_INICIO;
    	            	        	            	
    	            		row4.HORA_FINAL = context.HORA_FINAL;
    	            	        	            	
    	            		row4.ESTADO = context.ESTADO_EXEC;
    	            	        	            	
    	            		row4.JOBS = context.JOB;
    	            	

 



/**
 * [tFixedFlowInput_1 begin ] stop
 */
	
	/**
	 * [tFixedFlowInput_1 main ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_1";
	
	

 


	tos_count_tFixedFlowInput_1++;

/**
 * [tFixedFlowInput_1 main ] stop
 */
	
	/**
	 * [tFixedFlowInput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_1";
	
	

 



/**
 * [tFixedFlowInput_1 process_data_begin ] stop
 */

	
	/**
	 * [tFileOutputDelimited_2 main ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_2";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row4"
						
						);
					}
					


                    StringBuilder sb_tFileOutputDelimited_2 = new StringBuilder();
                            if(row4.FECHA_EJECUCION != null) {
                        sb_tFileOutputDelimited_2.append(
                            row4.FECHA_EJECUCION
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(row4.HORA_INICIO != null) {
                        sb_tFileOutputDelimited_2.append(
                            row4.HORA_INICIO
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(row4.HORA_FINAL != null) {
                        sb_tFileOutputDelimited_2.append(
                            row4.HORA_FINAL
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(row4.ESTADO != null) {
                        sb_tFileOutputDelimited_2.append(
                            row4.ESTADO
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(row4.JOBS != null) {
                        sb_tFileOutputDelimited_2.append(
                            row4.JOBS
                        );
                            }
                    sb_tFileOutputDelimited_2.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_2);


                    nb_line_tFileOutputDelimited_2++;
                    resourceMap.put("nb_line_tFileOutputDelimited_2", nb_line_tFileOutputDelimited_2);

                        outtFileOutputDelimited_2.write(sb_tFileOutputDelimited_2.toString());




 


	tos_count_tFileOutputDelimited_2++;

/**
 * [tFileOutputDelimited_2 main ] stop
 */
	
	/**
	 * [tFileOutputDelimited_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_2";
	
	

 



/**
 * [tFileOutputDelimited_2 process_data_begin ] stop
 */
	
	/**
	 * [tFileOutputDelimited_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_2";
	
	

 



/**
 * [tFileOutputDelimited_2 process_data_end ] stop
 */



	
	/**
	 * [tFixedFlowInput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_1";
	
	

 



/**
 * [tFixedFlowInput_1 process_data_end ] stop
 */
	
	/**
	 * [tFixedFlowInput_1 end ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_1";
	
	

        }
        globalMap.put("tFixedFlowInput_1_NB_LINE", 1);        

 

ok_Hash.put("tFixedFlowInput_1", true);
end_Hash.put("tFixedFlowInput_1", System.currentTimeMillis());




/**
 * [tFixedFlowInput_1 end ] stop
 */

	
	/**
	 * [tFileOutputDelimited_2 end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_2";
	
	



		
			
					if(outtFileOutputDelimited_2!=null) {
						outtFileOutputDelimited_2.flush();
						outtFileOutputDelimited_2.close();
					}
				
				globalMap.put("tFileOutputDelimited_2_NB_LINE",nb_line_tFileOutputDelimited_2);
				globalMap.put("tFileOutputDelimited_2_FILE_NAME",fileName_tFileOutputDelimited_2);
			
		
		
		resourceMap.put("finish_tFileOutputDelimited_2", true);
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row4");
			  	}
			  	
 

ok_Hash.put("tFileOutputDelimited_2", true);
end_Hash.put("tFileOutputDelimited_2", System.currentTimeMillis());




/**
 * [tFileOutputDelimited_2 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFixedFlowInput_1 finally ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_1";
	
	

 



/**
 * [tFixedFlowInput_1 finally ] stop
 */

	
	/**
	 * [tFileOutputDelimited_2 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_2";
	
	


		if(resourceMap.get("finish_tFileOutputDelimited_2") == null){ 
			
				
						java.io.Writer outtFileOutputDelimited_2 = (java.io.Writer)resourceMap.get("out_tFileOutputDelimited_2");
						if(outtFileOutputDelimited_2!=null) {
							outtFileOutputDelimited_2.flush();
							outtFileOutputDelimited_2.close();
						}
					
				
			
		}
	

 



/**
 * [tFileOutputDelimited_2 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFixedFlowInput_1_SUBPROCESS_STATE", 1);
	}
	


public void tJava_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_3_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tJava_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_3", false);
		start_Hash.put("tJava_3", System.currentTimeMillis());
		
	
	currentComponent="tJava_3";
	
	
		int tos_count_tJava_3 = 0;
		


/* para pruebas */
// context.SARCHIVO_ID = new BigDecimal(1217);
// context.MODULO = "VAC2";
// context.SIGLA = "RDVAC"; 
// context.FUERZA_ID = "";
// context.FUERZA_NOMBRE = "";
// context.UORG_ID = "200";
// context.UORG_NOMBRE = "DGSM";
// context.TESQUEMA = "PAI";
// context.ACTUALIZACION = "1,2";
// context.FECHA_INICIAL = "30/08/2019";
// context.FECHA_FINAL = "30/08/2019";
// context.USUARIO_NOMBRE = "Jonh Doe";

System.out.println("- Información del consolidado: ");
System.out.println("-- SARCHIVO_ID: " + context.SARCHIVO_ID);
System.out.println("-- MODULO: " + context.MODULO);
System.out.println("-- SIGLA: " + context.SIGLA);
System.out.println("- Filtros del reporte: ");
System.out.println("-- FUERZA_ID: " + context.FUERZA_ID);
System.out.println("-- FUERZA_NOMBRE: " + context.FUERZA_NOMBRE);
System.out.println("-- UORG_ID: " + context.UORG_ID);
System.out.println("-- UORG_NOMBRE: " + context.UORG_NOMBRE);
System.out.println("-- TESQUEMA: " + context.TESQUEMA);
System.out.println("-- ACTUALIZACION: " + context.ACTUALIZACION);
System.out.println("-- FECHA_INICIAL: " + context.FECHA_INICIAL);
System.out.println("-- FECHA_FINAL: " + context.FECHA_FINAL);

// Validación si es un WebService
if ( context.SARCHIVO_ID == null || Utils.empty(context.MODULO) || Utils.empty(context.SIGLA)) {
	context.ES_WEB_SERVICE = true;
	context.MODULO = "Tmp";
	context.FECHA_FINAL = context.FECHA_INICIAL;
}

String fechaSolicitud;

// Guarda la carpeta de salida
if(context.ES_WEB_SERVICE){
	context.CARPETA_SALIDA = context.STORAGE + "/" + context.MODULO;
	fechaSolicitud = context.FECHA_INICIAL.replaceAll("/","-");
	
} else {
	context.CARPETA_SALIDA = context.STORAGE + "/" + context.MODULO +"/" + context.SIGLA;
	fechaSolicitud = TalendDate.getDate("DD-MM-YYYY");
}

// Crea la carpeta donde se guardara el consolidado
new File(context.CARPETA_SALIDA).mkdirs();

// Genera valores GUID y ruta de salida
if(context.ES_WEB_SERVICE){
	context.NOMBRE_ARCHIVO = "RegistroDiarioVacunacion_" + fechaSolicitud + ".xlsx";	
} else {
	context.NOMBRE_ARCHIVO = context.SARCHIVO_ID + "_RegistroDiarioVacunacion-" + fechaSolicitud + ".xlsx";
}

context.NOMBRE_ZIP = GenerarUUID.createUUID() + ".zip";

// Inicializa el registro de vacunas xlsx
RegistroVacunacionPoi.initialize(context.CARPETA_SALIDA, context.NOMBRE_ARCHIVO);

// Crea los filtros en el xlsx
RegistroVacunacionPoi.crearFiltros("Registro de vacunación", context.FUERZA_NOMBRE, 
															 context.UORG_NOMBRE, 
															 context.TESQUEMA, 
															 context.ACTUALIZACION, 
															 context.FECHA_INICIAL, 
															 context.FECHA_FINAL, 
															 context.USUARIO_NOMBRE,
															 context.ES_WEB_SERVICE);

// Crea varibles globales
globalMap.put("VACUNA", new ArrayList<String>());
globalMap.put("TIPO_VACUNA", new ArrayList<String>());
 



/**
 * [tJava_3 begin ] stop
 */
	
	/**
	 * [tJava_3 main ] start
	 */

	

	
	
	currentComponent="tJava_3";
	
	

 


	tos_count_tJava_3++;

/**
 * [tJava_3 main ] stop
 */
	
	/**
	 * [tJava_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_3";
	
	

 



/**
 * [tJava_3 process_data_begin ] stop
 */
	
	/**
	 * [tJava_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_3";
	
	

 



/**
 * [tJava_3 process_data_end ] stop
 */
	
	/**
	 * [tJava_3 end ] start
	 */

	

	
	
	currentComponent="tJava_3";
	
	

 

ok_Hash.put("tJava_3", true);
end_Hash.put("tJava_3", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk14", 0, "ok");
				}
				tOracleInput_2Process(globalMap);



/**
 * [tJava_3 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_3 finally ] start
	 */

	

	
	
	currentComponent="tJava_3";
	
	

 



/**
 * [tJava_3 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_3_SUBPROCESS_STATE", 1);
	}
	


public static class row16Struct implements routines.system.IPersistableRow<row16Struct> {
    final static byte[] commonByteArrayLock_VAC_CONSOLIDADOS_VAC_RegistroVacunacion = new byte[0];
    static byte[] commonByteArray_VAC_CONSOLIDADOS_VAC_RegistroVacunacion = new byte[0];

	
			    public BigDecimal BIOLOGICOS_ID;

				public BigDecimal getBIOLOGICOS_ID () {
					return this.BIOLOGICOS_ID;
				}

				public Boolean BIOLOGICOS_IDIsNullable(){
				    return false;
				}
				public Boolean BIOLOGICOS_IDIsKey(){
				    return false;
				}
				public Integer BIOLOGICOS_IDLength(){
				    return 0;
				}
				public Integer BIOLOGICOS_IDPrecision(){
				    return null;
				}
				public String BIOLOGICOS_IDDefault(){
				
					return "";
				
				}
				public String BIOLOGICOS_IDComment(){
				
				    return "";
				
				}
				public String BIOLOGICOS_IDPattern(){
				
					return "";
				
				}
				public String BIOLOGICOS_IDOriginalDbColumnName(){
				
					return "BIOLOGICOS_ID";
				
				}

				
			    public String TIPO_VACUNA;

				public String getTIPO_VACUNA () {
					return this.TIPO_VACUNA;
				}

				public Boolean TIPO_VACUNAIsNullable(){
				    return false;
				}
				public Boolean TIPO_VACUNAIsKey(){
				    return false;
				}
				public Integer TIPO_VACUNALength(){
				    return 10;
				}
				public Integer TIPO_VACUNAPrecision(){
				    return 0;
				}
				public String TIPO_VACUNADefault(){
				
					return null;
				
				}
				public String TIPO_VACUNAComment(){
				
				    return "";
				
				}
				public String TIPO_VACUNAPattern(){
				
					return "";
				
				}
				public String TIPO_VACUNAOriginalDbColumnName(){
				
					return "TIPO_VACUNA";
				
				}

				
			    public String VACUNA;

				public String getVACUNA () {
					return this.VACUNA;
				}

				public Boolean VACUNAIsNullable(){
				    return false;
				}
				public Boolean VACUNAIsKey(){
				    return false;
				}
				public Integer VACUNALength(){
				    return 350;
				}
				public Integer VACUNAPrecision(){
				    return 0;
				}
				public String VACUNADefault(){
				
					return null;
				
				}
				public String VACUNAComment(){
				
				    return "";
				
				}
				public String VACUNAPattern(){
				
					return "";
				
				}
				public String VACUNAOriginalDbColumnName(){
				
					return "VACUNA";
				
				}

				
			    public BigDecimal ORDEN;

				public BigDecimal getORDEN () {
					return this.ORDEN;
				}

				public Boolean ORDENIsNullable(){
				    return false;
				}
				public Boolean ORDENIsKey(){
				    return false;
				}
				public Integer ORDENLength(){
				    return 0;
				}
				public Integer ORDENPrecision(){
				    return 0;
				}
				public String ORDENDefault(){
				
					return "";
				
				}
				public String ORDENComment(){
				
				    return "";
				
				}
				public String ORDENPattern(){
				
					return "";
				
				}
				public String ORDENOriginalDbColumnName(){
				
					return "ORDEN";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_VAC_CONSOLIDADOS_VAC_RegistroVacunacion.length) {
				if(length < 1024 && commonByteArray_VAC_CONSOLIDADOS_VAC_RegistroVacunacion.length == 0) {
   					commonByteArray_VAC_CONSOLIDADOS_VAC_RegistroVacunacion = new byte[1024];
				} else {
   					commonByteArray_VAC_CONSOLIDADOS_VAC_RegistroVacunacion = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_VAC_CONSOLIDADOS_VAC_RegistroVacunacion, 0, length);
			strReturn = new String(commonByteArray_VAC_CONSOLIDADOS_VAC_RegistroVacunacion, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_VAC_CONSOLIDADOS_VAC_RegistroVacunacion.length) {
				if(length < 1024 && commonByteArray_VAC_CONSOLIDADOS_VAC_RegistroVacunacion.length == 0) {
   					commonByteArray_VAC_CONSOLIDADOS_VAC_RegistroVacunacion = new byte[1024];
				} else {
   					commonByteArray_VAC_CONSOLIDADOS_VAC_RegistroVacunacion = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_VAC_CONSOLIDADOS_VAC_RegistroVacunacion, 0, length);
			strReturn = new String(commonByteArray_VAC_CONSOLIDADOS_VAC_RegistroVacunacion, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_VAC_CONSOLIDADOS_VAC_RegistroVacunacion) {

        	try {

        		int length = 0;
		
						this.BIOLOGICOS_ID = (BigDecimal) dis.readObject();
					
					this.TIPO_VACUNA = readString(dis);
					
					this.VACUNA = readString(dis);
					
						this.ORDEN = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_VAC_CONSOLIDADOS_VAC_RegistroVacunacion) {

        	try {

        		int length = 0;
		
						this.BIOLOGICOS_ID = (BigDecimal) dis.readObject();
					
					this.TIPO_VACUNA = readString(dis);
					
					this.VACUNA = readString(dis);
					
						this.ORDEN = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.BIOLOGICOS_ID);
					
					// String
				
						writeString(this.TIPO_VACUNA,dos);
					
					// String
				
						writeString(this.VACUNA,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ORDEN);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.BIOLOGICOS_ID);
					
					// String
				
						writeString(this.TIPO_VACUNA,dos);
					
					// String
				
						writeString(this.VACUNA,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ORDEN);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("BIOLOGICOS_ID="+String.valueOf(BIOLOGICOS_ID));
		sb.append(",TIPO_VACUNA="+TIPO_VACUNA);
		sb.append(",VACUNA="+VACUNA);
		sb.append(",ORDEN="+String.valueOf(ORDEN));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row16Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row7Struct implements routines.system.IPersistableRow<row7Struct> {
    final static byte[] commonByteArrayLock_VAC_CONSOLIDADOS_VAC_RegistroVacunacion = new byte[0];
    static byte[] commonByteArray_VAC_CONSOLIDADOS_VAC_RegistroVacunacion = new byte[0];

	
			    public BigDecimal BIOLOGICOS_ID;

				public BigDecimal getBIOLOGICOS_ID () {
					return this.BIOLOGICOS_ID;
				}

				public Boolean BIOLOGICOS_IDIsNullable(){
				    return false;
				}
				public Boolean BIOLOGICOS_IDIsKey(){
				    return false;
				}
				public Integer BIOLOGICOS_IDLength(){
				    return 0;
				}
				public Integer BIOLOGICOS_IDPrecision(){
				    return null;
				}
				public String BIOLOGICOS_IDDefault(){
				
					return "";
				
				}
				public String BIOLOGICOS_IDComment(){
				
				    return "";
				
				}
				public String BIOLOGICOS_IDPattern(){
				
					return "";
				
				}
				public String BIOLOGICOS_IDOriginalDbColumnName(){
				
					return "BIOLOGICOS_ID";
				
				}

				
			    public String TIPO_VACUNA;

				public String getTIPO_VACUNA () {
					return this.TIPO_VACUNA;
				}

				public Boolean TIPO_VACUNAIsNullable(){
				    return false;
				}
				public Boolean TIPO_VACUNAIsKey(){
				    return false;
				}
				public Integer TIPO_VACUNALength(){
				    return 10;
				}
				public Integer TIPO_VACUNAPrecision(){
				    return 0;
				}
				public String TIPO_VACUNADefault(){
				
					return null;
				
				}
				public String TIPO_VACUNAComment(){
				
				    return "";
				
				}
				public String TIPO_VACUNAPattern(){
				
					return "";
				
				}
				public String TIPO_VACUNAOriginalDbColumnName(){
				
					return "TIPO_VACUNA";
				
				}

				
			    public String VACUNA;

				public String getVACUNA () {
					return this.VACUNA;
				}

				public Boolean VACUNAIsNullable(){
				    return false;
				}
				public Boolean VACUNAIsKey(){
				    return false;
				}
				public Integer VACUNALength(){
				    return 350;
				}
				public Integer VACUNAPrecision(){
				    return 0;
				}
				public String VACUNADefault(){
				
					return null;
				
				}
				public String VACUNAComment(){
				
				    return "";
				
				}
				public String VACUNAPattern(){
				
					return "";
				
				}
				public String VACUNAOriginalDbColumnName(){
				
					return "VACUNA";
				
				}

				
			    public BigDecimal ORDEN;

				public BigDecimal getORDEN () {
					return this.ORDEN;
				}

				public Boolean ORDENIsNullable(){
				    return true;
				}
				public Boolean ORDENIsKey(){
				    return false;
				}
				public Integer ORDENLength(){
				    return 0;
				}
				public Integer ORDENPrecision(){
				    return 0;
				}
				public String ORDENDefault(){
				
					return "";
				
				}
				public String ORDENComment(){
				
				    return "";
				
				}
				public String ORDENPattern(){
				
					return "";
				
				}
				public String ORDENOriginalDbColumnName(){
				
					return "ORDEN";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_VAC_CONSOLIDADOS_VAC_RegistroVacunacion.length) {
				if(length < 1024 && commonByteArray_VAC_CONSOLIDADOS_VAC_RegistroVacunacion.length == 0) {
   					commonByteArray_VAC_CONSOLIDADOS_VAC_RegistroVacunacion = new byte[1024];
				} else {
   					commonByteArray_VAC_CONSOLIDADOS_VAC_RegistroVacunacion = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_VAC_CONSOLIDADOS_VAC_RegistroVacunacion, 0, length);
			strReturn = new String(commonByteArray_VAC_CONSOLIDADOS_VAC_RegistroVacunacion, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_VAC_CONSOLIDADOS_VAC_RegistroVacunacion.length) {
				if(length < 1024 && commonByteArray_VAC_CONSOLIDADOS_VAC_RegistroVacunacion.length == 0) {
   					commonByteArray_VAC_CONSOLIDADOS_VAC_RegistroVacunacion = new byte[1024];
				} else {
   					commonByteArray_VAC_CONSOLIDADOS_VAC_RegistroVacunacion = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_VAC_CONSOLIDADOS_VAC_RegistroVacunacion, 0, length);
			strReturn = new String(commonByteArray_VAC_CONSOLIDADOS_VAC_RegistroVacunacion, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_VAC_CONSOLIDADOS_VAC_RegistroVacunacion) {

        	try {

        		int length = 0;
		
						this.BIOLOGICOS_ID = (BigDecimal) dis.readObject();
					
					this.TIPO_VACUNA = readString(dis);
					
					this.VACUNA = readString(dis);
					
						this.ORDEN = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_VAC_CONSOLIDADOS_VAC_RegistroVacunacion) {

        	try {

        		int length = 0;
		
						this.BIOLOGICOS_ID = (BigDecimal) dis.readObject();
					
					this.TIPO_VACUNA = readString(dis);
					
					this.VACUNA = readString(dis);
					
						this.ORDEN = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.BIOLOGICOS_ID);
					
					// String
				
						writeString(this.TIPO_VACUNA,dos);
					
					// String
				
						writeString(this.VACUNA,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ORDEN);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.BIOLOGICOS_ID);
					
					// String
				
						writeString(this.TIPO_VACUNA,dos);
					
					// String
				
						writeString(this.VACUNA,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ORDEN);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("BIOLOGICOS_ID="+String.valueOf(BIOLOGICOS_ID));
		sb.append(",TIPO_VACUNA="+TIPO_VACUNA);
		sb.append(",VACUNA="+VACUNA);
		sb.append(",ORDEN="+String.valueOf(ORDEN));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row7Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row7Struct row7 = new row7Struct();
row16Struct row16 = new row16Struct();





	
	/**
	 * [tHashOutput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashOutput_1", false);
		start_Hash.put("tHashOutput_1", System.currentTimeMillis());
		
	
	currentComponent="tHashOutput_1";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row16");
					}
				
		int tos_count_tHashOutput_1 = 0;
		



org.talend.designer.components.hashfile.common.MapHashFile mf_tHashOutput_1=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();    
		org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row16Struct> tHashFile_tHashOutput_1 = null;
		String hashKey_tHashOutput_1 = "tHashFile_RegistroVacunacion_" + pid + "_tHashOutput_1";
			synchronized(org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.get(hashKey_tHashOutput_1)){
			    if(mf_tHashOutput_1.getResourceMap().get(hashKey_tHashOutput_1) == null){
	      		    mf_tHashOutput_1.getResourceMap().put(hashKey_tHashOutput_1, new org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row16Struct>(org.talend.designer.components.hashfile.common.MATCHING_MODE.KEEP_ALL));
	      		    tHashFile_tHashOutput_1 = mf_tHashOutput_1.getResourceMap().get(hashKey_tHashOutput_1);
			    }else{
			    	tHashFile_tHashOutput_1 = mf_tHashOutput_1.getResourceMap().get(hashKey_tHashOutput_1);
			    }
			}
        int nb_line_tHashOutput_1 = 0;

 



/**
 * [tHashOutput_1 begin ] stop
 */



	
	/**
	 * [tJavaRow_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaRow_4", false);
		start_Hash.put("tJavaRow_4", System.currentTimeMillis());
		
	
	currentComponent="tJavaRow_4";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row7");
					}
				
		int tos_count_tJavaRow_4 = 0;
		

int nb_line_tJavaRow_4 = 0;

 



/**
 * [tJavaRow_4 begin ] stop
 */



	
	/**
	 * [tOracleInput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_2", false);
		start_Hash.put("tOracleInput_2", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_2";
	
	
		int tos_count_tOracleInput_2 = 0;
		
	


	
		    int nb_line_tOracleInput_2 = 0;
		    java.sql.Connection conn_tOracleInput_2 = null;
				conn_tOracleInput_2 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");
				
                boolean isTimeZoneNull_tOracleInput_2 = false;
				boolean isConnectionWrapped_tOracleInput_2 = !(conn_tOracleInput_2 instanceof oracle.jdbc.OracleConnection) && conn_tOracleInput_2.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tOracleInput_2 = null;
                if (isConnectionWrapped_tOracleInput_2) {
					unwrappedOraConn_tOracleInput_2 = conn_tOracleInput_2.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tOracleInput_2 != null) {
                        isTimeZoneNull_tOracleInput_2 = (unwrappedOraConn_tOracleInput_2.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tOracleInput_2 = (((oracle.jdbc.OracleConnection)conn_tOracleInput_2).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tOracleInput_2) {
					java.sql.Statement stmtGetTZ_tOracleInput_2 = conn_tOracleInput_2.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_2 = stmtGetTZ_tOracleInput_2.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_2 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tOracleInput_2.next()) {
						sessionTimezone_tOracleInput_2 = rsGetTZ_tOracleInput_2.getString(1);
					}
					if (isConnectionWrapped_tOracleInput_2 && unwrappedOraConn_tOracleInput_2 != null) {
                        unwrappedOraConn_tOracleInput_2.setSessionTimeZone(sessionTimezone_tOracleInput_2);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_2).setSessionTimeZone(sessionTimezone_tOracleInput_2);
                    }
				}
			
		    
			java.sql.Statement stmt_tOracleInput_2 = conn_tOracleInput_2.createStatement();

		    String dbquery_tOracleInput_2 = "\nSELECT\n    DATOS.BIOLOGICO_ID AS BIOLOGICOS_ID,\n    DATOS.TIPO_VACUNA,\n    DATOS.VACUNA,\n    ROW_NUMBER() OVER( O"
+"RDER BY  DATOS.TIPO_VACUNA DESC, DATOS.VACUNA)  - 1 AS ORDEN\nFROM\n    (\n        SELECT DISTINCT\n            BIO.ID  "
+"          AS BIOLOGICO_ID,\n            BIO.TVACUNA       AS TIPO_VACUNA,\n            GEN.DESCRIPCION   AS VACUNA      "
+"  \n        FROM\n            VAC_ESQUEMAS     ESQ\n            INNER JOIN VAC_BIOLOGICOS   BIO ON ESQ.BIOLOGICOS_ID = B"
+"IO.ID\n            INNER JOIN MED_GENERICOS    GEN ON BIO.GENERICOS_ID = GEN.ID\n        WHERE\n            ESQ.ESTREGIS"
+"TRO_ID = 1\n            AND ESQ.ESTADO = 'Activo'\n            AND BIO.ESTREGISTRO_ID = 1\n            AND BIO.ESTADO = "
+"'Activo'\n            AND GEN.ESTREGISTRO_ID = 1\n            AND GEN.ESTADO = 'Activo'\n        ORDER BY\n            T"
+"IPO_VACUNA DESC,\n            VACUNA\n    ) DATOS\n";
		    

		    globalMap.put("tOracleInput_2_QUERY",dbquery_tOracleInput_2);

		    java.sql.ResultSet rs_tOracleInput_2 = null;

		    try {
		    	rs_tOracleInput_2 = stmt_tOracleInput_2.executeQuery(dbquery_tOracleInput_2);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_2 = rs_tOracleInput_2.getMetaData();
		    	int colQtyInRs_tOracleInput_2 = rsmd_tOracleInput_2.getColumnCount();

		    String tmpContent_tOracleInput_2 = null;
		    
		    
		    while (rs_tOracleInput_2.next()) {
		        nb_line_tOracleInput_2++;
		        
							if(colQtyInRs_tOracleInput_2 < 1) {
								row7.BIOLOGICOS_ID = null;
							} else {
		                          
					if(rs_tOracleInput_2.getObject(1) != null) {
						row7.BIOLOGICOS_ID = rs_tOracleInput_2.getBigDecimal(1);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_2 < 2) {
								row7.TIPO_VACUNA = null;
							} else {
	                         		
        	row7.TIPO_VACUNA = routines.system.JDBCUtil.getString(rs_tOracleInput_2, 2, false);
		                    }
							if(colQtyInRs_tOracleInput_2 < 3) {
								row7.VACUNA = null;
							} else {
	                         		
        	row7.VACUNA = routines.system.JDBCUtil.getString(rs_tOracleInput_2, 3, false);
		                    }
							if(colQtyInRs_tOracleInput_2 < 4) {
								row7.ORDEN = null;
							} else {
		                          
					if(rs_tOracleInput_2.getObject(4) != null) {
						row7.ORDEN = rs_tOracleInput_2.getBigDecimal(4);
					} else {
				
						row7.ORDEN = null;
					}
		                    }
					




 



/**
 * [tOracleInput_2 begin ] stop
 */
	
	/**
	 * [tOracleInput_2 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_2";
	
	

 


	tos_count_tOracleInput_2++;

/**
 * [tOracleInput_2 main ] stop
 */
	
	/**
	 * [tOracleInput_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_2";
	
	

 



/**
 * [tOracleInput_2 process_data_begin ] stop
 */

	
	/**
	 * [tJavaRow_4 main ] start
	 */

	

	
	
	currentComponent="tJavaRow_4";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row7"
						
						);
					}
					

    //Code generated according to input schema and output schema
row16.BIOLOGICOS_ID = row7.BIOLOGICOS_ID;
row16.TIPO_VACUNA = row7.TIPO_VACUNA;
row16.VACUNA = row7.VACUNA;
row16.ORDEN = row7.ORDEN;

List<String> vacuna = (List<String>)globalMap.get("VACUNA");
List<String> tipoVacuna = (List<String>)globalMap.get("TIPO_VACUNA");

vacuna.add(row7.VACUNA);
tipoVacuna.add(row7.TIPO_VACUNA);



    nb_line_tJavaRow_4++;   

 


	tos_count_tJavaRow_4++;

/**
 * [tJavaRow_4 main ] stop
 */
	
	/**
	 * [tJavaRow_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJavaRow_4";
	
	

 



/**
 * [tJavaRow_4 process_data_begin ] stop
 */

	
	/**
	 * [tHashOutput_1 main ] start
	 */

	

	
	
	currentComponent="tHashOutput_1";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row16"
						
						);
					}
					



    
		row16Struct oneRow_tHashOutput_1 = new row16Struct();
				
					oneRow_tHashOutput_1.BIOLOGICOS_ID = row16.BIOLOGICOS_ID;
					oneRow_tHashOutput_1.TIPO_VACUNA = row16.TIPO_VACUNA;
					oneRow_tHashOutput_1.VACUNA = row16.VACUNA;
					oneRow_tHashOutput_1.ORDEN = row16.ORDEN;
		
        tHashFile_tHashOutput_1.put(oneRow_tHashOutput_1);
        nb_line_tHashOutput_1 ++;

 


	tos_count_tHashOutput_1++;

/**
 * [tHashOutput_1 main ] stop
 */
	
	/**
	 * [tHashOutput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashOutput_1";
	
	

 



/**
 * [tHashOutput_1 process_data_begin ] stop
 */
	
	/**
	 * [tHashOutput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashOutput_1";
	
	

 



/**
 * [tHashOutput_1 process_data_end ] stop
 */



	
	/**
	 * [tJavaRow_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tJavaRow_4";
	
	

 



/**
 * [tJavaRow_4 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_2";
	
	

 



/**
 * [tOracleInput_2 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_2 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_2";
	
	

}
}finally{
	if (rs_tOracleInput_2 != null) {
		rs_tOracleInput_2.close();
	}
	if (stmt_tOracleInput_2 != null) {
		stmt_tOracleInput_2.close();
	}
}

globalMap.put("tOracleInput_2_NB_LINE",nb_line_tOracleInput_2);
 

ok_Hash.put("tOracleInput_2", true);
end_Hash.put("tOracleInput_2", System.currentTimeMillis());




/**
 * [tOracleInput_2 end ] stop
 */

	
	/**
	 * [tJavaRow_4 end ] start
	 */

	

	
	
	currentComponent="tJavaRow_4";
	
	

globalMap.put("tJavaRow_4_NB_LINE",nb_line_tJavaRow_4);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row7");
			  	}
			  	
 

ok_Hash.put("tJavaRow_4", true);
end_Hash.put("tJavaRow_4", System.currentTimeMillis());




/**
 * [tJavaRow_4 end ] stop
 */

	
	/**
	 * [tHashOutput_1 end ] start
	 */

	

	
	
	currentComponent="tHashOutput_1";
	
	
globalMap.put("tHashOutput_1_NB_LINE", nb_line_tHashOutput_1);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row16");
			  	}
			  	
 

ok_Hash.put("tHashOutput_1", true);
end_Hash.put("tHashOutput_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk10", 0, "ok");
				}
				tJava_2Process(globalMap);



/**
 * [tHashOutput_1 end ] stop
 */






				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tOracleInput_2:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk8", 0, "ok");
								} 
							
							tOracleInput_5Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleInput_2 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_2";
	
	

 



/**
 * [tOracleInput_2 finally ] stop
 */

	
	/**
	 * [tJavaRow_4 finally ] start
	 */

	

	
	
	currentComponent="tJavaRow_4";
	
	

 



/**
 * [tJavaRow_4 finally ] stop
 */

	
	/**
	 * [tHashOutput_1 finally ] start
	 */

	

	
	
	currentComponent="tHashOutput_1";
	
	

 



/**
 * [tHashOutput_1 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_2_SUBPROCESS_STATE", 1);
	}
	


public void tJava_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tJava_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_2", false);
		start_Hash.put("tJava_2", System.currentTimeMillis());
		
	
	currentComponent="tJava_2";
	
	
		int tos_count_tJava_2 = 0;
		


// Obtiene las variables globales
List<String> vacuna = (List<String>)globalMap.get("VACUNA");
List<String> tipoVacuna = (List<String>)globalMap.get("TIPO_VACUNA");

// Crear los Headers
RegistroVacunacionPoi.headerStatic();
//RegistroVacunacionPoi.headerDynamic(vacuna,tipoVacuna);

System.out.println("*- FUERZA_ID: " + context.FUERZA_ID);
System.out.println("*- UORG_ID: " + context.UORG_ID);
System.out.println("*- FECHA_INICIAL: " + context.FECHA_INICIAL);
System.out.println("*- FECHA_FINAL: " + context.FECHA_FINAL);
System.out.println("*- TESQUEMA: " + context.TESQUEMA);
 



/**
 * [tJava_2 begin ] stop
 */
	
	/**
	 * [tJava_2 main ] start
	 */

	

	
	
	currentComponent="tJava_2";
	
	

 


	tos_count_tJava_2++;

/**
 * [tJava_2 main ] stop
 */
	
	/**
	 * [tJava_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_2";
	
	

 



/**
 * [tJava_2 process_data_begin ] stop
 */
	
	/**
	 * [tJava_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_2";
	
	

 



/**
 * [tJava_2 process_data_end ] stop
 */
	
	/**
	 * [tJava_2 end ] start
	 */

	

	
	
	currentComponent="tJava_2";
	
	

 

ok_Hash.put("tJava_2", true);
end_Hash.put("tJava_2", System.currentTimeMillis());




/**
 * [tJava_2 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_2 finally ] start
	 */

	

	
	
	currentComponent="tJava_2";
	
	

 



/**
 * [tJava_2 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_2_SUBPROCESS_STATE", 1);
	}
	


public static class row17Struct implements routines.system.IPersistableRow<row17Struct> {
    final static byte[] commonByteArrayLock_VAC_CONSOLIDADOS_VAC_RegistroVacunacion = new byte[0];
    static byte[] commonByteArray_VAC_CONSOLIDADOS_VAC_RegistroVacunacion = new byte[0];

	
			    public BigDecimal ORDEN;

				public BigDecimal getORDEN () {
					return this.ORDEN;
				}

				public Boolean ORDENIsNullable(){
				    return true;
				}
				public Boolean ORDENIsKey(){
				    return false;
				}
				public Integer ORDENLength(){
				    return null;
				}
				public Integer ORDENPrecision(){
				    return null;
				}
				public String ORDENDefault(){
				
					return "";
				
				}
				public String ORDENComment(){
				
				    return "";
				
				}
				public String ORDENPattern(){
				
					return "";
				
				}
				public String ORDENOriginalDbColumnName(){
				
					return "ORDEN";
				
				}

				
			    public String FECHA_REGISTRO;

				public String getFECHA_REGISTRO () {
					return this.FECHA_REGISTRO;
				}

				public Boolean FECHA_REGISTROIsNullable(){
				    return true;
				}
				public Boolean FECHA_REGISTROIsKey(){
				    return false;
				}
				public Integer FECHA_REGISTROLength(){
				    return null;
				}
				public Integer FECHA_REGISTROPrecision(){
				    return null;
				}
				public String FECHA_REGISTRODefault(){
				
					return null;
				
				}
				public String FECHA_REGISTROComment(){
				
				    return "";
				
				}
				public String FECHA_REGISTROPattern(){
				
					return "";
				
				}
				public String FECHA_REGISTROOriginalDbColumnName(){
				
					return "FECHA_REGISTRO";
				
				}

				
			    public String FECHA_APLICACION;

				public String getFECHA_APLICACION () {
					return this.FECHA_APLICACION;
				}

				public Boolean FECHA_APLICACIONIsNullable(){
				    return true;
				}
				public Boolean FECHA_APLICACIONIsKey(){
				    return false;
				}
				public Integer FECHA_APLICACIONLength(){
				    return null;
				}
				public Integer FECHA_APLICACIONPrecision(){
				    return null;
				}
				public String FECHA_APLICACIONDefault(){
				
					return null;
				
				}
				public String FECHA_APLICACIONComment(){
				
				    return "";
				
				}
				public String FECHA_APLICACIONPattern(){
				
					return "";
				
				}
				public String FECHA_APLICACIONOriginalDbColumnName(){
				
					return "FECHA_APLICACION";
				
				}

				
			    public String TIPO_DOCUMENTO;

				public String getTIPO_DOCUMENTO () {
					return this.TIPO_DOCUMENTO;
				}

				public Boolean TIPO_DOCUMENTOIsNullable(){
				    return false;
				}
				public Boolean TIPO_DOCUMENTOIsKey(){
				    return false;
				}
				public Integer TIPO_DOCUMENTOLength(){
				    return null;
				}
				public Integer TIPO_DOCUMENTOPrecision(){
				    return null;
				}
				public String TIPO_DOCUMENTODefault(){
				
					return null;
				
				}
				public String TIPO_DOCUMENTOComment(){
				
				    return "";
				
				}
				public String TIPO_DOCUMENTOPattern(){
				
					return "";
				
				}
				public String TIPO_DOCUMENTOOriginalDbColumnName(){
				
					return "TIPO_DOCUMENTO";
				
				}

				
			    public String NUMERO_DOCUMENTO;

				public String getNUMERO_DOCUMENTO () {
					return this.NUMERO_DOCUMENTO;
				}

				public Boolean NUMERO_DOCUMENTOIsNullable(){
				    return false;
				}
				public Boolean NUMERO_DOCUMENTOIsKey(){
				    return false;
				}
				public Integer NUMERO_DOCUMENTOLength(){
				    return null;
				}
				public Integer NUMERO_DOCUMENTOPrecision(){
				    return null;
				}
				public String NUMERO_DOCUMENTODefault(){
				
					return null;
				
				}
				public String NUMERO_DOCUMENTOComment(){
				
				    return "";
				
				}
				public String NUMERO_DOCUMENTOPattern(){
				
					return "";
				
				}
				public String NUMERO_DOCUMENTOOriginalDbColumnName(){
				
					return "NUMERO_DOCUMENTO";
				
				}

				
			    public String FECHA_NACIMIENTO;

				public String getFECHA_NACIMIENTO () {
					return this.FECHA_NACIMIENTO;
				}

				public Boolean FECHA_NACIMIENTOIsNullable(){
				    return true;
				}
				public Boolean FECHA_NACIMIENTOIsKey(){
				    return false;
				}
				public Integer FECHA_NACIMIENTOLength(){
				    return null;
				}
				public Integer FECHA_NACIMIENTOPrecision(){
				    return null;
				}
				public String FECHA_NACIMIENTODefault(){
				
					return null;
				
				}
				public String FECHA_NACIMIENTOComment(){
				
				    return "";
				
				}
				public String FECHA_NACIMIENTOPattern(){
				
					return "";
				
				}
				public String FECHA_NACIMIENTOOriginalDbColumnName(){
				
					return "FECHA_NACIMIENTO";
				
				}

				
			    public String TIPO_EDAD;

				public String getTIPO_EDAD () {
					return this.TIPO_EDAD;
				}

				public Boolean TIPO_EDADIsNullable(){
				    return true;
				}
				public Boolean TIPO_EDADIsKey(){
				    return false;
				}
				public Integer TIPO_EDADLength(){
				    return null;
				}
				public Integer TIPO_EDADPrecision(){
				    return null;
				}
				public String TIPO_EDADDefault(){
				
					return null;
				
				}
				public String TIPO_EDADComment(){
				
				    return "";
				
				}
				public String TIPO_EDADPattern(){
				
					return "";
				
				}
				public String TIPO_EDADOriginalDbColumnName(){
				
					return "TIPO_EDAD";
				
				}

				
			    public BigDecimal EDAD;

				public BigDecimal getEDAD () {
					return this.EDAD;
				}

				public Boolean EDADIsNullable(){
				    return true;
				}
				public Boolean EDADIsKey(){
				    return false;
				}
				public Integer EDADLength(){
				    return null;
				}
				public Integer EDADPrecision(){
				    return null;
				}
				public String EDADDefault(){
				
					return "";
				
				}
				public String EDADComment(){
				
				    return "";
				
				}
				public String EDADPattern(){
				
					return "";
				
				}
				public String EDADOriginalDbColumnName(){
				
					return "EDAD";
				
				}

				
			    public String SEXO;

				public String getSEXO () {
					return this.SEXO;
				}

				public Boolean SEXOIsNullable(){
				    return false;
				}
				public Boolean SEXOIsKey(){
				    return false;
				}
				public Integer SEXOLength(){
				    return null;
				}
				public Integer SEXOPrecision(){
				    return null;
				}
				public String SEXODefault(){
				
					return null;
				
				}
				public String SEXOComment(){
				
				    return "";
				
				}
				public String SEXOPattern(){
				
					return "";
				
				}
				public String SEXOOriginalDbColumnName(){
				
					return "SEXO";
				
				}

				
			    public String PRIMER_NOMBRE;

				public String getPRIMER_NOMBRE () {
					return this.PRIMER_NOMBRE;
				}

				public Boolean PRIMER_NOMBREIsNullable(){
				    return true;
				}
				public Boolean PRIMER_NOMBREIsKey(){
				    return false;
				}
				public Integer PRIMER_NOMBRELength(){
				    return null;
				}
				public Integer PRIMER_NOMBREPrecision(){
				    return null;
				}
				public String PRIMER_NOMBREDefault(){
				
					return null;
				
				}
				public String PRIMER_NOMBREComment(){
				
				    return "";
				
				}
				public String PRIMER_NOMBREPattern(){
				
					return "";
				
				}
				public String PRIMER_NOMBREOriginalDbColumnName(){
				
					return "PRIMER_NOMBRE";
				
				}

				
			    public String SEGUNDO_NOMBRE;

				public String getSEGUNDO_NOMBRE () {
					return this.SEGUNDO_NOMBRE;
				}

				public Boolean SEGUNDO_NOMBREIsNullable(){
				    return true;
				}
				public Boolean SEGUNDO_NOMBREIsKey(){
				    return false;
				}
				public Integer SEGUNDO_NOMBRELength(){
				    return null;
				}
				public Integer SEGUNDO_NOMBREPrecision(){
				    return null;
				}
				public String SEGUNDO_NOMBREDefault(){
				
					return null;
				
				}
				public String SEGUNDO_NOMBREComment(){
				
				    return "";
				
				}
				public String SEGUNDO_NOMBREPattern(){
				
					return "";
				
				}
				public String SEGUNDO_NOMBREOriginalDbColumnName(){
				
					return "SEGUNDO_NOMBRE";
				
				}

				
			    public String PRIMER_APELLIDO;

				public String getPRIMER_APELLIDO () {
					return this.PRIMER_APELLIDO;
				}

				public Boolean PRIMER_APELLIDOIsNullable(){
				    return true;
				}
				public Boolean PRIMER_APELLIDOIsKey(){
				    return false;
				}
				public Integer PRIMER_APELLIDOLength(){
				    return null;
				}
				public Integer PRIMER_APELLIDOPrecision(){
				    return null;
				}
				public String PRIMER_APELLIDODefault(){
				
					return null;
				
				}
				public String PRIMER_APELLIDOComment(){
				
				    return "";
				
				}
				public String PRIMER_APELLIDOPattern(){
				
					return "";
				
				}
				public String PRIMER_APELLIDOOriginalDbColumnName(){
				
					return "PRIMER_APELLIDO";
				
				}

				
			    public String SEGUNDO_APELLIDO;

				public String getSEGUNDO_APELLIDO () {
					return this.SEGUNDO_APELLIDO;
				}

				public Boolean SEGUNDO_APELLIDOIsNullable(){
				    return true;
				}
				public Boolean SEGUNDO_APELLIDOIsKey(){
				    return false;
				}
				public Integer SEGUNDO_APELLIDOLength(){
				    return null;
				}
				public Integer SEGUNDO_APELLIDOPrecision(){
				    return null;
				}
				public String SEGUNDO_APELLIDODefault(){
				
					return null;
				
				}
				public String SEGUNDO_APELLIDOComment(){
				
				    return "";
				
				}
				public String SEGUNDO_APELLIDOPattern(){
				
					return "";
				
				}
				public String SEGUNDO_APELLIDOOriginalDbColumnName(){
				
					return "SEGUNDO_APELLIDO";
				
				}

				
			    public String REGIMEN;

				public String getREGIMEN () {
					return this.REGIMEN;
				}

				public Boolean REGIMENIsNullable(){
				    return true;
				}
				public Boolean REGIMENIsKey(){
				    return false;
				}
				public Integer REGIMENLength(){
				    return null;
				}
				public Integer REGIMENPrecision(){
				    return null;
				}
				public String REGIMENDefault(){
				
					return null;
				
				}
				public String REGIMENComment(){
				
				    return "";
				
				}
				public String REGIMENPattern(){
				
					return "";
				
				}
				public String REGIMENOriginalDbColumnName(){
				
					return "REGIMEN";
				
				}

				
			    public String EPS;

				public String getEPS () {
					return this.EPS;
				}

				public Boolean EPSIsNullable(){
				    return true;
				}
				public Boolean EPSIsKey(){
				    return false;
				}
				public Integer EPSLength(){
				    return null;
				}
				public Integer EPSPrecision(){
				    return null;
				}
				public String EPSDefault(){
				
					return null;
				
				}
				public String EPSComment(){
				
				    return "";
				
				}
				public String EPSPattern(){
				
					return "";
				
				}
				public String EPSOriginalDbColumnName(){
				
					return "EPS";
				
				}

				
			    public String GRADO;

				public String getGRADO () {
					return this.GRADO;
				}

				public Boolean GRADOIsNullable(){
				    return true;
				}
				public Boolean GRADOIsKey(){
				    return false;
				}
				public Integer GRADOLength(){
				    return null;
				}
				public Integer GRADOPrecision(){
				    return null;
				}
				public String GRADODefault(){
				
					return null;
				
				}
				public String GRADOComment(){
				
				    return "";
				
				}
				public String GRADOPattern(){
				
					return "";
				
				}
				public String GRADOOriginalDbColumnName(){
				
					return "GRADO";
				
				}

				
			    public String TIPO_AFILIACION;

				public String getTIPO_AFILIACION () {
					return this.TIPO_AFILIACION;
				}

				public Boolean TIPO_AFILIACIONIsNullable(){
				    return true;
				}
				public Boolean TIPO_AFILIACIONIsKey(){
				    return false;
				}
				public Integer TIPO_AFILIACIONLength(){
				    return null;
				}
				public Integer TIPO_AFILIACIONPrecision(){
				    return null;
				}
				public String TIPO_AFILIACIONDefault(){
				
					return null;
				
				}
				public String TIPO_AFILIACIONComment(){
				
				    return "";
				
				}
				public String TIPO_AFILIACIONPattern(){
				
					return "";
				
				}
				public String TIPO_AFILIACIONOriginalDbColumnName(){
				
					return "TIPO_AFILIACION";
				
				}

				
			    public String FUERZA_ADSCRIPCION;

				public String getFUERZA_ADSCRIPCION () {
					return this.FUERZA_ADSCRIPCION;
				}

				public Boolean FUERZA_ADSCRIPCIONIsNullable(){
				    return true;
				}
				public Boolean FUERZA_ADSCRIPCIONIsKey(){
				    return false;
				}
				public Integer FUERZA_ADSCRIPCIONLength(){
				    return null;
				}
				public Integer FUERZA_ADSCRIPCIONPrecision(){
				    return null;
				}
				public String FUERZA_ADSCRIPCIONDefault(){
				
					return null;
				
				}
				public String FUERZA_ADSCRIPCIONComment(){
				
				    return "";
				
				}
				public String FUERZA_ADSCRIPCIONPattern(){
				
					return "";
				
				}
				public String FUERZA_ADSCRIPCIONOriginalDbColumnName(){
				
					return "FUERZA_ADSCRIPCION";
				
				}

				
			    public String ESM_ADSCRIPCION;

				public String getESM_ADSCRIPCION () {
					return this.ESM_ADSCRIPCION;
				}

				public Boolean ESM_ADSCRIPCIONIsNullable(){
				    return true;
				}
				public Boolean ESM_ADSCRIPCIONIsKey(){
				    return false;
				}
				public Integer ESM_ADSCRIPCIONLength(){
				    return null;
				}
				public Integer ESM_ADSCRIPCIONPrecision(){
				    return null;
				}
				public String ESM_ADSCRIPCIONDefault(){
				
					return null;
				
				}
				public String ESM_ADSCRIPCIONComment(){
				
				    return "";
				
				}
				public String ESM_ADSCRIPCIONPattern(){
				
					return "";
				
				}
				public String ESM_ADSCRIPCIONOriginalDbColumnName(){
				
					return "ESM_ADSCRIPCION";
				
				}

				
			    public String FUERZA;

				public String getFUERZA () {
					return this.FUERZA;
				}

				public Boolean FUERZAIsNullable(){
				    return true;
				}
				public Boolean FUERZAIsKey(){
				    return false;
				}
				public Integer FUERZALength(){
				    return null;
				}
				public Integer FUERZAPrecision(){
				    return null;
				}
				public String FUERZADefault(){
				
					return null;
				
				}
				public String FUERZAComment(){
				
				    return "";
				
				}
				public String FUERZAPattern(){
				
					return "";
				
				}
				public String FUERZAOriginalDbColumnName(){
				
					return "FUERZA";
				
				}

				
			    public String UORG;

				public String getUORG () {
					return this.UORG;
				}

				public Boolean UORGIsNullable(){
				    return false;
				}
				public Boolean UORGIsKey(){
				    return false;
				}
				public Integer UORGLength(){
				    return null;
				}
				public Integer UORGPrecision(){
				    return null;
				}
				public String UORGDefault(){
				
					return null;
				
				}
				public String UORGComment(){
				
				    return "";
				
				}
				public String UORGPattern(){
				
					return "";
				
				}
				public String UORGOriginalDbColumnName(){
				
					return "UORG";
				
				}

				
			    public String USUARIO;

				public String getUSUARIO () {
					return this.USUARIO;
				}

				public Boolean USUARIOIsNullable(){
				    return true;
				}
				public Boolean USUARIOIsKey(){
				    return false;
				}
				public Integer USUARIOLength(){
				    return null;
				}
				public Integer USUARIOPrecision(){
				    return null;
				}
				public String USUARIODefault(){
				
					return null;
				
				}
				public String USUARIOComment(){
				
				    return "";
				
				}
				public String USUARIOPattern(){
				
					return "";
				
				}
				public String USUARIOOriginalDbColumnName(){
				
					return "USUARIO";
				
				}

				
			    public String PUNTO_VACUNADOR;

				public String getPUNTO_VACUNADOR () {
					return this.PUNTO_VACUNADOR;
				}

				public Boolean PUNTO_VACUNADORIsNullable(){
				    return true;
				}
				public Boolean PUNTO_VACUNADORIsKey(){
				    return false;
				}
				public Integer PUNTO_VACUNADORLength(){
				    return null;
				}
				public Integer PUNTO_VACUNADORPrecision(){
				    return null;
				}
				public String PUNTO_VACUNADORDefault(){
				
					return null;
				
				}
				public String PUNTO_VACUNADORComment(){
				
				    return "";
				
				}
				public String PUNTO_VACUNADORPattern(){
				
					return "";
				
				}
				public String PUNTO_VACUNADOROriginalDbColumnName(){
				
					return "PUNTO_VACUNADOR";
				
				}

				
			    public String NOMBRE_VACUNADOR;

				public String getNOMBRE_VACUNADOR () {
					return this.NOMBRE_VACUNADOR;
				}

				public Boolean NOMBRE_VACUNADORIsNullable(){
				    return true;
				}
				public Boolean NOMBRE_VACUNADORIsKey(){
				    return false;
				}
				public Integer NOMBRE_VACUNADORLength(){
				    return null;
				}
				public Integer NOMBRE_VACUNADORPrecision(){
				    return null;
				}
				public String NOMBRE_VACUNADORDefault(){
				
					return null;
				
				}
				public String NOMBRE_VACUNADORComment(){
				
				    return "";
				
				}
				public String NOMBRE_VACUNADORPattern(){
				
					return "";
				
				}
				public String NOMBRE_VACUNADOROriginalDbColumnName(){
				
					return "NOMBRE_VACUNADOR";
				
				}

				
			    public String DEPARTAMENTO_RESIDENCIA;

				public String getDEPARTAMENTO_RESIDENCIA () {
					return this.DEPARTAMENTO_RESIDENCIA;
				}

				public Boolean DEPARTAMENTO_RESIDENCIAIsNullable(){
				    return true;
				}
				public Boolean DEPARTAMENTO_RESIDENCIAIsKey(){
				    return false;
				}
				public Integer DEPARTAMENTO_RESIDENCIALength(){
				    return null;
				}
				public Integer DEPARTAMENTO_RESIDENCIAPrecision(){
				    return null;
				}
				public String DEPARTAMENTO_RESIDENCIADefault(){
				
					return null;
				
				}
				public String DEPARTAMENTO_RESIDENCIAComment(){
				
				    return "";
				
				}
				public String DEPARTAMENTO_RESIDENCIAPattern(){
				
					return "";
				
				}
				public String DEPARTAMENTO_RESIDENCIAOriginalDbColumnName(){
				
					return "DEPARTAMENTO_RESIDENCIA";
				
				}

				
			    public String MUNICIPIO_RESIDENCIA;

				public String getMUNICIPIO_RESIDENCIA () {
					return this.MUNICIPIO_RESIDENCIA;
				}

				public Boolean MUNICIPIO_RESIDENCIAIsNullable(){
				    return true;
				}
				public Boolean MUNICIPIO_RESIDENCIAIsKey(){
				    return false;
				}
				public Integer MUNICIPIO_RESIDENCIALength(){
				    return null;
				}
				public Integer MUNICIPIO_RESIDENCIAPrecision(){
				    return null;
				}
				public String MUNICIPIO_RESIDENCIADefault(){
				
					return null;
				
				}
				public String MUNICIPIO_RESIDENCIAComment(){
				
				    return "";
				
				}
				public String MUNICIPIO_RESIDENCIAPattern(){
				
					return "";
				
				}
				public String MUNICIPIO_RESIDENCIAOriginalDbColumnName(){
				
					return "MUNICIPIO_RESIDENCIA";
				
				}

				
			    public String BARRIO;

				public String getBARRIO () {
					return this.BARRIO;
				}

				public Boolean BARRIOIsNullable(){
				    return true;
				}
				public Boolean BARRIOIsKey(){
				    return false;
				}
				public Integer BARRIOLength(){
				    return null;
				}
				public Integer BARRIOPrecision(){
				    return null;
				}
				public String BARRIODefault(){
				
					return null;
				
				}
				public String BARRIOComment(){
				
				    return "";
				
				}
				public String BARRIOPattern(){
				
					return "";
				
				}
				public String BARRIOOriginalDbColumnName(){
				
					return "BARRIO";
				
				}

				
			    public String DIRECCION;

				public String getDIRECCION () {
					return this.DIRECCION;
				}

				public Boolean DIRECCIONIsNullable(){
				    return true;
				}
				public Boolean DIRECCIONIsKey(){
				    return false;
				}
				public Integer DIRECCIONLength(){
				    return null;
				}
				public Integer DIRECCIONPrecision(){
				    return null;
				}
				public String DIRECCIONDefault(){
				
					return null;
				
				}
				public String DIRECCIONComment(){
				
				    return "";
				
				}
				public String DIRECCIONPattern(){
				
					return "";
				
				}
				public String DIRECCIONOriginalDbColumnName(){
				
					return "DIRECCION";
				
				}

				
			    public String TELEFONO;

				public String getTELEFONO () {
					return this.TELEFONO;
				}

				public Boolean TELEFONOIsNullable(){
				    return true;
				}
				public Boolean TELEFONOIsKey(){
				    return false;
				}
				public Integer TELEFONOLength(){
				    return null;
				}
				public Integer TELEFONOPrecision(){
				    return null;
				}
				public String TELEFONODefault(){
				
					return null;
				
				}
				public String TELEFONOComment(){
				
				    return "";
				
				}
				public String TELEFONOPattern(){
				
					return "";
				
				}
				public String TELEFONOOriginalDbColumnName(){
				
					return "TELEFONO";
				
				}

				
			    public String GRUPO_ETNICO;

				public String getGRUPO_ETNICO () {
					return this.GRUPO_ETNICO;
				}

				public Boolean GRUPO_ETNICOIsNullable(){
				    return true;
				}
				public Boolean GRUPO_ETNICOIsKey(){
				    return false;
				}
				public Integer GRUPO_ETNICOLength(){
				    return null;
				}
				public Integer GRUPO_ETNICOPrecision(){
				    return null;
				}
				public String GRUPO_ETNICODefault(){
				
					return null;
				
				}
				public String GRUPO_ETNICOComment(){
				
				    return "";
				
				}
				public String GRUPO_ETNICOPattern(){
				
					return "";
				
				}
				public String GRUPO_ETNICOOriginalDbColumnName(){
				
					return "GRUPO_ETNICO";
				
				}

				
			    public String DESPLAZADA;

				public String getDESPLAZADA () {
					return this.DESPLAZADA;
				}

				public Boolean DESPLAZADAIsNullable(){
				    return true;
				}
				public Boolean DESPLAZADAIsKey(){
				    return false;
				}
				public Integer DESPLAZADALength(){
				    return null;
				}
				public Integer DESPLAZADAPrecision(){
				    return null;
				}
				public String DESPLAZADADefault(){
				
					return null;
				
				}
				public String DESPLAZADAComment(){
				
				    return "";
				
				}
				public String DESPLAZADAPattern(){
				
					return "";
				
				}
				public String DESPLAZADAOriginalDbColumnName(){
				
					return "DESPLAZADA";
				
				}

				
			    public String DISCAPACITADA;

				public String getDISCAPACITADA () {
					return this.DISCAPACITADA;
				}

				public Boolean DISCAPACITADAIsNullable(){
				    return true;
				}
				public Boolean DISCAPACITADAIsKey(){
				    return false;
				}
				public Integer DISCAPACITADALength(){
				    return null;
				}
				public Integer DISCAPACITADAPrecision(){
				    return null;
				}
				public String DISCAPACITADADefault(){
				
					return null;
				
				}
				public String DISCAPACITADAComment(){
				
				    return "";
				
				}
				public String DISCAPACITADAPattern(){
				
					return "";
				
				}
				public String DISCAPACITADAOriginalDbColumnName(){
				
					return "DISCAPACITADA";
				
				}

				
			    public String VICTIMA;

				public String getVICTIMA () {
					return this.VICTIMA;
				}

				public Boolean VICTIMAIsNullable(){
				    return true;
				}
				public Boolean VICTIMAIsKey(){
				    return false;
				}
				public Integer VICTIMALength(){
				    return null;
				}
				public Integer VICTIMAPrecision(){
				    return null;
				}
				public String VICTIMADefault(){
				
					return null;
				
				}
				public String VICTIMAComment(){
				
				    return "";
				
				}
				public String VICTIMAPattern(){
				
					return "";
				
				}
				public String VICTIMAOriginalDbColumnName(){
				
					return "VICTIMA";
				
				}

				
			    public String ZVEREDAL;

				public String getZVEREDAL () {
					return this.ZVEREDAL;
				}

				public Boolean ZVEREDALIsNullable(){
				    return true;
				}
				public Boolean ZVEREDALIsKey(){
				    return false;
				}
				public Integer ZVEREDALLength(){
				    return null;
				}
				public Integer ZVEREDALPrecision(){
				    return null;
				}
				public String ZVEREDALDefault(){
				
					return null;
				
				}
				public String ZVEREDALComment(){
				
				    return "";
				
				}
				public String ZVEREDALPattern(){
				
					return "";
				
				}
				public String ZVEREDALOriginalDbColumnName(){
				
					return "ZVEREDAL";
				
				}

				
			    public String PARENTESCO;

				public String getPARENTESCO () {
					return this.PARENTESCO;
				}

				public Boolean PARENTESCOIsNullable(){
				    return true;
				}
				public Boolean PARENTESCOIsKey(){
				    return false;
				}
				public Integer PARENTESCOLength(){
				    return null;
				}
				public Integer PARENTESCOPrecision(){
				    return null;
				}
				public String PARENTESCODefault(){
				
					return null;
				
				}
				public String PARENTESCOComment(){
				
				    return "";
				
				}
				public String PARENTESCOPattern(){
				
					return "";
				
				}
				public String PARENTESCOOriginalDbColumnName(){
				
					return "PARENTESCO";
				
				}

				
			    public String TIPO_DOCUMENTO_COTIZANTE;

				public String getTIPO_DOCUMENTO_COTIZANTE () {
					return this.TIPO_DOCUMENTO_COTIZANTE;
				}

				public Boolean TIPO_DOCUMENTO_COTIZANTEIsNullable(){
				    return true;
				}
				public Boolean TIPO_DOCUMENTO_COTIZANTEIsKey(){
				    return false;
				}
				public Integer TIPO_DOCUMENTO_COTIZANTELength(){
				    return null;
				}
				public Integer TIPO_DOCUMENTO_COTIZANTEPrecision(){
				    return null;
				}
				public String TIPO_DOCUMENTO_COTIZANTEDefault(){
				
					return null;
				
				}
				public String TIPO_DOCUMENTO_COTIZANTEComment(){
				
				    return "";
				
				}
				public String TIPO_DOCUMENTO_COTIZANTEPattern(){
				
					return "";
				
				}
				public String TIPO_DOCUMENTO_COTIZANTEOriginalDbColumnName(){
				
					return "TIPO_DOCUMENTO_COTIZANTE";
				
				}

				
			    public String NUMERO_DOCUMENTO_COTIZANTE;

				public String getNUMERO_DOCUMENTO_COTIZANTE () {
					return this.NUMERO_DOCUMENTO_COTIZANTE;
				}

				public Boolean NUMERO_DOCUMENTO_COTIZANTEIsNullable(){
				    return true;
				}
				public Boolean NUMERO_DOCUMENTO_COTIZANTEIsKey(){
				    return false;
				}
				public Integer NUMERO_DOCUMENTO_COTIZANTELength(){
				    return null;
				}
				public Integer NUMERO_DOCUMENTO_COTIZANTEPrecision(){
				    return null;
				}
				public String NUMERO_DOCUMENTO_COTIZANTEDefault(){
				
					return null;
				
				}
				public String NUMERO_DOCUMENTO_COTIZANTEComment(){
				
				    return "";
				
				}
				public String NUMERO_DOCUMENTO_COTIZANTEPattern(){
				
					return "";
				
				}
				public String NUMERO_DOCUMENTO_COTIZANTEOriginalDbColumnName(){
				
					return "NUMERO_DOCUMENTO_COTIZANTE";
				
				}

				
			    public String PRIMER_NOMBRE_COTIZANTE;

				public String getPRIMER_NOMBRE_COTIZANTE () {
					return this.PRIMER_NOMBRE_COTIZANTE;
				}

				public Boolean PRIMER_NOMBRE_COTIZANTEIsNullable(){
				    return true;
				}
				public Boolean PRIMER_NOMBRE_COTIZANTEIsKey(){
				    return false;
				}
				public Integer PRIMER_NOMBRE_COTIZANTELength(){
				    return null;
				}
				public Integer PRIMER_NOMBRE_COTIZANTEPrecision(){
				    return null;
				}
				public String PRIMER_NOMBRE_COTIZANTEDefault(){
				
					return null;
				
				}
				public String PRIMER_NOMBRE_COTIZANTEComment(){
				
				    return "";
				
				}
				public String PRIMER_NOMBRE_COTIZANTEPattern(){
				
					return "";
				
				}
				public String PRIMER_NOMBRE_COTIZANTEOriginalDbColumnName(){
				
					return "PRIMER_NOMBRE_COTIZANTE";
				
				}

				
			    public String SEGUNDO_NOMBRE_COTIZANTE;

				public String getSEGUNDO_NOMBRE_COTIZANTE () {
					return this.SEGUNDO_NOMBRE_COTIZANTE;
				}

				public Boolean SEGUNDO_NOMBRE_COTIZANTEIsNullable(){
				    return true;
				}
				public Boolean SEGUNDO_NOMBRE_COTIZANTEIsKey(){
				    return false;
				}
				public Integer SEGUNDO_NOMBRE_COTIZANTELength(){
				    return null;
				}
				public Integer SEGUNDO_NOMBRE_COTIZANTEPrecision(){
				    return null;
				}
				public String SEGUNDO_NOMBRE_COTIZANTEDefault(){
				
					return null;
				
				}
				public String SEGUNDO_NOMBRE_COTIZANTEComment(){
				
				    return "";
				
				}
				public String SEGUNDO_NOMBRE_COTIZANTEPattern(){
				
					return "";
				
				}
				public String SEGUNDO_NOMBRE_COTIZANTEOriginalDbColumnName(){
				
					return "SEGUNDO_NOMBRE_COTIZANTE";
				
				}

				
			    public String PRIMER_APELLIDO_COTIZANTE;

				public String getPRIMER_APELLIDO_COTIZANTE () {
					return this.PRIMER_APELLIDO_COTIZANTE;
				}

				public Boolean PRIMER_APELLIDO_COTIZANTEIsNullable(){
				    return true;
				}
				public Boolean PRIMER_APELLIDO_COTIZANTEIsKey(){
				    return false;
				}
				public Integer PRIMER_APELLIDO_COTIZANTELength(){
				    return null;
				}
				public Integer PRIMER_APELLIDO_COTIZANTEPrecision(){
				    return null;
				}
				public String PRIMER_APELLIDO_COTIZANTEDefault(){
				
					return null;
				
				}
				public String PRIMER_APELLIDO_COTIZANTEComment(){
				
				    return "";
				
				}
				public String PRIMER_APELLIDO_COTIZANTEPattern(){
				
					return "";
				
				}
				public String PRIMER_APELLIDO_COTIZANTEOriginalDbColumnName(){
				
					return "PRIMER_APELLIDO_COTIZANTE";
				
				}

				
			    public String SEGUNDO_APELLIDO_COTIZANTE;

				public String getSEGUNDO_APELLIDO_COTIZANTE () {
					return this.SEGUNDO_APELLIDO_COTIZANTE;
				}

				public Boolean SEGUNDO_APELLIDO_COTIZANTEIsNullable(){
				    return true;
				}
				public Boolean SEGUNDO_APELLIDO_COTIZANTEIsKey(){
				    return false;
				}
				public Integer SEGUNDO_APELLIDO_COTIZANTELength(){
				    return null;
				}
				public Integer SEGUNDO_APELLIDO_COTIZANTEPrecision(){
				    return null;
				}
				public String SEGUNDO_APELLIDO_COTIZANTEDefault(){
				
					return null;
				
				}
				public String SEGUNDO_APELLIDO_COTIZANTEComment(){
				
				    return "";
				
				}
				public String SEGUNDO_APELLIDO_COTIZANTEPattern(){
				
					return "";
				
				}
				public String SEGUNDO_APELLIDO_COTIZANTEOriginalDbColumnName(){
				
					return "SEGUNDO_APELLIDO_COTIZANTE";
				
				}

				
			    public String GRADO_COTIZANTE;

				public String getGRADO_COTIZANTE () {
					return this.GRADO_COTIZANTE;
				}

				public Boolean GRADO_COTIZANTEIsNullable(){
				    return true;
				}
				public Boolean GRADO_COTIZANTEIsKey(){
				    return false;
				}
				public Integer GRADO_COTIZANTELength(){
				    return null;
				}
				public Integer GRADO_COTIZANTEPrecision(){
				    return null;
				}
				public String GRADO_COTIZANTEDefault(){
				
					return null;
				
				}
				public String GRADO_COTIZANTEComment(){
				
				    return "";
				
				}
				public String GRADO_COTIZANTEPattern(){
				
					return "";
				
				}
				public String GRADO_COTIZANTEOriginalDbColumnName(){
				
					return "GRADO_COTIZANTE";
				
				}

				
			    public String ACOM_TDOCUMENTO;

				public String getACOM_TDOCUMENTO () {
					return this.ACOM_TDOCUMENTO;
				}

				public Boolean ACOM_TDOCUMENTOIsNullable(){
				    return true;
				}
				public Boolean ACOM_TDOCUMENTOIsKey(){
				    return false;
				}
				public Integer ACOM_TDOCUMENTOLength(){
				    return null;
				}
				public Integer ACOM_TDOCUMENTOPrecision(){
				    return null;
				}
				public String ACOM_TDOCUMENTODefault(){
				
					return null;
				
				}
				public String ACOM_TDOCUMENTOComment(){
				
				    return "";
				
				}
				public String ACOM_TDOCUMENTOPattern(){
				
					return "";
				
				}
				public String ACOM_TDOCUMENTOOriginalDbColumnName(){
				
					return "ACOM_TDOCUMENTO";
				
				}

				
			    public String ACOM_DOCUMENTO;

				public String getACOM_DOCUMENTO () {
					return this.ACOM_DOCUMENTO;
				}

				public Boolean ACOM_DOCUMENTOIsNullable(){
				    return true;
				}
				public Boolean ACOM_DOCUMENTOIsKey(){
				    return false;
				}
				public Integer ACOM_DOCUMENTOLength(){
				    return null;
				}
				public Integer ACOM_DOCUMENTOPrecision(){
				    return null;
				}
				public String ACOM_DOCUMENTODefault(){
				
					return null;
				
				}
				public String ACOM_DOCUMENTOComment(){
				
				    return "";
				
				}
				public String ACOM_DOCUMENTOPattern(){
				
					return "";
				
				}
				public String ACOM_DOCUMENTOOriginalDbColumnName(){
				
					return "ACOM_DOCUMENTO";
				
				}

				
			    public String ACOM_NOMBRE1;

				public String getACOM_NOMBRE1 () {
					return this.ACOM_NOMBRE1;
				}

				public Boolean ACOM_NOMBRE1IsNullable(){
				    return true;
				}
				public Boolean ACOM_NOMBRE1IsKey(){
				    return false;
				}
				public Integer ACOM_NOMBRE1Length(){
				    return null;
				}
				public Integer ACOM_NOMBRE1Precision(){
				    return null;
				}
				public String ACOM_NOMBRE1Default(){
				
					return null;
				
				}
				public String ACOM_NOMBRE1Comment(){
				
				    return "";
				
				}
				public String ACOM_NOMBRE1Pattern(){
				
					return "";
				
				}
				public String ACOM_NOMBRE1OriginalDbColumnName(){
				
					return "ACOM_NOMBRE1";
				
				}

				
			    public String ACOM_NOMBRE2;

				public String getACOM_NOMBRE2 () {
					return this.ACOM_NOMBRE2;
				}

				public Boolean ACOM_NOMBRE2IsNullable(){
				    return true;
				}
				public Boolean ACOM_NOMBRE2IsKey(){
				    return false;
				}
				public Integer ACOM_NOMBRE2Length(){
				    return null;
				}
				public Integer ACOM_NOMBRE2Precision(){
				    return null;
				}
				public String ACOM_NOMBRE2Default(){
				
					return null;
				
				}
				public String ACOM_NOMBRE2Comment(){
				
				    return "";
				
				}
				public String ACOM_NOMBRE2Pattern(){
				
					return "";
				
				}
				public String ACOM_NOMBRE2OriginalDbColumnName(){
				
					return "ACOM_NOMBRE2";
				
				}

				
			    public String ACOM_APELLIDO1;

				public String getACOM_APELLIDO1 () {
					return this.ACOM_APELLIDO1;
				}

				public Boolean ACOM_APELLIDO1IsNullable(){
				    return true;
				}
				public Boolean ACOM_APELLIDO1IsKey(){
				    return false;
				}
				public Integer ACOM_APELLIDO1Length(){
				    return null;
				}
				public Integer ACOM_APELLIDO1Precision(){
				    return null;
				}
				public String ACOM_APELLIDO1Default(){
				
					return null;
				
				}
				public String ACOM_APELLIDO1Comment(){
				
				    return "";
				
				}
				public String ACOM_APELLIDO1Pattern(){
				
					return "";
				
				}
				public String ACOM_APELLIDO1OriginalDbColumnName(){
				
					return "ACOM_APELLIDO1";
				
				}

				
			    public String ACOM_APELLIDO2;

				public String getACOM_APELLIDO2 () {
					return this.ACOM_APELLIDO2;
				}

				public Boolean ACOM_APELLIDO2IsNullable(){
				    return true;
				}
				public Boolean ACOM_APELLIDO2IsKey(){
				    return false;
				}
				public Integer ACOM_APELLIDO2Length(){
				    return null;
				}
				public Integer ACOM_APELLIDO2Precision(){
				    return null;
				}
				public String ACOM_APELLIDO2Default(){
				
					return null;
				
				}
				public String ACOM_APELLIDO2Comment(){
				
				    return "";
				
				}
				public String ACOM_APELLIDO2Pattern(){
				
					return "";
				
				}
				public String ACOM_APELLIDO2OriginalDbColumnName(){
				
					return "ACOM_APELLIDO2";
				
				}

				
			    public String ACOM_PARENTESCO;

				public String getACOM_PARENTESCO () {
					return this.ACOM_PARENTESCO;
				}

				public Boolean ACOM_PARENTESCOIsNullable(){
				    return true;
				}
				public Boolean ACOM_PARENTESCOIsKey(){
				    return false;
				}
				public Integer ACOM_PARENTESCOLength(){
				    return null;
				}
				public Integer ACOM_PARENTESCOPrecision(){
				    return null;
				}
				public String ACOM_PARENTESCODefault(){
				
					return null;
				
				}
				public String ACOM_PARENTESCOComment(){
				
				    return "";
				
				}
				public String ACOM_PARENTESCOPattern(){
				
					return "";
				
				}
				public String ACOM_PARENTESCOOriginalDbColumnName(){
				
					return "ACOM_PARENTESCO";
				
				}

				
			    public String ACOM_TELEFONO;

				public String getACOM_TELEFONO () {
					return this.ACOM_TELEFONO;
				}

				public Boolean ACOM_TELEFONOIsNullable(){
				    return true;
				}
				public Boolean ACOM_TELEFONOIsKey(){
				    return false;
				}
				public Integer ACOM_TELEFONOLength(){
				    return null;
				}
				public Integer ACOM_TELEFONOPrecision(){
				    return null;
				}
				public String ACOM_TELEFONODefault(){
				
					return null;
				
				}
				public String ACOM_TELEFONOComment(){
				
				    return "";
				
				}
				public String ACOM_TELEFONOPattern(){
				
					return "";
				
				}
				public String ACOM_TELEFONOOriginalDbColumnName(){
				
					return "ACOM_TELEFONO";
				
				}

				
			    public String ACOM_CORREO;

				public String getACOM_CORREO () {
					return this.ACOM_CORREO;
				}

				public Boolean ACOM_CORREOIsNullable(){
				    return true;
				}
				public Boolean ACOM_CORREOIsKey(){
				    return false;
				}
				public Integer ACOM_CORREOLength(){
				    return null;
				}
				public Integer ACOM_CORREOPrecision(){
				    return null;
				}
				public String ACOM_CORREODefault(){
				
					return null;
				
				}
				public String ACOM_CORREOComment(){
				
				    return "";
				
				}
				public String ACOM_CORREOPattern(){
				
					return "";
				
				}
				public String ACOM_CORREOOriginalDbColumnName(){
				
					return "ACOM_CORREO";
				
				}

				
			    public String DAPLICADAS_ID;

				public String getDAPLICADAS_ID () {
					return this.DAPLICADAS_ID;
				}

				public Boolean DAPLICADAS_IDIsNullable(){
				    return true;
				}
				public Boolean DAPLICADAS_IDIsKey(){
				    return false;
				}
				public Integer DAPLICADAS_IDLength(){
				    return null;
				}
				public Integer DAPLICADAS_IDPrecision(){
				    return null;
				}
				public String DAPLICADAS_IDDefault(){
				
					return null;
				
				}
				public String DAPLICADAS_IDComment(){
				
				    return "";
				
				}
				public String DAPLICADAS_IDPattern(){
				
					return "";
				
				}
				public String DAPLICADAS_IDOriginalDbColumnName(){
				
					return "DAPLICADAS_ID";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_VAC_CONSOLIDADOS_VAC_RegistroVacunacion.length) {
				if(length < 1024 && commonByteArray_VAC_CONSOLIDADOS_VAC_RegistroVacunacion.length == 0) {
   					commonByteArray_VAC_CONSOLIDADOS_VAC_RegistroVacunacion = new byte[1024];
				} else {
   					commonByteArray_VAC_CONSOLIDADOS_VAC_RegistroVacunacion = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_VAC_CONSOLIDADOS_VAC_RegistroVacunacion, 0, length);
			strReturn = new String(commonByteArray_VAC_CONSOLIDADOS_VAC_RegistroVacunacion, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_VAC_CONSOLIDADOS_VAC_RegistroVacunacion.length) {
				if(length < 1024 && commonByteArray_VAC_CONSOLIDADOS_VAC_RegistroVacunacion.length == 0) {
   					commonByteArray_VAC_CONSOLIDADOS_VAC_RegistroVacunacion = new byte[1024];
				} else {
   					commonByteArray_VAC_CONSOLIDADOS_VAC_RegistroVacunacion = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_VAC_CONSOLIDADOS_VAC_RegistroVacunacion, 0, length);
			strReturn = new String(commonByteArray_VAC_CONSOLIDADOS_VAC_RegistroVacunacion, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_VAC_CONSOLIDADOS_VAC_RegistroVacunacion) {

        	try {

        		int length = 0;
		
						this.ORDEN = (BigDecimal) dis.readObject();
					
					this.FECHA_REGISTRO = readString(dis);
					
					this.FECHA_APLICACION = readString(dis);
					
					this.TIPO_DOCUMENTO = readString(dis);
					
					this.NUMERO_DOCUMENTO = readString(dis);
					
					this.FECHA_NACIMIENTO = readString(dis);
					
					this.TIPO_EDAD = readString(dis);
					
						this.EDAD = (BigDecimal) dis.readObject();
					
					this.SEXO = readString(dis);
					
					this.PRIMER_NOMBRE = readString(dis);
					
					this.SEGUNDO_NOMBRE = readString(dis);
					
					this.PRIMER_APELLIDO = readString(dis);
					
					this.SEGUNDO_APELLIDO = readString(dis);
					
					this.REGIMEN = readString(dis);
					
					this.EPS = readString(dis);
					
					this.GRADO = readString(dis);
					
					this.TIPO_AFILIACION = readString(dis);
					
					this.FUERZA_ADSCRIPCION = readString(dis);
					
					this.ESM_ADSCRIPCION = readString(dis);
					
					this.FUERZA = readString(dis);
					
					this.UORG = readString(dis);
					
					this.USUARIO = readString(dis);
					
					this.PUNTO_VACUNADOR = readString(dis);
					
					this.NOMBRE_VACUNADOR = readString(dis);
					
					this.DEPARTAMENTO_RESIDENCIA = readString(dis);
					
					this.MUNICIPIO_RESIDENCIA = readString(dis);
					
					this.BARRIO = readString(dis);
					
					this.DIRECCION = readString(dis);
					
					this.TELEFONO = readString(dis);
					
					this.GRUPO_ETNICO = readString(dis);
					
					this.DESPLAZADA = readString(dis);
					
					this.DISCAPACITADA = readString(dis);
					
					this.VICTIMA = readString(dis);
					
					this.ZVEREDAL = readString(dis);
					
					this.PARENTESCO = readString(dis);
					
					this.TIPO_DOCUMENTO_COTIZANTE = readString(dis);
					
					this.NUMERO_DOCUMENTO_COTIZANTE = readString(dis);
					
					this.PRIMER_NOMBRE_COTIZANTE = readString(dis);
					
					this.SEGUNDO_NOMBRE_COTIZANTE = readString(dis);
					
					this.PRIMER_APELLIDO_COTIZANTE = readString(dis);
					
					this.SEGUNDO_APELLIDO_COTIZANTE = readString(dis);
					
					this.GRADO_COTIZANTE = readString(dis);
					
					this.ACOM_TDOCUMENTO = readString(dis);
					
					this.ACOM_DOCUMENTO = readString(dis);
					
					this.ACOM_NOMBRE1 = readString(dis);
					
					this.ACOM_NOMBRE2 = readString(dis);
					
					this.ACOM_APELLIDO1 = readString(dis);
					
					this.ACOM_APELLIDO2 = readString(dis);
					
					this.ACOM_PARENTESCO = readString(dis);
					
					this.ACOM_TELEFONO = readString(dis);
					
					this.ACOM_CORREO = readString(dis);
					
					this.DAPLICADAS_ID = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_VAC_CONSOLIDADOS_VAC_RegistroVacunacion) {

        	try {

        		int length = 0;
		
						this.ORDEN = (BigDecimal) dis.readObject();
					
					this.FECHA_REGISTRO = readString(dis);
					
					this.FECHA_APLICACION = readString(dis);
					
					this.TIPO_DOCUMENTO = readString(dis);
					
					this.NUMERO_DOCUMENTO = readString(dis);
					
					this.FECHA_NACIMIENTO = readString(dis);
					
					this.TIPO_EDAD = readString(dis);
					
						this.EDAD = (BigDecimal) dis.readObject();
					
					this.SEXO = readString(dis);
					
					this.PRIMER_NOMBRE = readString(dis);
					
					this.SEGUNDO_NOMBRE = readString(dis);
					
					this.PRIMER_APELLIDO = readString(dis);
					
					this.SEGUNDO_APELLIDO = readString(dis);
					
					this.REGIMEN = readString(dis);
					
					this.EPS = readString(dis);
					
					this.GRADO = readString(dis);
					
					this.TIPO_AFILIACION = readString(dis);
					
					this.FUERZA_ADSCRIPCION = readString(dis);
					
					this.ESM_ADSCRIPCION = readString(dis);
					
					this.FUERZA = readString(dis);
					
					this.UORG = readString(dis);
					
					this.USUARIO = readString(dis);
					
					this.PUNTO_VACUNADOR = readString(dis);
					
					this.NOMBRE_VACUNADOR = readString(dis);
					
					this.DEPARTAMENTO_RESIDENCIA = readString(dis);
					
					this.MUNICIPIO_RESIDENCIA = readString(dis);
					
					this.BARRIO = readString(dis);
					
					this.DIRECCION = readString(dis);
					
					this.TELEFONO = readString(dis);
					
					this.GRUPO_ETNICO = readString(dis);
					
					this.DESPLAZADA = readString(dis);
					
					this.DISCAPACITADA = readString(dis);
					
					this.VICTIMA = readString(dis);
					
					this.ZVEREDAL = readString(dis);
					
					this.PARENTESCO = readString(dis);
					
					this.TIPO_DOCUMENTO_COTIZANTE = readString(dis);
					
					this.NUMERO_DOCUMENTO_COTIZANTE = readString(dis);
					
					this.PRIMER_NOMBRE_COTIZANTE = readString(dis);
					
					this.SEGUNDO_NOMBRE_COTIZANTE = readString(dis);
					
					this.PRIMER_APELLIDO_COTIZANTE = readString(dis);
					
					this.SEGUNDO_APELLIDO_COTIZANTE = readString(dis);
					
					this.GRADO_COTIZANTE = readString(dis);
					
					this.ACOM_TDOCUMENTO = readString(dis);
					
					this.ACOM_DOCUMENTO = readString(dis);
					
					this.ACOM_NOMBRE1 = readString(dis);
					
					this.ACOM_NOMBRE2 = readString(dis);
					
					this.ACOM_APELLIDO1 = readString(dis);
					
					this.ACOM_APELLIDO2 = readString(dis);
					
					this.ACOM_PARENTESCO = readString(dis);
					
					this.ACOM_TELEFONO = readString(dis);
					
					this.ACOM_CORREO = readString(dis);
					
					this.DAPLICADAS_ID = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.ORDEN);
					
					// String
				
						writeString(this.FECHA_REGISTRO,dos);
					
					// String
				
						writeString(this.FECHA_APLICACION,dos);
					
					// String
				
						writeString(this.TIPO_DOCUMENTO,dos);
					
					// String
				
						writeString(this.NUMERO_DOCUMENTO,dos);
					
					// String
				
						writeString(this.FECHA_NACIMIENTO,dos);
					
					// String
				
						writeString(this.TIPO_EDAD,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.EDAD);
					
					// String
				
						writeString(this.SEXO,dos);
					
					// String
				
						writeString(this.PRIMER_NOMBRE,dos);
					
					// String
				
						writeString(this.SEGUNDO_NOMBRE,dos);
					
					// String
				
						writeString(this.PRIMER_APELLIDO,dos);
					
					// String
				
						writeString(this.SEGUNDO_APELLIDO,dos);
					
					// String
				
						writeString(this.REGIMEN,dos);
					
					// String
				
						writeString(this.EPS,dos);
					
					// String
				
						writeString(this.GRADO,dos);
					
					// String
				
						writeString(this.TIPO_AFILIACION,dos);
					
					// String
				
						writeString(this.FUERZA_ADSCRIPCION,dos);
					
					// String
				
						writeString(this.ESM_ADSCRIPCION,dos);
					
					// String
				
						writeString(this.FUERZA,dos);
					
					// String
				
						writeString(this.UORG,dos);
					
					// String
				
						writeString(this.USUARIO,dos);
					
					// String
				
						writeString(this.PUNTO_VACUNADOR,dos);
					
					// String
				
						writeString(this.NOMBRE_VACUNADOR,dos);
					
					// String
				
						writeString(this.DEPARTAMENTO_RESIDENCIA,dos);
					
					// String
				
						writeString(this.MUNICIPIO_RESIDENCIA,dos);
					
					// String
				
						writeString(this.BARRIO,dos);
					
					// String
				
						writeString(this.DIRECCION,dos);
					
					// String
				
						writeString(this.TELEFONO,dos);
					
					// String
				
						writeString(this.GRUPO_ETNICO,dos);
					
					// String
				
						writeString(this.DESPLAZADA,dos);
					
					// String
				
						writeString(this.DISCAPACITADA,dos);
					
					// String
				
						writeString(this.VICTIMA,dos);
					
					// String
				
						writeString(this.ZVEREDAL,dos);
					
					// String
				
						writeString(this.PARENTESCO,dos);
					
					// String
				
						writeString(this.TIPO_DOCUMENTO_COTIZANTE,dos);
					
					// String
				
						writeString(this.NUMERO_DOCUMENTO_COTIZANTE,dos);
					
					// String
				
						writeString(this.PRIMER_NOMBRE_COTIZANTE,dos);
					
					// String
				
						writeString(this.SEGUNDO_NOMBRE_COTIZANTE,dos);
					
					// String
				
						writeString(this.PRIMER_APELLIDO_COTIZANTE,dos);
					
					// String
				
						writeString(this.SEGUNDO_APELLIDO_COTIZANTE,dos);
					
					// String
				
						writeString(this.GRADO_COTIZANTE,dos);
					
					// String
				
						writeString(this.ACOM_TDOCUMENTO,dos);
					
					// String
				
						writeString(this.ACOM_DOCUMENTO,dos);
					
					// String
				
						writeString(this.ACOM_NOMBRE1,dos);
					
					// String
				
						writeString(this.ACOM_NOMBRE2,dos);
					
					// String
				
						writeString(this.ACOM_APELLIDO1,dos);
					
					// String
				
						writeString(this.ACOM_APELLIDO2,dos);
					
					// String
				
						writeString(this.ACOM_PARENTESCO,dos);
					
					// String
				
						writeString(this.ACOM_TELEFONO,dos);
					
					// String
				
						writeString(this.ACOM_CORREO,dos);
					
					// String
				
						writeString(this.DAPLICADAS_ID,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ORDEN);
					
					// String
				
						writeString(this.FECHA_REGISTRO,dos);
					
					// String
				
						writeString(this.FECHA_APLICACION,dos);
					
					// String
				
						writeString(this.TIPO_DOCUMENTO,dos);
					
					// String
				
						writeString(this.NUMERO_DOCUMENTO,dos);
					
					// String
				
						writeString(this.FECHA_NACIMIENTO,dos);
					
					// String
				
						writeString(this.TIPO_EDAD,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.EDAD);
					
					// String
				
						writeString(this.SEXO,dos);
					
					// String
				
						writeString(this.PRIMER_NOMBRE,dos);
					
					// String
				
						writeString(this.SEGUNDO_NOMBRE,dos);
					
					// String
				
						writeString(this.PRIMER_APELLIDO,dos);
					
					// String
				
						writeString(this.SEGUNDO_APELLIDO,dos);
					
					// String
				
						writeString(this.REGIMEN,dos);
					
					// String
				
						writeString(this.EPS,dos);
					
					// String
				
						writeString(this.GRADO,dos);
					
					// String
				
						writeString(this.TIPO_AFILIACION,dos);
					
					// String
				
						writeString(this.FUERZA_ADSCRIPCION,dos);
					
					// String
				
						writeString(this.ESM_ADSCRIPCION,dos);
					
					// String
				
						writeString(this.FUERZA,dos);
					
					// String
				
						writeString(this.UORG,dos);
					
					// String
				
						writeString(this.USUARIO,dos);
					
					// String
				
						writeString(this.PUNTO_VACUNADOR,dos);
					
					// String
				
						writeString(this.NOMBRE_VACUNADOR,dos);
					
					// String
				
						writeString(this.DEPARTAMENTO_RESIDENCIA,dos);
					
					// String
				
						writeString(this.MUNICIPIO_RESIDENCIA,dos);
					
					// String
				
						writeString(this.BARRIO,dos);
					
					// String
				
						writeString(this.DIRECCION,dos);
					
					// String
				
						writeString(this.TELEFONO,dos);
					
					// String
				
						writeString(this.GRUPO_ETNICO,dos);
					
					// String
				
						writeString(this.DESPLAZADA,dos);
					
					// String
				
						writeString(this.DISCAPACITADA,dos);
					
					// String
				
						writeString(this.VICTIMA,dos);
					
					// String
				
						writeString(this.ZVEREDAL,dos);
					
					// String
				
						writeString(this.PARENTESCO,dos);
					
					// String
				
						writeString(this.TIPO_DOCUMENTO_COTIZANTE,dos);
					
					// String
				
						writeString(this.NUMERO_DOCUMENTO_COTIZANTE,dos);
					
					// String
				
						writeString(this.PRIMER_NOMBRE_COTIZANTE,dos);
					
					// String
				
						writeString(this.SEGUNDO_NOMBRE_COTIZANTE,dos);
					
					// String
				
						writeString(this.PRIMER_APELLIDO_COTIZANTE,dos);
					
					// String
				
						writeString(this.SEGUNDO_APELLIDO_COTIZANTE,dos);
					
					// String
				
						writeString(this.GRADO_COTIZANTE,dos);
					
					// String
				
						writeString(this.ACOM_TDOCUMENTO,dos);
					
					// String
				
						writeString(this.ACOM_DOCUMENTO,dos);
					
					// String
				
						writeString(this.ACOM_NOMBRE1,dos);
					
					// String
				
						writeString(this.ACOM_NOMBRE2,dos);
					
					// String
				
						writeString(this.ACOM_APELLIDO1,dos);
					
					// String
				
						writeString(this.ACOM_APELLIDO2,dos);
					
					// String
				
						writeString(this.ACOM_PARENTESCO,dos);
					
					// String
				
						writeString(this.ACOM_TELEFONO,dos);
					
					// String
				
						writeString(this.ACOM_CORREO,dos);
					
					// String
				
						writeString(this.DAPLICADAS_ID,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ORDEN="+String.valueOf(ORDEN));
		sb.append(",FECHA_REGISTRO="+FECHA_REGISTRO);
		sb.append(",FECHA_APLICACION="+FECHA_APLICACION);
		sb.append(",TIPO_DOCUMENTO="+TIPO_DOCUMENTO);
		sb.append(",NUMERO_DOCUMENTO="+NUMERO_DOCUMENTO);
		sb.append(",FECHA_NACIMIENTO="+FECHA_NACIMIENTO);
		sb.append(",TIPO_EDAD="+TIPO_EDAD);
		sb.append(",EDAD="+String.valueOf(EDAD));
		sb.append(",SEXO="+SEXO);
		sb.append(",PRIMER_NOMBRE="+PRIMER_NOMBRE);
		sb.append(",SEGUNDO_NOMBRE="+SEGUNDO_NOMBRE);
		sb.append(",PRIMER_APELLIDO="+PRIMER_APELLIDO);
		sb.append(",SEGUNDO_APELLIDO="+SEGUNDO_APELLIDO);
		sb.append(",REGIMEN="+REGIMEN);
		sb.append(",EPS="+EPS);
		sb.append(",GRADO="+GRADO);
		sb.append(",TIPO_AFILIACION="+TIPO_AFILIACION);
		sb.append(",FUERZA_ADSCRIPCION="+FUERZA_ADSCRIPCION);
		sb.append(",ESM_ADSCRIPCION="+ESM_ADSCRIPCION);
		sb.append(",FUERZA="+FUERZA);
		sb.append(",UORG="+UORG);
		sb.append(",USUARIO="+USUARIO);
		sb.append(",PUNTO_VACUNADOR="+PUNTO_VACUNADOR);
		sb.append(",NOMBRE_VACUNADOR="+NOMBRE_VACUNADOR);
		sb.append(",DEPARTAMENTO_RESIDENCIA="+DEPARTAMENTO_RESIDENCIA);
		sb.append(",MUNICIPIO_RESIDENCIA="+MUNICIPIO_RESIDENCIA);
		sb.append(",BARRIO="+BARRIO);
		sb.append(",DIRECCION="+DIRECCION);
		sb.append(",TELEFONO="+TELEFONO);
		sb.append(",GRUPO_ETNICO="+GRUPO_ETNICO);
		sb.append(",DESPLAZADA="+DESPLAZADA);
		sb.append(",DISCAPACITADA="+DISCAPACITADA);
		sb.append(",VICTIMA="+VICTIMA);
		sb.append(",ZVEREDAL="+ZVEREDAL);
		sb.append(",PARENTESCO="+PARENTESCO);
		sb.append(",TIPO_DOCUMENTO_COTIZANTE="+TIPO_DOCUMENTO_COTIZANTE);
		sb.append(",NUMERO_DOCUMENTO_COTIZANTE="+NUMERO_DOCUMENTO_COTIZANTE);
		sb.append(",PRIMER_NOMBRE_COTIZANTE="+PRIMER_NOMBRE_COTIZANTE);
		sb.append(",SEGUNDO_NOMBRE_COTIZANTE="+SEGUNDO_NOMBRE_COTIZANTE);
		sb.append(",PRIMER_APELLIDO_COTIZANTE="+PRIMER_APELLIDO_COTIZANTE);
		sb.append(",SEGUNDO_APELLIDO_COTIZANTE="+SEGUNDO_APELLIDO_COTIZANTE);
		sb.append(",GRADO_COTIZANTE="+GRADO_COTIZANTE);
		sb.append(",ACOM_TDOCUMENTO="+ACOM_TDOCUMENTO);
		sb.append(",ACOM_DOCUMENTO="+ACOM_DOCUMENTO);
		sb.append(",ACOM_NOMBRE1="+ACOM_NOMBRE1);
		sb.append(",ACOM_NOMBRE2="+ACOM_NOMBRE2);
		sb.append(",ACOM_APELLIDO1="+ACOM_APELLIDO1);
		sb.append(",ACOM_APELLIDO2="+ACOM_APELLIDO2);
		sb.append(",ACOM_PARENTESCO="+ACOM_PARENTESCO);
		sb.append(",ACOM_TELEFONO="+ACOM_TELEFONO);
		sb.append(",ACOM_CORREO="+ACOM_CORREO);
		sb.append(",DAPLICADAS_ID="+DAPLICADAS_ID);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row17Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row8Struct implements routines.system.IPersistableRow<row8Struct> {
    final static byte[] commonByteArrayLock_VAC_CONSOLIDADOS_VAC_RegistroVacunacion = new byte[0];
    static byte[] commonByteArray_VAC_CONSOLIDADOS_VAC_RegistroVacunacion = new byte[0];

	
			    public BigDecimal ORDEN;

				public BigDecimal getORDEN () {
					return this.ORDEN;
				}

				public Boolean ORDENIsNullable(){
				    return true;
				}
				public Boolean ORDENIsKey(){
				    return false;
				}
				public Integer ORDENLength(){
				    return null;
				}
				public Integer ORDENPrecision(){
				    return null;
				}
				public String ORDENDefault(){
				
					return "";
				
				}
				public String ORDENComment(){
				
				    return "";
				
				}
				public String ORDENPattern(){
				
					return "";
				
				}
				public String ORDENOriginalDbColumnName(){
				
					return "ORDEN";
				
				}

				
			    public String FECHA_REGISTRO;

				public String getFECHA_REGISTRO () {
					return this.FECHA_REGISTRO;
				}

				public Boolean FECHA_REGISTROIsNullable(){
				    return true;
				}
				public Boolean FECHA_REGISTROIsKey(){
				    return false;
				}
				public Integer FECHA_REGISTROLength(){
				    return null;
				}
				public Integer FECHA_REGISTROPrecision(){
				    return null;
				}
				public String FECHA_REGISTRODefault(){
				
					return null;
				
				}
				public String FECHA_REGISTROComment(){
				
				    return "";
				
				}
				public String FECHA_REGISTROPattern(){
				
					return "";
				
				}
				public String FECHA_REGISTROOriginalDbColumnName(){
				
					return "FECHA_REGISTRO";
				
				}

				
			    public String FECHA_APLICACION;

				public String getFECHA_APLICACION () {
					return this.FECHA_APLICACION;
				}

				public Boolean FECHA_APLICACIONIsNullable(){
				    return true;
				}
				public Boolean FECHA_APLICACIONIsKey(){
				    return false;
				}
				public Integer FECHA_APLICACIONLength(){
				    return null;
				}
				public Integer FECHA_APLICACIONPrecision(){
				    return null;
				}
				public String FECHA_APLICACIONDefault(){
				
					return null;
				
				}
				public String FECHA_APLICACIONComment(){
				
				    return "";
				
				}
				public String FECHA_APLICACIONPattern(){
				
					return "";
				
				}
				public String FECHA_APLICACIONOriginalDbColumnName(){
				
					return "FECHA_APLICACION";
				
				}

				
			    public String TIPO_DOCUMENTO;

				public String getTIPO_DOCUMENTO () {
					return this.TIPO_DOCUMENTO;
				}

				public Boolean TIPO_DOCUMENTOIsNullable(){
				    return false;
				}
				public Boolean TIPO_DOCUMENTOIsKey(){
				    return false;
				}
				public Integer TIPO_DOCUMENTOLength(){
				    return null;
				}
				public Integer TIPO_DOCUMENTOPrecision(){
				    return null;
				}
				public String TIPO_DOCUMENTODefault(){
				
					return null;
				
				}
				public String TIPO_DOCUMENTOComment(){
				
				    return "";
				
				}
				public String TIPO_DOCUMENTOPattern(){
				
					return "";
				
				}
				public String TIPO_DOCUMENTOOriginalDbColumnName(){
				
					return "TIPO_DOCUMENTO";
				
				}

				
			    public String NUMERO_DOCUMENTO;

				public String getNUMERO_DOCUMENTO () {
					return this.NUMERO_DOCUMENTO;
				}

				public Boolean NUMERO_DOCUMENTOIsNullable(){
				    return false;
				}
				public Boolean NUMERO_DOCUMENTOIsKey(){
				    return false;
				}
				public Integer NUMERO_DOCUMENTOLength(){
				    return null;
				}
				public Integer NUMERO_DOCUMENTOPrecision(){
				    return null;
				}
				public String NUMERO_DOCUMENTODefault(){
				
					return null;
				
				}
				public String NUMERO_DOCUMENTOComment(){
				
				    return "";
				
				}
				public String NUMERO_DOCUMENTOPattern(){
				
					return "";
				
				}
				public String NUMERO_DOCUMENTOOriginalDbColumnName(){
				
					return "NUMERO_DOCUMENTO";
				
				}

				
			    public String FECHA_NACIMIENTO;

				public String getFECHA_NACIMIENTO () {
					return this.FECHA_NACIMIENTO;
				}

				public Boolean FECHA_NACIMIENTOIsNullable(){
				    return true;
				}
				public Boolean FECHA_NACIMIENTOIsKey(){
				    return false;
				}
				public Integer FECHA_NACIMIENTOLength(){
				    return null;
				}
				public Integer FECHA_NACIMIENTOPrecision(){
				    return null;
				}
				public String FECHA_NACIMIENTODefault(){
				
					return null;
				
				}
				public String FECHA_NACIMIENTOComment(){
				
				    return "";
				
				}
				public String FECHA_NACIMIENTOPattern(){
				
					return "";
				
				}
				public String FECHA_NACIMIENTOOriginalDbColumnName(){
				
					return "FECHA_NACIMIENTO";
				
				}

				
			    public String TIPO_EDAD;

				public String getTIPO_EDAD () {
					return this.TIPO_EDAD;
				}

				public Boolean TIPO_EDADIsNullable(){
				    return true;
				}
				public Boolean TIPO_EDADIsKey(){
				    return false;
				}
				public Integer TIPO_EDADLength(){
				    return null;
				}
				public Integer TIPO_EDADPrecision(){
				    return null;
				}
				public String TIPO_EDADDefault(){
				
					return null;
				
				}
				public String TIPO_EDADComment(){
				
				    return "";
				
				}
				public String TIPO_EDADPattern(){
				
					return "";
				
				}
				public String TIPO_EDADOriginalDbColumnName(){
				
					return "TIPO_EDAD";
				
				}

				
			    public BigDecimal EDAD;

				public BigDecimal getEDAD () {
					return this.EDAD;
				}

				public Boolean EDADIsNullable(){
				    return true;
				}
				public Boolean EDADIsKey(){
				    return false;
				}
				public Integer EDADLength(){
				    return null;
				}
				public Integer EDADPrecision(){
				    return null;
				}
				public String EDADDefault(){
				
					return "";
				
				}
				public String EDADComment(){
				
				    return "";
				
				}
				public String EDADPattern(){
				
					return "";
				
				}
				public String EDADOriginalDbColumnName(){
				
					return "EDAD";
				
				}

				
			    public String SEXO;

				public String getSEXO () {
					return this.SEXO;
				}

				public Boolean SEXOIsNullable(){
				    return false;
				}
				public Boolean SEXOIsKey(){
				    return false;
				}
				public Integer SEXOLength(){
				    return null;
				}
				public Integer SEXOPrecision(){
				    return null;
				}
				public String SEXODefault(){
				
					return null;
				
				}
				public String SEXOComment(){
				
				    return "";
				
				}
				public String SEXOPattern(){
				
					return "";
				
				}
				public String SEXOOriginalDbColumnName(){
				
					return "SEXO";
				
				}

				
			    public String PRIMER_NOMBRE;

				public String getPRIMER_NOMBRE () {
					return this.PRIMER_NOMBRE;
				}

				public Boolean PRIMER_NOMBREIsNullable(){
				    return true;
				}
				public Boolean PRIMER_NOMBREIsKey(){
				    return false;
				}
				public Integer PRIMER_NOMBRELength(){
				    return null;
				}
				public Integer PRIMER_NOMBREPrecision(){
				    return null;
				}
				public String PRIMER_NOMBREDefault(){
				
					return null;
				
				}
				public String PRIMER_NOMBREComment(){
				
				    return "";
				
				}
				public String PRIMER_NOMBREPattern(){
				
					return "";
				
				}
				public String PRIMER_NOMBREOriginalDbColumnName(){
				
					return "PRIMER_NOMBRE";
				
				}

				
			    public String SEGUNDO_NOMBRE;

				public String getSEGUNDO_NOMBRE () {
					return this.SEGUNDO_NOMBRE;
				}

				public Boolean SEGUNDO_NOMBREIsNullable(){
				    return true;
				}
				public Boolean SEGUNDO_NOMBREIsKey(){
				    return false;
				}
				public Integer SEGUNDO_NOMBRELength(){
				    return null;
				}
				public Integer SEGUNDO_NOMBREPrecision(){
				    return null;
				}
				public String SEGUNDO_NOMBREDefault(){
				
					return null;
				
				}
				public String SEGUNDO_NOMBREComment(){
				
				    return "";
				
				}
				public String SEGUNDO_NOMBREPattern(){
				
					return "";
				
				}
				public String SEGUNDO_NOMBREOriginalDbColumnName(){
				
					return "SEGUNDO_NOMBRE";
				
				}

				
			    public String PRIMER_APELLIDO;

				public String getPRIMER_APELLIDO () {
					return this.PRIMER_APELLIDO;
				}

				public Boolean PRIMER_APELLIDOIsNullable(){
				    return true;
				}
				public Boolean PRIMER_APELLIDOIsKey(){
				    return false;
				}
				public Integer PRIMER_APELLIDOLength(){
				    return null;
				}
				public Integer PRIMER_APELLIDOPrecision(){
				    return null;
				}
				public String PRIMER_APELLIDODefault(){
				
					return null;
				
				}
				public String PRIMER_APELLIDOComment(){
				
				    return "";
				
				}
				public String PRIMER_APELLIDOPattern(){
				
					return "";
				
				}
				public String PRIMER_APELLIDOOriginalDbColumnName(){
				
					return "PRIMER_APELLIDO";
				
				}

				
			    public String SEGUNDO_APELLIDO;

				public String getSEGUNDO_APELLIDO () {
					return this.SEGUNDO_APELLIDO;
				}

				public Boolean SEGUNDO_APELLIDOIsNullable(){
				    return true;
				}
				public Boolean SEGUNDO_APELLIDOIsKey(){
				    return false;
				}
				public Integer SEGUNDO_APELLIDOLength(){
				    return null;
				}
				public Integer SEGUNDO_APELLIDOPrecision(){
				    return null;
				}
				public String SEGUNDO_APELLIDODefault(){
				
					return null;
				
				}
				public String SEGUNDO_APELLIDOComment(){
				
				    return "";
				
				}
				public String SEGUNDO_APELLIDOPattern(){
				
					return "";
				
				}
				public String SEGUNDO_APELLIDOOriginalDbColumnName(){
				
					return "SEGUNDO_APELLIDO";
				
				}

				
			    public String REGIMEN;

				public String getREGIMEN () {
					return this.REGIMEN;
				}

				public Boolean REGIMENIsNullable(){
				    return true;
				}
				public Boolean REGIMENIsKey(){
				    return false;
				}
				public Integer REGIMENLength(){
				    return null;
				}
				public Integer REGIMENPrecision(){
				    return null;
				}
				public String REGIMENDefault(){
				
					return null;
				
				}
				public String REGIMENComment(){
				
				    return "";
				
				}
				public String REGIMENPattern(){
				
					return "";
				
				}
				public String REGIMENOriginalDbColumnName(){
				
					return "REGIMEN";
				
				}

				
			    public String EPS;

				public String getEPS () {
					return this.EPS;
				}

				public Boolean EPSIsNullable(){
				    return true;
				}
				public Boolean EPSIsKey(){
				    return false;
				}
				public Integer EPSLength(){
				    return null;
				}
				public Integer EPSPrecision(){
				    return null;
				}
				public String EPSDefault(){
				
					return null;
				
				}
				public String EPSComment(){
				
				    return "";
				
				}
				public String EPSPattern(){
				
					return "";
				
				}
				public String EPSOriginalDbColumnName(){
				
					return "EPS";
				
				}

				
			    public String GRADO;

				public String getGRADO () {
					return this.GRADO;
				}

				public Boolean GRADOIsNullable(){
				    return true;
				}
				public Boolean GRADOIsKey(){
				    return false;
				}
				public Integer GRADOLength(){
				    return null;
				}
				public Integer GRADOPrecision(){
				    return null;
				}
				public String GRADODefault(){
				
					return null;
				
				}
				public String GRADOComment(){
				
				    return "";
				
				}
				public String GRADOPattern(){
				
					return "";
				
				}
				public String GRADOOriginalDbColumnName(){
				
					return "GRADO";
				
				}

				
			    public String TIPO_AFILIACION;

				public String getTIPO_AFILIACION () {
					return this.TIPO_AFILIACION;
				}

				public Boolean TIPO_AFILIACIONIsNullable(){
				    return true;
				}
				public Boolean TIPO_AFILIACIONIsKey(){
				    return false;
				}
				public Integer TIPO_AFILIACIONLength(){
				    return null;
				}
				public Integer TIPO_AFILIACIONPrecision(){
				    return null;
				}
				public String TIPO_AFILIACIONDefault(){
				
					return null;
				
				}
				public String TIPO_AFILIACIONComment(){
				
				    return "";
				
				}
				public String TIPO_AFILIACIONPattern(){
				
					return "";
				
				}
				public String TIPO_AFILIACIONOriginalDbColumnName(){
				
					return "TIPO_AFILIACION";
				
				}

				
			    public String FUERZA_ADSCRIPCION;

				public String getFUERZA_ADSCRIPCION () {
					return this.FUERZA_ADSCRIPCION;
				}

				public Boolean FUERZA_ADSCRIPCIONIsNullable(){
				    return true;
				}
				public Boolean FUERZA_ADSCRIPCIONIsKey(){
				    return false;
				}
				public Integer FUERZA_ADSCRIPCIONLength(){
				    return null;
				}
				public Integer FUERZA_ADSCRIPCIONPrecision(){
				    return null;
				}
				public String FUERZA_ADSCRIPCIONDefault(){
				
					return null;
				
				}
				public String FUERZA_ADSCRIPCIONComment(){
				
				    return "";
				
				}
				public String FUERZA_ADSCRIPCIONPattern(){
				
					return "";
				
				}
				public String FUERZA_ADSCRIPCIONOriginalDbColumnName(){
				
					return "FUERZA_ADSCRIPCION";
				
				}

				
			    public String ESM_ADSCRIPCION;

				public String getESM_ADSCRIPCION () {
					return this.ESM_ADSCRIPCION;
				}

				public Boolean ESM_ADSCRIPCIONIsNullable(){
				    return true;
				}
				public Boolean ESM_ADSCRIPCIONIsKey(){
				    return false;
				}
				public Integer ESM_ADSCRIPCIONLength(){
				    return null;
				}
				public Integer ESM_ADSCRIPCIONPrecision(){
				    return null;
				}
				public String ESM_ADSCRIPCIONDefault(){
				
					return null;
				
				}
				public String ESM_ADSCRIPCIONComment(){
				
				    return "";
				
				}
				public String ESM_ADSCRIPCIONPattern(){
				
					return "";
				
				}
				public String ESM_ADSCRIPCIONOriginalDbColumnName(){
				
					return "ESM_ADSCRIPCION";
				
				}

				
			    public String FUERZA;

				public String getFUERZA () {
					return this.FUERZA;
				}

				public Boolean FUERZAIsNullable(){
				    return true;
				}
				public Boolean FUERZAIsKey(){
				    return false;
				}
				public Integer FUERZALength(){
				    return null;
				}
				public Integer FUERZAPrecision(){
				    return null;
				}
				public String FUERZADefault(){
				
					return null;
				
				}
				public String FUERZAComment(){
				
				    return "";
				
				}
				public String FUERZAPattern(){
				
					return "";
				
				}
				public String FUERZAOriginalDbColumnName(){
				
					return "FUERZA";
				
				}

				
			    public String UORG;

				public String getUORG () {
					return this.UORG;
				}

				public Boolean UORGIsNullable(){
				    return false;
				}
				public Boolean UORGIsKey(){
				    return false;
				}
				public Integer UORGLength(){
				    return null;
				}
				public Integer UORGPrecision(){
				    return null;
				}
				public String UORGDefault(){
				
					return null;
				
				}
				public String UORGComment(){
				
				    return "";
				
				}
				public String UORGPattern(){
				
					return "";
				
				}
				public String UORGOriginalDbColumnName(){
				
					return "UORG";
				
				}

				
			    public String USUARIO;

				public String getUSUARIO () {
					return this.USUARIO;
				}

				public Boolean USUARIOIsNullable(){
				    return true;
				}
				public Boolean USUARIOIsKey(){
				    return false;
				}
				public Integer USUARIOLength(){
				    return null;
				}
				public Integer USUARIOPrecision(){
				    return null;
				}
				public String USUARIODefault(){
				
					return null;
				
				}
				public String USUARIOComment(){
				
				    return "";
				
				}
				public String USUARIOPattern(){
				
					return "";
				
				}
				public String USUARIOOriginalDbColumnName(){
				
					return "USUARIO";
				
				}

				
			    public String PUNTO_VACUNADOR;

				public String getPUNTO_VACUNADOR () {
					return this.PUNTO_VACUNADOR;
				}

				public Boolean PUNTO_VACUNADORIsNullable(){
				    return true;
				}
				public Boolean PUNTO_VACUNADORIsKey(){
				    return false;
				}
				public Integer PUNTO_VACUNADORLength(){
				    return null;
				}
				public Integer PUNTO_VACUNADORPrecision(){
				    return null;
				}
				public String PUNTO_VACUNADORDefault(){
				
					return null;
				
				}
				public String PUNTO_VACUNADORComment(){
				
				    return "";
				
				}
				public String PUNTO_VACUNADORPattern(){
				
					return "";
				
				}
				public String PUNTO_VACUNADOROriginalDbColumnName(){
				
					return "PUNTO_VACUNADOR";
				
				}

				
			    public String NOMBRE_VACUNADOR;

				public String getNOMBRE_VACUNADOR () {
					return this.NOMBRE_VACUNADOR;
				}

				public Boolean NOMBRE_VACUNADORIsNullable(){
				    return true;
				}
				public Boolean NOMBRE_VACUNADORIsKey(){
				    return false;
				}
				public Integer NOMBRE_VACUNADORLength(){
				    return null;
				}
				public Integer NOMBRE_VACUNADORPrecision(){
				    return null;
				}
				public String NOMBRE_VACUNADORDefault(){
				
					return null;
				
				}
				public String NOMBRE_VACUNADORComment(){
				
				    return "";
				
				}
				public String NOMBRE_VACUNADORPattern(){
				
					return "";
				
				}
				public String NOMBRE_VACUNADOROriginalDbColumnName(){
				
					return "NOMBRE_VACUNADOR";
				
				}

				
			    public String DEPARTAMENTO_RESIDENCIA;

				public String getDEPARTAMENTO_RESIDENCIA () {
					return this.DEPARTAMENTO_RESIDENCIA;
				}

				public Boolean DEPARTAMENTO_RESIDENCIAIsNullable(){
				    return true;
				}
				public Boolean DEPARTAMENTO_RESIDENCIAIsKey(){
				    return false;
				}
				public Integer DEPARTAMENTO_RESIDENCIALength(){
				    return null;
				}
				public Integer DEPARTAMENTO_RESIDENCIAPrecision(){
				    return null;
				}
				public String DEPARTAMENTO_RESIDENCIADefault(){
				
					return null;
				
				}
				public String DEPARTAMENTO_RESIDENCIAComment(){
				
				    return "";
				
				}
				public String DEPARTAMENTO_RESIDENCIAPattern(){
				
					return "";
				
				}
				public String DEPARTAMENTO_RESIDENCIAOriginalDbColumnName(){
				
					return "DEPARTAMENTO_RESIDENCIA";
				
				}

				
			    public String MUNICIPIO_RESIDENCIA;

				public String getMUNICIPIO_RESIDENCIA () {
					return this.MUNICIPIO_RESIDENCIA;
				}

				public Boolean MUNICIPIO_RESIDENCIAIsNullable(){
				    return true;
				}
				public Boolean MUNICIPIO_RESIDENCIAIsKey(){
				    return false;
				}
				public Integer MUNICIPIO_RESIDENCIALength(){
				    return null;
				}
				public Integer MUNICIPIO_RESIDENCIAPrecision(){
				    return null;
				}
				public String MUNICIPIO_RESIDENCIADefault(){
				
					return null;
				
				}
				public String MUNICIPIO_RESIDENCIAComment(){
				
				    return "";
				
				}
				public String MUNICIPIO_RESIDENCIAPattern(){
				
					return "";
				
				}
				public String MUNICIPIO_RESIDENCIAOriginalDbColumnName(){
				
					return "MUNICIPIO_RESIDENCIA";
				
				}

				
			    public String BARRIO;

				public String getBARRIO () {
					return this.BARRIO;
				}

				public Boolean BARRIOIsNullable(){
				    return true;
				}
				public Boolean BARRIOIsKey(){
				    return false;
				}
				public Integer BARRIOLength(){
				    return null;
				}
				public Integer BARRIOPrecision(){
				    return null;
				}
				public String BARRIODefault(){
				
					return null;
				
				}
				public String BARRIOComment(){
				
				    return "";
				
				}
				public String BARRIOPattern(){
				
					return "";
				
				}
				public String BARRIOOriginalDbColumnName(){
				
					return "BARRIO";
				
				}

				
			    public String DIRECCION;

				public String getDIRECCION () {
					return this.DIRECCION;
				}

				public Boolean DIRECCIONIsNullable(){
				    return true;
				}
				public Boolean DIRECCIONIsKey(){
				    return false;
				}
				public Integer DIRECCIONLength(){
				    return null;
				}
				public Integer DIRECCIONPrecision(){
				    return null;
				}
				public String DIRECCIONDefault(){
				
					return null;
				
				}
				public String DIRECCIONComment(){
				
				    return "";
				
				}
				public String DIRECCIONPattern(){
				
					return "";
				
				}
				public String DIRECCIONOriginalDbColumnName(){
				
					return "DIRECCION";
				
				}

				
			    public String TELEFONO;

				public String getTELEFONO () {
					return this.TELEFONO;
				}

				public Boolean TELEFONOIsNullable(){
				    return true;
				}
				public Boolean TELEFONOIsKey(){
				    return false;
				}
				public Integer TELEFONOLength(){
				    return null;
				}
				public Integer TELEFONOPrecision(){
				    return null;
				}
				public String TELEFONODefault(){
				
					return null;
				
				}
				public String TELEFONOComment(){
				
				    return "";
				
				}
				public String TELEFONOPattern(){
				
					return "";
				
				}
				public String TELEFONOOriginalDbColumnName(){
				
					return "TELEFONO";
				
				}

				
			    public String GRUPO_ETNICO;

				public String getGRUPO_ETNICO () {
					return this.GRUPO_ETNICO;
				}

				public Boolean GRUPO_ETNICOIsNullable(){
				    return true;
				}
				public Boolean GRUPO_ETNICOIsKey(){
				    return false;
				}
				public Integer GRUPO_ETNICOLength(){
				    return null;
				}
				public Integer GRUPO_ETNICOPrecision(){
				    return null;
				}
				public String GRUPO_ETNICODefault(){
				
					return null;
				
				}
				public String GRUPO_ETNICOComment(){
				
				    return "";
				
				}
				public String GRUPO_ETNICOPattern(){
				
					return "";
				
				}
				public String GRUPO_ETNICOOriginalDbColumnName(){
				
					return "GRUPO_ETNICO";
				
				}

				
			    public String DESPLAZADA;

				public String getDESPLAZADA () {
					return this.DESPLAZADA;
				}

				public Boolean DESPLAZADAIsNullable(){
				    return true;
				}
				public Boolean DESPLAZADAIsKey(){
				    return false;
				}
				public Integer DESPLAZADALength(){
				    return null;
				}
				public Integer DESPLAZADAPrecision(){
				    return null;
				}
				public String DESPLAZADADefault(){
				
					return null;
				
				}
				public String DESPLAZADAComment(){
				
				    return "";
				
				}
				public String DESPLAZADAPattern(){
				
					return "";
				
				}
				public String DESPLAZADAOriginalDbColumnName(){
				
					return "DESPLAZADA";
				
				}

				
			    public String DISCAPACITADA;

				public String getDISCAPACITADA () {
					return this.DISCAPACITADA;
				}

				public Boolean DISCAPACITADAIsNullable(){
				    return true;
				}
				public Boolean DISCAPACITADAIsKey(){
				    return false;
				}
				public Integer DISCAPACITADALength(){
				    return null;
				}
				public Integer DISCAPACITADAPrecision(){
				    return null;
				}
				public String DISCAPACITADADefault(){
				
					return null;
				
				}
				public String DISCAPACITADAComment(){
				
				    return "";
				
				}
				public String DISCAPACITADAPattern(){
				
					return "";
				
				}
				public String DISCAPACITADAOriginalDbColumnName(){
				
					return "DISCAPACITADA";
				
				}

				
			    public String VICTIMA;

				public String getVICTIMA () {
					return this.VICTIMA;
				}

				public Boolean VICTIMAIsNullable(){
				    return true;
				}
				public Boolean VICTIMAIsKey(){
				    return false;
				}
				public Integer VICTIMALength(){
				    return null;
				}
				public Integer VICTIMAPrecision(){
				    return null;
				}
				public String VICTIMADefault(){
				
					return null;
				
				}
				public String VICTIMAComment(){
				
				    return "";
				
				}
				public String VICTIMAPattern(){
				
					return "";
				
				}
				public String VICTIMAOriginalDbColumnName(){
				
					return "VICTIMA";
				
				}

				
			    public String ZVEREDAL;

				public String getZVEREDAL () {
					return this.ZVEREDAL;
				}

				public Boolean ZVEREDALIsNullable(){
				    return true;
				}
				public Boolean ZVEREDALIsKey(){
				    return false;
				}
				public Integer ZVEREDALLength(){
				    return null;
				}
				public Integer ZVEREDALPrecision(){
				    return null;
				}
				public String ZVEREDALDefault(){
				
					return null;
				
				}
				public String ZVEREDALComment(){
				
				    return "";
				
				}
				public String ZVEREDALPattern(){
				
					return "";
				
				}
				public String ZVEREDALOriginalDbColumnName(){
				
					return "ZVEREDAL";
				
				}

				
			    public String PARENTESCO;

				public String getPARENTESCO () {
					return this.PARENTESCO;
				}

				public Boolean PARENTESCOIsNullable(){
				    return true;
				}
				public Boolean PARENTESCOIsKey(){
				    return false;
				}
				public Integer PARENTESCOLength(){
				    return null;
				}
				public Integer PARENTESCOPrecision(){
				    return null;
				}
				public String PARENTESCODefault(){
				
					return null;
				
				}
				public String PARENTESCOComment(){
				
				    return "";
				
				}
				public String PARENTESCOPattern(){
				
					return "";
				
				}
				public String PARENTESCOOriginalDbColumnName(){
				
					return "PARENTESCO";
				
				}

				
			    public String TIPO_DOCUMENTO_COTIZANTE;

				public String getTIPO_DOCUMENTO_COTIZANTE () {
					return this.TIPO_DOCUMENTO_COTIZANTE;
				}

				public Boolean TIPO_DOCUMENTO_COTIZANTEIsNullable(){
				    return true;
				}
				public Boolean TIPO_DOCUMENTO_COTIZANTEIsKey(){
				    return false;
				}
				public Integer TIPO_DOCUMENTO_COTIZANTELength(){
				    return null;
				}
				public Integer TIPO_DOCUMENTO_COTIZANTEPrecision(){
				    return null;
				}
				public String TIPO_DOCUMENTO_COTIZANTEDefault(){
				
					return null;
				
				}
				public String TIPO_DOCUMENTO_COTIZANTEComment(){
				
				    return "";
				
				}
				public String TIPO_DOCUMENTO_COTIZANTEPattern(){
				
					return "";
				
				}
				public String TIPO_DOCUMENTO_COTIZANTEOriginalDbColumnName(){
				
					return "TIPO_DOCUMENTO_COTIZANTE";
				
				}

				
			    public String NUMERO_DOCUMENTO_COTIZANTE;

				public String getNUMERO_DOCUMENTO_COTIZANTE () {
					return this.NUMERO_DOCUMENTO_COTIZANTE;
				}

				public Boolean NUMERO_DOCUMENTO_COTIZANTEIsNullable(){
				    return true;
				}
				public Boolean NUMERO_DOCUMENTO_COTIZANTEIsKey(){
				    return false;
				}
				public Integer NUMERO_DOCUMENTO_COTIZANTELength(){
				    return null;
				}
				public Integer NUMERO_DOCUMENTO_COTIZANTEPrecision(){
				    return null;
				}
				public String NUMERO_DOCUMENTO_COTIZANTEDefault(){
				
					return null;
				
				}
				public String NUMERO_DOCUMENTO_COTIZANTEComment(){
				
				    return "";
				
				}
				public String NUMERO_DOCUMENTO_COTIZANTEPattern(){
				
					return "";
				
				}
				public String NUMERO_DOCUMENTO_COTIZANTEOriginalDbColumnName(){
				
					return "NUMERO_DOCUMENTO_COTIZANTE";
				
				}

				
			    public String PRIMER_NOMBRE_COTIZANTE;

				public String getPRIMER_NOMBRE_COTIZANTE () {
					return this.PRIMER_NOMBRE_COTIZANTE;
				}

				public Boolean PRIMER_NOMBRE_COTIZANTEIsNullable(){
				    return true;
				}
				public Boolean PRIMER_NOMBRE_COTIZANTEIsKey(){
				    return false;
				}
				public Integer PRIMER_NOMBRE_COTIZANTELength(){
				    return null;
				}
				public Integer PRIMER_NOMBRE_COTIZANTEPrecision(){
				    return null;
				}
				public String PRIMER_NOMBRE_COTIZANTEDefault(){
				
					return null;
				
				}
				public String PRIMER_NOMBRE_COTIZANTEComment(){
				
				    return "";
				
				}
				public String PRIMER_NOMBRE_COTIZANTEPattern(){
				
					return "";
				
				}
				public String PRIMER_NOMBRE_COTIZANTEOriginalDbColumnName(){
				
					return "PRIMER_NOMBRE_COTIZANTE";
				
				}

				
			    public String SEGUNDO_NOMBRE_COTIZANTE;

				public String getSEGUNDO_NOMBRE_COTIZANTE () {
					return this.SEGUNDO_NOMBRE_COTIZANTE;
				}

				public Boolean SEGUNDO_NOMBRE_COTIZANTEIsNullable(){
				    return true;
				}
				public Boolean SEGUNDO_NOMBRE_COTIZANTEIsKey(){
				    return false;
				}
				public Integer SEGUNDO_NOMBRE_COTIZANTELength(){
				    return null;
				}
				public Integer SEGUNDO_NOMBRE_COTIZANTEPrecision(){
				    return null;
				}
				public String SEGUNDO_NOMBRE_COTIZANTEDefault(){
				
					return null;
				
				}
				public String SEGUNDO_NOMBRE_COTIZANTEComment(){
				
				    return "";
				
				}
				public String SEGUNDO_NOMBRE_COTIZANTEPattern(){
				
					return "";
				
				}
				public String SEGUNDO_NOMBRE_COTIZANTEOriginalDbColumnName(){
				
					return "SEGUNDO_NOMBRE_COTIZANTE";
				
				}

				
			    public String PRIMER_APELLIDO_COTIZANTE;

				public String getPRIMER_APELLIDO_COTIZANTE () {
					return this.PRIMER_APELLIDO_COTIZANTE;
				}

				public Boolean PRIMER_APELLIDO_COTIZANTEIsNullable(){
				    return true;
				}
				public Boolean PRIMER_APELLIDO_COTIZANTEIsKey(){
				    return false;
				}
				public Integer PRIMER_APELLIDO_COTIZANTELength(){
				    return null;
				}
				public Integer PRIMER_APELLIDO_COTIZANTEPrecision(){
				    return null;
				}
				public String PRIMER_APELLIDO_COTIZANTEDefault(){
				
					return null;
				
				}
				public String PRIMER_APELLIDO_COTIZANTEComment(){
				
				    return "";
				
				}
				public String PRIMER_APELLIDO_COTIZANTEPattern(){
				
					return "";
				
				}
				public String PRIMER_APELLIDO_COTIZANTEOriginalDbColumnName(){
				
					return "PRIMER_APELLIDO_COTIZANTE";
				
				}

				
			    public String SEGUNDO_APELLIDO_COTIZANTE;

				public String getSEGUNDO_APELLIDO_COTIZANTE () {
					return this.SEGUNDO_APELLIDO_COTIZANTE;
				}

				public Boolean SEGUNDO_APELLIDO_COTIZANTEIsNullable(){
				    return true;
				}
				public Boolean SEGUNDO_APELLIDO_COTIZANTEIsKey(){
				    return false;
				}
				public Integer SEGUNDO_APELLIDO_COTIZANTELength(){
				    return null;
				}
				public Integer SEGUNDO_APELLIDO_COTIZANTEPrecision(){
				    return null;
				}
				public String SEGUNDO_APELLIDO_COTIZANTEDefault(){
				
					return null;
				
				}
				public String SEGUNDO_APELLIDO_COTIZANTEComment(){
				
				    return "";
				
				}
				public String SEGUNDO_APELLIDO_COTIZANTEPattern(){
				
					return "";
				
				}
				public String SEGUNDO_APELLIDO_COTIZANTEOriginalDbColumnName(){
				
					return "SEGUNDO_APELLIDO_COTIZANTE";
				
				}

				
			    public String GRADO_COTIZANTE;

				public String getGRADO_COTIZANTE () {
					return this.GRADO_COTIZANTE;
				}

				public Boolean GRADO_COTIZANTEIsNullable(){
				    return true;
				}
				public Boolean GRADO_COTIZANTEIsKey(){
				    return false;
				}
				public Integer GRADO_COTIZANTELength(){
				    return null;
				}
				public Integer GRADO_COTIZANTEPrecision(){
				    return null;
				}
				public String GRADO_COTIZANTEDefault(){
				
					return null;
				
				}
				public String GRADO_COTIZANTEComment(){
				
				    return "";
				
				}
				public String GRADO_COTIZANTEPattern(){
				
					return "";
				
				}
				public String GRADO_COTIZANTEOriginalDbColumnName(){
				
					return "GRADO_COTIZANTE";
				
				}

				
			    public String ACOM_TDOCUMENTO;

				public String getACOM_TDOCUMENTO () {
					return this.ACOM_TDOCUMENTO;
				}

				public Boolean ACOM_TDOCUMENTOIsNullable(){
				    return true;
				}
				public Boolean ACOM_TDOCUMENTOIsKey(){
				    return false;
				}
				public Integer ACOM_TDOCUMENTOLength(){
				    return null;
				}
				public Integer ACOM_TDOCUMENTOPrecision(){
				    return null;
				}
				public String ACOM_TDOCUMENTODefault(){
				
					return null;
				
				}
				public String ACOM_TDOCUMENTOComment(){
				
				    return "";
				
				}
				public String ACOM_TDOCUMENTOPattern(){
				
					return "";
				
				}
				public String ACOM_TDOCUMENTOOriginalDbColumnName(){
				
					return "ACOM_TDOCUMENTO";
				
				}

				
			    public String ACOM_DOCUMENTO;

				public String getACOM_DOCUMENTO () {
					return this.ACOM_DOCUMENTO;
				}

				public Boolean ACOM_DOCUMENTOIsNullable(){
				    return true;
				}
				public Boolean ACOM_DOCUMENTOIsKey(){
				    return false;
				}
				public Integer ACOM_DOCUMENTOLength(){
				    return null;
				}
				public Integer ACOM_DOCUMENTOPrecision(){
				    return null;
				}
				public String ACOM_DOCUMENTODefault(){
				
					return null;
				
				}
				public String ACOM_DOCUMENTOComment(){
				
				    return "";
				
				}
				public String ACOM_DOCUMENTOPattern(){
				
					return "";
				
				}
				public String ACOM_DOCUMENTOOriginalDbColumnName(){
				
					return "ACOM_DOCUMENTO";
				
				}

				
			    public String ACOM_NOMBRE1;

				public String getACOM_NOMBRE1 () {
					return this.ACOM_NOMBRE1;
				}

				public Boolean ACOM_NOMBRE1IsNullable(){
				    return true;
				}
				public Boolean ACOM_NOMBRE1IsKey(){
				    return false;
				}
				public Integer ACOM_NOMBRE1Length(){
				    return null;
				}
				public Integer ACOM_NOMBRE1Precision(){
				    return null;
				}
				public String ACOM_NOMBRE1Default(){
				
					return null;
				
				}
				public String ACOM_NOMBRE1Comment(){
				
				    return "";
				
				}
				public String ACOM_NOMBRE1Pattern(){
				
					return "";
				
				}
				public String ACOM_NOMBRE1OriginalDbColumnName(){
				
					return "ACOM_NOMBRE1";
				
				}

				
			    public String ACOM_NOMBRE2;

				public String getACOM_NOMBRE2 () {
					return this.ACOM_NOMBRE2;
				}

				public Boolean ACOM_NOMBRE2IsNullable(){
				    return true;
				}
				public Boolean ACOM_NOMBRE2IsKey(){
				    return false;
				}
				public Integer ACOM_NOMBRE2Length(){
				    return null;
				}
				public Integer ACOM_NOMBRE2Precision(){
				    return null;
				}
				public String ACOM_NOMBRE2Default(){
				
					return null;
				
				}
				public String ACOM_NOMBRE2Comment(){
				
				    return "";
				
				}
				public String ACOM_NOMBRE2Pattern(){
				
					return "";
				
				}
				public String ACOM_NOMBRE2OriginalDbColumnName(){
				
					return "ACOM_NOMBRE2";
				
				}

				
			    public String ACOM_APELLIDO1;

				public String getACOM_APELLIDO1 () {
					return this.ACOM_APELLIDO1;
				}

				public Boolean ACOM_APELLIDO1IsNullable(){
				    return true;
				}
				public Boolean ACOM_APELLIDO1IsKey(){
				    return false;
				}
				public Integer ACOM_APELLIDO1Length(){
				    return null;
				}
				public Integer ACOM_APELLIDO1Precision(){
				    return null;
				}
				public String ACOM_APELLIDO1Default(){
				
					return null;
				
				}
				public String ACOM_APELLIDO1Comment(){
				
				    return "";
				
				}
				public String ACOM_APELLIDO1Pattern(){
				
					return "";
				
				}
				public String ACOM_APELLIDO1OriginalDbColumnName(){
				
					return "ACOM_APELLIDO1";
				
				}

				
			    public String ACOM_APELLIDO2;

				public String getACOM_APELLIDO2 () {
					return this.ACOM_APELLIDO2;
				}

				public Boolean ACOM_APELLIDO2IsNullable(){
				    return true;
				}
				public Boolean ACOM_APELLIDO2IsKey(){
				    return false;
				}
				public Integer ACOM_APELLIDO2Length(){
				    return null;
				}
				public Integer ACOM_APELLIDO2Precision(){
				    return null;
				}
				public String ACOM_APELLIDO2Default(){
				
					return null;
				
				}
				public String ACOM_APELLIDO2Comment(){
				
				    return "";
				
				}
				public String ACOM_APELLIDO2Pattern(){
				
					return "";
				
				}
				public String ACOM_APELLIDO2OriginalDbColumnName(){
				
					return "ACOM_APELLIDO2";
				
				}

				
			    public String ACOM_PARENTESCO;

				public String getACOM_PARENTESCO () {
					return this.ACOM_PARENTESCO;
				}

				public Boolean ACOM_PARENTESCOIsNullable(){
				    return true;
				}
				public Boolean ACOM_PARENTESCOIsKey(){
				    return false;
				}
				public Integer ACOM_PARENTESCOLength(){
				    return null;
				}
				public Integer ACOM_PARENTESCOPrecision(){
				    return null;
				}
				public String ACOM_PARENTESCODefault(){
				
					return null;
				
				}
				public String ACOM_PARENTESCOComment(){
				
				    return "";
				
				}
				public String ACOM_PARENTESCOPattern(){
				
					return "";
				
				}
				public String ACOM_PARENTESCOOriginalDbColumnName(){
				
					return "ACOM_PARENTESCO";
				
				}

				
			    public String ACOM_TELEFONO;

				public String getACOM_TELEFONO () {
					return this.ACOM_TELEFONO;
				}

				public Boolean ACOM_TELEFONOIsNullable(){
				    return true;
				}
				public Boolean ACOM_TELEFONOIsKey(){
				    return false;
				}
				public Integer ACOM_TELEFONOLength(){
				    return null;
				}
				public Integer ACOM_TELEFONOPrecision(){
				    return null;
				}
				public String ACOM_TELEFONODefault(){
				
					return null;
				
				}
				public String ACOM_TELEFONOComment(){
				
				    return "";
				
				}
				public String ACOM_TELEFONOPattern(){
				
					return "";
				
				}
				public String ACOM_TELEFONOOriginalDbColumnName(){
				
					return "ACOM_TELEFONO";
				
				}

				
			    public String ACOM_CORREO;

				public String getACOM_CORREO () {
					return this.ACOM_CORREO;
				}

				public Boolean ACOM_CORREOIsNullable(){
				    return true;
				}
				public Boolean ACOM_CORREOIsKey(){
				    return false;
				}
				public Integer ACOM_CORREOLength(){
				    return null;
				}
				public Integer ACOM_CORREOPrecision(){
				    return null;
				}
				public String ACOM_CORREODefault(){
				
					return null;
				
				}
				public String ACOM_CORREOComment(){
				
				    return "";
				
				}
				public String ACOM_CORREOPattern(){
				
					return "";
				
				}
				public String ACOM_CORREOOriginalDbColumnName(){
				
					return "ACOM_CORREO";
				
				}

				
			    public String DAPLICADAS_ID;

				public String getDAPLICADAS_ID () {
					return this.DAPLICADAS_ID;
				}

				public Boolean DAPLICADAS_IDIsNullable(){
				    return true;
				}
				public Boolean DAPLICADAS_IDIsKey(){
				    return false;
				}
				public Integer DAPLICADAS_IDLength(){
				    return null;
				}
				public Integer DAPLICADAS_IDPrecision(){
				    return null;
				}
				public String DAPLICADAS_IDDefault(){
				
					return null;
				
				}
				public String DAPLICADAS_IDComment(){
				
				    return "";
				
				}
				public String DAPLICADAS_IDPattern(){
				
					return "";
				
				}
				public String DAPLICADAS_IDOriginalDbColumnName(){
				
					return "DAPLICADAS_ID";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_VAC_CONSOLIDADOS_VAC_RegistroVacunacion.length) {
				if(length < 1024 && commonByteArray_VAC_CONSOLIDADOS_VAC_RegistroVacunacion.length == 0) {
   					commonByteArray_VAC_CONSOLIDADOS_VAC_RegistroVacunacion = new byte[1024];
				} else {
   					commonByteArray_VAC_CONSOLIDADOS_VAC_RegistroVacunacion = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_VAC_CONSOLIDADOS_VAC_RegistroVacunacion, 0, length);
			strReturn = new String(commonByteArray_VAC_CONSOLIDADOS_VAC_RegistroVacunacion, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_VAC_CONSOLIDADOS_VAC_RegistroVacunacion.length) {
				if(length < 1024 && commonByteArray_VAC_CONSOLIDADOS_VAC_RegistroVacunacion.length == 0) {
   					commonByteArray_VAC_CONSOLIDADOS_VAC_RegistroVacunacion = new byte[1024];
				} else {
   					commonByteArray_VAC_CONSOLIDADOS_VAC_RegistroVacunacion = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_VAC_CONSOLIDADOS_VAC_RegistroVacunacion, 0, length);
			strReturn = new String(commonByteArray_VAC_CONSOLIDADOS_VAC_RegistroVacunacion, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_VAC_CONSOLIDADOS_VAC_RegistroVacunacion) {

        	try {

        		int length = 0;
		
						this.ORDEN = (BigDecimal) dis.readObject();
					
					this.FECHA_REGISTRO = readString(dis);
					
					this.FECHA_APLICACION = readString(dis);
					
					this.TIPO_DOCUMENTO = readString(dis);
					
					this.NUMERO_DOCUMENTO = readString(dis);
					
					this.FECHA_NACIMIENTO = readString(dis);
					
					this.TIPO_EDAD = readString(dis);
					
						this.EDAD = (BigDecimal) dis.readObject();
					
					this.SEXO = readString(dis);
					
					this.PRIMER_NOMBRE = readString(dis);
					
					this.SEGUNDO_NOMBRE = readString(dis);
					
					this.PRIMER_APELLIDO = readString(dis);
					
					this.SEGUNDO_APELLIDO = readString(dis);
					
					this.REGIMEN = readString(dis);
					
					this.EPS = readString(dis);
					
					this.GRADO = readString(dis);
					
					this.TIPO_AFILIACION = readString(dis);
					
					this.FUERZA_ADSCRIPCION = readString(dis);
					
					this.ESM_ADSCRIPCION = readString(dis);
					
					this.FUERZA = readString(dis);
					
					this.UORG = readString(dis);
					
					this.USUARIO = readString(dis);
					
					this.PUNTO_VACUNADOR = readString(dis);
					
					this.NOMBRE_VACUNADOR = readString(dis);
					
					this.DEPARTAMENTO_RESIDENCIA = readString(dis);
					
					this.MUNICIPIO_RESIDENCIA = readString(dis);
					
					this.BARRIO = readString(dis);
					
					this.DIRECCION = readString(dis);
					
					this.TELEFONO = readString(dis);
					
					this.GRUPO_ETNICO = readString(dis);
					
					this.DESPLAZADA = readString(dis);
					
					this.DISCAPACITADA = readString(dis);
					
					this.VICTIMA = readString(dis);
					
					this.ZVEREDAL = readString(dis);
					
					this.PARENTESCO = readString(dis);
					
					this.TIPO_DOCUMENTO_COTIZANTE = readString(dis);
					
					this.NUMERO_DOCUMENTO_COTIZANTE = readString(dis);
					
					this.PRIMER_NOMBRE_COTIZANTE = readString(dis);
					
					this.SEGUNDO_NOMBRE_COTIZANTE = readString(dis);
					
					this.PRIMER_APELLIDO_COTIZANTE = readString(dis);
					
					this.SEGUNDO_APELLIDO_COTIZANTE = readString(dis);
					
					this.GRADO_COTIZANTE = readString(dis);
					
					this.ACOM_TDOCUMENTO = readString(dis);
					
					this.ACOM_DOCUMENTO = readString(dis);
					
					this.ACOM_NOMBRE1 = readString(dis);
					
					this.ACOM_NOMBRE2 = readString(dis);
					
					this.ACOM_APELLIDO1 = readString(dis);
					
					this.ACOM_APELLIDO2 = readString(dis);
					
					this.ACOM_PARENTESCO = readString(dis);
					
					this.ACOM_TELEFONO = readString(dis);
					
					this.ACOM_CORREO = readString(dis);
					
					this.DAPLICADAS_ID = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_VAC_CONSOLIDADOS_VAC_RegistroVacunacion) {

        	try {

        		int length = 0;
		
						this.ORDEN = (BigDecimal) dis.readObject();
					
					this.FECHA_REGISTRO = readString(dis);
					
					this.FECHA_APLICACION = readString(dis);
					
					this.TIPO_DOCUMENTO = readString(dis);
					
					this.NUMERO_DOCUMENTO = readString(dis);
					
					this.FECHA_NACIMIENTO = readString(dis);
					
					this.TIPO_EDAD = readString(dis);
					
						this.EDAD = (BigDecimal) dis.readObject();
					
					this.SEXO = readString(dis);
					
					this.PRIMER_NOMBRE = readString(dis);
					
					this.SEGUNDO_NOMBRE = readString(dis);
					
					this.PRIMER_APELLIDO = readString(dis);
					
					this.SEGUNDO_APELLIDO = readString(dis);
					
					this.REGIMEN = readString(dis);
					
					this.EPS = readString(dis);
					
					this.GRADO = readString(dis);
					
					this.TIPO_AFILIACION = readString(dis);
					
					this.FUERZA_ADSCRIPCION = readString(dis);
					
					this.ESM_ADSCRIPCION = readString(dis);
					
					this.FUERZA = readString(dis);
					
					this.UORG = readString(dis);
					
					this.USUARIO = readString(dis);
					
					this.PUNTO_VACUNADOR = readString(dis);
					
					this.NOMBRE_VACUNADOR = readString(dis);
					
					this.DEPARTAMENTO_RESIDENCIA = readString(dis);
					
					this.MUNICIPIO_RESIDENCIA = readString(dis);
					
					this.BARRIO = readString(dis);
					
					this.DIRECCION = readString(dis);
					
					this.TELEFONO = readString(dis);
					
					this.GRUPO_ETNICO = readString(dis);
					
					this.DESPLAZADA = readString(dis);
					
					this.DISCAPACITADA = readString(dis);
					
					this.VICTIMA = readString(dis);
					
					this.ZVEREDAL = readString(dis);
					
					this.PARENTESCO = readString(dis);
					
					this.TIPO_DOCUMENTO_COTIZANTE = readString(dis);
					
					this.NUMERO_DOCUMENTO_COTIZANTE = readString(dis);
					
					this.PRIMER_NOMBRE_COTIZANTE = readString(dis);
					
					this.SEGUNDO_NOMBRE_COTIZANTE = readString(dis);
					
					this.PRIMER_APELLIDO_COTIZANTE = readString(dis);
					
					this.SEGUNDO_APELLIDO_COTIZANTE = readString(dis);
					
					this.GRADO_COTIZANTE = readString(dis);
					
					this.ACOM_TDOCUMENTO = readString(dis);
					
					this.ACOM_DOCUMENTO = readString(dis);
					
					this.ACOM_NOMBRE1 = readString(dis);
					
					this.ACOM_NOMBRE2 = readString(dis);
					
					this.ACOM_APELLIDO1 = readString(dis);
					
					this.ACOM_APELLIDO2 = readString(dis);
					
					this.ACOM_PARENTESCO = readString(dis);
					
					this.ACOM_TELEFONO = readString(dis);
					
					this.ACOM_CORREO = readString(dis);
					
					this.DAPLICADAS_ID = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.ORDEN);
					
					// String
				
						writeString(this.FECHA_REGISTRO,dos);
					
					// String
				
						writeString(this.FECHA_APLICACION,dos);
					
					// String
				
						writeString(this.TIPO_DOCUMENTO,dos);
					
					// String
				
						writeString(this.NUMERO_DOCUMENTO,dos);
					
					// String
				
						writeString(this.FECHA_NACIMIENTO,dos);
					
					// String
				
						writeString(this.TIPO_EDAD,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.EDAD);
					
					// String
				
						writeString(this.SEXO,dos);
					
					// String
				
						writeString(this.PRIMER_NOMBRE,dos);
					
					// String
				
						writeString(this.SEGUNDO_NOMBRE,dos);
					
					// String
				
						writeString(this.PRIMER_APELLIDO,dos);
					
					// String
				
						writeString(this.SEGUNDO_APELLIDO,dos);
					
					// String
				
						writeString(this.REGIMEN,dos);
					
					// String
				
						writeString(this.EPS,dos);
					
					// String
				
						writeString(this.GRADO,dos);
					
					// String
				
						writeString(this.TIPO_AFILIACION,dos);
					
					// String
				
						writeString(this.FUERZA_ADSCRIPCION,dos);
					
					// String
				
						writeString(this.ESM_ADSCRIPCION,dos);
					
					// String
				
						writeString(this.FUERZA,dos);
					
					// String
				
						writeString(this.UORG,dos);
					
					// String
				
						writeString(this.USUARIO,dos);
					
					// String
				
						writeString(this.PUNTO_VACUNADOR,dos);
					
					// String
				
						writeString(this.NOMBRE_VACUNADOR,dos);
					
					// String
				
						writeString(this.DEPARTAMENTO_RESIDENCIA,dos);
					
					// String
				
						writeString(this.MUNICIPIO_RESIDENCIA,dos);
					
					// String
				
						writeString(this.BARRIO,dos);
					
					// String
				
						writeString(this.DIRECCION,dos);
					
					// String
				
						writeString(this.TELEFONO,dos);
					
					// String
				
						writeString(this.GRUPO_ETNICO,dos);
					
					// String
				
						writeString(this.DESPLAZADA,dos);
					
					// String
				
						writeString(this.DISCAPACITADA,dos);
					
					// String
				
						writeString(this.VICTIMA,dos);
					
					// String
				
						writeString(this.ZVEREDAL,dos);
					
					// String
				
						writeString(this.PARENTESCO,dos);
					
					// String
				
						writeString(this.TIPO_DOCUMENTO_COTIZANTE,dos);
					
					// String
				
						writeString(this.NUMERO_DOCUMENTO_COTIZANTE,dos);
					
					// String
				
						writeString(this.PRIMER_NOMBRE_COTIZANTE,dos);
					
					// String
				
						writeString(this.SEGUNDO_NOMBRE_COTIZANTE,dos);
					
					// String
				
						writeString(this.PRIMER_APELLIDO_COTIZANTE,dos);
					
					// String
				
						writeString(this.SEGUNDO_APELLIDO_COTIZANTE,dos);
					
					// String
				
						writeString(this.GRADO_COTIZANTE,dos);
					
					// String
				
						writeString(this.ACOM_TDOCUMENTO,dos);
					
					// String
				
						writeString(this.ACOM_DOCUMENTO,dos);
					
					// String
				
						writeString(this.ACOM_NOMBRE1,dos);
					
					// String
				
						writeString(this.ACOM_NOMBRE2,dos);
					
					// String
				
						writeString(this.ACOM_APELLIDO1,dos);
					
					// String
				
						writeString(this.ACOM_APELLIDO2,dos);
					
					// String
				
						writeString(this.ACOM_PARENTESCO,dos);
					
					// String
				
						writeString(this.ACOM_TELEFONO,dos);
					
					// String
				
						writeString(this.ACOM_CORREO,dos);
					
					// String
				
						writeString(this.DAPLICADAS_ID,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ORDEN);
					
					// String
				
						writeString(this.FECHA_REGISTRO,dos);
					
					// String
				
						writeString(this.FECHA_APLICACION,dos);
					
					// String
				
						writeString(this.TIPO_DOCUMENTO,dos);
					
					// String
				
						writeString(this.NUMERO_DOCUMENTO,dos);
					
					// String
				
						writeString(this.FECHA_NACIMIENTO,dos);
					
					// String
				
						writeString(this.TIPO_EDAD,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.EDAD);
					
					// String
				
						writeString(this.SEXO,dos);
					
					// String
				
						writeString(this.PRIMER_NOMBRE,dos);
					
					// String
				
						writeString(this.SEGUNDO_NOMBRE,dos);
					
					// String
				
						writeString(this.PRIMER_APELLIDO,dos);
					
					// String
				
						writeString(this.SEGUNDO_APELLIDO,dos);
					
					// String
				
						writeString(this.REGIMEN,dos);
					
					// String
				
						writeString(this.EPS,dos);
					
					// String
				
						writeString(this.GRADO,dos);
					
					// String
				
						writeString(this.TIPO_AFILIACION,dos);
					
					// String
				
						writeString(this.FUERZA_ADSCRIPCION,dos);
					
					// String
				
						writeString(this.ESM_ADSCRIPCION,dos);
					
					// String
				
						writeString(this.FUERZA,dos);
					
					// String
				
						writeString(this.UORG,dos);
					
					// String
				
						writeString(this.USUARIO,dos);
					
					// String
				
						writeString(this.PUNTO_VACUNADOR,dos);
					
					// String
				
						writeString(this.NOMBRE_VACUNADOR,dos);
					
					// String
				
						writeString(this.DEPARTAMENTO_RESIDENCIA,dos);
					
					// String
				
						writeString(this.MUNICIPIO_RESIDENCIA,dos);
					
					// String
				
						writeString(this.BARRIO,dos);
					
					// String
				
						writeString(this.DIRECCION,dos);
					
					// String
				
						writeString(this.TELEFONO,dos);
					
					// String
				
						writeString(this.GRUPO_ETNICO,dos);
					
					// String
				
						writeString(this.DESPLAZADA,dos);
					
					// String
				
						writeString(this.DISCAPACITADA,dos);
					
					// String
				
						writeString(this.VICTIMA,dos);
					
					// String
				
						writeString(this.ZVEREDAL,dos);
					
					// String
				
						writeString(this.PARENTESCO,dos);
					
					// String
				
						writeString(this.TIPO_DOCUMENTO_COTIZANTE,dos);
					
					// String
				
						writeString(this.NUMERO_DOCUMENTO_COTIZANTE,dos);
					
					// String
				
						writeString(this.PRIMER_NOMBRE_COTIZANTE,dos);
					
					// String
				
						writeString(this.SEGUNDO_NOMBRE_COTIZANTE,dos);
					
					// String
				
						writeString(this.PRIMER_APELLIDO_COTIZANTE,dos);
					
					// String
				
						writeString(this.SEGUNDO_APELLIDO_COTIZANTE,dos);
					
					// String
				
						writeString(this.GRADO_COTIZANTE,dos);
					
					// String
				
						writeString(this.ACOM_TDOCUMENTO,dos);
					
					// String
				
						writeString(this.ACOM_DOCUMENTO,dos);
					
					// String
				
						writeString(this.ACOM_NOMBRE1,dos);
					
					// String
				
						writeString(this.ACOM_NOMBRE2,dos);
					
					// String
				
						writeString(this.ACOM_APELLIDO1,dos);
					
					// String
				
						writeString(this.ACOM_APELLIDO2,dos);
					
					// String
				
						writeString(this.ACOM_PARENTESCO,dos);
					
					// String
				
						writeString(this.ACOM_TELEFONO,dos);
					
					// String
				
						writeString(this.ACOM_CORREO,dos);
					
					// String
				
						writeString(this.DAPLICADAS_ID,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ORDEN="+String.valueOf(ORDEN));
		sb.append(",FECHA_REGISTRO="+FECHA_REGISTRO);
		sb.append(",FECHA_APLICACION="+FECHA_APLICACION);
		sb.append(",TIPO_DOCUMENTO="+TIPO_DOCUMENTO);
		sb.append(",NUMERO_DOCUMENTO="+NUMERO_DOCUMENTO);
		sb.append(",FECHA_NACIMIENTO="+FECHA_NACIMIENTO);
		sb.append(",TIPO_EDAD="+TIPO_EDAD);
		sb.append(",EDAD="+String.valueOf(EDAD));
		sb.append(",SEXO="+SEXO);
		sb.append(",PRIMER_NOMBRE="+PRIMER_NOMBRE);
		sb.append(",SEGUNDO_NOMBRE="+SEGUNDO_NOMBRE);
		sb.append(",PRIMER_APELLIDO="+PRIMER_APELLIDO);
		sb.append(",SEGUNDO_APELLIDO="+SEGUNDO_APELLIDO);
		sb.append(",REGIMEN="+REGIMEN);
		sb.append(",EPS="+EPS);
		sb.append(",GRADO="+GRADO);
		sb.append(",TIPO_AFILIACION="+TIPO_AFILIACION);
		sb.append(",FUERZA_ADSCRIPCION="+FUERZA_ADSCRIPCION);
		sb.append(",ESM_ADSCRIPCION="+ESM_ADSCRIPCION);
		sb.append(",FUERZA="+FUERZA);
		sb.append(",UORG="+UORG);
		sb.append(",USUARIO="+USUARIO);
		sb.append(",PUNTO_VACUNADOR="+PUNTO_VACUNADOR);
		sb.append(",NOMBRE_VACUNADOR="+NOMBRE_VACUNADOR);
		sb.append(",DEPARTAMENTO_RESIDENCIA="+DEPARTAMENTO_RESIDENCIA);
		sb.append(",MUNICIPIO_RESIDENCIA="+MUNICIPIO_RESIDENCIA);
		sb.append(",BARRIO="+BARRIO);
		sb.append(",DIRECCION="+DIRECCION);
		sb.append(",TELEFONO="+TELEFONO);
		sb.append(",GRUPO_ETNICO="+GRUPO_ETNICO);
		sb.append(",DESPLAZADA="+DESPLAZADA);
		sb.append(",DISCAPACITADA="+DISCAPACITADA);
		sb.append(",VICTIMA="+VICTIMA);
		sb.append(",ZVEREDAL="+ZVEREDAL);
		sb.append(",PARENTESCO="+PARENTESCO);
		sb.append(",TIPO_DOCUMENTO_COTIZANTE="+TIPO_DOCUMENTO_COTIZANTE);
		sb.append(",NUMERO_DOCUMENTO_COTIZANTE="+NUMERO_DOCUMENTO_COTIZANTE);
		sb.append(",PRIMER_NOMBRE_COTIZANTE="+PRIMER_NOMBRE_COTIZANTE);
		sb.append(",SEGUNDO_NOMBRE_COTIZANTE="+SEGUNDO_NOMBRE_COTIZANTE);
		sb.append(",PRIMER_APELLIDO_COTIZANTE="+PRIMER_APELLIDO_COTIZANTE);
		sb.append(",SEGUNDO_APELLIDO_COTIZANTE="+SEGUNDO_APELLIDO_COTIZANTE);
		sb.append(",GRADO_COTIZANTE="+GRADO_COTIZANTE);
		sb.append(",ACOM_TDOCUMENTO="+ACOM_TDOCUMENTO);
		sb.append(",ACOM_DOCUMENTO="+ACOM_DOCUMENTO);
		sb.append(",ACOM_NOMBRE1="+ACOM_NOMBRE1);
		sb.append(",ACOM_NOMBRE2="+ACOM_NOMBRE2);
		sb.append(",ACOM_APELLIDO1="+ACOM_APELLIDO1);
		sb.append(",ACOM_APELLIDO2="+ACOM_APELLIDO2);
		sb.append(",ACOM_PARENTESCO="+ACOM_PARENTESCO);
		sb.append(",ACOM_TELEFONO="+ACOM_TELEFONO);
		sb.append(",ACOM_CORREO="+ACOM_CORREO);
		sb.append(",DAPLICADAS_ID="+DAPLICADAS_ID);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row8Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_5Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_5_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row8Struct row8 = new row8Struct();
row17Struct row17 = new row17Struct();





	
	/**
	 * [tHashOutput_6 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashOutput_6", false);
		start_Hash.put("tHashOutput_6", System.currentTimeMillis());
		
	
	currentComponent="tHashOutput_6";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row17");
					}
				
		int tos_count_tHashOutput_6 = 0;
		



org.talend.designer.components.hashfile.common.MapHashFile mf_tHashOutput_6=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();    
		org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row17Struct> tHashFile_tHashOutput_6 = null;
		String hashKey_tHashOutput_6 = "tHashFile_RegistroVacunacion_" + pid + "_tHashOutput_6";
			synchronized(org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.get(hashKey_tHashOutput_6)){
			    if(mf_tHashOutput_6.getResourceMap().get(hashKey_tHashOutput_6) == null){
	      		    mf_tHashOutput_6.getResourceMap().put(hashKey_tHashOutput_6, new org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row17Struct>(org.talend.designer.components.hashfile.common.MATCHING_MODE.KEEP_ALL));
	      		    tHashFile_tHashOutput_6 = mf_tHashOutput_6.getResourceMap().get(hashKey_tHashOutput_6);
			    }else{
			    	tHashFile_tHashOutput_6 = mf_tHashOutput_6.getResourceMap().get(hashKey_tHashOutput_6);
			    }
			}
        int nb_line_tHashOutput_6 = 0;

 



/**
 * [tHashOutput_6 begin ] stop
 */



	
	/**
	 * [tJavaRow_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaRow_5", false);
		start_Hash.put("tJavaRow_5", System.currentTimeMillis());
		
	
	currentComponent="tJavaRow_5";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row8");
					}
				
		int tos_count_tJavaRow_5 = 0;
		

int nb_line_tJavaRow_5 = 0;

 



/**
 * [tJavaRow_5 begin ] stop
 */



	
	/**
	 * [tOracleInput_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_5", false);
		start_Hash.put("tOracleInput_5", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_5";
	
	
		int tos_count_tOracleInput_5 = 0;
		
	


	
		    int nb_line_tOracleInput_5 = 0;
		    java.sql.Connection conn_tOracleInput_5 = null;
				conn_tOracleInput_5 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");
				
                boolean isTimeZoneNull_tOracleInput_5 = false;
				boolean isConnectionWrapped_tOracleInput_5 = !(conn_tOracleInput_5 instanceof oracle.jdbc.OracleConnection) && conn_tOracleInput_5.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tOracleInput_5 = null;
                if (isConnectionWrapped_tOracleInput_5) {
					unwrappedOraConn_tOracleInput_5 = conn_tOracleInput_5.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tOracleInput_5 != null) {
                        isTimeZoneNull_tOracleInput_5 = (unwrappedOraConn_tOracleInput_5.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tOracleInput_5 = (((oracle.jdbc.OracleConnection)conn_tOracleInput_5).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tOracleInput_5) {
					java.sql.Statement stmtGetTZ_tOracleInput_5 = conn_tOracleInput_5.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_5 = stmtGetTZ_tOracleInput_5.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_5 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tOracleInput_5.next()) {
						sessionTimezone_tOracleInput_5 = rsGetTZ_tOracleInput_5.getString(1);
					}
					if (isConnectionWrapped_tOracleInput_5 && unwrappedOraConn_tOracleInput_5 != null) {
                        unwrappedOraConn_tOracleInput_5.setSessionTimeZone(sessionTimezone_tOracleInput_5);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_5).setSessionTimeZone(sessionTimezone_tOracleInput_5);
                    }
				}
			
		    
			java.sql.Statement stmt_tOracleInput_5 = conn_tOracleInput_5.createStatement(java.sql.ResultSet.TYPE_FORWARD_ONLY,
																					java.sql.ResultSet.CONCUR_READ_ONLY);
			
                stmt_tOracleInput_5.setFetchSize(1000);


		    String dbquery_tOracleInput_5 = "\nSELECT\n    ROWNUM AS ORDEN,\n    REGISTRO.FREGISTRO     AS FECHA_REGISTRO,\n    REGISTRO.FAPLICACION   AS FECHA_APLI"
+"CACION,\n    TD.SIGLA               AS TIPO_DOCUMENTO,\n    GP.DOCUMENTO           AS NUMERO_DOCUMENTO,\n    TO_CHAR(GP."
+"FECHA_NACIMIENTO, 'DD/MM/YYYY') AS FECHA_NACIMIENTO,\n    AFI.CALCULAREDADDETALLADA(GP.FECHA_NACIMIENTO) AS TIPO_EDAD,\n"
+"    FLOOR(MONTHS_BETWEEN(SYSDATE, GP.FECHA_NACIMIENTO) / 12) AS EDAD,\n    GS.NOMBRE              AS SEXO,\n    GP.PRIME"
+"R_NOMBRE AS PRIMER_NOMBRE,\n    GP.SEGUNDO_NOMBRE AS SEGUNDO_NOMBRE,\n    GP.PRIMER_APELLIDO AS PRIMER_APELLIDO,\n    GP"
+".SEGUNDO_APELLIDO AS SEGUNDO_APELLIDO,   \n    CASE WHEN AFI.ID IS NOT NULL THEN 'Régimen Especial' ELSE TRIM(RS.NOMBRE)"
+" END AS REGIMEN,\n	CASE WHEN AFI.ID IS NOT NULL THEN 'FUERZAS MILITARES' ELSE TRIM(EPS.DESCRIPCION) END AS EPS,\n    NVL"
+"(G.NOMBRE, 'No aplica') AS GRADO,\n    AFT.NOMBRE AS TIPO_AFILIACION,\n    GF.NOMBRE AS FUERZA_ADSCRIPCION,\n    GU.NOMB"
+"RE AS ESM_ADSCRIPCION, \n    NVL(REGISTRO.FUERZA, 'No aplica') AS FUERZA,\n    REGISTRO.UORG, \n    REGISTRO.USUARIO,\n "
+"   REGISTRO.PUNTO_VACUNADOR  AS PUNTO_VACUNADOR,\n    REGISTRO.VACUNADOR     AS NOMBRE_VACUNADOR,\n    DIV.DEPTO AS DEPA"
+"RTAMENTO_RESIDENCIA,\n    DIV.MCPIO AS MUNICIPIO_RESIDENCIA,\n    GP.BARRIO AS BARRIO,\n    GP.DIRECCION AS DIRECCION,\n"
+"    GP.TELEFONO AS TELEFONO,\n    NVL(ETN.NOMBRE, 'No aplica') AS GRUPO_ETNICO,\n    NVL(GP.DESPLAZADA, 'No registra') A"
+"S DESPLAZADA,\n    CASE WHEN GTD.SIGLA IS NOT NULL AND GTD.SIGLA <> 'TD000' THEN 'Si' ELSE 'No' END AS DISCAPACITADA,\n "
+"   NVL(GP.VICTIMA, 'No registra') AS VICTIMA,\n    NVL(GP.ZVEREDAL, 'No registra') AS ZVEREDAL,\n	PAR.NOMBRE AS PARENTES"
+"CO,\n    TD_COT.SIGLA AS TIPO_DOCUMENTO_COTIZANTE,\n    GP_COT.DOCUMENTO AS NUMERO_DOCUMENTO_COTIZANTE,\n    GP_COT.PRIM"
+"ER_NOMBRE AS PRIMER_NOMBRE_COTIZANTE,\n    GP_COT.SEGUNDO_NOMBRE AS SEGUNDO_NOMBRE_COTIZANTE,\n    GP_COT.PRIMER_APELLID"
+"O AS PRIMER_APELLIDO_COTIZANTE,\n    GP_COT.SEGUNDO_APELLIDO AS SEGUNDO_APELLIDO_COTIZANTE,\n    GRD_COT.NOMBRE AS GRADO"
+"_COTIZANTE,\n    REGISTRO.ACOM_TDOCUMENTO,\n    REGISTRO.ACOM_DOCUMENTO,\n    REGISTRO.ACOM_NOMBRE1,\n    REGISTRO.ACOM_"
+"NOMBRE2,\n    REGISTRO.ACOM_APELLIDO1,\n    REGISTRO.ACOM_APELLIDO2,\n    REGISTRO.ACOM_PARENTESCO,\n    REGISTRO.ACOM_T"
+"ELEFONO,\n    REGISTRO.ACOM_CORREO,\n    REGISTRO.DAPLICADAS_ID\nFROM\n(\n    SELECT\n        VAP.FREGISTRO,\n        VA"
+"P.FAPLICACION,\n        VAP.PERSONAS_ID,\n        VAP.ACOM_TDOCUMENTO,\n        VAP.ACOM_DOCUMENTO,\n        VAP.ACOM_NO"
+"MBRE1,\n        VAP.ACOM_NOMBRE2,\n        VAP.ACOM_APELLIDO1,\n        VAP.ACOM_APELLIDO2,\n        VAP.ACOM_PARENTESCO"
+",\n        VAP.ACOM_TELEFONO,\n        VAP.ACOM_CORREO,\n        CASE VDA.ACTUALIZACION \n            WHEN 1 THEN UPPER("
+"VDA.NOMBRE_VACUNADOR)\n            ELSE VAP.VACUNADOR\n        END AS VACUNADOR, \n        CASE VDA.ACTUALIZACION \n    "
+"        WHEN 1 THEN UPPER(VDA.PUNTO_VACUNADOR)\n            ELSE VAP.UORG\n        END AS PUNTO_VACUNADOR,\n        VAP."
+"UORG,\n        VAP.FUERZA,\n        VAP.VACUNADOR AS USUARIO,\n        LISTAGG(VDA.ID, ',') WITHIN GROUP( ORDER BY VDA.I"
+"D) AS DAPLICADAS_ID\n    FROM\n        (\n            SELECT \n                VAP.ID,\n                TO_CHAR(VAP.FREG"
+"ISTRO, 'DD/MM/YYYY') AS FREGISTRO,\n                TO_CHAR(VAP.FAPLICACION, 'DD/MM/YYYY') AS FAPLICACION,\n            "
+"    VAP.PERSONAS_ID   AS PERSONAS_ID,\n    			CASE WHEN VAP.CUIDADOR IS NULL THEN REGEXP_SUBSTR(REPLACE(VAP.ACOMPANANTE,"
+" '||', '| |'),'[^|]+', 1, 1) ELSE TDC.SIGLA END             AS ACOM_TDOCUMENTO,\n    			CASE WHEN VAP.CUIDADOR IS NULL T"
+"HEN REGEXP_SUBSTR(REPLACE(VAP.ACOMPANANTE, '||', '| |'),'[^|]+', 1, 2) ELSE CUI.DOCUMENTO END         AS ACOM_DOCUMENTO,"
+"\n    			CASE WHEN VAP.CUIDADOR IS NULL THEN REGEXP_SUBSTR(REPLACE(VAP.ACOMPANANTE, '||', '| |'),'[^|]+', 1, 3) ELSE CUI"
+".PRIMER_NOMBRE END     AS ACOM_NOMBRE1,\n   				CASE WHEN VAP.CUIDADOR IS NULL THEN REGEXP_SUBSTR(REPLACE(VAP.ACOMPANANT"
+"E, '||', '| |'),'[^|]+', 1, 4) ELSE CUI.SEGUNDO_NOMBRE END    AS ACOM_NOMBRE2,\n    			CASE WHEN VAP.CUIDADOR IS NULL TH"
+"EN REGEXP_SUBSTR(REPLACE(VAP.ACOMPANANTE, '||', '| |'),'[^|]+', 1, 5) ELSE CUI.PRIMER_APELLIDO END   AS ACOM_APELLIDO1,"
+"\n    			CASE WHEN VAP.CUIDADOR IS NULL THEN REGEXP_SUBSTR(REPLACE(VAP.ACOMPANANTE, '||', '| |'),'[^|]+', 1, 6) ELSE CUI."
+"SEGUNDO_APELLIDO END  AS ACOM_APELLIDO2,\n    			CASE WHEN VAP.CUIDADOR IS NULL THEN REGEXP_SUBSTR(REPLACE(VAP.ACOMPANAN"
+"TE, '||', '| |'),'[^|]+', 1, 7) ELSE CUI.TELEFONO END          AS ACOM_TELEFONO,\n    			CASE WHEN VAP.CUIDADOR IS NULL "
+"THEN REGEXP_SUBSTR(REPLACE(VAP.ACOMPANANTE, '||', '| |'),'[^|]+', 1, 8) ELSE CUI.EMAIL END             AS ACOM_CORREO,\n"
+"                GPA.NOMBRE AS ACOM_PARENTESCO,\n                GU.NOMBRE  AS UORG,\n                GFU.NOMBRE AS FUERZ"
+"A,\n                GPV.PRIMER_NOMBRE || ' ' || GPV.SEGUNDO_NOMBRE || ' ' || GPV.PRIMER_APELLIDO || ' ' || GPV.SEGUNDO_A"
+"PELLIDO AS VACUNADOR\n            FROM \n                VAC_APLICADAS VAP\n                INNER JOIN (\n              "
+"  SELECT ID, NOMBRE, FUERZA_ID\n                    FROM GEN_UORG\n                    WHERE ( FUERZA_ID = '"+context.FUERZA_ID+"' OR '"+context.FUERZA_ID+"' IS NULL )\n                    START WITH ID = '"+context.UORG_ID+"'\n                    CONNECT BY PRIOR ID = PADRE_ID\n                ) GU ON VAP.UORG_ID = GU.ID\n                LEF"
+"T JOIN GEN_FUERZAS       GFU ON GU.FUERZA_ID = GFU.ID \n                INNER JOIN GEN_USUARIOS     GUV ON VAP.USUARIOS_"
+"ID = GUV.ID\n                INNER JOIN GEN_PERSONAS     GPV ON GUV.PERSONAS_ID = GPV.ID\n                LEFT JOIN GEN_"
+"PERSONAS      CUI ON VAP.CUIDADOR = CUI.ID\n                LEFT JOIN GEN_TDOCUMENTOS   TDC ON CUI.TDOCUMENTOS_ID = TDC."
+"ID\n                LEFT JOIN GEN_PARENTESCOS   GPA ON VAP.PARENTESCO_ID = GPA.ID\n            WHERE\n                VA"
+"P.ESTREGISTRO_ID = 1\n                AND VAP.FREGISTRO BETWEEN TO_DATE('"+context.FECHA_INICIAL+"', 'DD/MM/YYYY') AND TO_DATE('"+context.FECHA_FINAL+"', 'DD/MM/YYYY') + 1\n                AND VAP.TVACUNA = NVL('"+context.TESQUEMA+"', VAP.TVACUNA)         \n        ) VAP\n        INNER JOIN VAC_DAPLICADAS VDA ON VDA.APLICADAS_ID = VAP.ID\n    WHERE"
+"\n        VDA.ESTREGISTRO_ID = 1\n       -- AND VDA.BIOLOGICOS_ID IS NOT NULL\n        AND VDA.ACTUALIZACION IN ("+context.ACTUALIZACION+")\n    GROUP BY\n        VAP.FREGISTRO,\n        VAP.FAPLICACION,\n        VAP.PERSONAS_ID,\n        VAP.ACOM_TDOCUMENT"
+"O,\n        VAP.ACOM_DOCUMENTO,\n        VAP.ACOM_NOMBRE1,\n        VAP.ACOM_NOMBRE2,\n        VAP.ACOM_APELLIDO1,\n    "
+"    VAP.ACOM_APELLIDO2,\n        VAP.ACOM_PARENTESCO,\n        VAP.ACOM_TELEFONO,\n        VAP.ACOM_CORREO,\n        VAP"
+".UORG,\n        VAP.FUERZA,\n        VAP.VACUNADOR,\n        CASE VDA.ACTUALIZACION WHEN 1 THEN UPPER(VDA.PUNTO_VACUNADO"
+"R) ELSE VAP.UORG END,\n        CASE VDA.ACTUALIZACION WHEN 1 THEN UPPER(VDA.NOMBRE_VACUNADOR) ELSE VAP.VACUNADOR END\n) "
+"REGISTRO\nINNER JOIN GEN_PERSONAS                GP ON REGISTRO.PERSONAS_ID = GP.ID\nINNER JOIN GEN_TDOCUMENTOS         "
+"    TD ON GP.TDOCUMENTOS_ID = TD.ID\nINNER JOIN GEN_SEXOS                   GS ON GP.SEXO_ID = GS.ID\nLEFT JOIN GEN_TDIS"
+"CAPACIDADES         GTD ON GP.TDISCAPACIDADES_ID = GTD.ID\nLEFT JOIN GEN_AFILIADOS                AFI ON AFI.PERSONAS_ID"
+" = GP.ID AND AFI.ESTREGISTRO_ID = 1 AND AFI.ESTAFILIACION IN ('Activo', 'Provisional')\nLEFT JOIN GEN_PARENTESCOS      P"
+"AR ON AFI.PARENTESCOS_ID = PAR.ID\nLEFT JOIN GEN_AFILIADOS_ENTAPORTANTE   GAE ON GAE.AFILIADOS_ID = AFI.ID AND GAE.PRINC"
+"IPAL = 1 AND GAE.ESTREGISTRO_ID = 1\nLEFT JOIN GEN_GRDMILITARES             G ON G.ID = GAE.GRDMILITARES_ID AND G.ESTREG"
+"ISTRO_ID = 1\nLEFT JOIN AFI_PLANAFILIACIONES         AFP ON AFI.PLANAFILIACIONES_ID = AFP.ID\nLEFT JOIN AFI_TAFILIADOS  "
+"             AFT ON AFP.TAFILIADOS_ID = AFT.ID\nLEFT JOIN GEN_AFILIADOS                COT ON AFI.PADRE_ID = COT.ID AND "
+"COT.ESTREGISTRO_ID = 1\nLEFT JOIN GEN_PERSONAS                 GP_COT ON COT.PERSONAS_ID = GP_COT.ID AND GP_COT.ESTREGIS"
+"TRO_ID = 1\nLEFT JOIN GEN_TDOCUMENTOS              TD_COT ON GP_COT.TDOCUMENTOS_ID = TD_COT.ID\nLEFT JOIN GEN_AFILIADOS_"
+"ENTAPORTANTE   GAE_COT ON GAE_COT.AFILIADOS_ID = COT.ID AND GAE_COT.PRINCIPAL = 1 AND GAE_COT.ESTREGISTRO_ID = 1\nLEFT J"
+"OIN GEN_GRDMILITARES             GRD_COT ON GAE_COT.GRDMILITARES_ID = GRD_COT.ID AND GRD_COT.ESTREGISTRO_ID = 1\nLEFT JO"
+"IN GEN_PERSONAS_EPS             EP ON EP.PERSONAS_ID = GP.ID AND EP.ESTREGISTRO_ID = 1 AND EP.ESTADO = 'Activo' AND AFI."
+"ID IS NULL\nLEFT JOIN AFI_EPS                      EPS ON EP.EPS_ID = EPS.ID\nLEFT JOIN GEN_TREGIMENSALUD            RS "
+"ON EP.TREGIMENSALUD_ID = RS.ID\nLEFT JOIN GEN_UORG                     GU ON GP.ESMADSCRITO = GU.ID AND GU.ESTREGISTRO_I"
+"D = 1\nLEFT JOIN GEN_FUERZAS                  GF ON GU.FUERZA_ID = GF.ID AND GF.ESTREGISTRO_ID = 1\nLEFT JOIN GEN_DIVIPO"
+"LA                 DIV ON GP.LUGAR_RESIDENCIA = DIV.ID AND DIV.ESTREGISTRO_ID = 1\nLEFT JOIN GEN_ETNICAS                "
+"  ETN ON GP.ETNICAS_ID = ETN.ID AND ETN.ESTREGISTRO_ID = 1\n";
		    

		    globalMap.put("tOracleInput_5_QUERY",dbquery_tOracleInput_5);

		    java.sql.ResultSet rs_tOracleInput_5 = null;

		    try {
		    	rs_tOracleInput_5 = stmt_tOracleInput_5.executeQuery(dbquery_tOracleInput_5);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_5 = rs_tOracleInput_5.getMetaData();
		    	int colQtyInRs_tOracleInput_5 = rsmd_tOracleInput_5.getColumnCount();

		    String tmpContent_tOracleInput_5 = null;
		    
		    
		    while (rs_tOracleInput_5.next()) {
		        nb_line_tOracleInput_5++;
		        
							if(colQtyInRs_tOracleInput_5 < 1) {
								row8.ORDEN = null;
							} else {
		                          
					if(rs_tOracleInput_5.getObject(1) != null) {
						row8.ORDEN = rs_tOracleInput_5.getBigDecimal(1);
					} else {
				
						row8.ORDEN = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_5 < 2) {
								row8.FECHA_REGISTRO = null;
							} else {
	                         		
        	row8.FECHA_REGISTRO = routines.system.JDBCUtil.getString(rs_tOracleInput_5, 2, true);
		                    }
							if(colQtyInRs_tOracleInput_5 < 3) {
								row8.FECHA_APLICACION = null;
							} else {
	                         		
        	row8.FECHA_APLICACION = routines.system.JDBCUtil.getString(rs_tOracleInput_5, 3, true);
		                    }
							if(colQtyInRs_tOracleInput_5 < 4) {
								row8.TIPO_DOCUMENTO = null;
							} else {
	                         		
        	row8.TIPO_DOCUMENTO = routines.system.JDBCUtil.getString(rs_tOracleInput_5, 4, true);
		                    }
							if(colQtyInRs_tOracleInput_5 < 5) {
								row8.NUMERO_DOCUMENTO = null;
							} else {
	                         		
        	row8.NUMERO_DOCUMENTO = routines.system.JDBCUtil.getString(rs_tOracleInput_5, 5, true);
		                    }
							if(colQtyInRs_tOracleInput_5 < 6) {
								row8.FECHA_NACIMIENTO = null;
							} else {
	                         		
        	row8.FECHA_NACIMIENTO = routines.system.JDBCUtil.getString(rs_tOracleInput_5, 6, true);
		                    }
							if(colQtyInRs_tOracleInput_5 < 7) {
								row8.TIPO_EDAD = null;
							} else {
	                         		
        	row8.TIPO_EDAD = routines.system.JDBCUtil.getString(rs_tOracleInput_5, 7, true);
		                    }
							if(colQtyInRs_tOracleInput_5 < 8) {
								row8.EDAD = null;
							} else {
		                          
					if(rs_tOracleInput_5.getObject(8) != null) {
						row8.EDAD = rs_tOracleInput_5.getBigDecimal(8);
					} else {
				
						row8.EDAD = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_5 < 9) {
								row8.SEXO = null;
							} else {
	                         		
        	row8.SEXO = routines.system.JDBCUtil.getString(rs_tOracleInput_5, 9, true);
		                    }
							if(colQtyInRs_tOracleInput_5 < 10) {
								row8.PRIMER_NOMBRE = null;
							} else {
	                         		
        	row8.PRIMER_NOMBRE = routines.system.JDBCUtil.getString(rs_tOracleInput_5, 10, true);
		                    }
							if(colQtyInRs_tOracleInput_5 < 11) {
								row8.SEGUNDO_NOMBRE = null;
							} else {
	                         		
        	row8.SEGUNDO_NOMBRE = routines.system.JDBCUtil.getString(rs_tOracleInput_5, 11, true);
		                    }
							if(colQtyInRs_tOracleInput_5 < 12) {
								row8.PRIMER_APELLIDO = null;
							} else {
	                         		
        	row8.PRIMER_APELLIDO = routines.system.JDBCUtil.getString(rs_tOracleInput_5, 12, true);
		                    }
							if(colQtyInRs_tOracleInput_5 < 13) {
								row8.SEGUNDO_APELLIDO = null;
							} else {
	                         		
        	row8.SEGUNDO_APELLIDO = routines.system.JDBCUtil.getString(rs_tOracleInput_5, 13, true);
		                    }
							if(colQtyInRs_tOracleInput_5 < 14) {
								row8.REGIMEN = null;
							} else {
	                         		
        	row8.REGIMEN = routines.system.JDBCUtil.getString(rs_tOracleInput_5, 14, true);
		                    }
							if(colQtyInRs_tOracleInput_5 < 15) {
								row8.EPS = null;
							} else {
	                         		
        	row8.EPS = routines.system.JDBCUtil.getString(rs_tOracleInput_5, 15, true);
		                    }
							if(colQtyInRs_tOracleInput_5 < 16) {
								row8.GRADO = null;
							} else {
	                         		
        	row8.GRADO = routines.system.JDBCUtil.getString(rs_tOracleInput_5, 16, true);
		                    }
							if(colQtyInRs_tOracleInput_5 < 17) {
								row8.TIPO_AFILIACION = null;
							} else {
	                         		
        	row8.TIPO_AFILIACION = routines.system.JDBCUtil.getString(rs_tOracleInput_5, 17, true);
		                    }
							if(colQtyInRs_tOracleInput_5 < 18) {
								row8.FUERZA_ADSCRIPCION = null;
							} else {
	                         		
        	row8.FUERZA_ADSCRIPCION = routines.system.JDBCUtil.getString(rs_tOracleInput_5, 18, true);
		                    }
							if(colQtyInRs_tOracleInput_5 < 19) {
								row8.ESM_ADSCRIPCION = null;
							} else {
	                         		
        	row8.ESM_ADSCRIPCION = routines.system.JDBCUtil.getString(rs_tOracleInput_5, 19, true);
		                    }
							if(colQtyInRs_tOracleInput_5 < 20) {
								row8.FUERZA = null;
							} else {
	                         		
        	row8.FUERZA = routines.system.JDBCUtil.getString(rs_tOracleInput_5, 20, true);
		                    }
							if(colQtyInRs_tOracleInput_5 < 21) {
								row8.UORG = null;
							} else {
	                         		
        	row8.UORG = routines.system.JDBCUtil.getString(rs_tOracleInput_5, 21, true);
		                    }
							if(colQtyInRs_tOracleInput_5 < 22) {
								row8.USUARIO = null;
							} else {
	                         		
        	row8.USUARIO = routines.system.JDBCUtil.getString(rs_tOracleInput_5, 22, true);
		                    }
							if(colQtyInRs_tOracleInput_5 < 23) {
								row8.PUNTO_VACUNADOR = null;
							} else {
	                         		
        	row8.PUNTO_VACUNADOR = routines.system.JDBCUtil.getString(rs_tOracleInput_5, 23, true);
		                    }
							if(colQtyInRs_tOracleInput_5 < 24) {
								row8.NOMBRE_VACUNADOR = null;
							} else {
	                         		
        	row8.NOMBRE_VACUNADOR = routines.system.JDBCUtil.getString(rs_tOracleInput_5, 24, true);
		                    }
							if(colQtyInRs_tOracleInput_5 < 25) {
								row8.DEPARTAMENTO_RESIDENCIA = null;
							} else {
	                         		
        	row8.DEPARTAMENTO_RESIDENCIA = routines.system.JDBCUtil.getString(rs_tOracleInput_5, 25, true);
		                    }
							if(colQtyInRs_tOracleInput_5 < 26) {
								row8.MUNICIPIO_RESIDENCIA = null;
							} else {
	                         		
        	row8.MUNICIPIO_RESIDENCIA = routines.system.JDBCUtil.getString(rs_tOracleInput_5, 26, true);
		                    }
							if(colQtyInRs_tOracleInput_5 < 27) {
								row8.BARRIO = null;
							} else {
	                         		
        	row8.BARRIO = routines.system.JDBCUtil.getString(rs_tOracleInput_5, 27, true);
		                    }
							if(colQtyInRs_tOracleInput_5 < 28) {
								row8.DIRECCION = null;
							} else {
	                         		
        	row8.DIRECCION = routines.system.JDBCUtil.getString(rs_tOracleInput_5, 28, true);
		                    }
							if(colQtyInRs_tOracleInput_5 < 29) {
								row8.TELEFONO = null;
							} else {
	                         		
        	row8.TELEFONO = routines.system.JDBCUtil.getString(rs_tOracleInput_5, 29, true);
		                    }
							if(colQtyInRs_tOracleInput_5 < 30) {
								row8.GRUPO_ETNICO = null;
							} else {
	                         		
        	row8.GRUPO_ETNICO = routines.system.JDBCUtil.getString(rs_tOracleInput_5, 30, true);
		                    }
							if(colQtyInRs_tOracleInput_5 < 31) {
								row8.DESPLAZADA = null;
							} else {
	                         		
        	row8.DESPLAZADA = routines.system.JDBCUtil.getString(rs_tOracleInput_5, 31, true);
		                    }
							if(colQtyInRs_tOracleInput_5 < 32) {
								row8.DISCAPACITADA = null;
							} else {
	                         		
        	row8.DISCAPACITADA = routines.system.JDBCUtil.getString(rs_tOracleInput_5, 32, true);
		                    }
							if(colQtyInRs_tOracleInput_5 < 33) {
								row8.VICTIMA = null;
							} else {
	                         		
        	row8.VICTIMA = routines.system.JDBCUtil.getString(rs_tOracleInput_5, 33, true);
		                    }
							if(colQtyInRs_tOracleInput_5 < 34) {
								row8.ZVEREDAL = null;
							} else {
	                         		
        	row8.ZVEREDAL = routines.system.JDBCUtil.getString(rs_tOracleInput_5, 34, true);
		                    }
							if(colQtyInRs_tOracleInput_5 < 35) {
								row8.PARENTESCO = null;
							} else {
	                         		
        	row8.PARENTESCO = routines.system.JDBCUtil.getString(rs_tOracleInput_5, 35, true);
		                    }
							if(colQtyInRs_tOracleInput_5 < 36) {
								row8.TIPO_DOCUMENTO_COTIZANTE = null;
							} else {
	                         		
        	row8.TIPO_DOCUMENTO_COTIZANTE = routines.system.JDBCUtil.getString(rs_tOracleInput_5, 36, true);
		                    }
							if(colQtyInRs_tOracleInput_5 < 37) {
								row8.NUMERO_DOCUMENTO_COTIZANTE = null;
							} else {
	                         		
        	row8.NUMERO_DOCUMENTO_COTIZANTE = routines.system.JDBCUtil.getString(rs_tOracleInput_5, 37, true);
		                    }
							if(colQtyInRs_tOracleInput_5 < 38) {
								row8.PRIMER_NOMBRE_COTIZANTE = null;
							} else {
	                         		
        	row8.PRIMER_NOMBRE_COTIZANTE = routines.system.JDBCUtil.getString(rs_tOracleInput_5, 38, true);
		                    }
							if(colQtyInRs_tOracleInput_5 < 39) {
								row8.SEGUNDO_NOMBRE_COTIZANTE = null;
							} else {
	                         		
        	row8.SEGUNDO_NOMBRE_COTIZANTE = routines.system.JDBCUtil.getString(rs_tOracleInput_5, 39, true);
		                    }
							if(colQtyInRs_tOracleInput_5 < 40) {
								row8.PRIMER_APELLIDO_COTIZANTE = null;
							} else {
	                         		
        	row8.PRIMER_APELLIDO_COTIZANTE = routines.system.JDBCUtil.getString(rs_tOracleInput_5, 40, true);
		                    }
							if(colQtyInRs_tOracleInput_5 < 41) {
								row8.SEGUNDO_APELLIDO_COTIZANTE = null;
							} else {
	                         		
        	row8.SEGUNDO_APELLIDO_COTIZANTE = routines.system.JDBCUtil.getString(rs_tOracleInput_5, 41, true);
		                    }
							if(colQtyInRs_tOracleInput_5 < 42) {
								row8.GRADO_COTIZANTE = null;
							} else {
	                         		
        	row8.GRADO_COTIZANTE = routines.system.JDBCUtil.getString(rs_tOracleInput_5, 42, true);
		                    }
							if(colQtyInRs_tOracleInput_5 < 43) {
								row8.ACOM_TDOCUMENTO = null;
							} else {
	                         		
        	row8.ACOM_TDOCUMENTO = routines.system.JDBCUtil.getString(rs_tOracleInput_5, 43, true);
		                    }
							if(colQtyInRs_tOracleInput_5 < 44) {
								row8.ACOM_DOCUMENTO = null;
							} else {
	                         		
        	row8.ACOM_DOCUMENTO = routines.system.JDBCUtil.getString(rs_tOracleInput_5, 44, true);
		                    }
							if(colQtyInRs_tOracleInput_5 < 45) {
								row8.ACOM_NOMBRE1 = null;
							} else {
	                         		
        	row8.ACOM_NOMBRE1 = routines.system.JDBCUtil.getString(rs_tOracleInput_5, 45, true);
		                    }
							if(colQtyInRs_tOracleInput_5 < 46) {
								row8.ACOM_NOMBRE2 = null;
							} else {
	                         		
        	row8.ACOM_NOMBRE2 = routines.system.JDBCUtil.getString(rs_tOracleInput_5, 46, true);
		                    }
							if(colQtyInRs_tOracleInput_5 < 47) {
								row8.ACOM_APELLIDO1 = null;
							} else {
	                         		
        	row8.ACOM_APELLIDO1 = routines.system.JDBCUtil.getString(rs_tOracleInput_5, 47, true);
		                    }
							if(colQtyInRs_tOracleInput_5 < 48) {
								row8.ACOM_APELLIDO2 = null;
							} else {
	                         		
        	row8.ACOM_APELLIDO2 = routines.system.JDBCUtil.getString(rs_tOracleInput_5, 48, true);
		                    }
							if(colQtyInRs_tOracleInput_5 < 49) {
								row8.ACOM_PARENTESCO = null;
							} else {
	                         		
        	row8.ACOM_PARENTESCO = routines.system.JDBCUtil.getString(rs_tOracleInput_5, 49, true);
		                    }
							if(colQtyInRs_tOracleInput_5 < 50) {
								row8.ACOM_TELEFONO = null;
							} else {
	                         		
        	row8.ACOM_TELEFONO = routines.system.JDBCUtil.getString(rs_tOracleInput_5, 50, true);
		                    }
							if(colQtyInRs_tOracleInput_5 < 51) {
								row8.ACOM_CORREO = null;
							} else {
	                         		
        	row8.ACOM_CORREO = routines.system.JDBCUtil.getString(rs_tOracleInput_5, 51, true);
		                    }
							if(colQtyInRs_tOracleInput_5 < 52) {
								row8.DAPLICADAS_ID = null;
							} else {
	                         		
        	row8.DAPLICADAS_ID = routines.system.JDBCUtil.getString(rs_tOracleInput_5, 52, true);
		                    }
					




 



/**
 * [tOracleInput_5 begin ] stop
 */
	
	/**
	 * [tOracleInput_5 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_5";
	
	

 


	tos_count_tOracleInput_5++;

/**
 * [tOracleInput_5 main ] stop
 */
	
	/**
	 * [tOracleInput_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_5";
	
	

 



/**
 * [tOracleInput_5 process_data_begin ] stop
 */

	
	/**
	 * [tJavaRow_5 main ] start
	 */

	

	
	
	currentComponent="tJavaRow_5";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row8"
						
						);
					}
					

    //Code generated according to input schema and output schema
row17.ORDEN = row8.ORDEN;
row17.FECHA_REGISTRO = row8.FECHA_REGISTRO;
row17.FECHA_APLICACION = row8.FECHA_APLICACION;
row17.TIPO_DOCUMENTO = row8.TIPO_DOCUMENTO;
row17.NUMERO_DOCUMENTO = row8.NUMERO_DOCUMENTO;
row17.FECHA_NACIMIENTO = row8.FECHA_NACIMIENTO;
row17.TIPO_EDAD = row8.TIPO_EDAD;
row17.EDAD = row8.EDAD;
row17.SEXO = row8.SEXO;
row17.PRIMER_NOMBRE = row8.PRIMER_NOMBRE;
row17.SEGUNDO_NOMBRE = row8.SEGUNDO_NOMBRE;
row17.PRIMER_APELLIDO = row8.PRIMER_APELLIDO;
row17.SEGUNDO_APELLIDO = row8.SEGUNDO_APELLIDO;
row17.REGIMEN = row8.REGIMEN;
row17.EPS = row8.EPS;
row17.GRADO = row8.GRADO;
row17.TIPO_AFILIACION = row8.TIPO_AFILIACION;
row17.FUERZA_ADSCRIPCION = row8.FUERZA_ADSCRIPCION;
row17.ESM_ADSCRIPCION = row8.ESM_ADSCRIPCION;
row17.FUERZA = row8.FUERZA;
row17.UORG = row8.UORG;
row17.USUARIO = row8.USUARIO;
row17.PUNTO_VACUNADOR = row8.PUNTO_VACUNADOR;
row17.NOMBRE_VACUNADOR = row8.NOMBRE_VACUNADOR;
row17.DEPARTAMENTO_RESIDENCIA = row8.DEPARTAMENTO_RESIDENCIA;
row17.MUNICIPIO_RESIDENCIA = row8.MUNICIPIO_RESIDENCIA;
row17.BARRIO = row8.BARRIO;
row17.DIRECCION = row8.DIRECCION;
row17.TELEFONO = row8.TELEFONO;
row17.GRUPO_ETNICO = row8.GRUPO_ETNICO;
row17.DESPLAZADA = row8.DESPLAZADA;
row17.DISCAPACITADA = row8.DISCAPACITADA;
row17.VICTIMA = row8.VICTIMA;
row17.ZVEREDAL = row8.ZVEREDAL;
row17.PARENTESCO = row8.PARENTESCO;
row17.TIPO_DOCUMENTO_COTIZANTE = row8.TIPO_DOCUMENTO_COTIZANTE;
row17.NUMERO_DOCUMENTO_COTIZANTE = row8.NUMERO_DOCUMENTO_COTIZANTE;
row17.PRIMER_NOMBRE_COTIZANTE = row8.PRIMER_NOMBRE_COTIZANTE;
row17.SEGUNDO_NOMBRE_COTIZANTE = row8.SEGUNDO_NOMBRE_COTIZANTE;
row17.PRIMER_APELLIDO_COTIZANTE = row8.PRIMER_APELLIDO_COTIZANTE;
row17.SEGUNDO_APELLIDO_COTIZANTE = row8.SEGUNDO_APELLIDO_COTIZANTE;
row17.GRADO_COTIZANTE = row8.GRADO_COTIZANTE;
row17.ACOM_TDOCUMENTO = row8.ACOM_TDOCUMENTO;
row17.ACOM_DOCUMENTO = row8.ACOM_DOCUMENTO;
row17.ACOM_NOMBRE1 = row8.ACOM_NOMBRE1;
row17.ACOM_NOMBRE2 = row8.ACOM_NOMBRE2;
row17.ACOM_APELLIDO1 = row8.ACOM_APELLIDO1;
row17.ACOM_APELLIDO2 = row8.ACOM_APELLIDO2;
row17.ACOM_PARENTESCO = row8.ACOM_PARENTESCO;
row17.ACOM_TELEFONO = row8.ACOM_TELEFONO;
row17.ACOM_CORREO = row8.ACOM_CORREO;
row17.DAPLICADAS_ID = row8.DAPLICADAS_ID;


String datos = row8.ORDEN + "|" +
			   row8.FECHA_REGISTRO + "|" +
			   row8.FECHA_APLICACION + "|" +
               row8.TIPO_DOCUMENTO + "|" +
               row8.NUMERO_DOCUMENTO + "|" +
               row8.FECHA_NACIMIENTO + "|" +
               row8.TIPO_EDAD + "|" +
               row8.EDAD + "|" +
               row8.SEXO + "|" +
               row8.PRIMER_NOMBRE + "|" +
               row8.SEGUNDO_NOMBRE + "|" +
               row8.PRIMER_APELLIDO + "|" +
               row8.SEGUNDO_APELLIDO + "|" +               
               row8.REGIMEN + "|" +
               row8.EPS + "|" +               
               row8.GRADO + "|" +
               row8.TIPO_AFILIACION + "|" +
               row8.FUERZA_ADSCRIPCION + "|" +
               row8.ESM_ADSCRIPCION + "|" +
               row8.FUERZA + "|" +
               row8.UORG + "|" +
			   row8.USUARIO + "|" +
               row8.PUNTO_VACUNADOR + "|" +
               row8.NOMBRE_VACUNADOR + "|" +
               row8.DEPARTAMENTO_RESIDENCIA + "|" +
               row8.MUNICIPIO_RESIDENCIA + "|" +
               row8.BARRIO + "|" +
               row8.DIRECCION + "|" +
               row8.TELEFONO + "|" +
               row8.GRUPO_ETNICO + "|" +
               row8.DESPLAZADA + "|" +
               row8.DISCAPACITADA + "|" +
               row8.VICTIMA + "|" +
               row8.ZVEREDAL + "|" +
               row8.PARENTESCO + "|" +               
               row8.TIPO_DOCUMENTO_COTIZANTE + "|" +
               row8.NUMERO_DOCUMENTO_COTIZANTE + "|" +
               row8.PRIMER_NOMBRE_COTIZANTE + "|" +
               row8.SEGUNDO_NOMBRE_COTIZANTE + "|" +
               row8.PRIMER_APELLIDO_COTIZANTE + "|" +
               row8.SEGUNDO_APELLIDO_COTIZANTE + "|" +
               row8.GRADO_COTIZANTE + "|" +               
               row8.ACOM_TDOCUMENTO + "|" +
               row8.ACOM_DOCUMENTO + "|" +
               row8.ACOM_NOMBRE1 + "|" +
               row8.ACOM_NOMBRE2 + "|" +
               row8.ACOM_APELLIDO1 + "|" +
               row8.ACOM_APELLIDO2 + "|" +
               row8.ACOM_PARENTESCO + "|" +
               row8.ACOM_TELEFONO + "|" +                              
               row8.ACOM_CORREO;
	
// Inserta el registro de la persona
RegistroVacunacionPoi.personaData(datos, row8.ORDEN.intValue());

// Concatena el DAPLICADAS
context.DAPLICADAS_LIST += row8.DAPLICADAS_ID + ",";

    nb_line_tJavaRow_5++;   

 


	tos_count_tJavaRow_5++;

/**
 * [tJavaRow_5 main ] stop
 */
	
	/**
	 * [tJavaRow_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJavaRow_5";
	
	

 



/**
 * [tJavaRow_5 process_data_begin ] stop
 */

	
	/**
	 * [tHashOutput_6 main ] start
	 */

	

	
	
	currentComponent="tHashOutput_6";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row17"
						
						);
					}
					



    
		row17Struct oneRow_tHashOutput_6 = new row17Struct();
				
					oneRow_tHashOutput_6.ORDEN = row17.ORDEN;
					oneRow_tHashOutput_6.FECHA_REGISTRO = row17.FECHA_REGISTRO;
					oneRow_tHashOutput_6.FECHA_APLICACION = row17.FECHA_APLICACION;
					oneRow_tHashOutput_6.TIPO_DOCUMENTO = row17.TIPO_DOCUMENTO;
					oneRow_tHashOutput_6.NUMERO_DOCUMENTO = row17.NUMERO_DOCUMENTO;
					oneRow_tHashOutput_6.FECHA_NACIMIENTO = row17.FECHA_NACIMIENTO;
					oneRow_tHashOutput_6.TIPO_EDAD = row17.TIPO_EDAD;
					oneRow_tHashOutput_6.EDAD = row17.EDAD;
					oneRow_tHashOutput_6.SEXO = row17.SEXO;
					oneRow_tHashOutput_6.PRIMER_NOMBRE = row17.PRIMER_NOMBRE;
					oneRow_tHashOutput_6.SEGUNDO_NOMBRE = row17.SEGUNDO_NOMBRE;
					oneRow_tHashOutput_6.PRIMER_APELLIDO = row17.PRIMER_APELLIDO;
					oneRow_tHashOutput_6.SEGUNDO_APELLIDO = row17.SEGUNDO_APELLIDO;
					oneRow_tHashOutput_6.REGIMEN = row17.REGIMEN;
					oneRow_tHashOutput_6.EPS = row17.EPS;
					oneRow_tHashOutput_6.GRADO = row17.GRADO;
					oneRow_tHashOutput_6.TIPO_AFILIACION = row17.TIPO_AFILIACION;
					oneRow_tHashOutput_6.FUERZA_ADSCRIPCION = row17.FUERZA_ADSCRIPCION;
					oneRow_tHashOutput_6.ESM_ADSCRIPCION = row17.ESM_ADSCRIPCION;
					oneRow_tHashOutput_6.FUERZA = row17.FUERZA;
					oneRow_tHashOutput_6.UORG = row17.UORG;
					oneRow_tHashOutput_6.USUARIO = row17.USUARIO;
					oneRow_tHashOutput_6.PUNTO_VACUNADOR = row17.PUNTO_VACUNADOR;
					oneRow_tHashOutput_6.NOMBRE_VACUNADOR = row17.NOMBRE_VACUNADOR;
					oneRow_tHashOutput_6.DEPARTAMENTO_RESIDENCIA = row17.DEPARTAMENTO_RESIDENCIA;
					oneRow_tHashOutput_6.MUNICIPIO_RESIDENCIA = row17.MUNICIPIO_RESIDENCIA;
					oneRow_tHashOutput_6.BARRIO = row17.BARRIO;
					oneRow_tHashOutput_6.DIRECCION = row17.DIRECCION;
					oneRow_tHashOutput_6.TELEFONO = row17.TELEFONO;
					oneRow_tHashOutput_6.GRUPO_ETNICO = row17.GRUPO_ETNICO;
					oneRow_tHashOutput_6.DESPLAZADA = row17.DESPLAZADA;
					oneRow_tHashOutput_6.DISCAPACITADA = row17.DISCAPACITADA;
					oneRow_tHashOutput_6.VICTIMA = row17.VICTIMA;
					oneRow_tHashOutput_6.ZVEREDAL = row17.ZVEREDAL;
					oneRow_tHashOutput_6.PARENTESCO = row17.PARENTESCO;
					oneRow_tHashOutput_6.TIPO_DOCUMENTO_COTIZANTE = row17.TIPO_DOCUMENTO_COTIZANTE;
					oneRow_tHashOutput_6.NUMERO_DOCUMENTO_COTIZANTE = row17.NUMERO_DOCUMENTO_COTIZANTE;
					oneRow_tHashOutput_6.PRIMER_NOMBRE_COTIZANTE = row17.PRIMER_NOMBRE_COTIZANTE;
					oneRow_tHashOutput_6.SEGUNDO_NOMBRE_COTIZANTE = row17.SEGUNDO_NOMBRE_COTIZANTE;
					oneRow_tHashOutput_6.PRIMER_APELLIDO_COTIZANTE = row17.PRIMER_APELLIDO_COTIZANTE;
					oneRow_tHashOutput_6.SEGUNDO_APELLIDO_COTIZANTE = row17.SEGUNDO_APELLIDO_COTIZANTE;
					oneRow_tHashOutput_6.GRADO_COTIZANTE = row17.GRADO_COTIZANTE;
					oneRow_tHashOutput_6.ACOM_TDOCUMENTO = row17.ACOM_TDOCUMENTO;
					oneRow_tHashOutput_6.ACOM_DOCUMENTO = row17.ACOM_DOCUMENTO;
					oneRow_tHashOutput_6.ACOM_NOMBRE1 = row17.ACOM_NOMBRE1;
					oneRow_tHashOutput_6.ACOM_NOMBRE2 = row17.ACOM_NOMBRE2;
					oneRow_tHashOutput_6.ACOM_APELLIDO1 = row17.ACOM_APELLIDO1;
					oneRow_tHashOutput_6.ACOM_APELLIDO2 = row17.ACOM_APELLIDO2;
					oneRow_tHashOutput_6.ACOM_PARENTESCO = row17.ACOM_PARENTESCO;
					oneRow_tHashOutput_6.ACOM_TELEFONO = row17.ACOM_TELEFONO;
					oneRow_tHashOutput_6.ACOM_CORREO = row17.ACOM_CORREO;
					oneRow_tHashOutput_6.DAPLICADAS_ID = row17.DAPLICADAS_ID;
		
        tHashFile_tHashOutput_6.put(oneRow_tHashOutput_6);
        nb_line_tHashOutput_6 ++;

 


	tos_count_tHashOutput_6++;

/**
 * [tHashOutput_6 main ] stop
 */
	
	/**
	 * [tHashOutput_6 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashOutput_6";
	
	

 



/**
 * [tHashOutput_6 process_data_begin ] stop
 */
	
	/**
	 * [tHashOutput_6 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashOutput_6";
	
	

 



/**
 * [tHashOutput_6 process_data_end ] stop
 */



	
	/**
	 * [tJavaRow_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tJavaRow_5";
	
	

 



/**
 * [tJavaRow_5 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_5";
	
	

 



/**
 * [tOracleInput_5 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_5 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_5";
	
	

}
}finally{
	if (rs_tOracleInput_5 != null) {
		rs_tOracleInput_5.close();
	}
	if (stmt_tOracleInput_5 != null) {
		stmt_tOracleInput_5.close();
	}
}

globalMap.put("tOracleInput_5_NB_LINE",nb_line_tOracleInput_5);
 

ok_Hash.put("tOracleInput_5", true);
end_Hash.put("tOracleInput_5", System.currentTimeMillis());




/**
 * [tOracleInput_5 end ] stop
 */

	
	/**
	 * [tJavaRow_5 end ] start
	 */

	

	
	
	currentComponent="tJavaRow_5";
	
	

globalMap.put("tJavaRow_5_NB_LINE",nb_line_tJavaRow_5);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row8");
			  	}
			  	
 

ok_Hash.put("tJavaRow_5", true);
end_Hash.put("tJavaRow_5", System.currentTimeMillis());




/**
 * [tJavaRow_5 end ] stop
 */

	
	/**
	 * [tHashOutput_6 end ] start
	 */

	

	
	
	currentComponent="tHashOutput_6";
	
	
globalMap.put("tHashOutput_6_NB_LINE", nb_line_tHashOutput_6);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row17");
			  	}
			  	
 

ok_Hash.put("tHashOutput_6", true);
end_Hash.put("tHashOutput_6", System.currentTimeMillis());




/**
 * [tHashOutput_6 end ] stop
 */






				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tOracleInput_5:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk3", 0, "ok");
								} 
							
							tJava_6Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleInput_5 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_5";
	
	

 



/**
 * [tOracleInput_5 finally ] stop
 */

	
	/**
	 * [tJavaRow_5 finally ] start
	 */

	

	
	
	currentComponent="tJavaRow_5";
	
	

 



/**
 * [tJavaRow_5 finally ] stop
 */

	
	/**
	 * [tHashOutput_6 finally ] start
	 */

	

	
	
	currentComponent="tHashOutput_6";
	
	

 



/**
 * [tHashOutput_6 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_5_SUBPROCESS_STATE", 1);
	}
	


public void tJava_6Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_6_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tJava_6 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_6", false);
		start_Hash.put("tJava_6", System.currentTimeMillis());
		
	
	currentComponent="tJava_6";
	
	
		int tos_count_tJava_6 = 0;
		


// Ajusta la lista de DAPLICADAS
if (((Integer)globalMap.get("tOracleInput_5_NB_LINE")) > 0){
	context.DAPLICADAS_LIST = (context.DAPLICADAS_LIST).substring(0, context.DAPLICADAS_LIST.length() - 1);
}




 



/**
 * [tJava_6 begin ] stop
 */
	
	/**
	 * [tJava_6 main ] start
	 */

	

	
	
	currentComponent="tJava_6";
	
	

 


	tos_count_tJava_6++;

/**
 * [tJava_6 main ] stop
 */
	
	/**
	 * [tJava_6 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_6";
	
	

 



/**
 * [tJava_6 process_data_begin ] stop
 */
	
	/**
	 * [tJava_6 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_6";
	
	

 



/**
 * [tJava_6 process_data_end ] stop
 */
	
	/**
	 * [tJava_6 end ] start
	 */

	

	
	
	currentComponent="tJava_6";
	
	

 

ok_Hash.put("tJava_6", true);
end_Hash.put("tJava_6", System.currentTimeMillis());

   			if (((Integer)globalMap.get("tOracleInput_5_NB_LINE")) > 0) {
   				
					if(execStat){
   	 					runStat.updateStatOnConnection("If4", 0, "true");
					}
				tHashInput_3Process(globalMap);
			}

			   
   				else{
					if(execStat){   
   	 					runStat.updateStatOnConnection("If4", 0, "false");
					}   	 
   				}



/**
 * [tJava_6 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tJava_6:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk4", 0, "ok");
								} 
							
							tJava_4Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_6 finally ] start
	 */

	

	
	
	currentComponent="tJava_6";
	
	

 



/**
 * [tJava_6 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_6_SUBPROCESS_STATE", 1);
	}
	


public static class out1Struct implements routines.system.IPersistableRow<out1Struct> {
    final static byte[] commonByteArrayLock_VAC_CONSOLIDADOS_VAC_RegistroVacunacion = new byte[0];
    static byte[] commonByteArray_VAC_CONSOLIDADOS_VAC_RegistroVacunacion = new byte[0];

	
			    public BigDecimal FILA;

				public BigDecimal getFILA () {
					return this.FILA;
				}

				public Boolean FILAIsNullable(){
				    return true;
				}
				public Boolean FILAIsKey(){
				    return false;
				}
				public Integer FILALength(){
				    return null;
				}
				public Integer FILAPrecision(){
				    return null;
				}
				public String FILADefault(){
				
					return null;
				
				}
				public String FILAComment(){
				
				    return "";
				
				}
				public String FILAPattern(){
				
					return "";
				
				}
				public String FILAOriginalDbColumnName(){
				
					return "FILA";
				
				}

				
			    public BigDecimal COLUMNA;

				public BigDecimal getCOLUMNA () {
					return this.COLUMNA;
				}

				public Boolean COLUMNAIsNullable(){
				    return false;
				}
				public Boolean COLUMNAIsKey(){
				    return false;
				}
				public Integer COLUMNALength(){
				    return 0;
				}
				public Integer COLUMNAPrecision(){
				    return 0;
				}
				public String COLUMNADefault(){
				
					return "";
				
				}
				public String COLUMNAComment(){
				
				    return "";
				
				}
				public String COLUMNAPattern(){
				
					return "";
				
				}
				public String COLUMNAOriginalDbColumnName(){
				
					return "COLUMNA";
				
				}

				
			    public String DOSIS;

				public String getDOSIS () {
					return this.DOSIS;
				}

				public Boolean DOSISIsNullable(){
				    return false;
				}
				public Boolean DOSISIsKey(){
				    return false;
				}
				public Integer DOSISLength(){
				    return 200;
				}
				public Integer DOSISPrecision(){
				    return 0;
				}
				public String DOSISDefault(){
				
					return null;
				
				}
				public String DOSISComment(){
				
				    return "";
				
				}
				public String DOSISPattern(){
				
					return "";
				
				}
				public String DOSISOriginalDbColumnName(){
				
					return "DOSIS";
				
				}

				
			    public String LOTE_BIOLOGICO;

				public String getLOTE_BIOLOGICO () {
					return this.LOTE_BIOLOGICO;
				}

				public Boolean LOTE_BIOLOGICOIsNullable(){
				    return false;
				}
				public Boolean LOTE_BIOLOGICOIsKey(){
				    return false;
				}
				public Integer LOTE_BIOLOGICOLength(){
				    return 1024;
				}
				public Integer LOTE_BIOLOGICOPrecision(){
				    return 0;
				}
				public String LOTE_BIOLOGICODefault(){
				
					return null;
				
				}
				public String LOTE_BIOLOGICOComment(){
				
				    return "";
				
				}
				public String LOTE_BIOLOGICOPattern(){
				
					return "";
				
				}
				public String LOTE_BIOLOGICOOriginalDbColumnName(){
				
					return "LOTE_BIOLOGICO";
				
				}

				
			    public String CALIBRE_JERINGA;

				public String getCALIBRE_JERINGA () {
					return this.CALIBRE_JERINGA;
				}

				public Boolean CALIBRE_JERINGAIsNullable(){
				    return false;
				}
				public Boolean CALIBRE_JERINGAIsKey(){
				    return false;
				}
				public Integer CALIBRE_JERINGALength(){
				    return 200;
				}
				public Integer CALIBRE_JERINGAPrecision(){
				    return 0;
				}
				public String CALIBRE_JERINGADefault(){
				
					return null;
				
				}
				public String CALIBRE_JERINGAComment(){
				
				    return "";
				
				}
				public String CALIBRE_JERINGAPattern(){
				
					return "";
				
				}
				public String CALIBRE_JERINGAOriginalDbColumnName(){
				
					return "CALIBRE_JERINGA";
				
				}

				
			    public String LOTE_JERINGA;

				public String getLOTE_JERINGA () {
					return this.LOTE_JERINGA;
				}

				public Boolean LOTE_JERINGAIsNullable(){
				    return false;
				}
				public Boolean LOTE_JERINGAIsKey(){
				    return false;
				}
				public Integer LOTE_JERINGALength(){
				    return 1024;
				}
				public Integer LOTE_JERINGAPrecision(){
				    return 0;
				}
				public String LOTE_JERINGADefault(){
				
					return null;
				
				}
				public String LOTE_JERINGAComment(){
				
				    return "";
				
				}
				public String LOTE_JERINGAPattern(){
				
					return "";
				
				}
				public String LOTE_JERINGAOriginalDbColumnName(){
				
					return "LOTE_JERINGA";
				
				}

				
			    public BigDecimal ACTUALIZACION;

				public BigDecimal getACTUALIZACION () {
					return this.ACTUALIZACION;
				}

				public Boolean ACTUALIZACIONIsNullable(){
				    return false;
				}
				public Boolean ACTUALIZACIONIsKey(){
				    return false;
				}
				public Integer ACTUALIZACIONLength(){
				    return 0;
				}
				public Integer ACTUALIZACIONPrecision(){
				    return null;
				}
				public String ACTUALIZACIONDefault(){
				
					return "";
				
				}
				public String ACTUALIZACIONComment(){
				
				    return "";
				
				}
				public String ACTUALIZACIONPattern(){
				
					return "";
				
				}
				public String ACTUALIZACIONOriginalDbColumnName(){
				
					return "ACTUALIZACION";
				
				}

				
			    public String LOTE_DILUYENTE;

				public String getLOTE_DILUYENTE () {
					return this.LOTE_DILUYENTE;
				}

				public Boolean LOTE_DILUYENTEIsNullable(){
				    return true;
				}
				public Boolean LOTE_DILUYENTEIsKey(){
				    return false;
				}
				public Integer LOTE_DILUYENTELength(){
				    return 1024;
				}
				public Integer LOTE_DILUYENTEPrecision(){
				    return 0;
				}
				public String LOTE_DILUYENTEDefault(){
				
					return null;
				
				}
				public String LOTE_DILUYENTEComment(){
				
				    return "";
				
				}
				public String LOTE_DILUYENTEPattern(){
				
					return "";
				
				}
				public String LOTE_DILUYENTEOriginalDbColumnName(){
				
					return "LOTE_DILUYENTE";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_VAC_CONSOLIDADOS_VAC_RegistroVacunacion.length) {
				if(length < 1024 && commonByteArray_VAC_CONSOLIDADOS_VAC_RegistroVacunacion.length == 0) {
   					commonByteArray_VAC_CONSOLIDADOS_VAC_RegistroVacunacion = new byte[1024];
				} else {
   					commonByteArray_VAC_CONSOLIDADOS_VAC_RegistroVacunacion = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_VAC_CONSOLIDADOS_VAC_RegistroVacunacion, 0, length);
			strReturn = new String(commonByteArray_VAC_CONSOLIDADOS_VAC_RegistroVacunacion, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_VAC_CONSOLIDADOS_VAC_RegistroVacunacion.length) {
				if(length < 1024 && commonByteArray_VAC_CONSOLIDADOS_VAC_RegistroVacunacion.length == 0) {
   					commonByteArray_VAC_CONSOLIDADOS_VAC_RegistroVacunacion = new byte[1024];
				} else {
   					commonByteArray_VAC_CONSOLIDADOS_VAC_RegistroVacunacion = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_VAC_CONSOLIDADOS_VAC_RegistroVacunacion, 0, length);
			strReturn = new String(commonByteArray_VAC_CONSOLIDADOS_VAC_RegistroVacunacion, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_VAC_CONSOLIDADOS_VAC_RegistroVacunacion) {

        	try {

        		int length = 0;
		
						this.FILA = (BigDecimal) dis.readObject();
					
						this.COLUMNA = (BigDecimal) dis.readObject();
					
					this.DOSIS = readString(dis);
					
					this.LOTE_BIOLOGICO = readString(dis);
					
					this.CALIBRE_JERINGA = readString(dis);
					
					this.LOTE_JERINGA = readString(dis);
					
						this.ACTUALIZACION = (BigDecimal) dis.readObject();
					
					this.LOTE_DILUYENTE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_VAC_CONSOLIDADOS_VAC_RegistroVacunacion) {

        	try {

        		int length = 0;
		
						this.FILA = (BigDecimal) dis.readObject();
					
						this.COLUMNA = (BigDecimal) dis.readObject();
					
					this.DOSIS = readString(dis);
					
					this.LOTE_BIOLOGICO = readString(dis);
					
					this.CALIBRE_JERINGA = readString(dis);
					
					this.LOTE_JERINGA = readString(dis);
					
						this.ACTUALIZACION = (BigDecimal) dis.readObject();
					
					this.LOTE_DILUYENTE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.FILA);
					
					// BigDecimal
				
       			    	dos.writeObject(this.COLUMNA);
					
					// String
				
						writeString(this.DOSIS,dos);
					
					// String
				
						writeString(this.LOTE_BIOLOGICO,dos);
					
					// String
				
						writeString(this.CALIBRE_JERINGA,dos);
					
					// String
				
						writeString(this.LOTE_JERINGA,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ACTUALIZACION);
					
					// String
				
						writeString(this.LOTE_DILUYENTE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.FILA);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.COLUMNA);
					
					// String
				
						writeString(this.DOSIS,dos);
					
					// String
				
						writeString(this.LOTE_BIOLOGICO,dos);
					
					// String
				
						writeString(this.CALIBRE_JERINGA,dos);
					
					// String
				
						writeString(this.LOTE_JERINGA,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ACTUALIZACION);
					
					// String
				
						writeString(this.LOTE_DILUYENTE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("FILA="+String.valueOf(FILA));
		sb.append(",COLUMNA="+String.valueOf(COLUMNA));
		sb.append(",DOSIS="+DOSIS);
		sb.append(",LOTE_BIOLOGICO="+LOTE_BIOLOGICO);
		sb.append(",CALIBRE_JERINGA="+CALIBRE_JERINGA);
		sb.append(",LOTE_JERINGA="+LOTE_JERINGA);
		sb.append(",ACTUALIZACION="+String.valueOf(ACTUALIZACION));
		sb.append(",LOTE_DILUYENTE="+LOTE_DILUYENTE);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(out1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class aplicadasStruct implements routines.system.IPersistableRow<aplicadasStruct> {
    final static byte[] commonByteArrayLock_VAC_CONSOLIDADOS_VAC_RegistroVacunacion = new byte[0];
    static byte[] commonByteArray_VAC_CONSOLIDADOS_VAC_RegistroVacunacion = new byte[0];

	
			    public BigDecimal ORDEN;

				public BigDecimal getORDEN () {
					return this.ORDEN;
				}

				public Boolean ORDENIsNullable(){
				    return true;
				}
				public Boolean ORDENIsKey(){
				    return false;
				}
				public Integer ORDENLength(){
				    return null;
				}
				public Integer ORDENPrecision(){
				    return null;
				}
				public String ORDENDefault(){
				
					return "";
				
				}
				public String ORDENComment(){
				
				    return "";
				
				}
				public String ORDENPattern(){
				
					return "";
				
				}
				public String ORDENOriginalDbColumnName(){
				
					return "ORDEN";
				
				}

				
			    public BigDecimal DAPLICADAS_ID;

				public BigDecimal getDAPLICADAS_ID () {
					return this.DAPLICADAS_ID;
				}

				public Boolean DAPLICADAS_IDIsNullable(){
				    return true;
				}
				public Boolean DAPLICADAS_IDIsKey(){
				    return false;
				}
				public Integer DAPLICADAS_IDLength(){
				    return null;
				}
				public Integer DAPLICADAS_IDPrecision(){
				    return null;
				}
				public String DAPLICADAS_IDDefault(){
				
					return null;
				
				}
				public String DAPLICADAS_IDComment(){
				
				    return "";
				
				}
				public String DAPLICADAS_IDPattern(){
				
					return "";
				
				}
				public String DAPLICADAS_IDOriginalDbColumnName(){
				
					return "DAPLICADAS_ID";
				
				}

				



    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_VAC_CONSOLIDADOS_VAC_RegistroVacunacion) {

        	try {

        		int length = 0;
		
						this.ORDEN = (BigDecimal) dis.readObject();
					
						this.DAPLICADAS_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_VAC_CONSOLIDADOS_VAC_RegistroVacunacion) {

        	try {

        		int length = 0;
		
						this.ORDEN = (BigDecimal) dis.readObject();
					
						this.DAPLICADAS_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.ORDEN);
					
					// BigDecimal
				
       			    	dos.writeObject(this.DAPLICADAS_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ORDEN);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.DAPLICADAS_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ORDEN="+String.valueOf(ORDEN));
		sb.append(",DAPLICADAS_ID="+String.valueOf(DAPLICADAS_ID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(aplicadasStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row5Struct implements routines.system.IPersistableRow<row5Struct> {
    final static byte[] commonByteArrayLock_VAC_CONSOLIDADOS_VAC_RegistroVacunacion = new byte[0];
    static byte[] commonByteArray_VAC_CONSOLIDADOS_VAC_RegistroVacunacion = new byte[0];

	
			    public BigDecimal ORDEN;

				public BigDecimal getORDEN () {
					return this.ORDEN;
				}

				public Boolean ORDENIsNullable(){
				    return true;
				}
				public Boolean ORDENIsKey(){
				    return false;
				}
				public Integer ORDENLength(){
				    return null;
				}
				public Integer ORDENPrecision(){
				    return null;
				}
				public String ORDENDefault(){
				
					return "";
				
				}
				public String ORDENComment(){
				
				    return "";
				
				}
				public String ORDENPattern(){
				
					return "";
				
				}
				public String ORDENOriginalDbColumnName(){
				
					return "ORDEN";
				
				}

				
			    public String FECHA_REGISTRO;

				public String getFECHA_REGISTRO () {
					return this.FECHA_REGISTRO;
				}

				public Boolean FECHA_REGISTROIsNullable(){
				    return true;
				}
				public Boolean FECHA_REGISTROIsKey(){
				    return false;
				}
				public Integer FECHA_REGISTROLength(){
				    return null;
				}
				public Integer FECHA_REGISTROPrecision(){
				    return null;
				}
				public String FECHA_REGISTRODefault(){
				
					return null;
				
				}
				public String FECHA_REGISTROComment(){
				
				    return "";
				
				}
				public String FECHA_REGISTROPattern(){
				
					return "";
				
				}
				public String FECHA_REGISTROOriginalDbColumnName(){
				
					return "FECHA_REGISTRO";
				
				}

				
			    public String FECHA_APLICACION;

				public String getFECHA_APLICACION () {
					return this.FECHA_APLICACION;
				}

				public Boolean FECHA_APLICACIONIsNullable(){
				    return true;
				}
				public Boolean FECHA_APLICACIONIsKey(){
				    return false;
				}
				public Integer FECHA_APLICACIONLength(){
				    return null;
				}
				public Integer FECHA_APLICACIONPrecision(){
				    return null;
				}
				public String FECHA_APLICACIONDefault(){
				
					return null;
				
				}
				public String FECHA_APLICACIONComment(){
				
				    return "";
				
				}
				public String FECHA_APLICACIONPattern(){
				
					return "";
				
				}
				public String FECHA_APLICACIONOriginalDbColumnName(){
				
					return "FECHA_APLICACION";
				
				}

				
			    public String TIPO_DOCUMENTO;

				public String getTIPO_DOCUMENTO () {
					return this.TIPO_DOCUMENTO;
				}

				public Boolean TIPO_DOCUMENTOIsNullable(){
				    return false;
				}
				public Boolean TIPO_DOCUMENTOIsKey(){
				    return false;
				}
				public Integer TIPO_DOCUMENTOLength(){
				    return null;
				}
				public Integer TIPO_DOCUMENTOPrecision(){
				    return null;
				}
				public String TIPO_DOCUMENTODefault(){
				
					return null;
				
				}
				public String TIPO_DOCUMENTOComment(){
				
				    return "";
				
				}
				public String TIPO_DOCUMENTOPattern(){
				
					return "";
				
				}
				public String TIPO_DOCUMENTOOriginalDbColumnName(){
				
					return "TIPO_DOCUMENTO";
				
				}

				
			    public String NUMERO_DOCUMENTO;

				public String getNUMERO_DOCUMENTO () {
					return this.NUMERO_DOCUMENTO;
				}

				public Boolean NUMERO_DOCUMENTOIsNullable(){
				    return false;
				}
				public Boolean NUMERO_DOCUMENTOIsKey(){
				    return false;
				}
				public Integer NUMERO_DOCUMENTOLength(){
				    return null;
				}
				public Integer NUMERO_DOCUMENTOPrecision(){
				    return null;
				}
				public String NUMERO_DOCUMENTODefault(){
				
					return null;
				
				}
				public String NUMERO_DOCUMENTOComment(){
				
				    return "";
				
				}
				public String NUMERO_DOCUMENTOPattern(){
				
					return "";
				
				}
				public String NUMERO_DOCUMENTOOriginalDbColumnName(){
				
					return "NUMERO_DOCUMENTO";
				
				}

				
			    public String FECHA_NACIMIENTO;

				public String getFECHA_NACIMIENTO () {
					return this.FECHA_NACIMIENTO;
				}

				public Boolean FECHA_NACIMIENTOIsNullable(){
				    return true;
				}
				public Boolean FECHA_NACIMIENTOIsKey(){
				    return false;
				}
				public Integer FECHA_NACIMIENTOLength(){
				    return null;
				}
				public Integer FECHA_NACIMIENTOPrecision(){
				    return null;
				}
				public String FECHA_NACIMIENTODefault(){
				
					return null;
				
				}
				public String FECHA_NACIMIENTOComment(){
				
				    return "";
				
				}
				public String FECHA_NACIMIENTOPattern(){
				
					return "";
				
				}
				public String FECHA_NACIMIENTOOriginalDbColumnName(){
				
					return "FECHA_NACIMIENTO";
				
				}

				
			    public String TIPO_EDAD;

				public String getTIPO_EDAD () {
					return this.TIPO_EDAD;
				}

				public Boolean TIPO_EDADIsNullable(){
				    return true;
				}
				public Boolean TIPO_EDADIsKey(){
				    return false;
				}
				public Integer TIPO_EDADLength(){
				    return null;
				}
				public Integer TIPO_EDADPrecision(){
				    return null;
				}
				public String TIPO_EDADDefault(){
				
					return null;
				
				}
				public String TIPO_EDADComment(){
				
				    return "";
				
				}
				public String TIPO_EDADPattern(){
				
					return "";
				
				}
				public String TIPO_EDADOriginalDbColumnName(){
				
					return "TIPO_EDAD";
				
				}

				
			    public BigDecimal EDAD;

				public BigDecimal getEDAD () {
					return this.EDAD;
				}

				public Boolean EDADIsNullable(){
				    return true;
				}
				public Boolean EDADIsKey(){
				    return false;
				}
				public Integer EDADLength(){
				    return null;
				}
				public Integer EDADPrecision(){
				    return null;
				}
				public String EDADDefault(){
				
					return "";
				
				}
				public String EDADComment(){
				
				    return "";
				
				}
				public String EDADPattern(){
				
					return "";
				
				}
				public String EDADOriginalDbColumnName(){
				
					return "EDAD";
				
				}

				
			    public String SEXO;

				public String getSEXO () {
					return this.SEXO;
				}

				public Boolean SEXOIsNullable(){
				    return false;
				}
				public Boolean SEXOIsKey(){
				    return false;
				}
				public Integer SEXOLength(){
				    return null;
				}
				public Integer SEXOPrecision(){
				    return null;
				}
				public String SEXODefault(){
				
					return null;
				
				}
				public String SEXOComment(){
				
				    return "";
				
				}
				public String SEXOPattern(){
				
					return "";
				
				}
				public String SEXOOriginalDbColumnName(){
				
					return "SEXO";
				
				}

				
			    public String PRIMER_NOMBRE;

				public String getPRIMER_NOMBRE () {
					return this.PRIMER_NOMBRE;
				}

				public Boolean PRIMER_NOMBREIsNullable(){
				    return true;
				}
				public Boolean PRIMER_NOMBREIsKey(){
				    return false;
				}
				public Integer PRIMER_NOMBRELength(){
				    return null;
				}
				public Integer PRIMER_NOMBREPrecision(){
				    return null;
				}
				public String PRIMER_NOMBREDefault(){
				
					return null;
				
				}
				public String PRIMER_NOMBREComment(){
				
				    return "";
				
				}
				public String PRIMER_NOMBREPattern(){
				
					return "";
				
				}
				public String PRIMER_NOMBREOriginalDbColumnName(){
				
					return "PRIMER_NOMBRE";
				
				}

				
			    public String SEGUNDO_NOMBRE;

				public String getSEGUNDO_NOMBRE () {
					return this.SEGUNDO_NOMBRE;
				}

				public Boolean SEGUNDO_NOMBREIsNullable(){
				    return true;
				}
				public Boolean SEGUNDO_NOMBREIsKey(){
				    return false;
				}
				public Integer SEGUNDO_NOMBRELength(){
				    return null;
				}
				public Integer SEGUNDO_NOMBREPrecision(){
				    return null;
				}
				public String SEGUNDO_NOMBREDefault(){
				
					return null;
				
				}
				public String SEGUNDO_NOMBREComment(){
				
				    return "";
				
				}
				public String SEGUNDO_NOMBREPattern(){
				
					return "";
				
				}
				public String SEGUNDO_NOMBREOriginalDbColumnName(){
				
					return "SEGUNDO_NOMBRE";
				
				}

				
			    public String PRIMER_APELLIDO;

				public String getPRIMER_APELLIDO () {
					return this.PRIMER_APELLIDO;
				}

				public Boolean PRIMER_APELLIDOIsNullable(){
				    return true;
				}
				public Boolean PRIMER_APELLIDOIsKey(){
				    return false;
				}
				public Integer PRIMER_APELLIDOLength(){
				    return null;
				}
				public Integer PRIMER_APELLIDOPrecision(){
				    return null;
				}
				public String PRIMER_APELLIDODefault(){
				
					return null;
				
				}
				public String PRIMER_APELLIDOComment(){
				
				    return "";
				
				}
				public String PRIMER_APELLIDOPattern(){
				
					return "";
				
				}
				public String PRIMER_APELLIDOOriginalDbColumnName(){
				
					return "PRIMER_APELLIDO";
				
				}

				
			    public String SEGUNDO_APELLIDO;

				public String getSEGUNDO_APELLIDO () {
					return this.SEGUNDO_APELLIDO;
				}

				public Boolean SEGUNDO_APELLIDOIsNullable(){
				    return true;
				}
				public Boolean SEGUNDO_APELLIDOIsKey(){
				    return false;
				}
				public Integer SEGUNDO_APELLIDOLength(){
				    return null;
				}
				public Integer SEGUNDO_APELLIDOPrecision(){
				    return null;
				}
				public String SEGUNDO_APELLIDODefault(){
				
					return "";
				
				}
				public String SEGUNDO_APELLIDOComment(){
				
				    return "";
				
				}
				public String SEGUNDO_APELLIDOPattern(){
				
					return "";
				
				}
				public String SEGUNDO_APELLIDOOriginalDbColumnName(){
				
					return "SEGUNDO_APELLIDO";
				
				}

				
			    public String REGIMEN;

				public String getREGIMEN () {
					return this.REGIMEN;
				}

				public Boolean REGIMENIsNullable(){
				    return true;
				}
				public Boolean REGIMENIsKey(){
				    return false;
				}
				public Integer REGIMENLength(){
				    return null;
				}
				public Integer REGIMENPrecision(){
				    return null;
				}
				public String REGIMENDefault(){
				
					return "";
				
				}
				public String REGIMENComment(){
				
				    return "";
				
				}
				public String REGIMENPattern(){
				
					return "";
				
				}
				public String REGIMENOriginalDbColumnName(){
				
					return "REGIMEN";
				
				}

				
			    public String EPS;

				public String getEPS () {
					return this.EPS;
				}

				public Boolean EPSIsNullable(){
				    return true;
				}
				public Boolean EPSIsKey(){
				    return false;
				}
				public Integer EPSLength(){
				    return null;
				}
				public Integer EPSPrecision(){
				    return null;
				}
				public String EPSDefault(){
				
					return "";
				
				}
				public String EPSComment(){
				
				    return "";
				
				}
				public String EPSPattern(){
				
					return "";
				
				}
				public String EPSOriginalDbColumnName(){
				
					return "EPS";
				
				}

				
			    public String GRADO;

				public String getGRADO () {
					return this.GRADO;
				}

				public Boolean GRADOIsNullable(){
				    return true;
				}
				public Boolean GRADOIsKey(){
				    return false;
				}
				public Integer GRADOLength(){
				    return null;
				}
				public Integer GRADOPrecision(){
				    return null;
				}
				public String GRADODefault(){
				
					return "";
				
				}
				public String GRADOComment(){
				
				    return "";
				
				}
				public String GRADOPattern(){
				
					return "";
				
				}
				public String GRADOOriginalDbColumnName(){
				
					return "GRADO";
				
				}

				
			    public String TIPO_AFILIACION;

				public String getTIPO_AFILIACION () {
					return this.TIPO_AFILIACION;
				}

				public Boolean TIPO_AFILIACIONIsNullable(){
				    return true;
				}
				public Boolean TIPO_AFILIACIONIsKey(){
				    return false;
				}
				public Integer TIPO_AFILIACIONLength(){
				    return null;
				}
				public Integer TIPO_AFILIACIONPrecision(){
				    return null;
				}
				public String TIPO_AFILIACIONDefault(){
				
					return "";
				
				}
				public String TIPO_AFILIACIONComment(){
				
				    return "";
				
				}
				public String TIPO_AFILIACIONPattern(){
				
					return "";
				
				}
				public String TIPO_AFILIACIONOriginalDbColumnName(){
				
					return "TIPO_AFILIACION";
				
				}

				
			    public String FUERZA_ADSCRIPCION;

				public String getFUERZA_ADSCRIPCION () {
					return this.FUERZA_ADSCRIPCION;
				}

				public Boolean FUERZA_ADSCRIPCIONIsNullable(){
				    return true;
				}
				public Boolean FUERZA_ADSCRIPCIONIsKey(){
				    return false;
				}
				public Integer FUERZA_ADSCRIPCIONLength(){
				    return null;
				}
				public Integer FUERZA_ADSCRIPCIONPrecision(){
				    return null;
				}
				public String FUERZA_ADSCRIPCIONDefault(){
				
					return "";
				
				}
				public String FUERZA_ADSCRIPCIONComment(){
				
				    return "";
				
				}
				public String FUERZA_ADSCRIPCIONPattern(){
				
					return "";
				
				}
				public String FUERZA_ADSCRIPCIONOriginalDbColumnName(){
				
					return "FUERZA_ADSCRIPCION";
				
				}

				
			    public String ESM_ADSCRIPCION;

				public String getESM_ADSCRIPCION () {
					return this.ESM_ADSCRIPCION;
				}

				public Boolean ESM_ADSCRIPCIONIsNullable(){
				    return true;
				}
				public Boolean ESM_ADSCRIPCIONIsKey(){
				    return false;
				}
				public Integer ESM_ADSCRIPCIONLength(){
				    return null;
				}
				public Integer ESM_ADSCRIPCIONPrecision(){
				    return null;
				}
				public String ESM_ADSCRIPCIONDefault(){
				
					return "";
				
				}
				public String ESM_ADSCRIPCIONComment(){
				
				    return "";
				
				}
				public String ESM_ADSCRIPCIONPattern(){
				
					return "";
				
				}
				public String ESM_ADSCRIPCIONOriginalDbColumnName(){
				
					return "ESM_ADSCRIPCION";
				
				}

				
			    public String FUERZA;

				public String getFUERZA () {
					return this.FUERZA;
				}

				public Boolean FUERZAIsNullable(){
				    return true;
				}
				public Boolean FUERZAIsKey(){
				    return false;
				}
				public Integer FUERZALength(){
				    return null;
				}
				public Integer FUERZAPrecision(){
				    return null;
				}
				public String FUERZADefault(){
				
					return "";
				
				}
				public String FUERZAComment(){
				
				    return "";
				
				}
				public String FUERZAPattern(){
				
					return "";
				
				}
				public String FUERZAOriginalDbColumnName(){
				
					return "FUERZA";
				
				}

				
			    public String UORG;

				public String getUORG () {
					return this.UORG;
				}

				public Boolean UORGIsNullable(){
				    return false;
				}
				public Boolean UORGIsKey(){
				    return false;
				}
				public Integer UORGLength(){
				    return null;
				}
				public Integer UORGPrecision(){
				    return null;
				}
				public String UORGDefault(){
				
					return "";
				
				}
				public String UORGComment(){
				
				    return "";
				
				}
				public String UORGPattern(){
				
					return "";
				
				}
				public String UORGOriginalDbColumnName(){
				
					return "UORG";
				
				}

				
			    public String USUARIO;

				public String getUSUARIO () {
					return this.USUARIO;
				}

				public Boolean USUARIOIsNullable(){
				    return true;
				}
				public Boolean USUARIOIsKey(){
				    return false;
				}
				public Integer USUARIOLength(){
				    return null;
				}
				public Integer USUARIOPrecision(){
				    return null;
				}
				public String USUARIODefault(){
				
					return "";
				
				}
				public String USUARIOComment(){
				
				    return "";
				
				}
				public String USUARIOPattern(){
				
					return "";
				
				}
				public String USUARIOOriginalDbColumnName(){
				
					return "USUARIO";
				
				}

				
			    public String PUNTO_VACUNADOR;

				public String getPUNTO_VACUNADOR () {
					return this.PUNTO_VACUNADOR;
				}

				public Boolean PUNTO_VACUNADORIsNullable(){
				    return true;
				}
				public Boolean PUNTO_VACUNADORIsKey(){
				    return false;
				}
				public Integer PUNTO_VACUNADORLength(){
				    return null;
				}
				public Integer PUNTO_VACUNADORPrecision(){
				    return null;
				}
				public String PUNTO_VACUNADORDefault(){
				
					return "";
				
				}
				public String PUNTO_VACUNADORComment(){
				
				    return "";
				
				}
				public String PUNTO_VACUNADORPattern(){
				
					return "";
				
				}
				public String PUNTO_VACUNADOROriginalDbColumnName(){
				
					return "PUNTO_VACUNADOR";
				
				}

				
			    public String NOMBRE_VACUNADOR;

				public String getNOMBRE_VACUNADOR () {
					return this.NOMBRE_VACUNADOR;
				}

				public Boolean NOMBRE_VACUNADORIsNullable(){
				    return true;
				}
				public Boolean NOMBRE_VACUNADORIsKey(){
				    return false;
				}
				public Integer NOMBRE_VACUNADORLength(){
				    return null;
				}
				public Integer NOMBRE_VACUNADORPrecision(){
				    return null;
				}
				public String NOMBRE_VACUNADORDefault(){
				
					return "";
				
				}
				public String NOMBRE_VACUNADORComment(){
				
				    return "";
				
				}
				public String NOMBRE_VACUNADORPattern(){
				
					return "";
				
				}
				public String NOMBRE_VACUNADOROriginalDbColumnName(){
				
					return "NOMBRE_VACUNADOR";
				
				}

				
			    public String DEPARTAMENTO_RESIDENCIA;

				public String getDEPARTAMENTO_RESIDENCIA () {
					return this.DEPARTAMENTO_RESIDENCIA;
				}

				public Boolean DEPARTAMENTO_RESIDENCIAIsNullable(){
				    return true;
				}
				public Boolean DEPARTAMENTO_RESIDENCIAIsKey(){
				    return false;
				}
				public Integer DEPARTAMENTO_RESIDENCIALength(){
				    return null;
				}
				public Integer DEPARTAMENTO_RESIDENCIAPrecision(){
				    return null;
				}
				public String DEPARTAMENTO_RESIDENCIADefault(){
				
					return "";
				
				}
				public String DEPARTAMENTO_RESIDENCIAComment(){
				
				    return "";
				
				}
				public String DEPARTAMENTO_RESIDENCIAPattern(){
				
					return "";
				
				}
				public String DEPARTAMENTO_RESIDENCIAOriginalDbColumnName(){
				
					return "DEPARTAMENTO_RESIDENCIA";
				
				}

				
			    public String MUNICIPIO_RESIDENCIA;

				public String getMUNICIPIO_RESIDENCIA () {
					return this.MUNICIPIO_RESIDENCIA;
				}

				public Boolean MUNICIPIO_RESIDENCIAIsNullable(){
				    return true;
				}
				public Boolean MUNICIPIO_RESIDENCIAIsKey(){
				    return false;
				}
				public Integer MUNICIPIO_RESIDENCIALength(){
				    return null;
				}
				public Integer MUNICIPIO_RESIDENCIAPrecision(){
				    return null;
				}
				public String MUNICIPIO_RESIDENCIADefault(){
				
					return "";
				
				}
				public String MUNICIPIO_RESIDENCIAComment(){
				
				    return "";
				
				}
				public String MUNICIPIO_RESIDENCIAPattern(){
				
					return "";
				
				}
				public String MUNICIPIO_RESIDENCIAOriginalDbColumnName(){
				
					return "MUNICIPIO_RESIDENCIA";
				
				}

				
			    public String BARRIO;

				public String getBARRIO () {
					return this.BARRIO;
				}

				public Boolean BARRIOIsNullable(){
				    return true;
				}
				public Boolean BARRIOIsKey(){
				    return false;
				}
				public Integer BARRIOLength(){
				    return null;
				}
				public Integer BARRIOPrecision(){
				    return null;
				}
				public String BARRIODefault(){
				
					return "";
				
				}
				public String BARRIOComment(){
				
				    return "";
				
				}
				public String BARRIOPattern(){
				
					return "";
				
				}
				public String BARRIOOriginalDbColumnName(){
				
					return "BARRIO";
				
				}

				
			    public String DIRECCION;

				public String getDIRECCION () {
					return this.DIRECCION;
				}

				public Boolean DIRECCIONIsNullable(){
				    return true;
				}
				public Boolean DIRECCIONIsKey(){
				    return false;
				}
				public Integer DIRECCIONLength(){
				    return null;
				}
				public Integer DIRECCIONPrecision(){
				    return null;
				}
				public String DIRECCIONDefault(){
				
					return "";
				
				}
				public String DIRECCIONComment(){
				
				    return "";
				
				}
				public String DIRECCIONPattern(){
				
					return "";
				
				}
				public String DIRECCIONOriginalDbColumnName(){
				
					return "DIRECCION";
				
				}

				
			    public String TELEFONO;

				public String getTELEFONO () {
					return this.TELEFONO;
				}

				public Boolean TELEFONOIsNullable(){
				    return true;
				}
				public Boolean TELEFONOIsKey(){
				    return false;
				}
				public Integer TELEFONOLength(){
				    return null;
				}
				public Integer TELEFONOPrecision(){
				    return null;
				}
				public String TELEFONODefault(){
				
					return "";
				
				}
				public String TELEFONOComment(){
				
				    return "";
				
				}
				public String TELEFONOPattern(){
				
					return "";
				
				}
				public String TELEFONOOriginalDbColumnName(){
				
					return "TELEFONO";
				
				}

				
			    public String GRUPO_ETNICO;

				public String getGRUPO_ETNICO () {
					return this.GRUPO_ETNICO;
				}

				public Boolean GRUPO_ETNICOIsNullable(){
				    return true;
				}
				public Boolean GRUPO_ETNICOIsKey(){
				    return false;
				}
				public Integer GRUPO_ETNICOLength(){
				    return null;
				}
				public Integer GRUPO_ETNICOPrecision(){
				    return null;
				}
				public String GRUPO_ETNICODefault(){
				
					return "";
				
				}
				public String GRUPO_ETNICOComment(){
				
				    return "";
				
				}
				public String GRUPO_ETNICOPattern(){
				
					return "";
				
				}
				public String GRUPO_ETNICOOriginalDbColumnName(){
				
					return "GRUPO_ETNICO";
				
				}

				
			    public String DESPLAZADA;

				public String getDESPLAZADA () {
					return this.DESPLAZADA;
				}

				public Boolean DESPLAZADAIsNullable(){
				    return true;
				}
				public Boolean DESPLAZADAIsKey(){
				    return false;
				}
				public Integer DESPLAZADALength(){
				    return null;
				}
				public Integer DESPLAZADAPrecision(){
				    return null;
				}
				public String DESPLAZADADefault(){
				
					return "";
				
				}
				public String DESPLAZADAComment(){
				
				    return "";
				
				}
				public String DESPLAZADAPattern(){
				
					return "";
				
				}
				public String DESPLAZADAOriginalDbColumnName(){
				
					return "DESPLAZADA";
				
				}

				
			    public String DISCAPACITADA;

				public String getDISCAPACITADA () {
					return this.DISCAPACITADA;
				}

				public Boolean DISCAPACITADAIsNullable(){
				    return true;
				}
				public Boolean DISCAPACITADAIsKey(){
				    return false;
				}
				public Integer DISCAPACITADALength(){
				    return null;
				}
				public Integer DISCAPACITADAPrecision(){
				    return null;
				}
				public String DISCAPACITADADefault(){
				
					return "";
				
				}
				public String DISCAPACITADAComment(){
				
				    return "";
				
				}
				public String DISCAPACITADAPattern(){
				
					return "";
				
				}
				public String DISCAPACITADAOriginalDbColumnName(){
				
					return "DISCAPACITADA";
				
				}

				
			    public String VICTIMA;

				public String getVICTIMA () {
					return this.VICTIMA;
				}

				public Boolean VICTIMAIsNullable(){
				    return true;
				}
				public Boolean VICTIMAIsKey(){
				    return false;
				}
				public Integer VICTIMALength(){
				    return null;
				}
				public Integer VICTIMAPrecision(){
				    return null;
				}
				public String VICTIMADefault(){
				
					return "";
				
				}
				public String VICTIMAComment(){
				
				    return "";
				
				}
				public String VICTIMAPattern(){
				
					return "";
				
				}
				public String VICTIMAOriginalDbColumnName(){
				
					return "VICTIMA";
				
				}

				
			    public String ZVEREDAL;

				public String getZVEREDAL () {
					return this.ZVEREDAL;
				}

				public Boolean ZVEREDALIsNullable(){
				    return true;
				}
				public Boolean ZVEREDALIsKey(){
				    return false;
				}
				public Integer ZVEREDALLength(){
				    return null;
				}
				public Integer ZVEREDALPrecision(){
				    return null;
				}
				public String ZVEREDALDefault(){
				
					return "";
				
				}
				public String ZVEREDALComment(){
				
				    return "";
				
				}
				public String ZVEREDALPattern(){
				
					return "";
				
				}
				public String ZVEREDALOriginalDbColumnName(){
				
					return "ZVEREDAL";
				
				}

				
			    public String PARENTESCO;

				public String getPARENTESCO () {
					return this.PARENTESCO;
				}

				public Boolean PARENTESCOIsNullable(){
				    return true;
				}
				public Boolean PARENTESCOIsKey(){
				    return false;
				}
				public Integer PARENTESCOLength(){
				    return null;
				}
				public Integer PARENTESCOPrecision(){
				    return null;
				}
				public String PARENTESCODefault(){
				
					return "";
				
				}
				public String PARENTESCOComment(){
				
				    return "";
				
				}
				public String PARENTESCOPattern(){
				
					return "";
				
				}
				public String PARENTESCOOriginalDbColumnName(){
				
					return "PARENTESCO";
				
				}

				
			    public String TIPO_DOCUMENTO_COTIZANTE;

				public String getTIPO_DOCUMENTO_COTIZANTE () {
					return this.TIPO_DOCUMENTO_COTIZANTE;
				}

				public Boolean TIPO_DOCUMENTO_COTIZANTEIsNullable(){
				    return true;
				}
				public Boolean TIPO_DOCUMENTO_COTIZANTEIsKey(){
				    return false;
				}
				public Integer TIPO_DOCUMENTO_COTIZANTELength(){
				    return null;
				}
				public Integer TIPO_DOCUMENTO_COTIZANTEPrecision(){
				    return null;
				}
				public String TIPO_DOCUMENTO_COTIZANTEDefault(){
				
					return "";
				
				}
				public String TIPO_DOCUMENTO_COTIZANTEComment(){
				
				    return "";
				
				}
				public String TIPO_DOCUMENTO_COTIZANTEPattern(){
				
					return "";
				
				}
				public String TIPO_DOCUMENTO_COTIZANTEOriginalDbColumnName(){
				
					return "TIPO_DOCUMENTO_COTIZANTE";
				
				}

				
			    public String NUMERO_DOCUMENTO_COTIZANTE;

				public String getNUMERO_DOCUMENTO_COTIZANTE () {
					return this.NUMERO_DOCUMENTO_COTIZANTE;
				}

				public Boolean NUMERO_DOCUMENTO_COTIZANTEIsNullable(){
				    return true;
				}
				public Boolean NUMERO_DOCUMENTO_COTIZANTEIsKey(){
				    return false;
				}
				public Integer NUMERO_DOCUMENTO_COTIZANTELength(){
				    return null;
				}
				public Integer NUMERO_DOCUMENTO_COTIZANTEPrecision(){
				    return null;
				}
				public String NUMERO_DOCUMENTO_COTIZANTEDefault(){
				
					return "";
				
				}
				public String NUMERO_DOCUMENTO_COTIZANTEComment(){
				
				    return "";
				
				}
				public String NUMERO_DOCUMENTO_COTIZANTEPattern(){
				
					return "";
				
				}
				public String NUMERO_DOCUMENTO_COTIZANTEOriginalDbColumnName(){
				
					return "NUMERO_DOCUMENTO_COTIZANTE";
				
				}

				
			    public String PRIMER_NOMBRE_COTIZANTE;

				public String getPRIMER_NOMBRE_COTIZANTE () {
					return this.PRIMER_NOMBRE_COTIZANTE;
				}

				public Boolean PRIMER_NOMBRE_COTIZANTEIsNullable(){
				    return true;
				}
				public Boolean PRIMER_NOMBRE_COTIZANTEIsKey(){
				    return false;
				}
				public Integer PRIMER_NOMBRE_COTIZANTELength(){
				    return null;
				}
				public Integer PRIMER_NOMBRE_COTIZANTEPrecision(){
				    return null;
				}
				public String PRIMER_NOMBRE_COTIZANTEDefault(){
				
					return "";
				
				}
				public String PRIMER_NOMBRE_COTIZANTEComment(){
				
				    return "";
				
				}
				public String PRIMER_NOMBRE_COTIZANTEPattern(){
				
					return "";
				
				}
				public String PRIMER_NOMBRE_COTIZANTEOriginalDbColumnName(){
				
					return "PRIMER_NOMBRE_COTIZANTE";
				
				}

				
			    public String SEGUNDO_NOMBRE_COTIZANTE;

				public String getSEGUNDO_NOMBRE_COTIZANTE () {
					return this.SEGUNDO_NOMBRE_COTIZANTE;
				}

				public Boolean SEGUNDO_NOMBRE_COTIZANTEIsNullable(){
				    return true;
				}
				public Boolean SEGUNDO_NOMBRE_COTIZANTEIsKey(){
				    return false;
				}
				public Integer SEGUNDO_NOMBRE_COTIZANTELength(){
				    return null;
				}
				public Integer SEGUNDO_NOMBRE_COTIZANTEPrecision(){
				    return null;
				}
				public String SEGUNDO_NOMBRE_COTIZANTEDefault(){
				
					return "";
				
				}
				public String SEGUNDO_NOMBRE_COTIZANTEComment(){
				
				    return "";
				
				}
				public String SEGUNDO_NOMBRE_COTIZANTEPattern(){
				
					return "";
				
				}
				public String SEGUNDO_NOMBRE_COTIZANTEOriginalDbColumnName(){
				
					return "SEGUNDO_NOMBRE_COTIZANTE";
				
				}

				
			    public String PRIMER_APELLIDO_COTIZANTE;

				public String getPRIMER_APELLIDO_COTIZANTE () {
					return this.PRIMER_APELLIDO_COTIZANTE;
				}

				public Boolean PRIMER_APELLIDO_COTIZANTEIsNullable(){
				    return true;
				}
				public Boolean PRIMER_APELLIDO_COTIZANTEIsKey(){
				    return false;
				}
				public Integer PRIMER_APELLIDO_COTIZANTELength(){
				    return null;
				}
				public Integer PRIMER_APELLIDO_COTIZANTEPrecision(){
				    return null;
				}
				public String PRIMER_APELLIDO_COTIZANTEDefault(){
				
					return "";
				
				}
				public String PRIMER_APELLIDO_COTIZANTEComment(){
				
				    return "";
				
				}
				public String PRIMER_APELLIDO_COTIZANTEPattern(){
				
					return "";
				
				}
				public String PRIMER_APELLIDO_COTIZANTEOriginalDbColumnName(){
				
					return "PRIMER_APELLIDO_COTIZANTE";
				
				}

				
			    public String SEGUNDO_APELLIDO_COTIZANTE;

				public String getSEGUNDO_APELLIDO_COTIZANTE () {
					return this.SEGUNDO_APELLIDO_COTIZANTE;
				}

				public Boolean SEGUNDO_APELLIDO_COTIZANTEIsNullable(){
				    return true;
				}
				public Boolean SEGUNDO_APELLIDO_COTIZANTEIsKey(){
				    return false;
				}
				public Integer SEGUNDO_APELLIDO_COTIZANTELength(){
				    return null;
				}
				public Integer SEGUNDO_APELLIDO_COTIZANTEPrecision(){
				    return null;
				}
				public String SEGUNDO_APELLIDO_COTIZANTEDefault(){
				
					return "";
				
				}
				public String SEGUNDO_APELLIDO_COTIZANTEComment(){
				
				    return "";
				
				}
				public String SEGUNDO_APELLIDO_COTIZANTEPattern(){
				
					return "";
				
				}
				public String SEGUNDO_APELLIDO_COTIZANTEOriginalDbColumnName(){
				
					return "SEGUNDO_APELLIDO_COTIZANTE";
				
				}

				
			    public String GRADO_COTIZANTE;

				public String getGRADO_COTIZANTE () {
					return this.GRADO_COTIZANTE;
				}

				public Boolean GRADO_COTIZANTEIsNullable(){
				    return true;
				}
				public Boolean GRADO_COTIZANTEIsKey(){
				    return false;
				}
				public Integer GRADO_COTIZANTELength(){
				    return null;
				}
				public Integer GRADO_COTIZANTEPrecision(){
				    return null;
				}
				public String GRADO_COTIZANTEDefault(){
				
					return "";
				
				}
				public String GRADO_COTIZANTEComment(){
				
				    return "";
				
				}
				public String GRADO_COTIZANTEPattern(){
				
					return "";
				
				}
				public String GRADO_COTIZANTEOriginalDbColumnName(){
				
					return "GRADO_COTIZANTE";
				
				}

				
			    public String ACOM_TDOCUMENTO;

				public String getACOM_TDOCUMENTO () {
					return this.ACOM_TDOCUMENTO;
				}

				public Boolean ACOM_TDOCUMENTOIsNullable(){
				    return true;
				}
				public Boolean ACOM_TDOCUMENTOIsKey(){
				    return false;
				}
				public Integer ACOM_TDOCUMENTOLength(){
				    return null;
				}
				public Integer ACOM_TDOCUMENTOPrecision(){
				    return null;
				}
				public String ACOM_TDOCUMENTODefault(){
				
					return "";
				
				}
				public String ACOM_TDOCUMENTOComment(){
				
				    return "";
				
				}
				public String ACOM_TDOCUMENTOPattern(){
				
					return "";
				
				}
				public String ACOM_TDOCUMENTOOriginalDbColumnName(){
				
					return "ACOM_TDOCUMENTO";
				
				}

				
			    public String ACOM_DOCUMENTO;

				public String getACOM_DOCUMENTO () {
					return this.ACOM_DOCUMENTO;
				}

				public Boolean ACOM_DOCUMENTOIsNullable(){
				    return true;
				}
				public Boolean ACOM_DOCUMENTOIsKey(){
				    return false;
				}
				public Integer ACOM_DOCUMENTOLength(){
				    return null;
				}
				public Integer ACOM_DOCUMENTOPrecision(){
				    return null;
				}
				public String ACOM_DOCUMENTODefault(){
				
					return "";
				
				}
				public String ACOM_DOCUMENTOComment(){
				
				    return "";
				
				}
				public String ACOM_DOCUMENTOPattern(){
				
					return "";
				
				}
				public String ACOM_DOCUMENTOOriginalDbColumnName(){
				
					return "ACOM_DOCUMENTO";
				
				}

				
			    public String ACOM_NOMBRE1;

				public String getACOM_NOMBRE1 () {
					return this.ACOM_NOMBRE1;
				}

				public Boolean ACOM_NOMBRE1IsNullable(){
				    return true;
				}
				public Boolean ACOM_NOMBRE1IsKey(){
				    return false;
				}
				public Integer ACOM_NOMBRE1Length(){
				    return null;
				}
				public Integer ACOM_NOMBRE1Precision(){
				    return null;
				}
				public String ACOM_NOMBRE1Default(){
				
					return "";
				
				}
				public String ACOM_NOMBRE1Comment(){
				
				    return "";
				
				}
				public String ACOM_NOMBRE1Pattern(){
				
					return "";
				
				}
				public String ACOM_NOMBRE1OriginalDbColumnName(){
				
					return "ACOM_NOMBRE1";
				
				}

				
			    public String ACOM_NOMBRE2;

				public String getACOM_NOMBRE2 () {
					return this.ACOM_NOMBRE2;
				}

				public Boolean ACOM_NOMBRE2IsNullable(){
				    return true;
				}
				public Boolean ACOM_NOMBRE2IsKey(){
				    return false;
				}
				public Integer ACOM_NOMBRE2Length(){
				    return null;
				}
				public Integer ACOM_NOMBRE2Precision(){
				    return null;
				}
				public String ACOM_NOMBRE2Default(){
				
					return "";
				
				}
				public String ACOM_NOMBRE2Comment(){
				
				    return "";
				
				}
				public String ACOM_NOMBRE2Pattern(){
				
					return "";
				
				}
				public String ACOM_NOMBRE2OriginalDbColumnName(){
				
					return "ACOM_NOMBRE2";
				
				}

				
			    public String ACOM_APELLIDO1;

				public String getACOM_APELLIDO1 () {
					return this.ACOM_APELLIDO1;
				}

				public Boolean ACOM_APELLIDO1IsNullable(){
				    return true;
				}
				public Boolean ACOM_APELLIDO1IsKey(){
				    return false;
				}
				public Integer ACOM_APELLIDO1Length(){
				    return null;
				}
				public Integer ACOM_APELLIDO1Precision(){
				    return null;
				}
				public String ACOM_APELLIDO1Default(){
				
					return "";
				
				}
				public String ACOM_APELLIDO1Comment(){
				
				    return "";
				
				}
				public String ACOM_APELLIDO1Pattern(){
				
					return "";
				
				}
				public String ACOM_APELLIDO1OriginalDbColumnName(){
				
					return "ACOM_APELLIDO1";
				
				}

				
			    public String ACOM_APELLIDO2;

				public String getACOM_APELLIDO2 () {
					return this.ACOM_APELLIDO2;
				}

				public Boolean ACOM_APELLIDO2IsNullable(){
				    return true;
				}
				public Boolean ACOM_APELLIDO2IsKey(){
				    return false;
				}
				public Integer ACOM_APELLIDO2Length(){
				    return null;
				}
				public Integer ACOM_APELLIDO2Precision(){
				    return null;
				}
				public String ACOM_APELLIDO2Default(){
				
					return "";
				
				}
				public String ACOM_APELLIDO2Comment(){
				
				    return "";
				
				}
				public String ACOM_APELLIDO2Pattern(){
				
					return "";
				
				}
				public String ACOM_APELLIDO2OriginalDbColumnName(){
				
					return "ACOM_APELLIDO2";
				
				}

				
			    public String ACOM_PARENTESCO;

				public String getACOM_PARENTESCO () {
					return this.ACOM_PARENTESCO;
				}

				public Boolean ACOM_PARENTESCOIsNullable(){
				    return true;
				}
				public Boolean ACOM_PARENTESCOIsKey(){
				    return false;
				}
				public Integer ACOM_PARENTESCOLength(){
				    return null;
				}
				public Integer ACOM_PARENTESCOPrecision(){
				    return null;
				}
				public String ACOM_PARENTESCODefault(){
				
					return "";
				
				}
				public String ACOM_PARENTESCOComment(){
				
				    return "";
				
				}
				public String ACOM_PARENTESCOPattern(){
				
					return "";
				
				}
				public String ACOM_PARENTESCOOriginalDbColumnName(){
				
					return "ACOM_PARENTESCO";
				
				}

				
			    public String ACOM_TELEFONO;

				public String getACOM_TELEFONO () {
					return this.ACOM_TELEFONO;
				}

				public Boolean ACOM_TELEFONOIsNullable(){
				    return true;
				}
				public Boolean ACOM_TELEFONOIsKey(){
				    return false;
				}
				public Integer ACOM_TELEFONOLength(){
				    return null;
				}
				public Integer ACOM_TELEFONOPrecision(){
				    return null;
				}
				public String ACOM_TELEFONODefault(){
				
					return "";
				
				}
				public String ACOM_TELEFONOComment(){
				
				    return "";
				
				}
				public String ACOM_TELEFONOPattern(){
				
					return "";
				
				}
				public String ACOM_TELEFONOOriginalDbColumnName(){
				
					return "ACOM_TELEFONO";
				
				}

				
			    public String ACOM_CORREO;

				public String getACOM_CORREO () {
					return this.ACOM_CORREO;
				}

				public Boolean ACOM_CORREOIsNullable(){
				    return true;
				}
				public Boolean ACOM_CORREOIsKey(){
				    return false;
				}
				public Integer ACOM_CORREOLength(){
				    return null;
				}
				public Integer ACOM_CORREOPrecision(){
				    return null;
				}
				public String ACOM_CORREODefault(){
				
					return "";
				
				}
				public String ACOM_CORREOComment(){
				
				    return "";
				
				}
				public String ACOM_CORREOPattern(){
				
					return "";
				
				}
				public String ACOM_CORREOOriginalDbColumnName(){
				
					return "ACOM_CORREO";
				
				}

				
			    public String DAPLICADAS_ID;

				public String getDAPLICADAS_ID () {
					return this.DAPLICADAS_ID;
				}

				public Boolean DAPLICADAS_IDIsNullable(){
				    return true;
				}
				public Boolean DAPLICADAS_IDIsKey(){
				    return false;
				}
				public Integer DAPLICADAS_IDLength(){
				    return null;
				}
				public Integer DAPLICADAS_IDPrecision(){
				    return null;
				}
				public String DAPLICADAS_IDDefault(){
				
					return "";
				
				}
				public String DAPLICADAS_IDComment(){
				
				    return "";
				
				}
				public String DAPLICADAS_IDPattern(){
				
					return "";
				
				}
				public String DAPLICADAS_IDOriginalDbColumnName(){
				
					return "DAPLICADAS_ID";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_VAC_CONSOLIDADOS_VAC_RegistroVacunacion.length) {
				if(length < 1024 && commonByteArray_VAC_CONSOLIDADOS_VAC_RegistroVacunacion.length == 0) {
   					commonByteArray_VAC_CONSOLIDADOS_VAC_RegistroVacunacion = new byte[1024];
				} else {
   					commonByteArray_VAC_CONSOLIDADOS_VAC_RegistroVacunacion = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_VAC_CONSOLIDADOS_VAC_RegistroVacunacion, 0, length);
			strReturn = new String(commonByteArray_VAC_CONSOLIDADOS_VAC_RegistroVacunacion, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_VAC_CONSOLIDADOS_VAC_RegistroVacunacion.length) {
				if(length < 1024 && commonByteArray_VAC_CONSOLIDADOS_VAC_RegistroVacunacion.length == 0) {
   					commonByteArray_VAC_CONSOLIDADOS_VAC_RegistroVacunacion = new byte[1024];
				} else {
   					commonByteArray_VAC_CONSOLIDADOS_VAC_RegistroVacunacion = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_VAC_CONSOLIDADOS_VAC_RegistroVacunacion, 0, length);
			strReturn = new String(commonByteArray_VAC_CONSOLIDADOS_VAC_RegistroVacunacion, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_VAC_CONSOLIDADOS_VAC_RegistroVacunacion) {

        	try {

        		int length = 0;
		
						this.ORDEN = (BigDecimal) dis.readObject();
					
					this.FECHA_REGISTRO = readString(dis);
					
					this.FECHA_APLICACION = readString(dis);
					
					this.TIPO_DOCUMENTO = readString(dis);
					
					this.NUMERO_DOCUMENTO = readString(dis);
					
					this.FECHA_NACIMIENTO = readString(dis);
					
					this.TIPO_EDAD = readString(dis);
					
						this.EDAD = (BigDecimal) dis.readObject();
					
					this.SEXO = readString(dis);
					
					this.PRIMER_NOMBRE = readString(dis);
					
					this.SEGUNDO_NOMBRE = readString(dis);
					
					this.PRIMER_APELLIDO = readString(dis);
					
					this.SEGUNDO_APELLIDO = readString(dis);
					
					this.REGIMEN = readString(dis);
					
					this.EPS = readString(dis);
					
					this.GRADO = readString(dis);
					
					this.TIPO_AFILIACION = readString(dis);
					
					this.FUERZA_ADSCRIPCION = readString(dis);
					
					this.ESM_ADSCRIPCION = readString(dis);
					
					this.FUERZA = readString(dis);
					
					this.UORG = readString(dis);
					
					this.USUARIO = readString(dis);
					
					this.PUNTO_VACUNADOR = readString(dis);
					
					this.NOMBRE_VACUNADOR = readString(dis);
					
					this.DEPARTAMENTO_RESIDENCIA = readString(dis);
					
					this.MUNICIPIO_RESIDENCIA = readString(dis);
					
					this.BARRIO = readString(dis);
					
					this.DIRECCION = readString(dis);
					
					this.TELEFONO = readString(dis);
					
					this.GRUPO_ETNICO = readString(dis);
					
					this.DESPLAZADA = readString(dis);
					
					this.DISCAPACITADA = readString(dis);
					
					this.VICTIMA = readString(dis);
					
					this.ZVEREDAL = readString(dis);
					
					this.PARENTESCO = readString(dis);
					
					this.TIPO_DOCUMENTO_COTIZANTE = readString(dis);
					
					this.NUMERO_DOCUMENTO_COTIZANTE = readString(dis);
					
					this.PRIMER_NOMBRE_COTIZANTE = readString(dis);
					
					this.SEGUNDO_NOMBRE_COTIZANTE = readString(dis);
					
					this.PRIMER_APELLIDO_COTIZANTE = readString(dis);
					
					this.SEGUNDO_APELLIDO_COTIZANTE = readString(dis);
					
					this.GRADO_COTIZANTE = readString(dis);
					
					this.ACOM_TDOCUMENTO = readString(dis);
					
					this.ACOM_DOCUMENTO = readString(dis);
					
					this.ACOM_NOMBRE1 = readString(dis);
					
					this.ACOM_NOMBRE2 = readString(dis);
					
					this.ACOM_APELLIDO1 = readString(dis);
					
					this.ACOM_APELLIDO2 = readString(dis);
					
					this.ACOM_PARENTESCO = readString(dis);
					
					this.ACOM_TELEFONO = readString(dis);
					
					this.ACOM_CORREO = readString(dis);
					
					this.DAPLICADAS_ID = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_VAC_CONSOLIDADOS_VAC_RegistroVacunacion) {

        	try {

        		int length = 0;
		
						this.ORDEN = (BigDecimal) dis.readObject();
					
					this.FECHA_REGISTRO = readString(dis);
					
					this.FECHA_APLICACION = readString(dis);
					
					this.TIPO_DOCUMENTO = readString(dis);
					
					this.NUMERO_DOCUMENTO = readString(dis);
					
					this.FECHA_NACIMIENTO = readString(dis);
					
					this.TIPO_EDAD = readString(dis);
					
						this.EDAD = (BigDecimal) dis.readObject();
					
					this.SEXO = readString(dis);
					
					this.PRIMER_NOMBRE = readString(dis);
					
					this.SEGUNDO_NOMBRE = readString(dis);
					
					this.PRIMER_APELLIDO = readString(dis);
					
					this.SEGUNDO_APELLIDO = readString(dis);
					
					this.REGIMEN = readString(dis);
					
					this.EPS = readString(dis);
					
					this.GRADO = readString(dis);
					
					this.TIPO_AFILIACION = readString(dis);
					
					this.FUERZA_ADSCRIPCION = readString(dis);
					
					this.ESM_ADSCRIPCION = readString(dis);
					
					this.FUERZA = readString(dis);
					
					this.UORG = readString(dis);
					
					this.USUARIO = readString(dis);
					
					this.PUNTO_VACUNADOR = readString(dis);
					
					this.NOMBRE_VACUNADOR = readString(dis);
					
					this.DEPARTAMENTO_RESIDENCIA = readString(dis);
					
					this.MUNICIPIO_RESIDENCIA = readString(dis);
					
					this.BARRIO = readString(dis);
					
					this.DIRECCION = readString(dis);
					
					this.TELEFONO = readString(dis);
					
					this.GRUPO_ETNICO = readString(dis);
					
					this.DESPLAZADA = readString(dis);
					
					this.DISCAPACITADA = readString(dis);
					
					this.VICTIMA = readString(dis);
					
					this.ZVEREDAL = readString(dis);
					
					this.PARENTESCO = readString(dis);
					
					this.TIPO_DOCUMENTO_COTIZANTE = readString(dis);
					
					this.NUMERO_DOCUMENTO_COTIZANTE = readString(dis);
					
					this.PRIMER_NOMBRE_COTIZANTE = readString(dis);
					
					this.SEGUNDO_NOMBRE_COTIZANTE = readString(dis);
					
					this.PRIMER_APELLIDO_COTIZANTE = readString(dis);
					
					this.SEGUNDO_APELLIDO_COTIZANTE = readString(dis);
					
					this.GRADO_COTIZANTE = readString(dis);
					
					this.ACOM_TDOCUMENTO = readString(dis);
					
					this.ACOM_DOCUMENTO = readString(dis);
					
					this.ACOM_NOMBRE1 = readString(dis);
					
					this.ACOM_NOMBRE2 = readString(dis);
					
					this.ACOM_APELLIDO1 = readString(dis);
					
					this.ACOM_APELLIDO2 = readString(dis);
					
					this.ACOM_PARENTESCO = readString(dis);
					
					this.ACOM_TELEFONO = readString(dis);
					
					this.ACOM_CORREO = readString(dis);
					
					this.DAPLICADAS_ID = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.ORDEN);
					
					// String
				
						writeString(this.FECHA_REGISTRO,dos);
					
					// String
				
						writeString(this.FECHA_APLICACION,dos);
					
					// String
				
						writeString(this.TIPO_DOCUMENTO,dos);
					
					// String
				
						writeString(this.NUMERO_DOCUMENTO,dos);
					
					// String
				
						writeString(this.FECHA_NACIMIENTO,dos);
					
					// String
				
						writeString(this.TIPO_EDAD,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.EDAD);
					
					// String
				
						writeString(this.SEXO,dos);
					
					// String
				
						writeString(this.PRIMER_NOMBRE,dos);
					
					// String
				
						writeString(this.SEGUNDO_NOMBRE,dos);
					
					// String
				
						writeString(this.PRIMER_APELLIDO,dos);
					
					// String
				
						writeString(this.SEGUNDO_APELLIDO,dos);
					
					// String
				
						writeString(this.REGIMEN,dos);
					
					// String
				
						writeString(this.EPS,dos);
					
					// String
				
						writeString(this.GRADO,dos);
					
					// String
				
						writeString(this.TIPO_AFILIACION,dos);
					
					// String
				
						writeString(this.FUERZA_ADSCRIPCION,dos);
					
					// String
				
						writeString(this.ESM_ADSCRIPCION,dos);
					
					// String
				
						writeString(this.FUERZA,dos);
					
					// String
				
						writeString(this.UORG,dos);
					
					// String
				
						writeString(this.USUARIO,dos);
					
					// String
				
						writeString(this.PUNTO_VACUNADOR,dos);
					
					// String
				
						writeString(this.NOMBRE_VACUNADOR,dos);
					
					// String
				
						writeString(this.DEPARTAMENTO_RESIDENCIA,dos);
					
					// String
				
						writeString(this.MUNICIPIO_RESIDENCIA,dos);
					
					// String
				
						writeString(this.BARRIO,dos);
					
					// String
				
						writeString(this.DIRECCION,dos);
					
					// String
				
						writeString(this.TELEFONO,dos);
					
					// String
				
						writeString(this.GRUPO_ETNICO,dos);
					
					// String
				
						writeString(this.DESPLAZADA,dos);
					
					// String
				
						writeString(this.DISCAPACITADA,dos);
					
					// String
				
						writeString(this.VICTIMA,dos);
					
					// String
				
						writeString(this.ZVEREDAL,dos);
					
					// String
				
						writeString(this.PARENTESCO,dos);
					
					// String
				
						writeString(this.TIPO_DOCUMENTO_COTIZANTE,dos);
					
					// String
				
						writeString(this.NUMERO_DOCUMENTO_COTIZANTE,dos);
					
					// String
				
						writeString(this.PRIMER_NOMBRE_COTIZANTE,dos);
					
					// String
				
						writeString(this.SEGUNDO_NOMBRE_COTIZANTE,dos);
					
					// String
				
						writeString(this.PRIMER_APELLIDO_COTIZANTE,dos);
					
					// String
				
						writeString(this.SEGUNDO_APELLIDO_COTIZANTE,dos);
					
					// String
				
						writeString(this.GRADO_COTIZANTE,dos);
					
					// String
				
						writeString(this.ACOM_TDOCUMENTO,dos);
					
					// String
				
						writeString(this.ACOM_DOCUMENTO,dos);
					
					// String
				
						writeString(this.ACOM_NOMBRE1,dos);
					
					// String
				
						writeString(this.ACOM_NOMBRE2,dos);
					
					// String
				
						writeString(this.ACOM_APELLIDO1,dos);
					
					// String
				
						writeString(this.ACOM_APELLIDO2,dos);
					
					// String
				
						writeString(this.ACOM_PARENTESCO,dos);
					
					// String
				
						writeString(this.ACOM_TELEFONO,dos);
					
					// String
				
						writeString(this.ACOM_CORREO,dos);
					
					// String
				
						writeString(this.DAPLICADAS_ID,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ORDEN);
					
					// String
				
						writeString(this.FECHA_REGISTRO,dos);
					
					// String
				
						writeString(this.FECHA_APLICACION,dos);
					
					// String
				
						writeString(this.TIPO_DOCUMENTO,dos);
					
					// String
				
						writeString(this.NUMERO_DOCUMENTO,dos);
					
					// String
				
						writeString(this.FECHA_NACIMIENTO,dos);
					
					// String
				
						writeString(this.TIPO_EDAD,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.EDAD);
					
					// String
				
						writeString(this.SEXO,dos);
					
					// String
				
						writeString(this.PRIMER_NOMBRE,dos);
					
					// String
				
						writeString(this.SEGUNDO_NOMBRE,dos);
					
					// String
				
						writeString(this.PRIMER_APELLIDO,dos);
					
					// String
				
						writeString(this.SEGUNDO_APELLIDO,dos);
					
					// String
				
						writeString(this.REGIMEN,dos);
					
					// String
				
						writeString(this.EPS,dos);
					
					// String
				
						writeString(this.GRADO,dos);
					
					// String
				
						writeString(this.TIPO_AFILIACION,dos);
					
					// String
				
						writeString(this.FUERZA_ADSCRIPCION,dos);
					
					// String
				
						writeString(this.ESM_ADSCRIPCION,dos);
					
					// String
				
						writeString(this.FUERZA,dos);
					
					// String
				
						writeString(this.UORG,dos);
					
					// String
				
						writeString(this.USUARIO,dos);
					
					// String
				
						writeString(this.PUNTO_VACUNADOR,dos);
					
					// String
				
						writeString(this.NOMBRE_VACUNADOR,dos);
					
					// String
				
						writeString(this.DEPARTAMENTO_RESIDENCIA,dos);
					
					// String
				
						writeString(this.MUNICIPIO_RESIDENCIA,dos);
					
					// String
				
						writeString(this.BARRIO,dos);
					
					// String
				
						writeString(this.DIRECCION,dos);
					
					// String
				
						writeString(this.TELEFONO,dos);
					
					// String
				
						writeString(this.GRUPO_ETNICO,dos);
					
					// String
				
						writeString(this.DESPLAZADA,dos);
					
					// String
				
						writeString(this.DISCAPACITADA,dos);
					
					// String
				
						writeString(this.VICTIMA,dos);
					
					// String
				
						writeString(this.ZVEREDAL,dos);
					
					// String
				
						writeString(this.PARENTESCO,dos);
					
					// String
				
						writeString(this.TIPO_DOCUMENTO_COTIZANTE,dos);
					
					// String
				
						writeString(this.NUMERO_DOCUMENTO_COTIZANTE,dos);
					
					// String
				
						writeString(this.PRIMER_NOMBRE_COTIZANTE,dos);
					
					// String
				
						writeString(this.SEGUNDO_NOMBRE_COTIZANTE,dos);
					
					// String
				
						writeString(this.PRIMER_APELLIDO_COTIZANTE,dos);
					
					// String
				
						writeString(this.SEGUNDO_APELLIDO_COTIZANTE,dos);
					
					// String
				
						writeString(this.GRADO_COTIZANTE,dos);
					
					// String
				
						writeString(this.ACOM_TDOCUMENTO,dos);
					
					// String
				
						writeString(this.ACOM_DOCUMENTO,dos);
					
					// String
				
						writeString(this.ACOM_NOMBRE1,dos);
					
					// String
				
						writeString(this.ACOM_NOMBRE2,dos);
					
					// String
				
						writeString(this.ACOM_APELLIDO1,dos);
					
					// String
				
						writeString(this.ACOM_APELLIDO2,dos);
					
					// String
				
						writeString(this.ACOM_PARENTESCO,dos);
					
					// String
				
						writeString(this.ACOM_TELEFONO,dos);
					
					// String
				
						writeString(this.ACOM_CORREO,dos);
					
					// String
				
						writeString(this.DAPLICADAS_ID,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ORDEN="+String.valueOf(ORDEN));
		sb.append(",FECHA_REGISTRO="+FECHA_REGISTRO);
		sb.append(",FECHA_APLICACION="+FECHA_APLICACION);
		sb.append(",TIPO_DOCUMENTO="+TIPO_DOCUMENTO);
		sb.append(",NUMERO_DOCUMENTO="+NUMERO_DOCUMENTO);
		sb.append(",FECHA_NACIMIENTO="+FECHA_NACIMIENTO);
		sb.append(",TIPO_EDAD="+TIPO_EDAD);
		sb.append(",EDAD="+String.valueOf(EDAD));
		sb.append(",SEXO="+SEXO);
		sb.append(",PRIMER_NOMBRE="+PRIMER_NOMBRE);
		sb.append(",SEGUNDO_NOMBRE="+SEGUNDO_NOMBRE);
		sb.append(",PRIMER_APELLIDO="+PRIMER_APELLIDO);
		sb.append(",SEGUNDO_APELLIDO="+SEGUNDO_APELLIDO);
		sb.append(",REGIMEN="+REGIMEN);
		sb.append(",EPS="+EPS);
		sb.append(",GRADO="+GRADO);
		sb.append(",TIPO_AFILIACION="+TIPO_AFILIACION);
		sb.append(",FUERZA_ADSCRIPCION="+FUERZA_ADSCRIPCION);
		sb.append(",ESM_ADSCRIPCION="+ESM_ADSCRIPCION);
		sb.append(",FUERZA="+FUERZA);
		sb.append(",UORG="+UORG);
		sb.append(",USUARIO="+USUARIO);
		sb.append(",PUNTO_VACUNADOR="+PUNTO_VACUNADOR);
		sb.append(",NOMBRE_VACUNADOR="+NOMBRE_VACUNADOR);
		sb.append(",DEPARTAMENTO_RESIDENCIA="+DEPARTAMENTO_RESIDENCIA);
		sb.append(",MUNICIPIO_RESIDENCIA="+MUNICIPIO_RESIDENCIA);
		sb.append(",BARRIO="+BARRIO);
		sb.append(",DIRECCION="+DIRECCION);
		sb.append(",TELEFONO="+TELEFONO);
		sb.append(",GRUPO_ETNICO="+GRUPO_ETNICO);
		sb.append(",DESPLAZADA="+DESPLAZADA);
		sb.append(",DISCAPACITADA="+DISCAPACITADA);
		sb.append(",VICTIMA="+VICTIMA);
		sb.append(",ZVEREDAL="+ZVEREDAL);
		sb.append(",PARENTESCO="+PARENTESCO);
		sb.append(",TIPO_DOCUMENTO_COTIZANTE="+TIPO_DOCUMENTO_COTIZANTE);
		sb.append(",NUMERO_DOCUMENTO_COTIZANTE="+NUMERO_DOCUMENTO_COTIZANTE);
		sb.append(",PRIMER_NOMBRE_COTIZANTE="+PRIMER_NOMBRE_COTIZANTE);
		sb.append(",SEGUNDO_NOMBRE_COTIZANTE="+SEGUNDO_NOMBRE_COTIZANTE);
		sb.append(",PRIMER_APELLIDO_COTIZANTE="+PRIMER_APELLIDO_COTIZANTE);
		sb.append(",SEGUNDO_APELLIDO_COTIZANTE="+SEGUNDO_APELLIDO_COTIZANTE);
		sb.append(",GRADO_COTIZANTE="+GRADO_COTIZANTE);
		sb.append(",ACOM_TDOCUMENTO="+ACOM_TDOCUMENTO);
		sb.append(",ACOM_DOCUMENTO="+ACOM_DOCUMENTO);
		sb.append(",ACOM_NOMBRE1="+ACOM_NOMBRE1);
		sb.append(",ACOM_NOMBRE2="+ACOM_NOMBRE2);
		sb.append(",ACOM_APELLIDO1="+ACOM_APELLIDO1);
		sb.append(",ACOM_APELLIDO2="+ACOM_APELLIDO2);
		sb.append(",ACOM_PARENTESCO="+ACOM_PARENTESCO);
		sb.append(",ACOM_TELEFONO="+ACOM_TELEFONO);
		sb.append(",ACOM_CORREO="+ACOM_CORREO);
		sb.append(",DAPLICADAS_ID="+DAPLICADAS_ID);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row5Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row10Struct implements routines.system.IPersistableRow<row10Struct> {
    final static byte[] commonByteArrayLock_VAC_CONSOLIDADOS_VAC_RegistroVacunacion = new byte[0];
    static byte[] commonByteArray_VAC_CONSOLIDADOS_VAC_RegistroVacunacion = new byte[0];

	
			    public BigDecimal ORDEN;

				public BigDecimal getORDEN () {
					return this.ORDEN;
				}

				public Boolean ORDENIsNullable(){
				    return true;
				}
				public Boolean ORDENIsKey(){
				    return false;
				}
				public Integer ORDENLength(){
				    return null;
				}
				public Integer ORDENPrecision(){
				    return null;
				}
				public String ORDENDefault(){
				
					return "";
				
				}
				public String ORDENComment(){
				
				    return "";
				
				}
				public String ORDENPattern(){
				
					return "";
				
				}
				public String ORDENOriginalDbColumnName(){
				
					return "ORDEN";
				
				}

				
			    public String FECHA_REGISTRO;

				public String getFECHA_REGISTRO () {
					return this.FECHA_REGISTRO;
				}

				public Boolean FECHA_REGISTROIsNullable(){
				    return true;
				}
				public Boolean FECHA_REGISTROIsKey(){
				    return false;
				}
				public Integer FECHA_REGISTROLength(){
				    return null;
				}
				public Integer FECHA_REGISTROPrecision(){
				    return null;
				}
				public String FECHA_REGISTRODefault(){
				
					return null;
				
				}
				public String FECHA_REGISTROComment(){
				
				    return "";
				
				}
				public String FECHA_REGISTROPattern(){
				
					return "";
				
				}
				public String FECHA_REGISTROOriginalDbColumnName(){
				
					return "FECHA_REGISTRO";
				
				}

				
			    public String FECHA_APLICACION;

				public String getFECHA_APLICACION () {
					return this.FECHA_APLICACION;
				}

				public Boolean FECHA_APLICACIONIsNullable(){
				    return true;
				}
				public Boolean FECHA_APLICACIONIsKey(){
				    return false;
				}
				public Integer FECHA_APLICACIONLength(){
				    return null;
				}
				public Integer FECHA_APLICACIONPrecision(){
				    return null;
				}
				public String FECHA_APLICACIONDefault(){
				
					return null;
				
				}
				public String FECHA_APLICACIONComment(){
				
				    return "";
				
				}
				public String FECHA_APLICACIONPattern(){
				
					return "";
				
				}
				public String FECHA_APLICACIONOriginalDbColumnName(){
				
					return "FECHA_APLICACION";
				
				}

				
			    public String TIPO_DOCUMENTO;

				public String getTIPO_DOCUMENTO () {
					return this.TIPO_DOCUMENTO;
				}

				public Boolean TIPO_DOCUMENTOIsNullable(){
				    return false;
				}
				public Boolean TIPO_DOCUMENTOIsKey(){
				    return false;
				}
				public Integer TIPO_DOCUMENTOLength(){
				    return null;
				}
				public Integer TIPO_DOCUMENTOPrecision(){
				    return null;
				}
				public String TIPO_DOCUMENTODefault(){
				
					return null;
				
				}
				public String TIPO_DOCUMENTOComment(){
				
				    return "";
				
				}
				public String TIPO_DOCUMENTOPattern(){
				
					return "";
				
				}
				public String TIPO_DOCUMENTOOriginalDbColumnName(){
				
					return "TIPO_DOCUMENTO";
				
				}

				
			    public String NUMERO_DOCUMENTO;

				public String getNUMERO_DOCUMENTO () {
					return this.NUMERO_DOCUMENTO;
				}

				public Boolean NUMERO_DOCUMENTOIsNullable(){
				    return false;
				}
				public Boolean NUMERO_DOCUMENTOIsKey(){
				    return false;
				}
				public Integer NUMERO_DOCUMENTOLength(){
				    return null;
				}
				public Integer NUMERO_DOCUMENTOPrecision(){
				    return null;
				}
				public String NUMERO_DOCUMENTODefault(){
				
					return null;
				
				}
				public String NUMERO_DOCUMENTOComment(){
				
				    return "";
				
				}
				public String NUMERO_DOCUMENTOPattern(){
				
					return "";
				
				}
				public String NUMERO_DOCUMENTOOriginalDbColumnName(){
				
					return "NUMERO_DOCUMENTO";
				
				}

				
			    public String FECHA_NACIMIENTO;

				public String getFECHA_NACIMIENTO () {
					return this.FECHA_NACIMIENTO;
				}

				public Boolean FECHA_NACIMIENTOIsNullable(){
				    return true;
				}
				public Boolean FECHA_NACIMIENTOIsKey(){
				    return false;
				}
				public Integer FECHA_NACIMIENTOLength(){
				    return null;
				}
				public Integer FECHA_NACIMIENTOPrecision(){
				    return null;
				}
				public String FECHA_NACIMIENTODefault(){
				
					return null;
				
				}
				public String FECHA_NACIMIENTOComment(){
				
				    return "";
				
				}
				public String FECHA_NACIMIENTOPattern(){
				
					return "";
				
				}
				public String FECHA_NACIMIENTOOriginalDbColumnName(){
				
					return "FECHA_NACIMIENTO";
				
				}

				
			    public String TIPO_EDAD;

				public String getTIPO_EDAD () {
					return this.TIPO_EDAD;
				}

				public Boolean TIPO_EDADIsNullable(){
				    return true;
				}
				public Boolean TIPO_EDADIsKey(){
				    return false;
				}
				public Integer TIPO_EDADLength(){
				    return null;
				}
				public Integer TIPO_EDADPrecision(){
				    return null;
				}
				public String TIPO_EDADDefault(){
				
					return null;
				
				}
				public String TIPO_EDADComment(){
				
				    return "";
				
				}
				public String TIPO_EDADPattern(){
				
					return "";
				
				}
				public String TIPO_EDADOriginalDbColumnName(){
				
					return "TIPO_EDAD";
				
				}

				
			    public BigDecimal EDAD;

				public BigDecimal getEDAD () {
					return this.EDAD;
				}

				public Boolean EDADIsNullable(){
				    return true;
				}
				public Boolean EDADIsKey(){
				    return false;
				}
				public Integer EDADLength(){
				    return null;
				}
				public Integer EDADPrecision(){
				    return null;
				}
				public String EDADDefault(){
				
					return "";
				
				}
				public String EDADComment(){
				
				    return "";
				
				}
				public String EDADPattern(){
				
					return "";
				
				}
				public String EDADOriginalDbColumnName(){
				
					return "EDAD";
				
				}

				
			    public String SEXO;

				public String getSEXO () {
					return this.SEXO;
				}

				public Boolean SEXOIsNullable(){
				    return false;
				}
				public Boolean SEXOIsKey(){
				    return false;
				}
				public Integer SEXOLength(){
				    return null;
				}
				public Integer SEXOPrecision(){
				    return null;
				}
				public String SEXODefault(){
				
					return null;
				
				}
				public String SEXOComment(){
				
				    return "";
				
				}
				public String SEXOPattern(){
				
					return "";
				
				}
				public String SEXOOriginalDbColumnName(){
				
					return "SEXO";
				
				}

				
			    public String PRIMER_NOMBRE;

				public String getPRIMER_NOMBRE () {
					return this.PRIMER_NOMBRE;
				}

				public Boolean PRIMER_NOMBREIsNullable(){
				    return true;
				}
				public Boolean PRIMER_NOMBREIsKey(){
				    return false;
				}
				public Integer PRIMER_NOMBRELength(){
				    return null;
				}
				public Integer PRIMER_NOMBREPrecision(){
				    return null;
				}
				public String PRIMER_NOMBREDefault(){
				
					return null;
				
				}
				public String PRIMER_NOMBREComment(){
				
				    return "";
				
				}
				public String PRIMER_NOMBREPattern(){
				
					return "";
				
				}
				public String PRIMER_NOMBREOriginalDbColumnName(){
				
					return "PRIMER_NOMBRE";
				
				}

				
			    public String SEGUNDO_NOMBRE;

				public String getSEGUNDO_NOMBRE () {
					return this.SEGUNDO_NOMBRE;
				}

				public Boolean SEGUNDO_NOMBREIsNullable(){
				    return true;
				}
				public Boolean SEGUNDO_NOMBREIsKey(){
				    return false;
				}
				public Integer SEGUNDO_NOMBRELength(){
				    return null;
				}
				public Integer SEGUNDO_NOMBREPrecision(){
				    return null;
				}
				public String SEGUNDO_NOMBREDefault(){
				
					return null;
				
				}
				public String SEGUNDO_NOMBREComment(){
				
				    return "";
				
				}
				public String SEGUNDO_NOMBREPattern(){
				
					return "";
				
				}
				public String SEGUNDO_NOMBREOriginalDbColumnName(){
				
					return "SEGUNDO_NOMBRE";
				
				}

				
			    public String PRIMER_APELLIDO;

				public String getPRIMER_APELLIDO () {
					return this.PRIMER_APELLIDO;
				}

				public Boolean PRIMER_APELLIDOIsNullable(){
				    return true;
				}
				public Boolean PRIMER_APELLIDOIsKey(){
				    return false;
				}
				public Integer PRIMER_APELLIDOLength(){
				    return null;
				}
				public Integer PRIMER_APELLIDOPrecision(){
				    return null;
				}
				public String PRIMER_APELLIDODefault(){
				
					return null;
				
				}
				public String PRIMER_APELLIDOComment(){
				
				    return "";
				
				}
				public String PRIMER_APELLIDOPattern(){
				
					return "";
				
				}
				public String PRIMER_APELLIDOOriginalDbColumnName(){
				
					return "PRIMER_APELLIDO";
				
				}

				
			    public String SEGUNDO_APELLIDO;

				public String getSEGUNDO_APELLIDO () {
					return this.SEGUNDO_APELLIDO;
				}

				public Boolean SEGUNDO_APELLIDOIsNullable(){
				    return true;
				}
				public Boolean SEGUNDO_APELLIDOIsKey(){
				    return false;
				}
				public Integer SEGUNDO_APELLIDOLength(){
				    return null;
				}
				public Integer SEGUNDO_APELLIDOPrecision(){
				    return null;
				}
				public String SEGUNDO_APELLIDODefault(){
				
					return "";
				
				}
				public String SEGUNDO_APELLIDOComment(){
				
				    return "";
				
				}
				public String SEGUNDO_APELLIDOPattern(){
				
					return "";
				
				}
				public String SEGUNDO_APELLIDOOriginalDbColumnName(){
				
					return "SEGUNDO_APELLIDO";
				
				}

				
			    public String REGIMEN;

				public String getREGIMEN () {
					return this.REGIMEN;
				}

				public Boolean REGIMENIsNullable(){
				    return true;
				}
				public Boolean REGIMENIsKey(){
				    return false;
				}
				public Integer REGIMENLength(){
				    return null;
				}
				public Integer REGIMENPrecision(){
				    return null;
				}
				public String REGIMENDefault(){
				
					return "";
				
				}
				public String REGIMENComment(){
				
				    return "";
				
				}
				public String REGIMENPattern(){
				
					return "";
				
				}
				public String REGIMENOriginalDbColumnName(){
				
					return "REGIMEN";
				
				}

				
			    public String EPS;

				public String getEPS () {
					return this.EPS;
				}

				public Boolean EPSIsNullable(){
				    return true;
				}
				public Boolean EPSIsKey(){
				    return false;
				}
				public Integer EPSLength(){
				    return null;
				}
				public Integer EPSPrecision(){
				    return null;
				}
				public String EPSDefault(){
				
					return "";
				
				}
				public String EPSComment(){
				
				    return "";
				
				}
				public String EPSPattern(){
				
					return "";
				
				}
				public String EPSOriginalDbColumnName(){
				
					return "EPS";
				
				}

				
			    public String GRADO;

				public String getGRADO () {
					return this.GRADO;
				}

				public Boolean GRADOIsNullable(){
				    return true;
				}
				public Boolean GRADOIsKey(){
				    return false;
				}
				public Integer GRADOLength(){
				    return null;
				}
				public Integer GRADOPrecision(){
				    return null;
				}
				public String GRADODefault(){
				
					return "";
				
				}
				public String GRADOComment(){
				
				    return "";
				
				}
				public String GRADOPattern(){
				
					return "";
				
				}
				public String GRADOOriginalDbColumnName(){
				
					return "GRADO";
				
				}

				
			    public String TIPO_AFILIACION;

				public String getTIPO_AFILIACION () {
					return this.TIPO_AFILIACION;
				}

				public Boolean TIPO_AFILIACIONIsNullable(){
				    return true;
				}
				public Boolean TIPO_AFILIACIONIsKey(){
				    return false;
				}
				public Integer TIPO_AFILIACIONLength(){
				    return null;
				}
				public Integer TIPO_AFILIACIONPrecision(){
				    return null;
				}
				public String TIPO_AFILIACIONDefault(){
				
					return "";
				
				}
				public String TIPO_AFILIACIONComment(){
				
				    return "";
				
				}
				public String TIPO_AFILIACIONPattern(){
				
					return "";
				
				}
				public String TIPO_AFILIACIONOriginalDbColumnName(){
				
					return "TIPO_AFILIACION";
				
				}

				
			    public String FUERZA_ADSCRIPCION;

				public String getFUERZA_ADSCRIPCION () {
					return this.FUERZA_ADSCRIPCION;
				}

				public Boolean FUERZA_ADSCRIPCIONIsNullable(){
				    return true;
				}
				public Boolean FUERZA_ADSCRIPCIONIsKey(){
				    return false;
				}
				public Integer FUERZA_ADSCRIPCIONLength(){
				    return null;
				}
				public Integer FUERZA_ADSCRIPCIONPrecision(){
				    return null;
				}
				public String FUERZA_ADSCRIPCIONDefault(){
				
					return "";
				
				}
				public String FUERZA_ADSCRIPCIONComment(){
				
				    return "";
				
				}
				public String FUERZA_ADSCRIPCIONPattern(){
				
					return "";
				
				}
				public String FUERZA_ADSCRIPCIONOriginalDbColumnName(){
				
					return "FUERZA_ADSCRIPCION";
				
				}

				
			    public String ESM_ADSCRIPCION;

				public String getESM_ADSCRIPCION () {
					return this.ESM_ADSCRIPCION;
				}

				public Boolean ESM_ADSCRIPCIONIsNullable(){
				    return true;
				}
				public Boolean ESM_ADSCRIPCIONIsKey(){
				    return false;
				}
				public Integer ESM_ADSCRIPCIONLength(){
				    return null;
				}
				public Integer ESM_ADSCRIPCIONPrecision(){
				    return null;
				}
				public String ESM_ADSCRIPCIONDefault(){
				
					return "";
				
				}
				public String ESM_ADSCRIPCIONComment(){
				
				    return "";
				
				}
				public String ESM_ADSCRIPCIONPattern(){
				
					return "";
				
				}
				public String ESM_ADSCRIPCIONOriginalDbColumnName(){
				
					return "ESM_ADSCRIPCION";
				
				}

				
			    public String FUERZA;

				public String getFUERZA () {
					return this.FUERZA;
				}

				public Boolean FUERZAIsNullable(){
				    return true;
				}
				public Boolean FUERZAIsKey(){
				    return false;
				}
				public Integer FUERZALength(){
				    return null;
				}
				public Integer FUERZAPrecision(){
				    return null;
				}
				public String FUERZADefault(){
				
					return "";
				
				}
				public String FUERZAComment(){
				
				    return "";
				
				}
				public String FUERZAPattern(){
				
					return "";
				
				}
				public String FUERZAOriginalDbColumnName(){
				
					return "FUERZA";
				
				}

				
			    public String UORG;

				public String getUORG () {
					return this.UORG;
				}

				public Boolean UORGIsNullable(){
				    return false;
				}
				public Boolean UORGIsKey(){
				    return false;
				}
				public Integer UORGLength(){
				    return null;
				}
				public Integer UORGPrecision(){
				    return null;
				}
				public String UORGDefault(){
				
					return "";
				
				}
				public String UORGComment(){
				
				    return "";
				
				}
				public String UORGPattern(){
				
					return "";
				
				}
				public String UORGOriginalDbColumnName(){
				
					return "UORG";
				
				}

				
			    public String USUARIO;

				public String getUSUARIO () {
					return this.USUARIO;
				}

				public Boolean USUARIOIsNullable(){
				    return true;
				}
				public Boolean USUARIOIsKey(){
				    return false;
				}
				public Integer USUARIOLength(){
				    return null;
				}
				public Integer USUARIOPrecision(){
				    return null;
				}
				public String USUARIODefault(){
				
					return "";
				
				}
				public String USUARIOComment(){
				
				    return "";
				
				}
				public String USUARIOPattern(){
				
					return "";
				
				}
				public String USUARIOOriginalDbColumnName(){
				
					return "USUARIO";
				
				}

				
			    public String PUNTO_VACUNADOR;

				public String getPUNTO_VACUNADOR () {
					return this.PUNTO_VACUNADOR;
				}

				public Boolean PUNTO_VACUNADORIsNullable(){
				    return true;
				}
				public Boolean PUNTO_VACUNADORIsKey(){
				    return false;
				}
				public Integer PUNTO_VACUNADORLength(){
				    return null;
				}
				public Integer PUNTO_VACUNADORPrecision(){
				    return null;
				}
				public String PUNTO_VACUNADORDefault(){
				
					return "";
				
				}
				public String PUNTO_VACUNADORComment(){
				
				    return "";
				
				}
				public String PUNTO_VACUNADORPattern(){
				
					return "";
				
				}
				public String PUNTO_VACUNADOROriginalDbColumnName(){
				
					return "PUNTO_VACUNADOR";
				
				}

				
			    public String NOMBRE_VACUNADOR;

				public String getNOMBRE_VACUNADOR () {
					return this.NOMBRE_VACUNADOR;
				}

				public Boolean NOMBRE_VACUNADORIsNullable(){
				    return true;
				}
				public Boolean NOMBRE_VACUNADORIsKey(){
				    return false;
				}
				public Integer NOMBRE_VACUNADORLength(){
				    return null;
				}
				public Integer NOMBRE_VACUNADORPrecision(){
				    return null;
				}
				public String NOMBRE_VACUNADORDefault(){
				
					return "";
				
				}
				public String NOMBRE_VACUNADORComment(){
				
				    return "";
				
				}
				public String NOMBRE_VACUNADORPattern(){
				
					return "";
				
				}
				public String NOMBRE_VACUNADOROriginalDbColumnName(){
				
					return "NOMBRE_VACUNADOR";
				
				}

				
			    public String DEPARTAMENTO_RESIDENCIA;

				public String getDEPARTAMENTO_RESIDENCIA () {
					return this.DEPARTAMENTO_RESIDENCIA;
				}

				public Boolean DEPARTAMENTO_RESIDENCIAIsNullable(){
				    return true;
				}
				public Boolean DEPARTAMENTO_RESIDENCIAIsKey(){
				    return false;
				}
				public Integer DEPARTAMENTO_RESIDENCIALength(){
				    return null;
				}
				public Integer DEPARTAMENTO_RESIDENCIAPrecision(){
				    return null;
				}
				public String DEPARTAMENTO_RESIDENCIADefault(){
				
					return "";
				
				}
				public String DEPARTAMENTO_RESIDENCIAComment(){
				
				    return "";
				
				}
				public String DEPARTAMENTO_RESIDENCIAPattern(){
				
					return "";
				
				}
				public String DEPARTAMENTO_RESIDENCIAOriginalDbColumnName(){
				
					return "DEPARTAMENTO_RESIDENCIA";
				
				}

				
			    public String MUNICIPIO_RESIDENCIA;

				public String getMUNICIPIO_RESIDENCIA () {
					return this.MUNICIPIO_RESIDENCIA;
				}

				public Boolean MUNICIPIO_RESIDENCIAIsNullable(){
				    return true;
				}
				public Boolean MUNICIPIO_RESIDENCIAIsKey(){
				    return false;
				}
				public Integer MUNICIPIO_RESIDENCIALength(){
				    return null;
				}
				public Integer MUNICIPIO_RESIDENCIAPrecision(){
				    return null;
				}
				public String MUNICIPIO_RESIDENCIADefault(){
				
					return "";
				
				}
				public String MUNICIPIO_RESIDENCIAComment(){
				
				    return "";
				
				}
				public String MUNICIPIO_RESIDENCIAPattern(){
				
					return "";
				
				}
				public String MUNICIPIO_RESIDENCIAOriginalDbColumnName(){
				
					return "MUNICIPIO_RESIDENCIA";
				
				}

				
			    public String BARRIO;

				public String getBARRIO () {
					return this.BARRIO;
				}

				public Boolean BARRIOIsNullable(){
				    return true;
				}
				public Boolean BARRIOIsKey(){
				    return false;
				}
				public Integer BARRIOLength(){
				    return null;
				}
				public Integer BARRIOPrecision(){
				    return null;
				}
				public String BARRIODefault(){
				
					return "";
				
				}
				public String BARRIOComment(){
				
				    return "";
				
				}
				public String BARRIOPattern(){
				
					return "";
				
				}
				public String BARRIOOriginalDbColumnName(){
				
					return "BARRIO";
				
				}

				
			    public String DIRECCION;

				public String getDIRECCION () {
					return this.DIRECCION;
				}

				public Boolean DIRECCIONIsNullable(){
				    return true;
				}
				public Boolean DIRECCIONIsKey(){
				    return false;
				}
				public Integer DIRECCIONLength(){
				    return null;
				}
				public Integer DIRECCIONPrecision(){
				    return null;
				}
				public String DIRECCIONDefault(){
				
					return "";
				
				}
				public String DIRECCIONComment(){
				
				    return "";
				
				}
				public String DIRECCIONPattern(){
				
					return "";
				
				}
				public String DIRECCIONOriginalDbColumnName(){
				
					return "DIRECCION";
				
				}

				
			    public String TELEFONO;

				public String getTELEFONO () {
					return this.TELEFONO;
				}

				public Boolean TELEFONOIsNullable(){
				    return true;
				}
				public Boolean TELEFONOIsKey(){
				    return false;
				}
				public Integer TELEFONOLength(){
				    return null;
				}
				public Integer TELEFONOPrecision(){
				    return null;
				}
				public String TELEFONODefault(){
				
					return "";
				
				}
				public String TELEFONOComment(){
				
				    return "";
				
				}
				public String TELEFONOPattern(){
				
					return "";
				
				}
				public String TELEFONOOriginalDbColumnName(){
				
					return "TELEFONO";
				
				}

				
			    public String GRUPO_ETNICO;

				public String getGRUPO_ETNICO () {
					return this.GRUPO_ETNICO;
				}

				public Boolean GRUPO_ETNICOIsNullable(){
				    return true;
				}
				public Boolean GRUPO_ETNICOIsKey(){
				    return false;
				}
				public Integer GRUPO_ETNICOLength(){
				    return null;
				}
				public Integer GRUPO_ETNICOPrecision(){
				    return null;
				}
				public String GRUPO_ETNICODefault(){
				
					return "";
				
				}
				public String GRUPO_ETNICOComment(){
				
				    return "";
				
				}
				public String GRUPO_ETNICOPattern(){
				
					return "";
				
				}
				public String GRUPO_ETNICOOriginalDbColumnName(){
				
					return "GRUPO_ETNICO";
				
				}

				
			    public String DESPLAZADA;

				public String getDESPLAZADA () {
					return this.DESPLAZADA;
				}

				public Boolean DESPLAZADAIsNullable(){
				    return true;
				}
				public Boolean DESPLAZADAIsKey(){
				    return false;
				}
				public Integer DESPLAZADALength(){
				    return null;
				}
				public Integer DESPLAZADAPrecision(){
				    return null;
				}
				public String DESPLAZADADefault(){
				
					return "";
				
				}
				public String DESPLAZADAComment(){
				
				    return "";
				
				}
				public String DESPLAZADAPattern(){
				
					return "";
				
				}
				public String DESPLAZADAOriginalDbColumnName(){
				
					return "DESPLAZADA";
				
				}

				
			    public String DISCAPACITADA;

				public String getDISCAPACITADA () {
					return this.DISCAPACITADA;
				}

				public Boolean DISCAPACITADAIsNullable(){
				    return true;
				}
				public Boolean DISCAPACITADAIsKey(){
				    return false;
				}
				public Integer DISCAPACITADALength(){
				    return null;
				}
				public Integer DISCAPACITADAPrecision(){
				    return null;
				}
				public String DISCAPACITADADefault(){
				
					return "";
				
				}
				public String DISCAPACITADAComment(){
				
				    return "";
				
				}
				public String DISCAPACITADAPattern(){
				
					return "";
				
				}
				public String DISCAPACITADAOriginalDbColumnName(){
				
					return "DISCAPACITADA";
				
				}

				
			    public String VICTIMA;

				public String getVICTIMA () {
					return this.VICTIMA;
				}

				public Boolean VICTIMAIsNullable(){
				    return true;
				}
				public Boolean VICTIMAIsKey(){
				    return false;
				}
				public Integer VICTIMALength(){
				    return null;
				}
				public Integer VICTIMAPrecision(){
				    return null;
				}
				public String VICTIMADefault(){
				
					return "";
				
				}
				public String VICTIMAComment(){
				
				    return "";
				
				}
				public String VICTIMAPattern(){
				
					return "";
				
				}
				public String VICTIMAOriginalDbColumnName(){
				
					return "VICTIMA";
				
				}

				
			    public String ZVEREDAL;

				public String getZVEREDAL () {
					return this.ZVEREDAL;
				}

				public Boolean ZVEREDALIsNullable(){
				    return true;
				}
				public Boolean ZVEREDALIsKey(){
				    return false;
				}
				public Integer ZVEREDALLength(){
				    return null;
				}
				public Integer ZVEREDALPrecision(){
				    return null;
				}
				public String ZVEREDALDefault(){
				
					return "";
				
				}
				public String ZVEREDALComment(){
				
				    return "";
				
				}
				public String ZVEREDALPattern(){
				
					return "";
				
				}
				public String ZVEREDALOriginalDbColumnName(){
				
					return "ZVEREDAL";
				
				}

				
			    public String PARENTESCO;

				public String getPARENTESCO () {
					return this.PARENTESCO;
				}

				public Boolean PARENTESCOIsNullable(){
				    return true;
				}
				public Boolean PARENTESCOIsKey(){
				    return false;
				}
				public Integer PARENTESCOLength(){
				    return null;
				}
				public Integer PARENTESCOPrecision(){
				    return null;
				}
				public String PARENTESCODefault(){
				
					return "";
				
				}
				public String PARENTESCOComment(){
				
				    return "";
				
				}
				public String PARENTESCOPattern(){
				
					return "";
				
				}
				public String PARENTESCOOriginalDbColumnName(){
				
					return "PARENTESCO";
				
				}

				
			    public String TIPO_DOCUMENTO_COTIZANTE;

				public String getTIPO_DOCUMENTO_COTIZANTE () {
					return this.TIPO_DOCUMENTO_COTIZANTE;
				}

				public Boolean TIPO_DOCUMENTO_COTIZANTEIsNullable(){
				    return true;
				}
				public Boolean TIPO_DOCUMENTO_COTIZANTEIsKey(){
				    return false;
				}
				public Integer TIPO_DOCUMENTO_COTIZANTELength(){
				    return null;
				}
				public Integer TIPO_DOCUMENTO_COTIZANTEPrecision(){
				    return null;
				}
				public String TIPO_DOCUMENTO_COTIZANTEDefault(){
				
					return "";
				
				}
				public String TIPO_DOCUMENTO_COTIZANTEComment(){
				
				    return "";
				
				}
				public String TIPO_DOCUMENTO_COTIZANTEPattern(){
				
					return "";
				
				}
				public String TIPO_DOCUMENTO_COTIZANTEOriginalDbColumnName(){
				
					return "TIPO_DOCUMENTO_COTIZANTE";
				
				}

				
			    public String NUMERO_DOCUMENTO_COTIZANTE;

				public String getNUMERO_DOCUMENTO_COTIZANTE () {
					return this.NUMERO_DOCUMENTO_COTIZANTE;
				}

				public Boolean NUMERO_DOCUMENTO_COTIZANTEIsNullable(){
				    return true;
				}
				public Boolean NUMERO_DOCUMENTO_COTIZANTEIsKey(){
				    return false;
				}
				public Integer NUMERO_DOCUMENTO_COTIZANTELength(){
				    return null;
				}
				public Integer NUMERO_DOCUMENTO_COTIZANTEPrecision(){
				    return null;
				}
				public String NUMERO_DOCUMENTO_COTIZANTEDefault(){
				
					return "";
				
				}
				public String NUMERO_DOCUMENTO_COTIZANTEComment(){
				
				    return "";
				
				}
				public String NUMERO_DOCUMENTO_COTIZANTEPattern(){
				
					return "";
				
				}
				public String NUMERO_DOCUMENTO_COTIZANTEOriginalDbColumnName(){
				
					return "NUMERO_DOCUMENTO_COTIZANTE";
				
				}

				
			    public String PRIMER_NOMBRE_COTIZANTE;

				public String getPRIMER_NOMBRE_COTIZANTE () {
					return this.PRIMER_NOMBRE_COTIZANTE;
				}

				public Boolean PRIMER_NOMBRE_COTIZANTEIsNullable(){
				    return true;
				}
				public Boolean PRIMER_NOMBRE_COTIZANTEIsKey(){
				    return false;
				}
				public Integer PRIMER_NOMBRE_COTIZANTELength(){
				    return null;
				}
				public Integer PRIMER_NOMBRE_COTIZANTEPrecision(){
				    return null;
				}
				public String PRIMER_NOMBRE_COTIZANTEDefault(){
				
					return "";
				
				}
				public String PRIMER_NOMBRE_COTIZANTEComment(){
				
				    return "";
				
				}
				public String PRIMER_NOMBRE_COTIZANTEPattern(){
				
					return "";
				
				}
				public String PRIMER_NOMBRE_COTIZANTEOriginalDbColumnName(){
				
					return "PRIMER_NOMBRE_COTIZANTE";
				
				}

				
			    public String SEGUNDO_NOMBRE_COTIZANTE;

				public String getSEGUNDO_NOMBRE_COTIZANTE () {
					return this.SEGUNDO_NOMBRE_COTIZANTE;
				}

				public Boolean SEGUNDO_NOMBRE_COTIZANTEIsNullable(){
				    return true;
				}
				public Boolean SEGUNDO_NOMBRE_COTIZANTEIsKey(){
				    return false;
				}
				public Integer SEGUNDO_NOMBRE_COTIZANTELength(){
				    return null;
				}
				public Integer SEGUNDO_NOMBRE_COTIZANTEPrecision(){
				    return null;
				}
				public String SEGUNDO_NOMBRE_COTIZANTEDefault(){
				
					return "";
				
				}
				public String SEGUNDO_NOMBRE_COTIZANTEComment(){
				
				    return "";
				
				}
				public String SEGUNDO_NOMBRE_COTIZANTEPattern(){
				
					return "";
				
				}
				public String SEGUNDO_NOMBRE_COTIZANTEOriginalDbColumnName(){
				
					return "SEGUNDO_NOMBRE_COTIZANTE";
				
				}

				
			    public String PRIMER_APELLIDO_COTIZANTE;

				public String getPRIMER_APELLIDO_COTIZANTE () {
					return this.PRIMER_APELLIDO_COTIZANTE;
				}

				public Boolean PRIMER_APELLIDO_COTIZANTEIsNullable(){
				    return true;
				}
				public Boolean PRIMER_APELLIDO_COTIZANTEIsKey(){
				    return false;
				}
				public Integer PRIMER_APELLIDO_COTIZANTELength(){
				    return null;
				}
				public Integer PRIMER_APELLIDO_COTIZANTEPrecision(){
				    return null;
				}
				public String PRIMER_APELLIDO_COTIZANTEDefault(){
				
					return "";
				
				}
				public String PRIMER_APELLIDO_COTIZANTEComment(){
				
				    return "";
				
				}
				public String PRIMER_APELLIDO_COTIZANTEPattern(){
				
					return "";
				
				}
				public String PRIMER_APELLIDO_COTIZANTEOriginalDbColumnName(){
				
					return "PRIMER_APELLIDO_COTIZANTE";
				
				}

				
			    public String SEGUNDO_APELLIDO_COTIZANTE;

				public String getSEGUNDO_APELLIDO_COTIZANTE () {
					return this.SEGUNDO_APELLIDO_COTIZANTE;
				}

				public Boolean SEGUNDO_APELLIDO_COTIZANTEIsNullable(){
				    return true;
				}
				public Boolean SEGUNDO_APELLIDO_COTIZANTEIsKey(){
				    return false;
				}
				public Integer SEGUNDO_APELLIDO_COTIZANTELength(){
				    return null;
				}
				public Integer SEGUNDO_APELLIDO_COTIZANTEPrecision(){
				    return null;
				}
				public String SEGUNDO_APELLIDO_COTIZANTEDefault(){
				
					return "";
				
				}
				public String SEGUNDO_APELLIDO_COTIZANTEComment(){
				
				    return "";
				
				}
				public String SEGUNDO_APELLIDO_COTIZANTEPattern(){
				
					return "";
				
				}
				public String SEGUNDO_APELLIDO_COTIZANTEOriginalDbColumnName(){
				
					return "SEGUNDO_APELLIDO_COTIZANTE";
				
				}

				
			    public String GRADO_COTIZANTE;

				public String getGRADO_COTIZANTE () {
					return this.GRADO_COTIZANTE;
				}

				public Boolean GRADO_COTIZANTEIsNullable(){
				    return true;
				}
				public Boolean GRADO_COTIZANTEIsKey(){
				    return false;
				}
				public Integer GRADO_COTIZANTELength(){
				    return null;
				}
				public Integer GRADO_COTIZANTEPrecision(){
				    return null;
				}
				public String GRADO_COTIZANTEDefault(){
				
					return "";
				
				}
				public String GRADO_COTIZANTEComment(){
				
				    return "";
				
				}
				public String GRADO_COTIZANTEPattern(){
				
					return "";
				
				}
				public String GRADO_COTIZANTEOriginalDbColumnName(){
				
					return "GRADO_COTIZANTE";
				
				}

				
			    public String ACOM_TDOCUMENTO;

				public String getACOM_TDOCUMENTO () {
					return this.ACOM_TDOCUMENTO;
				}

				public Boolean ACOM_TDOCUMENTOIsNullable(){
				    return true;
				}
				public Boolean ACOM_TDOCUMENTOIsKey(){
				    return false;
				}
				public Integer ACOM_TDOCUMENTOLength(){
				    return null;
				}
				public Integer ACOM_TDOCUMENTOPrecision(){
				    return null;
				}
				public String ACOM_TDOCUMENTODefault(){
				
					return "";
				
				}
				public String ACOM_TDOCUMENTOComment(){
				
				    return "";
				
				}
				public String ACOM_TDOCUMENTOPattern(){
				
					return "";
				
				}
				public String ACOM_TDOCUMENTOOriginalDbColumnName(){
				
					return "ACOM_TDOCUMENTO";
				
				}

				
			    public String ACOM_DOCUMENTO;

				public String getACOM_DOCUMENTO () {
					return this.ACOM_DOCUMENTO;
				}

				public Boolean ACOM_DOCUMENTOIsNullable(){
				    return true;
				}
				public Boolean ACOM_DOCUMENTOIsKey(){
				    return false;
				}
				public Integer ACOM_DOCUMENTOLength(){
				    return null;
				}
				public Integer ACOM_DOCUMENTOPrecision(){
				    return null;
				}
				public String ACOM_DOCUMENTODefault(){
				
					return "";
				
				}
				public String ACOM_DOCUMENTOComment(){
				
				    return "";
				
				}
				public String ACOM_DOCUMENTOPattern(){
				
					return "";
				
				}
				public String ACOM_DOCUMENTOOriginalDbColumnName(){
				
					return "ACOM_DOCUMENTO";
				
				}

				
			    public String ACOM_NOMBRE1;

				public String getACOM_NOMBRE1 () {
					return this.ACOM_NOMBRE1;
				}

				public Boolean ACOM_NOMBRE1IsNullable(){
				    return true;
				}
				public Boolean ACOM_NOMBRE1IsKey(){
				    return false;
				}
				public Integer ACOM_NOMBRE1Length(){
				    return null;
				}
				public Integer ACOM_NOMBRE1Precision(){
				    return null;
				}
				public String ACOM_NOMBRE1Default(){
				
					return "";
				
				}
				public String ACOM_NOMBRE1Comment(){
				
				    return "";
				
				}
				public String ACOM_NOMBRE1Pattern(){
				
					return "";
				
				}
				public String ACOM_NOMBRE1OriginalDbColumnName(){
				
					return "ACOM_NOMBRE1";
				
				}

				
			    public String ACOM_NOMBRE2;

				public String getACOM_NOMBRE2 () {
					return this.ACOM_NOMBRE2;
				}

				public Boolean ACOM_NOMBRE2IsNullable(){
				    return true;
				}
				public Boolean ACOM_NOMBRE2IsKey(){
				    return false;
				}
				public Integer ACOM_NOMBRE2Length(){
				    return null;
				}
				public Integer ACOM_NOMBRE2Precision(){
				    return null;
				}
				public String ACOM_NOMBRE2Default(){
				
					return "";
				
				}
				public String ACOM_NOMBRE2Comment(){
				
				    return "";
				
				}
				public String ACOM_NOMBRE2Pattern(){
				
					return "";
				
				}
				public String ACOM_NOMBRE2OriginalDbColumnName(){
				
					return "ACOM_NOMBRE2";
				
				}

				
			    public String ACOM_APELLIDO1;

				public String getACOM_APELLIDO1 () {
					return this.ACOM_APELLIDO1;
				}

				public Boolean ACOM_APELLIDO1IsNullable(){
				    return true;
				}
				public Boolean ACOM_APELLIDO1IsKey(){
				    return false;
				}
				public Integer ACOM_APELLIDO1Length(){
				    return null;
				}
				public Integer ACOM_APELLIDO1Precision(){
				    return null;
				}
				public String ACOM_APELLIDO1Default(){
				
					return "";
				
				}
				public String ACOM_APELLIDO1Comment(){
				
				    return "";
				
				}
				public String ACOM_APELLIDO1Pattern(){
				
					return "";
				
				}
				public String ACOM_APELLIDO1OriginalDbColumnName(){
				
					return "ACOM_APELLIDO1";
				
				}

				
			    public String ACOM_APELLIDO2;

				public String getACOM_APELLIDO2 () {
					return this.ACOM_APELLIDO2;
				}

				public Boolean ACOM_APELLIDO2IsNullable(){
				    return true;
				}
				public Boolean ACOM_APELLIDO2IsKey(){
				    return false;
				}
				public Integer ACOM_APELLIDO2Length(){
				    return null;
				}
				public Integer ACOM_APELLIDO2Precision(){
				    return null;
				}
				public String ACOM_APELLIDO2Default(){
				
					return "";
				
				}
				public String ACOM_APELLIDO2Comment(){
				
				    return "";
				
				}
				public String ACOM_APELLIDO2Pattern(){
				
					return "";
				
				}
				public String ACOM_APELLIDO2OriginalDbColumnName(){
				
					return "ACOM_APELLIDO2";
				
				}

				
			    public String ACOM_PARENTESCO;

				public String getACOM_PARENTESCO () {
					return this.ACOM_PARENTESCO;
				}

				public Boolean ACOM_PARENTESCOIsNullable(){
				    return true;
				}
				public Boolean ACOM_PARENTESCOIsKey(){
				    return false;
				}
				public Integer ACOM_PARENTESCOLength(){
				    return null;
				}
				public Integer ACOM_PARENTESCOPrecision(){
				    return null;
				}
				public String ACOM_PARENTESCODefault(){
				
					return "";
				
				}
				public String ACOM_PARENTESCOComment(){
				
				    return "";
				
				}
				public String ACOM_PARENTESCOPattern(){
				
					return "";
				
				}
				public String ACOM_PARENTESCOOriginalDbColumnName(){
				
					return "ACOM_PARENTESCO";
				
				}

				
			    public String ACOM_TELEFONO;

				public String getACOM_TELEFONO () {
					return this.ACOM_TELEFONO;
				}

				public Boolean ACOM_TELEFONOIsNullable(){
				    return true;
				}
				public Boolean ACOM_TELEFONOIsKey(){
				    return false;
				}
				public Integer ACOM_TELEFONOLength(){
				    return null;
				}
				public Integer ACOM_TELEFONOPrecision(){
				    return null;
				}
				public String ACOM_TELEFONODefault(){
				
					return "";
				
				}
				public String ACOM_TELEFONOComment(){
				
				    return "";
				
				}
				public String ACOM_TELEFONOPattern(){
				
					return "";
				
				}
				public String ACOM_TELEFONOOriginalDbColumnName(){
				
					return "ACOM_TELEFONO";
				
				}

				
			    public String ACOM_CORREO;

				public String getACOM_CORREO () {
					return this.ACOM_CORREO;
				}

				public Boolean ACOM_CORREOIsNullable(){
				    return true;
				}
				public Boolean ACOM_CORREOIsKey(){
				    return false;
				}
				public Integer ACOM_CORREOLength(){
				    return null;
				}
				public Integer ACOM_CORREOPrecision(){
				    return null;
				}
				public String ACOM_CORREODefault(){
				
					return "";
				
				}
				public String ACOM_CORREOComment(){
				
				    return "";
				
				}
				public String ACOM_CORREOPattern(){
				
					return "";
				
				}
				public String ACOM_CORREOOriginalDbColumnName(){
				
					return "ACOM_CORREO";
				
				}

				
			    public String DAPLICADAS_ID;

				public String getDAPLICADAS_ID () {
					return this.DAPLICADAS_ID;
				}

				public Boolean DAPLICADAS_IDIsNullable(){
				    return true;
				}
				public Boolean DAPLICADAS_IDIsKey(){
				    return false;
				}
				public Integer DAPLICADAS_IDLength(){
				    return null;
				}
				public Integer DAPLICADAS_IDPrecision(){
				    return null;
				}
				public String DAPLICADAS_IDDefault(){
				
					return "";
				
				}
				public String DAPLICADAS_IDComment(){
				
				    return "";
				
				}
				public String DAPLICADAS_IDPattern(){
				
					return "";
				
				}
				public String DAPLICADAS_IDOriginalDbColumnName(){
				
					return "DAPLICADAS_ID";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_VAC_CONSOLIDADOS_VAC_RegistroVacunacion.length) {
				if(length < 1024 && commonByteArray_VAC_CONSOLIDADOS_VAC_RegistroVacunacion.length == 0) {
   					commonByteArray_VAC_CONSOLIDADOS_VAC_RegistroVacunacion = new byte[1024];
				} else {
   					commonByteArray_VAC_CONSOLIDADOS_VAC_RegistroVacunacion = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_VAC_CONSOLIDADOS_VAC_RegistroVacunacion, 0, length);
			strReturn = new String(commonByteArray_VAC_CONSOLIDADOS_VAC_RegistroVacunacion, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_VAC_CONSOLIDADOS_VAC_RegistroVacunacion.length) {
				if(length < 1024 && commonByteArray_VAC_CONSOLIDADOS_VAC_RegistroVacunacion.length == 0) {
   					commonByteArray_VAC_CONSOLIDADOS_VAC_RegistroVacunacion = new byte[1024];
				} else {
   					commonByteArray_VAC_CONSOLIDADOS_VAC_RegistroVacunacion = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_VAC_CONSOLIDADOS_VAC_RegistroVacunacion, 0, length);
			strReturn = new String(commonByteArray_VAC_CONSOLIDADOS_VAC_RegistroVacunacion, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_VAC_CONSOLIDADOS_VAC_RegistroVacunacion) {

        	try {

        		int length = 0;
		
						this.ORDEN = (BigDecimal) dis.readObject();
					
					this.FECHA_REGISTRO = readString(dis);
					
					this.FECHA_APLICACION = readString(dis);
					
					this.TIPO_DOCUMENTO = readString(dis);
					
					this.NUMERO_DOCUMENTO = readString(dis);
					
					this.FECHA_NACIMIENTO = readString(dis);
					
					this.TIPO_EDAD = readString(dis);
					
						this.EDAD = (BigDecimal) dis.readObject();
					
					this.SEXO = readString(dis);
					
					this.PRIMER_NOMBRE = readString(dis);
					
					this.SEGUNDO_NOMBRE = readString(dis);
					
					this.PRIMER_APELLIDO = readString(dis);
					
					this.SEGUNDO_APELLIDO = readString(dis);
					
					this.REGIMEN = readString(dis);
					
					this.EPS = readString(dis);
					
					this.GRADO = readString(dis);
					
					this.TIPO_AFILIACION = readString(dis);
					
					this.FUERZA_ADSCRIPCION = readString(dis);
					
					this.ESM_ADSCRIPCION = readString(dis);
					
					this.FUERZA = readString(dis);
					
					this.UORG = readString(dis);
					
					this.USUARIO = readString(dis);
					
					this.PUNTO_VACUNADOR = readString(dis);
					
					this.NOMBRE_VACUNADOR = readString(dis);
					
					this.DEPARTAMENTO_RESIDENCIA = readString(dis);
					
					this.MUNICIPIO_RESIDENCIA = readString(dis);
					
					this.BARRIO = readString(dis);
					
					this.DIRECCION = readString(dis);
					
					this.TELEFONO = readString(dis);
					
					this.GRUPO_ETNICO = readString(dis);
					
					this.DESPLAZADA = readString(dis);
					
					this.DISCAPACITADA = readString(dis);
					
					this.VICTIMA = readString(dis);
					
					this.ZVEREDAL = readString(dis);
					
					this.PARENTESCO = readString(dis);
					
					this.TIPO_DOCUMENTO_COTIZANTE = readString(dis);
					
					this.NUMERO_DOCUMENTO_COTIZANTE = readString(dis);
					
					this.PRIMER_NOMBRE_COTIZANTE = readString(dis);
					
					this.SEGUNDO_NOMBRE_COTIZANTE = readString(dis);
					
					this.PRIMER_APELLIDO_COTIZANTE = readString(dis);
					
					this.SEGUNDO_APELLIDO_COTIZANTE = readString(dis);
					
					this.GRADO_COTIZANTE = readString(dis);
					
					this.ACOM_TDOCUMENTO = readString(dis);
					
					this.ACOM_DOCUMENTO = readString(dis);
					
					this.ACOM_NOMBRE1 = readString(dis);
					
					this.ACOM_NOMBRE2 = readString(dis);
					
					this.ACOM_APELLIDO1 = readString(dis);
					
					this.ACOM_APELLIDO2 = readString(dis);
					
					this.ACOM_PARENTESCO = readString(dis);
					
					this.ACOM_TELEFONO = readString(dis);
					
					this.ACOM_CORREO = readString(dis);
					
					this.DAPLICADAS_ID = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_VAC_CONSOLIDADOS_VAC_RegistroVacunacion) {

        	try {

        		int length = 0;
		
						this.ORDEN = (BigDecimal) dis.readObject();
					
					this.FECHA_REGISTRO = readString(dis);
					
					this.FECHA_APLICACION = readString(dis);
					
					this.TIPO_DOCUMENTO = readString(dis);
					
					this.NUMERO_DOCUMENTO = readString(dis);
					
					this.FECHA_NACIMIENTO = readString(dis);
					
					this.TIPO_EDAD = readString(dis);
					
						this.EDAD = (BigDecimal) dis.readObject();
					
					this.SEXO = readString(dis);
					
					this.PRIMER_NOMBRE = readString(dis);
					
					this.SEGUNDO_NOMBRE = readString(dis);
					
					this.PRIMER_APELLIDO = readString(dis);
					
					this.SEGUNDO_APELLIDO = readString(dis);
					
					this.REGIMEN = readString(dis);
					
					this.EPS = readString(dis);
					
					this.GRADO = readString(dis);
					
					this.TIPO_AFILIACION = readString(dis);
					
					this.FUERZA_ADSCRIPCION = readString(dis);
					
					this.ESM_ADSCRIPCION = readString(dis);
					
					this.FUERZA = readString(dis);
					
					this.UORG = readString(dis);
					
					this.USUARIO = readString(dis);
					
					this.PUNTO_VACUNADOR = readString(dis);
					
					this.NOMBRE_VACUNADOR = readString(dis);
					
					this.DEPARTAMENTO_RESIDENCIA = readString(dis);
					
					this.MUNICIPIO_RESIDENCIA = readString(dis);
					
					this.BARRIO = readString(dis);
					
					this.DIRECCION = readString(dis);
					
					this.TELEFONO = readString(dis);
					
					this.GRUPO_ETNICO = readString(dis);
					
					this.DESPLAZADA = readString(dis);
					
					this.DISCAPACITADA = readString(dis);
					
					this.VICTIMA = readString(dis);
					
					this.ZVEREDAL = readString(dis);
					
					this.PARENTESCO = readString(dis);
					
					this.TIPO_DOCUMENTO_COTIZANTE = readString(dis);
					
					this.NUMERO_DOCUMENTO_COTIZANTE = readString(dis);
					
					this.PRIMER_NOMBRE_COTIZANTE = readString(dis);
					
					this.SEGUNDO_NOMBRE_COTIZANTE = readString(dis);
					
					this.PRIMER_APELLIDO_COTIZANTE = readString(dis);
					
					this.SEGUNDO_APELLIDO_COTIZANTE = readString(dis);
					
					this.GRADO_COTIZANTE = readString(dis);
					
					this.ACOM_TDOCUMENTO = readString(dis);
					
					this.ACOM_DOCUMENTO = readString(dis);
					
					this.ACOM_NOMBRE1 = readString(dis);
					
					this.ACOM_NOMBRE2 = readString(dis);
					
					this.ACOM_APELLIDO1 = readString(dis);
					
					this.ACOM_APELLIDO2 = readString(dis);
					
					this.ACOM_PARENTESCO = readString(dis);
					
					this.ACOM_TELEFONO = readString(dis);
					
					this.ACOM_CORREO = readString(dis);
					
					this.DAPLICADAS_ID = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.ORDEN);
					
					// String
				
						writeString(this.FECHA_REGISTRO,dos);
					
					// String
				
						writeString(this.FECHA_APLICACION,dos);
					
					// String
				
						writeString(this.TIPO_DOCUMENTO,dos);
					
					// String
				
						writeString(this.NUMERO_DOCUMENTO,dos);
					
					// String
				
						writeString(this.FECHA_NACIMIENTO,dos);
					
					// String
				
						writeString(this.TIPO_EDAD,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.EDAD);
					
					// String
				
						writeString(this.SEXO,dos);
					
					// String
				
						writeString(this.PRIMER_NOMBRE,dos);
					
					// String
				
						writeString(this.SEGUNDO_NOMBRE,dos);
					
					// String
				
						writeString(this.PRIMER_APELLIDO,dos);
					
					// String
				
						writeString(this.SEGUNDO_APELLIDO,dos);
					
					// String
				
						writeString(this.REGIMEN,dos);
					
					// String
				
						writeString(this.EPS,dos);
					
					// String
				
						writeString(this.GRADO,dos);
					
					// String
				
						writeString(this.TIPO_AFILIACION,dos);
					
					// String
				
						writeString(this.FUERZA_ADSCRIPCION,dos);
					
					// String
				
						writeString(this.ESM_ADSCRIPCION,dos);
					
					// String
				
						writeString(this.FUERZA,dos);
					
					// String
				
						writeString(this.UORG,dos);
					
					// String
				
						writeString(this.USUARIO,dos);
					
					// String
				
						writeString(this.PUNTO_VACUNADOR,dos);
					
					// String
				
						writeString(this.NOMBRE_VACUNADOR,dos);
					
					// String
				
						writeString(this.DEPARTAMENTO_RESIDENCIA,dos);
					
					// String
				
						writeString(this.MUNICIPIO_RESIDENCIA,dos);
					
					// String
				
						writeString(this.BARRIO,dos);
					
					// String
				
						writeString(this.DIRECCION,dos);
					
					// String
				
						writeString(this.TELEFONO,dos);
					
					// String
				
						writeString(this.GRUPO_ETNICO,dos);
					
					// String
				
						writeString(this.DESPLAZADA,dos);
					
					// String
				
						writeString(this.DISCAPACITADA,dos);
					
					// String
				
						writeString(this.VICTIMA,dos);
					
					// String
				
						writeString(this.ZVEREDAL,dos);
					
					// String
				
						writeString(this.PARENTESCO,dos);
					
					// String
				
						writeString(this.TIPO_DOCUMENTO_COTIZANTE,dos);
					
					// String
				
						writeString(this.NUMERO_DOCUMENTO_COTIZANTE,dos);
					
					// String
				
						writeString(this.PRIMER_NOMBRE_COTIZANTE,dos);
					
					// String
				
						writeString(this.SEGUNDO_NOMBRE_COTIZANTE,dos);
					
					// String
				
						writeString(this.PRIMER_APELLIDO_COTIZANTE,dos);
					
					// String
				
						writeString(this.SEGUNDO_APELLIDO_COTIZANTE,dos);
					
					// String
				
						writeString(this.GRADO_COTIZANTE,dos);
					
					// String
				
						writeString(this.ACOM_TDOCUMENTO,dos);
					
					// String
				
						writeString(this.ACOM_DOCUMENTO,dos);
					
					// String
				
						writeString(this.ACOM_NOMBRE1,dos);
					
					// String
				
						writeString(this.ACOM_NOMBRE2,dos);
					
					// String
				
						writeString(this.ACOM_APELLIDO1,dos);
					
					// String
				
						writeString(this.ACOM_APELLIDO2,dos);
					
					// String
				
						writeString(this.ACOM_PARENTESCO,dos);
					
					// String
				
						writeString(this.ACOM_TELEFONO,dos);
					
					// String
				
						writeString(this.ACOM_CORREO,dos);
					
					// String
				
						writeString(this.DAPLICADAS_ID,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ORDEN);
					
					// String
				
						writeString(this.FECHA_REGISTRO,dos);
					
					// String
				
						writeString(this.FECHA_APLICACION,dos);
					
					// String
				
						writeString(this.TIPO_DOCUMENTO,dos);
					
					// String
				
						writeString(this.NUMERO_DOCUMENTO,dos);
					
					// String
				
						writeString(this.FECHA_NACIMIENTO,dos);
					
					// String
				
						writeString(this.TIPO_EDAD,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.EDAD);
					
					// String
				
						writeString(this.SEXO,dos);
					
					// String
				
						writeString(this.PRIMER_NOMBRE,dos);
					
					// String
				
						writeString(this.SEGUNDO_NOMBRE,dos);
					
					// String
				
						writeString(this.PRIMER_APELLIDO,dos);
					
					// String
				
						writeString(this.SEGUNDO_APELLIDO,dos);
					
					// String
				
						writeString(this.REGIMEN,dos);
					
					// String
				
						writeString(this.EPS,dos);
					
					// String
				
						writeString(this.GRADO,dos);
					
					// String
				
						writeString(this.TIPO_AFILIACION,dos);
					
					// String
				
						writeString(this.FUERZA_ADSCRIPCION,dos);
					
					// String
				
						writeString(this.ESM_ADSCRIPCION,dos);
					
					// String
				
						writeString(this.FUERZA,dos);
					
					// String
				
						writeString(this.UORG,dos);
					
					// String
				
						writeString(this.USUARIO,dos);
					
					// String
				
						writeString(this.PUNTO_VACUNADOR,dos);
					
					// String
				
						writeString(this.NOMBRE_VACUNADOR,dos);
					
					// String
				
						writeString(this.DEPARTAMENTO_RESIDENCIA,dos);
					
					// String
				
						writeString(this.MUNICIPIO_RESIDENCIA,dos);
					
					// String
				
						writeString(this.BARRIO,dos);
					
					// String
				
						writeString(this.DIRECCION,dos);
					
					// String
				
						writeString(this.TELEFONO,dos);
					
					// String
				
						writeString(this.GRUPO_ETNICO,dos);
					
					// String
				
						writeString(this.DESPLAZADA,dos);
					
					// String
				
						writeString(this.DISCAPACITADA,dos);
					
					// String
				
						writeString(this.VICTIMA,dos);
					
					// String
				
						writeString(this.ZVEREDAL,dos);
					
					// String
				
						writeString(this.PARENTESCO,dos);
					
					// String
				
						writeString(this.TIPO_DOCUMENTO_COTIZANTE,dos);
					
					// String
				
						writeString(this.NUMERO_DOCUMENTO_COTIZANTE,dos);
					
					// String
				
						writeString(this.PRIMER_NOMBRE_COTIZANTE,dos);
					
					// String
				
						writeString(this.SEGUNDO_NOMBRE_COTIZANTE,dos);
					
					// String
				
						writeString(this.PRIMER_APELLIDO_COTIZANTE,dos);
					
					// String
				
						writeString(this.SEGUNDO_APELLIDO_COTIZANTE,dos);
					
					// String
				
						writeString(this.GRADO_COTIZANTE,dos);
					
					// String
				
						writeString(this.ACOM_TDOCUMENTO,dos);
					
					// String
				
						writeString(this.ACOM_DOCUMENTO,dos);
					
					// String
				
						writeString(this.ACOM_NOMBRE1,dos);
					
					// String
				
						writeString(this.ACOM_NOMBRE2,dos);
					
					// String
				
						writeString(this.ACOM_APELLIDO1,dos);
					
					// String
				
						writeString(this.ACOM_APELLIDO2,dos);
					
					// String
				
						writeString(this.ACOM_PARENTESCO,dos);
					
					// String
				
						writeString(this.ACOM_TELEFONO,dos);
					
					// String
				
						writeString(this.ACOM_CORREO,dos);
					
					// String
				
						writeString(this.DAPLICADAS_ID,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ORDEN="+String.valueOf(ORDEN));
		sb.append(",FECHA_REGISTRO="+FECHA_REGISTRO);
		sb.append(",FECHA_APLICACION="+FECHA_APLICACION);
		sb.append(",TIPO_DOCUMENTO="+TIPO_DOCUMENTO);
		sb.append(",NUMERO_DOCUMENTO="+NUMERO_DOCUMENTO);
		sb.append(",FECHA_NACIMIENTO="+FECHA_NACIMIENTO);
		sb.append(",TIPO_EDAD="+TIPO_EDAD);
		sb.append(",EDAD="+String.valueOf(EDAD));
		sb.append(",SEXO="+SEXO);
		sb.append(",PRIMER_NOMBRE="+PRIMER_NOMBRE);
		sb.append(",SEGUNDO_NOMBRE="+SEGUNDO_NOMBRE);
		sb.append(",PRIMER_APELLIDO="+PRIMER_APELLIDO);
		sb.append(",SEGUNDO_APELLIDO="+SEGUNDO_APELLIDO);
		sb.append(",REGIMEN="+REGIMEN);
		sb.append(",EPS="+EPS);
		sb.append(",GRADO="+GRADO);
		sb.append(",TIPO_AFILIACION="+TIPO_AFILIACION);
		sb.append(",FUERZA_ADSCRIPCION="+FUERZA_ADSCRIPCION);
		sb.append(",ESM_ADSCRIPCION="+ESM_ADSCRIPCION);
		sb.append(",FUERZA="+FUERZA);
		sb.append(",UORG="+UORG);
		sb.append(",USUARIO="+USUARIO);
		sb.append(",PUNTO_VACUNADOR="+PUNTO_VACUNADOR);
		sb.append(",NOMBRE_VACUNADOR="+NOMBRE_VACUNADOR);
		sb.append(",DEPARTAMENTO_RESIDENCIA="+DEPARTAMENTO_RESIDENCIA);
		sb.append(",MUNICIPIO_RESIDENCIA="+MUNICIPIO_RESIDENCIA);
		sb.append(",BARRIO="+BARRIO);
		sb.append(",DIRECCION="+DIRECCION);
		sb.append(",TELEFONO="+TELEFONO);
		sb.append(",GRUPO_ETNICO="+GRUPO_ETNICO);
		sb.append(",DESPLAZADA="+DESPLAZADA);
		sb.append(",DISCAPACITADA="+DISCAPACITADA);
		sb.append(",VICTIMA="+VICTIMA);
		sb.append(",ZVEREDAL="+ZVEREDAL);
		sb.append(",PARENTESCO="+PARENTESCO);
		sb.append(",TIPO_DOCUMENTO_COTIZANTE="+TIPO_DOCUMENTO_COTIZANTE);
		sb.append(",NUMERO_DOCUMENTO_COTIZANTE="+NUMERO_DOCUMENTO_COTIZANTE);
		sb.append(",PRIMER_NOMBRE_COTIZANTE="+PRIMER_NOMBRE_COTIZANTE);
		sb.append(",SEGUNDO_NOMBRE_COTIZANTE="+SEGUNDO_NOMBRE_COTIZANTE);
		sb.append(",PRIMER_APELLIDO_COTIZANTE="+PRIMER_APELLIDO_COTIZANTE);
		sb.append(",SEGUNDO_APELLIDO_COTIZANTE="+SEGUNDO_APELLIDO_COTIZANTE);
		sb.append(",GRADO_COTIZANTE="+GRADO_COTIZANTE);
		sb.append(",ACOM_TDOCUMENTO="+ACOM_TDOCUMENTO);
		sb.append(",ACOM_DOCUMENTO="+ACOM_DOCUMENTO);
		sb.append(",ACOM_NOMBRE1="+ACOM_NOMBRE1);
		sb.append(",ACOM_NOMBRE2="+ACOM_NOMBRE2);
		sb.append(",ACOM_APELLIDO1="+ACOM_APELLIDO1);
		sb.append(",ACOM_APELLIDO2="+ACOM_APELLIDO2);
		sb.append(",ACOM_PARENTESCO="+ACOM_PARENTESCO);
		sb.append(",ACOM_TELEFONO="+ACOM_TELEFONO);
		sb.append(",ACOM_CORREO="+ACOM_CORREO);
		sb.append(",DAPLICADAS_ID="+DAPLICADAS_ID);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row10Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class after_tHashInput_3Struct implements routines.system.IPersistableRow<after_tHashInput_3Struct> {
    final static byte[] commonByteArrayLock_VAC_CONSOLIDADOS_VAC_RegistroVacunacion = new byte[0];
    static byte[] commonByteArray_VAC_CONSOLIDADOS_VAC_RegistroVacunacion = new byte[0];

	
			    public BigDecimal ORDEN;

				public BigDecimal getORDEN () {
					return this.ORDEN;
				}

				public Boolean ORDENIsNullable(){
				    return true;
				}
				public Boolean ORDENIsKey(){
				    return false;
				}
				public Integer ORDENLength(){
				    return null;
				}
				public Integer ORDENPrecision(){
				    return null;
				}
				public String ORDENDefault(){
				
					return "";
				
				}
				public String ORDENComment(){
				
				    return "";
				
				}
				public String ORDENPattern(){
				
					return "";
				
				}
				public String ORDENOriginalDbColumnName(){
				
					return "ORDEN";
				
				}

				
			    public String FECHA_REGISTRO;

				public String getFECHA_REGISTRO () {
					return this.FECHA_REGISTRO;
				}

				public Boolean FECHA_REGISTROIsNullable(){
				    return true;
				}
				public Boolean FECHA_REGISTROIsKey(){
				    return false;
				}
				public Integer FECHA_REGISTROLength(){
				    return null;
				}
				public Integer FECHA_REGISTROPrecision(){
				    return null;
				}
				public String FECHA_REGISTRODefault(){
				
					return null;
				
				}
				public String FECHA_REGISTROComment(){
				
				    return "";
				
				}
				public String FECHA_REGISTROPattern(){
				
					return "";
				
				}
				public String FECHA_REGISTROOriginalDbColumnName(){
				
					return "FECHA_REGISTRO";
				
				}

				
			    public String FECHA_APLICACION;

				public String getFECHA_APLICACION () {
					return this.FECHA_APLICACION;
				}

				public Boolean FECHA_APLICACIONIsNullable(){
				    return true;
				}
				public Boolean FECHA_APLICACIONIsKey(){
				    return false;
				}
				public Integer FECHA_APLICACIONLength(){
				    return null;
				}
				public Integer FECHA_APLICACIONPrecision(){
				    return null;
				}
				public String FECHA_APLICACIONDefault(){
				
					return null;
				
				}
				public String FECHA_APLICACIONComment(){
				
				    return "";
				
				}
				public String FECHA_APLICACIONPattern(){
				
					return "";
				
				}
				public String FECHA_APLICACIONOriginalDbColumnName(){
				
					return "FECHA_APLICACION";
				
				}

				
			    public String TIPO_DOCUMENTO;

				public String getTIPO_DOCUMENTO () {
					return this.TIPO_DOCUMENTO;
				}

				public Boolean TIPO_DOCUMENTOIsNullable(){
				    return false;
				}
				public Boolean TIPO_DOCUMENTOIsKey(){
				    return false;
				}
				public Integer TIPO_DOCUMENTOLength(){
				    return null;
				}
				public Integer TIPO_DOCUMENTOPrecision(){
				    return null;
				}
				public String TIPO_DOCUMENTODefault(){
				
					return null;
				
				}
				public String TIPO_DOCUMENTOComment(){
				
				    return "";
				
				}
				public String TIPO_DOCUMENTOPattern(){
				
					return "";
				
				}
				public String TIPO_DOCUMENTOOriginalDbColumnName(){
				
					return "TIPO_DOCUMENTO";
				
				}

				
			    public String NUMERO_DOCUMENTO;

				public String getNUMERO_DOCUMENTO () {
					return this.NUMERO_DOCUMENTO;
				}

				public Boolean NUMERO_DOCUMENTOIsNullable(){
				    return false;
				}
				public Boolean NUMERO_DOCUMENTOIsKey(){
				    return false;
				}
				public Integer NUMERO_DOCUMENTOLength(){
				    return null;
				}
				public Integer NUMERO_DOCUMENTOPrecision(){
				    return null;
				}
				public String NUMERO_DOCUMENTODefault(){
				
					return null;
				
				}
				public String NUMERO_DOCUMENTOComment(){
				
				    return "";
				
				}
				public String NUMERO_DOCUMENTOPattern(){
				
					return "";
				
				}
				public String NUMERO_DOCUMENTOOriginalDbColumnName(){
				
					return "NUMERO_DOCUMENTO";
				
				}

				
			    public String FECHA_NACIMIENTO;

				public String getFECHA_NACIMIENTO () {
					return this.FECHA_NACIMIENTO;
				}

				public Boolean FECHA_NACIMIENTOIsNullable(){
				    return true;
				}
				public Boolean FECHA_NACIMIENTOIsKey(){
				    return false;
				}
				public Integer FECHA_NACIMIENTOLength(){
				    return null;
				}
				public Integer FECHA_NACIMIENTOPrecision(){
				    return null;
				}
				public String FECHA_NACIMIENTODefault(){
				
					return null;
				
				}
				public String FECHA_NACIMIENTOComment(){
				
				    return "";
				
				}
				public String FECHA_NACIMIENTOPattern(){
				
					return "";
				
				}
				public String FECHA_NACIMIENTOOriginalDbColumnName(){
				
					return "FECHA_NACIMIENTO";
				
				}

				
			    public String TIPO_EDAD;

				public String getTIPO_EDAD () {
					return this.TIPO_EDAD;
				}

				public Boolean TIPO_EDADIsNullable(){
				    return true;
				}
				public Boolean TIPO_EDADIsKey(){
				    return false;
				}
				public Integer TIPO_EDADLength(){
				    return null;
				}
				public Integer TIPO_EDADPrecision(){
				    return null;
				}
				public String TIPO_EDADDefault(){
				
					return null;
				
				}
				public String TIPO_EDADComment(){
				
				    return "";
				
				}
				public String TIPO_EDADPattern(){
				
					return "";
				
				}
				public String TIPO_EDADOriginalDbColumnName(){
				
					return "TIPO_EDAD";
				
				}

				
			    public BigDecimal EDAD;

				public BigDecimal getEDAD () {
					return this.EDAD;
				}

				public Boolean EDADIsNullable(){
				    return true;
				}
				public Boolean EDADIsKey(){
				    return false;
				}
				public Integer EDADLength(){
				    return null;
				}
				public Integer EDADPrecision(){
				    return null;
				}
				public String EDADDefault(){
				
					return "";
				
				}
				public String EDADComment(){
				
				    return "";
				
				}
				public String EDADPattern(){
				
					return "";
				
				}
				public String EDADOriginalDbColumnName(){
				
					return "EDAD";
				
				}

				
			    public String SEXO;

				public String getSEXO () {
					return this.SEXO;
				}

				public Boolean SEXOIsNullable(){
				    return false;
				}
				public Boolean SEXOIsKey(){
				    return false;
				}
				public Integer SEXOLength(){
				    return null;
				}
				public Integer SEXOPrecision(){
				    return null;
				}
				public String SEXODefault(){
				
					return null;
				
				}
				public String SEXOComment(){
				
				    return "";
				
				}
				public String SEXOPattern(){
				
					return "";
				
				}
				public String SEXOOriginalDbColumnName(){
				
					return "SEXO";
				
				}

				
			    public String PRIMER_NOMBRE;

				public String getPRIMER_NOMBRE () {
					return this.PRIMER_NOMBRE;
				}

				public Boolean PRIMER_NOMBREIsNullable(){
				    return true;
				}
				public Boolean PRIMER_NOMBREIsKey(){
				    return false;
				}
				public Integer PRIMER_NOMBRELength(){
				    return null;
				}
				public Integer PRIMER_NOMBREPrecision(){
				    return null;
				}
				public String PRIMER_NOMBREDefault(){
				
					return null;
				
				}
				public String PRIMER_NOMBREComment(){
				
				    return "";
				
				}
				public String PRIMER_NOMBREPattern(){
				
					return "";
				
				}
				public String PRIMER_NOMBREOriginalDbColumnName(){
				
					return "PRIMER_NOMBRE";
				
				}

				
			    public String SEGUNDO_NOMBRE;

				public String getSEGUNDO_NOMBRE () {
					return this.SEGUNDO_NOMBRE;
				}

				public Boolean SEGUNDO_NOMBREIsNullable(){
				    return true;
				}
				public Boolean SEGUNDO_NOMBREIsKey(){
				    return false;
				}
				public Integer SEGUNDO_NOMBRELength(){
				    return null;
				}
				public Integer SEGUNDO_NOMBREPrecision(){
				    return null;
				}
				public String SEGUNDO_NOMBREDefault(){
				
					return null;
				
				}
				public String SEGUNDO_NOMBREComment(){
				
				    return "";
				
				}
				public String SEGUNDO_NOMBREPattern(){
				
					return "";
				
				}
				public String SEGUNDO_NOMBREOriginalDbColumnName(){
				
					return "SEGUNDO_NOMBRE";
				
				}

				
			    public String PRIMER_APELLIDO;

				public String getPRIMER_APELLIDO () {
					return this.PRIMER_APELLIDO;
				}

				public Boolean PRIMER_APELLIDOIsNullable(){
				    return true;
				}
				public Boolean PRIMER_APELLIDOIsKey(){
				    return false;
				}
				public Integer PRIMER_APELLIDOLength(){
				    return null;
				}
				public Integer PRIMER_APELLIDOPrecision(){
				    return null;
				}
				public String PRIMER_APELLIDODefault(){
				
					return null;
				
				}
				public String PRIMER_APELLIDOComment(){
				
				    return "";
				
				}
				public String PRIMER_APELLIDOPattern(){
				
					return "";
				
				}
				public String PRIMER_APELLIDOOriginalDbColumnName(){
				
					return "PRIMER_APELLIDO";
				
				}

				
			    public String SEGUNDO_APELLIDO;

				public String getSEGUNDO_APELLIDO () {
					return this.SEGUNDO_APELLIDO;
				}

				public Boolean SEGUNDO_APELLIDOIsNullable(){
				    return true;
				}
				public Boolean SEGUNDO_APELLIDOIsKey(){
				    return false;
				}
				public Integer SEGUNDO_APELLIDOLength(){
				    return null;
				}
				public Integer SEGUNDO_APELLIDOPrecision(){
				    return null;
				}
				public String SEGUNDO_APELLIDODefault(){
				
					return "";
				
				}
				public String SEGUNDO_APELLIDOComment(){
				
				    return "";
				
				}
				public String SEGUNDO_APELLIDOPattern(){
				
					return "";
				
				}
				public String SEGUNDO_APELLIDOOriginalDbColumnName(){
				
					return "SEGUNDO_APELLIDO";
				
				}

				
			    public String REGIMEN;

				public String getREGIMEN () {
					return this.REGIMEN;
				}

				public Boolean REGIMENIsNullable(){
				    return true;
				}
				public Boolean REGIMENIsKey(){
				    return false;
				}
				public Integer REGIMENLength(){
				    return null;
				}
				public Integer REGIMENPrecision(){
				    return null;
				}
				public String REGIMENDefault(){
				
					return "";
				
				}
				public String REGIMENComment(){
				
				    return "";
				
				}
				public String REGIMENPattern(){
				
					return "";
				
				}
				public String REGIMENOriginalDbColumnName(){
				
					return "REGIMEN";
				
				}

				
			    public String EPS;

				public String getEPS () {
					return this.EPS;
				}

				public Boolean EPSIsNullable(){
				    return true;
				}
				public Boolean EPSIsKey(){
				    return false;
				}
				public Integer EPSLength(){
				    return null;
				}
				public Integer EPSPrecision(){
				    return null;
				}
				public String EPSDefault(){
				
					return "";
				
				}
				public String EPSComment(){
				
				    return "";
				
				}
				public String EPSPattern(){
				
					return "";
				
				}
				public String EPSOriginalDbColumnName(){
				
					return "EPS";
				
				}

				
			    public String GRADO;

				public String getGRADO () {
					return this.GRADO;
				}

				public Boolean GRADOIsNullable(){
				    return true;
				}
				public Boolean GRADOIsKey(){
				    return false;
				}
				public Integer GRADOLength(){
				    return null;
				}
				public Integer GRADOPrecision(){
				    return null;
				}
				public String GRADODefault(){
				
					return "";
				
				}
				public String GRADOComment(){
				
				    return "";
				
				}
				public String GRADOPattern(){
				
					return "";
				
				}
				public String GRADOOriginalDbColumnName(){
				
					return "GRADO";
				
				}

				
			    public String TIPO_AFILIACION;

				public String getTIPO_AFILIACION () {
					return this.TIPO_AFILIACION;
				}

				public Boolean TIPO_AFILIACIONIsNullable(){
				    return true;
				}
				public Boolean TIPO_AFILIACIONIsKey(){
				    return false;
				}
				public Integer TIPO_AFILIACIONLength(){
				    return null;
				}
				public Integer TIPO_AFILIACIONPrecision(){
				    return null;
				}
				public String TIPO_AFILIACIONDefault(){
				
					return "";
				
				}
				public String TIPO_AFILIACIONComment(){
				
				    return "";
				
				}
				public String TIPO_AFILIACIONPattern(){
				
					return "";
				
				}
				public String TIPO_AFILIACIONOriginalDbColumnName(){
				
					return "TIPO_AFILIACION";
				
				}

				
			    public String FUERZA_ADSCRIPCION;

				public String getFUERZA_ADSCRIPCION () {
					return this.FUERZA_ADSCRIPCION;
				}

				public Boolean FUERZA_ADSCRIPCIONIsNullable(){
				    return true;
				}
				public Boolean FUERZA_ADSCRIPCIONIsKey(){
				    return false;
				}
				public Integer FUERZA_ADSCRIPCIONLength(){
				    return null;
				}
				public Integer FUERZA_ADSCRIPCIONPrecision(){
				    return null;
				}
				public String FUERZA_ADSCRIPCIONDefault(){
				
					return "";
				
				}
				public String FUERZA_ADSCRIPCIONComment(){
				
				    return "";
				
				}
				public String FUERZA_ADSCRIPCIONPattern(){
				
					return "";
				
				}
				public String FUERZA_ADSCRIPCIONOriginalDbColumnName(){
				
					return "FUERZA_ADSCRIPCION";
				
				}

				
			    public String ESM_ADSCRIPCION;

				public String getESM_ADSCRIPCION () {
					return this.ESM_ADSCRIPCION;
				}

				public Boolean ESM_ADSCRIPCIONIsNullable(){
				    return true;
				}
				public Boolean ESM_ADSCRIPCIONIsKey(){
				    return false;
				}
				public Integer ESM_ADSCRIPCIONLength(){
				    return null;
				}
				public Integer ESM_ADSCRIPCIONPrecision(){
				    return null;
				}
				public String ESM_ADSCRIPCIONDefault(){
				
					return "";
				
				}
				public String ESM_ADSCRIPCIONComment(){
				
				    return "";
				
				}
				public String ESM_ADSCRIPCIONPattern(){
				
					return "";
				
				}
				public String ESM_ADSCRIPCIONOriginalDbColumnName(){
				
					return "ESM_ADSCRIPCION";
				
				}

				
			    public String FUERZA;

				public String getFUERZA () {
					return this.FUERZA;
				}

				public Boolean FUERZAIsNullable(){
				    return true;
				}
				public Boolean FUERZAIsKey(){
				    return false;
				}
				public Integer FUERZALength(){
				    return null;
				}
				public Integer FUERZAPrecision(){
				    return null;
				}
				public String FUERZADefault(){
				
					return "";
				
				}
				public String FUERZAComment(){
				
				    return "";
				
				}
				public String FUERZAPattern(){
				
					return "";
				
				}
				public String FUERZAOriginalDbColumnName(){
				
					return "FUERZA";
				
				}

				
			    public String UORG;

				public String getUORG () {
					return this.UORG;
				}

				public Boolean UORGIsNullable(){
				    return false;
				}
				public Boolean UORGIsKey(){
				    return false;
				}
				public Integer UORGLength(){
				    return null;
				}
				public Integer UORGPrecision(){
				    return null;
				}
				public String UORGDefault(){
				
					return "";
				
				}
				public String UORGComment(){
				
				    return "";
				
				}
				public String UORGPattern(){
				
					return "";
				
				}
				public String UORGOriginalDbColumnName(){
				
					return "UORG";
				
				}

				
			    public String USUARIO;

				public String getUSUARIO () {
					return this.USUARIO;
				}

				public Boolean USUARIOIsNullable(){
				    return true;
				}
				public Boolean USUARIOIsKey(){
				    return false;
				}
				public Integer USUARIOLength(){
				    return null;
				}
				public Integer USUARIOPrecision(){
				    return null;
				}
				public String USUARIODefault(){
				
					return "";
				
				}
				public String USUARIOComment(){
				
				    return "";
				
				}
				public String USUARIOPattern(){
				
					return "";
				
				}
				public String USUARIOOriginalDbColumnName(){
				
					return "USUARIO";
				
				}

				
			    public String PUNTO_VACUNADOR;

				public String getPUNTO_VACUNADOR () {
					return this.PUNTO_VACUNADOR;
				}

				public Boolean PUNTO_VACUNADORIsNullable(){
				    return true;
				}
				public Boolean PUNTO_VACUNADORIsKey(){
				    return false;
				}
				public Integer PUNTO_VACUNADORLength(){
				    return null;
				}
				public Integer PUNTO_VACUNADORPrecision(){
				    return null;
				}
				public String PUNTO_VACUNADORDefault(){
				
					return "";
				
				}
				public String PUNTO_VACUNADORComment(){
				
				    return "";
				
				}
				public String PUNTO_VACUNADORPattern(){
				
					return "";
				
				}
				public String PUNTO_VACUNADOROriginalDbColumnName(){
				
					return "PUNTO_VACUNADOR";
				
				}

				
			    public String NOMBRE_VACUNADOR;

				public String getNOMBRE_VACUNADOR () {
					return this.NOMBRE_VACUNADOR;
				}

				public Boolean NOMBRE_VACUNADORIsNullable(){
				    return true;
				}
				public Boolean NOMBRE_VACUNADORIsKey(){
				    return false;
				}
				public Integer NOMBRE_VACUNADORLength(){
				    return null;
				}
				public Integer NOMBRE_VACUNADORPrecision(){
				    return null;
				}
				public String NOMBRE_VACUNADORDefault(){
				
					return "";
				
				}
				public String NOMBRE_VACUNADORComment(){
				
				    return "";
				
				}
				public String NOMBRE_VACUNADORPattern(){
				
					return "";
				
				}
				public String NOMBRE_VACUNADOROriginalDbColumnName(){
				
					return "NOMBRE_VACUNADOR";
				
				}

				
			    public String DEPARTAMENTO_RESIDENCIA;

				public String getDEPARTAMENTO_RESIDENCIA () {
					return this.DEPARTAMENTO_RESIDENCIA;
				}

				public Boolean DEPARTAMENTO_RESIDENCIAIsNullable(){
				    return true;
				}
				public Boolean DEPARTAMENTO_RESIDENCIAIsKey(){
				    return false;
				}
				public Integer DEPARTAMENTO_RESIDENCIALength(){
				    return null;
				}
				public Integer DEPARTAMENTO_RESIDENCIAPrecision(){
				    return null;
				}
				public String DEPARTAMENTO_RESIDENCIADefault(){
				
					return "";
				
				}
				public String DEPARTAMENTO_RESIDENCIAComment(){
				
				    return "";
				
				}
				public String DEPARTAMENTO_RESIDENCIAPattern(){
				
					return "";
				
				}
				public String DEPARTAMENTO_RESIDENCIAOriginalDbColumnName(){
				
					return "DEPARTAMENTO_RESIDENCIA";
				
				}

				
			    public String MUNICIPIO_RESIDENCIA;

				public String getMUNICIPIO_RESIDENCIA () {
					return this.MUNICIPIO_RESIDENCIA;
				}

				public Boolean MUNICIPIO_RESIDENCIAIsNullable(){
				    return true;
				}
				public Boolean MUNICIPIO_RESIDENCIAIsKey(){
				    return false;
				}
				public Integer MUNICIPIO_RESIDENCIALength(){
				    return null;
				}
				public Integer MUNICIPIO_RESIDENCIAPrecision(){
				    return null;
				}
				public String MUNICIPIO_RESIDENCIADefault(){
				
					return "";
				
				}
				public String MUNICIPIO_RESIDENCIAComment(){
				
				    return "";
				
				}
				public String MUNICIPIO_RESIDENCIAPattern(){
				
					return "";
				
				}
				public String MUNICIPIO_RESIDENCIAOriginalDbColumnName(){
				
					return "MUNICIPIO_RESIDENCIA";
				
				}

				
			    public String BARRIO;

				public String getBARRIO () {
					return this.BARRIO;
				}

				public Boolean BARRIOIsNullable(){
				    return true;
				}
				public Boolean BARRIOIsKey(){
				    return false;
				}
				public Integer BARRIOLength(){
				    return null;
				}
				public Integer BARRIOPrecision(){
				    return null;
				}
				public String BARRIODefault(){
				
					return "";
				
				}
				public String BARRIOComment(){
				
				    return "";
				
				}
				public String BARRIOPattern(){
				
					return "";
				
				}
				public String BARRIOOriginalDbColumnName(){
				
					return "BARRIO";
				
				}

				
			    public String DIRECCION;

				public String getDIRECCION () {
					return this.DIRECCION;
				}

				public Boolean DIRECCIONIsNullable(){
				    return true;
				}
				public Boolean DIRECCIONIsKey(){
				    return false;
				}
				public Integer DIRECCIONLength(){
				    return null;
				}
				public Integer DIRECCIONPrecision(){
				    return null;
				}
				public String DIRECCIONDefault(){
				
					return "";
				
				}
				public String DIRECCIONComment(){
				
				    return "";
				
				}
				public String DIRECCIONPattern(){
				
					return "";
				
				}
				public String DIRECCIONOriginalDbColumnName(){
				
					return "DIRECCION";
				
				}

				
			    public String TELEFONO;

				public String getTELEFONO () {
					return this.TELEFONO;
				}

				public Boolean TELEFONOIsNullable(){
				    return true;
				}
				public Boolean TELEFONOIsKey(){
				    return false;
				}
				public Integer TELEFONOLength(){
				    return null;
				}
				public Integer TELEFONOPrecision(){
				    return null;
				}
				public String TELEFONODefault(){
				
					return "";
				
				}
				public String TELEFONOComment(){
				
				    return "";
				
				}
				public String TELEFONOPattern(){
				
					return "";
				
				}
				public String TELEFONOOriginalDbColumnName(){
				
					return "TELEFONO";
				
				}

				
			    public String GRUPO_ETNICO;

				public String getGRUPO_ETNICO () {
					return this.GRUPO_ETNICO;
				}

				public Boolean GRUPO_ETNICOIsNullable(){
				    return true;
				}
				public Boolean GRUPO_ETNICOIsKey(){
				    return false;
				}
				public Integer GRUPO_ETNICOLength(){
				    return null;
				}
				public Integer GRUPO_ETNICOPrecision(){
				    return null;
				}
				public String GRUPO_ETNICODefault(){
				
					return "";
				
				}
				public String GRUPO_ETNICOComment(){
				
				    return "";
				
				}
				public String GRUPO_ETNICOPattern(){
				
					return "";
				
				}
				public String GRUPO_ETNICOOriginalDbColumnName(){
				
					return "GRUPO_ETNICO";
				
				}

				
			    public String DESPLAZADA;

				public String getDESPLAZADA () {
					return this.DESPLAZADA;
				}

				public Boolean DESPLAZADAIsNullable(){
				    return true;
				}
				public Boolean DESPLAZADAIsKey(){
				    return false;
				}
				public Integer DESPLAZADALength(){
				    return null;
				}
				public Integer DESPLAZADAPrecision(){
				    return null;
				}
				public String DESPLAZADADefault(){
				
					return "";
				
				}
				public String DESPLAZADAComment(){
				
				    return "";
				
				}
				public String DESPLAZADAPattern(){
				
					return "";
				
				}
				public String DESPLAZADAOriginalDbColumnName(){
				
					return "DESPLAZADA";
				
				}

				
			    public String DISCAPACITADA;

				public String getDISCAPACITADA () {
					return this.DISCAPACITADA;
				}

				public Boolean DISCAPACITADAIsNullable(){
				    return true;
				}
				public Boolean DISCAPACITADAIsKey(){
				    return false;
				}
				public Integer DISCAPACITADALength(){
				    return null;
				}
				public Integer DISCAPACITADAPrecision(){
				    return null;
				}
				public String DISCAPACITADADefault(){
				
					return "";
				
				}
				public String DISCAPACITADAComment(){
				
				    return "";
				
				}
				public String DISCAPACITADAPattern(){
				
					return "";
				
				}
				public String DISCAPACITADAOriginalDbColumnName(){
				
					return "DISCAPACITADA";
				
				}

				
			    public String VICTIMA;

				public String getVICTIMA () {
					return this.VICTIMA;
				}

				public Boolean VICTIMAIsNullable(){
				    return true;
				}
				public Boolean VICTIMAIsKey(){
				    return false;
				}
				public Integer VICTIMALength(){
				    return null;
				}
				public Integer VICTIMAPrecision(){
				    return null;
				}
				public String VICTIMADefault(){
				
					return "";
				
				}
				public String VICTIMAComment(){
				
				    return "";
				
				}
				public String VICTIMAPattern(){
				
					return "";
				
				}
				public String VICTIMAOriginalDbColumnName(){
				
					return "VICTIMA";
				
				}

				
			    public String ZVEREDAL;

				public String getZVEREDAL () {
					return this.ZVEREDAL;
				}

				public Boolean ZVEREDALIsNullable(){
				    return true;
				}
				public Boolean ZVEREDALIsKey(){
				    return false;
				}
				public Integer ZVEREDALLength(){
				    return null;
				}
				public Integer ZVEREDALPrecision(){
				    return null;
				}
				public String ZVEREDALDefault(){
				
					return "";
				
				}
				public String ZVEREDALComment(){
				
				    return "";
				
				}
				public String ZVEREDALPattern(){
				
					return "";
				
				}
				public String ZVEREDALOriginalDbColumnName(){
				
					return "ZVEREDAL";
				
				}

				
			    public String PARENTESCO;

				public String getPARENTESCO () {
					return this.PARENTESCO;
				}

				public Boolean PARENTESCOIsNullable(){
				    return true;
				}
				public Boolean PARENTESCOIsKey(){
				    return false;
				}
				public Integer PARENTESCOLength(){
				    return null;
				}
				public Integer PARENTESCOPrecision(){
				    return null;
				}
				public String PARENTESCODefault(){
				
					return "";
				
				}
				public String PARENTESCOComment(){
				
				    return "";
				
				}
				public String PARENTESCOPattern(){
				
					return "";
				
				}
				public String PARENTESCOOriginalDbColumnName(){
				
					return "PARENTESCO";
				
				}

				
			    public String TIPO_DOCUMENTO_COTIZANTE;

				public String getTIPO_DOCUMENTO_COTIZANTE () {
					return this.TIPO_DOCUMENTO_COTIZANTE;
				}

				public Boolean TIPO_DOCUMENTO_COTIZANTEIsNullable(){
				    return true;
				}
				public Boolean TIPO_DOCUMENTO_COTIZANTEIsKey(){
				    return false;
				}
				public Integer TIPO_DOCUMENTO_COTIZANTELength(){
				    return null;
				}
				public Integer TIPO_DOCUMENTO_COTIZANTEPrecision(){
				    return null;
				}
				public String TIPO_DOCUMENTO_COTIZANTEDefault(){
				
					return "";
				
				}
				public String TIPO_DOCUMENTO_COTIZANTEComment(){
				
				    return "";
				
				}
				public String TIPO_DOCUMENTO_COTIZANTEPattern(){
				
					return "";
				
				}
				public String TIPO_DOCUMENTO_COTIZANTEOriginalDbColumnName(){
				
					return "TIPO_DOCUMENTO_COTIZANTE";
				
				}

				
			    public String NUMERO_DOCUMENTO_COTIZANTE;

				public String getNUMERO_DOCUMENTO_COTIZANTE () {
					return this.NUMERO_DOCUMENTO_COTIZANTE;
				}

				public Boolean NUMERO_DOCUMENTO_COTIZANTEIsNullable(){
				    return true;
				}
				public Boolean NUMERO_DOCUMENTO_COTIZANTEIsKey(){
				    return false;
				}
				public Integer NUMERO_DOCUMENTO_COTIZANTELength(){
				    return null;
				}
				public Integer NUMERO_DOCUMENTO_COTIZANTEPrecision(){
				    return null;
				}
				public String NUMERO_DOCUMENTO_COTIZANTEDefault(){
				
					return "";
				
				}
				public String NUMERO_DOCUMENTO_COTIZANTEComment(){
				
				    return "";
				
				}
				public String NUMERO_DOCUMENTO_COTIZANTEPattern(){
				
					return "";
				
				}
				public String NUMERO_DOCUMENTO_COTIZANTEOriginalDbColumnName(){
				
					return "NUMERO_DOCUMENTO_COTIZANTE";
				
				}

				
			    public String PRIMER_NOMBRE_COTIZANTE;

				public String getPRIMER_NOMBRE_COTIZANTE () {
					return this.PRIMER_NOMBRE_COTIZANTE;
				}

				public Boolean PRIMER_NOMBRE_COTIZANTEIsNullable(){
				    return true;
				}
				public Boolean PRIMER_NOMBRE_COTIZANTEIsKey(){
				    return false;
				}
				public Integer PRIMER_NOMBRE_COTIZANTELength(){
				    return null;
				}
				public Integer PRIMER_NOMBRE_COTIZANTEPrecision(){
				    return null;
				}
				public String PRIMER_NOMBRE_COTIZANTEDefault(){
				
					return "";
				
				}
				public String PRIMER_NOMBRE_COTIZANTEComment(){
				
				    return "";
				
				}
				public String PRIMER_NOMBRE_COTIZANTEPattern(){
				
					return "";
				
				}
				public String PRIMER_NOMBRE_COTIZANTEOriginalDbColumnName(){
				
					return "PRIMER_NOMBRE_COTIZANTE";
				
				}

				
			    public String SEGUNDO_NOMBRE_COTIZANTE;

				public String getSEGUNDO_NOMBRE_COTIZANTE () {
					return this.SEGUNDO_NOMBRE_COTIZANTE;
				}

				public Boolean SEGUNDO_NOMBRE_COTIZANTEIsNullable(){
				    return true;
				}
				public Boolean SEGUNDO_NOMBRE_COTIZANTEIsKey(){
				    return false;
				}
				public Integer SEGUNDO_NOMBRE_COTIZANTELength(){
				    return null;
				}
				public Integer SEGUNDO_NOMBRE_COTIZANTEPrecision(){
				    return null;
				}
				public String SEGUNDO_NOMBRE_COTIZANTEDefault(){
				
					return "";
				
				}
				public String SEGUNDO_NOMBRE_COTIZANTEComment(){
				
				    return "";
				
				}
				public String SEGUNDO_NOMBRE_COTIZANTEPattern(){
				
					return "";
				
				}
				public String SEGUNDO_NOMBRE_COTIZANTEOriginalDbColumnName(){
				
					return "SEGUNDO_NOMBRE_COTIZANTE";
				
				}

				
			    public String PRIMER_APELLIDO_COTIZANTE;

				public String getPRIMER_APELLIDO_COTIZANTE () {
					return this.PRIMER_APELLIDO_COTIZANTE;
				}

				public Boolean PRIMER_APELLIDO_COTIZANTEIsNullable(){
				    return true;
				}
				public Boolean PRIMER_APELLIDO_COTIZANTEIsKey(){
				    return false;
				}
				public Integer PRIMER_APELLIDO_COTIZANTELength(){
				    return null;
				}
				public Integer PRIMER_APELLIDO_COTIZANTEPrecision(){
				    return null;
				}
				public String PRIMER_APELLIDO_COTIZANTEDefault(){
				
					return "";
				
				}
				public String PRIMER_APELLIDO_COTIZANTEComment(){
				
				    return "";
				
				}
				public String PRIMER_APELLIDO_COTIZANTEPattern(){
				
					return "";
				
				}
				public String PRIMER_APELLIDO_COTIZANTEOriginalDbColumnName(){
				
					return "PRIMER_APELLIDO_COTIZANTE";
				
				}

				
			    public String SEGUNDO_APELLIDO_COTIZANTE;

				public String getSEGUNDO_APELLIDO_COTIZANTE () {
					return this.SEGUNDO_APELLIDO_COTIZANTE;
				}

				public Boolean SEGUNDO_APELLIDO_COTIZANTEIsNullable(){
				    return true;
				}
				public Boolean SEGUNDO_APELLIDO_COTIZANTEIsKey(){
				    return false;
				}
				public Integer SEGUNDO_APELLIDO_COTIZANTELength(){
				    return null;
				}
				public Integer SEGUNDO_APELLIDO_COTIZANTEPrecision(){
				    return null;
				}
				public String SEGUNDO_APELLIDO_COTIZANTEDefault(){
				
					return "";
				
				}
				public String SEGUNDO_APELLIDO_COTIZANTEComment(){
				
				    return "";
				
				}
				public String SEGUNDO_APELLIDO_COTIZANTEPattern(){
				
					return "";
				
				}
				public String SEGUNDO_APELLIDO_COTIZANTEOriginalDbColumnName(){
				
					return "SEGUNDO_APELLIDO_COTIZANTE";
				
				}

				
			    public String GRADO_COTIZANTE;

				public String getGRADO_COTIZANTE () {
					return this.GRADO_COTIZANTE;
				}

				public Boolean GRADO_COTIZANTEIsNullable(){
				    return true;
				}
				public Boolean GRADO_COTIZANTEIsKey(){
				    return false;
				}
				public Integer GRADO_COTIZANTELength(){
				    return null;
				}
				public Integer GRADO_COTIZANTEPrecision(){
				    return null;
				}
				public String GRADO_COTIZANTEDefault(){
				
					return "";
				
				}
				public String GRADO_COTIZANTEComment(){
				
				    return "";
				
				}
				public String GRADO_COTIZANTEPattern(){
				
					return "";
				
				}
				public String GRADO_COTIZANTEOriginalDbColumnName(){
				
					return "GRADO_COTIZANTE";
				
				}

				
			    public String ACOM_TDOCUMENTO;

				public String getACOM_TDOCUMENTO () {
					return this.ACOM_TDOCUMENTO;
				}

				public Boolean ACOM_TDOCUMENTOIsNullable(){
				    return true;
				}
				public Boolean ACOM_TDOCUMENTOIsKey(){
				    return false;
				}
				public Integer ACOM_TDOCUMENTOLength(){
				    return null;
				}
				public Integer ACOM_TDOCUMENTOPrecision(){
				    return null;
				}
				public String ACOM_TDOCUMENTODefault(){
				
					return "";
				
				}
				public String ACOM_TDOCUMENTOComment(){
				
				    return "";
				
				}
				public String ACOM_TDOCUMENTOPattern(){
				
					return "";
				
				}
				public String ACOM_TDOCUMENTOOriginalDbColumnName(){
				
					return "ACOM_TDOCUMENTO";
				
				}

				
			    public String ACOM_DOCUMENTO;

				public String getACOM_DOCUMENTO () {
					return this.ACOM_DOCUMENTO;
				}

				public Boolean ACOM_DOCUMENTOIsNullable(){
				    return true;
				}
				public Boolean ACOM_DOCUMENTOIsKey(){
				    return false;
				}
				public Integer ACOM_DOCUMENTOLength(){
				    return null;
				}
				public Integer ACOM_DOCUMENTOPrecision(){
				    return null;
				}
				public String ACOM_DOCUMENTODefault(){
				
					return "";
				
				}
				public String ACOM_DOCUMENTOComment(){
				
				    return "";
				
				}
				public String ACOM_DOCUMENTOPattern(){
				
					return "";
				
				}
				public String ACOM_DOCUMENTOOriginalDbColumnName(){
				
					return "ACOM_DOCUMENTO";
				
				}

				
			    public String ACOM_NOMBRE1;

				public String getACOM_NOMBRE1 () {
					return this.ACOM_NOMBRE1;
				}

				public Boolean ACOM_NOMBRE1IsNullable(){
				    return true;
				}
				public Boolean ACOM_NOMBRE1IsKey(){
				    return false;
				}
				public Integer ACOM_NOMBRE1Length(){
				    return null;
				}
				public Integer ACOM_NOMBRE1Precision(){
				    return null;
				}
				public String ACOM_NOMBRE1Default(){
				
					return "";
				
				}
				public String ACOM_NOMBRE1Comment(){
				
				    return "";
				
				}
				public String ACOM_NOMBRE1Pattern(){
				
					return "";
				
				}
				public String ACOM_NOMBRE1OriginalDbColumnName(){
				
					return "ACOM_NOMBRE1";
				
				}

				
			    public String ACOM_NOMBRE2;

				public String getACOM_NOMBRE2 () {
					return this.ACOM_NOMBRE2;
				}

				public Boolean ACOM_NOMBRE2IsNullable(){
				    return true;
				}
				public Boolean ACOM_NOMBRE2IsKey(){
				    return false;
				}
				public Integer ACOM_NOMBRE2Length(){
				    return null;
				}
				public Integer ACOM_NOMBRE2Precision(){
				    return null;
				}
				public String ACOM_NOMBRE2Default(){
				
					return "";
				
				}
				public String ACOM_NOMBRE2Comment(){
				
				    return "";
				
				}
				public String ACOM_NOMBRE2Pattern(){
				
					return "";
				
				}
				public String ACOM_NOMBRE2OriginalDbColumnName(){
				
					return "ACOM_NOMBRE2";
				
				}

				
			    public String ACOM_APELLIDO1;

				public String getACOM_APELLIDO1 () {
					return this.ACOM_APELLIDO1;
				}

				public Boolean ACOM_APELLIDO1IsNullable(){
				    return true;
				}
				public Boolean ACOM_APELLIDO1IsKey(){
				    return false;
				}
				public Integer ACOM_APELLIDO1Length(){
				    return null;
				}
				public Integer ACOM_APELLIDO1Precision(){
				    return null;
				}
				public String ACOM_APELLIDO1Default(){
				
					return "";
				
				}
				public String ACOM_APELLIDO1Comment(){
				
				    return "";
				
				}
				public String ACOM_APELLIDO1Pattern(){
				
					return "";
				
				}
				public String ACOM_APELLIDO1OriginalDbColumnName(){
				
					return "ACOM_APELLIDO1";
				
				}

				
			    public String ACOM_APELLIDO2;

				public String getACOM_APELLIDO2 () {
					return this.ACOM_APELLIDO2;
				}

				public Boolean ACOM_APELLIDO2IsNullable(){
				    return true;
				}
				public Boolean ACOM_APELLIDO2IsKey(){
				    return false;
				}
				public Integer ACOM_APELLIDO2Length(){
				    return null;
				}
				public Integer ACOM_APELLIDO2Precision(){
				    return null;
				}
				public String ACOM_APELLIDO2Default(){
				
					return "";
				
				}
				public String ACOM_APELLIDO2Comment(){
				
				    return "";
				
				}
				public String ACOM_APELLIDO2Pattern(){
				
					return "";
				
				}
				public String ACOM_APELLIDO2OriginalDbColumnName(){
				
					return "ACOM_APELLIDO2";
				
				}

				
			    public String ACOM_PARENTESCO;

				public String getACOM_PARENTESCO () {
					return this.ACOM_PARENTESCO;
				}

				public Boolean ACOM_PARENTESCOIsNullable(){
				    return true;
				}
				public Boolean ACOM_PARENTESCOIsKey(){
				    return false;
				}
				public Integer ACOM_PARENTESCOLength(){
				    return null;
				}
				public Integer ACOM_PARENTESCOPrecision(){
				    return null;
				}
				public String ACOM_PARENTESCODefault(){
				
					return "";
				
				}
				public String ACOM_PARENTESCOComment(){
				
				    return "";
				
				}
				public String ACOM_PARENTESCOPattern(){
				
					return "";
				
				}
				public String ACOM_PARENTESCOOriginalDbColumnName(){
				
					return "ACOM_PARENTESCO";
				
				}

				
			    public String ACOM_TELEFONO;

				public String getACOM_TELEFONO () {
					return this.ACOM_TELEFONO;
				}

				public Boolean ACOM_TELEFONOIsNullable(){
				    return true;
				}
				public Boolean ACOM_TELEFONOIsKey(){
				    return false;
				}
				public Integer ACOM_TELEFONOLength(){
				    return null;
				}
				public Integer ACOM_TELEFONOPrecision(){
				    return null;
				}
				public String ACOM_TELEFONODefault(){
				
					return "";
				
				}
				public String ACOM_TELEFONOComment(){
				
				    return "";
				
				}
				public String ACOM_TELEFONOPattern(){
				
					return "";
				
				}
				public String ACOM_TELEFONOOriginalDbColumnName(){
				
					return "ACOM_TELEFONO";
				
				}

				
			    public String ACOM_CORREO;

				public String getACOM_CORREO () {
					return this.ACOM_CORREO;
				}

				public Boolean ACOM_CORREOIsNullable(){
				    return true;
				}
				public Boolean ACOM_CORREOIsKey(){
				    return false;
				}
				public Integer ACOM_CORREOLength(){
				    return null;
				}
				public Integer ACOM_CORREOPrecision(){
				    return null;
				}
				public String ACOM_CORREODefault(){
				
					return "";
				
				}
				public String ACOM_CORREOComment(){
				
				    return "";
				
				}
				public String ACOM_CORREOPattern(){
				
					return "";
				
				}
				public String ACOM_CORREOOriginalDbColumnName(){
				
					return "ACOM_CORREO";
				
				}

				
			    public String DAPLICADAS_ID;

				public String getDAPLICADAS_ID () {
					return this.DAPLICADAS_ID;
				}

				public Boolean DAPLICADAS_IDIsNullable(){
				    return true;
				}
				public Boolean DAPLICADAS_IDIsKey(){
				    return false;
				}
				public Integer DAPLICADAS_IDLength(){
				    return null;
				}
				public Integer DAPLICADAS_IDPrecision(){
				    return null;
				}
				public String DAPLICADAS_IDDefault(){
				
					return "";
				
				}
				public String DAPLICADAS_IDComment(){
				
				    return "";
				
				}
				public String DAPLICADAS_IDPattern(){
				
					return "";
				
				}
				public String DAPLICADAS_IDOriginalDbColumnName(){
				
					return "DAPLICADAS_ID";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_VAC_CONSOLIDADOS_VAC_RegistroVacunacion.length) {
				if(length < 1024 && commonByteArray_VAC_CONSOLIDADOS_VAC_RegistroVacunacion.length == 0) {
   					commonByteArray_VAC_CONSOLIDADOS_VAC_RegistroVacunacion = new byte[1024];
				} else {
   					commonByteArray_VAC_CONSOLIDADOS_VAC_RegistroVacunacion = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_VAC_CONSOLIDADOS_VAC_RegistroVacunacion, 0, length);
			strReturn = new String(commonByteArray_VAC_CONSOLIDADOS_VAC_RegistroVacunacion, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_VAC_CONSOLIDADOS_VAC_RegistroVacunacion.length) {
				if(length < 1024 && commonByteArray_VAC_CONSOLIDADOS_VAC_RegistroVacunacion.length == 0) {
   					commonByteArray_VAC_CONSOLIDADOS_VAC_RegistroVacunacion = new byte[1024];
				} else {
   					commonByteArray_VAC_CONSOLIDADOS_VAC_RegistroVacunacion = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_VAC_CONSOLIDADOS_VAC_RegistroVacunacion, 0, length);
			strReturn = new String(commonByteArray_VAC_CONSOLIDADOS_VAC_RegistroVacunacion, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_VAC_CONSOLIDADOS_VAC_RegistroVacunacion) {

        	try {

        		int length = 0;
		
						this.ORDEN = (BigDecimal) dis.readObject();
					
					this.FECHA_REGISTRO = readString(dis);
					
					this.FECHA_APLICACION = readString(dis);
					
					this.TIPO_DOCUMENTO = readString(dis);
					
					this.NUMERO_DOCUMENTO = readString(dis);
					
					this.FECHA_NACIMIENTO = readString(dis);
					
					this.TIPO_EDAD = readString(dis);
					
						this.EDAD = (BigDecimal) dis.readObject();
					
					this.SEXO = readString(dis);
					
					this.PRIMER_NOMBRE = readString(dis);
					
					this.SEGUNDO_NOMBRE = readString(dis);
					
					this.PRIMER_APELLIDO = readString(dis);
					
					this.SEGUNDO_APELLIDO = readString(dis);
					
					this.REGIMEN = readString(dis);
					
					this.EPS = readString(dis);
					
					this.GRADO = readString(dis);
					
					this.TIPO_AFILIACION = readString(dis);
					
					this.FUERZA_ADSCRIPCION = readString(dis);
					
					this.ESM_ADSCRIPCION = readString(dis);
					
					this.FUERZA = readString(dis);
					
					this.UORG = readString(dis);
					
					this.USUARIO = readString(dis);
					
					this.PUNTO_VACUNADOR = readString(dis);
					
					this.NOMBRE_VACUNADOR = readString(dis);
					
					this.DEPARTAMENTO_RESIDENCIA = readString(dis);
					
					this.MUNICIPIO_RESIDENCIA = readString(dis);
					
					this.BARRIO = readString(dis);
					
					this.DIRECCION = readString(dis);
					
					this.TELEFONO = readString(dis);
					
					this.GRUPO_ETNICO = readString(dis);
					
					this.DESPLAZADA = readString(dis);
					
					this.DISCAPACITADA = readString(dis);
					
					this.VICTIMA = readString(dis);
					
					this.ZVEREDAL = readString(dis);
					
					this.PARENTESCO = readString(dis);
					
					this.TIPO_DOCUMENTO_COTIZANTE = readString(dis);
					
					this.NUMERO_DOCUMENTO_COTIZANTE = readString(dis);
					
					this.PRIMER_NOMBRE_COTIZANTE = readString(dis);
					
					this.SEGUNDO_NOMBRE_COTIZANTE = readString(dis);
					
					this.PRIMER_APELLIDO_COTIZANTE = readString(dis);
					
					this.SEGUNDO_APELLIDO_COTIZANTE = readString(dis);
					
					this.GRADO_COTIZANTE = readString(dis);
					
					this.ACOM_TDOCUMENTO = readString(dis);
					
					this.ACOM_DOCUMENTO = readString(dis);
					
					this.ACOM_NOMBRE1 = readString(dis);
					
					this.ACOM_NOMBRE2 = readString(dis);
					
					this.ACOM_APELLIDO1 = readString(dis);
					
					this.ACOM_APELLIDO2 = readString(dis);
					
					this.ACOM_PARENTESCO = readString(dis);
					
					this.ACOM_TELEFONO = readString(dis);
					
					this.ACOM_CORREO = readString(dis);
					
					this.DAPLICADAS_ID = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_VAC_CONSOLIDADOS_VAC_RegistroVacunacion) {

        	try {

        		int length = 0;
		
						this.ORDEN = (BigDecimal) dis.readObject();
					
					this.FECHA_REGISTRO = readString(dis);
					
					this.FECHA_APLICACION = readString(dis);
					
					this.TIPO_DOCUMENTO = readString(dis);
					
					this.NUMERO_DOCUMENTO = readString(dis);
					
					this.FECHA_NACIMIENTO = readString(dis);
					
					this.TIPO_EDAD = readString(dis);
					
						this.EDAD = (BigDecimal) dis.readObject();
					
					this.SEXO = readString(dis);
					
					this.PRIMER_NOMBRE = readString(dis);
					
					this.SEGUNDO_NOMBRE = readString(dis);
					
					this.PRIMER_APELLIDO = readString(dis);
					
					this.SEGUNDO_APELLIDO = readString(dis);
					
					this.REGIMEN = readString(dis);
					
					this.EPS = readString(dis);
					
					this.GRADO = readString(dis);
					
					this.TIPO_AFILIACION = readString(dis);
					
					this.FUERZA_ADSCRIPCION = readString(dis);
					
					this.ESM_ADSCRIPCION = readString(dis);
					
					this.FUERZA = readString(dis);
					
					this.UORG = readString(dis);
					
					this.USUARIO = readString(dis);
					
					this.PUNTO_VACUNADOR = readString(dis);
					
					this.NOMBRE_VACUNADOR = readString(dis);
					
					this.DEPARTAMENTO_RESIDENCIA = readString(dis);
					
					this.MUNICIPIO_RESIDENCIA = readString(dis);
					
					this.BARRIO = readString(dis);
					
					this.DIRECCION = readString(dis);
					
					this.TELEFONO = readString(dis);
					
					this.GRUPO_ETNICO = readString(dis);
					
					this.DESPLAZADA = readString(dis);
					
					this.DISCAPACITADA = readString(dis);
					
					this.VICTIMA = readString(dis);
					
					this.ZVEREDAL = readString(dis);
					
					this.PARENTESCO = readString(dis);
					
					this.TIPO_DOCUMENTO_COTIZANTE = readString(dis);
					
					this.NUMERO_DOCUMENTO_COTIZANTE = readString(dis);
					
					this.PRIMER_NOMBRE_COTIZANTE = readString(dis);
					
					this.SEGUNDO_NOMBRE_COTIZANTE = readString(dis);
					
					this.PRIMER_APELLIDO_COTIZANTE = readString(dis);
					
					this.SEGUNDO_APELLIDO_COTIZANTE = readString(dis);
					
					this.GRADO_COTIZANTE = readString(dis);
					
					this.ACOM_TDOCUMENTO = readString(dis);
					
					this.ACOM_DOCUMENTO = readString(dis);
					
					this.ACOM_NOMBRE1 = readString(dis);
					
					this.ACOM_NOMBRE2 = readString(dis);
					
					this.ACOM_APELLIDO1 = readString(dis);
					
					this.ACOM_APELLIDO2 = readString(dis);
					
					this.ACOM_PARENTESCO = readString(dis);
					
					this.ACOM_TELEFONO = readString(dis);
					
					this.ACOM_CORREO = readString(dis);
					
					this.DAPLICADAS_ID = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.ORDEN);
					
					// String
				
						writeString(this.FECHA_REGISTRO,dos);
					
					// String
				
						writeString(this.FECHA_APLICACION,dos);
					
					// String
				
						writeString(this.TIPO_DOCUMENTO,dos);
					
					// String
				
						writeString(this.NUMERO_DOCUMENTO,dos);
					
					// String
				
						writeString(this.FECHA_NACIMIENTO,dos);
					
					// String
				
						writeString(this.TIPO_EDAD,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.EDAD);
					
					// String
				
						writeString(this.SEXO,dos);
					
					// String
				
						writeString(this.PRIMER_NOMBRE,dos);
					
					// String
				
						writeString(this.SEGUNDO_NOMBRE,dos);
					
					// String
				
						writeString(this.PRIMER_APELLIDO,dos);
					
					// String
				
						writeString(this.SEGUNDO_APELLIDO,dos);
					
					// String
				
						writeString(this.REGIMEN,dos);
					
					// String
				
						writeString(this.EPS,dos);
					
					// String
				
						writeString(this.GRADO,dos);
					
					// String
				
						writeString(this.TIPO_AFILIACION,dos);
					
					// String
				
						writeString(this.FUERZA_ADSCRIPCION,dos);
					
					// String
				
						writeString(this.ESM_ADSCRIPCION,dos);
					
					// String
				
						writeString(this.FUERZA,dos);
					
					// String
				
						writeString(this.UORG,dos);
					
					// String
				
						writeString(this.USUARIO,dos);
					
					// String
				
						writeString(this.PUNTO_VACUNADOR,dos);
					
					// String
				
						writeString(this.NOMBRE_VACUNADOR,dos);
					
					// String
				
						writeString(this.DEPARTAMENTO_RESIDENCIA,dos);
					
					// String
				
						writeString(this.MUNICIPIO_RESIDENCIA,dos);
					
					// String
				
						writeString(this.BARRIO,dos);
					
					// String
				
						writeString(this.DIRECCION,dos);
					
					// String
				
						writeString(this.TELEFONO,dos);
					
					// String
				
						writeString(this.GRUPO_ETNICO,dos);
					
					// String
				
						writeString(this.DESPLAZADA,dos);
					
					// String
				
						writeString(this.DISCAPACITADA,dos);
					
					// String
				
						writeString(this.VICTIMA,dos);
					
					// String
				
						writeString(this.ZVEREDAL,dos);
					
					// String
				
						writeString(this.PARENTESCO,dos);
					
					// String
				
						writeString(this.TIPO_DOCUMENTO_COTIZANTE,dos);
					
					// String
				
						writeString(this.NUMERO_DOCUMENTO_COTIZANTE,dos);
					
					// String
				
						writeString(this.PRIMER_NOMBRE_COTIZANTE,dos);
					
					// String
				
						writeString(this.SEGUNDO_NOMBRE_COTIZANTE,dos);
					
					// String
				
						writeString(this.PRIMER_APELLIDO_COTIZANTE,dos);
					
					// String
				
						writeString(this.SEGUNDO_APELLIDO_COTIZANTE,dos);
					
					// String
				
						writeString(this.GRADO_COTIZANTE,dos);
					
					// String
				
						writeString(this.ACOM_TDOCUMENTO,dos);
					
					// String
				
						writeString(this.ACOM_DOCUMENTO,dos);
					
					// String
				
						writeString(this.ACOM_NOMBRE1,dos);
					
					// String
				
						writeString(this.ACOM_NOMBRE2,dos);
					
					// String
				
						writeString(this.ACOM_APELLIDO1,dos);
					
					// String
				
						writeString(this.ACOM_APELLIDO2,dos);
					
					// String
				
						writeString(this.ACOM_PARENTESCO,dos);
					
					// String
				
						writeString(this.ACOM_TELEFONO,dos);
					
					// String
				
						writeString(this.ACOM_CORREO,dos);
					
					// String
				
						writeString(this.DAPLICADAS_ID,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ORDEN);
					
					// String
				
						writeString(this.FECHA_REGISTRO,dos);
					
					// String
				
						writeString(this.FECHA_APLICACION,dos);
					
					// String
				
						writeString(this.TIPO_DOCUMENTO,dos);
					
					// String
				
						writeString(this.NUMERO_DOCUMENTO,dos);
					
					// String
				
						writeString(this.FECHA_NACIMIENTO,dos);
					
					// String
				
						writeString(this.TIPO_EDAD,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.EDAD);
					
					// String
				
						writeString(this.SEXO,dos);
					
					// String
				
						writeString(this.PRIMER_NOMBRE,dos);
					
					// String
				
						writeString(this.SEGUNDO_NOMBRE,dos);
					
					// String
				
						writeString(this.PRIMER_APELLIDO,dos);
					
					// String
				
						writeString(this.SEGUNDO_APELLIDO,dos);
					
					// String
				
						writeString(this.REGIMEN,dos);
					
					// String
				
						writeString(this.EPS,dos);
					
					// String
				
						writeString(this.GRADO,dos);
					
					// String
				
						writeString(this.TIPO_AFILIACION,dos);
					
					// String
				
						writeString(this.FUERZA_ADSCRIPCION,dos);
					
					// String
				
						writeString(this.ESM_ADSCRIPCION,dos);
					
					// String
				
						writeString(this.FUERZA,dos);
					
					// String
				
						writeString(this.UORG,dos);
					
					// String
				
						writeString(this.USUARIO,dos);
					
					// String
				
						writeString(this.PUNTO_VACUNADOR,dos);
					
					// String
				
						writeString(this.NOMBRE_VACUNADOR,dos);
					
					// String
				
						writeString(this.DEPARTAMENTO_RESIDENCIA,dos);
					
					// String
				
						writeString(this.MUNICIPIO_RESIDENCIA,dos);
					
					// String
				
						writeString(this.BARRIO,dos);
					
					// String
				
						writeString(this.DIRECCION,dos);
					
					// String
				
						writeString(this.TELEFONO,dos);
					
					// String
				
						writeString(this.GRUPO_ETNICO,dos);
					
					// String
				
						writeString(this.DESPLAZADA,dos);
					
					// String
				
						writeString(this.DISCAPACITADA,dos);
					
					// String
				
						writeString(this.VICTIMA,dos);
					
					// String
				
						writeString(this.ZVEREDAL,dos);
					
					// String
				
						writeString(this.PARENTESCO,dos);
					
					// String
				
						writeString(this.TIPO_DOCUMENTO_COTIZANTE,dos);
					
					// String
				
						writeString(this.NUMERO_DOCUMENTO_COTIZANTE,dos);
					
					// String
				
						writeString(this.PRIMER_NOMBRE_COTIZANTE,dos);
					
					// String
				
						writeString(this.SEGUNDO_NOMBRE_COTIZANTE,dos);
					
					// String
				
						writeString(this.PRIMER_APELLIDO_COTIZANTE,dos);
					
					// String
				
						writeString(this.SEGUNDO_APELLIDO_COTIZANTE,dos);
					
					// String
				
						writeString(this.GRADO_COTIZANTE,dos);
					
					// String
				
						writeString(this.ACOM_TDOCUMENTO,dos);
					
					// String
				
						writeString(this.ACOM_DOCUMENTO,dos);
					
					// String
				
						writeString(this.ACOM_NOMBRE1,dos);
					
					// String
				
						writeString(this.ACOM_NOMBRE2,dos);
					
					// String
				
						writeString(this.ACOM_APELLIDO1,dos);
					
					// String
				
						writeString(this.ACOM_APELLIDO2,dos);
					
					// String
				
						writeString(this.ACOM_PARENTESCO,dos);
					
					// String
				
						writeString(this.ACOM_TELEFONO,dos);
					
					// String
				
						writeString(this.ACOM_CORREO,dos);
					
					// String
				
						writeString(this.DAPLICADAS_ID,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ORDEN="+String.valueOf(ORDEN));
		sb.append(",FECHA_REGISTRO="+FECHA_REGISTRO);
		sb.append(",FECHA_APLICACION="+FECHA_APLICACION);
		sb.append(",TIPO_DOCUMENTO="+TIPO_DOCUMENTO);
		sb.append(",NUMERO_DOCUMENTO="+NUMERO_DOCUMENTO);
		sb.append(",FECHA_NACIMIENTO="+FECHA_NACIMIENTO);
		sb.append(",TIPO_EDAD="+TIPO_EDAD);
		sb.append(",EDAD="+String.valueOf(EDAD));
		sb.append(",SEXO="+SEXO);
		sb.append(",PRIMER_NOMBRE="+PRIMER_NOMBRE);
		sb.append(",SEGUNDO_NOMBRE="+SEGUNDO_NOMBRE);
		sb.append(",PRIMER_APELLIDO="+PRIMER_APELLIDO);
		sb.append(",SEGUNDO_APELLIDO="+SEGUNDO_APELLIDO);
		sb.append(",REGIMEN="+REGIMEN);
		sb.append(",EPS="+EPS);
		sb.append(",GRADO="+GRADO);
		sb.append(",TIPO_AFILIACION="+TIPO_AFILIACION);
		sb.append(",FUERZA_ADSCRIPCION="+FUERZA_ADSCRIPCION);
		sb.append(",ESM_ADSCRIPCION="+ESM_ADSCRIPCION);
		sb.append(",FUERZA="+FUERZA);
		sb.append(",UORG="+UORG);
		sb.append(",USUARIO="+USUARIO);
		sb.append(",PUNTO_VACUNADOR="+PUNTO_VACUNADOR);
		sb.append(",NOMBRE_VACUNADOR="+NOMBRE_VACUNADOR);
		sb.append(",DEPARTAMENTO_RESIDENCIA="+DEPARTAMENTO_RESIDENCIA);
		sb.append(",MUNICIPIO_RESIDENCIA="+MUNICIPIO_RESIDENCIA);
		sb.append(",BARRIO="+BARRIO);
		sb.append(",DIRECCION="+DIRECCION);
		sb.append(",TELEFONO="+TELEFONO);
		sb.append(",GRUPO_ETNICO="+GRUPO_ETNICO);
		sb.append(",DESPLAZADA="+DESPLAZADA);
		sb.append(",DISCAPACITADA="+DISCAPACITADA);
		sb.append(",VICTIMA="+VICTIMA);
		sb.append(",ZVEREDAL="+ZVEREDAL);
		sb.append(",PARENTESCO="+PARENTESCO);
		sb.append(",TIPO_DOCUMENTO_COTIZANTE="+TIPO_DOCUMENTO_COTIZANTE);
		sb.append(",NUMERO_DOCUMENTO_COTIZANTE="+NUMERO_DOCUMENTO_COTIZANTE);
		sb.append(",PRIMER_NOMBRE_COTIZANTE="+PRIMER_NOMBRE_COTIZANTE);
		sb.append(",SEGUNDO_NOMBRE_COTIZANTE="+SEGUNDO_NOMBRE_COTIZANTE);
		sb.append(",PRIMER_APELLIDO_COTIZANTE="+PRIMER_APELLIDO_COTIZANTE);
		sb.append(",SEGUNDO_APELLIDO_COTIZANTE="+SEGUNDO_APELLIDO_COTIZANTE);
		sb.append(",GRADO_COTIZANTE="+GRADO_COTIZANTE);
		sb.append(",ACOM_TDOCUMENTO="+ACOM_TDOCUMENTO);
		sb.append(",ACOM_DOCUMENTO="+ACOM_DOCUMENTO);
		sb.append(",ACOM_NOMBRE1="+ACOM_NOMBRE1);
		sb.append(",ACOM_NOMBRE2="+ACOM_NOMBRE2);
		sb.append(",ACOM_APELLIDO1="+ACOM_APELLIDO1);
		sb.append(",ACOM_APELLIDO2="+ACOM_APELLIDO2);
		sb.append(",ACOM_PARENTESCO="+ACOM_PARENTESCO);
		sb.append(",ACOM_TELEFONO="+ACOM_TELEFONO);
		sb.append(",ACOM_CORREO="+ACOM_CORREO);
		sb.append(",DAPLICADAS_ID="+DAPLICADAS_ID);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(after_tHashInput_3Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tHashInput_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tHashInput_3_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;


		tOracleInput_6Process(globalMap);
		tHashInput_2Process(globalMap);

		row10Struct row10 = new row10Struct();
row5Struct row5 = new row5Struct();
aplicadasStruct aplicadas = new aplicadasStruct();
out1Struct out1 = new out1Struct();







	
	/**
	 * [tJavaRow_7 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaRow_7", false);
		start_Hash.put("tJavaRow_7", System.currentTimeMillis());
		
	
	currentComponent="tJavaRow_7";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"out1");
					}
				
		int tos_count_tJavaRow_7 = 0;
		

int nb_line_tJavaRow_7 = 0;

 



/**
 * [tJavaRow_7 begin ] stop
 */



	
	/**
	 * [tMap_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_1", false);
		start_Hash.put("tMap_1", System.currentTimeMillis());
		
	
	currentComponent="tMap_1";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"aplicadas");
					}
				
		int tos_count_tMap_1 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row6Struct> tHash_Lookup_row6 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row6Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row6Struct>) 
					globalMap.get( "tHash_Lookup_row6" ))
					;					
					
	

row6Struct row6HashKey = new row6Struct();
row6Struct row6Default = new row6Struct();
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row9Struct> tHash_Lookup_row9 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row9Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row9Struct>) 
					globalMap.get( "tHash_Lookup_row9" ))
					;					
					
	

row9Struct row9HashKey = new row9Struct();
row9Struct row9Default = new row9Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_1__Struct  {
}
Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
// ###############################

// ###############################
// # Outputs initialization
out1Struct out1_tmp = new out1Struct();
// ###############################

        
        



        









 



/**
 * [tMap_1 begin ] stop
 */



	
	/**
	 * [tMap_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_2", false);
		start_Hash.put("tMap_2", System.currentTimeMillis());
		
	
	currentComponent="tMap_2";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row5");
					}
				
		int tos_count_tMap_2 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_2__Struct  {
}
Var__tMap_2__Struct Var__tMap_2 = new Var__tMap_2__Struct();
// ###############################

// ###############################
// # Outputs initialization
aplicadasStruct aplicadas_tmp = new aplicadasStruct();
// ###############################

        
        



        









 



/**
 * [tMap_2 begin ] stop
 */



	
	/**
	 * [tNormalize_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tNormalize_1", false);
		start_Hash.put("tNormalize_1", System.currentTimeMillis());
		
	
	currentComponent="tNormalize_1";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row10");
					}
				
		int tos_count_tNormalize_1 = 0;
		

	int lastNoEmptyIndex_tNormalize_1 = 0;
    int nb_line_tNormalize_1 = 0;
        String tmp_tNormalize_1 = null;
        StringBuilder currentRecord_tNormalize_1 = null;
        String [] normalizeRecord_tNormalize_1 = null;
        java.util.Set<String> recordSet_tNormalize_1 = new java.util.HashSet<String>();
        
				if ( ((String)",").length() == 0 ){
					throw new IllegalArgumentException("Field Separator must be assigned a char."); 
				}
				

 



/**
 * [tNormalize_1 begin ] stop
 */



	
	/**
	 * [tHashInput_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_3", false);
		start_Hash.put("tHashInput_3", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_3";
	
	
		int tos_count_tHashInput_3 = 0;
		


int nb_line_tHashInput_3 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_3=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row17Struct> tHashFile_tHashInput_3 = mf_tHashInput_3.getAdvancedMemoryHashFile("tHashFile_RegistroVacunacion_" + pid +"_tHashOutput_6");
if(tHashFile_tHashInput_3==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<row17Struct> iterator_tHashInput_3 = tHashFile_tHashInput_3.iterator();
while (iterator_tHashInput_3.hasNext()) {
    row17Struct next_tHashInput_3 = iterator_tHashInput_3.next();

	row10.ORDEN = next_tHashInput_3.ORDEN;
	row10.FECHA_REGISTRO = next_tHashInput_3.FECHA_REGISTRO;
	row10.FECHA_APLICACION = next_tHashInput_3.FECHA_APLICACION;
	row10.TIPO_DOCUMENTO = next_tHashInput_3.TIPO_DOCUMENTO;
	row10.NUMERO_DOCUMENTO = next_tHashInput_3.NUMERO_DOCUMENTO;
	row10.FECHA_NACIMIENTO = next_tHashInput_3.FECHA_NACIMIENTO;
	row10.TIPO_EDAD = next_tHashInput_3.TIPO_EDAD;
	row10.EDAD = next_tHashInput_3.EDAD;
	row10.SEXO = next_tHashInput_3.SEXO;
	row10.PRIMER_NOMBRE = next_tHashInput_3.PRIMER_NOMBRE;
	row10.SEGUNDO_NOMBRE = next_tHashInput_3.SEGUNDO_NOMBRE;
	row10.PRIMER_APELLIDO = next_tHashInput_3.PRIMER_APELLIDO;
	row10.SEGUNDO_APELLIDO = next_tHashInput_3.SEGUNDO_APELLIDO;
	row10.REGIMEN = next_tHashInput_3.REGIMEN;
	row10.EPS = next_tHashInput_3.EPS;
	row10.GRADO = next_tHashInput_3.GRADO;
	row10.TIPO_AFILIACION = next_tHashInput_3.TIPO_AFILIACION;
	row10.FUERZA_ADSCRIPCION = next_tHashInput_3.FUERZA_ADSCRIPCION;
	row10.ESM_ADSCRIPCION = next_tHashInput_3.ESM_ADSCRIPCION;
	row10.FUERZA = next_tHashInput_3.FUERZA;
	row10.UORG = next_tHashInput_3.UORG;
	row10.USUARIO = next_tHashInput_3.USUARIO;
	row10.PUNTO_VACUNADOR = next_tHashInput_3.PUNTO_VACUNADOR;
	row10.NOMBRE_VACUNADOR = next_tHashInput_3.NOMBRE_VACUNADOR;
	row10.DEPARTAMENTO_RESIDENCIA = next_tHashInput_3.DEPARTAMENTO_RESIDENCIA;
	row10.MUNICIPIO_RESIDENCIA = next_tHashInput_3.MUNICIPIO_RESIDENCIA;
	row10.BARRIO = next_tHashInput_3.BARRIO;
	row10.DIRECCION = next_tHashInput_3.DIRECCION;
	row10.TELEFONO = next_tHashInput_3.TELEFONO;
	row10.GRUPO_ETNICO = next_tHashInput_3.GRUPO_ETNICO;
	row10.DESPLAZADA = next_tHashInput_3.DESPLAZADA;
	row10.DISCAPACITADA = next_tHashInput_3.DISCAPACITADA;
	row10.VICTIMA = next_tHashInput_3.VICTIMA;
	row10.ZVEREDAL = next_tHashInput_3.ZVEREDAL;
	row10.PARENTESCO = next_tHashInput_3.PARENTESCO;
	row10.TIPO_DOCUMENTO_COTIZANTE = next_tHashInput_3.TIPO_DOCUMENTO_COTIZANTE;
	row10.NUMERO_DOCUMENTO_COTIZANTE = next_tHashInput_3.NUMERO_DOCUMENTO_COTIZANTE;
	row10.PRIMER_NOMBRE_COTIZANTE = next_tHashInput_3.PRIMER_NOMBRE_COTIZANTE;
	row10.SEGUNDO_NOMBRE_COTIZANTE = next_tHashInput_3.SEGUNDO_NOMBRE_COTIZANTE;
	row10.PRIMER_APELLIDO_COTIZANTE = next_tHashInput_3.PRIMER_APELLIDO_COTIZANTE;
	row10.SEGUNDO_APELLIDO_COTIZANTE = next_tHashInput_3.SEGUNDO_APELLIDO_COTIZANTE;
	row10.GRADO_COTIZANTE = next_tHashInput_3.GRADO_COTIZANTE;
	row10.ACOM_TDOCUMENTO = next_tHashInput_3.ACOM_TDOCUMENTO;
	row10.ACOM_DOCUMENTO = next_tHashInput_3.ACOM_DOCUMENTO;
	row10.ACOM_NOMBRE1 = next_tHashInput_3.ACOM_NOMBRE1;
	row10.ACOM_NOMBRE2 = next_tHashInput_3.ACOM_NOMBRE2;
	row10.ACOM_APELLIDO1 = next_tHashInput_3.ACOM_APELLIDO1;
	row10.ACOM_APELLIDO2 = next_tHashInput_3.ACOM_APELLIDO2;
	row10.ACOM_PARENTESCO = next_tHashInput_3.ACOM_PARENTESCO;
	row10.ACOM_TELEFONO = next_tHashInput_3.ACOM_TELEFONO;
	row10.ACOM_CORREO = next_tHashInput_3.ACOM_CORREO;
	row10.DAPLICADAS_ID = next_tHashInput_3.DAPLICADAS_ID;

 



/**
 * [tHashInput_3 begin ] stop
 */
	
	/**
	 * [tHashInput_3 main ] start
	 */

	

	
	
	currentComponent="tHashInput_3";
	
	

 


	tos_count_tHashInput_3++;

/**
 * [tHashInput_3 main ] stop
 */
	
	/**
	 * [tHashInput_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashInput_3";
	
	

 



/**
 * [tHashInput_3 process_data_begin ] stop
 */

	
	/**
	 * [tNormalize_1 main ] start
	 */

	

	
	
	currentComponent="tNormalize_1";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row10"
						
						);
					}
					

            normalizeRecord_tNormalize_1 = new String[1];
            if(row10.DAPLICADAS_ID != null) {
				if("".equals(row10.DAPLICADAS_ID)){
		        	normalizeRecord_tNormalize_1[0] = "";
		        }else{
	                
	                		normalizeRecord_tNormalize_1 = row10.DAPLICADAS_ID.split(",",-1);
	                        
                }           
            }
             		lastNoEmptyIndex_tNormalize_1=normalizeRecord_tNormalize_1.length;
	             	
            	
            	for(int i_tNormalize_1 = 0 ; i_tNormalize_1 < lastNoEmptyIndex_tNormalize_1 ; i_tNormalize_1++) {
		  			
	                currentRecord_tNormalize_1 = new StringBuilder();
	                nb_line_tNormalize_1++;               
	                
	                        	row5.ORDEN = row10.ORDEN;
	                        
	                        	row5.FECHA_REGISTRO = row10.FECHA_REGISTRO;
	                        
	                        	row5.FECHA_APLICACION = row10.FECHA_APLICACION;
	                        
	                        	row5.TIPO_DOCUMENTO = row10.TIPO_DOCUMENTO;
	                        
	                        	row5.NUMERO_DOCUMENTO = row10.NUMERO_DOCUMENTO;
	                        
	                        	row5.FECHA_NACIMIENTO = row10.FECHA_NACIMIENTO;
	                        
	                        	row5.TIPO_EDAD = row10.TIPO_EDAD;
	                        
	                        	row5.EDAD = row10.EDAD;
	                        
	                        	row5.SEXO = row10.SEXO;
	                        
	                        	row5.PRIMER_NOMBRE = row10.PRIMER_NOMBRE;
	                        
	                        	row5.SEGUNDO_NOMBRE = row10.SEGUNDO_NOMBRE;
	                        
	                        	row5.PRIMER_APELLIDO = row10.PRIMER_APELLIDO;
	                        
	                        	row5.SEGUNDO_APELLIDO = row10.SEGUNDO_APELLIDO;
	                        
	                        	row5.REGIMEN = row10.REGIMEN;
	                        
	                        	row5.EPS = row10.EPS;
	                        
	                        	row5.GRADO = row10.GRADO;
	                        
	                        	row5.TIPO_AFILIACION = row10.TIPO_AFILIACION;
	                        
	                        	row5.FUERZA_ADSCRIPCION = row10.FUERZA_ADSCRIPCION;
	                        
	                        	row5.ESM_ADSCRIPCION = row10.ESM_ADSCRIPCION;
	                        
	                        	row5.FUERZA = row10.FUERZA;
	                        
	                        	row5.UORG = row10.UORG;
	                        
	                        	row5.USUARIO = row10.USUARIO;
	                        
	                        	row5.PUNTO_VACUNADOR = row10.PUNTO_VACUNADOR;
	                        
	                        	row5.NOMBRE_VACUNADOR = row10.NOMBRE_VACUNADOR;
	                        
	                        	row5.DEPARTAMENTO_RESIDENCIA = row10.DEPARTAMENTO_RESIDENCIA;
	                        
	                        	row5.MUNICIPIO_RESIDENCIA = row10.MUNICIPIO_RESIDENCIA;
	                        
	                        	row5.BARRIO = row10.BARRIO;
	                        
	                        	row5.DIRECCION = row10.DIRECCION;
	                        
	                        	row5.TELEFONO = row10.TELEFONO;
	                        
	                        	row5.GRUPO_ETNICO = row10.GRUPO_ETNICO;
	                        
	                        	row5.DESPLAZADA = row10.DESPLAZADA;
	                        
	                        	row5.DISCAPACITADA = row10.DISCAPACITADA;
	                        
	                        	row5.VICTIMA = row10.VICTIMA;
	                        
	                        	row5.ZVEREDAL = row10.ZVEREDAL;
	                        
	                        	row5.PARENTESCO = row10.PARENTESCO;
	                        
	                        	row5.TIPO_DOCUMENTO_COTIZANTE = row10.TIPO_DOCUMENTO_COTIZANTE;
	                        
	                        	row5.NUMERO_DOCUMENTO_COTIZANTE = row10.NUMERO_DOCUMENTO_COTIZANTE;
	                        
	                        	row5.PRIMER_NOMBRE_COTIZANTE = row10.PRIMER_NOMBRE_COTIZANTE;
	                        
	                        	row5.SEGUNDO_NOMBRE_COTIZANTE = row10.SEGUNDO_NOMBRE_COTIZANTE;
	                        
	                        	row5.PRIMER_APELLIDO_COTIZANTE = row10.PRIMER_APELLIDO_COTIZANTE;
	                        
	                        	row5.SEGUNDO_APELLIDO_COTIZANTE = row10.SEGUNDO_APELLIDO_COTIZANTE;
	                        
	                        	row5.GRADO_COTIZANTE = row10.GRADO_COTIZANTE;
	                        
	                        	row5.ACOM_TDOCUMENTO = row10.ACOM_TDOCUMENTO;
	                        
	                        	row5.ACOM_DOCUMENTO = row10.ACOM_DOCUMENTO;
	                        
	                        	row5.ACOM_NOMBRE1 = row10.ACOM_NOMBRE1;
	                        
	                        	row5.ACOM_NOMBRE2 = row10.ACOM_NOMBRE2;
	                        
	                        	row5.ACOM_APELLIDO1 = row10.ACOM_APELLIDO1;
	                        
	                        	row5.ACOM_APELLIDO2 = row10.ACOM_APELLIDO2;
	                        
	                        	row5.ACOM_PARENTESCO = row10.ACOM_PARENTESCO;
	                        
	                        	row5.ACOM_TELEFONO = row10.ACOM_TELEFONO;
	                        
	                        	row5.ACOM_CORREO = row10.ACOM_CORREO;
	                        
	                        	row5.DAPLICADAS_ID = normalizeRecord_tNormalize_1[i_tNormalize_1];
		                    

 


	tos_count_tNormalize_1++;

/**
 * [tNormalize_1 main ] stop
 */
	
	/**
	 * [tNormalize_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tNormalize_1";
	
	

 



/**
 * [tNormalize_1 process_data_begin ] stop
 */

	
	/**
	 * [tMap_2 main ] start
	 */

	

	
	
	currentComponent="tMap_2";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row5"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_2 = false;
		
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_2 = false;
		boolean mainRowRejected_tMap_2 = false;
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_2__Struct Var = Var__tMap_2;// ###############################
        // ###############################
        // # Output tables

aplicadas = null;


// # Output table : 'aplicadas'
aplicadas_tmp.ORDEN = row5.ORDEN ;
aplicadas_tmp.DAPLICADAS_ID = new BigDecimal(row5.DAPLICADAS_ID);
aplicadas = aplicadas_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_2 = false;










 


	tos_count_tMap_2++;

/**
 * [tMap_2 main ] stop
 */
	
	/**
	 * [tMap_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_2";
	
	

 



/**
 * [tMap_2 process_data_begin ] stop
 */
// Start of branch "aplicadas"
if(aplicadas != null) { 



	
	/**
	 * [tMap_1 main ] start
	 */

	

	
	
	currentComponent="tMap_1";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"aplicadas"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;
		
						row6Struct row6 = null;
					
						row9Struct row9 = null;
					
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_1 = false;
		boolean mainRowRejected_tMap_1 = false;
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row6" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow6 = false;
       		  	    	
       		  	    	
 							row6Struct row6ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_1) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_1 = false;
								
                        		    		    row6HashKey.DAPLICADAS_ID = aplicadas.DAPLICADAS_ID ;
                        		    		

								
		                        	row6HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row6.lookup( row6HashKey );

	  							

	  							

 								
								  
								  if(!tHash_Lookup_row6.hasNext()) { // G_TM_M_090

  								
		  				
	  								
			  							rejectedInnerJoin_tMap_1 = true;
	  								
						
									
  									  		
 								
								  
								  } // G_TM_M_090

  								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row6 != null && tHash_Lookup_row6.getCount(row6HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row6' and it contains more one result from keys :  row6.DAPLICADAS_ID = '" + row6HashKey.DAPLICADAS_ID + "'");
								} // G 071
							

							
                    		  	 
							   
                    		  	 
	       		  	    	row6Struct fromLookup_row6 = null;
							row6 = row6Default;
										 
							
								 
							
							
								if (tHash_Lookup_row6 !=null && tHash_Lookup_row6.hasNext()) { // G 099
								
							
								
								fromLookup_row6 = tHash_Lookup_row6.next();

							
							
								} // G 099
							
							

							if(fromLookup_row6 != null) {
								row6 = fromLookup_row6;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	           	
	            	
	            

				///////////////////////////////////////////////
				// Starting Lookup Table "row9" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow9 = false;
       		  	    	
       		  	    	
 							row9Struct row9ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_1) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_1 = false;
								
                        		    		    row9HashKey.BIOLOGICOS_ID = row6.BIOLOGICOS_ID ;
                        		    		

								
		                        	row9HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row9.lookup( row9HashKey );

	  							

	  							

 								
								  
								  if(!tHash_Lookup_row9.hasNext()) { // G_TM_M_090

  								
		  				
	  								
			  							rejectedInnerJoin_tMap_1 = true;
	  								
						
									
  									  		
 								
								  
								  } // G_TM_M_090

  								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row9 != null && tHash_Lookup_row9.getCount(row9HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row9' and it contains more one result from keys :  row9.BIOLOGICOS_ID = '" + row9HashKey.BIOLOGICOS_ID + "'");
								} // G 071
							

							
                    		  	 
							   
                    		  	 
	       		  	    	row9Struct fromLookup_row9 = null;
							row9 = row9Default;
										 
							
								 
							
							
								if (tHash_Lookup_row9 !=null && tHash_Lookup_row9.hasNext()) { // G 099
								
							
								
								fromLookup_row9 = tHash_Lookup_row9.next();

							
							
								} // G 099
							
							

							if(fromLookup_row9 != null) {
								row9 = fromLookup_row9;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
        // ###############################
        // # Output tables

out1 = null;

if(!rejectedInnerJoin_tMap_1 ) {

// # Output table : 'out1'
out1_tmp.FILA = aplicadas.ORDEN ;
out1_tmp.COLUMNA = row9.ORDEN ;
out1_tmp.DOSIS = row6.DOSIS ;
out1_tmp.LOTE_BIOLOGICO = row6.LOTE_BIOLOGICO ;
out1_tmp.CALIBRE_JERINGA = row6.CALIBRE_JERINGA ;
out1_tmp.LOTE_JERINGA = row6.LOTE_JERINGA ;
out1_tmp.ACTUALIZACION = row6.ACTUALIZACION ;
out1_tmp.LOTE_DILUYENTE = row6.LOTE_DILUYENTE ;
out1 = out1_tmp;
}  // closing inner join bracket (2)
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_1 = false;










 


	tos_count_tMap_1++;

/**
 * [tMap_1 main ] stop
 */
	
	/**
	 * [tMap_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_1";
	
	

 



/**
 * [tMap_1 process_data_begin ] stop
 */
// Start of branch "out1"
if(out1 != null) { 



	
	/**
	 * [tJavaRow_7 main ] start
	 */

	

	
	
	currentComponent="tJavaRow_7";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"out1"
						
						);
					}
					

    int row = out1.FILA.intValue();
int col = out1.COLUMNA.intValue();
int isUpdate = out1.ACTUALIZACION.intValue();
String data = out1.DOSIS + "|" +
              out1.LOTE_BIOLOGICO + "|" +
              out1.CALIBRE_JERINGA + "|" +
              out1.LOTE_JERINGA + "|" +
              out1.LOTE_DILUYENTE;

// Inserta el registro de las vacunas aplicadas a cada persona	            
RegistroVacunacionPoi.vacunasData(data, row, col, isUpdate);
    nb_line_tJavaRow_7++;   

 


	tos_count_tJavaRow_7++;

/**
 * [tJavaRow_7 main ] stop
 */
	
	/**
	 * [tJavaRow_7 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJavaRow_7";
	
	

 



/**
 * [tJavaRow_7 process_data_begin ] stop
 */
	
	/**
	 * [tJavaRow_7 process_data_end ] start
	 */

	

	
	
	currentComponent="tJavaRow_7";
	
	

 



/**
 * [tJavaRow_7 process_data_end ] stop
 */

} // End of branch "out1"




	
	/**
	 * [tMap_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_1";
	
	

 



/**
 * [tMap_1 process_data_end ] stop
 */

} // End of branch "aplicadas"




	
	/**
	 * [tMap_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_2";
	
	

 



/**
 * [tMap_2 process_data_end ] stop
 */
		// end for
	}



	
	/**
	 * [tNormalize_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tNormalize_1";
	
	

 



/**
 * [tNormalize_1 process_data_end ] stop
 */



	
	/**
	 * [tHashInput_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashInput_3";
	
	

 



/**
 * [tHashInput_3 process_data_end ] stop
 */
	
	/**
	 * [tHashInput_3 end ] start
	 */

	

	
	
	currentComponent="tHashInput_3";
	
	
    

		
			nb_line_tHashInput_3++;
		}	
    		
    		mf_tHashInput_3.clearCache("tHashFile_RegistroVacunacion_" + pid +"_tHashOutput_6");
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_RegistroVacunacion_" + pid +"_tHashOutput_6");
	


	globalMap.put("tHashInput_3_NB_LINE", nb_line_tHashInput_3);       

 

ok_Hash.put("tHashInput_3", true);
end_Hash.put("tHashInput_3", System.currentTimeMillis());




/**
 * [tHashInput_3 end ] stop
 */

	
	/**
	 * [tNormalize_1 end ] start
	 */

	

	
	
	currentComponent="tNormalize_1";
	
	

    globalMap.put("tNormalize_1_NB_LINE", nb_line_tNormalize_1);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row10");
			  	}
			  	
 

ok_Hash.put("tNormalize_1", true);
end_Hash.put("tNormalize_1", System.currentTimeMillis());




/**
 * [tNormalize_1 end ] stop
 */

	
	/**
	 * [tMap_2 end ] start
	 */

	

	
	
	currentComponent="tMap_2";
	
	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row5");
			  	}
			  	
 

ok_Hash.put("tMap_2", true);
end_Hash.put("tMap_2", System.currentTimeMillis());




/**
 * [tMap_2 end ] stop
 */

	
	/**
	 * [tMap_1 end ] start
	 */

	

	
	
	currentComponent="tMap_1";
	
	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_row6 != null) {
						tHash_Lookup_row6.endGet();
					}
					globalMap.remove( "tHash_Lookup_row6" );

					
					
				
					if(tHash_Lookup_row9 != null) {
						tHash_Lookup_row9.endGet();
					}
					globalMap.remove( "tHash_Lookup_row9" );

					
					
				
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"aplicadas");
			  	}
			  	
 

ok_Hash.put("tMap_1", true);
end_Hash.put("tMap_1", System.currentTimeMillis());




/**
 * [tMap_1 end ] stop
 */

	
	/**
	 * [tJavaRow_7 end ] start
	 */

	

	
	
	currentComponent="tJavaRow_7";
	
	

globalMap.put("tJavaRow_7_NB_LINE",nb_line_tJavaRow_7);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"out1");
			  	}
			  	
 

ok_Hash.put("tJavaRow_7", true);
end_Hash.put("tJavaRow_7", System.currentTimeMillis());




/**
 * [tJavaRow_7 end ] stop
 */












				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
					     			//free memory for "tMap_1"
					     			globalMap.remove("tHash_Lookup_row6"); 
				     			
					     			//free memory for "tMap_1"
					     			globalMap.remove("tHash_Lookup_row9"); 
				     			
				try{
					
	
	/**
	 * [tHashInput_3 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_3";
	
	

 



/**
 * [tHashInput_3 finally ] stop
 */

	
	/**
	 * [tNormalize_1 finally ] start
	 */

	

	
	
	currentComponent="tNormalize_1";
	
	

 



/**
 * [tNormalize_1 finally ] stop
 */

	
	/**
	 * [tMap_2 finally ] start
	 */

	

	
	
	currentComponent="tMap_2";
	
	

 



/**
 * [tMap_2 finally ] stop
 */

	
	/**
	 * [tMap_1 finally ] start
	 */

	

	
	
	currentComponent="tMap_1";
	
	

 



/**
 * [tMap_1 finally ] stop
 */

	
	/**
	 * [tJavaRow_7 finally ] start
	 */

	

	
	
	currentComponent="tJavaRow_7";
	
	

 



/**
 * [tJavaRow_7 finally ] stop
 */












				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tHashInput_3_SUBPROCESS_STATE", 1);
	}
	


public void tJava_4Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_4_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tJava_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_4", false);
		start_Hash.put("tJava_4", System.currentTimeMillis());
		
	
	currentComponent="tJava_4";
	
	
		int tos_count_tJava_4 = 0;
		


// Finaliza y crea el reporte xlsx
RegistroVacunacionPoi.Finalize();
System.out.println("-- CARPETA DE SALIDA: " + context.CARPETA_SALIDA);
 



/**
 * [tJava_4 begin ] stop
 */
	
	/**
	 * [tJava_4 main ] start
	 */

	

	
	
	currentComponent="tJava_4";
	
	

 


	tos_count_tJava_4++;

/**
 * [tJava_4 main ] stop
 */
	
	/**
	 * [tJava_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_4";
	
	

 



/**
 * [tJava_4 process_data_begin ] stop
 */
	
	/**
	 * [tJava_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_4";
	
	

 



/**
 * [tJava_4 process_data_end ] stop
 */
	
	/**
	 * [tJava_4 end ] start
	 */

	

	
	
	currentComponent="tJava_4";
	
	

 

ok_Hash.put("tJava_4", true);
end_Hash.put("tJava_4", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk15", 0, "ok");
				}
				tFileArchive_1Process(globalMap);



/**
 * [tJava_4 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_4 finally ] start
	 */

	

	
	
	currentComponent="tJava_4";
	
	

 



/**
 * [tJava_4 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_4_SUBPROCESS_STATE", 1);
	}
	


public void tFileArchive_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileArchive_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tFileArchive_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileArchive_1", false);
		start_Hash.put("tFileArchive_1", System.currentTimeMillis());
		
	
	currentComponent="tFileArchive_1";
	
	
		int tos_count_tFileArchive_1 = 0;
		

 



/**
 * [tFileArchive_1 begin ] stop
 */
	
	/**
	 * [tFileArchive_1 main ] start
	 */

	

	
	
	currentComponent="tFileArchive_1";
	
	

	

		String sourceFile_tFileArchive_1 = context.CARPETA_SALIDA;
	

    if (java.nio.file.Files.notExists(java.nio.file.Paths.get(sourceFile_tFileArchive_1), java.nio.file.LinkOption.NOFOLLOW_LINKS)){
        throw new java.io.FileNotFoundException(sourceFile_tFileArchive_1 + " (The system cannot find the path specified)");
    }

    String zipFile_tFileArchive_1 = context.CARPETA_SALIDA+"/"+context.NOMBRE_ZIP;
    
    com.talend.compress.zip.Zip zip_tFileArchive_1 = new com.talend.compress.zip.Zip(sourceFile_tFileArchive_1, zipFile_tFileArchive_1);
    zip_tFileArchive_1.setOverwriteExistTargetZip(true);
	zip_tFileArchive_1.setMakeTargetDir(false);
	zip_tFileArchive_1.setCompressLevel(4);
	zip_tFileArchive_1.setArchiveFormat("zip");
	zip_tFileArchive_1.setAllFiles(false);
	
	  
    	//build filename pattern filter
	    String[] patterns_tFileArchive_1 = new String[1];
    	
	        patterns_tFileArchive_1[0] = context.NOMBRE_ARCHIVO;
  		StringBuilder sbf_tFileArchive_1 = new StringBuilder(); 
        sbf_tFileArchive_1.append("(");
        for (int i_tFileArchive_1 = 0 ; i_tFileArchive_1 < patterns_tFileArchive_1.length ; i_tFileArchive_1++) {
            sbf_tFileArchive_1.append(patterns_tFileArchive_1[i_tFileArchive_1].replaceAll("\\.", "\\\\.").replaceAll("\\*", ".*"));
            if(i_tFileArchive_1 != patterns_tFileArchive_1.length-1) sbf_tFileArchive_1.append("|");
        }        
        sbf_tFileArchive_1.append(")");
        final String maskStr_tFileArchive_1 = new String(sbf_tFileArchive_1.toString());
        
        //apply the filter
       	zip_tFileArchive_1.setNamePatternFilter(maskStr_tFileArchive_1);
	
	   zip_tFileArchive_1.setContainSubDir(false);
	   zip_tFileArchive_1.setEncoding("ISO-8859-15");
	   zip_tFileArchive_1.setZip64Mode("ASNEEDED");
	   zip_tFileArchive_1.setEncrypted(false);
		        
	   
	    
	    
	final String decryptedPassword_tFileArchive_1 = routines.system.PasswordEncryptUtil.decryptPassword("enc:routine.encryption.key.v1:qbs0jg01htDPfmXyy7KQamOa2eMrgpHQzLmNBg==");
	    
	   zip_tFileArchive_1.setPassword(decryptedPassword_tFileArchive_1);
	   
	      zip_tFileArchive_1.setUseZip4jEncryption(true);

	      
	   	  zip_tFileArchive_1.setEncryptionMethod("ZIP_STANDARD");
	   	  
  
  
   globalMap.put("tFileArchive_1_ARCHIVE_FILEPATH",zipFile_tFileArchive_1);
   
   globalMap.put("tFileArchive_1_ARCHIVE_FILENAME", new java.io.File(zipFile_tFileArchive_1).getName());

   zip_tFileArchive_1.doZip();


 


	tos_count_tFileArchive_1++;

/**
 * [tFileArchive_1 main ] stop
 */
	
	/**
	 * [tFileArchive_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileArchive_1";
	
	

 



/**
 * [tFileArchive_1 process_data_begin ] stop
 */
	
	/**
	 * [tFileArchive_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileArchive_1";
	
	

 



/**
 * [tFileArchive_1 process_data_end ] stop
 */
	
	/**
	 * [tFileArchive_1 end ] start
	 */

	

	
	
	currentComponent="tFileArchive_1";
	
	

 

ok_Hash.put("tFileArchive_1", true);
end_Hash.put("tFileArchive_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk9", 0, "ok");
				}
				tFileDelete_1Process(globalMap);



/**
 * [tFileArchive_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileArchive_1 finally ] start
	 */

	

	
	
	currentComponent="tFileArchive_1";
	
	

 



/**
 * [tFileArchive_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileArchive_1_SUBPROCESS_STATE", 1);
	}
	


public void tFileDelete_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileDelete_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tFileDelete_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileDelete_1", false);
		start_Hash.put("tFileDelete_1", System.currentTimeMillis());
		
	
	currentComponent="tFileDelete_1";
	
	
		int tos_count_tFileDelete_1 = 0;
		

 



/**
 * [tFileDelete_1 begin ] stop
 */
	
	/**
	 * [tFileDelete_1 main ] start
	 */

	

	
	
	currentComponent="tFileDelete_1";
	
	

 

class DeleteFoldertFileDelete_1{
	 /**
     * delete all the sub-files in 'file'
     * 
     * @param file
     */
	public boolean delete(java.io.File file) {
        java.io.File[] files = file.listFiles();
        for (int i = 0; i < files.length; i++) {
            if (files[i].isFile()) {
                files[i].delete();
            } else if (files[i].isDirectory()) {
                if (!files[i].delete()) {
                    delete(files[i]);
                }
            }
        }
        deleteDirectory(file);
        return file.delete();
    }

    /**
     * delete all the sub-folders in 'file'
     * 
     * @param file
     */
    private void deleteDirectory(java.io.File file) {
        java.io.File[] filed = file.listFiles();
        for (int i = 0; i < filed.length; i++) {
        	if(filed[i].isDirectory()) {
            	deleteDirectory(filed[i]);
            }
            filed[i].delete();
        }
    }

}
    java.io.File file_tFileDelete_1=new java.io.File(context.CARPETA_SALIDA+"/"+context.NOMBRE_ARCHIVO);
    if(file_tFileDelete_1.exists()&& file_tFileDelete_1.isFile()){
    	if(file_tFileDelete_1.delete()){
    		globalMap.put("tFileDelete_1_CURRENT_STATUS", "File deleted.");
		}else{
			globalMap.put("tFileDelete_1_CURRENT_STATUS", "No file deleted.");
				throw new RuntimeException("File " + file_tFileDelete_1.getAbsolutePath() + " can not be deleted.");
		}
	}else{
		globalMap.put("tFileDelete_1_CURRENT_STATUS", "File does not exist or is invalid.");
			throw new RuntimeException("File " + file_tFileDelete_1.getAbsolutePath() + " does not exist or is invalid or is not a file.");
	}
	globalMap.put("tFileDelete_1_DELETE_PATH",context.CARPETA_SALIDA+"/"+context.NOMBRE_ARCHIVO);
 


	tos_count_tFileDelete_1++;

/**
 * [tFileDelete_1 main ] stop
 */
	
	/**
	 * [tFileDelete_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileDelete_1";
	
	

 



/**
 * [tFileDelete_1 process_data_begin ] stop
 */
	
	/**
	 * [tFileDelete_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileDelete_1";
	
	

 



/**
 * [tFileDelete_1 process_data_end ] stop
 */
	
	/**
	 * [tFileDelete_1 end ] start
	 */

	

	
	
	currentComponent="tFileDelete_1";
	
	

 

ok_Hash.put("tFileDelete_1", true);
end_Hash.put("tFileDelete_1", System.currentTimeMillis());

   			if (!context.ES_WEB_SERVICE) {
   				
					if(execStat){
   	 					runStat.updateStatOnConnection("If1", 0, "true");
					}
				tFixedFlowInput_3Process(globalMap);
			}

			   
   				else{
					if(execStat){   
   	 					runStat.updateStatOnConnection("If1", 0, "false");
					}   	 
   				}
   			if (context.ES_WEB_SERVICE) {
   				
					if(execStat){
   	 					runStat.updateStatOnConnection("If2", 0, "true");
					}
				tFixedFlowInput_2Process(globalMap);
			}

			   
   				else{
					if(execStat){   
   	 					runStat.updateStatOnConnection("If2", 0, "false");
					}   	 
   				}



/**
 * [tFileDelete_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileDelete_1 finally ] start
	 */

	

	
	
	currentComponent="tFileDelete_1";
	
	

 



/**
 * [tFileDelete_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileDelete_1_SUBPROCESS_STATE", 1);
	}
	


public static class row20Struct implements routines.system.IPersistableRow<row20Struct> {
    final static byte[] commonByteArrayLock_VAC_CONSOLIDADOS_VAC_RegistroVacunacion = new byte[0];
    static byte[] commonByteArray_VAC_CONSOLIDADOS_VAC_RegistroVacunacion = new byte[0];

	
			    public String CARPETA_SALIDA;

				public String getCARPETA_SALIDA () {
					return this.CARPETA_SALIDA;
				}

				public Boolean CARPETA_SALIDAIsNullable(){
				    return true;
				}
				public Boolean CARPETA_SALIDAIsKey(){
				    return false;
				}
				public Integer CARPETA_SALIDALength(){
				    return null;
				}
				public Integer CARPETA_SALIDAPrecision(){
				    return null;
				}
				public String CARPETA_SALIDADefault(){
				
					return null;
				
				}
				public String CARPETA_SALIDAComment(){
				
				    return "";
				
				}
				public String CARPETA_SALIDAPattern(){
				
					return "";
				
				}
				public String CARPETA_SALIDAOriginalDbColumnName(){
				
					return "CARPETA_SALIDA";
				
				}

				
			    public String NOMBRE_ZIP;

				public String getNOMBRE_ZIP () {
					return this.NOMBRE_ZIP;
				}

				public Boolean NOMBRE_ZIPIsNullable(){
				    return true;
				}
				public Boolean NOMBRE_ZIPIsKey(){
				    return false;
				}
				public Integer NOMBRE_ZIPLength(){
				    return null;
				}
				public Integer NOMBRE_ZIPPrecision(){
				    return null;
				}
				public String NOMBRE_ZIPDefault(){
				
					return null;
				
				}
				public String NOMBRE_ZIPComment(){
				
				    return "";
				
				}
				public String NOMBRE_ZIPPattern(){
				
					return "";
				
				}
				public String NOMBRE_ZIPOriginalDbColumnName(){
				
					return "NOMBRE_ZIP";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_VAC_CONSOLIDADOS_VAC_RegistroVacunacion.length) {
				if(length < 1024 && commonByteArray_VAC_CONSOLIDADOS_VAC_RegistroVacunacion.length == 0) {
   					commonByteArray_VAC_CONSOLIDADOS_VAC_RegistroVacunacion = new byte[1024];
				} else {
   					commonByteArray_VAC_CONSOLIDADOS_VAC_RegistroVacunacion = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_VAC_CONSOLIDADOS_VAC_RegistroVacunacion, 0, length);
			strReturn = new String(commonByteArray_VAC_CONSOLIDADOS_VAC_RegistroVacunacion, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_VAC_CONSOLIDADOS_VAC_RegistroVacunacion.length) {
				if(length < 1024 && commonByteArray_VAC_CONSOLIDADOS_VAC_RegistroVacunacion.length == 0) {
   					commonByteArray_VAC_CONSOLIDADOS_VAC_RegistroVacunacion = new byte[1024];
				} else {
   					commonByteArray_VAC_CONSOLIDADOS_VAC_RegistroVacunacion = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_VAC_CONSOLIDADOS_VAC_RegistroVacunacion, 0, length);
			strReturn = new String(commonByteArray_VAC_CONSOLIDADOS_VAC_RegistroVacunacion, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_VAC_CONSOLIDADOS_VAC_RegistroVacunacion) {

        	try {

        		int length = 0;
		
					this.CARPETA_SALIDA = readString(dis);
					
					this.NOMBRE_ZIP = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_VAC_CONSOLIDADOS_VAC_RegistroVacunacion) {

        	try {

        		int length = 0;
		
					this.CARPETA_SALIDA = readString(dis);
					
					this.NOMBRE_ZIP = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.CARPETA_SALIDA,dos);
					
					// String
				
						writeString(this.NOMBRE_ZIP,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.CARPETA_SALIDA,dos);
					
					// String
				
						writeString(this.NOMBRE_ZIP,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("CARPETA_SALIDA="+CARPETA_SALIDA);
		sb.append(",NOMBRE_ZIP="+NOMBRE_ZIP);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row20Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tFixedFlowInput_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFixedFlowInput_3_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row20Struct row20 = new row20Struct();




	
	/**
	 * [tBufferOutput_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tBufferOutput_3", false);
		start_Hash.put("tBufferOutput_3", System.currentTimeMillis());
		
	
	currentComponent="tBufferOutput_3";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row20");
					}
				
		int tos_count_tBufferOutput_3 = 0;
		

 



/**
 * [tBufferOutput_3 begin ] stop
 */



	
	/**
	 * [tFixedFlowInput_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tFixedFlowInput_3", false);
		start_Hash.put("tFixedFlowInput_3", System.currentTimeMillis());
		
	
	currentComponent="tFixedFlowInput_3";
	
	
		int tos_count_tFixedFlowInput_3 = 0;
		

	    for (int i_tFixedFlowInput_3 = 0 ; i_tFixedFlowInput_3 < 1 ; i_tFixedFlowInput_3++) {
	                	            	
    	            		row20.CARPETA_SALIDA = context.CARPETA_SALIDA;
    	            	        	            	
    	            		row20.NOMBRE_ZIP = context.NOMBRE_ZIP;
    	            	

 



/**
 * [tFixedFlowInput_3 begin ] stop
 */
	
	/**
	 * [tFixedFlowInput_3 main ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_3";
	
	

 


	tos_count_tFixedFlowInput_3++;

/**
 * [tFixedFlowInput_3 main ] stop
 */
	
	/**
	 * [tFixedFlowInput_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_3";
	
	

 



/**
 * [tFixedFlowInput_3 process_data_begin ] stop
 */

	
	/**
	 * [tBufferOutput_3 main ] start
	 */

	

	
	
	currentComponent="tBufferOutput_3";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row20"
						
						);
					}
					



String[] row_tBufferOutput_3=new String[]{"","",};		
	    if(row20.CARPETA_SALIDA != null){
	        
	            row_tBufferOutput_3[0] = row20.CARPETA_SALIDA;
	                        			    
	    }else{
	    	row_tBufferOutput_3[0] = null;
	    }
	    if(row20.NOMBRE_ZIP != null){
	        
	            row_tBufferOutput_3[1] = row20.NOMBRE_ZIP;
	                        			    
	    }else{
	    	row_tBufferOutput_3[1] = null;
	    }
	globalBuffer.add(row_tBufferOutput_3);	
	
 


	tos_count_tBufferOutput_3++;

/**
 * [tBufferOutput_3 main ] stop
 */
	
	/**
	 * [tBufferOutput_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tBufferOutput_3";
	
	

 



/**
 * [tBufferOutput_3 process_data_begin ] stop
 */
	
	/**
	 * [tBufferOutput_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tBufferOutput_3";
	
	

 



/**
 * [tBufferOutput_3 process_data_end ] stop
 */



	
	/**
	 * [tFixedFlowInput_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_3";
	
	

 



/**
 * [tFixedFlowInput_3 process_data_end ] stop
 */
	
	/**
	 * [tFixedFlowInput_3 end ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_3";
	
	

        }
        globalMap.put("tFixedFlowInput_3_NB_LINE", 1);        

 

ok_Hash.put("tFixedFlowInput_3", true);
end_Hash.put("tFixedFlowInput_3", System.currentTimeMillis());




/**
 * [tFixedFlowInput_3 end ] stop
 */

	
	/**
	 * [tBufferOutput_3 end ] start
	 */

	

	
	
	currentComponent="tBufferOutput_3";
	
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row20");
			  	}
			  	
 

ok_Hash.put("tBufferOutput_3", true);
end_Hash.put("tBufferOutput_3", System.currentTimeMillis());




/**
 * [tBufferOutput_3 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFixedFlowInput_3 finally ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_3";
	
	

 



/**
 * [tFixedFlowInput_3 finally ] stop
 */

	
	/**
	 * [tBufferOutput_3 finally ] start
	 */

	

	
	
	currentComponent="tBufferOutput_3";
	
	

 



/**
 * [tBufferOutput_3 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFixedFlowInput_3_SUBPROCESS_STATE", 1);
	}
	


public static class row18Struct implements routines.system.IPersistableRow<row18Struct> {
    final static byte[] commonByteArrayLock_VAC_CONSOLIDADOS_VAC_RegistroVacunacion = new byte[0];
    static byte[] commonByteArray_VAC_CONSOLIDADOS_VAC_RegistroVacunacion = new byte[0];

	
			    public String Message;

				public String getMessage () {
					return this.Message;
				}

				public Boolean MessageIsNullable(){
				    return true;
				}
				public Boolean MessageIsKey(){
				    return false;
				}
				public Integer MessageLength(){
				    return null;
				}
				public Integer MessagePrecision(){
				    return null;
				}
				public String MessageDefault(){
				
					return null;
				
				}
				public String MessageComment(){
				
				    return "";
				
				}
				public String MessagePattern(){
				
					return "";
				
				}
				public String MessageOriginalDbColumnName(){
				
					return "Message";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_VAC_CONSOLIDADOS_VAC_RegistroVacunacion.length) {
				if(length < 1024 && commonByteArray_VAC_CONSOLIDADOS_VAC_RegistroVacunacion.length == 0) {
   					commonByteArray_VAC_CONSOLIDADOS_VAC_RegistroVacunacion = new byte[1024];
				} else {
   					commonByteArray_VAC_CONSOLIDADOS_VAC_RegistroVacunacion = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_VAC_CONSOLIDADOS_VAC_RegistroVacunacion, 0, length);
			strReturn = new String(commonByteArray_VAC_CONSOLIDADOS_VAC_RegistroVacunacion, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_VAC_CONSOLIDADOS_VAC_RegistroVacunacion.length) {
				if(length < 1024 && commonByteArray_VAC_CONSOLIDADOS_VAC_RegistroVacunacion.length == 0) {
   					commonByteArray_VAC_CONSOLIDADOS_VAC_RegistroVacunacion = new byte[1024];
				} else {
   					commonByteArray_VAC_CONSOLIDADOS_VAC_RegistroVacunacion = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_VAC_CONSOLIDADOS_VAC_RegistroVacunacion, 0, length);
			strReturn = new String(commonByteArray_VAC_CONSOLIDADOS_VAC_RegistroVacunacion, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_VAC_CONSOLIDADOS_VAC_RegistroVacunacion) {

        	try {

        		int length = 0;
		
					this.Message = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_VAC_CONSOLIDADOS_VAC_RegistroVacunacion) {

        	try {

        		int length = 0;
		
					this.Message = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.Message,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.Message,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Message="+Message);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row18Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tFixedFlowInput_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFixedFlowInput_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row18Struct row18 = new row18Struct();




	
	/**
	 * [tBufferOutput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tBufferOutput_2", false);
		start_Hash.put("tBufferOutput_2", System.currentTimeMillis());
		
	
	currentComponent="tBufferOutput_2";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row18");
					}
				
		int tos_count_tBufferOutput_2 = 0;
		

 



/**
 * [tBufferOutput_2 begin ] stop
 */



	
	/**
	 * [tFixedFlowInput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tFixedFlowInput_2", false);
		start_Hash.put("tFixedFlowInput_2", System.currentTimeMillis());
		
	
	currentComponent="tFixedFlowInput_2";
	
	
		int tos_count_tFixedFlowInput_2 = 0;
		

	    for (int i_tFixedFlowInput_2 = 0 ; i_tFixedFlowInput_2 < 1 ; i_tFixedFlowInput_2++) {
	                	            	
    	            		row18.Message = context.NOMBRE_ZIP;
    	            	

 



/**
 * [tFixedFlowInput_2 begin ] stop
 */
	
	/**
	 * [tFixedFlowInput_2 main ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_2";
	
	

 


	tos_count_tFixedFlowInput_2++;

/**
 * [tFixedFlowInput_2 main ] stop
 */
	
	/**
	 * [tFixedFlowInput_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_2";
	
	

 



/**
 * [tFixedFlowInput_2 process_data_begin ] stop
 */

	
	/**
	 * [tBufferOutput_2 main ] start
	 */

	

	
	
	currentComponent="tBufferOutput_2";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row18"
						
						);
					}
					



String[] row_tBufferOutput_2=new String[]{"",};		
	    if(row18.Message != null){
	        
	            row_tBufferOutput_2[0] = row18.Message;
	                        			    
	    }else{
	    	row_tBufferOutput_2[0] = null;
	    }
	globalBuffer.add(row_tBufferOutput_2);	
	
 


	tos_count_tBufferOutput_2++;

/**
 * [tBufferOutput_2 main ] stop
 */
	
	/**
	 * [tBufferOutput_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tBufferOutput_2";
	
	

 



/**
 * [tBufferOutput_2 process_data_begin ] stop
 */
	
	/**
	 * [tBufferOutput_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tBufferOutput_2";
	
	

 



/**
 * [tBufferOutput_2 process_data_end ] stop
 */



	
	/**
	 * [tFixedFlowInput_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_2";
	
	

 



/**
 * [tFixedFlowInput_2 process_data_end ] stop
 */
	
	/**
	 * [tFixedFlowInput_2 end ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_2";
	
	

        }
        globalMap.put("tFixedFlowInput_2_NB_LINE", 1);        

 

ok_Hash.put("tFixedFlowInput_2", true);
end_Hash.put("tFixedFlowInput_2", System.currentTimeMillis());




/**
 * [tFixedFlowInput_2 end ] stop
 */

	
	/**
	 * [tBufferOutput_2 end ] start
	 */

	

	
	
	currentComponent="tBufferOutput_2";
	
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row18");
			  	}
			  	
 

ok_Hash.put("tBufferOutput_2", true);
end_Hash.put("tBufferOutput_2", System.currentTimeMillis());




/**
 * [tBufferOutput_2 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFixedFlowInput_2 finally ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_2";
	
	

 



/**
 * [tFixedFlowInput_2 finally ] stop
 */

	
	/**
	 * [tBufferOutput_2 finally ] start
	 */

	

	
	
	currentComponent="tBufferOutput_2";
	
	

 



/**
 * [tBufferOutput_2 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFixedFlowInput_2_SUBPROCESS_STATE", 1);
	}
	


public static class row6Struct implements routines.system.IPersistableComparableLookupRow<row6Struct> {
    final static byte[] commonByteArrayLock_VAC_CONSOLIDADOS_VAC_RegistroVacunacion = new byte[0];
    static byte[] commonByteArray_VAC_CONSOLIDADOS_VAC_RegistroVacunacion = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public BigDecimal DAPLICADAS_ID;

				public BigDecimal getDAPLICADAS_ID () {
					return this.DAPLICADAS_ID;
				}

				public Boolean DAPLICADAS_IDIsNullable(){
				    return false;
				}
				public Boolean DAPLICADAS_IDIsKey(){
				    return false;
				}
				public Integer DAPLICADAS_IDLength(){
				    return 0;
				}
				public Integer DAPLICADAS_IDPrecision(){
				    return null;
				}
				public String DAPLICADAS_IDDefault(){
				
					return "";
				
				}
				public String DAPLICADAS_IDComment(){
				
				    return "";
				
				}
				public String DAPLICADAS_IDPattern(){
				
					return "";
				
				}
				public String DAPLICADAS_IDOriginalDbColumnName(){
				
					return "DAPLICADAS_ID";
				
				}

				
			    public BigDecimal BIOLOGICOS_ID;

				public BigDecimal getBIOLOGICOS_ID () {
					return this.BIOLOGICOS_ID;
				}

				public Boolean BIOLOGICOS_IDIsNullable(){
				    return true;
				}
				public Boolean BIOLOGICOS_IDIsKey(){
				    return false;
				}
				public Integer BIOLOGICOS_IDLength(){
				    return 0;
				}
				public Integer BIOLOGICOS_IDPrecision(){
				    return null;
				}
				public String BIOLOGICOS_IDDefault(){
				
					return "";
				
				}
				public String BIOLOGICOS_IDComment(){
				
				    return "";
				
				}
				public String BIOLOGICOS_IDPattern(){
				
					return "";
				
				}
				public String BIOLOGICOS_IDOriginalDbColumnName(){
				
					return "BIOLOGICOS_ID";
				
				}

				
			    public String DOSIS;

				public String getDOSIS () {
					return this.DOSIS;
				}

				public Boolean DOSISIsNullable(){
				    return false;
				}
				public Boolean DOSISIsKey(){
				    return false;
				}
				public Integer DOSISLength(){
				    return 200;
				}
				public Integer DOSISPrecision(){
				    return 0;
				}
				public String DOSISDefault(){
				
					return null;
				
				}
				public String DOSISComment(){
				
				    return "";
				
				}
				public String DOSISPattern(){
				
					return "";
				
				}
				public String DOSISOriginalDbColumnName(){
				
					return "DOSIS";
				
				}

				
			    public String LOTE_BIOLOGICO;

				public String getLOTE_BIOLOGICO () {
					return this.LOTE_BIOLOGICO;
				}

				public Boolean LOTE_BIOLOGICOIsNullable(){
				    return true;
				}
				public Boolean LOTE_BIOLOGICOIsKey(){
				    return false;
				}
				public Integer LOTE_BIOLOGICOLength(){
				    return 1024;
				}
				public Integer LOTE_BIOLOGICOPrecision(){
				    return 0;
				}
				public String LOTE_BIOLOGICODefault(){
				
					return null;
				
				}
				public String LOTE_BIOLOGICOComment(){
				
				    return "";
				
				}
				public String LOTE_BIOLOGICOPattern(){
				
					return "";
				
				}
				public String LOTE_BIOLOGICOOriginalDbColumnName(){
				
					return "LOTE_BIOLOGICO";
				
				}

				
			    public String CALIBRE_JERINGA;

				public String getCALIBRE_JERINGA () {
					return this.CALIBRE_JERINGA;
				}

				public Boolean CALIBRE_JERINGAIsNullable(){
				    return true;
				}
				public Boolean CALIBRE_JERINGAIsKey(){
				    return false;
				}
				public Integer CALIBRE_JERINGALength(){
				    return 200;
				}
				public Integer CALIBRE_JERINGAPrecision(){
				    return 0;
				}
				public String CALIBRE_JERINGADefault(){
				
					return null;
				
				}
				public String CALIBRE_JERINGAComment(){
				
				    return "";
				
				}
				public String CALIBRE_JERINGAPattern(){
				
					return "";
				
				}
				public String CALIBRE_JERINGAOriginalDbColumnName(){
				
					return "CALIBRE_JERINGA";
				
				}

				
			    public String LOTE_JERINGA;

				public String getLOTE_JERINGA () {
					return this.LOTE_JERINGA;
				}

				public Boolean LOTE_JERINGAIsNullable(){
				    return true;
				}
				public Boolean LOTE_JERINGAIsKey(){
				    return false;
				}
				public Integer LOTE_JERINGALength(){
				    return 1024;
				}
				public Integer LOTE_JERINGAPrecision(){
				    return 0;
				}
				public String LOTE_JERINGADefault(){
				
					return null;
				
				}
				public String LOTE_JERINGAComment(){
				
				    return "";
				
				}
				public String LOTE_JERINGAPattern(){
				
					return "";
				
				}
				public String LOTE_JERINGAOriginalDbColumnName(){
				
					return "LOTE_JERINGA";
				
				}

				
			    public BigDecimal ACTUALIZACION;

				public BigDecimal getACTUALIZACION () {
					return this.ACTUALIZACION;
				}

				public Boolean ACTUALIZACIONIsNullable(){
				    return false;
				}
				public Boolean ACTUALIZACIONIsKey(){
				    return false;
				}
				public Integer ACTUALIZACIONLength(){
				    return 0;
				}
				public Integer ACTUALIZACIONPrecision(){
				    return null;
				}
				public String ACTUALIZACIONDefault(){
				
					return "";
				
				}
				public String ACTUALIZACIONComment(){
				
				    return "";
				
				}
				public String ACTUALIZACIONPattern(){
				
					return "";
				
				}
				public String ACTUALIZACIONOriginalDbColumnName(){
				
					return "ACTUALIZACION";
				
				}

				
			    public String LOTE_DILUYENTE;

				public String getLOTE_DILUYENTE () {
					return this.LOTE_DILUYENTE;
				}

				public Boolean LOTE_DILUYENTEIsNullable(){
				    return true;
				}
				public Boolean LOTE_DILUYENTEIsKey(){
				    return false;
				}
				public Integer LOTE_DILUYENTELength(){
				    return 1024;
				}
				public Integer LOTE_DILUYENTEPrecision(){
				    return 0;
				}
				public String LOTE_DILUYENTEDefault(){
				
					return null;
				
				}
				public String LOTE_DILUYENTEComment(){
				
				    return "";
				
				}
				public String LOTE_DILUYENTEPattern(){
				
					return "";
				
				}
				public String LOTE_DILUYENTEOriginalDbColumnName(){
				
					return "LOTE_DILUYENTE";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.DAPLICADAS_ID == null) ? 0 : this.DAPLICADAS_ID.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row6Struct other = (row6Struct) obj;
		
						if (this.DAPLICADAS_ID == null) {
							if (other.DAPLICADAS_ID != null)
								return false;
						
						} else if (!this.DAPLICADAS_ID.equals(other.DAPLICADAS_ID))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row6Struct other) {

		other.DAPLICADAS_ID = this.DAPLICADAS_ID;
	            other.BIOLOGICOS_ID = this.BIOLOGICOS_ID;
	            other.DOSIS = this.DOSIS;
	            other.LOTE_BIOLOGICO = this.LOTE_BIOLOGICO;
	            other.CALIBRE_JERINGA = this.CALIBRE_JERINGA;
	            other.LOTE_JERINGA = this.LOTE_JERINGA;
	            other.ACTUALIZACION = this.ACTUALIZACION;
	            other.LOTE_DILUYENTE = this.LOTE_DILUYENTE;
	            
	}

	public void copyKeysDataTo(row6Struct other) {

		other.DAPLICADAS_ID = this.DAPLICADAS_ID;
	            	
	}



	
	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			unmarshaller.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private void writeString(String str, DataOutputStream dos, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_VAC_CONSOLIDADOS_VAC_RegistroVacunacion) {

        	try {

        		int length = 0;
		
						this.DAPLICADAS_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_VAC_CONSOLIDADOS_VAC_RegistroVacunacion) {

        	try {

        		int length = 0;
		
						this.DAPLICADAS_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.DAPLICADAS_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.DAPLICADAS_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
       			    	this.BIOLOGICOS_ID = (BigDecimal) ois.readObject();
					
						this.DOSIS = readString(dis,ois);
					
						this.LOTE_BIOLOGICO = readString(dis,ois);
					
						this.CALIBRE_JERINGA = readString(dis,ois);
					
						this.LOTE_JERINGA = readString(dis,ois);
					
       			    	this.ACTUALIZACION = (BigDecimal) ois.readObject();
					
						this.LOTE_DILUYENTE = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		
       			    	this.BIOLOGICOS_ID = (BigDecimal) objectIn.readObject();
					
						this.DOSIS = readString(dis,objectIn);
					
						this.LOTE_BIOLOGICO = readString(dis,objectIn);
					
						this.CALIBRE_JERINGA = readString(dis,objectIn);
					
						this.LOTE_JERINGA = readString(dis,objectIn);
					
       			    	this.ACTUALIZACION = (BigDecimal) objectIn.readObject();
					
						this.LOTE_DILUYENTE = readString(dis,objectIn);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
       			    	oos.writeObject(this.BIOLOGICOS_ID);
					
						writeString(this.DOSIS, dos, oos);
					
						writeString(this.LOTE_BIOLOGICO, dos, oos);
					
						writeString(this.CALIBRE_JERINGA, dos, oos);
					
						writeString(this.LOTE_JERINGA, dos, oos);
					
       			    	oos.writeObject(this.ACTUALIZACION);
					
						writeString(this.LOTE_DILUYENTE, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
						objectOut.clearInstanceCache();
						objectOut.writeObject(this.BIOLOGICOS_ID);
					
						writeString(this.DOSIS, dos, objectOut);
					
						writeString(this.LOTE_BIOLOGICO, dos, objectOut);
					
						writeString(this.CALIBRE_JERINGA, dos, objectOut);
					
						writeString(this.LOTE_JERINGA, dos, objectOut);
					
						objectOut.clearInstanceCache();
						objectOut.writeObject(this.ACTUALIZACION);
					
						writeString(this.LOTE_DILUYENTE, dos, objectOut);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("DAPLICADAS_ID="+String.valueOf(DAPLICADAS_ID));
		sb.append(",BIOLOGICOS_ID="+String.valueOf(BIOLOGICOS_ID));
		sb.append(",DOSIS="+DOSIS);
		sb.append(",LOTE_BIOLOGICO="+LOTE_BIOLOGICO);
		sb.append(",CALIBRE_JERINGA="+CALIBRE_JERINGA);
		sb.append(",LOTE_JERINGA="+LOTE_JERINGA);
		sb.append(",ACTUALIZACION="+String.valueOf(ACTUALIZACION));
		sb.append(",LOTE_DILUYENTE="+LOTE_DILUYENTE);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row6Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.DAPLICADAS_ID, other.DAPLICADAS_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_6Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_6_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row6Struct row6 = new row6Struct();




	
	/**
	 * [tAdvancedHash_row6 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row6", false);
		start_Hash.put("tAdvancedHash_row6", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row6";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row6");
					}
				
		int tos_count_tAdvancedHash_row6 = 0;
		

			   		// connection name:row6
			   		// source node:tOracleInput_6 - inputs:(after_tHashInput_3) outputs:(row6,row6) | target node:tAdvancedHash_row6 - inputs:(row6) outputs:()
			   		// linked node: tMap_1 - inputs:(aplicadas,row6,row9) outputs:(out1)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row6 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row6Struct> tHash_Lookup_row6 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row6Struct>getLookup(matchingModeEnum_row6);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row6", tHash_Lookup_row6);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row6 begin ] stop
 */



	
	/**
	 * [tOracleInput_6 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_6", false);
		start_Hash.put("tOracleInput_6", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_6";
	
	
		int tos_count_tOracleInput_6 = 0;
		
	


	
		    int nb_line_tOracleInput_6 = 0;
		    java.sql.Connection conn_tOracleInput_6 = null;
				conn_tOracleInput_6 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");
				
                boolean isTimeZoneNull_tOracleInput_6 = false;
				boolean isConnectionWrapped_tOracleInput_6 = !(conn_tOracleInput_6 instanceof oracle.jdbc.OracleConnection) && conn_tOracleInput_6.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tOracleInput_6 = null;
                if (isConnectionWrapped_tOracleInput_6) {
					unwrappedOraConn_tOracleInput_6 = conn_tOracleInput_6.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tOracleInput_6 != null) {
                        isTimeZoneNull_tOracleInput_6 = (unwrappedOraConn_tOracleInput_6.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tOracleInput_6 = (((oracle.jdbc.OracleConnection)conn_tOracleInput_6).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tOracleInput_6) {
					java.sql.Statement stmtGetTZ_tOracleInput_6 = conn_tOracleInput_6.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_6 = stmtGetTZ_tOracleInput_6.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_6 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tOracleInput_6.next()) {
						sessionTimezone_tOracleInput_6 = rsGetTZ_tOracleInput_6.getString(1);
					}
					if (isConnectionWrapped_tOracleInput_6 && unwrappedOraConn_tOracleInput_6 != null) {
                        unwrappedOraConn_tOracleInput_6.setSessionTimeZone(sessionTimezone_tOracleInput_6);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_6).setSessionTimeZone(sessionTimezone_tOracleInput_6);
                    }
				}
			
		    
			java.sql.Statement stmt_tOracleInput_6 = conn_tOracleInput_6.createStatement(java.sql.ResultSet.TYPE_FORWARD_ONLY,
																					java.sql.ResultSet.CONCUR_READ_ONLY);
			
                stmt_tOracleInput_6.setFetchSize(1000);


		    String dbquery_tOracleInput_6 = "\nSELECT\n    VDA.ID       AS DAPLICADAS_ID,\n    VDA.BIOLOGICOS_ID,\n    VTD.NOMBRE   AS DOSIS,\n    NVL(DECODE(VDA.AC"
+"TUALIZACION, 1, VDA.LOTE, IVAC.LOTE), 'No registra') AS LOTE_BIOLOGICO,\n    NVL(CAL.NOMBRE, 'No registra') AS CALIBRE_J"
+"ERINGA,\n    NVL(DECODE(VDA.ACTUALIZACION, 1, VDA.LOTEJERINGA, IJER.LOTE), 'No registra') AS LOTE_JERINGA,\n	VDA.ACTUALI"
+"ZACION,\n    NVL(IDIL.LOTE, 'No aplica') AS LOTE_DILUYENTE\nFROM\n    VAC_DAPLICADAS     VDA    \n    INNER JOIN VAC_BIO"
+"LOGICOS    VBI  ON VDA.BIOLOGICOS_ID = VBI.ID\n    INNER JOIN VAC_TDOSIS        VTD  ON VDA.TDOSIS_ID = VTD.ID\n    LEFT"
+" JOIN VAC_INVENTARIOS    IVAC ON VDA.INVENTARIOS_ID = IVAC.ID    \n    LEFT JOIN VAC_INVENTARIOS    IJER ON VDA.LOTEJERI"
+"NGA_ID = IJER.ID\n    LEFT JOIN VAC_CALIBRES       CAL  ON IJER.PRODUCTOS_ID = CAL.PRODUCTO_ID\n    LEFT JOIN VAC_DILUYE"
+"NTES     DIL  ON VDA.LOTEDILUYENTE_ID = DIL.ID\n    LEFT JOIN VAC_INVENTARIOS    IDIL ON DIL.VINVENTARIO_ID = IDIL.ID\n "
+"WHERE\n   VDA.ID IN ("+context.DAPLICADAS_LIST+") 	\n";
		    

		    globalMap.put("tOracleInput_6_QUERY",dbquery_tOracleInput_6);

		    java.sql.ResultSet rs_tOracleInput_6 = null;

		    try {
		    	rs_tOracleInput_6 = stmt_tOracleInput_6.executeQuery(dbquery_tOracleInput_6);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_6 = rs_tOracleInput_6.getMetaData();
		    	int colQtyInRs_tOracleInput_6 = rsmd_tOracleInput_6.getColumnCount();

		    String tmpContent_tOracleInput_6 = null;
		    
		    
		    while (rs_tOracleInput_6.next()) {
		        nb_line_tOracleInput_6++;
		        
							if(colQtyInRs_tOracleInput_6 < 1) {
								row6.DAPLICADAS_ID = null;
							} else {
		                          
					if(rs_tOracleInput_6.getObject(1) != null) {
						row6.DAPLICADAS_ID = rs_tOracleInput_6.getBigDecimal(1);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_6 < 2) {
								row6.BIOLOGICOS_ID = null;
							} else {
		                          
					if(rs_tOracleInput_6.getObject(2) != null) {
						row6.BIOLOGICOS_ID = rs_tOracleInput_6.getBigDecimal(2);
					} else {
				
						row6.BIOLOGICOS_ID = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_6 < 3) {
								row6.DOSIS = null;
							} else {
	                         		
        	row6.DOSIS = routines.system.JDBCUtil.getString(rs_tOracleInput_6, 3, false);
		                    }
							if(colQtyInRs_tOracleInput_6 < 4) {
								row6.LOTE_BIOLOGICO = null;
							} else {
	                         		
        	row6.LOTE_BIOLOGICO = routines.system.JDBCUtil.getString(rs_tOracleInput_6, 4, false);
		                    }
							if(colQtyInRs_tOracleInput_6 < 5) {
								row6.CALIBRE_JERINGA = null;
							} else {
	                         		
        	row6.CALIBRE_JERINGA = routines.system.JDBCUtil.getString(rs_tOracleInput_6, 5, false);
		                    }
							if(colQtyInRs_tOracleInput_6 < 6) {
								row6.LOTE_JERINGA = null;
							} else {
	                         		
        	row6.LOTE_JERINGA = routines.system.JDBCUtil.getString(rs_tOracleInput_6, 6, false);
		                    }
							if(colQtyInRs_tOracleInput_6 < 7) {
								row6.ACTUALIZACION = null;
							} else {
		                          
					if(rs_tOracleInput_6.getObject(7) != null) {
						row6.ACTUALIZACION = rs_tOracleInput_6.getBigDecimal(7);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_6 < 8) {
								row6.LOTE_DILUYENTE = null;
							} else {
	                         		
        	row6.LOTE_DILUYENTE = routines.system.JDBCUtil.getString(rs_tOracleInput_6, 8, false);
		                    }
					




 



/**
 * [tOracleInput_6 begin ] stop
 */
	
	/**
	 * [tOracleInput_6 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_6";
	
	

 


	tos_count_tOracleInput_6++;

/**
 * [tOracleInput_6 main ] stop
 */
	
	/**
	 * [tOracleInput_6 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_6";
	
	

 



/**
 * [tOracleInput_6 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row6 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row6";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row6"
						
						);
					}
					


			   
			   

					row6Struct row6_HashRow = new row6Struct();
		   	   	   
				
				row6_HashRow.DAPLICADAS_ID = row6.DAPLICADAS_ID;
				
				row6_HashRow.BIOLOGICOS_ID = row6.BIOLOGICOS_ID;
				
				row6_HashRow.DOSIS = row6.DOSIS;
				
				row6_HashRow.LOTE_BIOLOGICO = row6.LOTE_BIOLOGICO;
				
				row6_HashRow.CALIBRE_JERINGA = row6.CALIBRE_JERINGA;
				
				row6_HashRow.LOTE_JERINGA = row6.LOTE_JERINGA;
				
				row6_HashRow.ACTUALIZACION = row6.ACTUALIZACION;
				
				row6_HashRow.LOTE_DILUYENTE = row6.LOTE_DILUYENTE;
				
			tHash_Lookup_row6.put(row6_HashRow);
			
            




 


	tos_count_tAdvancedHash_row6++;

/**
 * [tAdvancedHash_row6 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row6 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row6";
	
	

 



/**
 * [tAdvancedHash_row6 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row6 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row6";
	
	

 



/**
 * [tAdvancedHash_row6 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_6 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_6";
	
	

 



/**
 * [tOracleInput_6 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_6 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_6";
	
	

}
}finally{
	if (rs_tOracleInput_6 != null) {
		rs_tOracleInput_6.close();
	}
	if (stmt_tOracleInput_6 != null) {
		stmt_tOracleInput_6.close();
	}
}

globalMap.put("tOracleInput_6_NB_LINE",nb_line_tOracleInput_6);
 

ok_Hash.put("tOracleInput_6", true);
end_Hash.put("tOracleInput_6", System.currentTimeMillis());




/**
 * [tOracleInput_6 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row6 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row6";
	
	

tHash_Lookup_row6.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row6");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row6", true);
end_Hash.put("tAdvancedHash_row6", System.currentTimeMillis());




/**
 * [tAdvancedHash_row6 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleInput_6 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_6";
	
	

 



/**
 * [tOracleInput_6 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row6 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row6";
	
	

 



/**
 * [tAdvancedHash_row6 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_6_SUBPROCESS_STATE", 1);
	}
	


public static class row9Struct implements routines.system.IPersistableComparableLookupRow<row9Struct> {
    final static byte[] commonByteArrayLock_VAC_CONSOLIDADOS_VAC_RegistroVacunacion = new byte[0];
    static byte[] commonByteArray_VAC_CONSOLIDADOS_VAC_RegistroVacunacion = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public BigDecimal BIOLOGICOS_ID;

				public BigDecimal getBIOLOGICOS_ID () {
					return this.BIOLOGICOS_ID;
				}

				public Boolean BIOLOGICOS_IDIsNullable(){
				    return false;
				}
				public Boolean BIOLOGICOS_IDIsKey(){
				    return false;
				}
				public Integer BIOLOGICOS_IDLength(){
				    return 0;
				}
				public Integer BIOLOGICOS_IDPrecision(){
				    return null;
				}
				public String BIOLOGICOS_IDDefault(){
				
					return "";
				
				}
				public String BIOLOGICOS_IDComment(){
				
				    return "";
				
				}
				public String BIOLOGICOS_IDPattern(){
				
					return "";
				
				}
				public String BIOLOGICOS_IDOriginalDbColumnName(){
				
					return "BIOLOGICOS_ID";
				
				}

				
			    public String TIPO_VACUNA;

				public String getTIPO_VACUNA () {
					return this.TIPO_VACUNA;
				}

				public Boolean TIPO_VACUNAIsNullable(){
				    return false;
				}
				public Boolean TIPO_VACUNAIsKey(){
				    return false;
				}
				public Integer TIPO_VACUNALength(){
				    return 10;
				}
				public Integer TIPO_VACUNAPrecision(){
				    return 0;
				}
				public String TIPO_VACUNADefault(){
				
					return null;
				
				}
				public String TIPO_VACUNAComment(){
				
				    return "";
				
				}
				public String TIPO_VACUNAPattern(){
				
					return "";
				
				}
				public String TIPO_VACUNAOriginalDbColumnName(){
				
					return "TIPO_VACUNA";
				
				}

				
			    public String VACUNA;

				public String getVACUNA () {
					return this.VACUNA;
				}

				public Boolean VACUNAIsNullable(){
				    return false;
				}
				public Boolean VACUNAIsKey(){
				    return false;
				}
				public Integer VACUNALength(){
				    return 350;
				}
				public Integer VACUNAPrecision(){
				    return 0;
				}
				public String VACUNADefault(){
				
					return null;
				
				}
				public String VACUNAComment(){
				
				    return "";
				
				}
				public String VACUNAPattern(){
				
					return "";
				
				}
				public String VACUNAOriginalDbColumnName(){
				
					return "VACUNA";
				
				}

				
			    public BigDecimal ORDEN;

				public BigDecimal getORDEN () {
					return this.ORDEN;
				}

				public Boolean ORDENIsNullable(){
				    return false;
				}
				public Boolean ORDENIsKey(){
				    return false;
				}
				public Integer ORDENLength(){
				    return 0;
				}
				public Integer ORDENPrecision(){
				    return 0;
				}
				public String ORDENDefault(){
				
					return "";
				
				}
				public String ORDENComment(){
				
				    return "";
				
				}
				public String ORDENPattern(){
				
					return "";
				
				}
				public String ORDENOriginalDbColumnName(){
				
					return "ORDEN";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.BIOLOGICOS_ID == null) ? 0 : this.BIOLOGICOS_ID.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row9Struct other = (row9Struct) obj;
		
						if (this.BIOLOGICOS_ID == null) {
							if (other.BIOLOGICOS_ID != null)
								return false;
						
						} else if (!this.BIOLOGICOS_ID.equals(other.BIOLOGICOS_ID))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row9Struct other) {

		other.BIOLOGICOS_ID = this.BIOLOGICOS_ID;
	            other.TIPO_VACUNA = this.TIPO_VACUNA;
	            other.VACUNA = this.VACUNA;
	            other.ORDEN = this.ORDEN;
	            
	}

	public void copyKeysDataTo(row9Struct other) {

		other.BIOLOGICOS_ID = this.BIOLOGICOS_ID;
	            	
	}



	
	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			unmarshaller.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private void writeString(String str, DataOutputStream dos, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_VAC_CONSOLIDADOS_VAC_RegistroVacunacion) {

        	try {

        		int length = 0;
		
						this.BIOLOGICOS_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_VAC_CONSOLIDADOS_VAC_RegistroVacunacion) {

        	try {

        		int length = 0;
		
						this.BIOLOGICOS_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.BIOLOGICOS_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.BIOLOGICOS_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.TIPO_VACUNA = readString(dis,ois);
					
						this.VACUNA = readString(dis,ois);
					
       			    	this.ORDEN = (BigDecimal) ois.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		
						this.TIPO_VACUNA = readString(dis,objectIn);
					
						this.VACUNA = readString(dis,objectIn);
					
       			    	this.ORDEN = (BigDecimal) objectIn.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeString(this.TIPO_VACUNA, dos, oos);
					
						writeString(this.VACUNA, dos, oos);
					
       			    	oos.writeObject(this.ORDEN);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
						writeString(this.TIPO_VACUNA, dos, objectOut);
					
						writeString(this.VACUNA, dos, objectOut);
					
						objectOut.clearInstanceCache();
						objectOut.writeObject(this.ORDEN);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("BIOLOGICOS_ID="+String.valueOf(BIOLOGICOS_ID));
		sb.append(",TIPO_VACUNA="+TIPO_VACUNA);
		sb.append(",VACUNA="+VACUNA);
		sb.append(",ORDEN="+String.valueOf(ORDEN));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row9Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.BIOLOGICOS_ID, other.BIOLOGICOS_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tHashInput_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tHashInput_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row9Struct row9 = new row9Struct();




	
	/**
	 * [tAdvancedHash_row9 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row9", false);
		start_Hash.put("tAdvancedHash_row9", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row9";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row9");
					}
				
		int tos_count_tAdvancedHash_row9 = 0;
		

			   		// connection name:row9
			   		// source node:tHashInput_2 - inputs:(after_tHashInput_3) outputs:(row9,row9) | target node:tAdvancedHash_row9 - inputs:(row9) outputs:()
			   		// linked node: tMap_1 - inputs:(aplicadas,row6,row9) outputs:(out1)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row9 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row9Struct> tHash_Lookup_row9 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row9Struct>getLookup(matchingModeEnum_row9);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row9", tHash_Lookup_row9);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row9 begin ] stop
 */



	
	/**
	 * [tHashInput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_2", false);
		start_Hash.put("tHashInput_2", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_2";
	
	
		int tos_count_tHashInput_2 = 0;
		


int nb_line_tHashInput_2 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_2=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row16Struct> tHashFile_tHashInput_2 = mf_tHashInput_2.getAdvancedMemoryHashFile("tHashFile_RegistroVacunacion_" + pid +"_tHashOutput_1");
if(tHashFile_tHashInput_2==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<row16Struct> iterator_tHashInput_2 = tHashFile_tHashInput_2.iterator();
while (iterator_tHashInput_2.hasNext()) {
    row16Struct next_tHashInput_2 = iterator_tHashInput_2.next();

	row9.BIOLOGICOS_ID = next_tHashInput_2.BIOLOGICOS_ID;
	row9.TIPO_VACUNA = next_tHashInput_2.TIPO_VACUNA;
	row9.VACUNA = next_tHashInput_2.VACUNA;
	row9.ORDEN = next_tHashInput_2.ORDEN;

 



/**
 * [tHashInput_2 begin ] stop
 */
	
	/**
	 * [tHashInput_2 main ] start
	 */

	

	
	
	currentComponent="tHashInput_2";
	
	

 


	tos_count_tHashInput_2++;

/**
 * [tHashInput_2 main ] stop
 */
	
	/**
	 * [tHashInput_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashInput_2";
	
	

 



/**
 * [tHashInput_2 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row9 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row9";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row9"
						
						);
					}
					


			   
			   

					row9Struct row9_HashRow = new row9Struct();
		   	   	   
				
				row9_HashRow.BIOLOGICOS_ID = row9.BIOLOGICOS_ID;
				
				row9_HashRow.TIPO_VACUNA = row9.TIPO_VACUNA;
				
				row9_HashRow.VACUNA = row9.VACUNA;
				
				row9_HashRow.ORDEN = row9.ORDEN;
				
			tHash_Lookup_row9.put(row9_HashRow);
			
            




 


	tos_count_tAdvancedHash_row9++;

/**
 * [tAdvancedHash_row9 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row9 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row9";
	
	

 



/**
 * [tAdvancedHash_row9 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row9 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row9";
	
	

 



/**
 * [tAdvancedHash_row9 process_data_end ] stop
 */



	
	/**
	 * [tHashInput_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashInput_2";
	
	

 



/**
 * [tHashInput_2 process_data_end ] stop
 */
	
	/**
	 * [tHashInput_2 end ] start
	 */

	

	
	
	currentComponent="tHashInput_2";
	
	
    

		
			nb_line_tHashInput_2++;
		}	
    		
    		mf_tHashInput_2.clearCache("tHashFile_RegistroVacunacion_" + pid +"_tHashOutput_1");
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_RegistroVacunacion_" + pid +"_tHashOutput_1");
	


	globalMap.put("tHashInput_2_NB_LINE", nb_line_tHashInput_2);       

 

ok_Hash.put("tHashInput_2", true);
end_Hash.put("tHashInput_2", System.currentTimeMillis());




/**
 * [tHashInput_2 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row9 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row9";
	
	

tHash_Lookup_row9.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row9");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row9", true);
end_Hash.put("tAdvancedHash_row9", System.currentTimeMillis());




/**
 * [tAdvancedHash_row9 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tHashInput_2 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_2";
	
	

 



/**
 * [tHashInput_2 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row9 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row9";
	
	

 



/**
 * [tAdvancedHash_row9 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tHashInput_2_SUBPROCESS_STATE", 1);
	}
	
    public String resuming_logs_dir_path = null;
    public String resuming_checkpoint_path = null;
    public String parent_part_launcher = null;
    private String resumeEntryMethodName = null;
    private boolean globalResumeTicket = false;

    public boolean watch = false;
    // portStats is null, it means don't execute the statistics
    public Integer portStats = null;
    public int portTraces = 4334;
    public String clientHost;
    public String defaultClientHost = "localhost";
    public String contextStr = "Default";
    public boolean isDefaultContext = true;
    public String pid = "0";
    public String rootPid = null;
    public String fatherPid = null;
    public String fatherNode = null;
    public long startTime = 0;
    public boolean isChildJob = false;
    public String log4jLevel = "";
    
    private boolean enableLogStash;

    private boolean execStat = true;

    private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
        protected java.util.Map<String, String> initialValue() {
            java.util.Map<String,String> threadRunResultMap = new java.util.HashMap<String, String>();
            threadRunResultMap.put("errorCode", null);
            threadRunResultMap.put("status", "");
            return threadRunResultMap;
        };
    };


    protected PropertiesWithType context_param = new PropertiesWithType();
    public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

    public String status= "";
    
    
    private final static java.util.Properties jobInfo = new java.util.Properties();
    private final static java.util.Map<String,String> mdcInfo = new java.util.HashMap<>();
    private final static java.util.concurrent.atomic.AtomicLong subJobPidCounter = new java.util.concurrent.atomic.AtomicLong();


    public static void main(String[] args){
        final RegistroVacunacion RegistroVacunacionClass = new RegistroVacunacion();

        int exitCode = RegistroVacunacionClass.runJobInTOS(args);

        System.exit(exitCode);
    }
	

	
	
	private void getjobInfo() {
		final String TEMPLATE_PATH = "src/main/templates/jobInfo_template.properties";
		final String BUILD_PATH = "../jobInfo.properties";
		final String path = this.getClass().getResource("").getPath();
		if(path.lastIndexOf("target") > 0) {
			final java.io.File templateFile = new java.io.File(
					path.substring(0, path.lastIndexOf("target")).concat(TEMPLATE_PATH));
			if (templateFile.exists()) {
				readJobInfo(templateFile);
				return;
			}
		}
			readJobInfo(new java.io.File(BUILD_PATH));
	}

    private void readJobInfo(java.io.File jobInfoFile){
	
        if(jobInfoFile.exists()) {
            try (java.io.InputStream is = new java.io.FileInputStream(jobInfoFile)) {
            	jobInfo.load(is);
            } catch (IOException e) {
            	 
                
            }
        }
    }


    public String[][] runJob(String[] args) {

        int exitCode = runJobInTOS(args);
        String[][] bufferValue = (String[][])globalBuffer.toArray(new String[globalBuffer.size()][]);

        return bufferValue;
    }

    public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;
    	
        		hastBufferOutput = true;
    	
        return hastBufferOutput;
    }

    public int runJobInTOS(String[] args) {
	   	// reset status
	   	status = "";
	   	
        String lastStr = "";
        for (String arg : args) {
            if (arg.equalsIgnoreCase("--context_param")) {
                lastStr = arg;
            } else if (lastStr.equals("")) {
                evalParam(arg);
            } else {
                evalParam(lastStr + " " + arg);
                lastStr = "";
            }
        }
        enableLogStash = "true".equalsIgnoreCase(System.getProperty("audit.enabled"));


		
		

        if(clientHost == null) {
            clientHost = defaultClientHost;
        }

        if(pid == null || "0".equals(pid)) {
            pid = TalendString.getAsciiRandomString(6);
        }


        if (rootPid==null) {
            rootPid = pid;
        }


        if (fatherPid==null) {
            fatherPid = pid;
        }else{
            isChildJob = true;
        }

        if (portStats != null) {
            // portStats = -1; //for testing
            if (portStats < 0 || portStats > 65535) {
                // issue:10869, the portStats is invalid, so this client socket can't open
                System.err.println("The statistics socket port " + portStats + " is invalid.");
                execStat = false;
            }
        } else {
            execStat = false;
        }
        boolean inOSGi = routines.system.BundleUtils.inOSGi();

        try {
            java.util.Dictionary<String, Object> jobProperties = null;
            if (inOSGi) {
                jobProperties = routines.system.BundleUtils.getJobProperties(jobName);
    
                if (jobProperties != null && jobProperties.get("context") != null) {
                    contextStr = (String)jobProperties.get("context");
                }
            }
            //call job/subjob with an existing context, like: --context=production. if without this parameter, there will use the default context instead.
            java.io.InputStream inContext = RegistroVacunacion.class.getClassLoader().getResourceAsStream("vac_consolidados_vac/registrovacunacion_0_1/contexts/" + contextStr + ".properties");
            if (inContext == null) {
                inContext = RegistroVacunacion.class.getClassLoader().getResourceAsStream("config/contexts/" + contextStr + ".properties");
            }
            if (inContext != null) {
                try {
                    //defaultProps is in order to keep the original context value
                    if(context != null && context.isEmpty()) {
    	                defaultProps.load(inContext);
    	                if (inOSGi && jobProperties != null) {
                             java.util.Enumeration<String> keys = jobProperties.keys();
                             while (keys.hasMoreElements()) {
                                 String propKey = keys.nextElement();
                                 if (defaultProps.containsKey(propKey)) {
                                     defaultProps.put(propKey, (String) jobProperties.get(propKey));
                                 }
                             }
    	                }
    	                context = new ContextProperties(defaultProps);
                    }
                } finally {
                    inContext.close();
                }
            } else if (!isDefaultContext) {
                //print info and job continue to run, for case: context_param is not empty.
                System.err.println("Could not find the context " + contextStr);
            }
            
            if(!context_param.isEmpty()) {
                context.putAll(context_param);
				//set types for params from parentJobs
				for (Object key: context_param.keySet()){
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
            }
            class ContextProcessing {
                private void processContext_0() {
                        context.setContextType("DAPLICADAS_LIST", "id_String");
                        if(context.getStringValue("DAPLICADAS_LIST") == null) {
                            context.DAPLICADAS_LIST = null;
                        } else {
                            context.DAPLICADAS_LIST=(String) context.getProperty("DAPLICADAS_LIST");
                        }
                        context.setContextType("CARPETA_SALIDA", "id_String");
                        if(context.getStringValue("CARPETA_SALIDA") == null) {
                            context.CARPETA_SALIDA = null;
                        } else {
                            context.CARPETA_SALIDA=(String) context.getProperty("CARPETA_SALIDA");
                        }
                        context.setContextType("NOMBRE_ARCHIVO", "id_String");
                        if(context.getStringValue("NOMBRE_ARCHIVO") == null) {
                            context.NOMBRE_ARCHIVO = null;
                        } else {
                            context.NOMBRE_ARCHIVO=(String) context.getProperty("NOMBRE_ARCHIVO");
                        }
                        context.setContextType("NOMBRE_ZIP", "id_String");
                        if(context.getStringValue("NOMBRE_ZIP") == null) {
                            context.NOMBRE_ZIP = null;
                        } else {
                            context.NOMBRE_ZIP=(String) context.getProperty("NOMBRE_ZIP");
                        }
                        context.setContextType("ES_WEB_SERVICE", "id_Boolean");
                        if(context.getStringValue("ES_WEB_SERVICE") == null) {
                            context.ES_WEB_SERVICE = null;
                        } else {
                            try{
                                context.ES_WEB_SERVICE=routines.system.ParserUtils.parseTo_Boolean (context.getProperty("ES_WEB_SERVICE"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "ES_WEB_SERVICE", e.getMessage()));
                                context.ES_WEB_SERVICE=null;
                            }
                        }
                        context.setContextType("CONTADOR", "id_Integer");
                        if(context.getStringValue("CONTADOR") == null) {
                            context.CONTADOR = null;
                        } else {
                            try{
                                context.CONTADOR=routines.system.ParserUtils.parseTo_Integer (context.getProperty("CONTADOR"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "CONTADOR", e.getMessage()));
                                context.CONTADOR=null;
                            }
                        }
                        context.setContextType("db_destino_AdditionalParams", "id_String");
                        if(context.getStringValue("db_destino_AdditionalParams") == null) {
                            context.db_destino_AdditionalParams = null;
                        } else {
                            context.db_destino_AdditionalParams=(String) context.getProperty("db_destino_AdditionalParams");
                        }
                        context.setContextType("db_destino_Login", "id_String");
                        if(context.getStringValue("db_destino_Login") == null) {
                            context.db_destino_Login = null;
                        } else {
                            context.db_destino_Login=(String) context.getProperty("db_destino_Login");
                        }
                        context.setContextType("db_destino_Password", "id_Password");
                        if(context.getStringValue("db_destino_Password") == null) {
                            context.db_destino_Password = null;
                        } else {
                            String pwd_db_destino_Password_value = context.getProperty("db_destino_Password");
                            context.db_destino_Password = null;
                            if(pwd_db_destino_Password_value!=null) {
                                if(context_param.containsKey("db_destino_Password")) {//no need to decrypt if it come from program argument or parent job runtime
                                    context.db_destino_Password = pwd_db_destino_Password_value;
                                } else if (!pwd_db_destino_Password_value.isEmpty()) {
                                    try {
                                        context.db_destino_Password = routines.system.PasswordEncryptUtil.decryptPassword(pwd_db_destino_Password_value);
                                        context.put("db_destino_Password",context.db_destino_Password);
                                    } catch (java.lang.RuntimeException e) {
                                        //do nothing
                                    }
                                }
                            }
                        }
                        context.setContextType("db_destino_Port", "id_String");
                        if(context.getStringValue("db_destino_Port") == null) {
                            context.db_destino_Port = null;
                        } else {
                            context.db_destino_Port=(String) context.getProperty("db_destino_Port");
                        }
                        context.setContextType("db_destino_Schema", "id_String");
                        if(context.getStringValue("db_destino_Schema") == null) {
                            context.db_destino_Schema = null;
                        } else {
                            context.db_destino_Schema=(String) context.getProperty("db_destino_Schema");
                        }
                        context.setContextType("db_destino_Server", "id_String");
                        if(context.getStringValue("db_destino_Server") == null) {
                            context.db_destino_Server = null;
                        } else {
                            context.db_destino_Server=(String) context.getProperty("db_destino_Server");
                        }
                        context.setContextType("db_destino_ServiceName", "id_String");
                        if(context.getStringValue("db_destino_ServiceName") == null) {
                            context.db_destino_ServiceName = null;
                        } else {
                            context.db_destino_ServiceName=(String) context.getProperty("db_destino_ServiceName");
                        }
                        context.setContextType("db_origen_AdditionalParams", "id_String");
                        if(context.getStringValue("db_origen_AdditionalParams") == null) {
                            context.db_origen_AdditionalParams = null;
                        } else {
                            context.db_origen_AdditionalParams=(String) context.getProperty("db_origen_AdditionalParams");
                        }
                        context.setContextType("db_origen_Login", "id_String");
                        if(context.getStringValue("db_origen_Login") == null) {
                            context.db_origen_Login = null;
                        } else {
                            context.db_origen_Login=(String) context.getProperty("db_origen_Login");
                        }
                        context.setContextType("db_origen_Password", "id_Password");
                        if(context.getStringValue("db_origen_Password") == null) {
                            context.db_origen_Password = null;
                        } else {
                            String pwd_db_origen_Password_value = context.getProperty("db_origen_Password");
                            context.db_origen_Password = null;
                            if(pwd_db_origen_Password_value!=null) {
                                if(context_param.containsKey("db_origen_Password")) {//no need to decrypt if it come from program argument or parent job runtime
                                    context.db_origen_Password = pwd_db_origen_Password_value;
                                } else if (!pwd_db_origen_Password_value.isEmpty()) {
                                    try {
                                        context.db_origen_Password = routines.system.PasswordEncryptUtil.decryptPassword(pwd_db_origen_Password_value);
                                        context.put("db_origen_Password",context.db_origen_Password);
                                    } catch (java.lang.RuntimeException e) {
                                        //do nothing
                                    }
                                }
                            }
                        }
                        context.setContextType("db_origen_Port", "id_String");
                        if(context.getStringValue("db_origen_Port") == null) {
                            context.db_origen_Port = null;
                        } else {
                            context.db_origen_Port=(String) context.getProperty("db_origen_Port");
                        }
                        context.setContextType("db_origen_Schema", "id_String");
                        if(context.getStringValue("db_origen_Schema") == null) {
                            context.db_origen_Schema = null;
                        } else {
                            context.db_origen_Schema=(String) context.getProperty("db_origen_Schema");
                        }
                        context.setContextType("db_origen_Server", "id_String");
                        if(context.getStringValue("db_origen_Server") == null) {
                            context.db_origen_Server = null;
                        } else {
                            context.db_origen_Server=(String) context.getProperty("db_origen_Server");
                        }
                        context.setContextType("db_origen_ServiceName", "id_String");
                        if(context.getStringValue("db_origen_ServiceName") == null) {
                            context.db_origen_ServiceName = null;
                        } else {
                            context.db_origen_ServiceName=(String) context.getProperty("db_origen_ServiceName");
                        }
                        context.setContextType("ACTUALIZACION", "id_String");
                        if(context.getStringValue("ACTUALIZACION") == null) {
                            context.ACTUALIZACION = null;
                        } else {
                            context.ACTUALIZACION=(String) context.getProperty("ACTUALIZACION");
                        }
                        context.setContextType("FECHA_FINAL", "id_String");
                        if(context.getStringValue("FECHA_FINAL") == null) {
                            context.FECHA_FINAL = null;
                        } else {
                            context.FECHA_FINAL=(String) context.getProperty("FECHA_FINAL");
                        }
                        context.setContextType("FECHA_INICIAL", "id_String");
                        if(context.getStringValue("FECHA_INICIAL") == null) {
                            context.FECHA_INICIAL = null;
                        } else {
                            context.FECHA_INICIAL=(String) context.getProperty("FECHA_INICIAL");
                        }
                        context.setContextType("FUERZA_ID", "id_String");
                        if(context.getStringValue("FUERZA_ID") == null) {
                            context.FUERZA_ID = null;
                        } else {
                            context.FUERZA_ID=(String) context.getProperty("FUERZA_ID");
                        }
                        context.setContextType("FUERZA_NOMBRE", "id_String");
                        if(context.getStringValue("FUERZA_NOMBRE") == null) {
                            context.FUERZA_NOMBRE = null;
                        } else {
                            context.FUERZA_NOMBRE=(String) context.getProperty("FUERZA_NOMBRE");
                        }
                        context.setContextType("TESQUEMA", "id_String");
                        if(context.getStringValue("TESQUEMA") == null) {
                            context.TESQUEMA = null;
                        } else {
                            context.TESQUEMA=(String) context.getProperty("TESQUEMA");
                        }
                        context.setContextType("UORG_ID", "id_String");
                        if(context.getStringValue("UORG_ID") == null) {
                            context.UORG_ID = null;
                        } else {
                            context.UORG_ID=(String) context.getProperty("UORG_ID");
                        }
                        context.setContextType("UORG_NOMBRE", "id_String");
                        if(context.getStringValue("UORG_NOMBRE") == null) {
                            context.UORG_NOMBRE = null;
                        } else {
                            context.UORG_NOMBRE=(String) context.getProperty("UORG_NOMBRE");
                        }
                        context.setContextType("BODEGA", "id_String");
                        if(context.getStringValue("BODEGA") == null) {
                            context.BODEGA = null;
                        } else {
                            context.BODEGA=(String) context.getProperty("BODEGA");
                        }
                        context.setContextType("ESTADO_EXEC", "id_String");
                        if(context.getStringValue("ESTADO_EXEC") == null) {
                            context.ESTADO_EXEC = null;
                        } else {
                            context.ESTADO_EXEC=(String) context.getProperty("ESTADO_EXEC");
                        }
                        context.setContextType("FECHA_EJECUCION", "id_String");
                        if(context.getStringValue("FECHA_EJECUCION") == null) {
                            context.FECHA_EJECUCION = null;
                        } else {
                            context.FECHA_EJECUCION=(String) context.getProperty("FECHA_EJECUCION");
                        }
                        context.setContextType("HORA_FINAL", "id_String");
                        if(context.getStringValue("HORA_FINAL") == null) {
                            context.HORA_FINAL = null;
                        } else {
                            context.HORA_FINAL=(String) context.getProperty("HORA_FINAL");
                        }
                        context.setContextType("HORA_INICIO", "id_String");
                        if(context.getStringValue("HORA_INICIO") == null) {
                            context.HORA_INICIO = null;
                        } else {
                            context.HORA_INICIO=(String) context.getProperty("HORA_INICIO");
                        }
                        context.setContextType("JOB", "id_String");
                        if(context.getStringValue("JOB") == null) {
                            context.JOB = null;
                        } else {
                            context.JOB=(String) context.getProperty("JOB");
                        }
                        context.setContextType("LOGS_ERROR", "id_String");
                        if(context.getStringValue("LOGS_ERROR") == null) {
                            context.LOGS_ERROR = null;
                        } else {
                            context.LOGS_ERROR=(String) context.getProperty("LOGS_ERROR");
                        }
                        context.setContextType("LOGS_EXECUTION", "id_String");
                        if(context.getStringValue("LOGS_EXECUTION") == null) {
                            context.LOGS_EXECUTION = null;
                        } else {
                            context.LOGS_EXECUTION=(String) context.getProperty("LOGS_EXECUTION");
                        }
                        context.setContextType("ORIGEN", "id_String");
                        if(context.getStringValue("ORIGEN") == null) {
                            context.ORIGEN = null;
                        } else {
                            context.ORIGEN=(String) context.getProperty("ORIGEN");
                        }
                        context.setContextType("STORAGE", "id_String");
                        if(context.getStringValue("STORAGE") == null) {
                            context.STORAGE = null;
                        } else {
                            context.STORAGE=(String) context.getProperty("STORAGE");
                        }
                        context.setContextType("MODULO", "id_String");
                        if(context.getStringValue("MODULO") == null) {
                            context.MODULO = null;
                        } else {
                            context.MODULO=(String) context.getProperty("MODULO");
                        }
                        context.setContextType("SARCHIVO_ID", "id_BigDecimal");
                        if(context.getStringValue("SARCHIVO_ID") == null) {
                            context.SARCHIVO_ID = null;
                        } else {
                            try{
                                context.SARCHIVO_ID=routines.system.ParserUtils.parseTo_BigDecimal (context.getProperty("SARCHIVO_ID"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "SARCHIVO_ID", e.getMessage()));
                                context.SARCHIVO_ID=null;
                            }
                        }
                        context.setContextType("SIGLA", "id_String");
                        if(context.getStringValue("SIGLA") == null) {
                            context.SIGLA = null;
                        } else {
                            context.SIGLA=(String) context.getProperty("SIGLA");
                        }
                        context.setContextType("USUARIO_ID", "id_BigDecimal");
                        if(context.getStringValue("USUARIO_ID") == null) {
                            context.USUARIO_ID = null;
                        } else {
                            try{
                                context.USUARIO_ID=routines.system.ParserUtils.parseTo_BigDecimal (context.getProperty("USUARIO_ID"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "USUARIO_ID", e.getMessage()));
                                context.USUARIO_ID=null;
                            }
                        }
                        context.setContextType("USUARIO_NOMBRE", "id_String");
                        if(context.getStringValue("USUARIO_NOMBRE") == null) {
                            context.USUARIO_NOMBRE = null;
                        } else {
                            context.USUARIO_NOMBRE=(String) context.getProperty("USUARIO_NOMBRE");
                        }
                        context.setContextType("TDOSIS_ID", "id_String");
                        if(context.getStringValue("TDOSIS_ID") == null) {
                            context.TDOSIS_ID = null;
                        } else {
                            context.TDOSIS_ID=(String) context.getProperty("TDOSIS_ID");
                        }
                        context.setContextType("PERIODO_INICIAL", "id_String");
                        if(context.getStringValue("PERIODO_INICIAL") == null) {
                            context.PERIODO_INICIAL = null;
                        } else {
                            context.PERIODO_INICIAL=(String) context.getProperty("PERIODO_INICIAL");
                        }
                        context.setContextType("DPTO_NOMBRE", "id_String");
                        if(context.getStringValue("DPTO_NOMBRE") == null) {
                            context.DPTO_NOMBRE = null;
                        } else {
                            context.DPTO_NOMBRE=(String) context.getProperty("DPTO_NOMBRE");
                        }
                        context.setContextType("MCPIO_NOMBRE", "id_String");
                        if(context.getStringValue("MCPIO_NOMBRE") == null) {
                            context.MCPIO_NOMBRE = null;
                        } else {
                            context.MCPIO_NOMBRE=(String) context.getProperty("MCPIO_NOMBRE");
                        }
                        context.setContextType("BIOLOGICO_NOMBRE", "id_String");
                        if(context.getStringValue("BIOLOGICO_NOMBRE") == null) {
                            context.BIOLOGICO_NOMBRE = null;
                        } else {
                            context.BIOLOGICO_NOMBRE=(String) context.getProperty("BIOLOGICO_NOMBRE");
                        }
                        context.setContextType("MCPIO_COD", "id_String");
                        if(context.getStringValue("MCPIO_COD") == null) {
                            context.MCPIO_COD = null;
                        } else {
                            context.MCPIO_COD=(String) context.getProperty("MCPIO_COD");
                        }
                        context.setContextType("TDOSIS_NOMBRE", "id_String");
                        if(context.getStringValue("TDOSIS_NOMBRE") == null) {
                            context.TDOSIS_NOMBRE = null;
                        } else {
                            context.TDOSIS_NOMBRE=(String) context.getProperty("TDOSIS_NOMBRE");
                        }
                        context.setContextType("PERIODO", "id_String");
                        if(context.getStringValue("PERIODO") == null) {
                            context.PERIODO = null;
                        } else {
                            context.PERIODO=(String) context.getProperty("PERIODO");
                        }
                        context.setContextType("BIOLOGICO_ID", "id_String");
                        if(context.getStringValue("BIOLOGICO_ID") == null) {
                            context.BIOLOGICO_ID = null;
                        } else {
                            context.BIOLOGICO_ID=(String) context.getProperty("BIOLOGICO_ID");
                        }
                        context.setContextType("PERIODO_FINAL", "id_String");
                        if(context.getStringValue("PERIODO_FINAL") == null) {
                            context.PERIODO_FINAL = null;
                        } else {
                            context.PERIODO_FINAL=(String) context.getProperty("PERIODO_FINAL");
                        }
                        context.setContextType("DPTO_COD", "id_String");
                        if(context.getStringValue("DPTO_COD") == null) {
                            context.DPTO_COD = null;
                        } else {
                            context.DPTO_COD=(String) context.getProperty("DPTO_COD");
                        }
                        context.setContextType("UORG_SOLICITUD_NOMBRE", "id_String");
                        if(context.getStringValue("UORG_SOLICITUD_NOMBRE") == null) {
                            context.UORG_SOLICITUD_NOMBRE = null;
                        } else {
                            context.UORG_SOLICITUD_NOMBRE=(String) context.getProperty("UORG_SOLICITUD_NOMBRE");
                        }
                        context.setContextType("FILTROS", "id_String");
                        if(context.getStringValue("FILTROS") == null) {
                            context.FILTROS = null;
                        } else {
                            context.FILTROS=(String) context.getProperty("FILTROS");
                        }
                        context.setContextType("UORG_SOLICITUD_ID", "id_BigDecimal");
                        if(context.getStringValue("UORG_SOLICITUD_ID") == null) {
                            context.UORG_SOLICITUD_ID = null;
                        } else {
                            try{
                                context.UORG_SOLICITUD_ID=routines.system.ParserUtils.parseTo_BigDecimal (context.getProperty("UORG_SOLICITUD_ID"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "UORG_SOLICITUD_ID", e.getMessage()));
                                context.UORG_SOLICITUD_ID=null;
                            }
                        }
                        context.setContextType("TARCHIVO", "id_String");
                        if(context.getStringValue("TARCHIVO") == null) {
                            context.TARCHIVO = null;
                        } else {
                            context.TARCHIVO=(String) context.getProperty("TARCHIVO");
                        }
                } 
                public void processAllContext() {
                        processContext_0();
                }
            }

            new ContextProcessing().processAllContext();
        } catch (java.io.IOException ie) {
            System.err.println("Could not load context "+contextStr);
            ie.printStackTrace();
        }

        // get context value from parent directly
        if (parentContextMap != null && !parentContextMap.isEmpty()) {if (parentContextMap.containsKey("DAPLICADAS_LIST")) {
                context.DAPLICADAS_LIST = (String) parentContextMap.get("DAPLICADAS_LIST");
            }if (parentContextMap.containsKey("CARPETA_SALIDA")) {
                context.CARPETA_SALIDA = (String) parentContextMap.get("CARPETA_SALIDA");
            }if (parentContextMap.containsKey("NOMBRE_ARCHIVO")) {
                context.NOMBRE_ARCHIVO = (String) parentContextMap.get("NOMBRE_ARCHIVO");
            }if (parentContextMap.containsKey("NOMBRE_ZIP")) {
                context.NOMBRE_ZIP = (String) parentContextMap.get("NOMBRE_ZIP");
            }if (parentContextMap.containsKey("ES_WEB_SERVICE")) {
                context.ES_WEB_SERVICE = (Boolean) parentContextMap.get("ES_WEB_SERVICE");
            }if (parentContextMap.containsKey("CONTADOR")) {
                context.CONTADOR = (Integer) parentContextMap.get("CONTADOR");
            }if (parentContextMap.containsKey("db_destino_AdditionalParams")) {
                context.db_destino_AdditionalParams = (String) parentContextMap.get("db_destino_AdditionalParams");
            }if (parentContextMap.containsKey("db_destino_Login")) {
                context.db_destino_Login = (String) parentContextMap.get("db_destino_Login");
            }if (parentContextMap.containsKey("db_destino_Password")) {
                context.db_destino_Password = (java.lang.String) parentContextMap.get("db_destino_Password");
            }if (parentContextMap.containsKey("db_destino_Port")) {
                context.db_destino_Port = (String) parentContextMap.get("db_destino_Port");
            }if (parentContextMap.containsKey("db_destino_Schema")) {
                context.db_destino_Schema = (String) parentContextMap.get("db_destino_Schema");
            }if (parentContextMap.containsKey("db_destino_Server")) {
                context.db_destino_Server = (String) parentContextMap.get("db_destino_Server");
            }if (parentContextMap.containsKey("db_destino_ServiceName")) {
                context.db_destino_ServiceName = (String) parentContextMap.get("db_destino_ServiceName");
            }if (parentContextMap.containsKey("db_origen_AdditionalParams")) {
                context.db_origen_AdditionalParams = (String) parentContextMap.get("db_origen_AdditionalParams");
            }if (parentContextMap.containsKey("db_origen_Login")) {
                context.db_origen_Login = (String) parentContextMap.get("db_origen_Login");
            }if (parentContextMap.containsKey("db_origen_Password")) {
                context.db_origen_Password = (java.lang.String) parentContextMap.get("db_origen_Password");
            }if (parentContextMap.containsKey("db_origen_Port")) {
                context.db_origen_Port = (String) parentContextMap.get("db_origen_Port");
            }if (parentContextMap.containsKey("db_origen_Schema")) {
                context.db_origen_Schema = (String) parentContextMap.get("db_origen_Schema");
            }if (parentContextMap.containsKey("db_origen_Server")) {
                context.db_origen_Server = (String) parentContextMap.get("db_origen_Server");
            }if (parentContextMap.containsKey("db_origen_ServiceName")) {
                context.db_origen_ServiceName = (String) parentContextMap.get("db_origen_ServiceName");
            }if (parentContextMap.containsKey("ACTUALIZACION")) {
                context.ACTUALIZACION = (String) parentContextMap.get("ACTUALIZACION");
            }if (parentContextMap.containsKey("FECHA_FINAL")) {
                context.FECHA_FINAL = (String) parentContextMap.get("FECHA_FINAL");
            }if (parentContextMap.containsKey("FECHA_INICIAL")) {
                context.FECHA_INICIAL = (String) parentContextMap.get("FECHA_INICIAL");
            }if (parentContextMap.containsKey("FUERZA_ID")) {
                context.FUERZA_ID = (String) parentContextMap.get("FUERZA_ID");
            }if (parentContextMap.containsKey("FUERZA_NOMBRE")) {
                context.FUERZA_NOMBRE = (String) parentContextMap.get("FUERZA_NOMBRE");
            }if (parentContextMap.containsKey("TESQUEMA")) {
                context.TESQUEMA = (String) parentContextMap.get("TESQUEMA");
            }if (parentContextMap.containsKey("UORG_ID")) {
                context.UORG_ID = (String) parentContextMap.get("UORG_ID");
            }if (parentContextMap.containsKey("UORG_NOMBRE")) {
                context.UORG_NOMBRE = (String) parentContextMap.get("UORG_NOMBRE");
            }if (parentContextMap.containsKey("BODEGA")) {
                context.BODEGA = (String) parentContextMap.get("BODEGA");
            }if (parentContextMap.containsKey("ESTADO_EXEC")) {
                context.ESTADO_EXEC = (String) parentContextMap.get("ESTADO_EXEC");
            }if (parentContextMap.containsKey("FECHA_EJECUCION")) {
                context.FECHA_EJECUCION = (String) parentContextMap.get("FECHA_EJECUCION");
            }if (parentContextMap.containsKey("HORA_FINAL")) {
                context.HORA_FINAL = (String) parentContextMap.get("HORA_FINAL");
            }if (parentContextMap.containsKey("HORA_INICIO")) {
                context.HORA_INICIO = (String) parentContextMap.get("HORA_INICIO");
            }if (parentContextMap.containsKey("JOB")) {
                context.JOB = (String) parentContextMap.get("JOB");
            }if (parentContextMap.containsKey("LOGS_ERROR")) {
                context.LOGS_ERROR = (String) parentContextMap.get("LOGS_ERROR");
            }if (parentContextMap.containsKey("LOGS_EXECUTION")) {
                context.LOGS_EXECUTION = (String) parentContextMap.get("LOGS_EXECUTION");
            }if (parentContextMap.containsKey("ORIGEN")) {
                context.ORIGEN = (String) parentContextMap.get("ORIGEN");
            }if (parentContextMap.containsKey("STORAGE")) {
                context.STORAGE = (String) parentContextMap.get("STORAGE");
            }if (parentContextMap.containsKey("MODULO")) {
                context.MODULO = (String) parentContextMap.get("MODULO");
            }if (parentContextMap.containsKey("SARCHIVO_ID")) {
                context.SARCHIVO_ID = (BigDecimal) parentContextMap.get("SARCHIVO_ID");
            }if (parentContextMap.containsKey("SIGLA")) {
                context.SIGLA = (String) parentContextMap.get("SIGLA");
            }if (parentContextMap.containsKey("USUARIO_ID")) {
                context.USUARIO_ID = (BigDecimal) parentContextMap.get("USUARIO_ID");
            }if (parentContextMap.containsKey("USUARIO_NOMBRE")) {
                context.USUARIO_NOMBRE = (String) parentContextMap.get("USUARIO_NOMBRE");
            }if (parentContextMap.containsKey("TDOSIS_ID")) {
                context.TDOSIS_ID = (String) parentContextMap.get("TDOSIS_ID");
            }if (parentContextMap.containsKey("PERIODO_INICIAL")) {
                context.PERIODO_INICIAL = (String) parentContextMap.get("PERIODO_INICIAL");
            }if (parentContextMap.containsKey("DPTO_NOMBRE")) {
                context.DPTO_NOMBRE = (String) parentContextMap.get("DPTO_NOMBRE");
            }if (parentContextMap.containsKey("MCPIO_NOMBRE")) {
                context.MCPIO_NOMBRE = (String) parentContextMap.get("MCPIO_NOMBRE");
            }if (parentContextMap.containsKey("BIOLOGICO_NOMBRE")) {
                context.BIOLOGICO_NOMBRE = (String) parentContextMap.get("BIOLOGICO_NOMBRE");
            }if (parentContextMap.containsKey("MCPIO_COD")) {
                context.MCPIO_COD = (String) parentContextMap.get("MCPIO_COD");
            }if (parentContextMap.containsKey("TDOSIS_NOMBRE")) {
                context.TDOSIS_NOMBRE = (String) parentContextMap.get("TDOSIS_NOMBRE");
            }if (parentContextMap.containsKey("PERIODO")) {
                context.PERIODO = (String) parentContextMap.get("PERIODO");
            }if (parentContextMap.containsKey("BIOLOGICO_ID")) {
                context.BIOLOGICO_ID = (String) parentContextMap.get("BIOLOGICO_ID");
            }if (parentContextMap.containsKey("PERIODO_FINAL")) {
                context.PERIODO_FINAL = (String) parentContextMap.get("PERIODO_FINAL");
            }if (parentContextMap.containsKey("DPTO_COD")) {
                context.DPTO_COD = (String) parentContextMap.get("DPTO_COD");
            }if (parentContextMap.containsKey("UORG_SOLICITUD_NOMBRE")) {
                context.UORG_SOLICITUD_NOMBRE = (String) parentContextMap.get("UORG_SOLICITUD_NOMBRE");
            }if (parentContextMap.containsKey("FILTROS")) {
                context.FILTROS = (String) parentContextMap.get("FILTROS");
            }if (parentContextMap.containsKey("UORG_SOLICITUD_ID")) {
                context.UORG_SOLICITUD_ID = (BigDecimal) parentContextMap.get("UORG_SOLICITUD_ID");
            }if (parentContextMap.containsKey("TARCHIVO")) {
                context.TARCHIVO = (String) parentContextMap.get("TARCHIVO");
            }
        }

        //Resume: init the resumeUtil
        resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
        resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
        resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
			parametersToEncrypt.add("db_destino_Password");
			parametersToEncrypt.add("db_origen_Password");
        //Resume: jobStart
        resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","","","",resumeUtil.convertToJsonText(context,ContextProperties.class,parametersToEncrypt));


if(execStat) {
    try {
        runStat.openSocket(!isChildJob);
        runStat.setAllPID(rootPid, fatherPid, pid, jobName);
        runStat.startThreadStat(clientHost, portStats);
        runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
    } catch (java.io.IOException ioException) {
        ioException.printStackTrace();
    }
}



	
	    java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
	    globalMap.put("concurrentHashMap", concurrentHashMap);
	

    long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
    long endUsedMemory = 0;
    long end = 0;

    startTime = System.currentTimeMillis();


this.globalResumeTicket = true;//to run tPreJob

try {
errorCode = null;tPrejob_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tPrejob_1) {
globalMap.put("tPrejob_1_SUBPROCESS_STATE", -1);

e_tPrejob_1.printStackTrace();

}




this.globalResumeTicket = false;//to run others jobs

try {
errorCode = null;tJava_3Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tJava_3) {
globalMap.put("tJava_3_SUBPROCESS_STATE", -1);

e_tJava_3.printStackTrace();

}

this.globalResumeTicket = true;//to run tPostJob

try {
errorCode = null;tPostjob_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tPostjob_1) {
globalMap.put("tPostjob_1_SUBPROCESS_STATE", -1);

e_tPostjob_1.printStackTrace();

}



        end = System.currentTimeMillis();

        if (watch) {
            System.out.println((end-startTime)+" milliseconds");
        }

        endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
        if (false) {
            System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : RegistroVacunacion");
        }



if (execStat) {
    runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
    runStat.stopThreadStat();
}
    int returnCode = 0;


    if(errorCode == null) {
         returnCode = status != null && status.equals("failure") ? 1 : 0;
    } else {
         returnCode = errorCode.intValue();
    }
    resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","" + returnCode,"","","");
    resumeUtil.flush();


    return returnCode;

  }

    // only for OSGi env
    public void destroy() {
    closeSqlDbConnections();


    }



    private void closeSqlDbConnections() {
        try {
            Object obj_conn;
            obj_conn = globalMap.remove("conn_tOracleConnection_1");
            if (null != obj_conn) {
                ((java.sql.Connection) obj_conn).close();
            }
        } catch (java.lang.Exception e) {
        }
    }











    private java.util.Map<String, Object> getSharedConnections4REST() {
        java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();
            connections.put("conn_tOracleConnection_1", globalMap.get("conn_tOracleConnection_1"));






        return connections;
    }

    private void evalParam(String arg) {
        if (arg.startsWith("--resuming_logs_dir_path")) {
            resuming_logs_dir_path = arg.substring(25);
        } else if (arg.startsWith("--resuming_checkpoint_path")) {
            resuming_checkpoint_path = arg.substring(27);
        } else if (arg.startsWith("--parent_part_launcher")) {
            parent_part_launcher = arg.substring(23);
        } else if (arg.startsWith("--watch")) {
            watch = true;
        } else if (arg.startsWith("--stat_port=")) {
            String portStatsStr = arg.substring(12);
            if (portStatsStr != null && !portStatsStr.equals("null")) {
                portStats = Integer.parseInt(portStatsStr);
            }
        } else if (arg.startsWith("--trace_port=")) {
            portTraces = Integer.parseInt(arg.substring(13));
        } else if (arg.startsWith("--client_host=")) {
            clientHost = arg.substring(14);
        } else if (arg.startsWith("--context=")) {
            contextStr = arg.substring(10);
            isDefaultContext = false;
        } else if (arg.startsWith("--father_pid=")) {
            fatherPid = arg.substring(13);
        } else if (arg.startsWith("--root_pid=")) {
            rootPid = arg.substring(11);
        } else if (arg.startsWith("--father_node=")) {
            fatherNode = arg.substring(14);
        } else if (arg.startsWith("--pid=")) {
            pid = arg.substring(6);
        } else if (arg.startsWith("--context_type")) {
            String keyValue = arg.substring(15);
			int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.setContextType(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }

            }

		} else if (arg.startsWith("--context_param")) {
            String keyValue = arg.substring(16);
            int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }
            }
        } else if (arg.startsWith("--context_file")) {
        	String keyValue = arg.substring(15);
        	String filePath = new String(java.util.Base64.getDecoder().decode(keyValue));
        	java.nio.file.Path contextFile = java.nio.file.Paths.get(filePath);
            try (java.io.BufferedReader reader = java.nio.file.Files.newBufferedReader(contextFile)) {
                String line;
                while ((line = reader.readLine()) != null) {
                    int index = -1;
                    if ( (index = line.indexOf('=')) > -1) {
							if (line.startsWith("--context_param")) {
								if ("id_Password".equals(context_param.getContextType(line.substring(16, index)))) {
									context_param.put(line.substring(16, index), routines.system.PasswordEncryptUtil.decryptPassword(
											line.substring(index + 1)));
								} else {
									context_param.put(line.substring(16, index), line.substring(index + 1));
								}
							}else {//--context_type
								context_param.setContextType(line.substring(15, index), line.substring(index + 1));
							}
                    }
                }
            } catch (java.io.IOException e) {
            	System.err.println("Could not load the context file: " + filePath);
                e.printStackTrace();
            }
        } else if (arg.startsWith("--log4jLevel=")) {
            log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--audit.enabled") && arg.contains("=")) {//for trunjob call
		    final int equal = arg.indexOf('=');
			final String key = arg.substring("--".length(), equal);
			System.setProperty(key, arg.substring(equal + 1));
		}
    }
    
    private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

    private final String[][] escapeChars = {
        {"\\\\","\\"},{"\\n","\n"},{"\\'","\'"},{"\\r","\r"},
        {"\\f","\f"},{"\\b","\b"},{"\\t","\t"}
        };
    private String replaceEscapeChars (String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0],currIndex);
				if (index>=0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0], strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
    }

    public Integer getErrorCode() {
        return errorCode;
    }


    public String getStatus() {
        return status;
    }

    ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 *     798631 characters generated by Talend Open Studio for ESB 
 *     on the November 1, 2024, 12:41:34 AM COT
 ************************************************************************************************/