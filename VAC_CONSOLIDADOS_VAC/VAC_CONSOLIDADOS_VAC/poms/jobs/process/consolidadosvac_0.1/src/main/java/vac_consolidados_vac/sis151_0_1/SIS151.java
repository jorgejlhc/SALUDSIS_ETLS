// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for ESB
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


package vac_consolidados_vac.sis151_0_1;

import routines.SISPOI;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.Relational;
import routines.GenerarUUID;
import routines.Mathematical;
import routines.Numeric;
import routines.stylesSIS;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.Utils;
import routines.StringHandling;
import routines.TalendDate;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;
 




	//the import part of tJavaRow_2
	//import java.util.List;

	//the import part of tJavaRow_6
	//import java.util.List;

	//the import part of tJava_1
	import java.io.File;

	//the import part of tJavaRow_5
	//import java.util.List;

	//the import part of tJavaRow_3
	//import java.util.List;

	//the import part of tJavaRow_4
	//import java.util.List;

	//the import part of tJava_4
	//import java.util.List;

	//the import part of tJava_2
	//import java.util.List;

	//the import part of tJava_3
	//import java.util.List;


@SuppressWarnings("unused")

/**
 * Job: SIS151 Purpose: <br>
 * Description:  <br>
 * @author jorgejlhc@gmail.com
 * @version 8.8.8.20240722_1936-SNAPSHOT
 * @status 
 */
public class SIS151 implements TalendJob {

protected static void logIgnoredError(String message, Throwable cause) {
       System.err.println(message);
       if (cause != null) {
               cause.printStackTrace();
       }

}


	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}
	private Object[] multiThreadLockWrite = new Object[0];
	
	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	
	private final static String utf8Charset = "UTF-8";
	

	//contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String,String> propertyTypes = new java.util.HashMap<>();
		
		public PropertiesWithType(java.util.Properties properties){
			super(properties);
		}
		public PropertiesWithType(){
			super();
		}
		
		public void setContextType(String key, String type) {
			propertyTypes.put(key,type);
		}
	
		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}	
	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();
		

	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties){
			super(properties);
		}
		public ContextProperties(){
			super();
		}

		public void synchronizeContext(){
			
			if(CARPETA_SALIDA != null){
				
					this.setProperty("CARPETA_SALIDA", CARPETA_SALIDA.toString());
				
			}
			
			if(NOMBRE_ARCHIVO != null){
				
					this.setProperty("NOMBRE_ARCHIVO", NOMBRE_ARCHIVO.toString());
				
			}
			
			if(NOMBRE_ZIP != null){
				
					this.setProperty("NOMBRE_ZIP", NOMBRE_ZIP.toString());
				
			}
			
			if(CONTADOR != null){
				
					this.setProperty("CONTADOR", CONTADOR.toString());
				
			}
			
			if(NIVEL1 != null){
				
					this.setProperty("NIVEL1", NIVEL1.toString());
				
			}
			
			if(DATOS != null){
				
					this.setProperty("DATOS", DATOS.toString());
				
			}
			
			if(db_destino_AdditionalParams != null){
				
					this.setProperty("db_destino_AdditionalParams", db_destino_AdditionalParams.toString());
				
			}
			
			if(db_destino_Login != null){
				
					this.setProperty("db_destino_Login", db_destino_Login.toString());
				
			}
			
			if(db_destino_Password != null){
				
					this.setProperty("db_destino_Password", db_destino_Password.toString());
				
			}
			
			if(db_destino_Port != null){
				
					this.setProperty("db_destino_Port", db_destino_Port.toString());
				
			}
			
			if(db_destino_Schema != null){
				
					this.setProperty("db_destino_Schema", db_destino_Schema.toString());
				
			}
			
			if(db_destino_Server != null){
				
					this.setProperty("db_destino_Server", db_destino_Server.toString());
				
			}
			
			if(db_destino_ServiceName != null){
				
					this.setProperty("db_destino_ServiceName", db_destino_ServiceName.toString());
				
			}
			
			if(db_origen_AdditionalParams != null){
				
					this.setProperty("db_origen_AdditionalParams", db_origen_AdditionalParams.toString());
				
			}
			
			if(db_origen_Login != null){
				
					this.setProperty("db_origen_Login", db_origen_Login.toString());
				
			}
			
			if(db_origen_Password != null){
				
					this.setProperty("db_origen_Password", db_origen_Password.toString());
				
			}
			
			if(db_origen_Port != null){
				
					this.setProperty("db_origen_Port", db_origen_Port.toString());
				
			}
			
			if(db_origen_Schema != null){
				
					this.setProperty("db_origen_Schema", db_origen_Schema.toString());
				
			}
			
			if(db_origen_Server != null){
				
					this.setProperty("db_origen_Server", db_origen_Server.toString());
				
			}
			
			if(db_origen_ServiceName != null){
				
					this.setProperty("db_origen_ServiceName", db_origen_ServiceName.toString());
				
			}
			
			if(DPTO_COD != null){
				
					this.setProperty("DPTO_COD", DPTO_COD.toString());
				
			}
			
			if(DPTO_NOMBRE != null){
				
					this.setProperty("DPTO_NOMBRE", DPTO_NOMBRE.toString());
				
			}
			
			if(FUERZA_ID != null){
				
					this.setProperty("FUERZA_ID", FUERZA_ID.toString());
				
			}
			
			if(FUERZA_NOMBRE != null){
				
					this.setProperty("FUERZA_NOMBRE", FUERZA_NOMBRE.toString());
				
			}
			
			if(MCPIO_COD != null){
				
					this.setProperty("MCPIO_COD", MCPIO_COD.toString());
				
			}
			
			if(MCPIO_NOMBRE != null){
				
					this.setProperty("MCPIO_NOMBRE", MCPIO_NOMBRE.toString());
				
			}
			
			if(PERIODO != null){
				
					this.setProperty("PERIODO", PERIODO.toString());
				
			}
			
			if(TESQUEMA != null){
				
					this.setProperty("TESQUEMA", TESQUEMA.toString());
				
			}
			
			if(UORG_ID != null){
				
					this.setProperty("UORG_ID", UORG_ID.toString());
				
			}
			
			if(UORG_NOMBRE != null){
				
					this.setProperty("UORG_NOMBRE", UORG_NOMBRE.toString());
				
			}
			
			if(BODEGA != null){
				
					this.setProperty("BODEGA", BODEGA.toString());
				
			}
			
			if(ESTADO_EXEC != null){
				
					this.setProperty("ESTADO_EXEC", ESTADO_EXEC.toString());
				
			}
			
			if(FECHA_EJECUCION != null){
				
					this.setProperty("FECHA_EJECUCION", FECHA_EJECUCION.toString());
				
			}
			
			if(HORA_FINAL != null){
				
					this.setProperty("HORA_FINAL", HORA_FINAL.toString());
				
			}
			
			if(HORA_INICIO != null){
				
					this.setProperty("HORA_INICIO", HORA_INICIO.toString());
				
			}
			
			if(JOB != null){
				
					this.setProperty("JOB", JOB.toString());
				
			}
			
			if(LOGS_ERROR != null){
				
					this.setProperty("LOGS_ERROR", LOGS_ERROR.toString());
				
			}
			
			if(LOGS_EXECUTION != null){
				
					this.setProperty("LOGS_EXECUTION", LOGS_EXECUTION.toString());
				
			}
			
			if(ORIGEN != null){
				
					this.setProperty("ORIGEN", ORIGEN.toString());
				
			}
			
			if(STORAGE != null){
				
					this.setProperty("STORAGE", STORAGE.toString());
				
			}
			
			if(MODULO != null){
				
					this.setProperty("MODULO", MODULO.toString());
				
			}
			
			if(SARCHIVO_ID != null){
				
					this.setProperty("SARCHIVO_ID", SARCHIVO_ID.toString());
				
			}
			
			if(SIGLA != null){
				
					this.setProperty("SIGLA", SIGLA.toString());
				
			}
			
		}
		
		//if the stored or passed value is "<TALEND_NULL>" string, it mean null
		public String getStringValue(String key) {
			String origin_value = this.getProperty(key);
			if(NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY.equals(origin_value)) {
				return null;
			}
			return origin_value;
		}

public String CARPETA_SALIDA;
public String getCARPETA_SALIDA(){
	return this.CARPETA_SALIDA;
}
public String NOMBRE_ARCHIVO;
public String getNOMBRE_ARCHIVO(){
	return this.NOMBRE_ARCHIVO;
}
public String NOMBRE_ZIP;
public String getNOMBRE_ZIP(){
	return this.NOMBRE_ZIP;
}
public Integer CONTADOR;
public Integer getCONTADOR(){
	return this.CONTADOR;
}
public String NIVEL1;
public String getNIVEL1(){
	return this.NIVEL1;
}
public Object DATOS;
public Object getDATOS(){
	return this.DATOS;
}
public String db_destino_AdditionalParams;
public String getDb_destino_AdditionalParams(){
	return this.db_destino_AdditionalParams;
}
public String db_destino_Login;
public String getDb_destino_Login(){
	return this.db_destino_Login;
}
public java.lang.String db_destino_Password;
public java.lang.String getDb_destino_Password(){
	return this.db_destino_Password;
}
public String db_destino_Port;
public String getDb_destino_Port(){
	return this.db_destino_Port;
}
public String db_destino_Schema;
public String getDb_destino_Schema(){
	return this.db_destino_Schema;
}
public String db_destino_Server;
public String getDb_destino_Server(){
	return this.db_destino_Server;
}
public String db_destino_ServiceName;
public String getDb_destino_ServiceName(){
	return this.db_destino_ServiceName;
}
public String db_origen_AdditionalParams;
public String getDb_origen_AdditionalParams(){
	return this.db_origen_AdditionalParams;
}
public String db_origen_Login;
public String getDb_origen_Login(){
	return this.db_origen_Login;
}
public java.lang.String db_origen_Password;
public java.lang.String getDb_origen_Password(){
	return this.db_origen_Password;
}
public String db_origen_Port;
public String getDb_origen_Port(){
	return this.db_origen_Port;
}
public String db_origen_Schema;
public String getDb_origen_Schema(){
	return this.db_origen_Schema;
}
public String db_origen_Server;
public String getDb_origen_Server(){
	return this.db_origen_Server;
}
public String db_origen_ServiceName;
public String getDb_origen_ServiceName(){
	return this.db_origen_ServiceName;
}
public String DPTO_COD;
public String getDPTO_COD(){
	return this.DPTO_COD;
}
public String DPTO_NOMBRE;
public String getDPTO_NOMBRE(){
	return this.DPTO_NOMBRE;
}
public String FUERZA_ID;
public String getFUERZA_ID(){
	return this.FUERZA_ID;
}
public String FUERZA_NOMBRE;
public String getFUERZA_NOMBRE(){
	return this.FUERZA_NOMBRE;
}
public String MCPIO_COD;
public String getMCPIO_COD(){
	return this.MCPIO_COD;
}
public String MCPIO_NOMBRE;
public String getMCPIO_NOMBRE(){
	return this.MCPIO_NOMBRE;
}
public String PERIODO;
public String getPERIODO(){
	return this.PERIODO;
}
public String TESQUEMA;
public String getTESQUEMA(){
	return this.TESQUEMA;
}
public String UORG_ID;
public String getUORG_ID(){
	return this.UORG_ID;
}
public String UORG_NOMBRE;
public String getUORG_NOMBRE(){
	return this.UORG_NOMBRE;
}
public String BODEGA;
public String getBODEGA(){
	return this.BODEGA;
}
public String ESTADO_EXEC;
public String getESTADO_EXEC(){
	return this.ESTADO_EXEC;
}
public String FECHA_EJECUCION;
public String getFECHA_EJECUCION(){
	return this.FECHA_EJECUCION;
}
public String HORA_FINAL;
public String getHORA_FINAL(){
	return this.HORA_FINAL;
}
public String HORA_INICIO;
public String getHORA_INICIO(){
	return this.HORA_INICIO;
}
public String JOB;
public String getJOB(){
	return this.JOB;
}
public String LOGS_ERROR;
public String getLOGS_ERROR(){
	return this.LOGS_ERROR;
}
public String LOGS_EXECUTION;
public String getLOGS_EXECUTION(){
	return this.LOGS_EXECUTION;
}
public String ORIGEN;
public String getORIGEN(){
	return this.ORIGEN;
}
public String STORAGE;
public String getSTORAGE(){
	return this.STORAGE;
}
public String MODULO;
public String getMODULO(){
	return this.MODULO;
}
public BigDecimal SARCHIVO_ID;
public BigDecimal getSARCHIVO_ID(){
	return this.SARCHIVO_ID;
}
public String SIGLA;
public String getSIGLA(){
	return this.SIGLA;
}
	}
			
	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.
	public ContextProperties getContext() {
		return this.context;
	}
	private final String jobVersion = "0.1";
	private final String jobName = "SIS151";
	private final String projectName = "VAC_CONSOLIDADOS_VAC";
	public Integer errorCode = null;
	private String currentComponent = "";
	
	private String cLabel =  null;
	
		private final java.util.Map<String, Object> globalMap = java.util.Collections.synchronizedMap(new java.util.HashMap<String, Object>());
		
	
		private final java.util.Map<String, Long> start_Hash = java.util.Collections.synchronizedMap(new java.util.HashMap<String, Long>());
		private final java.util.Map<String, Long> end_Hash = java.util.Collections.synchronizedMap(new java.util.HashMap<String, Long>());
		private final java.util.Map<String, Boolean> ok_Hash = java.util.Collections.synchronizedMap(new java.util.HashMap<String, Boolean>());
		public  final java.util.List<String[]> globalBuffer = java.util.Collections.synchronizedList(new java.util.ArrayList<String[]>());
	

private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";
	
	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(), new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}
	
	public void setDataSourceReferences(List serviceReferences) throws Exception{
		
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		java.util.Map<String, javax.sql.DataSource> dataSources = new java.util.HashMap<String, javax.sql.DataSource>();
		
		for (java.util.Map.Entry<String, javax.sql.DataSource> entry : BundleUtils.getServices(serviceReferences,  javax.sql.DataSource.class).entrySet()) {
                    dataSources.put(entry.getKey(), entry.getValue());
                    talendDataSources.put(entry.getKey(), new routines.system.TalendDataSource(entry.getValue()));
		}

		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}


private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

public String getExceptionStackTrace() {
	if ("failure".equals(this.getStatus())) {
		errorMessagePS.flush();
		return baos.toString();
	}
	return null;
}

private Exception exception;

public Exception getException() {
	if ("failure".equals(this.getStatus())) {
		return this.exception;
	}
	return null;
}

private class TalendException extends Exception {

	private static final long serialVersionUID = 1L;

	private java.util.Map<String, Object> globalMap = null;
	private Exception e = null;
	
	private String currentComponent = null;
	private String cLabel =  null;
	
	private String virtualComponentName = null;
	
	public void setVirtualComponentName (String virtualComponentName){
		this.virtualComponentName = virtualComponentName;
	}

	private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
		this.currentComponent= errorComponent;
		this.globalMap = globalMap;
		this.e = e;
	}
	
	private TalendException(Exception e, String errorComponent, String errorComponentLabel, final java.util.Map<String, Object> globalMap) {
		this(e, errorComponent, globalMap);
		this.cLabel = errorComponentLabel;
	}

	public Exception getException() {
		return this.e;
	}

	public String getCurrentComponent() {
		return this.currentComponent;
	}

	
    public String getExceptionCauseMessage(Exception e){
        Throwable cause = e;
        String message = null;
        int i = 10;
        while (null != cause && 0 < i--) {
            message = cause.getMessage();
            if (null == message) {
                cause = cause.getCause();
            } else {
                break;          
            }
        }
        if (null == message) {
            message = e.getClass().getName();
        }   
        return message;
    }

	@Override
	public void printStackTrace() {
		if (!(e instanceof TalendException || e instanceof TDieException)) {
			if(virtualComponentName!=null && currentComponent.indexOf(virtualComponentName+"_")==0){
				globalMap.put(virtualComponentName+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			}
			globalMap.put(currentComponent+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
		}
		if (!(e instanceof TDieException)) {
			if(e instanceof TalendException){
				e.printStackTrace();
			} else {
				e.printStackTrace();
				e.printStackTrace(errorMessagePS);
				SIS151.this.exception = e;
			}
		}
		if (!(e instanceof TalendException)) {
		try {
			for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
				if (m.getName().compareTo(currentComponent + "_error") == 0) {
					m.invoke(SIS151.this, new Object[] { e , currentComponent, globalMap});
					break;
				}
			}

			if(!(e instanceof TDieException)){
			}
		} catch (Exception e) {
			this.e.printStackTrace();
		}
		}
	}
}

			public void tPrejob_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tPrejob_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputXML_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tFileInputXML_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaRow_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tFileInputXML_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleConnection_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleConnection_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputXML_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tFileInputXML_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaRow_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tFileInputXML_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleConnection_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleConnection_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tJava_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaRow_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaRow_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaRow_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFixedFlowInput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tFixedFlowInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleSP_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tFixedFlowInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tParseRecordSet_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tFixedFlowInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashOutput_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tFixedFlowInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFixedFlowInput_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tFixedFlowInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleSP_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tFixedFlowInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tParseRecordSet_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tFixedFlowInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashOutput_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tFixedFlowInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tUnite_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFlowToIterate_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tJava_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileArchive_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tFileArchive_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileDelete_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tFileDelete_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFixedFlowInput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tFixedFlowInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tBufferOutput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tFixedFlowInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostjob_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tPostjob_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tJava_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleClose_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleClose_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleClose_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleClose_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFixedFlowInput_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tFixedFlowInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputDelimited_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tFixedFlowInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDenormalize_1_DenormalizeOut_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
							tDenormalize_1_ArrayIn_error(exception, errorComponent, globalMap);
						
						}
					
			public void tDenormalize_1_ArrayIn_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDenormalize_2_DenormalizeOut_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
							tDenormalize_2_ArrayIn_error(exception, errorComponent, globalMap);
						
						}
					
			public void tDenormalize_2_ArrayIn_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDenormalize_3_DenormalizeOut_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
							tDenormalize_3_ArrayIn_error(exception, errorComponent, globalMap);
						
						}
					
			public void tDenormalize_3_ArrayIn_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPrejob_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileInputXML_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleConnection_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileInputXML_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleConnection_3_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleInput_3_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleInput_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleInput_4_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFixedFlowInput_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFixedFlowInput_3_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tHashInput_4_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileArchive_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileDelete_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFixedFlowInput_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tPostjob_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_3_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleClose_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleClose_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFixedFlowInput_4_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
	









public void tPrejob_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPrejob_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tPrejob_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tPrejob_1", false);
		start_Hash.put("tPrejob_1", System.currentTimeMillis());
		
	
	currentComponent="tPrejob_1";
	
	
		int tos_count_tPrejob_1 = 0;
		

 



/**
 * [tPrejob_1 begin ] stop
 */
	
	/**
	 * [tPrejob_1 main ] start
	 */

	

	
	
	currentComponent="tPrejob_1";
	
	

 


	tos_count_tPrejob_1++;

/**
 * [tPrejob_1 main ] stop
 */
	
	/**
	 * [tPrejob_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tPrejob_1";
	
	

 



/**
 * [tPrejob_1 process_data_begin ] stop
 */
	
	/**
	 * [tPrejob_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tPrejob_1";
	
	

 



/**
 * [tPrejob_1 process_data_end ] stop
 */
	
	/**
	 * [tPrejob_1 end ] start
	 */

	

	
	
	currentComponent="tPrejob_1";
	
	

 

ok_Hash.put("tPrejob_1", true);
end_Hash.put("tPrejob_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk10", 0, "ok");
				}
				tFileInputXML_1Process(globalMap);



/**
 * [tPrejob_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPrejob_1 finally ] start
	 */

	

	
	
	currentComponent="tPrejob_1";
	
	

 



/**
 * [tPrejob_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPrejob_1_SUBPROCESS_STATE", 1);
	}
	


public static class row15Struct implements routines.system.IPersistableRow<row15Struct> {
    final static byte[] commonByteArrayLock_VAC_CONSOLIDADOS_VAC_SIS151 = new byte[0];
    static byte[] commonByteArray_VAC_CONSOLIDADOS_VAC_SIS151 = new byte[0];

	
			    public String Host;

				public String getHost () {
					return this.Host;
				}

				public Boolean HostIsNullable(){
				    return true;
				}
				public Boolean HostIsKey(){
				    return false;
				}
				public Integer HostLength(){
				    return 15;
				}
				public Integer HostPrecision(){
				    return 0;
				}
				public String HostDefault(){
				
					return null;
				
				}
				public String HostComment(){
				
				    return "";
				
				}
				public String HostPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String HostOriginalDbColumnName(){
				
					return "Host";
				
				}

				
			    public String Port;

				public String getPort () {
					return this.Port;
				}

				public Boolean PortIsNullable(){
				    return true;
				}
				public Boolean PortIsKey(){
				    return false;
				}
				public Integer PortLength(){
				    return 4;
				}
				public Integer PortPrecision(){
				    return 0;
				}
				public String PortDefault(){
				
					return null;
				
				}
				public String PortComment(){
				
				    return "";
				
				}
				public String PortPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String PortOriginalDbColumnName(){
				
					return "Port";
				
				}

				
			    public String Sid;

				public String getSid () {
					return this.Sid;
				}

				public Boolean SidIsNullable(){
				    return true;
				}
				public Boolean SidIsKey(){
				    return false;
				}
				public Integer SidLength(){
				    return 4;
				}
				public Integer SidPrecision(){
				    return 0;
				}
				public String SidDefault(){
				
					return null;
				
				}
				public String SidComment(){
				
				    return "";
				
				}
				public String SidPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String SidOriginalDbColumnName(){
				
					return "Sid";
				
				}

				
			    public String ServiceName;

				public String getServiceName () {
					return this.ServiceName;
				}

				public Boolean ServiceNameIsNullable(){
				    return true;
				}
				public Boolean ServiceNameIsKey(){
				    return false;
				}
				public Integer ServiceNameLength(){
				    return 7;
				}
				public Integer ServiceNamePrecision(){
				    return 0;
				}
				public String ServiceNameDefault(){
				
					return null;
				
				}
				public String ServiceNameComment(){
				
				    return "";
				
				}
				public String ServiceNamePattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String ServiceNameOriginalDbColumnName(){
				
					return "ServiceName";
				
				}

				
			    public String Schema;

				public String getSchema () {
					return this.Schema;
				}

				public Boolean SchemaIsNullable(){
				    return true;
				}
				public Boolean SchemaIsKey(){
				    return false;
				}
				public Integer SchemaLength(){
				    return 8;
				}
				public Integer SchemaPrecision(){
				    return 0;
				}
				public String SchemaDefault(){
				
					return null;
				
				}
				public String SchemaComment(){
				
				    return "";
				
				}
				public String SchemaPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String SchemaOriginalDbColumnName(){
				
					return "Schema";
				
				}

				
			    public String User;

				public String getUser () {
					return this.User;
				}

				public Boolean UserIsNullable(){
				    return true;
				}
				public Boolean UserIsKey(){
				    return false;
				}
				public Integer UserLength(){
				    return 8;
				}
				public Integer UserPrecision(){
				    return 0;
				}
				public String UserDefault(){
				
					return null;
				
				}
				public String UserComment(){
				
				    return "";
				
				}
				public String UserPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String UserOriginalDbColumnName(){
				
					return "User";
				
				}

				
			    public String Password;

				public String getPassword () {
					return this.Password;
				}

				public Boolean PasswordIsNullable(){
				    return true;
				}
				public Boolean PasswordIsKey(){
				    return false;
				}
				public Integer PasswordLength(){
				    return 15;
				}
				public Integer PasswordPrecision(){
				    return 0;
				}
				public String PasswordDefault(){
				
					return null;
				
				}
				public String PasswordComment(){
				
				    return "";
				
				}
				public String PasswordPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String PasswordOriginalDbColumnName(){
				
					return "Password";
				
				}

				
			    public String PathStorage;

				public String getPathStorage () {
					return this.PathStorage;
				}

				public Boolean PathStorageIsNullable(){
				    return true;
				}
				public Boolean PathStorageIsKey(){
				    return false;
				}
				public Integer PathStorageLength(){
				    return 44;
				}
				public Integer PathStoragePrecision(){
				    return 0;
				}
				public String PathStorageDefault(){
				
					return null;
				
				}
				public String PathStorageComment(){
				
				    return "";
				
				}
				public String PathStoragePattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String PathStorageOriginalDbColumnName(){
				
					return "PathStorage";
				
				}

				
			    public String SMTPHost;

				public String getSMTPHost () {
					return this.SMTPHost;
				}

				public Boolean SMTPHostIsNullable(){
				    return true;
				}
				public Boolean SMTPHostIsKey(){
				    return false;
				}
				public Integer SMTPHostLength(){
				    return 14;
				}
				public Integer SMTPHostPrecision(){
				    return 0;
				}
				public String SMTPHostDefault(){
				
					return null;
				
				}
				public String SMTPHostComment(){
				
				    return "";
				
				}
				public String SMTPHostPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String SMTPHostOriginalDbColumnName(){
				
					return "SMTPHost";
				
				}

				
			    public String SMTPPort;

				public String getSMTPPort () {
					return this.SMTPPort;
				}

				public Boolean SMTPPortIsNullable(){
				    return true;
				}
				public Boolean SMTPPortIsKey(){
				    return false;
				}
				public Integer SMTPPortLength(){
				    return 3;
				}
				public Integer SMTPPortPrecision(){
				    return 0;
				}
				public String SMTPPortDefault(){
				
					return null;
				
				}
				public String SMTPPortComment(){
				
				    return "";
				
				}
				public String SMTPPortPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String SMTPPortOriginalDbColumnName(){
				
					return "SMTPPort";
				
				}

				
			    public String UsernameMail;

				public String getUsernameMail () {
					return this.UsernameMail;
				}

				public Boolean UsernameMailIsNullable(){
				    return true;
				}
				public Boolean UsernameMailIsKey(){
				    return false;
				}
				public Integer UsernameMailLength(){
				    return 34;
				}
				public Integer UsernameMailPrecision(){
				    return 0;
				}
				public String UsernameMailDefault(){
				
					return null;
				
				}
				public String UsernameMailComment(){
				
				    return "";
				
				}
				public String UsernameMailPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String UsernameMailOriginalDbColumnName(){
				
					return "UsernameMail";
				
				}

				
			    public String PasswordMail;

				public String getPasswordMail () {
					return this.PasswordMail;
				}

				public Boolean PasswordMailIsNullable(){
				    return true;
				}
				public Boolean PasswordMailIsKey(){
				    return false;
				}
				public Integer PasswordMailLength(){
				    return 13;
				}
				public Integer PasswordMailPrecision(){
				    return 0;
				}
				public String PasswordMailDefault(){
				
					return null;
				
				}
				public String PasswordMailComment(){
				
				    return "";
				
				}
				public String PasswordMailPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String PasswordMailOriginalDbColumnName(){
				
					return "PasswordMail";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_VAC_CONSOLIDADOS_VAC_SIS151.length) {
				if(length < 1024 && commonByteArray_VAC_CONSOLIDADOS_VAC_SIS151.length == 0) {
   					commonByteArray_VAC_CONSOLIDADOS_VAC_SIS151 = new byte[1024];
				} else {
   					commonByteArray_VAC_CONSOLIDADOS_VAC_SIS151 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_VAC_CONSOLIDADOS_VAC_SIS151, 0, length);
			strReturn = new String(commonByteArray_VAC_CONSOLIDADOS_VAC_SIS151, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_VAC_CONSOLIDADOS_VAC_SIS151.length) {
				if(length < 1024 && commonByteArray_VAC_CONSOLIDADOS_VAC_SIS151.length == 0) {
   					commonByteArray_VAC_CONSOLIDADOS_VAC_SIS151 = new byte[1024];
				} else {
   					commonByteArray_VAC_CONSOLIDADOS_VAC_SIS151 = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_VAC_CONSOLIDADOS_VAC_SIS151, 0, length);
			strReturn = new String(commonByteArray_VAC_CONSOLIDADOS_VAC_SIS151, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_VAC_CONSOLIDADOS_VAC_SIS151) {

        	try {

        		int length = 0;
		
					this.Host = readString(dis);
					
					this.Port = readString(dis);
					
					this.Sid = readString(dis);
					
					this.ServiceName = readString(dis);
					
					this.Schema = readString(dis);
					
					this.User = readString(dis);
					
					this.Password = readString(dis);
					
					this.PathStorage = readString(dis);
					
					this.SMTPHost = readString(dis);
					
					this.SMTPPort = readString(dis);
					
					this.UsernameMail = readString(dis);
					
					this.PasswordMail = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_VAC_CONSOLIDADOS_VAC_SIS151) {

        	try {

        		int length = 0;
		
					this.Host = readString(dis);
					
					this.Port = readString(dis);
					
					this.Sid = readString(dis);
					
					this.ServiceName = readString(dis);
					
					this.Schema = readString(dis);
					
					this.User = readString(dis);
					
					this.Password = readString(dis);
					
					this.PathStorage = readString(dis);
					
					this.SMTPHost = readString(dis);
					
					this.SMTPPort = readString(dis);
					
					this.UsernameMail = readString(dis);
					
					this.PasswordMail = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.Host,dos);
					
					// String
				
						writeString(this.Port,dos);
					
					// String
				
						writeString(this.Sid,dos);
					
					// String
				
						writeString(this.ServiceName,dos);
					
					// String
				
						writeString(this.Schema,dos);
					
					// String
				
						writeString(this.User,dos);
					
					// String
				
						writeString(this.Password,dos);
					
					// String
				
						writeString(this.PathStorage,dos);
					
					// String
				
						writeString(this.SMTPHost,dos);
					
					// String
				
						writeString(this.SMTPPort,dos);
					
					// String
				
						writeString(this.UsernameMail,dos);
					
					// String
				
						writeString(this.PasswordMail,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.Host,dos);
					
					// String
				
						writeString(this.Port,dos);
					
					// String
				
						writeString(this.Sid,dos);
					
					// String
				
						writeString(this.ServiceName,dos);
					
					// String
				
						writeString(this.Schema,dos);
					
					// String
				
						writeString(this.User,dos);
					
					// String
				
						writeString(this.Password,dos);
					
					// String
				
						writeString(this.PathStorage,dos);
					
					// String
				
						writeString(this.SMTPHost,dos);
					
					// String
				
						writeString(this.SMTPPort,dos);
					
					// String
				
						writeString(this.UsernameMail,dos);
					
					// String
				
						writeString(this.PasswordMail,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Host="+Host);
		sb.append(",Port="+Port);
		sb.append(",Sid="+Sid);
		sb.append(",ServiceName="+ServiceName);
		sb.append(",Schema="+Schema);
		sb.append(",User="+User);
		sb.append(",Password="+Password);
		sb.append(",PathStorage="+PathStorage);
		sb.append(",SMTPHost="+SMTPHost);
		sb.append(",SMTPPort="+SMTPPort);
		sb.append(",UsernameMail="+UsernameMail);
		sb.append(",PasswordMail="+PasswordMail);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row15Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tFileInputXML_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileInputXML_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row15Struct row15 = new row15Struct();




	
	/**
	 * [tJavaRow_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaRow_2", false);
		start_Hash.put("tJavaRow_2", System.currentTimeMillis());
		
	
	currentComponent="tJavaRow_2";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row15");
					}
				
		int tos_count_tJavaRow_2 = 0;
		

int nb_line_tJavaRow_2 = 0;

 



/**
 * [tJavaRow_2 begin ] stop
 */



	
	/**
	 * [tFileInputXML_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputXML_1", false);
		start_Hash.put("tFileInputXML_1", System.currentTimeMillis());
		
	
	currentComponent="tFileInputXML_1";
	
	
		int tos_count_tFileInputXML_1 = 0;
		

	

int nb_line_tFileInputXML_1 = 0;

	String os_tFileInputXML_1 = System.getProperty("os.name").toLowerCase();
	boolean isWindows_tFileInputXML_1=false;
	if(os_tFileInputXML_1.indexOf("windows") > -1 || os_tFileInputXML_1.indexOf("nt") > -1){
		isWindows_tFileInputXML_1=true;
	}
class XML_API_tFileInputXML_1{
	public boolean isDefNull(String[] node) throws javax.xml.transform.TransformerException {
        if(node[0] != null && node[1]!=null && ("true").equals(node[1])){
        	return true;
        }
        return false;
    }

    public boolean isMissing(String[] node) throws javax.xml.transform.TransformerException {
        return node[0] == null ? true : false;
    }

    public boolean isEmpty(String[] node) throws javax.xml.transform.TransformerException {
        if(node[0]!=null ){
        	return node[0].length() == 0;
        }
        return false;
    }
}
XML_API_tFileInputXML_1 xml_api_tFileInputXML_1 = new XML_API_tFileInputXML_1();

String[] queryPaths_tFileInputXML_1 = new String[]{	
	"Host"		
	,"Host"+"/@xsi:nil"	
	,"Port"		
	,"Port"+"/@xsi:nil"	
	,"Sid"		
	,"Sid"+"/@xsi:nil"	
	,"ServiceName"		
	,"ServiceName"+"/@xsi:nil"	
	,"Schema"		
	,"Schema"+"/@xsi:nil"	
	,"User"		
	,"User"+"/@xsi:nil"	
	,"Password"		
	,"Password"+"/@xsi:nil"	
	,"PathStorage"		
	,"PathStorage"+"/@xsi:nil"	
	,"SMTPHost"		
	,"SMTPHost"+"/@xsi:nil"	
	,"SMTPPort"		
	,"SMTPPort"+"/@xsi:nil"	
	,"UsernameMail"		
	,"UsernameMail"+"/@xsi:nil"	
	,"PasswordMail"		
	,"PasswordMail"+"/@xsi:nil"
};

boolean[] asXMLs_tFileInputXML_1 = new boolean[]{	
	false		
	,false	
	,false		
	,false	
	,false		
	,false	
	,false		
	,false	
	,false		
	,false	
	,false		
	,false	
	,false		
	,false	
	,false		
	,false	
	,false		
	,false	
	,false		
	,false	
	,false		
	,false	
	,false		
	,false
};

String str_tFileInputXML_1 = "";
String[] node_tFileInputXML_1 = null;
org.talend.xml.sax.SAXLooper looper_tFileInputXML_1 = new org.talend.xml.sax.SAXLooper("/connectionStrings",queryPaths_tFileInputXML_1,asXMLs_tFileInputXML_1);
looper_tFileInputXML_1.setEncoding("UTF-8");
Object filename_tFileInputXML_1 = null;
try {
	filename_tFileInputXML_1 = context.ORIGEN;
} catch(java.lang.Exception e) {
globalMap.put("tFileInputXML_1_ERROR_MESSAGE",e.getMessage());
	
	System.err.println(e.getMessage());
	
}
if(filename_tFileInputXML_1 != null && filename_tFileInputXML_1 instanceof String && filename_tFileInputXML_1.toString().startsWith("//")){
	if (!isWindows_tFileInputXML_1){
		filename_tFileInputXML_1 = filename_tFileInputXML_1.toString().replaceFirst("//","/");
	}
}
if(filename_tFileInputXML_1 instanceof java.io.InputStream){
	looper_tFileInputXML_1.parse((java.io.InputStream)filename_tFileInputXML_1);
}else{
	looper_tFileInputXML_1.parse(String.valueOf(filename_tFileInputXML_1));
}
java.util.Iterator<java.util.Map<String, String>> it_tFileInputXML_1  = looper_tFileInputXML_1.iterator();
while (it_tFileInputXML_1.hasNext()) {
	java.util.Map<String, String> row_tFileInputXML_1 = it_tFileInputXML_1.next();
	if (nb_line_tFileInputXML_1>=50) {
	
			looper_tFileInputXML_1.stopRead();
	
		break;
	}
		nb_line_tFileInputXML_1++;
		
	row15 = null;			
	boolean whetherReject_tFileInputXML_1 = false;
	row15 = new row15Struct();
	try{
	str_tFileInputXML_1 = row_tFileInputXML_1.get("Host");
	node_tFileInputXML_1 = new String[]{str_tFileInputXML_1,row_tFileInputXML_1.get("Host"+"/@xsi:nil")};
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row15.Host =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row15.Host ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row15.Host =null;
									}else{
		row15.Host = str_tFileInputXML_1;
	}
	str_tFileInputXML_1 = row_tFileInputXML_1.get("Port");
	node_tFileInputXML_1 = new String[]{str_tFileInputXML_1,row_tFileInputXML_1.get("Port"+"/@xsi:nil")};
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row15.Port =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row15.Port ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row15.Port =null;
									}else{
		row15.Port = str_tFileInputXML_1;
	}
	str_tFileInputXML_1 = row_tFileInputXML_1.get("Sid");
	node_tFileInputXML_1 = new String[]{str_tFileInputXML_1,row_tFileInputXML_1.get("Sid"+"/@xsi:nil")};
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row15.Sid =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row15.Sid ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row15.Sid =null;
									}else{
		row15.Sid = str_tFileInputXML_1;
	}
	str_tFileInputXML_1 = row_tFileInputXML_1.get("ServiceName");
	node_tFileInputXML_1 = new String[]{str_tFileInputXML_1,row_tFileInputXML_1.get("ServiceName"+"/@xsi:nil")};
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row15.ServiceName =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row15.ServiceName ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row15.ServiceName =null;
									}else{
		row15.ServiceName = str_tFileInputXML_1;
	}
	str_tFileInputXML_1 = row_tFileInputXML_1.get("Schema");
	node_tFileInputXML_1 = new String[]{str_tFileInputXML_1,row_tFileInputXML_1.get("Schema"+"/@xsi:nil")};
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row15.Schema =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row15.Schema ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row15.Schema =null;
									}else{
		row15.Schema = str_tFileInputXML_1;
	}
	str_tFileInputXML_1 = row_tFileInputXML_1.get("User");
	node_tFileInputXML_1 = new String[]{str_tFileInputXML_1,row_tFileInputXML_1.get("User"+"/@xsi:nil")};
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row15.User =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row15.User ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row15.User =null;
									}else{
		row15.User = str_tFileInputXML_1;
	}
	str_tFileInputXML_1 = row_tFileInputXML_1.get("Password");
	node_tFileInputXML_1 = new String[]{str_tFileInputXML_1,row_tFileInputXML_1.get("Password"+"/@xsi:nil")};
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row15.Password =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row15.Password ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row15.Password =null;
									}else{
		row15.Password = str_tFileInputXML_1;
	}
	str_tFileInputXML_1 = row_tFileInputXML_1.get("PathStorage");
	node_tFileInputXML_1 = new String[]{str_tFileInputXML_1,row_tFileInputXML_1.get("PathStorage"+"/@xsi:nil")};
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row15.PathStorage =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row15.PathStorage ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row15.PathStorage =null;
									}else{
		row15.PathStorage = str_tFileInputXML_1;
	}
	str_tFileInputXML_1 = row_tFileInputXML_1.get("SMTPHost");
	node_tFileInputXML_1 = new String[]{str_tFileInputXML_1,row_tFileInputXML_1.get("SMTPHost"+"/@xsi:nil")};
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row15.SMTPHost =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row15.SMTPHost ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row15.SMTPHost =null;
									}else{
		row15.SMTPHost = str_tFileInputXML_1;
	}
	str_tFileInputXML_1 = row_tFileInputXML_1.get("SMTPPort");
	node_tFileInputXML_1 = new String[]{str_tFileInputXML_1,row_tFileInputXML_1.get("SMTPPort"+"/@xsi:nil")};
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row15.SMTPPort =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row15.SMTPPort ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row15.SMTPPort =null;
									}else{
		row15.SMTPPort = str_tFileInputXML_1;
	}
	str_tFileInputXML_1 = row_tFileInputXML_1.get("UsernameMail");
	node_tFileInputXML_1 = new String[]{str_tFileInputXML_1,row_tFileInputXML_1.get("UsernameMail"+"/@xsi:nil")};
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row15.UsernameMail =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row15.UsernameMail ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row15.UsernameMail =null;
									}else{
		row15.UsernameMail = str_tFileInputXML_1;
	}
	str_tFileInputXML_1 = row_tFileInputXML_1.get("PasswordMail");
	node_tFileInputXML_1 = new String[]{str_tFileInputXML_1,row_tFileInputXML_1.get("PasswordMail"+"/@xsi:nil")};
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row15.PasswordMail =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row15.PasswordMail ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row15.PasswordMail =null;
									}else{
		row15.PasswordMail = str_tFileInputXML_1;
	} 
			
    } catch (java.lang.Exception e) {
globalMap.put("tFileInputXML_1_ERROR_MESSAGE",e.getMessage());
        whetherReject_tFileInputXML_1 = true;
                System.err.println(e.getMessage());
                row15 = null;
    }
			
			

 



/**
 * [tFileInputXML_1 begin ] stop
 */
	
	/**
	 * [tFileInputXML_1 main ] start
	 */

	

	
	
	currentComponent="tFileInputXML_1";
	
	

 


	tos_count_tFileInputXML_1++;

/**
 * [tFileInputXML_1 main ] stop
 */
	
	/**
	 * [tFileInputXML_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileInputXML_1";
	
	

 



/**
 * [tFileInputXML_1 process_data_begin ] stop
 */
// Start of branch "row15"
if(row15 != null) { 



	
	/**
	 * [tJavaRow_2 main ] start
	 */

	

	
	
	currentComponent="tJavaRow_2";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row15"
						
						);
					}
					

    //Guarda en variables de contexto los parametros de conexión a la bd saludsis
context.db_origen_Server = row15.Host;
context.db_origen_Port = row15.Port;
context.db_origen_ServiceName = row15.ServiceName;
context.db_origen_Schema = row15.Schema;
context.db_origen_Login = row15.User;
context.db_origen_Password = row15.Password;
context.STORAGE = row15.PathStorage;

//Guarda en variables de contexto la fecha de ejecución y la hora de inicio
context.FECHA_EJECUCION = TalendDate.getDate("DD/MM/YYYY");
context.HORA_INICIO = TalendDate.getDate("HH:mm:ss");
context.JOB = "SIS151";

//Imprime en consola el job, la fecha de ejecución y la hora de inicio
System.out.println(context.JOB+" :-Start: "+context.FECHA_EJECUCION+" "+context.HORA_INICIO);


    nb_line_tJavaRow_2++;   

 


	tos_count_tJavaRow_2++;

/**
 * [tJavaRow_2 main ] stop
 */
	
	/**
	 * [tJavaRow_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJavaRow_2";
	
	

 



/**
 * [tJavaRow_2 process_data_begin ] stop
 */
	
	/**
	 * [tJavaRow_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tJavaRow_2";
	
	

 



/**
 * [tJavaRow_2 process_data_end ] stop
 */

} // End of branch "row15"




	
	/**
	 * [tFileInputXML_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileInputXML_1";
	
	

 



/**
 * [tFileInputXML_1 process_data_end ] stop
 */
	
	/**
	 * [tFileInputXML_1 end ] start
	 */

	

	
	
	currentComponent="tFileInputXML_1";
	
	


	}
	try {
		looper_tFileInputXML_1.handleTaskResponse();
	} catch(java.lang.Exception e) {
globalMap.put("tFileInputXML_1_ERROR_MESSAGE",e.getMessage());
		if(!(e.getCause() instanceof org.talend.xml.sax.exception.EnoughDataException))
	
		
		System.err.println(e.getMessage());	
	
	}
	globalMap.put("tFileInputXML_1_NB_LINE",nb_line_tFileInputXML_1);

	

 

ok_Hash.put("tFileInputXML_1", true);
end_Hash.put("tFileInputXML_1", System.currentTimeMillis());




/**
 * [tFileInputXML_1 end ] stop
 */

	
	/**
	 * [tJavaRow_2 end ] start
	 */

	

	
	
	currentComponent="tJavaRow_2";
	
	

globalMap.put("tJavaRow_2_NB_LINE",nb_line_tJavaRow_2);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row15");
			  	}
			  	
 

ok_Hash.put("tJavaRow_2", true);
end_Hash.put("tJavaRow_2", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk9", 0, "ok");
				}
				tOracleConnection_1Process(globalMap);



/**
 * [tJavaRow_2 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileInputXML_1 finally ] start
	 */

	

	
	
	currentComponent="tFileInputXML_1";
	
	

 



/**
 * [tFileInputXML_1 finally ] stop
 */

	
	/**
	 * [tJavaRow_2 finally ] start
	 */

	

	
	
	currentComponent="tJavaRow_2";
	
	

 



/**
 * [tJavaRow_2 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileInputXML_1_SUBPROCESS_STATE", 1);
	}
	


public void tOracleConnection_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleConnection_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tOracleConnection_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleConnection_1", false);
		start_Hash.put("tOracleConnection_1", System.currentTimeMillis());
		
	
	currentComponent="tOracleConnection_1";
	
	
		int tos_count_tOracleConnection_1 = 0;
		
	

	
        String url_tOracleConnection_1 = "jdbc:oracle:thin:@(description=(address=(protocol=tcp)(host=" + context.db_origen_Server + ")(port=" + context.db_origen_Port + "))(connect_data=(service_name=" + context.db_origen_ServiceName + ")))";
    	globalMap.put("connectionType_" + "tOracleConnection_1", "ORACLE_SERVICE_NAME");
	String dbUser_tOracleConnection_1 = context.db_origen_Login;
	
	
		
	final String decryptedPassword_tOracleConnection_1 = context.db_origen_Password; 
		String dbPwd_tOracleConnection_1 = decryptedPassword_tOracleConnection_1;
	
	
	java.sql.Connection conn_tOracleConnection_1 = null;
	
		
			String driverClass_tOracleConnection_1 = "oracle.jdbc.OracleDriver";
			java.lang.Class jdbcclazz_tOracleConnection_1 = java.lang.Class.forName(driverClass_tOracleConnection_1);
			globalMap.put("driverClass_tOracleConnection_1", driverClass_tOracleConnection_1);
		
			java.util.Properties atnParamsPrope_tOracleConnection_1 = new java.util.Properties();
			    atnParamsPrope_tOracleConnection_1.put("user",dbUser_tOracleConnection_1);
			    atnParamsPrope_tOracleConnection_1.put("password",dbPwd_tOracleConnection_1);
			if(context.db_origen_AdditionalParams != null && !"\"\"".equals(context.db_origen_AdditionalParams) && !"".equals(context.db_origen_AdditionalParams)){
                atnParamsPrope_tOracleConnection_1.load(new java.io.ByteArrayInputStream(context.db_origen_AdditionalParams.replace("&", "\n").getBytes()));
            }
         
			conn_tOracleConnection_1 = java.sql.DriverManager.getConnection(url_tOracleConnection_1, atnParamsPrope_tOracleConnection_1);

		globalMap.put("conn_tOracleConnection_1", conn_tOracleConnection_1);
	if (null != conn_tOracleConnection_1) {
		
			conn_tOracleConnection_1.setAutoCommit(false);
	}
        globalMap.put("host_" + "tOracleConnection_1",context.db_origen_Server);
        globalMap.put("port_" + "tOracleConnection_1",context.db_origen_Port);
        globalMap.put("dbname_" + "tOracleConnection_1",context.db_origen_ServiceName);

	globalMap.put("dbschema_" + "tOracleConnection_1", context.db_origen_Schema);
	globalMap.put("username_" + "tOracleConnection_1",context.db_origen_Login);
	globalMap.put("password_" + "tOracleConnection_1",dbPwd_tOracleConnection_1);

 



/**
 * [tOracleConnection_1 begin ] stop
 */
	
	/**
	 * [tOracleConnection_1 main ] start
	 */

	

	
	
	currentComponent="tOracleConnection_1";
	
	

 


	tos_count_tOracleConnection_1++;

/**
 * [tOracleConnection_1 main ] stop
 */
	
	/**
	 * [tOracleConnection_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleConnection_1";
	
	

 



/**
 * [tOracleConnection_1 process_data_begin ] stop
 */
	
	/**
	 * [tOracleConnection_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleConnection_1";
	
	

 



/**
 * [tOracleConnection_1 process_data_end ] stop
 */
	
	/**
	 * [tOracleConnection_1 end ] start
	 */

	

	
	
	currentComponent="tOracleConnection_1";
	
	

 

ok_Hash.put("tOracleConnection_1", true);
end_Hash.put("tOracleConnection_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk15", 0, "ok");
				}
				tFileInputXML_2Process(globalMap);



/**
 * [tOracleConnection_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleConnection_1 finally ] start
	 */

	

	
	
	currentComponent="tOracleConnection_1";
	
	

 



/**
 * [tOracleConnection_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleConnection_1_SUBPROCESS_STATE", 1);
	}
	


public static class row20Struct implements routines.system.IPersistableRow<row20Struct> {
    final static byte[] commonByteArrayLock_VAC_CONSOLIDADOS_VAC_SIS151 = new byte[0];
    static byte[] commonByteArray_VAC_CONSOLIDADOS_VAC_SIS151 = new byte[0];

	
			    public String Host;

				public String getHost () {
					return this.Host;
				}

				public Boolean HostIsNullable(){
				    return true;
				}
				public Boolean HostIsKey(){
				    return false;
				}
				public Integer HostLength(){
				    return 15;
				}
				public Integer HostPrecision(){
				    return 0;
				}
				public String HostDefault(){
				
					return null;
				
				}
				public String HostComment(){
				
				    return "";
				
				}
				public String HostPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String HostOriginalDbColumnName(){
				
					return "Host";
				
				}

				
			    public String Port;

				public String getPort () {
					return this.Port;
				}

				public Boolean PortIsNullable(){
				    return true;
				}
				public Boolean PortIsKey(){
				    return false;
				}
				public Integer PortLength(){
				    return 4;
				}
				public Integer PortPrecision(){
				    return 0;
				}
				public String PortDefault(){
				
					return null;
				
				}
				public String PortComment(){
				
				    return "";
				
				}
				public String PortPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String PortOriginalDbColumnName(){
				
					return "Port";
				
				}

				
			    public String Sid;

				public String getSid () {
					return this.Sid;
				}

				public Boolean SidIsNullable(){
				    return true;
				}
				public Boolean SidIsKey(){
				    return false;
				}
				public Integer SidLength(){
				    return 4;
				}
				public Integer SidPrecision(){
				    return 0;
				}
				public String SidDefault(){
				
					return null;
				
				}
				public String SidComment(){
				
				    return "";
				
				}
				public String SidPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String SidOriginalDbColumnName(){
				
					return "Sid";
				
				}

				
			    public String ServiceName;

				public String getServiceName () {
					return this.ServiceName;
				}

				public Boolean ServiceNameIsNullable(){
				    return true;
				}
				public Boolean ServiceNameIsKey(){
				    return false;
				}
				public Integer ServiceNameLength(){
				    return 6;
				}
				public Integer ServiceNamePrecision(){
				    return 0;
				}
				public String ServiceNameDefault(){
				
					return null;
				
				}
				public String ServiceNameComment(){
				
				    return "";
				
				}
				public String ServiceNamePattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String ServiceNameOriginalDbColumnName(){
				
					return "ServiceName";
				
				}

				
			    public String Schema;

				public String getSchema () {
					return this.Schema;
				}

				public Boolean SchemaIsNullable(){
				    return true;
				}
				public Boolean SchemaIsKey(){
				    return false;
				}
				public Integer SchemaLength(){
				    return 12;
				}
				public Integer SchemaPrecision(){
				    return 0;
				}
				public String SchemaDefault(){
				
					return null;
				
				}
				public String SchemaComment(){
				
				    return "";
				
				}
				public String SchemaPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String SchemaOriginalDbColumnName(){
				
					return "Schema";
				
				}

				
			    public String User;

				public String getUser () {
					return this.User;
				}

				public Boolean UserIsNullable(){
				    return true;
				}
				public Boolean UserIsKey(){
				    return false;
				}
				public Integer UserLength(){
				    return 12;
				}
				public Integer UserPrecision(){
				    return 0;
				}
				public String UserDefault(){
				
					return null;
				
				}
				public String UserComment(){
				
				    return "";
				
				}
				public String UserPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String UserOriginalDbColumnName(){
				
					return "User";
				
				}

				
			    public String Password;

				public String getPassword () {
					return this.Password;
				}

				public Boolean PasswordIsNullable(){
				    return true;
				}
				public Boolean PasswordIsKey(){
				    return false;
				}
				public Integer PasswordLength(){
				    return 11;
				}
				public Integer PasswordPrecision(){
				    return 0;
				}
				public String PasswordDefault(){
				
					return null;
				
				}
				public String PasswordComment(){
				
				    return "";
				
				}
				public String PasswordPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String PasswordOriginalDbColumnName(){
				
					return "Password";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_VAC_CONSOLIDADOS_VAC_SIS151.length) {
				if(length < 1024 && commonByteArray_VAC_CONSOLIDADOS_VAC_SIS151.length == 0) {
   					commonByteArray_VAC_CONSOLIDADOS_VAC_SIS151 = new byte[1024];
				} else {
   					commonByteArray_VAC_CONSOLIDADOS_VAC_SIS151 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_VAC_CONSOLIDADOS_VAC_SIS151, 0, length);
			strReturn = new String(commonByteArray_VAC_CONSOLIDADOS_VAC_SIS151, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_VAC_CONSOLIDADOS_VAC_SIS151.length) {
				if(length < 1024 && commonByteArray_VAC_CONSOLIDADOS_VAC_SIS151.length == 0) {
   					commonByteArray_VAC_CONSOLIDADOS_VAC_SIS151 = new byte[1024];
				} else {
   					commonByteArray_VAC_CONSOLIDADOS_VAC_SIS151 = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_VAC_CONSOLIDADOS_VAC_SIS151, 0, length);
			strReturn = new String(commonByteArray_VAC_CONSOLIDADOS_VAC_SIS151, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_VAC_CONSOLIDADOS_VAC_SIS151) {

        	try {

        		int length = 0;
		
					this.Host = readString(dis);
					
					this.Port = readString(dis);
					
					this.Sid = readString(dis);
					
					this.ServiceName = readString(dis);
					
					this.Schema = readString(dis);
					
					this.User = readString(dis);
					
					this.Password = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_VAC_CONSOLIDADOS_VAC_SIS151) {

        	try {

        		int length = 0;
		
					this.Host = readString(dis);
					
					this.Port = readString(dis);
					
					this.Sid = readString(dis);
					
					this.ServiceName = readString(dis);
					
					this.Schema = readString(dis);
					
					this.User = readString(dis);
					
					this.Password = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.Host,dos);
					
					// String
				
						writeString(this.Port,dos);
					
					// String
				
						writeString(this.Sid,dos);
					
					// String
				
						writeString(this.ServiceName,dos);
					
					// String
				
						writeString(this.Schema,dos);
					
					// String
				
						writeString(this.User,dos);
					
					// String
				
						writeString(this.Password,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.Host,dos);
					
					// String
				
						writeString(this.Port,dos);
					
					// String
				
						writeString(this.Sid,dos);
					
					// String
				
						writeString(this.ServiceName,dos);
					
					// String
				
						writeString(this.Schema,dos);
					
					// String
				
						writeString(this.User,dos);
					
					// String
				
						writeString(this.Password,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Host="+Host);
		sb.append(",Port="+Port);
		sb.append(",Sid="+Sid);
		sb.append(",ServiceName="+ServiceName);
		sb.append(",Schema="+Schema);
		sb.append(",User="+User);
		sb.append(",Password="+Password);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row20Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tFileInputXML_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileInputXML_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row20Struct row20 = new row20Struct();




	
	/**
	 * [tJavaRow_6 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaRow_6", false);
		start_Hash.put("tJavaRow_6", System.currentTimeMillis());
		
	
	currentComponent="tJavaRow_6";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row20");
					}
				
		int tos_count_tJavaRow_6 = 0;
		

int nb_line_tJavaRow_6 = 0;

 



/**
 * [tJavaRow_6 begin ] stop
 */



	
	/**
	 * [tFileInputXML_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputXML_2", false);
		start_Hash.put("tFileInputXML_2", System.currentTimeMillis());
		
	
	currentComponent="tFileInputXML_2";
	
	
		int tos_count_tFileInputXML_2 = 0;
		

	

int nb_line_tFileInputXML_2 = 0;

	String os_tFileInputXML_2 = System.getProperty("os.name").toLowerCase();
	boolean isWindows_tFileInputXML_2=false;
	if(os_tFileInputXML_2.indexOf("windows") > -1 || os_tFileInputXML_2.indexOf("nt") > -1){
		isWindows_tFileInputXML_2=true;
	}
class XML_API_tFileInputXML_2{
	public boolean isDefNull(String[] node) throws javax.xml.transform.TransformerException {
        if(node[0] != null && node[1]!=null && ("true").equals(node[1])){
        	return true;
        }
        return false;
    }

    public boolean isMissing(String[] node) throws javax.xml.transform.TransformerException {
        return node[0] == null ? true : false;
    }

    public boolean isEmpty(String[] node) throws javax.xml.transform.TransformerException {
        if(node[0]!=null ){
        	return node[0].length() == 0;
        }
        return false;
    }
}
XML_API_tFileInputXML_2 xml_api_tFileInputXML_2 = new XML_API_tFileInputXML_2();

String[] queryPaths_tFileInputXML_2 = new String[]{	
	"Host"		
	,"Host"+"/@xsi:nil"	
	,"Port"		
	,"Port"+"/@xsi:nil"	
	,"Sid"		
	,"Sid"+"/@xsi:nil"	
	,"ServiceName"		
	,"ServiceName"+"/@xsi:nil"	
	,"Schema"		
	,"Schema"+"/@xsi:nil"	
	,"User"		
	,"User"+"/@xsi:nil"	
	,"Password"		
	,"Password"+"/@xsi:nil"
};

boolean[] asXMLs_tFileInputXML_2 = new boolean[]{	
	false		
	,false	
	,false		
	,false	
	,false		
	,false	
	,false		
	,false	
	,false		
	,false	
	,false		
	,false	
	,false		
	,false
};

String str_tFileInputXML_2 = "";
String[] node_tFileInputXML_2 = null;
org.talend.xml.sax.SAXLooper looper_tFileInputXML_2 = new org.talend.xml.sax.SAXLooper("/connectionStrings",queryPaths_tFileInputXML_2,asXMLs_tFileInputXML_2);
looper_tFileInputXML_2.setEncoding("UTF-8");
Object filename_tFileInputXML_2 = null;
try {
	filename_tFileInputXML_2 = context.BODEGA;
} catch(java.lang.Exception e) {
globalMap.put("tFileInputXML_2_ERROR_MESSAGE",e.getMessage());
	
	System.err.println(e.getMessage());
	
}
if(filename_tFileInputXML_2 != null && filename_tFileInputXML_2 instanceof String && filename_tFileInputXML_2.toString().startsWith("//")){
	if (!isWindows_tFileInputXML_2){
		filename_tFileInputXML_2 = filename_tFileInputXML_2.toString().replaceFirst("//","/");
	}
}
if(filename_tFileInputXML_2 instanceof java.io.InputStream){
	looper_tFileInputXML_2.parse((java.io.InputStream)filename_tFileInputXML_2);
}else{
	looper_tFileInputXML_2.parse(String.valueOf(filename_tFileInputXML_2));
}
java.util.Iterator<java.util.Map<String, String>> it_tFileInputXML_2  = looper_tFileInputXML_2.iterator();
while (it_tFileInputXML_2.hasNext()) {
	java.util.Map<String, String> row_tFileInputXML_2 = it_tFileInputXML_2.next();
	if (nb_line_tFileInputXML_2>=50) {
	
			looper_tFileInputXML_2.stopRead();
	
		break;
	}
		nb_line_tFileInputXML_2++;
		
	row20 = null;			
	boolean whetherReject_tFileInputXML_2 = false;
	row20 = new row20Struct();
	try{
	str_tFileInputXML_2 = row_tFileInputXML_2.get("Host");
	node_tFileInputXML_2 = new String[]{str_tFileInputXML_2,row_tFileInputXML_2.get("Host"+"/@xsi:nil")};
									if(xml_api_tFileInputXML_2.isDefNull(node_tFileInputXML_2)){
											row20.Host =null;
									}else if(xml_api_tFileInputXML_2.isEmpty(node_tFileInputXML_2)){
										row20.Host ="";
									}else if(xml_api_tFileInputXML_2.isMissing(node_tFileInputXML_2 )){ 
										row20.Host =null;
									}else{
		row20.Host = str_tFileInputXML_2;
	}
	str_tFileInputXML_2 = row_tFileInputXML_2.get("Port");
	node_tFileInputXML_2 = new String[]{str_tFileInputXML_2,row_tFileInputXML_2.get("Port"+"/@xsi:nil")};
									if(xml_api_tFileInputXML_2.isDefNull(node_tFileInputXML_2)){
											row20.Port =null;
									}else if(xml_api_tFileInputXML_2.isEmpty(node_tFileInputXML_2)){
										row20.Port ="";
									}else if(xml_api_tFileInputXML_2.isMissing(node_tFileInputXML_2 )){ 
										row20.Port =null;
									}else{
		row20.Port = str_tFileInputXML_2;
	}
	str_tFileInputXML_2 = row_tFileInputXML_2.get("Sid");
	node_tFileInputXML_2 = new String[]{str_tFileInputXML_2,row_tFileInputXML_2.get("Sid"+"/@xsi:nil")};
									if(xml_api_tFileInputXML_2.isDefNull(node_tFileInputXML_2)){
											row20.Sid =null;
									}else if(xml_api_tFileInputXML_2.isEmpty(node_tFileInputXML_2)){
										row20.Sid ="";
									}else if(xml_api_tFileInputXML_2.isMissing(node_tFileInputXML_2 )){ 
										row20.Sid =null;
									}else{
		row20.Sid = str_tFileInputXML_2;
	}
	str_tFileInputXML_2 = row_tFileInputXML_2.get("ServiceName");
	node_tFileInputXML_2 = new String[]{str_tFileInputXML_2,row_tFileInputXML_2.get("ServiceName"+"/@xsi:nil")};
									if(xml_api_tFileInputXML_2.isDefNull(node_tFileInputXML_2)){
											row20.ServiceName =null;
									}else if(xml_api_tFileInputXML_2.isEmpty(node_tFileInputXML_2)){
										row20.ServiceName ="";
									}else if(xml_api_tFileInputXML_2.isMissing(node_tFileInputXML_2 )){ 
										row20.ServiceName =null;
									}else{
		row20.ServiceName = str_tFileInputXML_2;
	}
	str_tFileInputXML_2 = row_tFileInputXML_2.get("Schema");
	node_tFileInputXML_2 = new String[]{str_tFileInputXML_2,row_tFileInputXML_2.get("Schema"+"/@xsi:nil")};
									if(xml_api_tFileInputXML_2.isDefNull(node_tFileInputXML_2)){
											row20.Schema =null;
									}else if(xml_api_tFileInputXML_2.isEmpty(node_tFileInputXML_2)){
										row20.Schema ="";
									}else if(xml_api_tFileInputXML_2.isMissing(node_tFileInputXML_2 )){ 
										row20.Schema =null;
									}else{
		row20.Schema = str_tFileInputXML_2;
	}
	str_tFileInputXML_2 = row_tFileInputXML_2.get("User");
	node_tFileInputXML_2 = new String[]{str_tFileInputXML_2,row_tFileInputXML_2.get("User"+"/@xsi:nil")};
									if(xml_api_tFileInputXML_2.isDefNull(node_tFileInputXML_2)){
											row20.User =null;
									}else if(xml_api_tFileInputXML_2.isEmpty(node_tFileInputXML_2)){
										row20.User ="";
									}else if(xml_api_tFileInputXML_2.isMissing(node_tFileInputXML_2 )){ 
										row20.User =null;
									}else{
		row20.User = str_tFileInputXML_2;
	}
	str_tFileInputXML_2 = row_tFileInputXML_2.get("Password");
	node_tFileInputXML_2 = new String[]{str_tFileInputXML_2,row_tFileInputXML_2.get("Password"+"/@xsi:nil")};
									if(xml_api_tFileInputXML_2.isDefNull(node_tFileInputXML_2)){
											row20.Password =null;
									}else if(xml_api_tFileInputXML_2.isEmpty(node_tFileInputXML_2)){
										row20.Password ="";
									}else if(xml_api_tFileInputXML_2.isMissing(node_tFileInputXML_2 )){ 
										row20.Password =null;
									}else{
		row20.Password = str_tFileInputXML_2;
	} 
			
    } catch (java.lang.Exception e) {
globalMap.put("tFileInputXML_2_ERROR_MESSAGE",e.getMessage());
        whetherReject_tFileInputXML_2 = true;
                System.err.println(e.getMessage());
                row20 = null;
    }
			
			

 



/**
 * [tFileInputXML_2 begin ] stop
 */
	
	/**
	 * [tFileInputXML_2 main ] start
	 */

	

	
	
	currentComponent="tFileInputXML_2";
	
	

 


	tos_count_tFileInputXML_2++;

/**
 * [tFileInputXML_2 main ] stop
 */
	
	/**
	 * [tFileInputXML_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileInputXML_2";
	
	

 



/**
 * [tFileInputXML_2 process_data_begin ] stop
 */
// Start of branch "row20"
if(row20 != null) { 



	
	/**
	 * [tJavaRow_6 main ] start
	 */

	

	
	
	currentComponent="tJavaRow_6";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row20"
						
						);
					}
					

    //Guarda en variables de contexto los parametros para la conexión a la bodega 
context.db_destino_Server = row20.Host;
context.db_destino_Port = row20.Port;
context.db_destino_ServiceName = row20.ServiceName;
context.db_destino_Schema = row20.Schema;
context.db_destino_Login = row20.User;
context.db_destino_Password = row20.Password;

    nb_line_tJavaRow_6++;   

 


	tos_count_tJavaRow_6++;

/**
 * [tJavaRow_6 main ] stop
 */
	
	/**
	 * [tJavaRow_6 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJavaRow_6";
	
	

 



/**
 * [tJavaRow_6 process_data_begin ] stop
 */
	
	/**
	 * [tJavaRow_6 process_data_end ] start
	 */

	

	
	
	currentComponent="tJavaRow_6";
	
	

 



/**
 * [tJavaRow_6 process_data_end ] stop
 */

} // End of branch "row20"




	
	/**
	 * [tFileInputXML_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileInputXML_2";
	
	

 



/**
 * [tFileInputXML_2 process_data_end ] stop
 */
	
	/**
	 * [tFileInputXML_2 end ] start
	 */

	

	
	
	currentComponent="tFileInputXML_2";
	
	


	}
	try {
		looper_tFileInputXML_2.handleTaskResponse();
	} catch(java.lang.Exception e) {
globalMap.put("tFileInputXML_2_ERROR_MESSAGE",e.getMessage());
		if(!(e.getCause() instanceof org.talend.xml.sax.exception.EnoughDataException))
	
		
		System.err.println(e.getMessage());	
	
	}
	globalMap.put("tFileInputXML_2_NB_LINE",nb_line_tFileInputXML_2);

	

 

ok_Hash.put("tFileInputXML_2", true);
end_Hash.put("tFileInputXML_2", System.currentTimeMillis());




/**
 * [tFileInputXML_2 end ] stop
 */

	
	/**
	 * [tJavaRow_6 end ] start
	 */

	

	
	
	currentComponent="tJavaRow_6";
	
	

globalMap.put("tJavaRow_6_NB_LINE",nb_line_tJavaRow_6);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row20");
			  	}
			  	
 

ok_Hash.put("tJavaRow_6", true);
end_Hash.put("tJavaRow_6", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk16", 0, "ok");
				}
				tOracleConnection_3Process(globalMap);



/**
 * [tJavaRow_6 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileInputXML_2 finally ] start
	 */

	

	
	
	currentComponent="tFileInputXML_2";
	
	

 



/**
 * [tFileInputXML_2 finally ] stop
 */

	
	/**
	 * [tJavaRow_6 finally ] start
	 */

	

	
	
	currentComponent="tJavaRow_6";
	
	

 



/**
 * [tJavaRow_6 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileInputXML_2_SUBPROCESS_STATE", 1);
	}
	


public void tOracleConnection_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleConnection_3_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tOracleConnection_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleConnection_3", false);
		start_Hash.put("tOracleConnection_3", System.currentTimeMillis());
		
	
	currentComponent="tOracleConnection_3";
	
	
		int tos_count_tOracleConnection_3 = 0;
		
	

	
        String url_tOracleConnection_3 = "jdbc:oracle:thin:@(description=(address=(protocol=tcp)(host=" + context.db_destino_Server + ")(port=" + context.db_destino_Port + "))(connect_data=(service_name=" + context.db_destino_ServiceName + ")))";
    	globalMap.put("connectionType_" + "tOracleConnection_3", "ORACLE_SERVICE_NAME");
	String dbUser_tOracleConnection_3 = context.db_destino_Login;
	
	
		
	final String decryptedPassword_tOracleConnection_3 = context.db_destino_Password; 
		String dbPwd_tOracleConnection_3 = decryptedPassword_tOracleConnection_3;
	
	
	java.sql.Connection conn_tOracleConnection_3 = null;
	
		
			String driverClass_tOracleConnection_3 = "oracle.jdbc.OracleDriver";
			java.lang.Class jdbcclazz_tOracleConnection_3 = java.lang.Class.forName(driverClass_tOracleConnection_3);
			globalMap.put("driverClass_tOracleConnection_3", driverClass_tOracleConnection_3);
		
			java.util.Properties atnParamsPrope_tOracleConnection_3 = new java.util.Properties();
			    atnParamsPrope_tOracleConnection_3.put("user",dbUser_tOracleConnection_3);
			    atnParamsPrope_tOracleConnection_3.put("password",dbPwd_tOracleConnection_3);
			if(context.db_destino_AdditionalParams != null && !"\"\"".equals(context.db_destino_AdditionalParams) && !"".equals(context.db_destino_AdditionalParams)){
                atnParamsPrope_tOracleConnection_3.load(new java.io.ByteArrayInputStream(context.db_destino_AdditionalParams.replace("&", "\n").getBytes()));
            }
         
			conn_tOracleConnection_3 = java.sql.DriverManager.getConnection(url_tOracleConnection_3, atnParamsPrope_tOracleConnection_3);

		globalMap.put("conn_tOracleConnection_3", conn_tOracleConnection_3);
	if (null != conn_tOracleConnection_3) {
		
			conn_tOracleConnection_3.setAutoCommit(false);
	}
        globalMap.put("host_" + "tOracleConnection_3",context.db_destino_Server);
        globalMap.put("port_" + "tOracleConnection_3",context.db_destino_Port);
        globalMap.put("dbname_" + "tOracleConnection_3",context.db_destino_ServiceName);

	globalMap.put("dbschema_" + "tOracleConnection_3", context.db_destino_Schema);
	globalMap.put("username_" + "tOracleConnection_3",context.db_destino_Login);
	globalMap.put("password_" + "tOracleConnection_3",dbPwd_tOracleConnection_3);

 



/**
 * [tOracleConnection_3 begin ] stop
 */
	
	/**
	 * [tOracleConnection_3 main ] start
	 */

	

	
	
	currentComponent="tOracleConnection_3";
	
	

 


	tos_count_tOracleConnection_3++;

/**
 * [tOracleConnection_3 main ] stop
 */
	
	/**
	 * [tOracleConnection_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleConnection_3";
	
	

 



/**
 * [tOracleConnection_3 process_data_begin ] stop
 */
	
	/**
	 * [tOracleConnection_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleConnection_3";
	
	

 



/**
 * [tOracleConnection_3 process_data_end ] stop
 */
	
	/**
	 * [tOracleConnection_3 end ] start
	 */

	

	
	
	currentComponent="tOracleConnection_3";
	
	

 

ok_Hash.put("tOracleConnection_3", true);
end_Hash.put("tOracleConnection_3", System.currentTimeMillis());




/**
 * [tOracleConnection_3 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleConnection_3 finally ] start
	 */

	

	
	
	currentComponent="tOracleConnection_3";
	
	

 



/**
 * [tOracleConnection_3 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleConnection_3_SUBPROCESS_STATE", 1);
	}
	


public void tJava_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tJava_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_1", false);
		start_Hash.put("tJava_1", System.currentTimeMillis());
		
	
	currentComponent="tJava_1";
	
	
		int tos_count_tJava_1 = 0;
		


/* para pruebas */
// context.MODULO = "VAC2";
// context.SIGLA = "SIS151";
// context.PERIODO = "2019-08";
// context.FUERZA_ID
// context.FUERZA_NOMBRE
// context.UORG_ID = "200";
// context.UORG_NOMBRE
// context.DPTO_COD
// context.DPTO_NOMBRE
// context.MCPIO_COD
// context.MCPIO_NOMBRE
// context.TESQUEMA = "PAI";

System.out.println("- Información del consolidado: ");
System.out.println("-- SARCHIVO_ID: " + context.SARCHIVO_ID);
System.out.println("-- MODULO: " + context.MODULO);
System.out.println("-- SIGLA: " + context.SIGLA);

System.out.println("- Filtros del reporte: ");
System.out.println("-- PERIODO: " + context.PERIODO);
System.out.println("-- FUERZA_ID: " + context.FUERZA_ID);
System.out.println("-- FUERZA_NOMBRE: " + context.FUERZA_NOMBRE);
System.out.println("-- UORG_ID: " + context.UORG_ID);
System.out.println("-- UORG_NOMBRE: " + context.UORG_NOMBRE);
System.out.println("-- DPTO_COD: " + context.DPTO_COD);
System.out.println("-- DPTO_NOMBRE: " + context.DPTO_NOMBRE);
System.out.println("-- MCPIO_COD: " + context.MCPIO_COD);
System.out.println("-- MCPIO_NOMBRE: " + context.MCPIO_NOMBRE);
System.out.println("-- TESQUEMA: " + context.TESQUEMA);

// Concatena la ruta donde se guardara el consolidado y la guarda en la variable de contexto carpeta_salida
context.CARPETA_SALIDA = context.STORAGE + "/" + context.MODULO +"/" + context.SIGLA;

// Crea la carpeta donde se guardara el consolidado
new File(context.CARPETA_SALIDA).mkdirs();

String fechaSolicitud = TalendDate.getDate("DD-MM-YYYY");

context.NOMBRE_ARCHIVO = context.SARCHIVO_ID +"-"+"SIS151-" + fechaSolicitud + ".xlsx";
context.NOMBRE_ZIP = GenerarUUID.createUUID() + ".zip";

System.out.println("INICIA PROCESO: initialize");
SISPOI.initialize(context.CARPETA_SALIDA, context.NOMBRE_ARCHIVO, context.TESQUEMA);

// Obtiene el mes y año
String anio = "", mes = "";
System.out.println("-*PERIODO: " + context.PERIODO);
mes  = context.PERIODO.substring(5, 7);
anio = context.PERIODO.substring(0, 4);

System.out.println("INICIA PROCESO: Header_Satic");
SISPOI.Header_Satic(context.DPTO_NOMBRE, context.DPTO_COD, anio, mes);
 



/**
 * [tJava_1 begin ] stop
 */
	
	/**
	 * [tJava_1 main ] start
	 */

	

	
	
	currentComponent="tJava_1";
	
	

 


	tos_count_tJava_1++;

/**
 * [tJava_1 main ] stop
 */
	
	/**
	 * [tJava_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_1";
	
	

 



/**
 * [tJava_1 process_data_begin ] stop
 */
	
	/**
	 * [tJava_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_1";
	
	

 



/**
 * [tJava_1 process_data_end ] stop
 */
	
	/**
	 * [tJava_1 end ] start
	 */

	

	
	
	currentComponent="tJava_1";
	
	

 

ok_Hash.put("tJava_1", true);
end_Hash.put("tJava_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk5", 0, "ok");
				}
				tOracleInput_3Process(globalMap);



/**
 * [tJava_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_1 finally ] start
	 */

	

	
	
	currentComponent="tJava_1";
	
	

 



/**
 * [tJava_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_1_SUBPROCESS_STATE", 1);
	}
	


public static class row14Struct implements routines.system.IPersistableRow<row14Struct> {
    final static byte[] commonByteArrayLock_VAC_CONSOLIDADOS_VAC_SIS151 = new byte[0];
    static byte[] commonByteArray_VAC_CONSOLIDADOS_VAC_SIS151 = new byte[0];

	
			    public String NIVEL1;

				public String getNIVEL1 () {
					return this.NIVEL1;
				}

				public Boolean NIVEL1IsNullable(){
				    return true;
				}
				public Boolean NIVEL1IsKey(){
				    return false;
				}
				public Integer NIVEL1Length(){
				    return null;
				}
				public Integer NIVEL1Precision(){
				    return null;
				}
				public String NIVEL1Default(){
				
					return null;
				
				}
				public String NIVEL1Comment(){
				
				    return "";
				
				}
				public String NIVEL1Pattern(){
				
					return "";
				
				}
				public String NIVEL1OriginalDbColumnName(){
				
					return "NIVEL1";
				
				}

				
			    public String COLOR;

				public String getCOLOR () {
					return this.COLOR;
				}

				public Boolean COLORIsNullable(){
				    return true;
				}
				public Boolean COLORIsKey(){
				    return false;
				}
				public Integer COLORLength(){
				    return null;
				}
				public Integer COLORPrecision(){
				    return null;
				}
				public String COLORDefault(){
				
					return null;
				
				}
				public String COLORComment(){
				
				    return "";
				
				}
				public String COLORPattern(){
				
					return "";
				
				}
				public String COLOROriginalDbColumnName(){
				
					return "COLOR";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_VAC_CONSOLIDADOS_VAC_SIS151.length) {
				if(length < 1024 && commonByteArray_VAC_CONSOLIDADOS_VAC_SIS151.length == 0) {
   					commonByteArray_VAC_CONSOLIDADOS_VAC_SIS151 = new byte[1024];
				} else {
   					commonByteArray_VAC_CONSOLIDADOS_VAC_SIS151 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_VAC_CONSOLIDADOS_VAC_SIS151, 0, length);
			strReturn = new String(commonByteArray_VAC_CONSOLIDADOS_VAC_SIS151, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_VAC_CONSOLIDADOS_VAC_SIS151.length) {
				if(length < 1024 && commonByteArray_VAC_CONSOLIDADOS_VAC_SIS151.length == 0) {
   					commonByteArray_VAC_CONSOLIDADOS_VAC_SIS151 = new byte[1024];
				} else {
   					commonByteArray_VAC_CONSOLIDADOS_VAC_SIS151 = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_VAC_CONSOLIDADOS_VAC_SIS151, 0, length);
			strReturn = new String(commonByteArray_VAC_CONSOLIDADOS_VAC_SIS151, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_VAC_CONSOLIDADOS_VAC_SIS151) {

        	try {

        		int length = 0;
		
					this.NIVEL1 = readString(dis);
					
					this.COLOR = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_VAC_CONSOLIDADOS_VAC_SIS151) {

        	try {

        		int length = 0;
		
					this.NIVEL1 = readString(dis);
					
					this.COLOR = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.NIVEL1,dos);
					
					// String
				
						writeString(this.COLOR,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.NIVEL1,dos);
					
					// String
				
						writeString(this.COLOR,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("NIVEL1="+NIVEL1);
		sb.append(",COLOR="+COLOR);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row14Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class OnRowsEndStructtDenormalize_1 implements routines.system.IPersistableRow<OnRowsEndStructtDenormalize_1> {
    final static byte[] commonByteArrayLock_VAC_CONSOLIDADOS_VAC_SIS151 = new byte[0];
    static byte[] commonByteArray_VAC_CONSOLIDADOS_VAC_SIS151 = new byte[0];

	
			    public String NIVEL1;

				public String getNIVEL1 () {
					return this.NIVEL1;
				}

				public Boolean NIVEL1IsNullable(){
				    return true;
				}
				public Boolean NIVEL1IsKey(){
				    return false;
				}
				public Integer NIVEL1Length(){
				    return null;
				}
				public Integer NIVEL1Precision(){
				    return null;
				}
				public String NIVEL1Default(){
				
					return null;
				
				}
				public String NIVEL1Comment(){
				
				    return "";
				
				}
				public String NIVEL1Pattern(){
				
					return "";
				
				}
				public String NIVEL1OriginalDbColumnName(){
				
					return "NIVEL1";
				
				}

				
			    public String COLOR;

				public String getCOLOR () {
					return this.COLOR;
				}

				public Boolean COLORIsNullable(){
				    return true;
				}
				public Boolean COLORIsKey(){
				    return false;
				}
				public Integer COLORLength(){
				    return null;
				}
				public Integer COLORPrecision(){
				    return null;
				}
				public String COLORDefault(){
				
					return null;
				
				}
				public String COLORComment(){
				
				    return "";
				
				}
				public String COLORPattern(){
				
					return "";
				
				}
				public String COLOROriginalDbColumnName(){
				
					return "COLOR";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_VAC_CONSOLIDADOS_VAC_SIS151.length) {
				if(length < 1024 && commonByteArray_VAC_CONSOLIDADOS_VAC_SIS151.length == 0) {
   					commonByteArray_VAC_CONSOLIDADOS_VAC_SIS151 = new byte[1024];
				} else {
   					commonByteArray_VAC_CONSOLIDADOS_VAC_SIS151 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_VAC_CONSOLIDADOS_VAC_SIS151, 0, length);
			strReturn = new String(commonByteArray_VAC_CONSOLIDADOS_VAC_SIS151, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_VAC_CONSOLIDADOS_VAC_SIS151.length) {
				if(length < 1024 && commonByteArray_VAC_CONSOLIDADOS_VAC_SIS151.length == 0) {
   					commonByteArray_VAC_CONSOLIDADOS_VAC_SIS151 = new byte[1024];
				} else {
   					commonByteArray_VAC_CONSOLIDADOS_VAC_SIS151 = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_VAC_CONSOLIDADOS_VAC_SIS151, 0, length);
			strReturn = new String(commonByteArray_VAC_CONSOLIDADOS_VAC_SIS151, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_VAC_CONSOLIDADOS_VAC_SIS151) {

        	try {

        		int length = 0;
		
					this.NIVEL1 = readString(dis);
					
					this.COLOR = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_VAC_CONSOLIDADOS_VAC_SIS151) {

        	try {

        		int length = 0;
		
					this.NIVEL1 = readString(dis);
					
					this.COLOR = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.NIVEL1,dos);
					
					// String
				
						writeString(this.COLOR,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.NIVEL1,dos);
					
					// String
				
						writeString(this.COLOR,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("NIVEL1="+NIVEL1);
		sb.append(",COLOR="+COLOR);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(OnRowsEndStructtDenormalize_1 other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row3Struct implements routines.system.IPersistableRow<row3Struct> {
    final static byte[] commonByteArrayLock_VAC_CONSOLIDADOS_VAC_SIS151 = new byte[0];
    static byte[] commonByteArray_VAC_CONSOLIDADOS_VAC_SIS151 = new byte[0];

	
			    public String NIVEL1;

				public String getNIVEL1 () {
					return this.NIVEL1;
				}

				public Boolean NIVEL1IsNullable(){
				    return true;
				}
				public Boolean NIVEL1IsKey(){
				    return false;
				}
				public Integer NIVEL1Length(){
				    return null;
				}
				public Integer NIVEL1Precision(){
				    return null;
				}
				public String NIVEL1Default(){
				
					return null;
				
				}
				public String NIVEL1Comment(){
				
				    return "";
				
				}
				public String NIVEL1Pattern(){
				
					return "";
				
				}
				public String NIVEL1OriginalDbColumnName(){
				
					return "NIVEL1";
				
				}

				
			    public String COLOR;

				public String getCOLOR () {
					return this.COLOR;
				}

				public Boolean COLORIsNullable(){
				    return true;
				}
				public Boolean COLORIsKey(){
				    return false;
				}
				public Integer COLORLength(){
				    return null;
				}
				public Integer COLORPrecision(){
				    return null;
				}
				public String COLORDefault(){
				
					return null;
				
				}
				public String COLORComment(){
				
				    return "";
				
				}
				public String COLORPattern(){
				
					return "";
				
				}
				public String COLOROriginalDbColumnName(){
				
					return "COLOR";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_VAC_CONSOLIDADOS_VAC_SIS151.length) {
				if(length < 1024 && commonByteArray_VAC_CONSOLIDADOS_VAC_SIS151.length == 0) {
   					commonByteArray_VAC_CONSOLIDADOS_VAC_SIS151 = new byte[1024];
				} else {
   					commonByteArray_VAC_CONSOLIDADOS_VAC_SIS151 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_VAC_CONSOLIDADOS_VAC_SIS151, 0, length);
			strReturn = new String(commonByteArray_VAC_CONSOLIDADOS_VAC_SIS151, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_VAC_CONSOLIDADOS_VAC_SIS151.length) {
				if(length < 1024 && commonByteArray_VAC_CONSOLIDADOS_VAC_SIS151.length == 0) {
   					commonByteArray_VAC_CONSOLIDADOS_VAC_SIS151 = new byte[1024];
				} else {
   					commonByteArray_VAC_CONSOLIDADOS_VAC_SIS151 = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_VAC_CONSOLIDADOS_VAC_SIS151, 0, length);
			strReturn = new String(commonByteArray_VAC_CONSOLIDADOS_VAC_SIS151, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_VAC_CONSOLIDADOS_VAC_SIS151) {

        	try {

        		int length = 0;
		
					this.NIVEL1 = readString(dis);
					
					this.COLOR = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_VAC_CONSOLIDADOS_VAC_SIS151) {

        	try {

        		int length = 0;
		
					this.NIVEL1 = readString(dis);
					
					this.COLOR = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.NIVEL1,dos);
					
					// String
				
						writeString(this.COLOR,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.NIVEL1,dos);
					
					// String
				
						writeString(this.COLOR,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("NIVEL1="+NIVEL1);
		sb.append(",COLOR="+COLOR);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row3Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_3_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

		String currentVirtualComponent = null;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row3Struct row3 = new row3Struct();
row14Struct row14 = new row14Struct();




	
	/**
	 * [tDenormalize_1_DenormalizeOut begin ] start
	 */

	

	
		
		ok_Hash.put("tDenormalize_1_DenormalizeOut", false);
		start_Hash.put("tDenormalize_1_DenormalizeOut", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tDenormalize_1";
	
	currentComponent="tDenormalize_1_DenormalizeOut";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row3");
					}
				
		int tos_count_tDenormalize_1_DenormalizeOut = 0;
		

class DenormalizeStructtDenormalize_1_DenormalizeOut {
StringBuilder NIVEL1 = new StringBuilder();
StringBuilder COLOR = new StringBuilder();
}
DenormalizeStructtDenormalize_1_DenormalizeOut denormalize_result_tDenormalize_1_DenormalizeOut = null;

 



/**
 * [tDenormalize_1_DenormalizeOut begin ] stop
 */



	
	/**
	 * [tOracleInput_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_3", false);
		start_Hash.put("tOracleInput_3", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_3";
	
	
		int tos_count_tOracleInput_3 = 0;
		
	


	
		    int nb_line_tOracleInput_3 = 0;
		    java.sql.Connection conn_tOracleInput_3 = null;
				conn_tOracleInput_3 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_3");
				
                boolean isTimeZoneNull_tOracleInput_3 = false;
				boolean isConnectionWrapped_tOracleInput_3 = !(conn_tOracleInput_3 instanceof oracle.jdbc.OracleConnection) && conn_tOracleInput_3.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tOracleInput_3 = null;
                if (isConnectionWrapped_tOracleInput_3) {
					unwrappedOraConn_tOracleInput_3 = conn_tOracleInput_3.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tOracleInput_3 != null) {
                        isTimeZoneNull_tOracleInput_3 = (unwrappedOraConn_tOracleInput_3.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tOracleInput_3 = (((oracle.jdbc.OracleConnection)conn_tOracleInput_3).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tOracleInput_3) {
					java.sql.Statement stmtGetTZ_tOracleInput_3 = conn_tOracleInput_3.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_3 = stmtGetTZ_tOracleInput_3.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_3 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tOracleInput_3.next()) {
						sessionTimezone_tOracleInput_3 = rsGetTZ_tOracleInput_3.getString(1);
					}
					if (isConnectionWrapped_tOracleInput_3 && unwrappedOraConn_tOracleInput_3 != null) {
                        unwrappedOraConn_tOracleInput_3.setSessionTimeZone(sessionTimezone_tOracleInput_3);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_3).setSessionTimeZone(sessionTimezone_tOracleInput_3);
                    }
				}
			
		    
			java.sql.Statement stmt_tOracleInput_3 = conn_tOracleInput_3.createStatement(java.sql.ResultSet.TYPE_FORWARD_ONLY,
																					java.sql.ResultSet.CONCUR_READ_ONLY);
			
                stmt_tOracleInput_3.setFetchSize(1000);


		    String dbquery_tOracleInput_3 = "\nSELECT NIVEL1, COLOR\nFROM BVAC_NIVEL\nWHERE ((ESTADO = 'Activo' AND\n     FREGISTRO < LAST_DAY(TO_DATE('" + context.PERIODO + "', 'YYYY-MM')) + 1) \nOR  (ESTADO = 'Inactivo' AND\n     TO_CHAR(FINACTIVACION, 'YYYY-MM') = '" + context.PERIODO + "'))\nAND ESQUEMA = '" + context.TESQUEMA  + "'\nORDER BY ORDEN, ORDEN2, ID\n";
		    

		    globalMap.put("tOracleInput_3_QUERY",dbquery_tOracleInput_3);

		    java.sql.ResultSet rs_tOracleInput_3 = null;

		    try {
		    	rs_tOracleInput_3 = stmt_tOracleInput_3.executeQuery(dbquery_tOracleInput_3);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_3 = rs_tOracleInput_3.getMetaData();
		    	int colQtyInRs_tOracleInput_3 = rsmd_tOracleInput_3.getColumnCount();

		    String tmpContent_tOracleInput_3 = null;
		    
		    
		    while (rs_tOracleInput_3.next()) {
		        nb_line_tOracleInput_3++;
		        
							if(colQtyInRs_tOracleInput_3 < 1) {
								row3.NIVEL1 = null;
							} else {
	                         		
        	row3.NIVEL1 = routines.system.JDBCUtil.getString(rs_tOracleInput_3, 1, false);
		                    }
							if(colQtyInRs_tOracleInput_3 < 2) {
								row3.COLOR = null;
							} else {
	                         		
        	row3.COLOR = routines.system.JDBCUtil.getString(rs_tOracleInput_3, 2, false);
		                    }
					




 



/**
 * [tOracleInput_3 begin ] stop
 */
	
	/**
	 * [tOracleInput_3 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_3";
	
	

 


	tos_count_tOracleInput_3++;

/**
 * [tOracleInput_3 main ] stop
 */
	
	/**
	 * [tOracleInput_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_3";
	
	

 



/**
 * [tOracleInput_3 process_data_begin ] stop
 */

	
	/**
	 * [tDenormalize_1_DenormalizeOut main ] start
	 */

	

	
	
		currentVirtualComponent = "tDenormalize_1";
	
	currentComponent="tDenormalize_1_DenormalizeOut";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row3"
						
						);
					}
					

if(denormalize_result_tDenormalize_1_DenormalizeOut == null){
	denormalize_result_tDenormalize_1_DenormalizeOut = new DenormalizeStructtDenormalize_1_DenormalizeOut();		
	denormalize_result_tDenormalize_1_DenormalizeOut.NIVEL1.append(row3.NIVEL1);
					
	denormalize_result_tDenormalize_1_DenormalizeOut.COLOR.append(row3.COLOR);
			
}else{		
	denormalize_result_tDenormalize_1_DenormalizeOut.NIVEL1.append("¬").append(row3.NIVEL1);
					
	denormalize_result_tDenormalize_1_DenormalizeOut.COLOR.append("¬").append(row3.COLOR);
			
}

 


	tos_count_tDenormalize_1_DenormalizeOut++;

/**
 * [tDenormalize_1_DenormalizeOut main ] stop
 */
	
	/**
	 * [tDenormalize_1_DenormalizeOut process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tDenormalize_1";
	
	currentComponent="tDenormalize_1_DenormalizeOut";
	
	

 



/**
 * [tDenormalize_1_DenormalizeOut process_data_begin ] stop
 */
	
	/**
	 * [tDenormalize_1_DenormalizeOut process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tDenormalize_1";
	
	currentComponent="tDenormalize_1_DenormalizeOut";
	
	

 



/**
 * [tDenormalize_1_DenormalizeOut process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_3";
	
	

 



/**
 * [tOracleInput_3 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_3 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_3";
	
	

}
}finally{
	if (rs_tOracleInput_3 != null) {
		rs_tOracleInput_3.close();
	}
	if (stmt_tOracleInput_3 != null) {
		stmt_tOracleInput_3.close();
	}
}

globalMap.put("tOracleInput_3_NB_LINE",nb_line_tOracleInput_3);
 

ok_Hash.put("tOracleInput_3", true);
end_Hash.put("tOracleInput_3", System.currentTimeMillis());




/**
 * [tOracleInput_3 end ] stop
 */

	
	/**
	 * [tDenormalize_1_DenormalizeOut end ] start
	 */

	

	
	
		currentVirtualComponent = "tDenormalize_1";
	
	currentComponent="tDenormalize_1_DenormalizeOut";
	
	
java.util.List<OnRowsEndStructtDenormalize_1> result_list_tDenormalize_1_DenormalizeOut = new java.util.ArrayList<OnRowsEndStructtDenormalize_1>();
if (denormalize_result_tDenormalize_1_DenormalizeOut != null) {
//generate result begin
	OnRowsEndStructtDenormalize_1 denormalize_row_tDenormalize_1_DenormalizeOut = new OnRowsEndStructtDenormalize_1();
                
	denormalize_row_tDenormalize_1_DenormalizeOut.NIVEL1 = denormalize_result_tDenormalize_1_DenormalizeOut.NIVEL1.toString();
	
	denormalize_row_tDenormalize_1_DenormalizeOut.COLOR = denormalize_result_tDenormalize_1_DenormalizeOut.COLOR.toString();
	
	//in the deepest end
	
	result_list_tDenormalize_1_DenormalizeOut.add(denormalize_row_tDenormalize_1_DenormalizeOut);

}
//generate result end
globalMap.put("tDenormalize_1", result_list_tDenormalize_1_DenormalizeOut);
globalMap.put("tDenormalize_1_DenormalizeOut_NB_LINE", result_list_tDenormalize_1_DenormalizeOut.size()); 

        


				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row3");
			  	}
			  	
 

ok_Hash.put("tDenormalize_1_DenormalizeOut", true);
end_Hash.put("tDenormalize_1_DenormalizeOut", System.currentTimeMillis());




/**
 * [tDenormalize_1_DenormalizeOut end ] stop
 */


	
	/**
	 * [tJavaRow_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaRow_5", false);
		start_Hash.put("tJavaRow_5", System.currentTimeMillis());
		
	
	currentComponent="tJavaRow_5";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row14");
					}
				
		int tos_count_tJavaRow_5 = 0;
		

int nb_line_tJavaRow_5 = 0;

 



/**
 * [tJavaRow_5 begin ] stop
 */



	
	/**
	 * [tDenormalize_1_ArrayIn begin ] start
	 */

	

	
		
		ok_Hash.put("tDenormalize_1_ArrayIn", false);
		start_Hash.put("tDenormalize_1_ArrayIn", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tDenormalize_1";
	
	currentComponent="tDenormalize_1_ArrayIn";
	
	
		int tos_count_tDenormalize_1_ArrayIn = 0;
		

        
        int nb_line_tDenormalize_1_ArrayIn = 0;
        java.util.List<OnRowsEndStructtDenormalize_1> list_tDenormalize_1_ArrayIn = (java.util.List<OnRowsEndStructtDenormalize_1>)globalMap.get("tDenormalize_1");
        if(list_tDenormalize_1_ArrayIn == null) {
            list_tDenormalize_1_ArrayIn = new java.util.ArrayList<OnRowsEndStructtDenormalize_1>();
        }        
        for(OnRowsEndStructtDenormalize_1 row_tDenormalize_1_ArrayIn : list_tDenormalize_1_ArrayIn){
        					
    						row14.NIVEL1 = row_tDenormalize_1_ArrayIn.NIVEL1;
    											
    						row14.COLOR = row_tDenormalize_1_ArrayIn.COLOR;
    						

 



/**
 * [tDenormalize_1_ArrayIn begin ] stop
 */
	
	/**
	 * [tDenormalize_1_ArrayIn main ] start
	 */

	

	
	
		currentVirtualComponent = "tDenormalize_1";
	
	currentComponent="tDenormalize_1_ArrayIn";
	
	

 


	tos_count_tDenormalize_1_ArrayIn++;

/**
 * [tDenormalize_1_ArrayIn main ] stop
 */
	
	/**
	 * [tDenormalize_1_ArrayIn process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tDenormalize_1";
	
	currentComponent="tDenormalize_1_ArrayIn";
	
	

 



/**
 * [tDenormalize_1_ArrayIn process_data_begin ] stop
 */

	
	/**
	 * [tJavaRow_5 main ] start
	 */

	

	
	
	currentComponent="tJavaRow_5";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row14"
						
						);
					}
					

    // Almacena los datos del nivel 1
context.NIVEL1 = row14.NIVEL1;

System.out.println("INICIA PROCESO: Header_Dinamic");
SISPOI.Header_Dinamic(row14.NIVEL1, row14.COLOR);

    nb_line_tJavaRow_5++;   

 


	tos_count_tJavaRow_5++;

/**
 * [tJavaRow_5 main ] stop
 */
	
	/**
	 * [tJavaRow_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJavaRow_5";
	
	

 



/**
 * [tJavaRow_5 process_data_begin ] stop
 */
	
	/**
	 * [tJavaRow_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tJavaRow_5";
	
	

 



/**
 * [tJavaRow_5 process_data_end ] stop
 */



	
	/**
	 * [tDenormalize_1_ArrayIn process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tDenormalize_1";
	
	currentComponent="tDenormalize_1_ArrayIn";
	
	

 



/**
 * [tDenormalize_1_ArrayIn process_data_end ] stop
 */
	
	/**
	 * [tDenormalize_1_ArrayIn end ] start
	 */

	

	
	
		currentVirtualComponent = "tDenormalize_1";
	
	currentComponent="tDenormalize_1_ArrayIn";
	
	
	nb_line_tDenormalize_1_ArrayIn++;
}
globalMap.put("tDenormalize_1_ArrayIn_NB_LINE",nb_line_tDenormalize_1_ArrayIn);
 

ok_Hash.put("tDenormalize_1_ArrayIn", true);
end_Hash.put("tDenormalize_1_ArrayIn", System.currentTimeMillis());




/**
 * [tDenormalize_1_ArrayIn end ] stop
 */

	
	/**
	 * [tJavaRow_5 end ] start
	 */

	

	
	
	currentComponent="tJavaRow_5";
	
	

globalMap.put("tJavaRow_5_NB_LINE",nb_line_tJavaRow_5);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row14");
			  	}
			  	
 

ok_Hash.put("tJavaRow_5", true);
end_Hash.put("tJavaRow_5", System.currentTimeMillis());




/**
 * [tJavaRow_5 end ] stop
 */









				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tOracleInput_3:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk3", 0, "ok");
								} 
							
							tOracleInput_1Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
					te.setVirtualComponentName(currentVirtualComponent);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
							//free memory for "tDenormalize_1_ArrayIn"
							globalMap.remove("tDenormalize_1");
						
				try{
					
	
	/**
	 * [tOracleInput_3 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_3";
	
	

 



/**
 * [tOracleInput_3 finally ] stop
 */

	
	/**
	 * [tDenormalize_1_DenormalizeOut finally ] start
	 */

	

	
	
		currentVirtualComponent = "tDenormalize_1";
	
	currentComponent="tDenormalize_1_DenormalizeOut";
	
	

 



/**
 * [tDenormalize_1_DenormalizeOut finally ] stop
 */

	
	/**
	 * [tDenormalize_1_ArrayIn finally ] start
	 */

	

	
	
		currentVirtualComponent = "tDenormalize_1";
	
	currentComponent="tDenormalize_1_ArrayIn";
	
	

 



/**
 * [tDenormalize_1_ArrayIn finally ] stop
 */

	
	/**
	 * [tJavaRow_5 finally ] start
	 */

	

	
	
	currentComponent="tJavaRow_5";
	
	

 



/**
 * [tJavaRow_5 finally ] stop
 */









				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_3_SUBPROCESS_STATE", 1);
	}
	


public static class row16Struct implements routines.system.IPersistableRow<row16Struct> {
    final static byte[] commonByteArrayLock_VAC_CONSOLIDADOS_VAC_SIS151 = new byte[0];
    static byte[] commonByteArray_VAC_CONSOLIDADOS_VAC_SIS151 = new byte[0];

	
			    public String NIVEL2;

				public String getNIVEL2 () {
					return this.NIVEL2;
				}

				public Boolean NIVEL2IsNullable(){
				    return true;
				}
				public Boolean NIVEL2IsKey(){
				    return false;
				}
				public Integer NIVEL2Length(){
				    return null;
				}
				public Integer NIVEL2Precision(){
				    return null;
				}
				public String NIVEL2Default(){
				
					return null;
				
				}
				public String NIVEL2Comment(){
				
				    return "";
				
				}
				public String NIVEL2Pattern(){
				
					return "";
				
				}
				public String NIVEL2OriginalDbColumnName(){
				
					return "NIVEL2";
				
				}

				
			    public String CANT;

				public String getCANT () {
					return this.CANT;
				}

				public Boolean CANTIsNullable(){
				    return true;
				}
				public Boolean CANTIsKey(){
				    return false;
				}
				public Integer CANTLength(){
				    return null;
				}
				public Integer CANTPrecision(){
				    return null;
				}
				public String CANTDefault(){
				
					return null;
				
				}
				public String CANTComment(){
				
				    return "";
				
				}
				public String CANTPattern(){
				
					return "";
				
				}
				public String CANTOriginalDbColumnName(){
				
					return "CANT";
				
				}

				
			    public String COLOR;

				public String getCOLOR () {
					return this.COLOR;
				}

				public Boolean COLORIsNullable(){
				    return true;
				}
				public Boolean COLORIsKey(){
				    return false;
				}
				public Integer COLORLength(){
				    return null;
				}
				public Integer COLORPrecision(){
				    return null;
				}
				public String COLORDefault(){
				
					return null;
				
				}
				public String COLORComment(){
				
				    return "";
				
				}
				public String COLORPattern(){
				
					return "";
				
				}
				public String COLOROriginalDbColumnName(){
				
					return "COLOR";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_VAC_CONSOLIDADOS_VAC_SIS151.length) {
				if(length < 1024 && commonByteArray_VAC_CONSOLIDADOS_VAC_SIS151.length == 0) {
   					commonByteArray_VAC_CONSOLIDADOS_VAC_SIS151 = new byte[1024];
				} else {
   					commonByteArray_VAC_CONSOLIDADOS_VAC_SIS151 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_VAC_CONSOLIDADOS_VAC_SIS151, 0, length);
			strReturn = new String(commonByteArray_VAC_CONSOLIDADOS_VAC_SIS151, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_VAC_CONSOLIDADOS_VAC_SIS151.length) {
				if(length < 1024 && commonByteArray_VAC_CONSOLIDADOS_VAC_SIS151.length == 0) {
   					commonByteArray_VAC_CONSOLIDADOS_VAC_SIS151 = new byte[1024];
				} else {
   					commonByteArray_VAC_CONSOLIDADOS_VAC_SIS151 = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_VAC_CONSOLIDADOS_VAC_SIS151, 0, length);
			strReturn = new String(commonByteArray_VAC_CONSOLIDADOS_VAC_SIS151, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_VAC_CONSOLIDADOS_VAC_SIS151) {

        	try {

        		int length = 0;
		
					this.NIVEL2 = readString(dis);
					
					this.CANT = readString(dis);
					
					this.COLOR = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_VAC_CONSOLIDADOS_VAC_SIS151) {

        	try {

        		int length = 0;
		
					this.NIVEL2 = readString(dis);
					
					this.CANT = readString(dis);
					
					this.COLOR = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.NIVEL2,dos);
					
					// String
				
						writeString(this.CANT,dos);
					
					// String
				
						writeString(this.COLOR,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.NIVEL2,dos);
					
					// String
				
						writeString(this.CANT,dos);
					
					// String
				
						writeString(this.COLOR,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("NIVEL2="+NIVEL2);
		sb.append(",CANT="+CANT);
		sb.append(",COLOR="+COLOR);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row16Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class OnRowsEndStructtDenormalize_2 implements routines.system.IPersistableRow<OnRowsEndStructtDenormalize_2> {
    final static byte[] commonByteArrayLock_VAC_CONSOLIDADOS_VAC_SIS151 = new byte[0];
    static byte[] commonByteArray_VAC_CONSOLIDADOS_VAC_SIS151 = new byte[0];

	
			    public String NIVEL2;

				public String getNIVEL2 () {
					return this.NIVEL2;
				}

				public Boolean NIVEL2IsNullable(){
				    return true;
				}
				public Boolean NIVEL2IsKey(){
				    return false;
				}
				public Integer NIVEL2Length(){
				    return null;
				}
				public Integer NIVEL2Precision(){
				    return null;
				}
				public String NIVEL2Default(){
				
					return null;
				
				}
				public String NIVEL2Comment(){
				
				    return "";
				
				}
				public String NIVEL2Pattern(){
				
					return "";
				
				}
				public String NIVEL2OriginalDbColumnName(){
				
					return "NIVEL2";
				
				}

				
			    public String CANT;

				public String getCANT () {
					return this.CANT;
				}

				public Boolean CANTIsNullable(){
				    return true;
				}
				public Boolean CANTIsKey(){
				    return false;
				}
				public Integer CANTLength(){
				    return null;
				}
				public Integer CANTPrecision(){
				    return null;
				}
				public String CANTDefault(){
				
					return null;
				
				}
				public String CANTComment(){
				
				    return "";
				
				}
				public String CANTPattern(){
				
					return "";
				
				}
				public String CANTOriginalDbColumnName(){
				
					return "CANT";
				
				}

				
			    public String COLOR;

				public String getCOLOR () {
					return this.COLOR;
				}

				public Boolean COLORIsNullable(){
				    return true;
				}
				public Boolean COLORIsKey(){
				    return false;
				}
				public Integer COLORLength(){
				    return null;
				}
				public Integer COLORPrecision(){
				    return null;
				}
				public String COLORDefault(){
				
					return null;
				
				}
				public String COLORComment(){
				
				    return "";
				
				}
				public String COLORPattern(){
				
					return "";
				
				}
				public String COLOROriginalDbColumnName(){
				
					return "COLOR";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_VAC_CONSOLIDADOS_VAC_SIS151.length) {
				if(length < 1024 && commonByteArray_VAC_CONSOLIDADOS_VAC_SIS151.length == 0) {
   					commonByteArray_VAC_CONSOLIDADOS_VAC_SIS151 = new byte[1024];
				} else {
   					commonByteArray_VAC_CONSOLIDADOS_VAC_SIS151 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_VAC_CONSOLIDADOS_VAC_SIS151, 0, length);
			strReturn = new String(commonByteArray_VAC_CONSOLIDADOS_VAC_SIS151, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_VAC_CONSOLIDADOS_VAC_SIS151.length) {
				if(length < 1024 && commonByteArray_VAC_CONSOLIDADOS_VAC_SIS151.length == 0) {
   					commonByteArray_VAC_CONSOLIDADOS_VAC_SIS151 = new byte[1024];
				} else {
   					commonByteArray_VAC_CONSOLIDADOS_VAC_SIS151 = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_VAC_CONSOLIDADOS_VAC_SIS151, 0, length);
			strReturn = new String(commonByteArray_VAC_CONSOLIDADOS_VAC_SIS151, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_VAC_CONSOLIDADOS_VAC_SIS151) {

        	try {

        		int length = 0;
		
					this.NIVEL2 = readString(dis);
					
					this.CANT = readString(dis);
					
					this.COLOR = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_VAC_CONSOLIDADOS_VAC_SIS151) {

        	try {

        		int length = 0;
		
					this.NIVEL2 = readString(dis);
					
					this.CANT = readString(dis);
					
					this.COLOR = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.NIVEL2,dos);
					
					// String
				
						writeString(this.CANT,dos);
					
					// String
				
						writeString(this.COLOR,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.NIVEL2,dos);
					
					// String
				
						writeString(this.CANT,dos);
					
					// String
				
						writeString(this.COLOR,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("NIVEL2="+NIVEL2);
		sb.append(",CANT="+CANT);
		sb.append(",COLOR="+COLOR);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(OnRowsEndStructtDenormalize_2 other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row2Struct implements routines.system.IPersistableRow<row2Struct> {
    final static byte[] commonByteArrayLock_VAC_CONSOLIDADOS_VAC_SIS151 = new byte[0];
    static byte[] commonByteArray_VAC_CONSOLIDADOS_VAC_SIS151 = new byte[0];

	
			    public String NIVEL2;

				public String getNIVEL2 () {
					return this.NIVEL2;
				}

				public Boolean NIVEL2IsNullable(){
				    return true;
				}
				public Boolean NIVEL2IsKey(){
				    return false;
				}
				public Integer NIVEL2Length(){
				    return null;
				}
				public Integer NIVEL2Precision(){
				    return null;
				}
				public String NIVEL2Default(){
				
					return null;
				
				}
				public String NIVEL2Comment(){
				
				    return "";
				
				}
				public String NIVEL2Pattern(){
				
					return "";
				
				}
				public String NIVEL2OriginalDbColumnName(){
				
					return "NIVEL2";
				
				}

				
			    public Integer CANT;

				public Integer getCANT () {
					return this.CANT;
				}

				public Boolean CANTIsNullable(){
				    return true;
				}
				public Boolean CANTIsKey(){
				    return false;
				}
				public Integer CANTLength(){
				    return null;
				}
				public Integer CANTPrecision(){
				    return null;
				}
				public String CANTDefault(){
				
					return "";
				
				}
				public String CANTComment(){
				
				    return "";
				
				}
				public String CANTPattern(){
				
					return "";
				
				}
				public String CANTOriginalDbColumnName(){
				
					return "CANT";
				
				}

				
			    public String COLOR;

				public String getCOLOR () {
					return this.COLOR;
				}

				public Boolean COLORIsNullable(){
				    return true;
				}
				public Boolean COLORIsKey(){
				    return false;
				}
				public Integer COLORLength(){
				    return null;
				}
				public Integer COLORPrecision(){
				    return null;
				}
				public String COLORDefault(){
				
					return null;
				
				}
				public String COLORComment(){
				
				    return "";
				
				}
				public String COLORPattern(){
				
					return "";
				
				}
				public String COLOROriginalDbColumnName(){
				
					return "COLOR";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_VAC_CONSOLIDADOS_VAC_SIS151.length) {
				if(length < 1024 && commonByteArray_VAC_CONSOLIDADOS_VAC_SIS151.length == 0) {
   					commonByteArray_VAC_CONSOLIDADOS_VAC_SIS151 = new byte[1024];
				} else {
   					commonByteArray_VAC_CONSOLIDADOS_VAC_SIS151 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_VAC_CONSOLIDADOS_VAC_SIS151, 0, length);
			strReturn = new String(commonByteArray_VAC_CONSOLIDADOS_VAC_SIS151, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_VAC_CONSOLIDADOS_VAC_SIS151.length) {
				if(length < 1024 && commonByteArray_VAC_CONSOLIDADOS_VAC_SIS151.length == 0) {
   					commonByteArray_VAC_CONSOLIDADOS_VAC_SIS151 = new byte[1024];
				} else {
   					commonByteArray_VAC_CONSOLIDADOS_VAC_SIS151 = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_VAC_CONSOLIDADOS_VAC_SIS151, 0, length);
			strReturn = new String(commonByteArray_VAC_CONSOLIDADOS_VAC_SIS151, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_VAC_CONSOLIDADOS_VAC_SIS151) {

        	try {

        		int length = 0;
		
					this.NIVEL2 = readString(dis);
					
						this.CANT = readInteger(dis);
					
					this.COLOR = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_VAC_CONSOLIDADOS_VAC_SIS151) {

        	try {

        		int length = 0;
		
					this.NIVEL2 = readString(dis);
					
						this.CANT = readInteger(dis);
					
					this.COLOR = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.NIVEL2,dos);
					
					// Integer
				
						writeInteger(this.CANT,dos);
					
					// String
				
						writeString(this.COLOR,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.NIVEL2,dos);
					
					// Integer
				
						writeInteger(this.CANT,dos);
					
					// String
				
						writeString(this.COLOR,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("NIVEL2="+NIVEL2);
		sb.append(",CANT="+String.valueOf(CANT));
		sb.append(",COLOR="+COLOR);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row2Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

		String currentVirtualComponent = null;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row2Struct row2 = new row2Struct();
row16Struct row16 = new row16Struct();




	
	/**
	 * [tDenormalize_2_DenormalizeOut begin ] start
	 */

	

	
		
		ok_Hash.put("tDenormalize_2_DenormalizeOut", false);
		start_Hash.put("tDenormalize_2_DenormalizeOut", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tDenormalize_2";
	
	currentComponent="tDenormalize_2_DenormalizeOut";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row2");
					}
				
		int tos_count_tDenormalize_2_DenormalizeOut = 0;
		

class DenormalizeStructtDenormalize_2_DenormalizeOut {
StringBuilder NIVEL2 = new StringBuilder();
StringBuilder CANT = new StringBuilder();
StringBuilder COLOR = new StringBuilder();
}
DenormalizeStructtDenormalize_2_DenormalizeOut denormalize_result_tDenormalize_2_DenormalizeOut = null;

 



/**
 * [tDenormalize_2_DenormalizeOut begin ] stop
 */



	
	/**
	 * [tOracleInput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_1", false);
		start_Hash.put("tOracleInput_1", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_1";
	
	
		int tos_count_tOracleInput_1 = 0;
		
	


	
		    int nb_line_tOracleInput_1 = 0;
		    java.sql.Connection conn_tOracleInput_1 = null;
				conn_tOracleInput_1 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_3");
				
                boolean isTimeZoneNull_tOracleInput_1 = false;
				boolean isConnectionWrapped_tOracleInput_1 = !(conn_tOracleInput_1 instanceof oracle.jdbc.OracleConnection) && conn_tOracleInput_1.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tOracleInput_1 = null;
                if (isConnectionWrapped_tOracleInput_1) {
					unwrappedOraConn_tOracleInput_1 = conn_tOracleInput_1.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tOracleInput_1 != null) {
                        isTimeZoneNull_tOracleInput_1 = (unwrappedOraConn_tOracleInput_1.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tOracleInput_1 = (((oracle.jdbc.OracleConnection)conn_tOracleInput_1).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tOracleInput_1) {
					java.sql.Statement stmtGetTZ_tOracleInput_1 = conn_tOracleInput_1.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_1 = stmtGetTZ_tOracleInput_1.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_1 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tOracleInput_1.next()) {
						sessionTimezone_tOracleInput_1 = rsGetTZ_tOracleInput_1.getString(1);
					}
					if (isConnectionWrapped_tOracleInput_1 && unwrappedOraConn_tOracleInput_1 != null) {
                        unwrappedOraConn_tOracleInput_1.setSessionTimeZone(sessionTimezone_tOracleInput_1);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_1).setSessionTimeZone(sessionTimezone_tOracleInput_1);
                    }
				}
			
		    
			java.sql.Statement stmt_tOracleInput_1 = conn_tOracleInput_1.createStatement(java.sql.ResultSet.TYPE_FORWARD_ONLY,
																					java.sql.ResultSet.CONCUR_READ_ONLY);
			
                stmt_tOracleInput_1.setFetchSize(1000);


		    String dbquery_tOracleInput_1 = "\nSELECT DATOS.NIVEL2, DATOS.CANT, DATOS.COLOR\n  FROM (SELECT NIVEL2, ORDEN, ORDEN2, COLOR, COUNT(1) AS CANT\n        "
+"  FROM BVAC_NIVEL\n         WHERE ((ESTADO = 'Activo' AND\n                 FREGISTRO < LAST_DAY(TO_DATE('" + context.PERIODO + "', 'YYYY-MM')) + 1) OR\n               (ESTADO = 'Inactivo' AND TO_CHAR(FINACTIVACION, 'YYYY-MM') = '" + context.PERIODO + "'))\n           AND ESQUEMA = '" + context.TESQUEMA  + "'\n         GROUP BY NIVEL2, ORDEN2, ORDEN, COLOR\n         ORDER BY ORDEN, ORDEN2) DATOS\n";
		    

		    globalMap.put("tOracleInput_1_QUERY",dbquery_tOracleInput_1);

		    java.sql.ResultSet rs_tOracleInput_1 = null;

		    try {
		    	rs_tOracleInput_1 = stmt_tOracleInput_1.executeQuery(dbquery_tOracleInput_1);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_1 = rs_tOracleInput_1.getMetaData();
		    	int colQtyInRs_tOracleInput_1 = rsmd_tOracleInput_1.getColumnCount();

		    String tmpContent_tOracleInput_1 = null;
		    
		    
		    while (rs_tOracleInput_1.next()) {
		        nb_line_tOracleInput_1++;
		        
							if(colQtyInRs_tOracleInput_1 < 1) {
								row2.NIVEL2 = null;
							} else {
	                         		
        	row2.NIVEL2 = routines.system.JDBCUtil.getString(rs_tOracleInput_1, 1, false);
		                    }
							if(colQtyInRs_tOracleInput_1 < 2) {
								row2.CANT = null;
							} else {
		                          
					if(rs_tOracleInput_1.getObject(2) != null) {
						row2.CANT = rs_tOracleInput_1.getInt(2);
					} else {
				
						row2.CANT = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_1 < 3) {
								row2.COLOR = null;
							} else {
	                         		
        	row2.COLOR = routines.system.JDBCUtil.getString(rs_tOracleInput_1, 3, false);
		                    }
					




 



/**
 * [tOracleInput_1 begin ] stop
 */
	
	/**
	 * [tOracleInput_1 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_1";
	
	

 


	tos_count_tOracleInput_1++;

/**
 * [tOracleInput_1 main ] stop
 */
	
	/**
	 * [tOracleInput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_1";
	
	

 



/**
 * [tOracleInput_1 process_data_begin ] stop
 */

	
	/**
	 * [tDenormalize_2_DenormalizeOut main ] start
	 */

	

	
	
		currentVirtualComponent = "tDenormalize_2";
	
	currentComponent="tDenormalize_2_DenormalizeOut";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row2"
						
						);
					}
					

if(denormalize_result_tDenormalize_2_DenormalizeOut == null){
	denormalize_result_tDenormalize_2_DenormalizeOut = new DenormalizeStructtDenormalize_2_DenormalizeOut();		
	denormalize_result_tDenormalize_2_DenormalizeOut.NIVEL2.append(row2.NIVEL2);
					
	denormalize_result_tDenormalize_2_DenormalizeOut.CANT.append(row2.CANT);
					
	denormalize_result_tDenormalize_2_DenormalizeOut.COLOR.append(row2.COLOR);
			
}else{		
	denormalize_result_tDenormalize_2_DenormalizeOut.NIVEL2.append("¬").append(row2.NIVEL2);
					
	denormalize_result_tDenormalize_2_DenormalizeOut.CANT.append("¬").append(row2.CANT);
					
	denormalize_result_tDenormalize_2_DenormalizeOut.COLOR.append("¬").append(row2.COLOR);
			
}

 


	tos_count_tDenormalize_2_DenormalizeOut++;

/**
 * [tDenormalize_2_DenormalizeOut main ] stop
 */
	
	/**
	 * [tDenormalize_2_DenormalizeOut process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tDenormalize_2";
	
	currentComponent="tDenormalize_2_DenormalizeOut";
	
	

 



/**
 * [tDenormalize_2_DenormalizeOut process_data_begin ] stop
 */
	
	/**
	 * [tDenormalize_2_DenormalizeOut process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tDenormalize_2";
	
	currentComponent="tDenormalize_2_DenormalizeOut";
	
	

 



/**
 * [tDenormalize_2_DenormalizeOut process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_1";
	
	

 



/**
 * [tOracleInput_1 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_1 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_1";
	
	

}
}finally{
	if (rs_tOracleInput_1 != null) {
		rs_tOracleInput_1.close();
	}
	if (stmt_tOracleInput_1 != null) {
		stmt_tOracleInput_1.close();
	}
}

globalMap.put("tOracleInput_1_NB_LINE",nb_line_tOracleInput_1);
 

ok_Hash.put("tOracleInput_1", true);
end_Hash.put("tOracleInput_1", System.currentTimeMillis());




/**
 * [tOracleInput_1 end ] stop
 */

	
	/**
	 * [tDenormalize_2_DenormalizeOut end ] start
	 */

	

	
	
		currentVirtualComponent = "tDenormalize_2";
	
	currentComponent="tDenormalize_2_DenormalizeOut";
	
	
java.util.List<OnRowsEndStructtDenormalize_2> result_list_tDenormalize_2_DenormalizeOut = new java.util.ArrayList<OnRowsEndStructtDenormalize_2>();
if (denormalize_result_tDenormalize_2_DenormalizeOut != null) {
//generate result begin
	OnRowsEndStructtDenormalize_2 denormalize_row_tDenormalize_2_DenormalizeOut = new OnRowsEndStructtDenormalize_2();
                
	denormalize_row_tDenormalize_2_DenormalizeOut.NIVEL2 = denormalize_result_tDenormalize_2_DenormalizeOut.NIVEL2.toString();
	
	denormalize_row_tDenormalize_2_DenormalizeOut.CANT = denormalize_result_tDenormalize_2_DenormalizeOut.CANT.toString();
	
	denormalize_row_tDenormalize_2_DenormalizeOut.COLOR = denormalize_result_tDenormalize_2_DenormalizeOut.COLOR.toString();
	
	//in the deepest end
	
	result_list_tDenormalize_2_DenormalizeOut.add(denormalize_row_tDenormalize_2_DenormalizeOut);

}
//generate result end
globalMap.put("tDenormalize_2", result_list_tDenormalize_2_DenormalizeOut);
globalMap.put("tDenormalize_2_DenormalizeOut_NB_LINE", result_list_tDenormalize_2_DenormalizeOut.size()); 

        


				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row2");
			  	}
			  	
 

ok_Hash.put("tDenormalize_2_DenormalizeOut", true);
end_Hash.put("tDenormalize_2_DenormalizeOut", System.currentTimeMillis());




/**
 * [tDenormalize_2_DenormalizeOut end ] stop
 */


	
	/**
	 * [tJavaRow_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaRow_3", false);
		start_Hash.put("tJavaRow_3", System.currentTimeMillis());
		
	
	currentComponent="tJavaRow_3";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row16");
					}
				
		int tos_count_tJavaRow_3 = 0;
		

int nb_line_tJavaRow_3 = 0;

 



/**
 * [tJavaRow_3 begin ] stop
 */



	
	/**
	 * [tDenormalize_2_ArrayIn begin ] start
	 */

	

	
		
		ok_Hash.put("tDenormalize_2_ArrayIn", false);
		start_Hash.put("tDenormalize_2_ArrayIn", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tDenormalize_2";
	
	currentComponent="tDenormalize_2_ArrayIn";
	
	
		int tos_count_tDenormalize_2_ArrayIn = 0;
		

        
        int nb_line_tDenormalize_2_ArrayIn = 0;
        java.util.List<OnRowsEndStructtDenormalize_2> list_tDenormalize_2_ArrayIn = (java.util.List<OnRowsEndStructtDenormalize_2>)globalMap.get("tDenormalize_2");
        if(list_tDenormalize_2_ArrayIn == null) {
            list_tDenormalize_2_ArrayIn = new java.util.ArrayList<OnRowsEndStructtDenormalize_2>();
        }        
        for(OnRowsEndStructtDenormalize_2 row_tDenormalize_2_ArrayIn : list_tDenormalize_2_ArrayIn){
        					
    						row16.NIVEL2 = row_tDenormalize_2_ArrayIn.NIVEL2;
    											
    						row16.CANT = row_tDenormalize_2_ArrayIn.CANT;
    											
    						row16.COLOR = row_tDenormalize_2_ArrayIn.COLOR;
    						

 



/**
 * [tDenormalize_2_ArrayIn begin ] stop
 */
	
	/**
	 * [tDenormalize_2_ArrayIn main ] start
	 */

	

	
	
		currentVirtualComponent = "tDenormalize_2";
	
	currentComponent="tDenormalize_2_ArrayIn";
	
	

 


	tos_count_tDenormalize_2_ArrayIn++;

/**
 * [tDenormalize_2_ArrayIn main ] stop
 */
	
	/**
	 * [tDenormalize_2_ArrayIn process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tDenormalize_2";
	
	currentComponent="tDenormalize_2_ArrayIn";
	
	

 



/**
 * [tDenormalize_2_ArrayIn process_data_begin ] stop
 */

	
	/**
	 * [tJavaRow_3 main ] start
	 */

	

	
	
	currentComponent="tJavaRow_3";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row16"
						
						);
					}
					

    System.out.println("INICIA PROCESO: Header_Dinamic_nivel2");
SISPOI.Header_Dinamic_nivel2(context.NIVEL1, row16.NIVEL2, row16.CANT, row16.COLOR);
    nb_line_tJavaRow_3++;   

 


	tos_count_tJavaRow_3++;

/**
 * [tJavaRow_3 main ] stop
 */
	
	/**
	 * [tJavaRow_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJavaRow_3";
	
	

 



/**
 * [tJavaRow_3 process_data_begin ] stop
 */
	
	/**
	 * [tJavaRow_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tJavaRow_3";
	
	

 



/**
 * [tJavaRow_3 process_data_end ] stop
 */



	
	/**
	 * [tDenormalize_2_ArrayIn process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tDenormalize_2";
	
	currentComponent="tDenormalize_2_ArrayIn";
	
	

 



/**
 * [tDenormalize_2_ArrayIn process_data_end ] stop
 */
	
	/**
	 * [tDenormalize_2_ArrayIn end ] start
	 */

	

	
	
		currentVirtualComponent = "tDenormalize_2";
	
	currentComponent="tDenormalize_2_ArrayIn";
	
	
	nb_line_tDenormalize_2_ArrayIn++;
}
globalMap.put("tDenormalize_2_ArrayIn_NB_LINE",nb_line_tDenormalize_2_ArrayIn);
 

ok_Hash.put("tDenormalize_2_ArrayIn", true);
end_Hash.put("tDenormalize_2_ArrayIn", System.currentTimeMillis());




/**
 * [tDenormalize_2_ArrayIn end ] stop
 */

	
	/**
	 * [tJavaRow_3 end ] start
	 */

	

	
	
	currentComponent="tJavaRow_3";
	
	

globalMap.put("tJavaRow_3_NB_LINE",nb_line_tJavaRow_3);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row16");
			  	}
			  	
 

ok_Hash.put("tJavaRow_3", true);
end_Hash.put("tJavaRow_3", System.currentTimeMillis());




/**
 * [tJavaRow_3 end ] stop
 */









				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tOracleInput_1:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk6", 0, "ok");
								} 
							
							tOracleInput_4Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
					te.setVirtualComponentName(currentVirtualComponent);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
							//free memory for "tDenormalize_2_ArrayIn"
							globalMap.remove("tDenormalize_2");
						
				try{
					
	
	/**
	 * [tOracleInput_1 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_1";
	
	

 



/**
 * [tOracleInput_1 finally ] stop
 */

	
	/**
	 * [tDenormalize_2_DenormalizeOut finally ] start
	 */

	

	
	
		currentVirtualComponent = "tDenormalize_2";
	
	currentComponent="tDenormalize_2_DenormalizeOut";
	
	

 



/**
 * [tDenormalize_2_DenormalizeOut finally ] stop
 */

	
	/**
	 * [tDenormalize_2_ArrayIn finally ] start
	 */

	

	
	
		currentVirtualComponent = "tDenormalize_2";
	
	currentComponent="tDenormalize_2_ArrayIn";
	
	

 



/**
 * [tDenormalize_2_ArrayIn finally ] stop
 */

	
	/**
	 * [tJavaRow_3 finally ] start
	 */

	

	
	
	currentComponent="tJavaRow_3";
	
	

 



/**
 * [tJavaRow_3 finally ] stop
 */









				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_1_SUBPROCESS_STATE", 1);
	}
	


public static class row17Struct implements routines.system.IPersistableRow<row17Struct> {
    final static byte[] commonByteArrayLock_VAC_CONSOLIDADOS_VAC_SIS151 = new byte[0];
    static byte[] commonByteArray_VAC_CONSOLIDADOS_VAC_SIS151 = new byte[0];

	
			    public String NIVEL3;

				public String getNIVEL3 () {
					return this.NIVEL3;
				}

				public Boolean NIVEL3IsNullable(){
				    return true;
				}
				public Boolean NIVEL3IsKey(){
				    return false;
				}
				public Integer NIVEL3Length(){
				    return null;
				}
				public Integer NIVEL3Precision(){
				    return null;
				}
				public String NIVEL3Default(){
				
					return null;
				
				}
				public String NIVEL3Comment(){
				
				    return "";
				
				}
				public String NIVEL3Pattern(){
				
					return "";
				
				}
				public String NIVEL3OriginalDbColumnName(){
				
					return "NIVEL3";
				
				}

				
			    public String CANT;

				public String getCANT () {
					return this.CANT;
				}

				public Boolean CANTIsNullable(){
				    return true;
				}
				public Boolean CANTIsKey(){
				    return false;
				}
				public Integer CANTLength(){
				    return null;
				}
				public Integer CANTPrecision(){
				    return null;
				}
				public String CANTDefault(){
				
					return null;
				
				}
				public String CANTComment(){
				
				    return "";
				
				}
				public String CANTPattern(){
				
					return "";
				
				}
				public String CANTOriginalDbColumnName(){
				
					return "CANT";
				
				}

				
			    public String COLOR;

				public String getCOLOR () {
					return this.COLOR;
				}

				public Boolean COLORIsNullable(){
				    return true;
				}
				public Boolean COLORIsKey(){
				    return false;
				}
				public Integer COLORLength(){
				    return null;
				}
				public Integer COLORPrecision(){
				    return null;
				}
				public String COLORDefault(){
				
					return null;
				
				}
				public String COLORComment(){
				
				    return "";
				
				}
				public String COLORPattern(){
				
					return "";
				
				}
				public String COLOROriginalDbColumnName(){
				
					return "COLOR";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_VAC_CONSOLIDADOS_VAC_SIS151.length) {
				if(length < 1024 && commonByteArray_VAC_CONSOLIDADOS_VAC_SIS151.length == 0) {
   					commonByteArray_VAC_CONSOLIDADOS_VAC_SIS151 = new byte[1024];
				} else {
   					commonByteArray_VAC_CONSOLIDADOS_VAC_SIS151 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_VAC_CONSOLIDADOS_VAC_SIS151, 0, length);
			strReturn = new String(commonByteArray_VAC_CONSOLIDADOS_VAC_SIS151, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_VAC_CONSOLIDADOS_VAC_SIS151.length) {
				if(length < 1024 && commonByteArray_VAC_CONSOLIDADOS_VAC_SIS151.length == 0) {
   					commonByteArray_VAC_CONSOLIDADOS_VAC_SIS151 = new byte[1024];
				} else {
   					commonByteArray_VAC_CONSOLIDADOS_VAC_SIS151 = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_VAC_CONSOLIDADOS_VAC_SIS151, 0, length);
			strReturn = new String(commonByteArray_VAC_CONSOLIDADOS_VAC_SIS151, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_VAC_CONSOLIDADOS_VAC_SIS151) {

        	try {

        		int length = 0;
		
					this.NIVEL3 = readString(dis);
					
					this.CANT = readString(dis);
					
					this.COLOR = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_VAC_CONSOLIDADOS_VAC_SIS151) {

        	try {

        		int length = 0;
		
					this.NIVEL3 = readString(dis);
					
					this.CANT = readString(dis);
					
					this.COLOR = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.NIVEL3,dos);
					
					// String
				
						writeString(this.CANT,dos);
					
					// String
				
						writeString(this.COLOR,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.NIVEL3,dos);
					
					// String
				
						writeString(this.CANT,dos);
					
					// String
				
						writeString(this.COLOR,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("NIVEL3="+NIVEL3);
		sb.append(",CANT="+CANT);
		sb.append(",COLOR="+COLOR);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row17Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class OnRowsEndStructtDenormalize_3 implements routines.system.IPersistableRow<OnRowsEndStructtDenormalize_3> {
    final static byte[] commonByteArrayLock_VAC_CONSOLIDADOS_VAC_SIS151 = new byte[0];
    static byte[] commonByteArray_VAC_CONSOLIDADOS_VAC_SIS151 = new byte[0];

	
			    public String NIVEL3;

				public String getNIVEL3 () {
					return this.NIVEL3;
				}

				public Boolean NIVEL3IsNullable(){
				    return true;
				}
				public Boolean NIVEL3IsKey(){
				    return false;
				}
				public Integer NIVEL3Length(){
				    return null;
				}
				public Integer NIVEL3Precision(){
				    return null;
				}
				public String NIVEL3Default(){
				
					return null;
				
				}
				public String NIVEL3Comment(){
				
				    return "";
				
				}
				public String NIVEL3Pattern(){
				
					return "";
				
				}
				public String NIVEL3OriginalDbColumnName(){
				
					return "NIVEL3";
				
				}

				
			    public String CANT;

				public String getCANT () {
					return this.CANT;
				}

				public Boolean CANTIsNullable(){
				    return true;
				}
				public Boolean CANTIsKey(){
				    return false;
				}
				public Integer CANTLength(){
				    return null;
				}
				public Integer CANTPrecision(){
				    return null;
				}
				public String CANTDefault(){
				
					return null;
				
				}
				public String CANTComment(){
				
				    return "";
				
				}
				public String CANTPattern(){
				
					return "";
				
				}
				public String CANTOriginalDbColumnName(){
				
					return "CANT";
				
				}

				
			    public String COLOR;

				public String getCOLOR () {
					return this.COLOR;
				}

				public Boolean COLORIsNullable(){
				    return true;
				}
				public Boolean COLORIsKey(){
				    return false;
				}
				public Integer COLORLength(){
				    return null;
				}
				public Integer COLORPrecision(){
				    return null;
				}
				public String COLORDefault(){
				
					return null;
				
				}
				public String COLORComment(){
				
				    return "";
				
				}
				public String COLORPattern(){
				
					return "";
				
				}
				public String COLOROriginalDbColumnName(){
				
					return "COLOR";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_VAC_CONSOLIDADOS_VAC_SIS151.length) {
				if(length < 1024 && commonByteArray_VAC_CONSOLIDADOS_VAC_SIS151.length == 0) {
   					commonByteArray_VAC_CONSOLIDADOS_VAC_SIS151 = new byte[1024];
				} else {
   					commonByteArray_VAC_CONSOLIDADOS_VAC_SIS151 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_VAC_CONSOLIDADOS_VAC_SIS151, 0, length);
			strReturn = new String(commonByteArray_VAC_CONSOLIDADOS_VAC_SIS151, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_VAC_CONSOLIDADOS_VAC_SIS151.length) {
				if(length < 1024 && commonByteArray_VAC_CONSOLIDADOS_VAC_SIS151.length == 0) {
   					commonByteArray_VAC_CONSOLIDADOS_VAC_SIS151 = new byte[1024];
				} else {
   					commonByteArray_VAC_CONSOLIDADOS_VAC_SIS151 = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_VAC_CONSOLIDADOS_VAC_SIS151, 0, length);
			strReturn = new String(commonByteArray_VAC_CONSOLIDADOS_VAC_SIS151, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_VAC_CONSOLIDADOS_VAC_SIS151) {

        	try {

        		int length = 0;
		
					this.NIVEL3 = readString(dis);
					
					this.CANT = readString(dis);
					
					this.COLOR = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_VAC_CONSOLIDADOS_VAC_SIS151) {

        	try {

        		int length = 0;
		
					this.NIVEL3 = readString(dis);
					
					this.CANT = readString(dis);
					
					this.COLOR = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.NIVEL3,dos);
					
					// String
				
						writeString(this.CANT,dos);
					
					// String
				
						writeString(this.COLOR,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.NIVEL3,dos);
					
					// String
				
						writeString(this.CANT,dos);
					
					// String
				
						writeString(this.COLOR,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("NIVEL3="+NIVEL3);
		sb.append(",CANT="+CANT);
		sb.append(",COLOR="+COLOR);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(OnRowsEndStructtDenormalize_3 other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row6Struct implements routines.system.IPersistableRow<row6Struct> {
    final static byte[] commonByteArrayLock_VAC_CONSOLIDADOS_VAC_SIS151 = new byte[0];
    static byte[] commonByteArray_VAC_CONSOLIDADOS_VAC_SIS151 = new byte[0];

	
			    public String NIVEL3;

				public String getNIVEL3 () {
					return this.NIVEL3;
				}

				public Boolean NIVEL3IsNullable(){
				    return true;
				}
				public Boolean NIVEL3IsKey(){
				    return false;
				}
				public Integer NIVEL3Length(){
				    return null;
				}
				public Integer NIVEL3Precision(){
				    return null;
				}
				public String NIVEL3Default(){
				
					return null;
				
				}
				public String NIVEL3Comment(){
				
				    return "";
				
				}
				public String NIVEL3Pattern(){
				
					return "";
				
				}
				public String NIVEL3OriginalDbColumnName(){
				
					return "NIVEL3";
				
				}

				
			    public Integer CANT;

				public Integer getCANT () {
					return this.CANT;
				}

				public Boolean CANTIsNullable(){
				    return true;
				}
				public Boolean CANTIsKey(){
				    return false;
				}
				public Integer CANTLength(){
				    return null;
				}
				public Integer CANTPrecision(){
				    return null;
				}
				public String CANTDefault(){
				
					return "";
				
				}
				public String CANTComment(){
				
				    return "";
				
				}
				public String CANTPattern(){
				
					return "";
				
				}
				public String CANTOriginalDbColumnName(){
				
					return "CANT";
				
				}

				
			    public String COLOR;

				public String getCOLOR () {
					return this.COLOR;
				}

				public Boolean COLORIsNullable(){
				    return true;
				}
				public Boolean COLORIsKey(){
				    return false;
				}
				public Integer COLORLength(){
				    return null;
				}
				public Integer COLORPrecision(){
				    return null;
				}
				public String COLORDefault(){
				
					return null;
				
				}
				public String COLORComment(){
				
				    return "";
				
				}
				public String COLORPattern(){
				
					return "";
				
				}
				public String COLOROriginalDbColumnName(){
				
					return "COLOR";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_VAC_CONSOLIDADOS_VAC_SIS151.length) {
				if(length < 1024 && commonByteArray_VAC_CONSOLIDADOS_VAC_SIS151.length == 0) {
   					commonByteArray_VAC_CONSOLIDADOS_VAC_SIS151 = new byte[1024];
				} else {
   					commonByteArray_VAC_CONSOLIDADOS_VAC_SIS151 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_VAC_CONSOLIDADOS_VAC_SIS151, 0, length);
			strReturn = new String(commonByteArray_VAC_CONSOLIDADOS_VAC_SIS151, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_VAC_CONSOLIDADOS_VAC_SIS151.length) {
				if(length < 1024 && commonByteArray_VAC_CONSOLIDADOS_VAC_SIS151.length == 0) {
   					commonByteArray_VAC_CONSOLIDADOS_VAC_SIS151 = new byte[1024];
				} else {
   					commonByteArray_VAC_CONSOLIDADOS_VAC_SIS151 = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_VAC_CONSOLIDADOS_VAC_SIS151, 0, length);
			strReturn = new String(commonByteArray_VAC_CONSOLIDADOS_VAC_SIS151, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_VAC_CONSOLIDADOS_VAC_SIS151) {

        	try {

        		int length = 0;
		
					this.NIVEL3 = readString(dis);
					
						this.CANT = readInteger(dis);
					
					this.COLOR = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_VAC_CONSOLIDADOS_VAC_SIS151) {

        	try {

        		int length = 0;
		
					this.NIVEL3 = readString(dis);
					
						this.CANT = readInteger(dis);
					
					this.COLOR = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.NIVEL3,dos);
					
					// Integer
				
						writeInteger(this.CANT,dos);
					
					// String
				
						writeString(this.COLOR,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.NIVEL3,dos);
					
					// Integer
				
						writeInteger(this.CANT,dos);
					
					// String
				
						writeString(this.COLOR,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("NIVEL3="+NIVEL3);
		sb.append(",CANT="+String.valueOf(CANT));
		sb.append(",COLOR="+COLOR);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row6Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_4Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_4_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

		String currentVirtualComponent = null;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row6Struct row6 = new row6Struct();
row17Struct row17 = new row17Struct();




	
	/**
	 * [tDenormalize_3_DenormalizeOut begin ] start
	 */

	

	
		
		ok_Hash.put("tDenormalize_3_DenormalizeOut", false);
		start_Hash.put("tDenormalize_3_DenormalizeOut", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tDenormalize_3";
	
	currentComponent="tDenormalize_3_DenormalizeOut";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row6");
					}
				
		int tos_count_tDenormalize_3_DenormalizeOut = 0;
		

class DenormalizeStructtDenormalize_3_DenormalizeOut {
StringBuilder NIVEL3 = new StringBuilder();
StringBuilder CANT = new StringBuilder();
StringBuilder COLOR = new StringBuilder();
}
DenormalizeStructtDenormalize_3_DenormalizeOut denormalize_result_tDenormalize_3_DenormalizeOut = null;

 



/**
 * [tDenormalize_3_DenormalizeOut begin ] stop
 */



	
	/**
	 * [tOracleInput_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_4", false);
		start_Hash.put("tOracleInput_4", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_4";
	
	
		int tos_count_tOracleInput_4 = 0;
		
	


	
		    int nb_line_tOracleInput_4 = 0;
		    java.sql.Connection conn_tOracleInput_4 = null;
				conn_tOracleInput_4 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_3");
				
                boolean isTimeZoneNull_tOracleInput_4 = false;
				boolean isConnectionWrapped_tOracleInput_4 = !(conn_tOracleInput_4 instanceof oracle.jdbc.OracleConnection) && conn_tOracleInput_4.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tOracleInput_4 = null;
                if (isConnectionWrapped_tOracleInput_4) {
					unwrappedOraConn_tOracleInput_4 = conn_tOracleInput_4.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tOracleInput_4 != null) {
                        isTimeZoneNull_tOracleInput_4 = (unwrappedOraConn_tOracleInput_4.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tOracleInput_4 = (((oracle.jdbc.OracleConnection)conn_tOracleInput_4).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tOracleInput_4) {
					java.sql.Statement stmtGetTZ_tOracleInput_4 = conn_tOracleInput_4.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_4 = stmtGetTZ_tOracleInput_4.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_4 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tOracleInput_4.next()) {
						sessionTimezone_tOracleInput_4 = rsGetTZ_tOracleInput_4.getString(1);
					}
					if (isConnectionWrapped_tOracleInput_4 && unwrappedOraConn_tOracleInput_4 != null) {
                        unwrappedOraConn_tOracleInput_4.setSessionTimeZone(sessionTimezone_tOracleInput_4);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_4).setSessionTimeZone(sessionTimezone_tOracleInput_4);
                    }
				}
			
		    
			java.sql.Statement stmt_tOracleInput_4 = conn_tOracleInput_4.createStatement(java.sql.ResultSet.TYPE_FORWARD_ONLY,
																					java.sql.ResultSet.CONCUR_READ_ONLY);
			
                stmt_tOracleInput_4.setFetchSize(1000);


		    String dbquery_tOracleInput_4 = "\nSELECT DATOS.NIVEL3, DATOS.CANT, DATOS.COLOR\n  FROM (SELECT NIVEL3, ORDEN, COLOR, COUNT(1) AS CANT\n          FROM B"
+"VAC_NIVEL\n         WHERE ((ESTADO = 'Activo' AND\n                 FREGISTRO < LAST_DAY(TO_DATE('" + context.PERIODO + "', 'YYYY-MM')) + 1) OR\n               (ESTADO = 'Inactivo' AND TO_CHAR(FINACTIVACION, 'YYYY-MM') = '" + context.PERIODO + "'))\n           AND ESQUEMA = '" + context.TESQUEMA  + "'\n         GROUP BY NIVEL3, ORDEN, COLOR\n         ORDER BY ORDEN) DATOS\n";
		    

		    globalMap.put("tOracleInput_4_QUERY",dbquery_tOracleInput_4);

		    java.sql.ResultSet rs_tOracleInput_4 = null;

		    try {
		    	rs_tOracleInput_4 = stmt_tOracleInput_4.executeQuery(dbquery_tOracleInput_4);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_4 = rs_tOracleInput_4.getMetaData();
		    	int colQtyInRs_tOracleInput_4 = rsmd_tOracleInput_4.getColumnCount();

		    String tmpContent_tOracleInput_4 = null;
		    
		    
		    while (rs_tOracleInput_4.next()) {
		        nb_line_tOracleInput_4++;
		        
							if(colQtyInRs_tOracleInput_4 < 1) {
								row6.NIVEL3 = null;
							} else {
	                         		
        	row6.NIVEL3 = routines.system.JDBCUtil.getString(rs_tOracleInput_4, 1, false);
		                    }
							if(colQtyInRs_tOracleInput_4 < 2) {
								row6.CANT = null;
							} else {
		                          
					if(rs_tOracleInput_4.getObject(2) != null) {
						row6.CANT = rs_tOracleInput_4.getInt(2);
					} else {
				
						row6.CANT = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_4 < 3) {
								row6.COLOR = null;
							} else {
	                         		
        	row6.COLOR = routines.system.JDBCUtil.getString(rs_tOracleInput_4, 3, false);
		                    }
					




 



/**
 * [tOracleInput_4 begin ] stop
 */
	
	/**
	 * [tOracleInput_4 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_4";
	
	

 


	tos_count_tOracleInput_4++;

/**
 * [tOracleInput_4 main ] stop
 */
	
	/**
	 * [tOracleInput_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_4";
	
	

 



/**
 * [tOracleInput_4 process_data_begin ] stop
 */

	
	/**
	 * [tDenormalize_3_DenormalizeOut main ] start
	 */

	

	
	
		currentVirtualComponent = "tDenormalize_3";
	
	currentComponent="tDenormalize_3_DenormalizeOut";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row6"
						
						);
					}
					

if(denormalize_result_tDenormalize_3_DenormalizeOut == null){
	denormalize_result_tDenormalize_3_DenormalizeOut = new DenormalizeStructtDenormalize_3_DenormalizeOut();		
	denormalize_result_tDenormalize_3_DenormalizeOut.NIVEL3.append(row6.NIVEL3);
					
	denormalize_result_tDenormalize_3_DenormalizeOut.CANT.append(row6.CANT);
					
	denormalize_result_tDenormalize_3_DenormalizeOut.COLOR.append(row6.COLOR);
			
}else{		
	denormalize_result_tDenormalize_3_DenormalizeOut.NIVEL3.append("¬").append(row6.NIVEL3);
					
	denormalize_result_tDenormalize_3_DenormalizeOut.CANT.append("¬").append(row6.CANT);
					
	denormalize_result_tDenormalize_3_DenormalizeOut.COLOR.append("¬").append(row6.COLOR);
			
}

 


	tos_count_tDenormalize_3_DenormalizeOut++;

/**
 * [tDenormalize_3_DenormalizeOut main ] stop
 */
	
	/**
	 * [tDenormalize_3_DenormalizeOut process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tDenormalize_3";
	
	currentComponent="tDenormalize_3_DenormalizeOut";
	
	

 



/**
 * [tDenormalize_3_DenormalizeOut process_data_begin ] stop
 */
	
	/**
	 * [tDenormalize_3_DenormalizeOut process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tDenormalize_3";
	
	currentComponent="tDenormalize_3_DenormalizeOut";
	
	

 



/**
 * [tDenormalize_3_DenormalizeOut process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_4";
	
	

 



/**
 * [tOracleInput_4 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_4 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_4";
	
	

}
}finally{
	if (rs_tOracleInput_4 != null) {
		rs_tOracleInput_4.close();
	}
	if (stmt_tOracleInput_4 != null) {
		stmt_tOracleInput_4.close();
	}
}

globalMap.put("tOracleInput_4_NB_LINE",nb_line_tOracleInput_4);
 

ok_Hash.put("tOracleInput_4", true);
end_Hash.put("tOracleInput_4", System.currentTimeMillis());




/**
 * [tOracleInput_4 end ] stop
 */

	
	/**
	 * [tDenormalize_3_DenormalizeOut end ] start
	 */

	

	
	
		currentVirtualComponent = "tDenormalize_3";
	
	currentComponent="tDenormalize_3_DenormalizeOut";
	
	
java.util.List<OnRowsEndStructtDenormalize_3> result_list_tDenormalize_3_DenormalizeOut = new java.util.ArrayList<OnRowsEndStructtDenormalize_3>();
if (denormalize_result_tDenormalize_3_DenormalizeOut != null) {
//generate result begin
	OnRowsEndStructtDenormalize_3 denormalize_row_tDenormalize_3_DenormalizeOut = new OnRowsEndStructtDenormalize_3();
                
	denormalize_row_tDenormalize_3_DenormalizeOut.NIVEL3 = denormalize_result_tDenormalize_3_DenormalizeOut.NIVEL3.toString();
	
	denormalize_row_tDenormalize_3_DenormalizeOut.CANT = denormalize_result_tDenormalize_3_DenormalizeOut.CANT.toString();
	
	denormalize_row_tDenormalize_3_DenormalizeOut.COLOR = denormalize_result_tDenormalize_3_DenormalizeOut.COLOR.toString();
	
	//in the deepest end
	
	result_list_tDenormalize_3_DenormalizeOut.add(denormalize_row_tDenormalize_3_DenormalizeOut);

}
//generate result end
globalMap.put("tDenormalize_3", result_list_tDenormalize_3_DenormalizeOut);
globalMap.put("tDenormalize_3_DenormalizeOut_NB_LINE", result_list_tDenormalize_3_DenormalizeOut.size()); 

        


				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row6");
			  	}
			  	
 

ok_Hash.put("tDenormalize_3_DenormalizeOut", true);
end_Hash.put("tDenormalize_3_DenormalizeOut", System.currentTimeMillis());




/**
 * [tDenormalize_3_DenormalizeOut end ] stop
 */


	
	/**
	 * [tJavaRow_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaRow_4", false);
		start_Hash.put("tJavaRow_4", System.currentTimeMillis());
		
	
	currentComponent="tJavaRow_4";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row17");
					}
				
		int tos_count_tJavaRow_4 = 0;
		

int nb_line_tJavaRow_4 = 0;

 



/**
 * [tJavaRow_4 begin ] stop
 */



	
	/**
	 * [tDenormalize_3_ArrayIn begin ] start
	 */

	

	
		
		ok_Hash.put("tDenormalize_3_ArrayIn", false);
		start_Hash.put("tDenormalize_3_ArrayIn", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tDenormalize_3";
	
	currentComponent="tDenormalize_3_ArrayIn";
	
	
		int tos_count_tDenormalize_3_ArrayIn = 0;
		

        
        int nb_line_tDenormalize_3_ArrayIn = 0;
        java.util.List<OnRowsEndStructtDenormalize_3> list_tDenormalize_3_ArrayIn = (java.util.List<OnRowsEndStructtDenormalize_3>)globalMap.get("tDenormalize_3");
        if(list_tDenormalize_3_ArrayIn == null) {
            list_tDenormalize_3_ArrayIn = new java.util.ArrayList<OnRowsEndStructtDenormalize_3>();
        }        
        for(OnRowsEndStructtDenormalize_3 row_tDenormalize_3_ArrayIn : list_tDenormalize_3_ArrayIn){
        					
    						row17.NIVEL3 = row_tDenormalize_3_ArrayIn.NIVEL3;
    											
    						row17.CANT = row_tDenormalize_3_ArrayIn.CANT;
    											
    						row17.COLOR = row_tDenormalize_3_ArrayIn.COLOR;
    						

 



/**
 * [tDenormalize_3_ArrayIn begin ] stop
 */
	
	/**
	 * [tDenormalize_3_ArrayIn main ] start
	 */

	

	
	
		currentVirtualComponent = "tDenormalize_3";
	
	currentComponent="tDenormalize_3_ArrayIn";
	
	

 


	tos_count_tDenormalize_3_ArrayIn++;

/**
 * [tDenormalize_3_ArrayIn main ] stop
 */
	
	/**
	 * [tDenormalize_3_ArrayIn process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tDenormalize_3";
	
	currentComponent="tDenormalize_3_ArrayIn";
	
	

 



/**
 * [tDenormalize_3_ArrayIn process_data_begin ] stop
 */

	
	/**
	 * [tJavaRow_4 main ] start
	 */

	

	
	
	currentComponent="tJavaRow_4";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row17"
						
						);
					}
					

    System.out.println("INICIA PROCESO: Header_Dinamic_nivel3");
SISPOI.Header_Dinamic_nivel3(row17.NIVEL3, row17.CANT, row17.COLOR);

    nb_line_tJavaRow_4++;   

 


	tos_count_tJavaRow_4++;

/**
 * [tJavaRow_4 main ] stop
 */
	
	/**
	 * [tJavaRow_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJavaRow_4";
	
	

 



/**
 * [tJavaRow_4 process_data_begin ] stop
 */
	
	/**
	 * [tJavaRow_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tJavaRow_4";
	
	

 



/**
 * [tJavaRow_4 process_data_end ] stop
 */



	
	/**
	 * [tDenormalize_3_ArrayIn process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tDenormalize_3";
	
	currentComponent="tDenormalize_3_ArrayIn";
	
	

 



/**
 * [tDenormalize_3_ArrayIn process_data_end ] stop
 */
	
	/**
	 * [tDenormalize_3_ArrayIn end ] start
	 */

	

	
	
		currentVirtualComponent = "tDenormalize_3";
	
	currentComponent="tDenormalize_3_ArrayIn";
	
	
	nb_line_tDenormalize_3_ArrayIn++;
}
globalMap.put("tDenormalize_3_ArrayIn_NB_LINE",nb_line_tDenormalize_3_ArrayIn);
 

ok_Hash.put("tDenormalize_3_ArrayIn", true);
end_Hash.put("tDenormalize_3_ArrayIn", System.currentTimeMillis());




/**
 * [tDenormalize_3_ArrayIn end ] stop
 */

	
	/**
	 * [tJavaRow_4 end ] start
	 */

	

	
	
	currentComponent="tJavaRow_4";
	
	

globalMap.put("tJavaRow_4_NB_LINE",nb_line_tJavaRow_4);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row17");
			  	}
			  	
 

ok_Hash.put("tJavaRow_4", true);
end_Hash.put("tJavaRow_4", System.currentTimeMillis());




/**
 * [tJavaRow_4 end ] stop
 */









				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tOracleInput_4:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk5", 0, "ok");
								} 
							
							tFixedFlowInput_1Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
					te.setVirtualComponentName(currentVirtualComponent);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
							//free memory for "tDenormalize_3_ArrayIn"
							globalMap.remove("tDenormalize_3");
						
				try{
					
	
	/**
	 * [tOracleInput_4 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_4";
	
	

 



/**
 * [tOracleInput_4 finally ] stop
 */

	
	/**
	 * [tDenormalize_3_DenormalizeOut finally ] start
	 */

	

	
	
		currentVirtualComponent = "tDenormalize_3";
	
	currentComponent="tDenormalize_3_DenormalizeOut";
	
	

 



/**
 * [tDenormalize_3_DenormalizeOut finally ] stop
 */

	
	/**
	 * [tDenormalize_3_ArrayIn finally ] start
	 */

	

	
	
		currentVirtualComponent = "tDenormalize_3";
	
	currentComponent="tDenormalize_3_ArrayIn";
	
	

 



/**
 * [tDenormalize_3_ArrayIn finally ] stop
 */

	
	/**
	 * [tJavaRow_4 finally ] start
	 */

	

	
	
	currentComponent="tJavaRow_4";
	
	

 



/**
 * [tJavaRow_4 finally ] stop
 */









				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_4_SUBPROCESS_STATE", 1);
	}
	


public static class row5Struct implements routines.system.IPersistableRow<row5Struct> {
    final static byte[] commonByteArrayLock_VAC_CONSOLIDADOS_VAC_SIS151 = new byte[0];
    static byte[] commonByteArray_VAC_CONSOLIDADOS_VAC_SIS151 = new byte[0];

	
			    public Integer SECCION;

				public Integer getSECCION () {
					return this.SECCION;
				}

				public Boolean SECCIONIsNullable(){
				    return true;
				}
				public Boolean SECCIONIsKey(){
				    return false;
				}
				public Integer SECCIONLength(){
				    return null;
				}
				public Integer SECCIONPrecision(){
				    return null;
				}
				public String SECCIONDefault(){
				
					return null;
				
				}
				public String SECCIONComment(){
				
				    return "";
				
				}
				public String SECCIONPattern(){
				
					return "";
				
				}
				public String SECCIONOriginalDbColumnName(){
				
					return "SECCION";
				
				}

				
			    public String SIS;

				public String getSIS () {
					return this.SIS;
				}

				public Boolean SISIsNullable(){
				    return true;
				}
				public Boolean SISIsKey(){
				    return false;
				}
				public Integer SISLength(){
				    return null;
				}
				public Integer SISPrecision(){
				    return null;
				}
				public String SISDefault(){
				
					return null;
				
				}
				public String SISComment(){
				
				    return "";
				
				}
				public String SISPattern(){
				
					return "";
				
				}
				public String SISOriginalDbColumnName(){
				
					return "SIS";
				
				}

				
			    public String COLOR;

				public String getCOLOR () {
					return this.COLOR;
				}

				public Boolean COLORIsNullable(){
				    return true;
				}
				public Boolean COLORIsKey(){
				    return false;
				}
				public Integer COLORLength(){
				    return null;
				}
				public Integer COLORPrecision(){
				    return null;
				}
				public String COLORDefault(){
				
					return null;
				
				}
				public String COLORComment(){
				
				    return "";
				
				}
				public String COLORPattern(){
				
					return "";
				
				}
				public String COLOROriginalDbColumnName(){
				
					return "COLOR";
				
				}

				
			    public Integer TOTAL_GRUPO;

				public Integer getTOTAL_GRUPO () {
					return this.TOTAL_GRUPO;
				}

				public Boolean TOTAL_GRUPOIsNullable(){
				    return true;
				}
				public Boolean TOTAL_GRUPOIsKey(){
				    return false;
				}
				public Integer TOTAL_GRUPOLength(){
				    return null;
				}
				public Integer TOTAL_GRUPOPrecision(){
				    return null;
				}
				public String TOTAL_GRUPODefault(){
				
					return null;
				
				}
				public String TOTAL_GRUPOComment(){
				
				    return "";
				
				}
				public String TOTAL_GRUPOPattern(){
				
					return "";
				
				}
				public String TOTAL_GRUPOOriginalDbColumnName(){
				
					return "TOTAL_GRUPO";
				
				}

				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_VAC_CONSOLIDADOS_VAC_SIS151.length) {
				if(length < 1024 && commonByteArray_VAC_CONSOLIDADOS_VAC_SIS151.length == 0) {
   					commonByteArray_VAC_CONSOLIDADOS_VAC_SIS151 = new byte[1024];
				} else {
   					commonByteArray_VAC_CONSOLIDADOS_VAC_SIS151 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_VAC_CONSOLIDADOS_VAC_SIS151, 0, length);
			strReturn = new String(commonByteArray_VAC_CONSOLIDADOS_VAC_SIS151, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_VAC_CONSOLIDADOS_VAC_SIS151.length) {
				if(length < 1024 && commonByteArray_VAC_CONSOLIDADOS_VAC_SIS151.length == 0) {
   					commonByteArray_VAC_CONSOLIDADOS_VAC_SIS151 = new byte[1024];
				} else {
   					commonByteArray_VAC_CONSOLIDADOS_VAC_SIS151 = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_VAC_CONSOLIDADOS_VAC_SIS151, 0, length);
			strReturn = new String(commonByteArray_VAC_CONSOLIDADOS_VAC_SIS151, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_VAC_CONSOLIDADOS_VAC_SIS151) {

        	try {

        		int length = 0;
		
						this.SECCION = readInteger(dis);
					
					this.SIS = readString(dis);
					
					this.COLOR = readString(dis);
					
						this.TOTAL_GRUPO = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_VAC_CONSOLIDADOS_VAC_SIS151) {

        	try {

        		int length = 0;
		
						this.SECCION = readInteger(dis);
					
					this.SIS = readString(dis);
					
					this.COLOR = readString(dis);
					
						this.TOTAL_GRUPO = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.SECCION,dos);
					
					// String
				
						writeString(this.SIS,dos);
					
					// String
				
						writeString(this.COLOR,dos);
					
					// Integer
				
						writeInteger(this.TOTAL_GRUPO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.SECCION,dos);
					
					// String
				
						writeString(this.SIS,dos);
					
					// String
				
						writeString(this.COLOR,dos);
					
					// Integer
				
						writeInteger(this.TOTAL_GRUPO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("SECCION="+String.valueOf(SECCION));
		sb.append(",SIS="+SIS);
		sb.append(",COLOR="+COLOR);
		sb.append(",TOTAL_GRUPO="+String.valueOf(TOTAL_GRUPO));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row5Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row4Struct implements routines.system.IPersistableRow<row4Struct> {
    final static byte[] commonByteArrayLock_VAC_CONSOLIDADOS_VAC_SIS151 = new byte[0];
    static byte[] commonByteArray_VAC_CONSOLIDADOS_VAC_SIS151 = new byte[0];

	
			    public String FUERZA_ID;

				public String getFUERZA_ID () {
					return this.FUERZA_ID;
				}

				public Boolean FUERZA_IDIsNullable(){
				    return true;
				}
				public Boolean FUERZA_IDIsKey(){
				    return false;
				}
				public Integer FUERZA_IDLength(){
				    return null;
				}
				public Integer FUERZA_IDPrecision(){
				    return null;
				}
				public String FUERZA_IDDefault(){
				
					return null;
				
				}
				public String FUERZA_IDComment(){
				
				    return "";
				
				}
				public String FUERZA_IDPattern(){
				
					return "";
				
				}
				public String FUERZA_IDOriginalDbColumnName(){
				
					return "FUERZA_ID";
				
				}

				
			    public Integer TOTAL;

				public Integer getTOTAL () {
					return this.TOTAL;
				}

				public Boolean TOTALIsNullable(){
				    return true;
				}
				public Boolean TOTALIsKey(){
				    return false;
				}
				public Integer TOTALLength(){
				    return null;
				}
				public Integer TOTALPrecision(){
				    return null;
				}
				public String TOTALDefault(){
				
					return null;
				
				}
				public String TOTALComment(){
				
				    return "";
				
				}
				public String TOTALPattern(){
				
					return "";
				
				}
				public String TOTALOriginalDbColumnName(){
				
					return "TOTAL";
				
				}

				
			    public String UORG_ID;

				public String getUORG_ID () {
					return this.UORG_ID;
				}

				public Boolean UORG_IDIsNullable(){
				    return true;
				}
				public Boolean UORG_IDIsKey(){
				    return false;
				}
				public Integer UORG_IDLength(){
				    return null;
				}
				public Integer UORG_IDPrecision(){
				    return null;
				}
				public String UORG_IDDefault(){
				
					return null;
				
				}
				public String UORG_IDComment(){
				
				    return "";
				
				}
				public String UORG_IDPattern(){
				
					return "";
				
				}
				public String UORG_IDOriginalDbColumnName(){
				
					return "UORG_ID";
				
				}

				
			    public String CODDEPTO;

				public String getCODDEPTO () {
					return this.CODDEPTO;
				}

				public Boolean CODDEPTOIsNullable(){
				    return true;
				}
				public Boolean CODDEPTOIsKey(){
				    return false;
				}
				public Integer CODDEPTOLength(){
				    return null;
				}
				public Integer CODDEPTOPrecision(){
				    return null;
				}
				public String CODDEPTODefault(){
				
					return null;
				
				}
				public String CODDEPTOComment(){
				
				    return "";
				
				}
				public String CODDEPTOPattern(){
				
					return "";
				
				}
				public String CODDEPTOOriginalDbColumnName(){
				
					return "CODDEPTO";
				
				}

				
			    public String CODMCPIO;

				public String getCODMCPIO () {
					return this.CODMCPIO;
				}

				public Boolean CODMCPIOIsNullable(){
				    return true;
				}
				public Boolean CODMCPIOIsKey(){
				    return false;
				}
				public Integer CODMCPIOLength(){
				    return null;
				}
				public Integer CODMCPIOPrecision(){
				    return null;
				}
				public String CODMCPIODefault(){
				
					return null;
				
				}
				public String CODMCPIOComment(){
				
				    return "";
				
				}
				public String CODMCPIOPattern(){
				
					return "";
				
				}
				public String CODMCPIOOriginalDbColumnName(){
				
					return "CODMCPIO";
				
				}

				
			    public String ESQUEMA;

				public String getESQUEMA () {
					return this.ESQUEMA;
				}

				public Boolean ESQUEMAIsNullable(){
				    return true;
				}
				public Boolean ESQUEMAIsKey(){
				    return false;
				}
				public Integer ESQUEMALength(){
				    return null;
				}
				public Integer ESQUEMAPrecision(){
				    return null;
				}
				public String ESQUEMADefault(){
				
					return null;
				
				}
				public String ESQUEMAComment(){
				
				    return "";
				
				}
				public String ESQUEMAPattern(){
				
					return "";
				
				}
				public String ESQUEMAOriginalDbColumnName(){
				
					return "ESQUEMA";
				
				}

				
			    public String PERIODO;

				public String getPERIODO () {
					return this.PERIODO;
				}

				public Boolean PERIODOIsNullable(){
				    return true;
				}
				public Boolean PERIODOIsKey(){
				    return false;
				}
				public Integer PERIODOLength(){
				    return null;
				}
				public Integer PERIODOPrecision(){
				    return null;
				}
				public String PERIODODefault(){
				
					return null;
				
				}
				public String PERIODOComment(){
				
				    return "";
				
				}
				public String PERIODOPattern(){
				
					return "";
				
				}
				public String PERIODOOriginalDbColumnName(){
				
					return "PERIODO";
				
				}

				
			    public Object DATOS;

				public Object getDATOS () {
					return this.DATOS;
				}

				public Boolean DATOSIsNullable(){
				    return true;
				}
				public Boolean DATOSIsKey(){
				    return false;
				}
				public Integer DATOSLength(){
				    return null;
				}
				public Integer DATOSPrecision(){
				    return null;
				}
				public String DATOSDefault(){
				
					return null;
				
				}
				public String DATOSComment(){
				
				    return "";
				
				}
				public String DATOSPattern(){
				
					return "";
				
				}
				public String DATOSOriginalDbColumnName(){
				
					return "DATOS";
				
				}

				
			    public String SPROC;

				public String getSPROC () {
					return this.SPROC;
				}

				public Boolean SPROCIsNullable(){
				    return true;
				}
				public Boolean SPROCIsKey(){
				    return false;
				}
				public Integer SPROCLength(){
				    return null;
				}
				public Integer SPROCPrecision(){
				    return null;
				}
				public String SPROCDefault(){
				
					return null;
				
				}
				public String SPROCComment(){
				
				    return "";
				
				}
				public String SPROCPattern(){
				
					return "";
				
				}
				public String SPROCOriginalDbColumnName(){
				
					return "SPROC";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_VAC_CONSOLIDADOS_VAC_SIS151.length) {
				if(length < 1024 && commonByteArray_VAC_CONSOLIDADOS_VAC_SIS151.length == 0) {
   					commonByteArray_VAC_CONSOLIDADOS_VAC_SIS151 = new byte[1024];
				} else {
   					commonByteArray_VAC_CONSOLIDADOS_VAC_SIS151 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_VAC_CONSOLIDADOS_VAC_SIS151, 0, length);
			strReturn = new String(commonByteArray_VAC_CONSOLIDADOS_VAC_SIS151, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_VAC_CONSOLIDADOS_VAC_SIS151.length) {
				if(length < 1024 && commonByteArray_VAC_CONSOLIDADOS_VAC_SIS151.length == 0) {
   					commonByteArray_VAC_CONSOLIDADOS_VAC_SIS151 = new byte[1024];
				} else {
   					commonByteArray_VAC_CONSOLIDADOS_VAC_SIS151 = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_VAC_CONSOLIDADOS_VAC_SIS151, 0, length);
			strReturn = new String(commonByteArray_VAC_CONSOLIDADOS_VAC_SIS151, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_VAC_CONSOLIDADOS_VAC_SIS151) {

        	try {

        		int length = 0;
		
					this.FUERZA_ID = readString(dis);
					
						this.TOTAL = readInteger(dis);
					
					this.UORG_ID = readString(dis);
					
					this.CODDEPTO = readString(dis);
					
					this.CODMCPIO = readString(dis);
					
					this.ESQUEMA = readString(dis);
					
					this.PERIODO = readString(dis);
					
						this.DATOS = (Object) dis.readObject();
					
					this.SPROC = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_VAC_CONSOLIDADOS_VAC_SIS151) {

        	try {

        		int length = 0;
		
					this.FUERZA_ID = readString(dis);
					
						this.TOTAL = readInteger(dis);
					
					this.UORG_ID = readString(dis);
					
					this.CODDEPTO = readString(dis);
					
					this.CODMCPIO = readString(dis);
					
					this.ESQUEMA = readString(dis);
					
					this.PERIODO = readString(dis);
					
						this.DATOS = (Object) dis.readObject();
					
					this.SPROC = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.FUERZA_ID,dos);
					
					// Integer
				
						writeInteger(this.TOTAL,dos);
					
					// String
				
						writeString(this.UORG_ID,dos);
					
					// String
				
						writeString(this.CODDEPTO,dos);
					
					// String
				
						writeString(this.CODMCPIO,dos);
					
					// String
				
						writeString(this.ESQUEMA,dos);
					
					// String
				
						writeString(this.PERIODO,dos);
					
					// Object
				
       			    	dos.writeObject(this.DATOS);
					
					// String
				
						writeString(this.SPROC,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.FUERZA_ID,dos);
					
					// Integer
				
						writeInteger(this.TOTAL,dos);
					
					// String
				
						writeString(this.UORG_ID,dos);
					
					// String
				
						writeString(this.CODDEPTO,dos);
					
					// String
				
						writeString(this.CODMCPIO,dos);
					
					// String
				
						writeString(this.ESQUEMA,dos);
					
					// String
				
						writeString(this.PERIODO,dos);
					
					// Object
				
						dos.clearInstanceCache();
						dos.writeObject(this.DATOS);
					
					// String
				
						writeString(this.SPROC,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("FUERZA_ID="+FUERZA_ID);
		sb.append(",TOTAL="+String.valueOf(TOTAL));
		sb.append(",UORG_ID="+UORG_ID);
		sb.append(",CODDEPTO="+CODDEPTO);
		sb.append(",CODMCPIO="+CODMCPIO);
		sb.append(",ESQUEMA="+ESQUEMA);
		sb.append(",PERIODO="+PERIODO);
		sb.append(",DATOS="+String.valueOf(DATOS));
		sb.append(",SPROC="+SPROC);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row4Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row8Struct implements routines.system.IPersistableRow<row8Struct> {
    final static byte[] commonByteArrayLock_VAC_CONSOLIDADOS_VAC_SIS151 = new byte[0];
    static byte[] commonByteArray_VAC_CONSOLIDADOS_VAC_SIS151 = new byte[0];

	
			    public String FUERZA_ID;

				public String getFUERZA_ID () {
					return this.FUERZA_ID;
				}

				public Boolean FUERZA_IDIsNullable(){
				    return true;
				}
				public Boolean FUERZA_IDIsKey(){
				    return false;
				}
				public Integer FUERZA_IDLength(){
				    return null;
				}
				public Integer FUERZA_IDPrecision(){
				    return null;
				}
				public String FUERZA_IDDefault(){
				
					return null;
				
				}
				public String FUERZA_IDComment(){
				
				    return "";
				
				}
				public String FUERZA_IDPattern(){
				
					return "";
				
				}
				public String FUERZA_IDOriginalDbColumnName(){
				
					return "FUERZA_ID";
				
				}

				
			    public Integer TOTAL;

				public Integer getTOTAL () {
					return this.TOTAL;
				}

				public Boolean TOTALIsNullable(){
				    return true;
				}
				public Boolean TOTALIsKey(){
				    return false;
				}
				public Integer TOTALLength(){
				    return null;
				}
				public Integer TOTALPrecision(){
				    return null;
				}
				public String TOTALDefault(){
				
					return null;
				
				}
				public String TOTALComment(){
				
				    return "";
				
				}
				public String TOTALPattern(){
				
					return "";
				
				}
				public String TOTALOriginalDbColumnName(){
				
					return "TOTAL";
				
				}

				
			    public String UORG_ID;

				public String getUORG_ID () {
					return this.UORG_ID;
				}

				public Boolean UORG_IDIsNullable(){
				    return true;
				}
				public Boolean UORG_IDIsKey(){
				    return false;
				}
				public Integer UORG_IDLength(){
				    return null;
				}
				public Integer UORG_IDPrecision(){
				    return null;
				}
				public String UORG_IDDefault(){
				
					return null;
				
				}
				public String UORG_IDComment(){
				
				    return "";
				
				}
				public String UORG_IDPattern(){
				
					return "";
				
				}
				public String UORG_IDOriginalDbColumnName(){
				
					return "UORG_ID";
				
				}

				
			    public String CODDEPTO;

				public String getCODDEPTO () {
					return this.CODDEPTO;
				}

				public Boolean CODDEPTOIsNullable(){
				    return true;
				}
				public Boolean CODDEPTOIsKey(){
				    return false;
				}
				public Integer CODDEPTOLength(){
				    return null;
				}
				public Integer CODDEPTOPrecision(){
				    return null;
				}
				public String CODDEPTODefault(){
				
					return null;
				
				}
				public String CODDEPTOComment(){
				
				    return "";
				
				}
				public String CODDEPTOPattern(){
				
					return "";
				
				}
				public String CODDEPTOOriginalDbColumnName(){
				
					return "CODDEPTO";
				
				}

				
			    public String CODMCPIO;

				public String getCODMCPIO () {
					return this.CODMCPIO;
				}

				public Boolean CODMCPIOIsNullable(){
				    return true;
				}
				public Boolean CODMCPIOIsKey(){
				    return false;
				}
				public Integer CODMCPIOLength(){
				    return null;
				}
				public Integer CODMCPIOPrecision(){
				    return null;
				}
				public String CODMCPIODefault(){
				
					return null;
				
				}
				public String CODMCPIOComment(){
				
				    return "";
				
				}
				public String CODMCPIOPattern(){
				
					return "";
				
				}
				public String CODMCPIOOriginalDbColumnName(){
				
					return "CODMCPIO";
				
				}

				
			    public String ESQUEMA;

				public String getESQUEMA () {
					return this.ESQUEMA;
				}

				public Boolean ESQUEMAIsNullable(){
				    return true;
				}
				public Boolean ESQUEMAIsKey(){
				    return false;
				}
				public Integer ESQUEMALength(){
				    return null;
				}
				public Integer ESQUEMAPrecision(){
				    return null;
				}
				public String ESQUEMADefault(){
				
					return null;
				
				}
				public String ESQUEMAComment(){
				
				    return "";
				
				}
				public String ESQUEMAPattern(){
				
					return "";
				
				}
				public String ESQUEMAOriginalDbColumnName(){
				
					return "ESQUEMA";
				
				}

				
			    public String PERIODO;

				public String getPERIODO () {
					return this.PERIODO;
				}

				public Boolean PERIODOIsNullable(){
				    return true;
				}
				public Boolean PERIODOIsKey(){
				    return false;
				}
				public Integer PERIODOLength(){
				    return null;
				}
				public Integer PERIODOPrecision(){
				    return null;
				}
				public String PERIODODefault(){
				
					return null;
				
				}
				public String PERIODOComment(){
				
				    return "";
				
				}
				public String PERIODOPattern(){
				
					return "";
				
				}
				public String PERIODOOriginalDbColumnName(){
				
					return "PERIODO";
				
				}

				
			    public Object DATOS;

				public Object getDATOS () {
					return this.DATOS;
				}

				public Boolean DATOSIsNullable(){
				    return true;
				}
				public Boolean DATOSIsKey(){
				    return false;
				}
				public Integer DATOSLength(){
				    return null;
				}
				public Integer DATOSPrecision(){
				    return null;
				}
				public String DATOSDefault(){
				
					return null;
				
				}
				public String DATOSComment(){
				
				    return "";
				
				}
				public String DATOSPattern(){
				
					return "";
				
				}
				public String DATOSOriginalDbColumnName(){
				
					return "DATOS";
				
				}

				
			    public String SPROC;

				public String getSPROC () {
					return this.SPROC;
				}

				public Boolean SPROCIsNullable(){
				    return true;
				}
				public Boolean SPROCIsKey(){
				    return false;
				}
				public Integer SPROCLength(){
				    return null;
				}
				public Integer SPROCPrecision(){
				    return null;
				}
				public String SPROCDefault(){
				
					return null;
				
				}
				public String SPROCComment(){
				
				    return "";
				
				}
				public String SPROCPattern(){
				
					return "";
				
				}
				public String SPROCOriginalDbColumnName(){
				
					return "SPROC";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_VAC_CONSOLIDADOS_VAC_SIS151.length) {
				if(length < 1024 && commonByteArray_VAC_CONSOLIDADOS_VAC_SIS151.length == 0) {
   					commonByteArray_VAC_CONSOLIDADOS_VAC_SIS151 = new byte[1024];
				} else {
   					commonByteArray_VAC_CONSOLIDADOS_VAC_SIS151 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_VAC_CONSOLIDADOS_VAC_SIS151, 0, length);
			strReturn = new String(commonByteArray_VAC_CONSOLIDADOS_VAC_SIS151, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_VAC_CONSOLIDADOS_VAC_SIS151.length) {
				if(length < 1024 && commonByteArray_VAC_CONSOLIDADOS_VAC_SIS151.length == 0) {
   					commonByteArray_VAC_CONSOLIDADOS_VAC_SIS151 = new byte[1024];
				} else {
   					commonByteArray_VAC_CONSOLIDADOS_VAC_SIS151 = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_VAC_CONSOLIDADOS_VAC_SIS151, 0, length);
			strReturn = new String(commonByteArray_VAC_CONSOLIDADOS_VAC_SIS151, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_VAC_CONSOLIDADOS_VAC_SIS151) {

        	try {

        		int length = 0;
		
					this.FUERZA_ID = readString(dis);
					
						this.TOTAL = readInteger(dis);
					
					this.UORG_ID = readString(dis);
					
					this.CODDEPTO = readString(dis);
					
					this.CODMCPIO = readString(dis);
					
					this.ESQUEMA = readString(dis);
					
					this.PERIODO = readString(dis);
					
						this.DATOS = (Object) dis.readObject();
					
					this.SPROC = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_VAC_CONSOLIDADOS_VAC_SIS151) {

        	try {

        		int length = 0;
		
					this.FUERZA_ID = readString(dis);
					
						this.TOTAL = readInteger(dis);
					
					this.UORG_ID = readString(dis);
					
					this.CODDEPTO = readString(dis);
					
					this.CODMCPIO = readString(dis);
					
					this.ESQUEMA = readString(dis);
					
					this.PERIODO = readString(dis);
					
						this.DATOS = (Object) dis.readObject();
					
					this.SPROC = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.FUERZA_ID,dos);
					
					// Integer
				
						writeInteger(this.TOTAL,dos);
					
					// String
				
						writeString(this.UORG_ID,dos);
					
					// String
				
						writeString(this.CODDEPTO,dos);
					
					// String
				
						writeString(this.CODMCPIO,dos);
					
					// String
				
						writeString(this.ESQUEMA,dos);
					
					// String
				
						writeString(this.PERIODO,dos);
					
					// Object
				
       			    	dos.writeObject(this.DATOS);
					
					// String
				
						writeString(this.SPROC,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.FUERZA_ID,dos);
					
					// Integer
				
						writeInteger(this.TOTAL,dos);
					
					// String
				
						writeString(this.UORG_ID,dos);
					
					// String
				
						writeString(this.CODDEPTO,dos);
					
					// String
				
						writeString(this.CODMCPIO,dos);
					
					// String
				
						writeString(this.ESQUEMA,dos);
					
					// String
				
						writeString(this.PERIODO,dos);
					
					// Object
				
						dos.clearInstanceCache();
						dos.writeObject(this.DATOS);
					
					// String
				
						writeString(this.SPROC,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("FUERZA_ID="+FUERZA_ID);
		sb.append(",TOTAL="+String.valueOf(TOTAL));
		sb.append(",UORG_ID="+UORG_ID);
		sb.append(",CODDEPTO="+CODDEPTO);
		sb.append(",CODMCPIO="+CODMCPIO);
		sb.append(",ESQUEMA="+ESQUEMA);
		sb.append(",PERIODO="+PERIODO);
		sb.append(",DATOS="+String.valueOf(DATOS));
		sb.append(",SPROC="+SPROC);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row8Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tFixedFlowInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFixedFlowInput_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row8Struct row8 = new row8Struct();
row4Struct row4 = new row4Struct();
row5Struct row5 = new row5Struct();






	
	/**
	 * [tHashOutput_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashOutput_4", false);
		start_Hash.put("tHashOutput_4", System.currentTimeMillis());
		
	
	currentComponent="tHashOutput_4";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row5");
					}
				
		int tos_count_tHashOutput_4 = 0;
		



org.talend.designer.components.hashfile.common.MapHashFile mf_tHashOutput_4=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();    
		org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row5Struct> tHashFile_tHashOutput_4 = null;
		String hashKey_tHashOutput_4 = "tHashFile_SIS151_" + pid + "_tHashOutput_4";
			synchronized(org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.get(hashKey_tHashOutput_4)){
			    if(mf_tHashOutput_4.getResourceMap().get(hashKey_tHashOutput_4) == null){
	      		    mf_tHashOutput_4.getResourceMap().put(hashKey_tHashOutput_4, new org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row5Struct>(org.talend.designer.components.hashfile.common.MATCHING_MODE.KEEP_ALL));
	      		    tHashFile_tHashOutput_4 = mf_tHashOutput_4.getResourceMap().get(hashKey_tHashOutput_4);
			    }else{
			    	tHashFile_tHashOutput_4 = mf_tHashOutput_4.getResourceMap().get(hashKey_tHashOutput_4);
			    }
			}
        int nb_line_tHashOutput_4 = 0;

 



/**
 * [tHashOutput_4 begin ] stop
 */



	
	/**
	 * [tParseRecordSet_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tParseRecordSet_1", false);
		start_Hash.put("tParseRecordSet_1", System.currentTimeMillis());
		
	
	currentComponent="tParseRecordSet_1";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row4");
					}
				
		int tos_count_tParseRecordSet_1 = 0;
		

int nb_line_tParseRecordSet_1 = 0;
 



/**
 * [tParseRecordSet_1 begin ] stop
 */



	
	/**
	 * [tOracleSP_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleSP_1", false);
		start_Hash.put("tOracleSP_1", System.currentTimeMillis());
		
	
	currentComponent="tOracleSP_1";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row8");
					}
				
		int tos_count_tOracleSP_1 = 0;
		

	java.sql.Connection connection_tOracleSP_1 = null;
	connection_tOracleSP_1 = (java.sql.Connection) globalMap.get("conn_tOracleConnection_3");
	

java.sql.CallableStatement statement_tOracleSP_1 = connection_tOracleSP_1.prepareCall("{call " + "REP.Getsis151" + "(?,?,?,?,?,?,?,?,?)}");

java.sql.Timestamp tmpDate_tOracleSP_1;
String tmpString_tOracleSP_1;

 



/**
 * [tOracleSP_1 begin ] stop
 */



	
	/**
	 * [tFixedFlowInput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFixedFlowInput_1", false);
		start_Hash.put("tFixedFlowInput_1", System.currentTimeMillis());
		
	
	currentComponent="tFixedFlowInput_1";
	
	
		int tos_count_tFixedFlowInput_1 = 0;
		

	    for (int i_tFixedFlowInput_1 = 0 ; i_tFixedFlowInput_1 < 1 ; i_tFixedFlowInput_1++) {
	                	            	
    	            		row8.FUERZA_ID = context.FUERZA_ID;
    	            	        	            	
    	            		row8.TOTAL = 0;
    	            	        	            	
    	            		row8.UORG_ID = context.UORG_ID;
    	            	        	            	
    	            		row8.CODDEPTO = context.DPTO_COD;
    	            	        	            	
    	            		row8.CODMCPIO = context.MCPIO_COD;
    	            	        	            	
    	            		row8.ESQUEMA = context.TESQUEMA;
    	            	        	            	
    	            		row8.PERIODO = context.PERIODO;
    	            	        	            	
    	            		row8.DATOS = null;        	            	
    	            	        	            	
    	            		row8.SPROC = null;        	            	
    	            	

 



/**
 * [tFixedFlowInput_1 begin ] stop
 */
	
	/**
	 * [tFixedFlowInput_1 main ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_1";
	
	

 


	tos_count_tFixedFlowInput_1++;

/**
 * [tFixedFlowInput_1 main ] stop
 */
	
	/**
	 * [tFixedFlowInput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_1";
	
	

 



/**
 * [tFixedFlowInput_1 process_data_begin ] stop
 */

	
	/**
	 * [tOracleSP_1 main ] start
	 */

	

	
	
	currentComponent="tOracleSP_1";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row8"
						
						);
					}
					

			// code for the argument 1 (FUERZA_ID) of type 'IN AUTOMAPPING'
    					if (row8.FUERZA_ID == null) {
    						statement_tOracleSP_1.setNull(1, java.sql.Types.VARCHAR);
    					} else {
    					
                        statement_tOracleSP_1.setString(1, row8.FUERZA_ID);
    					}
    					
			// code for the argument 2 (TOTAL) of type 'IN AUTOMAPPING'
    					if (row8.TOTAL == null) {
    						statement_tOracleSP_1.setNull(2, java.sql.Types.INTEGER);
    					} else {
    					
                        statement_tOracleSP_1.setInt(2, row8.TOTAL);
    					}
    					
			// code for the argument 3 (UORG_ID) of type 'IN AUTOMAPPING'
    					if (row8.UORG_ID == null) {
    						statement_tOracleSP_1.setNull(3, java.sql.Types.VARCHAR);
    					} else {
    					
                        statement_tOracleSP_1.setString(3, row8.UORG_ID);
    					}
    					
			// code for the argument 4 (CODDEPTO) of type 'IN AUTOMAPPING'
    					if (row8.CODDEPTO == null) {
    						statement_tOracleSP_1.setNull(4, java.sql.Types.VARCHAR);
    					} else {
    					
                        statement_tOracleSP_1.setString(4, row8.CODDEPTO);
    					}
    					
			// code for the argument 5 (CODMCPIO) of type 'IN AUTOMAPPING'
    					if (row8.CODMCPIO == null) {
    						statement_tOracleSP_1.setNull(5, java.sql.Types.VARCHAR);
    					} else {
    					
                        statement_tOracleSP_1.setString(5, row8.CODMCPIO);
    					}
    					
			// code for the argument 6 (ESQUEMA) of type 'IN AUTOMAPPING'
    					if (row8.ESQUEMA == null) {
    						statement_tOracleSP_1.setNull(6, java.sql.Types.VARCHAR);
    					} else {
    					
                        statement_tOracleSP_1.setString(6, row8.ESQUEMA);
    					}
    					
			// code for the argument 7 (PERIODO) of type 'IN AUTOMAPPING'
    					if (row8.PERIODO == null) {
    						statement_tOracleSP_1.setNull(7, java.sql.Types.VARCHAR);
    					} else {
    					
                        statement_tOracleSP_1.setString(7, row8.PERIODO);
    					}
    					
			// code for the argument 8 (DATOS) of type 'RECORDSET AUTOMAPPING'
				statement_tOracleSP_1.registerOutParameter(8, oracle.jdbc.OracleTypes.CURSOR);
			// code for the argument 9 (SPROC) of type 'OUT AUTOMAPPING'
					statement_tOracleSP_1.registerOutParameter(9, java.sql.Types.VARCHAR);
		statement_tOracleSP_1.execute();
		
								row4.FUERZA_ID = row8.FUERZA_ID;
								
								row4.TOTAL = row8.TOTAL;
								
								row4.UORG_ID = row8.UORG_ID;
								
								row4.CODDEPTO = row8.CODDEPTO;
								
								row4.CODMCPIO = row8.CODMCPIO;
								
								row4.ESQUEMA = row8.ESQUEMA;
								
								row4.PERIODO = row8.PERIODO;
								
								row4.DATOS = statement_tOracleSP_1.getObject(8);
									row4.SPROC = statement_tOracleSP_1.getString(9);
									
									if (statement_tOracleSP_1.wasNull()) {
										row4.SPROC = null;
									}
									

 


	tos_count_tOracleSP_1++;

/**
 * [tOracleSP_1 main ] stop
 */
	
	/**
	 * [tOracleSP_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleSP_1";
	
	

 



/**
 * [tOracleSP_1 process_data_begin ] stop
 */

	
	/**
	 * [tParseRecordSet_1 main ] start
	 */

	

	
	
	currentComponent="tParseRecordSet_1";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row4"
						
						);
					}
					

	java.sql.ResultSet re_tParseRecordSet_1 = (java.sql.ResultSet)row4.DATOS;
	boolean hasNextRecord_tParseRecordSet_1=false;
	String res_str_tParseRecordSet_1 = null;
	java.sql.Timestamp res_ts_tParseRecordSet_1 = null;
    while (true) {
	try{
		hasNextRecord_tParseRecordSet_1=re_tParseRecordSet_1.next();
	}catch(java.lang.Exception e_tParseRecordSet_1){
globalMap.put("tParseRecordSet_1_ERROR_MESSAGE",e_tParseRecordSet_1.getMessage());
		hasNextRecord_tParseRecordSet_1=false;
	}
	if (!hasNextRecord_tParseRecordSet_1) {
		break;
	}
	nb_line_tParseRecordSet_1++;	
	res_str_tParseRecordSet_1 = re_tParseRecordSet_1.getString("SECCION");
	if(res_str_tParseRecordSet_1!=null){
		row5.SECCION = ParserUtils.parseTo_Integer(res_str_tParseRecordSet_1.trim());
	}else{
		//row5.SECCION = ParserUtils.parseTo_Integer(res_str_tParseRecordSet_1);
		row5.SECCION = null;		
	}
	res_str_tParseRecordSet_1 = re_tParseRecordSet_1.getString("SIS");
	if(res_str_tParseRecordSet_1 != null){
		row5.SIS = res_str_tParseRecordSet_1.trim();
	}else{
		//row5.SIS = res_str_tParseRecordSet_1;
		row5.SIS = null;
	}
	res_str_tParseRecordSet_1 = re_tParseRecordSet_1.getString("COLOR");
	if(res_str_tParseRecordSet_1 != null){
		row5.COLOR = res_str_tParseRecordSet_1.trim();
	}else{
		//row5.COLOR = res_str_tParseRecordSet_1;
		row5.COLOR = null;
	}
	res_str_tParseRecordSet_1 = re_tParseRecordSet_1.getString("TOTAL_GRUPO");
	if(res_str_tParseRecordSet_1!=null){
		row5.TOTAL_GRUPO = ParserUtils.parseTo_Integer(res_str_tParseRecordSet_1.trim());
	}else{
		//row5.TOTAL_GRUPO = ParserUtils.parseTo_Integer(res_str_tParseRecordSet_1);
		row5.TOTAL_GRUPO = null;		
	}




			

 


	tos_count_tParseRecordSet_1++;

/**
 * [tParseRecordSet_1 main ] stop
 */
	
	/**
	 * [tParseRecordSet_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tParseRecordSet_1";
	
	

 



/**
 * [tParseRecordSet_1 process_data_begin ] stop
 */

	
	/**
	 * [tHashOutput_4 main ] start
	 */

	

	
	
	currentComponent="tHashOutput_4";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row5"
						
						);
					}
					



    
		row5Struct oneRow_tHashOutput_4 = new row5Struct();
				
					oneRow_tHashOutput_4.SECCION = row5.SECCION;
					oneRow_tHashOutput_4.SIS = row5.SIS;
					oneRow_tHashOutput_4.COLOR = row5.COLOR;
					oneRow_tHashOutput_4.TOTAL_GRUPO = row5.TOTAL_GRUPO;
		
        tHashFile_tHashOutput_4.put(oneRow_tHashOutput_4);
        nb_line_tHashOutput_4 ++;

 


	tos_count_tHashOutput_4++;

/**
 * [tHashOutput_4 main ] stop
 */
	
	/**
	 * [tHashOutput_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashOutput_4";
	
	

 



/**
 * [tHashOutput_4 process_data_begin ] stop
 */
	
	/**
	 * [tHashOutput_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashOutput_4";
	
	

 



/**
 * [tHashOutput_4 process_data_end ] stop
 */
		// end for
	}



	
	/**
	 * [tParseRecordSet_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tParseRecordSet_1";
	
	

 



/**
 * [tParseRecordSet_1 process_data_end ] stop
 */



	
	/**
	 * [tOracleSP_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleSP_1";
	
	

 



/**
 * [tOracleSP_1 process_data_end ] stop
 */



	
	/**
	 * [tFixedFlowInput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_1";
	
	

 



/**
 * [tFixedFlowInput_1 process_data_end ] stop
 */
	
	/**
	 * [tFixedFlowInput_1 end ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_1";
	
	

        }
        globalMap.put("tFixedFlowInput_1_NB_LINE", 1);        

 

ok_Hash.put("tFixedFlowInput_1", true);
end_Hash.put("tFixedFlowInput_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk22", 0, "ok");
				}
				tFixedFlowInput_3Process(globalMap);



/**
 * [tFixedFlowInput_1 end ] stop
 */

	
	/**
	 * [tOracleSP_1 end ] start
	 */

	

	
	
	currentComponent="tOracleSP_1";
	
	


	statement_tOracleSP_1.close();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row8");
			  	}
			  	
 

ok_Hash.put("tOracleSP_1", true);
end_Hash.put("tOracleSP_1", System.currentTimeMillis());




/**
 * [tOracleSP_1 end ] stop
 */

	
	/**
	 * [tParseRecordSet_1 end ] start
	 */

	

	
	
	currentComponent="tParseRecordSet_1";
	
	

globalMap.put("tParseRecordSet_1_NB_LINE",nb_line_tParseRecordSet_1);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row4");
			  	}
			  	
 

ok_Hash.put("tParseRecordSet_1", true);
end_Hash.put("tParseRecordSet_1", System.currentTimeMillis());




/**
 * [tParseRecordSet_1 end ] stop
 */

	
	/**
	 * [tHashOutput_4 end ] start
	 */

	

	
	
	currentComponent="tHashOutput_4";
	
	
globalMap.put("tHashOutput_4_NB_LINE", nb_line_tHashOutput_4);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row5");
			  	}
			  	
 

ok_Hash.put("tHashOutput_4", true);
end_Hash.put("tHashOutput_4", System.currentTimeMillis());




/**
 * [tHashOutput_4 end ] stop
 */









				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFixedFlowInput_1 finally ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_1";
	
	

 



/**
 * [tFixedFlowInput_1 finally ] stop
 */

	
	/**
	 * [tOracleSP_1 finally ] start
	 */

	

	
	
	currentComponent="tOracleSP_1";
	
	

 



/**
 * [tOracleSP_1 finally ] stop
 */

	
	/**
	 * [tParseRecordSet_1 finally ] start
	 */

	

	
	
	currentComponent="tParseRecordSet_1";
	
	

 



/**
 * [tParseRecordSet_1 finally ] stop
 */

	
	/**
	 * [tHashOutput_4 finally ] start
	 */

	

	
	
	currentComponent="tHashOutput_4";
	
	

 



/**
 * [tHashOutput_4 finally ] stop
 */









				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFixedFlowInput_1_SUBPROCESS_STATE", 1);
	}
	


public static class row10Struct implements routines.system.IPersistableRow<row10Struct> {
    final static byte[] commonByteArrayLock_VAC_CONSOLIDADOS_VAC_SIS151 = new byte[0];
    static byte[] commonByteArray_VAC_CONSOLIDADOS_VAC_SIS151 = new byte[0];

	
			    public Integer SECCION;

				public Integer getSECCION () {
					return this.SECCION;
				}

				public Boolean SECCIONIsNullable(){
				    return true;
				}
				public Boolean SECCIONIsKey(){
				    return false;
				}
				public Integer SECCIONLength(){
				    return null;
				}
				public Integer SECCIONPrecision(){
				    return null;
				}
				public String SECCIONDefault(){
				
					return null;
				
				}
				public String SECCIONComment(){
				
				    return "";
				
				}
				public String SECCIONPattern(){
				
					return "";
				
				}
				public String SECCIONOriginalDbColumnName(){
				
					return "SECCION";
				
				}

				
			    public String SIS;

				public String getSIS () {
					return this.SIS;
				}

				public Boolean SISIsNullable(){
				    return true;
				}
				public Boolean SISIsKey(){
				    return false;
				}
				public Integer SISLength(){
				    return null;
				}
				public Integer SISPrecision(){
				    return null;
				}
				public String SISDefault(){
				
					return null;
				
				}
				public String SISComment(){
				
				    return "";
				
				}
				public String SISPattern(){
				
					return "";
				
				}
				public String SISOriginalDbColumnName(){
				
					return "SIS";
				
				}

				
			    public String COLOR;

				public String getCOLOR () {
					return this.COLOR;
				}

				public Boolean COLORIsNullable(){
				    return true;
				}
				public Boolean COLORIsKey(){
				    return false;
				}
				public Integer COLORLength(){
				    return null;
				}
				public Integer COLORPrecision(){
				    return null;
				}
				public String COLORDefault(){
				
					return null;
				
				}
				public String COLORComment(){
				
				    return "";
				
				}
				public String COLORPattern(){
				
					return "";
				
				}
				public String COLOROriginalDbColumnName(){
				
					return "COLOR";
				
				}

				
			    public Integer TOTAL_GRUPO;

				public Integer getTOTAL_GRUPO () {
					return this.TOTAL_GRUPO;
				}

				public Boolean TOTAL_GRUPOIsNullable(){
				    return true;
				}
				public Boolean TOTAL_GRUPOIsKey(){
				    return false;
				}
				public Integer TOTAL_GRUPOLength(){
				    return null;
				}
				public Integer TOTAL_GRUPOPrecision(){
				    return null;
				}
				public String TOTAL_GRUPODefault(){
				
					return null;
				
				}
				public String TOTAL_GRUPOComment(){
				
				    return "";
				
				}
				public String TOTAL_GRUPOPattern(){
				
					return "";
				
				}
				public String TOTAL_GRUPOOriginalDbColumnName(){
				
					return "TOTAL_GRUPO";
				
				}

				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_VAC_CONSOLIDADOS_VAC_SIS151.length) {
				if(length < 1024 && commonByteArray_VAC_CONSOLIDADOS_VAC_SIS151.length == 0) {
   					commonByteArray_VAC_CONSOLIDADOS_VAC_SIS151 = new byte[1024];
				} else {
   					commonByteArray_VAC_CONSOLIDADOS_VAC_SIS151 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_VAC_CONSOLIDADOS_VAC_SIS151, 0, length);
			strReturn = new String(commonByteArray_VAC_CONSOLIDADOS_VAC_SIS151, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_VAC_CONSOLIDADOS_VAC_SIS151.length) {
				if(length < 1024 && commonByteArray_VAC_CONSOLIDADOS_VAC_SIS151.length == 0) {
   					commonByteArray_VAC_CONSOLIDADOS_VAC_SIS151 = new byte[1024];
				} else {
   					commonByteArray_VAC_CONSOLIDADOS_VAC_SIS151 = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_VAC_CONSOLIDADOS_VAC_SIS151, 0, length);
			strReturn = new String(commonByteArray_VAC_CONSOLIDADOS_VAC_SIS151, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_VAC_CONSOLIDADOS_VAC_SIS151) {

        	try {

        		int length = 0;
		
						this.SECCION = readInteger(dis);
					
					this.SIS = readString(dis);
					
					this.COLOR = readString(dis);
					
						this.TOTAL_GRUPO = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_VAC_CONSOLIDADOS_VAC_SIS151) {

        	try {

        		int length = 0;
		
						this.SECCION = readInteger(dis);
					
					this.SIS = readString(dis);
					
					this.COLOR = readString(dis);
					
						this.TOTAL_GRUPO = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.SECCION,dos);
					
					// String
				
						writeString(this.SIS,dos);
					
					// String
				
						writeString(this.COLOR,dos);
					
					// Integer
				
						writeInteger(this.TOTAL_GRUPO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.SECCION,dos);
					
					// String
				
						writeString(this.SIS,dos);
					
					// String
				
						writeString(this.COLOR,dos);
					
					// Integer
				
						writeInteger(this.TOTAL_GRUPO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("SECCION="+String.valueOf(SECCION));
		sb.append(",SIS="+SIS);
		sb.append(",COLOR="+COLOR);
		sb.append(",TOTAL_GRUPO="+String.valueOf(TOTAL_GRUPO));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row10Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row9Struct implements routines.system.IPersistableRow<row9Struct> {
    final static byte[] commonByteArrayLock_VAC_CONSOLIDADOS_VAC_SIS151 = new byte[0];
    static byte[] commonByteArray_VAC_CONSOLIDADOS_VAC_SIS151 = new byte[0];

	
			    public String FUERZA_ID;

				public String getFUERZA_ID () {
					return this.FUERZA_ID;
				}

				public Boolean FUERZA_IDIsNullable(){
				    return true;
				}
				public Boolean FUERZA_IDIsKey(){
				    return false;
				}
				public Integer FUERZA_IDLength(){
				    return null;
				}
				public Integer FUERZA_IDPrecision(){
				    return null;
				}
				public String FUERZA_IDDefault(){
				
					return null;
				
				}
				public String FUERZA_IDComment(){
				
				    return "";
				
				}
				public String FUERZA_IDPattern(){
				
					return "";
				
				}
				public String FUERZA_IDOriginalDbColumnName(){
				
					return "FUERZA_ID";
				
				}

				
			    public Integer TOTAL;

				public Integer getTOTAL () {
					return this.TOTAL;
				}

				public Boolean TOTALIsNullable(){
				    return true;
				}
				public Boolean TOTALIsKey(){
				    return false;
				}
				public Integer TOTALLength(){
				    return null;
				}
				public Integer TOTALPrecision(){
				    return null;
				}
				public String TOTALDefault(){
				
					return null;
				
				}
				public String TOTALComment(){
				
				    return "";
				
				}
				public String TOTALPattern(){
				
					return "";
				
				}
				public String TOTALOriginalDbColumnName(){
				
					return "TOTAL";
				
				}

				
			    public String UORG_ID;

				public String getUORG_ID () {
					return this.UORG_ID;
				}

				public Boolean UORG_IDIsNullable(){
				    return true;
				}
				public Boolean UORG_IDIsKey(){
				    return false;
				}
				public Integer UORG_IDLength(){
				    return null;
				}
				public Integer UORG_IDPrecision(){
				    return null;
				}
				public String UORG_IDDefault(){
				
					return null;
				
				}
				public String UORG_IDComment(){
				
				    return "";
				
				}
				public String UORG_IDPattern(){
				
					return "";
				
				}
				public String UORG_IDOriginalDbColumnName(){
				
					return "UORG_ID";
				
				}

				
			    public String CODDEPTO;

				public String getCODDEPTO () {
					return this.CODDEPTO;
				}

				public Boolean CODDEPTOIsNullable(){
				    return true;
				}
				public Boolean CODDEPTOIsKey(){
				    return false;
				}
				public Integer CODDEPTOLength(){
				    return null;
				}
				public Integer CODDEPTOPrecision(){
				    return null;
				}
				public String CODDEPTODefault(){
				
					return null;
				
				}
				public String CODDEPTOComment(){
				
				    return "";
				
				}
				public String CODDEPTOPattern(){
				
					return "";
				
				}
				public String CODDEPTOOriginalDbColumnName(){
				
					return "CODDEPTO";
				
				}

				
			    public String CODMCPIO;

				public String getCODMCPIO () {
					return this.CODMCPIO;
				}

				public Boolean CODMCPIOIsNullable(){
				    return true;
				}
				public Boolean CODMCPIOIsKey(){
				    return false;
				}
				public Integer CODMCPIOLength(){
				    return null;
				}
				public Integer CODMCPIOPrecision(){
				    return null;
				}
				public String CODMCPIODefault(){
				
					return null;
				
				}
				public String CODMCPIOComment(){
				
				    return "";
				
				}
				public String CODMCPIOPattern(){
				
					return "";
				
				}
				public String CODMCPIOOriginalDbColumnName(){
				
					return "CODMCPIO";
				
				}

				
			    public String ESQUEMA;

				public String getESQUEMA () {
					return this.ESQUEMA;
				}

				public Boolean ESQUEMAIsNullable(){
				    return true;
				}
				public Boolean ESQUEMAIsKey(){
				    return false;
				}
				public Integer ESQUEMALength(){
				    return null;
				}
				public Integer ESQUEMAPrecision(){
				    return null;
				}
				public String ESQUEMADefault(){
				
					return null;
				
				}
				public String ESQUEMAComment(){
				
				    return "";
				
				}
				public String ESQUEMAPattern(){
				
					return "";
				
				}
				public String ESQUEMAOriginalDbColumnName(){
				
					return "ESQUEMA";
				
				}

				
			    public String PERIODO;

				public String getPERIODO () {
					return this.PERIODO;
				}

				public Boolean PERIODOIsNullable(){
				    return true;
				}
				public Boolean PERIODOIsKey(){
				    return false;
				}
				public Integer PERIODOLength(){
				    return null;
				}
				public Integer PERIODOPrecision(){
				    return null;
				}
				public String PERIODODefault(){
				
					return null;
				
				}
				public String PERIODOComment(){
				
				    return "";
				
				}
				public String PERIODOPattern(){
				
					return "";
				
				}
				public String PERIODOOriginalDbColumnName(){
				
					return "PERIODO";
				
				}

				
			    public Object DATOS;

				public Object getDATOS () {
					return this.DATOS;
				}

				public Boolean DATOSIsNullable(){
				    return true;
				}
				public Boolean DATOSIsKey(){
				    return false;
				}
				public Integer DATOSLength(){
				    return null;
				}
				public Integer DATOSPrecision(){
				    return null;
				}
				public String DATOSDefault(){
				
					return null;
				
				}
				public String DATOSComment(){
				
				    return "";
				
				}
				public String DATOSPattern(){
				
					return "";
				
				}
				public String DATOSOriginalDbColumnName(){
				
					return "DATOS";
				
				}

				
			    public String SPROC;

				public String getSPROC () {
					return this.SPROC;
				}

				public Boolean SPROCIsNullable(){
				    return true;
				}
				public Boolean SPROCIsKey(){
				    return false;
				}
				public Integer SPROCLength(){
				    return null;
				}
				public Integer SPROCPrecision(){
				    return null;
				}
				public String SPROCDefault(){
				
					return null;
				
				}
				public String SPROCComment(){
				
				    return "";
				
				}
				public String SPROCPattern(){
				
					return "";
				
				}
				public String SPROCOriginalDbColumnName(){
				
					return "SPROC";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_VAC_CONSOLIDADOS_VAC_SIS151.length) {
				if(length < 1024 && commonByteArray_VAC_CONSOLIDADOS_VAC_SIS151.length == 0) {
   					commonByteArray_VAC_CONSOLIDADOS_VAC_SIS151 = new byte[1024];
				} else {
   					commonByteArray_VAC_CONSOLIDADOS_VAC_SIS151 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_VAC_CONSOLIDADOS_VAC_SIS151, 0, length);
			strReturn = new String(commonByteArray_VAC_CONSOLIDADOS_VAC_SIS151, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_VAC_CONSOLIDADOS_VAC_SIS151.length) {
				if(length < 1024 && commonByteArray_VAC_CONSOLIDADOS_VAC_SIS151.length == 0) {
   					commonByteArray_VAC_CONSOLIDADOS_VAC_SIS151 = new byte[1024];
				} else {
   					commonByteArray_VAC_CONSOLIDADOS_VAC_SIS151 = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_VAC_CONSOLIDADOS_VAC_SIS151, 0, length);
			strReturn = new String(commonByteArray_VAC_CONSOLIDADOS_VAC_SIS151, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_VAC_CONSOLIDADOS_VAC_SIS151) {

        	try {

        		int length = 0;
		
					this.FUERZA_ID = readString(dis);
					
						this.TOTAL = readInteger(dis);
					
					this.UORG_ID = readString(dis);
					
					this.CODDEPTO = readString(dis);
					
					this.CODMCPIO = readString(dis);
					
					this.ESQUEMA = readString(dis);
					
					this.PERIODO = readString(dis);
					
						this.DATOS = (Object) dis.readObject();
					
					this.SPROC = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_VAC_CONSOLIDADOS_VAC_SIS151) {

        	try {

        		int length = 0;
		
					this.FUERZA_ID = readString(dis);
					
						this.TOTAL = readInteger(dis);
					
					this.UORG_ID = readString(dis);
					
					this.CODDEPTO = readString(dis);
					
					this.CODMCPIO = readString(dis);
					
					this.ESQUEMA = readString(dis);
					
					this.PERIODO = readString(dis);
					
						this.DATOS = (Object) dis.readObject();
					
					this.SPROC = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.FUERZA_ID,dos);
					
					// Integer
				
						writeInteger(this.TOTAL,dos);
					
					// String
				
						writeString(this.UORG_ID,dos);
					
					// String
				
						writeString(this.CODDEPTO,dos);
					
					// String
				
						writeString(this.CODMCPIO,dos);
					
					// String
				
						writeString(this.ESQUEMA,dos);
					
					// String
				
						writeString(this.PERIODO,dos);
					
					// Object
				
       			    	dos.writeObject(this.DATOS);
					
					// String
				
						writeString(this.SPROC,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.FUERZA_ID,dos);
					
					// Integer
				
						writeInteger(this.TOTAL,dos);
					
					// String
				
						writeString(this.UORG_ID,dos);
					
					// String
				
						writeString(this.CODDEPTO,dos);
					
					// String
				
						writeString(this.CODMCPIO,dos);
					
					// String
				
						writeString(this.ESQUEMA,dos);
					
					// String
				
						writeString(this.PERIODO,dos);
					
					// Object
				
						dos.clearInstanceCache();
						dos.writeObject(this.DATOS);
					
					// String
				
						writeString(this.SPROC,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("FUERZA_ID="+FUERZA_ID);
		sb.append(",TOTAL="+String.valueOf(TOTAL));
		sb.append(",UORG_ID="+UORG_ID);
		sb.append(",CODDEPTO="+CODDEPTO);
		sb.append(",CODMCPIO="+CODMCPIO);
		sb.append(",ESQUEMA="+ESQUEMA);
		sb.append(",PERIODO="+PERIODO);
		sb.append(",DATOS="+String.valueOf(DATOS));
		sb.append(",SPROC="+SPROC);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row9Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row12Struct implements routines.system.IPersistableRow<row12Struct> {
    final static byte[] commonByteArrayLock_VAC_CONSOLIDADOS_VAC_SIS151 = new byte[0];
    static byte[] commonByteArray_VAC_CONSOLIDADOS_VAC_SIS151 = new byte[0];

	
			    public String FUERZA_ID;

				public String getFUERZA_ID () {
					return this.FUERZA_ID;
				}

				public Boolean FUERZA_IDIsNullable(){
				    return true;
				}
				public Boolean FUERZA_IDIsKey(){
				    return false;
				}
				public Integer FUERZA_IDLength(){
				    return null;
				}
				public Integer FUERZA_IDPrecision(){
				    return null;
				}
				public String FUERZA_IDDefault(){
				
					return null;
				
				}
				public String FUERZA_IDComment(){
				
				    return "";
				
				}
				public String FUERZA_IDPattern(){
				
					return "";
				
				}
				public String FUERZA_IDOriginalDbColumnName(){
				
					return "FUERZA_ID";
				
				}

				
			    public Integer TOTAL;

				public Integer getTOTAL () {
					return this.TOTAL;
				}

				public Boolean TOTALIsNullable(){
				    return true;
				}
				public Boolean TOTALIsKey(){
				    return false;
				}
				public Integer TOTALLength(){
				    return null;
				}
				public Integer TOTALPrecision(){
				    return null;
				}
				public String TOTALDefault(){
				
					return null;
				
				}
				public String TOTALComment(){
				
				    return "";
				
				}
				public String TOTALPattern(){
				
					return "";
				
				}
				public String TOTALOriginalDbColumnName(){
				
					return "TOTAL";
				
				}

				
			    public String UORG_ID;

				public String getUORG_ID () {
					return this.UORG_ID;
				}

				public Boolean UORG_IDIsNullable(){
				    return true;
				}
				public Boolean UORG_IDIsKey(){
				    return false;
				}
				public Integer UORG_IDLength(){
				    return null;
				}
				public Integer UORG_IDPrecision(){
				    return null;
				}
				public String UORG_IDDefault(){
				
					return null;
				
				}
				public String UORG_IDComment(){
				
				    return "";
				
				}
				public String UORG_IDPattern(){
				
					return "";
				
				}
				public String UORG_IDOriginalDbColumnName(){
				
					return "UORG_ID";
				
				}

				
			    public String CODDEPTO;

				public String getCODDEPTO () {
					return this.CODDEPTO;
				}

				public Boolean CODDEPTOIsNullable(){
				    return true;
				}
				public Boolean CODDEPTOIsKey(){
				    return false;
				}
				public Integer CODDEPTOLength(){
				    return null;
				}
				public Integer CODDEPTOPrecision(){
				    return null;
				}
				public String CODDEPTODefault(){
				
					return null;
				
				}
				public String CODDEPTOComment(){
				
				    return "";
				
				}
				public String CODDEPTOPattern(){
				
					return "";
				
				}
				public String CODDEPTOOriginalDbColumnName(){
				
					return "CODDEPTO";
				
				}

				
			    public String CODMCPIO;

				public String getCODMCPIO () {
					return this.CODMCPIO;
				}

				public Boolean CODMCPIOIsNullable(){
				    return true;
				}
				public Boolean CODMCPIOIsKey(){
				    return false;
				}
				public Integer CODMCPIOLength(){
				    return null;
				}
				public Integer CODMCPIOPrecision(){
				    return null;
				}
				public String CODMCPIODefault(){
				
					return null;
				
				}
				public String CODMCPIOComment(){
				
				    return "";
				
				}
				public String CODMCPIOPattern(){
				
					return "";
				
				}
				public String CODMCPIOOriginalDbColumnName(){
				
					return "CODMCPIO";
				
				}

				
			    public String ESQUEMA;

				public String getESQUEMA () {
					return this.ESQUEMA;
				}

				public Boolean ESQUEMAIsNullable(){
				    return true;
				}
				public Boolean ESQUEMAIsKey(){
				    return false;
				}
				public Integer ESQUEMALength(){
				    return null;
				}
				public Integer ESQUEMAPrecision(){
				    return null;
				}
				public String ESQUEMADefault(){
				
					return null;
				
				}
				public String ESQUEMAComment(){
				
				    return "";
				
				}
				public String ESQUEMAPattern(){
				
					return "";
				
				}
				public String ESQUEMAOriginalDbColumnName(){
				
					return "ESQUEMA";
				
				}

				
			    public String PERIODO;

				public String getPERIODO () {
					return this.PERIODO;
				}

				public Boolean PERIODOIsNullable(){
				    return true;
				}
				public Boolean PERIODOIsKey(){
				    return false;
				}
				public Integer PERIODOLength(){
				    return null;
				}
				public Integer PERIODOPrecision(){
				    return null;
				}
				public String PERIODODefault(){
				
					return null;
				
				}
				public String PERIODOComment(){
				
				    return "";
				
				}
				public String PERIODOPattern(){
				
					return "";
				
				}
				public String PERIODOOriginalDbColumnName(){
				
					return "PERIODO";
				
				}

				
			    public Object DATOS;

				public Object getDATOS () {
					return this.DATOS;
				}

				public Boolean DATOSIsNullable(){
				    return true;
				}
				public Boolean DATOSIsKey(){
				    return false;
				}
				public Integer DATOSLength(){
				    return null;
				}
				public Integer DATOSPrecision(){
				    return null;
				}
				public String DATOSDefault(){
				
					return null;
				
				}
				public String DATOSComment(){
				
				    return "";
				
				}
				public String DATOSPattern(){
				
					return "";
				
				}
				public String DATOSOriginalDbColumnName(){
				
					return "DATOS";
				
				}

				
			    public String SPROC;

				public String getSPROC () {
					return this.SPROC;
				}

				public Boolean SPROCIsNullable(){
				    return true;
				}
				public Boolean SPROCIsKey(){
				    return false;
				}
				public Integer SPROCLength(){
				    return null;
				}
				public Integer SPROCPrecision(){
				    return null;
				}
				public String SPROCDefault(){
				
					return null;
				
				}
				public String SPROCComment(){
				
				    return "";
				
				}
				public String SPROCPattern(){
				
					return "";
				
				}
				public String SPROCOriginalDbColumnName(){
				
					return "SPROC";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_VAC_CONSOLIDADOS_VAC_SIS151.length) {
				if(length < 1024 && commonByteArray_VAC_CONSOLIDADOS_VAC_SIS151.length == 0) {
   					commonByteArray_VAC_CONSOLIDADOS_VAC_SIS151 = new byte[1024];
				} else {
   					commonByteArray_VAC_CONSOLIDADOS_VAC_SIS151 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_VAC_CONSOLIDADOS_VAC_SIS151, 0, length);
			strReturn = new String(commonByteArray_VAC_CONSOLIDADOS_VAC_SIS151, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_VAC_CONSOLIDADOS_VAC_SIS151.length) {
				if(length < 1024 && commonByteArray_VAC_CONSOLIDADOS_VAC_SIS151.length == 0) {
   					commonByteArray_VAC_CONSOLIDADOS_VAC_SIS151 = new byte[1024];
				} else {
   					commonByteArray_VAC_CONSOLIDADOS_VAC_SIS151 = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_VAC_CONSOLIDADOS_VAC_SIS151, 0, length);
			strReturn = new String(commonByteArray_VAC_CONSOLIDADOS_VAC_SIS151, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_VAC_CONSOLIDADOS_VAC_SIS151) {

        	try {

        		int length = 0;
		
					this.FUERZA_ID = readString(dis);
					
						this.TOTAL = readInteger(dis);
					
					this.UORG_ID = readString(dis);
					
					this.CODDEPTO = readString(dis);
					
					this.CODMCPIO = readString(dis);
					
					this.ESQUEMA = readString(dis);
					
					this.PERIODO = readString(dis);
					
						this.DATOS = (Object) dis.readObject();
					
					this.SPROC = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_VAC_CONSOLIDADOS_VAC_SIS151) {

        	try {

        		int length = 0;
		
					this.FUERZA_ID = readString(dis);
					
						this.TOTAL = readInteger(dis);
					
					this.UORG_ID = readString(dis);
					
					this.CODDEPTO = readString(dis);
					
					this.CODMCPIO = readString(dis);
					
					this.ESQUEMA = readString(dis);
					
					this.PERIODO = readString(dis);
					
						this.DATOS = (Object) dis.readObject();
					
					this.SPROC = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.FUERZA_ID,dos);
					
					// Integer
				
						writeInteger(this.TOTAL,dos);
					
					// String
				
						writeString(this.UORG_ID,dos);
					
					// String
				
						writeString(this.CODDEPTO,dos);
					
					// String
				
						writeString(this.CODMCPIO,dos);
					
					// String
				
						writeString(this.ESQUEMA,dos);
					
					// String
				
						writeString(this.PERIODO,dos);
					
					// Object
				
       			    	dos.writeObject(this.DATOS);
					
					// String
				
						writeString(this.SPROC,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.FUERZA_ID,dos);
					
					// Integer
				
						writeInteger(this.TOTAL,dos);
					
					// String
				
						writeString(this.UORG_ID,dos);
					
					// String
				
						writeString(this.CODDEPTO,dos);
					
					// String
				
						writeString(this.CODMCPIO,dos);
					
					// String
				
						writeString(this.ESQUEMA,dos);
					
					// String
				
						writeString(this.PERIODO,dos);
					
					// Object
				
						dos.clearInstanceCache();
						dos.writeObject(this.DATOS);
					
					// String
				
						writeString(this.SPROC,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("FUERZA_ID="+FUERZA_ID);
		sb.append(",TOTAL="+String.valueOf(TOTAL));
		sb.append(",UORG_ID="+UORG_ID);
		sb.append(",CODDEPTO="+CODDEPTO);
		sb.append(",CODMCPIO="+CODMCPIO);
		sb.append(",ESQUEMA="+ESQUEMA);
		sb.append(",PERIODO="+PERIODO);
		sb.append(",DATOS="+String.valueOf(DATOS));
		sb.append(",SPROC="+SPROC);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row12Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tFixedFlowInput_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFixedFlowInput_3_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row12Struct row12 = new row12Struct();
row9Struct row9 = new row9Struct();
row10Struct row10 = new row10Struct();






	
	/**
	 * [tHashOutput_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashOutput_5", false);
		start_Hash.put("tHashOutput_5", System.currentTimeMillis());
		
	
	currentComponent="tHashOutput_5";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row10");
					}
				
		int tos_count_tHashOutput_5 = 0;
		



org.talend.designer.components.hashfile.common.MapHashFile mf_tHashOutput_5=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();    
		org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row10Struct> tHashFile_tHashOutput_5 = null;
		String hashKey_tHashOutput_5 = "tHashFile_SIS151_" + pid + "_tHashOutput_5";
			synchronized(org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.get(hashKey_tHashOutput_5)){
			    if(mf_tHashOutput_5.getResourceMap().get(hashKey_tHashOutput_5) == null){
	      		    mf_tHashOutput_5.getResourceMap().put(hashKey_tHashOutput_5, new org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row10Struct>(org.talend.designer.components.hashfile.common.MATCHING_MODE.KEEP_ALL));
	      		    tHashFile_tHashOutput_5 = mf_tHashOutput_5.getResourceMap().get(hashKey_tHashOutput_5);
			    }else{
			    	tHashFile_tHashOutput_5 = mf_tHashOutput_5.getResourceMap().get(hashKey_tHashOutput_5);
			    }
			}
        int nb_line_tHashOutput_5 = 0;

 



/**
 * [tHashOutput_5 begin ] stop
 */



	
	/**
	 * [tParseRecordSet_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tParseRecordSet_2", false);
		start_Hash.put("tParseRecordSet_2", System.currentTimeMillis());
		
	
	currentComponent="tParseRecordSet_2";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row9");
					}
				
		int tos_count_tParseRecordSet_2 = 0;
		

int nb_line_tParseRecordSet_2 = 0;
 



/**
 * [tParseRecordSet_2 begin ] stop
 */



	
	/**
	 * [tOracleSP_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleSP_2", false);
		start_Hash.put("tOracleSP_2", System.currentTimeMillis());
		
	
	currentComponent="tOracleSP_2";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row12");
					}
				
		int tos_count_tOracleSP_2 = 0;
		

	java.sql.Connection connection_tOracleSP_2 = null;
	connection_tOracleSP_2 = (java.sql.Connection) globalMap.get("conn_tOracleConnection_3");
	

java.sql.CallableStatement statement_tOracleSP_2 = connection_tOracleSP_2.prepareCall("{call " + "REP.Getsis151" + "(?,?,?,?,?,?,?,?,?)}");

java.sql.Timestamp tmpDate_tOracleSP_2;
String tmpString_tOracleSP_2;

 



/**
 * [tOracleSP_2 begin ] stop
 */



	
	/**
	 * [tFixedFlowInput_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tFixedFlowInput_3", false);
		start_Hash.put("tFixedFlowInput_3", System.currentTimeMillis());
		
	
	currentComponent="tFixedFlowInput_3";
	
	
		int tos_count_tFixedFlowInput_3 = 0;
		

	    for (int i_tFixedFlowInput_3 = 0 ; i_tFixedFlowInput_3 < 1 ; i_tFixedFlowInput_3++) {
	                	            	
    	            		row12.FUERZA_ID = context.FUERZA_ID;
    	            	        	            	
    	            		row12.TOTAL = 1;
    	            	        	            	
    	            		row12.UORG_ID = context.UORG_ID;
    	            	        	            	
    	            		row12.CODDEPTO = context.DPTO_COD;
    	            	        	            	
    	            		row12.CODMCPIO = context.MCPIO_COD;
    	            	        	            	
    	            		row12.ESQUEMA = context.TESQUEMA;
    	            	        	            	
    	            		row12.PERIODO = context.PERIODO;
    	            	        	            	
    	            		row12.DATOS = null;        	            	
    	            	        	            	
    	            		row12.SPROC = null;        	            	
    	            	

 



/**
 * [tFixedFlowInput_3 begin ] stop
 */
	
	/**
	 * [tFixedFlowInput_3 main ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_3";
	
	

 


	tos_count_tFixedFlowInput_3++;

/**
 * [tFixedFlowInput_3 main ] stop
 */
	
	/**
	 * [tFixedFlowInput_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_3";
	
	

 



/**
 * [tFixedFlowInput_3 process_data_begin ] stop
 */

	
	/**
	 * [tOracleSP_2 main ] start
	 */

	

	
	
	currentComponent="tOracleSP_2";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row12"
						
						);
					}
					

			// code for the argument 1 (FUERZA_ID) of type 'IN AUTOMAPPING'
    					if (row12.FUERZA_ID == null) {
    						statement_tOracleSP_2.setNull(1, java.sql.Types.VARCHAR);
    					} else {
    					
                        statement_tOracleSP_2.setString(1, row12.FUERZA_ID);
    					}
    					
			// code for the argument 2 (TOTAL) of type 'IN AUTOMAPPING'
    					if (row12.TOTAL == null) {
    						statement_tOracleSP_2.setNull(2, java.sql.Types.INTEGER);
    					} else {
    					
                        statement_tOracleSP_2.setInt(2, row12.TOTAL);
    					}
    					
			// code for the argument 3 (UORG_ID) of type 'IN AUTOMAPPING'
    					if (row12.UORG_ID == null) {
    						statement_tOracleSP_2.setNull(3, java.sql.Types.VARCHAR);
    					} else {
    					
                        statement_tOracleSP_2.setString(3, row12.UORG_ID);
    					}
    					
			// code for the argument 4 (CODDEPTO) of type 'IN AUTOMAPPING'
    					if (row12.CODDEPTO == null) {
    						statement_tOracleSP_2.setNull(4, java.sql.Types.VARCHAR);
    					} else {
    					
                        statement_tOracleSP_2.setString(4, row12.CODDEPTO);
    					}
    					
			// code for the argument 5 (CODMCPIO) of type 'IN AUTOMAPPING'
    					if (row12.CODMCPIO == null) {
    						statement_tOracleSP_2.setNull(5, java.sql.Types.VARCHAR);
    					} else {
    					
                        statement_tOracleSP_2.setString(5, row12.CODMCPIO);
    					}
    					
			// code for the argument 6 (ESQUEMA) of type 'IN AUTOMAPPING'
    					if (row12.ESQUEMA == null) {
    						statement_tOracleSP_2.setNull(6, java.sql.Types.VARCHAR);
    					} else {
    					
                        statement_tOracleSP_2.setString(6, row12.ESQUEMA);
    					}
    					
			// code for the argument 7 (PERIODO) of type 'IN AUTOMAPPING'
    					if (row12.PERIODO == null) {
    						statement_tOracleSP_2.setNull(7, java.sql.Types.VARCHAR);
    					} else {
    					
                        statement_tOracleSP_2.setString(7, row12.PERIODO);
    					}
    					
			// code for the argument 8 (DATOS) of type 'RECORDSET AUTOMAPPING'
				statement_tOracleSP_2.registerOutParameter(8, oracle.jdbc.OracleTypes.CURSOR);
			// code for the argument 9 (SPROC) of type 'OUT AUTOMAPPING'
					statement_tOracleSP_2.registerOutParameter(9, java.sql.Types.VARCHAR);
		statement_tOracleSP_2.execute();
		
								row9.FUERZA_ID = row12.FUERZA_ID;
								
								row9.TOTAL = row12.TOTAL;
								
								row9.UORG_ID = row12.UORG_ID;
								
								row9.CODDEPTO = row12.CODDEPTO;
								
								row9.CODMCPIO = row12.CODMCPIO;
								
								row9.ESQUEMA = row12.ESQUEMA;
								
								row9.PERIODO = row12.PERIODO;
								
								row9.DATOS = statement_tOracleSP_2.getObject(8);
									row9.SPROC = statement_tOracleSP_2.getString(9);
									
									if (statement_tOracleSP_2.wasNull()) {
										row9.SPROC = null;
									}
									

 


	tos_count_tOracleSP_2++;

/**
 * [tOracleSP_2 main ] stop
 */
	
	/**
	 * [tOracleSP_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleSP_2";
	
	

 



/**
 * [tOracleSP_2 process_data_begin ] stop
 */

	
	/**
	 * [tParseRecordSet_2 main ] start
	 */

	

	
	
	currentComponent="tParseRecordSet_2";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row9"
						
						);
					}
					

	java.sql.ResultSet re_tParseRecordSet_2 = (java.sql.ResultSet)row9.DATOS;
	boolean hasNextRecord_tParseRecordSet_2=false;
	String res_str_tParseRecordSet_2 = null;
	java.sql.Timestamp res_ts_tParseRecordSet_2 = null;
    while (true) {
	try{
		hasNextRecord_tParseRecordSet_2=re_tParseRecordSet_2.next();
	}catch(java.lang.Exception e_tParseRecordSet_2){
globalMap.put("tParseRecordSet_2_ERROR_MESSAGE",e_tParseRecordSet_2.getMessage());
		hasNextRecord_tParseRecordSet_2=false;
	}
	if (!hasNextRecord_tParseRecordSet_2) {
		break;
	}
	nb_line_tParseRecordSet_2++;	
	res_str_tParseRecordSet_2 = re_tParseRecordSet_2.getString("SECCION");
	if(res_str_tParseRecordSet_2!=null){
		row10.SECCION = ParserUtils.parseTo_Integer(res_str_tParseRecordSet_2.trim());
	}else{
		//row10.SECCION = ParserUtils.parseTo_Integer(res_str_tParseRecordSet_2);
		row10.SECCION = null;		
	}
	res_str_tParseRecordSet_2 = re_tParseRecordSet_2.getString("SIS");
	if(res_str_tParseRecordSet_2 != null){
		row10.SIS = res_str_tParseRecordSet_2.trim();
	}else{
		//row10.SIS = res_str_tParseRecordSet_2;
		row10.SIS = null;
	}
	res_str_tParseRecordSet_2 = re_tParseRecordSet_2.getString("COLOR");
	if(res_str_tParseRecordSet_2 != null){
		row10.COLOR = res_str_tParseRecordSet_2.trim();
	}else{
		//row10.COLOR = res_str_tParseRecordSet_2;
		row10.COLOR = null;
	}
	res_str_tParseRecordSet_2 = re_tParseRecordSet_2.getString("TOTAL_GRUPO");
	if(res_str_tParseRecordSet_2!=null){
		row10.TOTAL_GRUPO = ParserUtils.parseTo_Integer(res_str_tParseRecordSet_2.trim());
	}else{
		//row10.TOTAL_GRUPO = ParserUtils.parseTo_Integer(res_str_tParseRecordSet_2);
		row10.TOTAL_GRUPO = null;		
	}




			

 


	tos_count_tParseRecordSet_2++;

/**
 * [tParseRecordSet_2 main ] stop
 */
	
	/**
	 * [tParseRecordSet_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tParseRecordSet_2";
	
	

 



/**
 * [tParseRecordSet_2 process_data_begin ] stop
 */

	
	/**
	 * [tHashOutput_5 main ] start
	 */

	

	
	
	currentComponent="tHashOutput_5";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row10"
						
						);
					}
					



    
		row10Struct oneRow_tHashOutput_5 = new row10Struct();
				
					oneRow_tHashOutput_5.SECCION = row10.SECCION;
					oneRow_tHashOutput_5.SIS = row10.SIS;
					oneRow_tHashOutput_5.COLOR = row10.COLOR;
					oneRow_tHashOutput_5.TOTAL_GRUPO = row10.TOTAL_GRUPO;
		
        tHashFile_tHashOutput_5.put(oneRow_tHashOutput_5);
        nb_line_tHashOutput_5 ++;

 


	tos_count_tHashOutput_5++;

/**
 * [tHashOutput_5 main ] stop
 */
	
	/**
	 * [tHashOutput_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashOutput_5";
	
	

 



/**
 * [tHashOutput_5 process_data_begin ] stop
 */
	
	/**
	 * [tHashOutput_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashOutput_5";
	
	

 



/**
 * [tHashOutput_5 process_data_end ] stop
 */
		// end for
	}



	
	/**
	 * [tParseRecordSet_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tParseRecordSet_2";
	
	

 



/**
 * [tParseRecordSet_2 process_data_end ] stop
 */



	
	/**
	 * [tOracleSP_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleSP_2";
	
	

 



/**
 * [tOracleSP_2 process_data_end ] stop
 */



	
	/**
	 * [tFixedFlowInput_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_3";
	
	

 



/**
 * [tFixedFlowInput_3 process_data_end ] stop
 */
	
	/**
	 * [tFixedFlowInput_3 end ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_3";
	
	

        }
        globalMap.put("tFixedFlowInput_3_NB_LINE", 1);        

 

ok_Hash.put("tFixedFlowInput_3", true);
end_Hash.put("tFixedFlowInput_3", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk23", 0, "ok");
				}
				tHashInput_4Process(globalMap);



/**
 * [tFixedFlowInput_3 end ] stop
 */

	
	/**
	 * [tOracleSP_2 end ] start
	 */

	

	
	
	currentComponent="tOracleSP_2";
	
	


	statement_tOracleSP_2.close();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row12");
			  	}
			  	
 

ok_Hash.put("tOracleSP_2", true);
end_Hash.put("tOracleSP_2", System.currentTimeMillis());




/**
 * [tOracleSP_2 end ] stop
 */

	
	/**
	 * [tParseRecordSet_2 end ] start
	 */

	

	
	
	currentComponent="tParseRecordSet_2";
	
	

globalMap.put("tParseRecordSet_2_NB_LINE",nb_line_tParseRecordSet_2);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row9");
			  	}
			  	
 

ok_Hash.put("tParseRecordSet_2", true);
end_Hash.put("tParseRecordSet_2", System.currentTimeMillis());




/**
 * [tParseRecordSet_2 end ] stop
 */

	
	/**
	 * [tHashOutput_5 end ] start
	 */

	

	
	
	currentComponent="tHashOutput_5";
	
	
globalMap.put("tHashOutput_5_NB_LINE", nb_line_tHashOutput_5);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row10");
			  	}
			  	
 

ok_Hash.put("tHashOutput_5", true);
end_Hash.put("tHashOutput_5", System.currentTimeMillis());




/**
 * [tHashOutput_5 end ] stop
 */









				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFixedFlowInput_3 finally ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_3";
	
	

 



/**
 * [tFixedFlowInput_3 finally ] stop
 */

	
	/**
	 * [tOracleSP_2 finally ] start
	 */

	

	
	
	currentComponent="tOracleSP_2";
	
	

 



/**
 * [tOracleSP_2 finally ] stop
 */

	
	/**
	 * [tParseRecordSet_2 finally ] start
	 */

	

	
	
	currentComponent="tParseRecordSet_2";
	
	

 



/**
 * [tParseRecordSet_2 finally ] stop
 */

	
	/**
	 * [tHashOutput_5 finally ] start
	 */

	

	
	
	currentComponent="tHashOutput_5";
	
	

 



/**
 * [tHashOutput_5 finally ] stop
 */









				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFixedFlowInput_3_SUBPROCESS_STATE", 1);
	}
	


public static class row11Struct implements routines.system.IPersistableRow<row11Struct> {
    final static byte[] commonByteArrayLock_VAC_CONSOLIDADOS_VAC_SIS151 = new byte[0];
    static byte[] commonByteArray_VAC_CONSOLIDADOS_VAC_SIS151 = new byte[0];

	
			    public Integer SECCION;

				public Integer getSECCION () {
					return this.SECCION;
				}

				public Boolean SECCIONIsNullable(){
				    return true;
				}
				public Boolean SECCIONIsKey(){
				    return false;
				}
				public Integer SECCIONLength(){
				    return null;
				}
				public Integer SECCIONPrecision(){
				    return null;
				}
				public String SECCIONDefault(){
				
					return null;
				
				}
				public String SECCIONComment(){
				
				    return "";
				
				}
				public String SECCIONPattern(){
				
					return "";
				
				}
				public String SECCIONOriginalDbColumnName(){
				
					return "SECCION";
				
				}

				
			    public String SIS;

				public String getSIS () {
					return this.SIS;
				}

				public Boolean SISIsNullable(){
				    return true;
				}
				public Boolean SISIsKey(){
				    return false;
				}
				public Integer SISLength(){
				    return null;
				}
				public Integer SISPrecision(){
				    return null;
				}
				public String SISDefault(){
				
					return null;
				
				}
				public String SISComment(){
				
				    return "";
				
				}
				public String SISPattern(){
				
					return "";
				
				}
				public String SISOriginalDbColumnName(){
				
					return "SIS";
				
				}

				
			    public String COLOR;

				public String getCOLOR () {
					return this.COLOR;
				}

				public Boolean COLORIsNullable(){
				    return true;
				}
				public Boolean COLORIsKey(){
				    return false;
				}
				public Integer COLORLength(){
				    return null;
				}
				public Integer COLORPrecision(){
				    return null;
				}
				public String COLORDefault(){
				
					return null;
				
				}
				public String COLORComment(){
				
				    return "";
				
				}
				public String COLORPattern(){
				
					return "";
				
				}
				public String COLOROriginalDbColumnName(){
				
					return "COLOR";
				
				}

				
			    public Integer TOTAL_GRUPO;

				public Integer getTOTAL_GRUPO () {
					return this.TOTAL_GRUPO;
				}

				public Boolean TOTAL_GRUPOIsNullable(){
				    return true;
				}
				public Boolean TOTAL_GRUPOIsKey(){
				    return false;
				}
				public Integer TOTAL_GRUPOLength(){
				    return null;
				}
				public Integer TOTAL_GRUPOPrecision(){
				    return null;
				}
				public String TOTAL_GRUPODefault(){
				
					return null;
				
				}
				public String TOTAL_GRUPOComment(){
				
				    return "";
				
				}
				public String TOTAL_GRUPOPattern(){
				
					return "";
				
				}
				public String TOTAL_GRUPOOriginalDbColumnName(){
				
					return "TOTAL_GRUPO";
				
				}

				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_VAC_CONSOLIDADOS_VAC_SIS151.length) {
				if(length < 1024 && commonByteArray_VAC_CONSOLIDADOS_VAC_SIS151.length == 0) {
   					commonByteArray_VAC_CONSOLIDADOS_VAC_SIS151 = new byte[1024];
				} else {
   					commonByteArray_VAC_CONSOLIDADOS_VAC_SIS151 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_VAC_CONSOLIDADOS_VAC_SIS151, 0, length);
			strReturn = new String(commonByteArray_VAC_CONSOLIDADOS_VAC_SIS151, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_VAC_CONSOLIDADOS_VAC_SIS151.length) {
				if(length < 1024 && commonByteArray_VAC_CONSOLIDADOS_VAC_SIS151.length == 0) {
   					commonByteArray_VAC_CONSOLIDADOS_VAC_SIS151 = new byte[1024];
				} else {
   					commonByteArray_VAC_CONSOLIDADOS_VAC_SIS151 = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_VAC_CONSOLIDADOS_VAC_SIS151, 0, length);
			strReturn = new String(commonByteArray_VAC_CONSOLIDADOS_VAC_SIS151, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_VAC_CONSOLIDADOS_VAC_SIS151) {

        	try {

        		int length = 0;
		
						this.SECCION = readInteger(dis);
					
					this.SIS = readString(dis);
					
					this.COLOR = readString(dis);
					
						this.TOTAL_GRUPO = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_VAC_CONSOLIDADOS_VAC_SIS151) {

        	try {

        		int length = 0;
		
						this.SECCION = readInteger(dis);
					
					this.SIS = readString(dis);
					
					this.COLOR = readString(dis);
					
						this.TOTAL_GRUPO = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.SECCION,dos);
					
					// String
				
						writeString(this.SIS,dos);
					
					// String
				
						writeString(this.COLOR,dos);
					
					// Integer
				
						writeInteger(this.TOTAL_GRUPO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.SECCION,dos);
					
					// String
				
						writeString(this.SIS,dos);
					
					// String
				
						writeString(this.COLOR,dos);
					
					// Integer
				
						writeInteger(this.TOTAL_GRUPO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("SECCION="+String.valueOf(SECCION));
		sb.append(",SIS="+SIS);
		sb.append(",COLOR="+COLOR);
		sb.append(",TOTAL_GRUPO="+String.valueOf(TOTAL_GRUPO));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row11Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
    final static byte[] commonByteArrayLock_VAC_CONSOLIDADOS_VAC_SIS151 = new byte[0];
    static byte[] commonByteArray_VAC_CONSOLIDADOS_VAC_SIS151 = new byte[0];

	
			    public Integer SECCION;

				public Integer getSECCION () {
					return this.SECCION;
				}

				public Boolean SECCIONIsNullable(){
				    return true;
				}
				public Boolean SECCIONIsKey(){
				    return false;
				}
				public Integer SECCIONLength(){
				    return null;
				}
				public Integer SECCIONPrecision(){
				    return null;
				}
				public String SECCIONDefault(){
				
					return null;
				
				}
				public String SECCIONComment(){
				
				    return "";
				
				}
				public String SECCIONPattern(){
				
					return "";
				
				}
				public String SECCIONOriginalDbColumnName(){
				
					return "SECCION";
				
				}

				
			    public String SIS;

				public String getSIS () {
					return this.SIS;
				}

				public Boolean SISIsNullable(){
				    return true;
				}
				public Boolean SISIsKey(){
				    return false;
				}
				public Integer SISLength(){
				    return null;
				}
				public Integer SISPrecision(){
				    return null;
				}
				public String SISDefault(){
				
					return null;
				
				}
				public String SISComment(){
				
				    return "";
				
				}
				public String SISPattern(){
				
					return "";
				
				}
				public String SISOriginalDbColumnName(){
				
					return "SIS";
				
				}

				
			    public String COLOR;

				public String getCOLOR () {
					return this.COLOR;
				}

				public Boolean COLORIsNullable(){
				    return true;
				}
				public Boolean COLORIsKey(){
				    return false;
				}
				public Integer COLORLength(){
				    return null;
				}
				public Integer COLORPrecision(){
				    return null;
				}
				public String COLORDefault(){
				
					return null;
				
				}
				public String COLORComment(){
				
				    return "";
				
				}
				public String COLORPattern(){
				
					return "";
				
				}
				public String COLOROriginalDbColumnName(){
				
					return "COLOR";
				
				}

				
			    public Integer TOTAL_GRUPO;

				public Integer getTOTAL_GRUPO () {
					return this.TOTAL_GRUPO;
				}

				public Boolean TOTAL_GRUPOIsNullable(){
				    return true;
				}
				public Boolean TOTAL_GRUPOIsKey(){
				    return false;
				}
				public Integer TOTAL_GRUPOLength(){
				    return null;
				}
				public Integer TOTAL_GRUPOPrecision(){
				    return null;
				}
				public String TOTAL_GRUPODefault(){
				
					return null;
				
				}
				public String TOTAL_GRUPOComment(){
				
				    return "";
				
				}
				public String TOTAL_GRUPOPattern(){
				
					return "";
				
				}
				public String TOTAL_GRUPOOriginalDbColumnName(){
				
					return "TOTAL_GRUPO";
				
				}

				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_VAC_CONSOLIDADOS_VAC_SIS151.length) {
				if(length < 1024 && commonByteArray_VAC_CONSOLIDADOS_VAC_SIS151.length == 0) {
   					commonByteArray_VAC_CONSOLIDADOS_VAC_SIS151 = new byte[1024];
				} else {
   					commonByteArray_VAC_CONSOLIDADOS_VAC_SIS151 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_VAC_CONSOLIDADOS_VAC_SIS151, 0, length);
			strReturn = new String(commonByteArray_VAC_CONSOLIDADOS_VAC_SIS151, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_VAC_CONSOLIDADOS_VAC_SIS151.length) {
				if(length < 1024 && commonByteArray_VAC_CONSOLIDADOS_VAC_SIS151.length == 0) {
   					commonByteArray_VAC_CONSOLIDADOS_VAC_SIS151 = new byte[1024];
				} else {
   					commonByteArray_VAC_CONSOLIDADOS_VAC_SIS151 = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_VAC_CONSOLIDADOS_VAC_SIS151, 0, length);
			strReturn = new String(commonByteArray_VAC_CONSOLIDADOS_VAC_SIS151, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_VAC_CONSOLIDADOS_VAC_SIS151) {

        	try {

        		int length = 0;
		
						this.SECCION = readInteger(dis);
					
					this.SIS = readString(dis);
					
					this.COLOR = readString(dis);
					
						this.TOTAL_GRUPO = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_VAC_CONSOLIDADOS_VAC_SIS151) {

        	try {

        		int length = 0;
		
						this.SECCION = readInteger(dis);
					
					this.SIS = readString(dis);
					
					this.COLOR = readString(dis);
					
						this.TOTAL_GRUPO = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.SECCION,dos);
					
					// String
				
						writeString(this.SIS,dos);
					
					// String
				
						writeString(this.COLOR,dos);
					
					// Integer
				
						writeInteger(this.TOTAL_GRUPO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.SECCION,dos);
					
					// String
				
						writeString(this.SIS,dos);
					
					// String
				
						writeString(this.COLOR,dos);
					
					// Integer
				
						writeInteger(this.TOTAL_GRUPO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("SECCION="+String.valueOf(SECCION));
		sb.append(",SIS="+SIS);
		sb.append(",COLOR="+COLOR);
		sb.append(",TOTAL_GRUPO="+String.valueOf(TOTAL_GRUPO));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row7Struct implements routines.system.IPersistableRow<row7Struct> {
    final static byte[] commonByteArrayLock_VAC_CONSOLIDADOS_VAC_SIS151 = new byte[0];
    static byte[] commonByteArray_VAC_CONSOLIDADOS_VAC_SIS151 = new byte[0];

	
			    public Integer SECCION;

				public Integer getSECCION () {
					return this.SECCION;
				}

				public Boolean SECCIONIsNullable(){
				    return true;
				}
				public Boolean SECCIONIsKey(){
				    return false;
				}
				public Integer SECCIONLength(){
				    return null;
				}
				public Integer SECCIONPrecision(){
				    return null;
				}
				public String SECCIONDefault(){
				
					return null;
				
				}
				public String SECCIONComment(){
				
				    return "";
				
				}
				public String SECCIONPattern(){
				
					return "";
				
				}
				public String SECCIONOriginalDbColumnName(){
				
					return "SECCION";
				
				}

				
			    public String SIS;

				public String getSIS () {
					return this.SIS;
				}

				public Boolean SISIsNullable(){
				    return true;
				}
				public Boolean SISIsKey(){
				    return false;
				}
				public Integer SISLength(){
				    return null;
				}
				public Integer SISPrecision(){
				    return null;
				}
				public String SISDefault(){
				
					return null;
				
				}
				public String SISComment(){
				
				    return "";
				
				}
				public String SISPattern(){
				
					return "";
				
				}
				public String SISOriginalDbColumnName(){
				
					return "SIS";
				
				}

				
			    public String COLOR;

				public String getCOLOR () {
					return this.COLOR;
				}

				public Boolean COLORIsNullable(){
				    return true;
				}
				public Boolean COLORIsKey(){
				    return false;
				}
				public Integer COLORLength(){
				    return null;
				}
				public Integer COLORPrecision(){
				    return null;
				}
				public String COLORDefault(){
				
					return null;
				
				}
				public String COLORComment(){
				
				    return "";
				
				}
				public String COLORPattern(){
				
					return "";
				
				}
				public String COLOROriginalDbColumnName(){
				
					return "COLOR";
				
				}

				
			    public Integer TOTAL_GRUPO;

				public Integer getTOTAL_GRUPO () {
					return this.TOTAL_GRUPO;
				}

				public Boolean TOTAL_GRUPOIsNullable(){
				    return true;
				}
				public Boolean TOTAL_GRUPOIsKey(){
				    return false;
				}
				public Integer TOTAL_GRUPOLength(){
				    return null;
				}
				public Integer TOTAL_GRUPOPrecision(){
				    return null;
				}
				public String TOTAL_GRUPODefault(){
				
					return null;
				
				}
				public String TOTAL_GRUPOComment(){
				
				    return "";
				
				}
				public String TOTAL_GRUPOPattern(){
				
					return "";
				
				}
				public String TOTAL_GRUPOOriginalDbColumnName(){
				
					return "TOTAL_GRUPO";
				
				}

				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_VAC_CONSOLIDADOS_VAC_SIS151.length) {
				if(length < 1024 && commonByteArray_VAC_CONSOLIDADOS_VAC_SIS151.length == 0) {
   					commonByteArray_VAC_CONSOLIDADOS_VAC_SIS151 = new byte[1024];
				} else {
   					commonByteArray_VAC_CONSOLIDADOS_VAC_SIS151 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_VAC_CONSOLIDADOS_VAC_SIS151, 0, length);
			strReturn = new String(commonByteArray_VAC_CONSOLIDADOS_VAC_SIS151, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_VAC_CONSOLIDADOS_VAC_SIS151.length) {
				if(length < 1024 && commonByteArray_VAC_CONSOLIDADOS_VAC_SIS151.length == 0) {
   					commonByteArray_VAC_CONSOLIDADOS_VAC_SIS151 = new byte[1024];
				} else {
   					commonByteArray_VAC_CONSOLIDADOS_VAC_SIS151 = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_VAC_CONSOLIDADOS_VAC_SIS151, 0, length);
			strReturn = new String(commonByteArray_VAC_CONSOLIDADOS_VAC_SIS151, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_VAC_CONSOLIDADOS_VAC_SIS151) {

        	try {

        		int length = 0;
		
						this.SECCION = readInteger(dis);
					
					this.SIS = readString(dis);
					
					this.COLOR = readString(dis);
					
						this.TOTAL_GRUPO = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_VAC_CONSOLIDADOS_VAC_SIS151) {

        	try {

        		int length = 0;
		
						this.SECCION = readInteger(dis);
					
					this.SIS = readString(dis);
					
					this.COLOR = readString(dis);
					
						this.TOTAL_GRUPO = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.SECCION,dos);
					
					// String
				
						writeString(this.SIS,dos);
					
					// String
				
						writeString(this.COLOR,dos);
					
					// Integer
				
						writeInteger(this.TOTAL_GRUPO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.SECCION,dos);
					
					// String
				
						writeString(this.SIS,dos);
					
					// String
				
						writeString(this.COLOR,dos);
					
					// Integer
				
						writeInteger(this.TOTAL_GRUPO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("SECCION="+String.valueOf(SECCION));
		sb.append(",SIS="+SIS);
		sb.append(",COLOR="+COLOR);
		sb.append(",TOTAL_GRUPO="+String.valueOf(TOTAL_GRUPO));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row7Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tHashInput_4Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tHashInput_4_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row1Struct row1 = new row1Struct();

		row7Struct row7 = new row7Struct();

			row11Struct row11 = new row11Struct();




	
	/**
	 * [tFlowToIterate_1 begin ] start
	 */

				
			int NB_ITERATE_tJava_4 = 0; //for statistics
			

	
		
		ok_Hash.put("tFlowToIterate_1", false);
		start_Hash.put("tFlowToIterate_1", System.currentTimeMillis());
		
	
	currentComponent="tFlowToIterate_1";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row11");
					}
				
		int tos_count_tFlowToIterate_1 = 0;
		

int nb_line_tFlowToIterate_1 = 0;
int counter_tFlowToIterate_1 = 0;

 



/**
 * [tFlowToIterate_1 begin ] stop
 */



	
	/**
	 * [tUnite_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tUnite_1", false);
		start_Hash.put("tUnite_1", System.currentTimeMillis());
		
	
	currentComponent="tUnite_1";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row1","row7");
					}
				
		int tos_count_tUnite_1 = 0;
		

int nb_line_tUnite_1 = 0;

 



/**
 * [tUnite_1 begin ] stop
 */
	
	/**
	 * [tHashInput_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_4", false);
		start_Hash.put("tHashInput_4", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_4";
	
	
		int tos_count_tHashInput_4 = 0;
		


int nb_line_tHashInput_4 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_4=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row5Struct> tHashFile_tHashInput_4 = mf_tHashInput_4.getAdvancedMemoryHashFile("tHashFile_SIS151_" + pid +"_tHashOutput_4");
if(tHashFile_tHashInput_4==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<row5Struct> iterator_tHashInput_4 = tHashFile_tHashInput_4.iterator();
while (iterator_tHashInput_4.hasNext()) {
    row5Struct next_tHashInput_4 = iterator_tHashInput_4.next();

	row1.SECCION = next_tHashInput_4.SECCION;
	row1.SIS = next_tHashInput_4.SIS;
	row1.COLOR = next_tHashInput_4.COLOR;
	row1.TOTAL_GRUPO = next_tHashInput_4.TOTAL_GRUPO;

 



/**
 * [tHashInput_4 begin ] stop
 */
	
	/**
	 * [tHashInput_4 main ] start
	 */

	

	
	
	currentComponent="tHashInput_4";
	
	

 


	tos_count_tHashInput_4++;

/**
 * [tHashInput_4 main ] stop
 */
	
	/**
	 * [tHashInput_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashInput_4";
	
	

 



/**
 * [tHashInput_4 process_data_begin ] stop
 */

	
	/**
	 * [tUnite_1 main ] start
	 */

	

	
	
	currentComponent="tUnite_1";
	
	
						if(execStat){
							runStat.updateStatOnConnection(iterateId,1,1
								
									,"row1"
									
							);
						}
						
//////////
 

// for output
			row11 = new row11Struct();
								
			row11.SECCION = row1.SECCION;								
			row11.SIS = row1.SIS;								
			row11.COLOR = row1.COLOR;								
			row11.TOTAL_GRUPO = row1.TOTAL_GRUPO;			

			nb_line_tUnite_1++;

//////////
 


	tos_count_tUnite_1++;

/**
 * [tUnite_1 main ] stop
 */
	
	/**
	 * [tUnite_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tUnite_1";
	
	

 



/**
 * [tUnite_1 process_data_begin ] stop
 */

	
	/**
	 * [tFlowToIterate_1 main ] start
	 */

	

	
	
	currentComponent="tFlowToIterate_1";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row11"
						
						);
					}
					


    	            
            globalMap.put("row11.SECCION", row11.SECCION);
    	            
            globalMap.put("row11.SIS", row11.SIS);
    	            
            globalMap.put("row11.COLOR", row11.COLOR);
    	            
            globalMap.put("row11.TOTAL_GRUPO", row11.TOTAL_GRUPO);
    	
 
	   nb_line_tFlowToIterate_1++;  
       counter_tFlowToIterate_1++;
       globalMap.put("tFlowToIterate_1_CURRENT_ITERATION", counter_tFlowToIterate_1);
 


	tos_count_tFlowToIterate_1++;

/**
 * [tFlowToIterate_1 main ] stop
 */
	
	/**
	 * [tFlowToIterate_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFlowToIterate_1";
	
	

 



/**
 * [tFlowToIterate_1 process_data_begin ] stop
 */
	NB_ITERATE_tJava_4++;
	
	
				if(execStat){
					runStat.updateStatOnConnection("iterate1", 1, "exec" + NB_ITERATE_tJava_4);
					//Thread.sleep(1000);
				}				
			

	
	/**
	 * [tJava_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_4", false);
		start_Hash.put("tJava_4", System.currentTimeMillis());
		
	
	currentComponent="tJava_4";
	
	
		int tos_count_tJava_4 = 0;
		


			  System.out.println("INICIA PROCESO: Data, Posición: " + context.CONTADOR);
			  SISPOI.Data(row11.SIS, context.CONTADOR, row11.SECCION, row11.COLOR, row11.TOTAL_GRUPO);

			  // Incrementa la fila
			  context.CONTADOR += 1;
 



/**
 * [tJava_4 begin ] stop
 */
	
	/**
	 * [tJava_4 main ] start
	 */

	

	
	
	currentComponent="tJava_4";
	
	

 


	tos_count_tJava_4++;

/**
 * [tJava_4 main ] stop
 */
	
	/**
	 * [tJava_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_4";
	
	

 



/**
 * [tJava_4 process_data_begin ] stop
 */
	
	/**
	 * [tJava_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_4";
	
	

 



/**
 * [tJava_4 process_data_end ] stop
 */
	
	/**
	 * [tJava_4 end ] start
	 */

	

	
	
	currentComponent="tJava_4";
	
	

 

ok_Hash.put("tJava_4", true);
end_Hash.put("tJava_4", System.currentTimeMillis());




/**
 * [tJava_4 end ] stop
 */
						if(execStat){
							runStat.updateStatOnConnection("iterate1", 2, "exec" + NB_ITERATE_tJava_4);
						}				
					




	
	/**
	 * [tFlowToIterate_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFlowToIterate_1";
	
	

 



/**
 * [tFlowToIterate_1 process_data_end ] stop
 */



	
	/**
	 * [tUnite_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tUnite_1";
	
	

 



/**
 * [tUnite_1 process_data_end ] stop
 */



	
	/**
	 * [tHashInput_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashInput_4";
	
	

 



/**
 * [tHashInput_4 process_data_end ] stop
 */
	
	/**
	 * [tHashInput_4 end ] start
	 */

	

	
	
	currentComponent="tHashInput_4";
	
	
    

		
			nb_line_tHashInput_4++;
		}	
    		
    		mf_tHashInput_4.clearCache("tHashFile_SIS151_" + pid +"_tHashOutput_4");
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_SIS151_" + pid +"_tHashOutput_4");
	


	globalMap.put("tHashInput_4_NB_LINE", nb_line_tHashInput_4);       

 

ok_Hash.put("tHashInput_4", true);
end_Hash.put("tHashInput_4", System.currentTimeMillis());




/**
 * [tHashInput_4 end ] stop
 */
	
	/**
	 * [tHashInput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_1", false);
		start_Hash.put("tHashInput_1", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_1";
	
	
		int tos_count_tHashInput_1 = 0;
		


int nb_line_tHashInput_1 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_1=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row10Struct> tHashFile_tHashInput_1 = mf_tHashInput_1.getAdvancedMemoryHashFile("tHashFile_SIS151_" + pid +"_tHashOutput_5");
if(tHashFile_tHashInput_1==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<row10Struct> iterator_tHashInput_1 = tHashFile_tHashInput_1.iterator();
while (iterator_tHashInput_1.hasNext()) {
    row10Struct next_tHashInput_1 = iterator_tHashInput_1.next();

	row7.SECCION = next_tHashInput_1.SECCION;
	row7.SIS = next_tHashInput_1.SIS;
	row7.COLOR = next_tHashInput_1.COLOR;
	row7.TOTAL_GRUPO = next_tHashInput_1.TOTAL_GRUPO;

 



/**
 * [tHashInput_1 begin ] stop
 */
	
	/**
	 * [tHashInput_1 main ] start
	 */

	

	
	
	currentComponent="tHashInput_1";
	
	

 


	tos_count_tHashInput_1++;

/**
 * [tHashInput_1 main ] stop
 */
	
	/**
	 * [tHashInput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashInput_1";
	
	

 



/**
 * [tHashInput_1 process_data_begin ] stop
 */

	
	/**
	 * [tUnite_1 main ] start
	 */

	

	
	
	currentComponent="tUnite_1";
	
	
						if(execStat){
							runStat.updateStatOnConnection(iterateId,1,1
								
									,"row7"
									
							);
						}
						
//////////
 

// for output
			row11 = new row11Struct();
								
			row11.SECCION = row7.SECCION;								
			row11.SIS = row7.SIS;								
			row11.COLOR = row7.COLOR;								
			row11.TOTAL_GRUPO = row7.TOTAL_GRUPO;			

			nb_line_tUnite_1++;

//////////
 


	tos_count_tUnite_1++;

/**
 * [tUnite_1 main ] stop
 */
	
	/**
	 * [tUnite_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tUnite_1";
	
	

 



/**
 * [tUnite_1 process_data_begin ] stop
 */

	
	/**
	 * [tFlowToIterate_1 main ] start
	 */

	

	
	
	currentComponent="tFlowToIterate_1";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row11"
						
						);
					}
					


    	            
            globalMap.put("row11.SECCION", row11.SECCION);
    	            
            globalMap.put("row11.SIS", row11.SIS);
    	            
            globalMap.put("row11.COLOR", row11.COLOR);
    	            
            globalMap.put("row11.TOTAL_GRUPO", row11.TOTAL_GRUPO);
    	
 
	   nb_line_tFlowToIterate_1++;  
       counter_tFlowToIterate_1++;
       globalMap.put("tFlowToIterate_1_CURRENT_ITERATION", counter_tFlowToIterate_1);
 


	tos_count_tFlowToIterate_1++;

/**
 * [tFlowToIterate_1 main ] stop
 */
	
	/**
	 * [tFlowToIterate_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFlowToIterate_1";
	
	

 



/**
 * [tFlowToIterate_1 process_data_begin ] stop
 */
	NB_ITERATE_tJava_4++;
	
	
				if(execStat){
					runStat.updateStatOnConnection("iterate1", 1, "exec" + NB_ITERATE_tJava_4);
					//Thread.sleep(1000);
				}				
			

	
	/**
	 * [tJava_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_4", false);
		start_Hash.put("tJava_4", System.currentTimeMillis());
		
	
	currentComponent="tJava_4";
	
	
		int tos_count_tJava_4 = 0;
		


			  System.out.println("INICIA PROCESO: Data, Posición: " + context.CONTADOR);
			  SISPOI.Data(row11.SIS, context.CONTADOR, row11.SECCION, row11.COLOR, row11.TOTAL_GRUPO);

			  // Incrementa la fila
			  context.CONTADOR += 1;
 



/**
 * [tJava_4 begin ] stop
 */
	
	/**
	 * [tJava_4 main ] start
	 */

	

	
	
	currentComponent="tJava_4";
	
	

 


	tos_count_tJava_4++;

/**
 * [tJava_4 main ] stop
 */
	
	/**
	 * [tJava_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_4";
	
	

 



/**
 * [tJava_4 process_data_begin ] stop
 */
	
	/**
	 * [tJava_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_4";
	
	

 



/**
 * [tJava_4 process_data_end ] stop
 */
	
	/**
	 * [tJava_4 end ] start
	 */

	

	
	
	currentComponent="tJava_4";
	
	

 

ok_Hash.put("tJava_4", true);
end_Hash.put("tJava_4", System.currentTimeMillis());




/**
 * [tJava_4 end ] stop
 */
						if(execStat){
							runStat.updateStatOnConnection("iterate1", 2, "exec" + NB_ITERATE_tJava_4);
						}				
					




	
	/**
	 * [tFlowToIterate_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFlowToIterate_1";
	
	

 



/**
 * [tFlowToIterate_1 process_data_end ] stop
 */



	
	/**
	 * [tUnite_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tUnite_1";
	
	

 



/**
 * [tUnite_1 process_data_end ] stop
 */



	
	/**
	 * [tHashInput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashInput_1";
	
	

 



/**
 * [tHashInput_1 process_data_end ] stop
 */
	
	/**
	 * [tHashInput_1 end ] start
	 */

	

	
	
	currentComponent="tHashInput_1";
	
	
    

		
			nb_line_tHashInput_1++;
		}	
    		
    		mf_tHashInput_1.clearCache("tHashFile_SIS151_" + pid +"_tHashOutput_5");
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_SIS151_" + pid +"_tHashOutput_5");
	


	globalMap.put("tHashInput_1_NB_LINE", nb_line_tHashInput_1);       

 

ok_Hash.put("tHashInput_1", true);
end_Hash.put("tHashInput_1", System.currentTimeMillis());




/**
 * [tHashInput_1 end ] stop
 */
	
	/**
	 * [tUnite_1 end ] start
	 */

	

	
	
	currentComponent="tUnite_1";
	
	

globalMap.put("tUnite_1_NB_LINE", nb_line_tUnite_1);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row1","row7");
			  	}
			  	
 

ok_Hash.put("tUnite_1", true);
end_Hash.put("tUnite_1", System.currentTimeMillis());




/**
 * [tUnite_1 end ] stop
 */

	
	/**
	 * [tFlowToIterate_1 end ] start
	 */

	

	
	
	currentComponent="tFlowToIterate_1";
	
	

globalMap.put("tFlowToIterate_1_NB_LINE",nb_line_tFlowToIterate_1);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row11");
			  	}
			  	
 

ok_Hash.put("tFlowToIterate_1", true);
end_Hash.put("tFlowToIterate_1", System.currentTimeMillis());




/**
 * [tFlowToIterate_1 end ] stop
 */



				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tHashInput_4:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk7", 0, "ok");
								} 
							
							tJava_2Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tHashInput_4 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_4";
	
	

 



/**
 * [tHashInput_4 finally ] stop
 */
	
	/**
	 * [tHashInput_1 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_1";
	
	

 



/**
 * [tHashInput_1 finally ] stop
 */
	
	/**
	 * [tUnite_1 finally ] start
	 */

	

	
	
	currentComponent="tUnite_1";
	
	

 



/**
 * [tUnite_1 finally ] stop
 */

	
	/**
	 * [tFlowToIterate_1 finally ] start
	 */

	

	
	
	currentComponent="tFlowToIterate_1";
	
	

 



/**
 * [tFlowToIterate_1 finally ] stop
 */

	
	/**
	 * [tJava_4 finally ] start
	 */

	

	
	
	currentComponent="tJava_4";
	
	

 



/**
 * [tJava_4 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tHashInput_4_SUBPROCESS_STATE", 1);
	}
	


public void tJava_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tJava_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_2", false);
		start_Hash.put("tJava_2", System.currentTimeMillis());
		
	
	currentComponent="tJava_2";
	
	
		int tos_count_tJava_2 = 0;
		


System.out.println("INICIA PROCESO: Finalize");
SISPOI.Finalize();

 



/**
 * [tJava_2 begin ] stop
 */
	
	/**
	 * [tJava_2 main ] start
	 */

	

	
	
	currentComponent="tJava_2";
	
	

 


	tos_count_tJava_2++;

/**
 * [tJava_2 main ] stop
 */
	
	/**
	 * [tJava_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_2";
	
	

 



/**
 * [tJava_2 process_data_begin ] stop
 */
	
	/**
	 * [tJava_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_2";
	
	

 



/**
 * [tJava_2 process_data_end ] stop
 */
	
	/**
	 * [tJava_2 end ] start
	 */

	

	
	
	currentComponent="tJava_2";
	
	

 

ok_Hash.put("tJava_2", true);
end_Hash.put("tJava_2", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk11", 0, "ok");
				}
				tFileArchive_1Process(globalMap);



/**
 * [tJava_2 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_2 finally ] start
	 */

	

	
	
	currentComponent="tJava_2";
	
	

 



/**
 * [tJava_2 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_2_SUBPROCESS_STATE", 1);
	}
	


public void tFileArchive_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileArchive_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tFileArchive_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileArchive_1", false);
		start_Hash.put("tFileArchive_1", System.currentTimeMillis());
		
	
	currentComponent="tFileArchive_1";
	
	
		int tos_count_tFileArchive_1 = 0;
		

 



/**
 * [tFileArchive_1 begin ] stop
 */
	
	/**
	 * [tFileArchive_1 main ] start
	 */

	

	
	
	currentComponent="tFileArchive_1";
	
	

	

		String sourceFile_tFileArchive_1 = context.CARPETA_SALIDA;
	

    if (java.nio.file.Files.notExists(java.nio.file.Paths.get(sourceFile_tFileArchive_1), java.nio.file.LinkOption.NOFOLLOW_LINKS)){
        throw new java.io.FileNotFoundException(sourceFile_tFileArchive_1 + " (The system cannot find the path specified)");
    }

    String zipFile_tFileArchive_1 = context.CARPETA_SALIDA+"/"+context.NOMBRE_ZIP;
    
    com.talend.compress.zip.Zip zip_tFileArchive_1 = new com.talend.compress.zip.Zip(sourceFile_tFileArchive_1, zipFile_tFileArchive_1);
    zip_tFileArchive_1.setOverwriteExistTargetZip(true);
	zip_tFileArchive_1.setMakeTargetDir(false);
	zip_tFileArchive_1.setCompressLevel(4);
	zip_tFileArchive_1.setArchiveFormat("zip");
	zip_tFileArchive_1.setAllFiles(false);
	
	  
    	//build filename pattern filter
	    String[] patterns_tFileArchive_1 = new String[1];
    	
	        patterns_tFileArchive_1[0] = context.NOMBRE_ARCHIVO;
  		StringBuilder sbf_tFileArchive_1 = new StringBuilder(); 
        sbf_tFileArchive_1.append("(");
        for (int i_tFileArchive_1 = 0 ; i_tFileArchive_1 < patterns_tFileArchive_1.length ; i_tFileArchive_1++) {
            sbf_tFileArchive_1.append(patterns_tFileArchive_1[i_tFileArchive_1].replaceAll("\\.", "\\\\.").replaceAll("\\*", ".*"));
            if(i_tFileArchive_1 != patterns_tFileArchive_1.length-1) sbf_tFileArchive_1.append("|");
        }        
        sbf_tFileArchive_1.append(")");
        final String maskStr_tFileArchive_1 = new String(sbf_tFileArchive_1.toString());
        
        //apply the filter
       	zip_tFileArchive_1.setNamePatternFilter(maskStr_tFileArchive_1);
	
	   zip_tFileArchive_1.setContainSubDir(true);
	   zip_tFileArchive_1.setEncoding("ISO-8859-15");
	   zip_tFileArchive_1.setZip64Mode("ASNEEDED");
	   zip_tFileArchive_1.setEncrypted(false);
		        
	   
	    
	    
	final String decryptedPassword_tFileArchive_1 = routines.system.PasswordEncryptUtil.decryptPassword("enc:routine.encryption.key.v1:/O297uKMi5BHu6c0JfQTh8Hxy2xzZYUidwnYSQ==");
	    
	   zip_tFileArchive_1.setPassword(decryptedPassword_tFileArchive_1);
	   
	      zip_tFileArchive_1.setUseZip4jEncryption(true);

	      
	   	  zip_tFileArchive_1.setEncryptionMethod("ZIP_STANDARD");
	   	  
  
  
   globalMap.put("tFileArchive_1_ARCHIVE_FILEPATH",zipFile_tFileArchive_1);
   
   globalMap.put("tFileArchive_1_ARCHIVE_FILENAME", new java.io.File(zipFile_tFileArchive_1).getName());

   zip_tFileArchive_1.doZip();


 


	tos_count_tFileArchive_1++;

/**
 * [tFileArchive_1 main ] stop
 */
	
	/**
	 * [tFileArchive_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileArchive_1";
	
	

 



/**
 * [tFileArchive_1 process_data_begin ] stop
 */
	
	/**
	 * [tFileArchive_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileArchive_1";
	
	

 



/**
 * [tFileArchive_1 process_data_end ] stop
 */
	
	/**
	 * [tFileArchive_1 end ] start
	 */

	

	
	
	currentComponent="tFileArchive_1";
	
	

 

ok_Hash.put("tFileArchive_1", true);
end_Hash.put("tFileArchive_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk12", 0, "ok");
				}
				tFileDelete_1Process(globalMap);



/**
 * [tFileArchive_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileArchive_1 finally ] start
	 */

	

	
	
	currentComponent="tFileArchive_1";
	
	

 



/**
 * [tFileArchive_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileArchive_1_SUBPROCESS_STATE", 1);
	}
	


public void tFileDelete_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileDelete_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tFileDelete_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileDelete_1", false);
		start_Hash.put("tFileDelete_1", System.currentTimeMillis());
		
	
	currentComponent="tFileDelete_1";
	
	
		int tos_count_tFileDelete_1 = 0;
		

 



/**
 * [tFileDelete_1 begin ] stop
 */
	
	/**
	 * [tFileDelete_1 main ] start
	 */

	

	
	
	currentComponent="tFileDelete_1";
	
	

 

class DeleteFoldertFileDelete_1{
	 /**
     * delete all the sub-files in 'file'
     * 
     * @param file
     */
	public boolean delete(java.io.File file) {
        java.io.File[] files = file.listFiles();
        for (int i = 0; i < files.length; i++) {
            if (files[i].isFile()) {
                files[i].delete();
            } else if (files[i].isDirectory()) {
                if (!files[i].delete()) {
                    delete(files[i]);
                }
            }
        }
        deleteDirectory(file);
        return file.delete();
    }

    /**
     * delete all the sub-folders in 'file'
     * 
     * @param file
     */
    private void deleteDirectory(java.io.File file) {
        java.io.File[] filed = file.listFiles();
        for (int i = 0; i < filed.length; i++) {
        	if(filed[i].isDirectory()) {
            	deleteDirectory(filed[i]);
            }
            filed[i].delete();
        }
    }

}
    java.io.File file_tFileDelete_1=new java.io.File(context.CARPETA_SALIDA+"/"+context.NOMBRE_ARCHIVO);
    if(file_tFileDelete_1.exists()&& file_tFileDelete_1.isFile()){
    	if(file_tFileDelete_1.delete()){
    		globalMap.put("tFileDelete_1_CURRENT_STATUS", "File deleted.");
		}else{
			globalMap.put("tFileDelete_1_CURRENT_STATUS", "No file deleted.");
				throw new RuntimeException("File " + file_tFileDelete_1.getAbsolutePath() + " can not be deleted.");
		}
	}else{
		globalMap.put("tFileDelete_1_CURRENT_STATUS", "File does not exist or is invalid.");
			throw new RuntimeException("File " + file_tFileDelete_1.getAbsolutePath() + " does not exist or is invalid or is not a file.");
	}
	globalMap.put("tFileDelete_1_DELETE_PATH",context.CARPETA_SALIDA+"/"+context.NOMBRE_ARCHIVO);
 


	tos_count_tFileDelete_1++;

/**
 * [tFileDelete_1 main ] stop
 */
	
	/**
	 * [tFileDelete_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileDelete_1";
	
	

 



/**
 * [tFileDelete_1 process_data_begin ] stop
 */
	
	/**
	 * [tFileDelete_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileDelete_1";
	
	

 



/**
 * [tFileDelete_1 process_data_end ] stop
 */
	
	/**
	 * [tFileDelete_1 end ] start
	 */

	

	
	
	currentComponent="tFileDelete_1";
	
	

 

ok_Hash.put("tFileDelete_1", true);
end_Hash.put("tFileDelete_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk4", 0, "ok");
				}
				tFixedFlowInput_2Process(globalMap);



/**
 * [tFileDelete_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileDelete_1 finally ] start
	 */

	

	
	
	currentComponent="tFileDelete_1";
	
	

 



/**
 * [tFileDelete_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileDelete_1_SUBPROCESS_STATE", 1);
	}
	


public static class row19Struct implements routines.system.IPersistableRow<row19Struct> {
    final static byte[] commonByteArrayLock_VAC_CONSOLIDADOS_VAC_SIS151 = new byte[0];
    static byte[] commonByteArray_VAC_CONSOLIDADOS_VAC_SIS151 = new byte[0];

	
			    public String CARPETA_SALIDA;

				public String getCARPETA_SALIDA () {
					return this.CARPETA_SALIDA;
				}

				public Boolean CARPETA_SALIDAIsNullable(){
				    return true;
				}
				public Boolean CARPETA_SALIDAIsKey(){
				    return false;
				}
				public Integer CARPETA_SALIDALength(){
				    return null;
				}
				public Integer CARPETA_SALIDAPrecision(){
				    return null;
				}
				public String CARPETA_SALIDADefault(){
				
					return null;
				
				}
				public String CARPETA_SALIDAComment(){
				
				    return "";
				
				}
				public String CARPETA_SALIDAPattern(){
				
					return "";
				
				}
				public String CARPETA_SALIDAOriginalDbColumnName(){
				
					return "CARPETA_SALIDA";
				
				}

				
			    public String NOMBRE_ZIP;

				public String getNOMBRE_ZIP () {
					return this.NOMBRE_ZIP;
				}

				public Boolean NOMBRE_ZIPIsNullable(){
				    return true;
				}
				public Boolean NOMBRE_ZIPIsKey(){
				    return false;
				}
				public Integer NOMBRE_ZIPLength(){
				    return null;
				}
				public Integer NOMBRE_ZIPPrecision(){
				    return null;
				}
				public String NOMBRE_ZIPDefault(){
				
					return null;
				
				}
				public String NOMBRE_ZIPComment(){
				
				    return "";
				
				}
				public String NOMBRE_ZIPPattern(){
				
					return "";
				
				}
				public String NOMBRE_ZIPOriginalDbColumnName(){
				
					return "NOMBRE_ZIP";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_VAC_CONSOLIDADOS_VAC_SIS151.length) {
				if(length < 1024 && commonByteArray_VAC_CONSOLIDADOS_VAC_SIS151.length == 0) {
   					commonByteArray_VAC_CONSOLIDADOS_VAC_SIS151 = new byte[1024];
				} else {
   					commonByteArray_VAC_CONSOLIDADOS_VAC_SIS151 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_VAC_CONSOLIDADOS_VAC_SIS151, 0, length);
			strReturn = new String(commonByteArray_VAC_CONSOLIDADOS_VAC_SIS151, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_VAC_CONSOLIDADOS_VAC_SIS151.length) {
				if(length < 1024 && commonByteArray_VAC_CONSOLIDADOS_VAC_SIS151.length == 0) {
   					commonByteArray_VAC_CONSOLIDADOS_VAC_SIS151 = new byte[1024];
				} else {
   					commonByteArray_VAC_CONSOLIDADOS_VAC_SIS151 = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_VAC_CONSOLIDADOS_VAC_SIS151, 0, length);
			strReturn = new String(commonByteArray_VAC_CONSOLIDADOS_VAC_SIS151, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_VAC_CONSOLIDADOS_VAC_SIS151) {

        	try {

        		int length = 0;
		
					this.CARPETA_SALIDA = readString(dis);
					
					this.NOMBRE_ZIP = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_VAC_CONSOLIDADOS_VAC_SIS151) {

        	try {

        		int length = 0;
		
					this.CARPETA_SALIDA = readString(dis);
					
					this.NOMBRE_ZIP = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.CARPETA_SALIDA,dos);
					
					// String
				
						writeString(this.NOMBRE_ZIP,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.CARPETA_SALIDA,dos);
					
					// String
				
						writeString(this.NOMBRE_ZIP,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("CARPETA_SALIDA="+CARPETA_SALIDA);
		sb.append(",NOMBRE_ZIP="+NOMBRE_ZIP);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row19Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tFixedFlowInput_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFixedFlowInput_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row19Struct row19 = new row19Struct();




	
	/**
	 * [tBufferOutput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tBufferOutput_1", false);
		start_Hash.put("tBufferOutput_1", System.currentTimeMillis());
		
	
	currentComponent="tBufferOutput_1";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row19");
					}
				
		int tos_count_tBufferOutput_1 = 0;
		

 



/**
 * [tBufferOutput_1 begin ] stop
 */



	
	/**
	 * [tFixedFlowInput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tFixedFlowInput_2", false);
		start_Hash.put("tFixedFlowInput_2", System.currentTimeMillis());
		
	
	currentComponent="tFixedFlowInput_2";
	
	
		int tos_count_tFixedFlowInput_2 = 0;
		

	    for (int i_tFixedFlowInput_2 = 0 ; i_tFixedFlowInput_2 < 1 ; i_tFixedFlowInput_2++) {
	                	            	
    	            		row19.CARPETA_SALIDA = context.CARPETA_SALIDA;
    	            	        	            	
    	            		row19.NOMBRE_ZIP = context.NOMBRE_ZIP;
    	            	

 



/**
 * [tFixedFlowInput_2 begin ] stop
 */
	
	/**
	 * [tFixedFlowInput_2 main ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_2";
	
	

 


	tos_count_tFixedFlowInput_2++;

/**
 * [tFixedFlowInput_2 main ] stop
 */
	
	/**
	 * [tFixedFlowInput_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_2";
	
	

 



/**
 * [tFixedFlowInput_2 process_data_begin ] stop
 */

	
	/**
	 * [tBufferOutput_1 main ] start
	 */

	

	
	
	currentComponent="tBufferOutput_1";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row19"
						
						);
					}
					



String[] row_tBufferOutput_1=new String[]{"","",};		
	    if(row19.CARPETA_SALIDA != null){
	        
	            row_tBufferOutput_1[0] = row19.CARPETA_SALIDA;
	                        			    
	    }else{
	    	row_tBufferOutput_1[0] = null;
	    }
	    if(row19.NOMBRE_ZIP != null){
	        
	            row_tBufferOutput_1[1] = row19.NOMBRE_ZIP;
	                        			    
	    }else{
	    	row_tBufferOutput_1[1] = null;
	    }
	globalBuffer.add(row_tBufferOutput_1);	
	
 


	tos_count_tBufferOutput_1++;

/**
 * [tBufferOutput_1 main ] stop
 */
	
	/**
	 * [tBufferOutput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tBufferOutput_1";
	
	

 



/**
 * [tBufferOutput_1 process_data_begin ] stop
 */
	
	/**
	 * [tBufferOutput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tBufferOutput_1";
	
	

 



/**
 * [tBufferOutput_1 process_data_end ] stop
 */



	
	/**
	 * [tFixedFlowInput_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_2";
	
	

 



/**
 * [tFixedFlowInput_2 process_data_end ] stop
 */
	
	/**
	 * [tFixedFlowInput_2 end ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_2";
	
	

        }
        globalMap.put("tFixedFlowInput_2_NB_LINE", 1);        

 

ok_Hash.put("tFixedFlowInput_2", true);
end_Hash.put("tFixedFlowInput_2", System.currentTimeMillis());




/**
 * [tFixedFlowInput_2 end ] stop
 */

	
	/**
	 * [tBufferOutput_1 end ] start
	 */

	

	
	
	currentComponent="tBufferOutput_1";
	
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row19");
			  	}
			  	
 

ok_Hash.put("tBufferOutput_1", true);
end_Hash.put("tBufferOutput_1", System.currentTimeMillis());




/**
 * [tBufferOutput_1 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFixedFlowInput_2 finally ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_2";
	
	

 



/**
 * [tFixedFlowInput_2 finally ] stop
 */

	
	/**
	 * [tBufferOutput_1 finally ] start
	 */

	

	
	
	currentComponent="tBufferOutput_1";
	
	

 



/**
 * [tBufferOutput_1 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFixedFlowInput_2_SUBPROCESS_STATE", 1);
	}
	


public void tPostjob_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPostjob_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tPostjob_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostjob_1", false);
		start_Hash.put("tPostjob_1", System.currentTimeMillis());
		
	
	currentComponent="tPostjob_1";
	
	
		int tos_count_tPostjob_1 = 0;
		

 



/**
 * [tPostjob_1 begin ] stop
 */
	
	/**
	 * [tPostjob_1 main ] start
	 */

	

	
	
	currentComponent="tPostjob_1";
	
	

 


	tos_count_tPostjob_1++;

/**
 * [tPostjob_1 main ] stop
 */
	
	/**
	 * [tPostjob_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tPostjob_1";
	
	

 



/**
 * [tPostjob_1 process_data_begin ] stop
 */
	
	/**
	 * [tPostjob_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tPostjob_1";
	
	

 



/**
 * [tPostjob_1 process_data_end ] stop
 */
	
	/**
	 * [tPostjob_1 end ] start
	 */

	

	
	
	currentComponent="tPostjob_1";
	
	

 

ok_Hash.put("tPostjob_1", true);
end_Hash.put("tPostjob_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk18", 0, "ok");
				}
				tJava_3Process(globalMap);



/**
 * [tPostjob_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPostjob_1 finally ] start
	 */

	

	
	
	currentComponent="tPostjob_1";
	
	

 



/**
 * [tPostjob_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPostjob_1_SUBPROCESS_STATE", 1);
	}
	


public void tJava_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_3_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tJava_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_3", false);
		start_Hash.put("tJava_3", System.currentTimeMillis());
		
	
	currentComponent="tJava_3";
	
	
		int tos_count_tJava_3 = 0;
		


//Guarda en variables de contexto la hora final de ejecución del etl, actualiza el estado a succes y los imprime en consola

context.HORA_FINAL = TalendDate.getDate("HH:mm:ss");
context.ESTADO_EXEC = "Succes";

System.out.println("- End: "+context.HORA_FINAL );
System.out.println("- Estado: "+context.ESTADO_EXEC );
 



/**
 * [tJava_3 begin ] stop
 */
	
	/**
	 * [tJava_3 main ] start
	 */

	

	
	
	currentComponent="tJava_3";
	
	

 


	tos_count_tJava_3++;

/**
 * [tJava_3 main ] stop
 */
	
	/**
	 * [tJava_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_3";
	
	

 



/**
 * [tJava_3 process_data_begin ] stop
 */
	
	/**
	 * [tJava_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_3";
	
	

 



/**
 * [tJava_3 process_data_end ] stop
 */
	
	/**
	 * [tJava_3 end ] start
	 */

	

	
	
	currentComponent="tJava_3";
	
	

 

ok_Hash.put("tJava_3", true);
end_Hash.put("tJava_3", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk19", 0, "ok");
				}
				tOracleClose_1Process(globalMap);
				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk20", 0, "ok");
				}
				tOracleClose_2Process(globalMap);
				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk21", 0, "ok");
				}
				tFixedFlowInput_4Process(globalMap);



/**
 * [tJava_3 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_3 finally ] start
	 */

	

	
	
	currentComponent="tJava_3";
	
	

 



/**
 * [tJava_3 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_3_SUBPROCESS_STATE", 1);
	}
	


public void tOracleClose_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleClose_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tOracleClose_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleClose_1", false);
		start_Hash.put("tOracleClose_1", System.currentTimeMillis());
		
	
	currentComponent="tOracleClose_1";
	
	
		int tos_count_tOracleClose_1 = 0;
		

 



/**
 * [tOracleClose_1 begin ] stop
 */
	
	/**
	 * [tOracleClose_1 main ] start
	 */

	

	
	
	currentComponent="tOracleClose_1";
	
	

	java.sql.Connection conn_tOracleClose_1 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");
	
	if(conn_tOracleClose_1 != null && !conn_tOracleClose_1.isClosed())
	{
		
			conn_tOracleClose_1.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_tOracleConnection_1"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
	}

 


	tos_count_tOracleClose_1++;

/**
 * [tOracleClose_1 main ] stop
 */
	
	/**
	 * [tOracleClose_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleClose_1";
	
	

 



/**
 * [tOracleClose_1 process_data_begin ] stop
 */
	
	/**
	 * [tOracleClose_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleClose_1";
	
	

 



/**
 * [tOracleClose_1 process_data_end ] stop
 */
	
	/**
	 * [tOracleClose_1 end ] start
	 */

	

	
	
	currentComponent="tOracleClose_1";
	
	

 

ok_Hash.put("tOracleClose_1", true);
end_Hash.put("tOracleClose_1", System.currentTimeMillis());




/**
 * [tOracleClose_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleClose_1 finally ] start
	 */

	

	
	
	currentComponent="tOracleClose_1";
	
	

 



/**
 * [tOracleClose_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleClose_1_SUBPROCESS_STATE", 1);
	}
	


public void tOracleClose_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleClose_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tOracleClose_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleClose_2", false);
		start_Hash.put("tOracleClose_2", System.currentTimeMillis());
		
	
	currentComponent="tOracleClose_2";
	
	
		int tos_count_tOracleClose_2 = 0;
		

 



/**
 * [tOracleClose_2 begin ] stop
 */
	
	/**
	 * [tOracleClose_2 main ] start
	 */

	

	
	
	currentComponent="tOracleClose_2";
	
	

	java.sql.Connection conn_tOracleClose_2 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_3");
	
	if(conn_tOracleClose_2 != null && !conn_tOracleClose_2.isClosed())
	{
		
			conn_tOracleClose_2.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_tOracleConnection_3"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
	}

 


	tos_count_tOracleClose_2++;

/**
 * [tOracleClose_2 main ] stop
 */
	
	/**
	 * [tOracleClose_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleClose_2";
	
	

 



/**
 * [tOracleClose_2 process_data_begin ] stop
 */
	
	/**
	 * [tOracleClose_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleClose_2";
	
	

 



/**
 * [tOracleClose_2 process_data_end ] stop
 */
	
	/**
	 * [tOracleClose_2 end ] start
	 */

	

	
	
	currentComponent="tOracleClose_2";
	
	

 

ok_Hash.put("tOracleClose_2", true);
end_Hash.put("tOracleClose_2", System.currentTimeMillis());




/**
 * [tOracleClose_2 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleClose_2 finally ] start
	 */

	

	
	
	currentComponent="tOracleClose_2";
	
	

 



/**
 * [tOracleClose_2 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleClose_2_SUBPROCESS_STATE", 1);
	}
	


public static class row18Struct implements routines.system.IPersistableRow<row18Struct> {
    final static byte[] commonByteArrayLock_VAC_CONSOLIDADOS_VAC_SIS151 = new byte[0];
    static byte[] commonByteArray_VAC_CONSOLIDADOS_VAC_SIS151 = new byte[0];

	
			    public String FECHA_EJECUCION;

				public String getFECHA_EJECUCION () {
					return this.FECHA_EJECUCION;
				}

				public Boolean FECHA_EJECUCIONIsNullable(){
				    return true;
				}
				public Boolean FECHA_EJECUCIONIsKey(){
				    return false;
				}
				public Integer FECHA_EJECUCIONLength(){
				    return null;
				}
				public Integer FECHA_EJECUCIONPrecision(){
				    return null;
				}
				public String FECHA_EJECUCIONDefault(){
				
					return null;
				
				}
				public String FECHA_EJECUCIONComment(){
				
				    return "";
				
				}
				public String FECHA_EJECUCIONPattern(){
				
					return "";
				
				}
				public String FECHA_EJECUCIONOriginalDbColumnName(){
				
					return "FECHA_EJECUCION";
				
				}

				
			    public String HORA_INICIO;

				public String getHORA_INICIO () {
					return this.HORA_INICIO;
				}

				public Boolean HORA_INICIOIsNullable(){
				    return true;
				}
				public Boolean HORA_INICIOIsKey(){
				    return false;
				}
				public Integer HORA_INICIOLength(){
				    return null;
				}
				public Integer HORA_INICIOPrecision(){
				    return null;
				}
				public String HORA_INICIODefault(){
				
					return null;
				
				}
				public String HORA_INICIOComment(){
				
				    return "";
				
				}
				public String HORA_INICIOPattern(){
				
					return "";
				
				}
				public String HORA_INICIOOriginalDbColumnName(){
				
					return "HORA_INICIO";
				
				}

				
			    public String HORA_FINAL;

				public String getHORA_FINAL () {
					return this.HORA_FINAL;
				}

				public Boolean HORA_FINALIsNullable(){
				    return true;
				}
				public Boolean HORA_FINALIsKey(){
				    return false;
				}
				public Integer HORA_FINALLength(){
				    return null;
				}
				public Integer HORA_FINALPrecision(){
				    return null;
				}
				public String HORA_FINALDefault(){
				
					return null;
				
				}
				public String HORA_FINALComment(){
				
				    return "";
				
				}
				public String HORA_FINALPattern(){
				
					return "";
				
				}
				public String HORA_FINALOriginalDbColumnName(){
				
					return "HORA_FINAL";
				
				}

				
			    public String ESTADO;

				public String getESTADO () {
					return this.ESTADO;
				}

				public Boolean ESTADOIsNullable(){
				    return true;
				}
				public Boolean ESTADOIsKey(){
				    return false;
				}
				public Integer ESTADOLength(){
				    return null;
				}
				public Integer ESTADOPrecision(){
				    return null;
				}
				public String ESTADODefault(){
				
					return null;
				
				}
				public String ESTADOComment(){
				
				    return "";
				
				}
				public String ESTADOPattern(){
				
					return "";
				
				}
				public String ESTADOOriginalDbColumnName(){
				
					return "ESTADO";
				
				}

				
			    public String JOBS;

				public String getJOBS () {
					return this.JOBS;
				}

				public Boolean JOBSIsNullable(){
				    return true;
				}
				public Boolean JOBSIsKey(){
				    return false;
				}
				public Integer JOBSLength(){
				    return null;
				}
				public Integer JOBSPrecision(){
				    return null;
				}
				public String JOBSDefault(){
				
					return null;
				
				}
				public String JOBSComment(){
				
				    return "";
				
				}
				public String JOBSPattern(){
				
					return "";
				
				}
				public String JOBSOriginalDbColumnName(){
				
					return "JOBS";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_VAC_CONSOLIDADOS_VAC_SIS151.length) {
				if(length < 1024 && commonByteArray_VAC_CONSOLIDADOS_VAC_SIS151.length == 0) {
   					commonByteArray_VAC_CONSOLIDADOS_VAC_SIS151 = new byte[1024];
				} else {
   					commonByteArray_VAC_CONSOLIDADOS_VAC_SIS151 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_VAC_CONSOLIDADOS_VAC_SIS151, 0, length);
			strReturn = new String(commonByteArray_VAC_CONSOLIDADOS_VAC_SIS151, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_VAC_CONSOLIDADOS_VAC_SIS151.length) {
				if(length < 1024 && commonByteArray_VAC_CONSOLIDADOS_VAC_SIS151.length == 0) {
   					commonByteArray_VAC_CONSOLIDADOS_VAC_SIS151 = new byte[1024];
				} else {
   					commonByteArray_VAC_CONSOLIDADOS_VAC_SIS151 = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_VAC_CONSOLIDADOS_VAC_SIS151, 0, length);
			strReturn = new String(commonByteArray_VAC_CONSOLIDADOS_VAC_SIS151, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_VAC_CONSOLIDADOS_VAC_SIS151) {

        	try {

        		int length = 0;
		
					this.FECHA_EJECUCION = readString(dis);
					
					this.HORA_INICIO = readString(dis);
					
					this.HORA_FINAL = readString(dis);
					
					this.ESTADO = readString(dis);
					
					this.JOBS = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_VAC_CONSOLIDADOS_VAC_SIS151) {

        	try {

        		int length = 0;
		
					this.FECHA_EJECUCION = readString(dis);
					
					this.HORA_INICIO = readString(dis);
					
					this.HORA_FINAL = readString(dis);
					
					this.ESTADO = readString(dis);
					
					this.JOBS = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.FECHA_EJECUCION,dos);
					
					// String
				
						writeString(this.HORA_INICIO,dos);
					
					// String
				
						writeString(this.HORA_FINAL,dos);
					
					// String
				
						writeString(this.ESTADO,dos);
					
					// String
				
						writeString(this.JOBS,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.FECHA_EJECUCION,dos);
					
					// String
				
						writeString(this.HORA_INICIO,dos);
					
					// String
				
						writeString(this.HORA_FINAL,dos);
					
					// String
				
						writeString(this.ESTADO,dos);
					
					// String
				
						writeString(this.JOBS,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("FECHA_EJECUCION="+FECHA_EJECUCION);
		sb.append(",HORA_INICIO="+HORA_INICIO);
		sb.append(",HORA_FINAL="+HORA_FINAL);
		sb.append(",ESTADO="+ESTADO);
		sb.append(",JOBS="+JOBS);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row18Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tFixedFlowInput_4Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFixedFlowInput_4_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row18Struct row18 = new row18Struct();




	
	/**
	 * [tFileOutputDelimited_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputDelimited_1", false);
		start_Hash.put("tFileOutputDelimited_1", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputDelimited_1";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row18");
					}
				
		int tos_count_tFileOutputDelimited_1 = 0;
		

String fileName_tFileOutputDelimited_1 = "";
    fileName_tFileOutputDelimited_1 = (new java.io.File(context.LOGS_EXECUTION)).getAbsolutePath().replace("\\","/");
    String fullName_tFileOutputDelimited_1 = null;
    String extension_tFileOutputDelimited_1 = null;
    String directory_tFileOutputDelimited_1 = null;
    if((fileName_tFileOutputDelimited_1.indexOf("/") != -1)) {
        if(fileName_tFileOutputDelimited_1.lastIndexOf(".") < fileName_tFileOutputDelimited_1.lastIndexOf("/")) {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
            extension_tFileOutputDelimited_1 = "";
        } else {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0, fileName_tFileOutputDelimited_1.lastIndexOf("."));
            extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(fileName_tFileOutputDelimited_1.lastIndexOf("."));
        }
        directory_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0, fileName_tFileOutputDelimited_1.lastIndexOf("/"));
    } else {
        if(fileName_tFileOutputDelimited_1.lastIndexOf(".") != -1) {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0, fileName_tFileOutputDelimited_1.lastIndexOf("."));
            extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(fileName_tFileOutputDelimited_1.lastIndexOf("."));
        } else {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
            extension_tFileOutputDelimited_1 = "";
        }
        directory_tFileOutputDelimited_1 = "";
    }
    boolean isFileGenerated_tFileOutputDelimited_1 = true;
    java.io.File filetFileOutputDelimited_1 = new java.io.File(fileName_tFileOutputDelimited_1);
    globalMap.put("tFileOutputDelimited_1_FILE_NAME",fileName_tFileOutputDelimited_1);
        if(filetFileOutputDelimited_1.exists()){
            isFileGenerated_tFileOutputDelimited_1 = false;
        }
            int nb_line_tFileOutputDelimited_1 = 0;
            int splitedFileNo_tFileOutputDelimited_1 = 0;
            int currentRow_tFileOutputDelimited_1 = 0;

            final String OUT_DELIM_tFileOutputDelimited_1 = /** Start field tFileOutputDelimited_1:FIELDSEPARATOR */";"/** End field tFileOutputDelimited_1:FIELDSEPARATOR */;

            final String OUT_DELIM_ROWSEP_tFileOutputDelimited_1 = /** Start field tFileOutputDelimited_1:ROWSEPARATOR */"\n"/** End field tFileOutputDelimited_1:ROWSEPARATOR */;

                    //create directory only if not exists
                    if(directory_tFileOutputDelimited_1 != null && directory_tFileOutputDelimited_1.trim().length() != 0) {
                        java.io.File dir_tFileOutputDelimited_1 = new java.io.File(directory_tFileOutputDelimited_1);
                        if(!dir_tFileOutputDelimited_1.exists()) {
                            dir_tFileOutputDelimited_1.mkdirs();
                        }
                    }

                        //routines.system.Row
                        java.io.Writer outtFileOutputDelimited_1 = null;

                        outtFileOutputDelimited_1 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
                        new java.io.FileOutputStream(fileName_tFileOutputDelimited_1, true),"ISO-8859-15"));
                resourceMap.put("out_tFileOutputDelimited_1", outtFileOutputDelimited_1);
                        synchronized (multiThreadLockWrite) {
                                    if(filetFileOutputDelimited_1.length()==0){
                                        outtFileOutputDelimited_1.write("FECHA_EJECUCION");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("HORA_INICIO");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("HORA_FINAL");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("ESTADO");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("JOBS");
                                        outtFileOutputDelimited_1.write(OUT_DELIM_ROWSEP_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.flush();
                                    }
                        }


resourceMap.put("nb_line_tFileOutputDelimited_1", nb_line_tFileOutputDelimited_1);

 



/**
 * [tFileOutputDelimited_1 begin ] stop
 */



	
	/**
	 * [tFixedFlowInput_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tFixedFlowInput_4", false);
		start_Hash.put("tFixedFlowInput_4", System.currentTimeMillis());
		
	
	currentComponent="tFixedFlowInput_4";
	
	
		int tos_count_tFixedFlowInput_4 = 0;
		

	    for (int i_tFixedFlowInput_4 = 0 ; i_tFixedFlowInput_4 < 1 ; i_tFixedFlowInput_4++) {
	                	            	
    	            		row18.FECHA_EJECUCION = context.FECHA_EJECUCION;
    	            	        	            	
    	            		row18.HORA_INICIO = context.HORA_INICIO;
    	            	        	            	
    	            		row18.HORA_FINAL = context.HORA_FINAL;
    	            	        	            	
    	            		row18.ESTADO = context.ESTADO_EXEC;
    	            	        	            	
    	            		row18.JOBS = context.JOB;
    	            	

 



/**
 * [tFixedFlowInput_4 begin ] stop
 */
	
	/**
	 * [tFixedFlowInput_4 main ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_4";
	
	

 


	tos_count_tFixedFlowInput_4++;

/**
 * [tFixedFlowInput_4 main ] stop
 */
	
	/**
	 * [tFixedFlowInput_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_4";
	
	

 



/**
 * [tFixedFlowInput_4 process_data_begin ] stop
 */

	
	/**
	 * [tFileOutputDelimited_1 main ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row18"
						
						);
					}
					


                    StringBuilder sb_tFileOutputDelimited_1 = new StringBuilder();
                            if(row18.FECHA_EJECUCION != null) {
                        sb_tFileOutputDelimited_1.append(
                            row18.FECHA_EJECUCION
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row18.HORA_INICIO != null) {
                        sb_tFileOutputDelimited_1.append(
                            row18.HORA_INICIO
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row18.HORA_FINAL != null) {
                        sb_tFileOutputDelimited_1.append(
                            row18.HORA_FINAL
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row18.ESTADO != null) {
                        sb_tFileOutputDelimited_1.append(
                            row18.ESTADO
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row18.JOBS != null) {
                        sb_tFileOutputDelimited_1.append(
                            row18.JOBS
                        );
                            }
                    sb_tFileOutputDelimited_1.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_1);


                    synchronized (multiThreadLockWrite) {
                    nb_line_tFileOutputDelimited_1++;
                    resourceMap.put("nb_line_tFileOutputDelimited_1", nb_line_tFileOutputDelimited_1);

                        outtFileOutputDelimited_1.write(sb_tFileOutputDelimited_1.toString());

                    }



 


	tos_count_tFileOutputDelimited_1++;

/**
 * [tFileOutputDelimited_1 main ] stop
 */
	
	/**
	 * [tFileOutputDelimited_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";
	
	

 



/**
 * [tFileOutputDelimited_1 process_data_begin ] stop
 */
	
	/**
	 * [tFileOutputDelimited_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";
	
	

 



/**
 * [tFileOutputDelimited_1 process_data_end ] stop
 */



	
	/**
	 * [tFixedFlowInput_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_4";
	
	

 



/**
 * [tFixedFlowInput_4 process_data_end ] stop
 */
	
	/**
	 * [tFixedFlowInput_4 end ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_4";
	
	

        }
        globalMap.put("tFixedFlowInput_4_NB_LINE", 1);        

 

ok_Hash.put("tFixedFlowInput_4", true);
end_Hash.put("tFixedFlowInput_4", System.currentTimeMillis());




/**
 * [tFixedFlowInput_4 end ] stop
 */

	
	/**
	 * [tFileOutputDelimited_1 end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";
	
	



		
	   		synchronized (multiThreadLockWrite) {
		
			
					if(outtFileOutputDelimited_1!=null) {
						outtFileOutputDelimited_1.flush();
						outtFileOutputDelimited_1.close();
					}
				
				globalMap.put("tFileOutputDelimited_1_NB_LINE",nb_line_tFileOutputDelimited_1);
				globalMap.put("tFileOutputDelimited_1_FILE_NAME",fileName_tFileOutputDelimited_1);
			
		
			}
		
		
		resourceMap.put("finish_tFileOutputDelimited_1", true);
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row18");
			  	}
			  	
 

ok_Hash.put("tFileOutputDelimited_1", true);
end_Hash.put("tFileOutputDelimited_1", System.currentTimeMillis());




/**
 * [tFileOutputDelimited_1 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFixedFlowInput_4 finally ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_4";
	
	

 



/**
 * [tFixedFlowInput_4 finally ] stop
 */

	
	/**
	 * [tFileOutputDelimited_1 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";
	
	


		if(resourceMap.get("finish_tFileOutputDelimited_1") == null){ 
			
		   		synchronized (multiThreadLockWrite) {
			
				
						java.io.Writer outtFileOutputDelimited_1 = (java.io.Writer)resourceMap.get("out_tFileOutputDelimited_1");
						if(outtFileOutputDelimited_1!=null) {
							outtFileOutputDelimited_1.flush();
							outtFileOutputDelimited_1.close();
						}
					
				
				}
			
			
		}
	

 



/**
 * [tFileOutputDelimited_1 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFixedFlowInput_4_SUBPROCESS_STATE", 1);
	}
	
    public String resuming_logs_dir_path = null;
    public String resuming_checkpoint_path = null;
    public String parent_part_launcher = null;
    private String resumeEntryMethodName = null;
    private boolean globalResumeTicket = false;

    public boolean watch = false;
    // portStats is null, it means don't execute the statistics
    public Integer portStats = null;
    public int portTraces = 4334;
    public String clientHost;
    public String defaultClientHost = "localhost";
    public String contextStr = "Default";
    public boolean isDefaultContext = true;
    public String pid = "0";
    public String rootPid = null;
    public String fatherPid = null;
    public String fatherNode = null;
    public long startTime = 0;
    public boolean isChildJob = false;
    public String log4jLevel = "";
    
    private boolean enableLogStash;

    private boolean execStat = true;

    private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
        protected java.util.Map<String, String> initialValue() {
            java.util.Map<String,String> threadRunResultMap = new java.util.HashMap<String, String>();
            threadRunResultMap.put("errorCode", null);
            threadRunResultMap.put("status", "");
            return threadRunResultMap;
        };
    };

    private SyncInt runningThreadCount =new SyncInt();

    private class SyncInt
    {
        private int count = 0;
        public synchronized void add(int i)
        {
            count +=i;
        }

        public synchronized int getCount()
        {
            return count;
        }
    }

    protected PropertiesWithType context_param = new PropertiesWithType();
    public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

    public String status= "";
    
    
    private final static java.util.Properties jobInfo = new java.util.Properties();
    private final static java.util.Map<String,String> mdcInfo = new java.util.HashMap<>();
    private final static java.util.concurrent.atomic.AtomicLong subJobPidCounter = new java.util.concurrent.atomic.AtomicLong();


    public static void main(String[] args){
        final SIS151 SIS151Class = new SIS151();

        int exitCode = SIS151Class.runJobInTOS(args);

        System.exit(exitCode);
    }
	

	
	
	private void getjobInfo() {
		final String TEMPLATE_PATH = "src/main/templates/jobInfo_template.properties";
		final String BUILD_PATH = "../jobInfo.properties";
		final String path = this.getClass().getResource("").getPath();
		if(path.lastIndexOf("target") > 0) {
			final java.io.File templateFile = new java.io.File(
					path.substring(0, path.lastIndexOf("target")).concat(TEMPLATE_PATH));
			if (templateFile.exists()) {
				readJobInfo(templateFile);
				return;
			}
		}
			readJobInfo(new java.io.File(BUILD_PATH));
	}

    private void readJobInfo(java.io.File jobInfoFile){
	
        if(jobInfoFile.exists()) {
            try (java.io.InputStream is = new java.io.FileInputStream(jobInfoFile)) {
            	jobInfo.load(is);
            } catch (IOException e) {
            	 
                
            }
        }
    }


    public String[][] runJob(String[] args) {

        int exitCode = runJobInTOS(args);
        String[][] bufferValue = (String[][])globalBuffer.toArray(new String[globalBuffer.size()][]);

        return bufferValue;
    }

    public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;
    	
        		hastBufferOutput = true;
    	
        return hastBufferOutput;
    }

    public int runJobInTOS(String[] args) {
	   	// reset status
	   	status = "";
	   	
        String lastStr = "";
        for (String arg : args) {
            if (arg.equalsIgnoreCase("--context_param")) {
                lastStr = arg;
            } else if (lastStr.equals("")) {
                evalParam(arg);
            } else {
                evalParam(lastStr + " " + arg);
                lastStr = "";
            }
        }
        enableLogStash = "true".equalsIgnoreCase(System.getProperty("audit.enabled"));


		
		

        if(clientHost == null) {
            clientHost = defaultClientHost;
        }

        if(pid == null || "0".equals(pid)) {
            pid = TalendString.getAsciiRandomString(6);
        }


        if (rootPid==null) {
            rootPid = pid;
        }


        if (fatherPid==null) {
            fatherPid = pid;
        }else{
            isChildJob = true;
        }

        if (portStats != null) {
            // portStats = -1; //for testing
            if (portStats < 0 || portStats > 65535) {
                // issue:10869, the portStats is invalid, so this client socket can't open
                System.err.println("The statistics socket port " + portStats + " is invalid.");
                execStat = false;
            }
        } else {
            execStat = false;
        }
        boolean inOSGi = routines.system.BundleUtils.inOSGi();

        try {
            java.util.Dictionary<String, Object> jobProperties = null;
            if (inOSGi) {
                jobProperties = routines.system.BundleUtils.getJobProperties(jobName);
    
                if (jobProperties != null && jobProperties.get("context") != null) {
                    contextStr = (String)jobProperties.get("context");
                }
            }
            //call job/subjob with an existing context, like: --context=production. if without this parameter, there will use the default context instead.
            java.io.InputStream inContext = SIS151.class.getClassLoader().getResourceAsStream("vac_consolidados_vac/sis151_0_1/contexts/" + contextStr + ".properties");
            if (inContext == null) {
                inContext = SIS151.class.getClassLoader().getResourceAsStream("config/contexts/" + contextStr + ".properties");
            }
            if (inContext != null) {
                try {
                    //defaultProps is in order to keep the original context value
                    if(context != null && context.isEmpty()) {
    	                defaultProps.load(inContext);
    	                if (inOSGi && jobProperties != null) {
                             java.util.Enumeration<String> keys = jobProperties.keys();
                             while (keys.hasMoreElements()) {
                                 String propKey = keys.nextElement();
                                 if (defaultProps.containsKey(propKey)) {
                                     defaultProps.put(propKey, (String) jobProperties.get(propKey));
                                 }
                             }
    	                }
    	                context = new ContextProperties(defaultProps);
                    }
                } finally {
                    inContext.close();
                }
            } else if (!isDefaultContext) {
                //print info and job continue to run, for case: context_param is not empty.
                System.err.println("Could not find the context " + contextStr);
            }
            
            if(!context_param.isEmpty()) {
                context.putAll(context_param);
				//set types for params from parentJobs
				for (Object key: context_param.keySet()){
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
            }
            class ContextProcessing {
                private void processContext_0() {
                        context.setContextType("CARPETA_SALIDA", "id_String");
                        if(context.getStringValue("CARPETA_SALIDA") == null) {
                            context.CARPETA_SALIDA = null;
                        } else {
                            context.CARPETA_SALIDA=(String) context.getProperty("CARPETA_SALIDA");
                        }
                        context.setContextType("NOMBRE_ARCHIVO", "id_String");
                        if(context.getStringValue("NOMBRE_ARCHIVO") == null) {
                            context.NOMBRE_ARCHIVO = null;
                        } else {
                            context.NOMBRE_ARCHIVO=(String) context.getProperty("NOMBRE_ARCHIVO");
                        }
                        context.setContextType("NOMBRE_ZIP", "id_String");
                        if(context.getStringValue("NOMBRE_ZIP") == null) {
                            context.NOMBRE_ZIP = null;
                        } else {
                            context.NOMBRE_ZIP=(String) context.getProperty("NOMBRE_ZIP");
                        }
                        context.setContextType("CONTADOR", "id_Integer");
                        if(context.getStringValue("CONTADOR") == null) {
                            context.CONTADOR = null;
                        } else {
                            try{
                                context.CONTADOR=routines.system.ParserUtils.parseTo_Integer (context.getProperty("CONTADOR"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "CONTADOR", e.getMessage()));
                                context.CONTADOR=null;
                            }
                        }
                        context.setContextType("NIVEL1", "id_String");
                        if(context.getStringValue("NIVEL1") == null) {
                            context.NIVEL1 = null;
                        } else {
                            context.NIVEL1=(String) context.getProperty("NIVEL1");
                        }
                        context.setContextType("DATOS", "id_Object");
                        if(context.getStringValue("DATOS") == null) {
                            context.DATOS = null;
                        } else {
                            context.DATOS=(Object) context.getProperty("DATOS");
                        }
                        context.setContextType("db_destino_AdditionalParams", "id_String");
                        if(context.getStringValue("db_destino_AdditionalParams") == null) {
                            context.db_destino_AdditionalParams = null;
                        } else {
                            context.db_destino_AdditionalParams=(String) context.getProperty("db_destino_AdditionalParams");
                        }
                        context.setContextType("db_destino_Login", "id_String");
                        if(context.getStringValue("db_destino_Login") == null) {
                            context.db_destino_Login = null;
                        } else {
                            context.db_destino_Login=(String) context.getProperty("db_destino_Login");
                        }
                        context.setContextType("db_destino_Password", "id_Password");
                        if(context.getStringValue("db_destino_Password") == null) {
                            context.db_destino_Password = null;
                        } else {
                            String pwd_db_destino_Password_value = context.getProperty("db_destino_Password");
                            context.db_destino_Password = null;
                            if(pwd_db_destino_Password_value!=null) {
                                if(context_param.containsKey("db_destino_Password")) {//no need to decrypt if it come from program argument or parent job runtime
                                    context.db_destino_Password = pwd_db_destino_Password_value;
                                } else if (!pwd_db_destino_Password_value.isEmpty()) {
                                    try {
                                        context.db_destino_Password = routines.system.PasswordEncryptUtil.decryptPassword(pwd_db_destino_Password_value);
                                        context.put("db_destino_Password",context.db_destino_Password);
                                    } catch (java.lang.RuntimeException e) {
                                        //do nothing
                                    }
                                }
                            }
                        }
                        context.setContextType("db_destino_Port", "id_String");
                        if(context.getStringValue("db_destino_Port") == null) {
                            context.db_destino_Port = null;
                        } else {
                            context.db_destino_Port=(String) context.getProperty("db_destino_Port");
                        }
                        context.setContextType("db_destino_Schema", "id_String");
                        if(context.getStringValue("db_destino_Schema") == null) {
                            context.db_destino_Schema = null;
                        } else {
                            context.db_destino_Schema=(String) context.getProperty("db_destino_Schema");
                        }
                        context.setContextType("db_destino_Server", "id_String");
                        if(context.getStringValue("db_destino_Server") == null) {
                            context.db_destino_Server = null;
                        } else {
                            context.db_destino_Server=(String) context.getProperty("db_destino_Server");
                        }
                        context.setContextType("db_destino_ServiceName", "id_String");
                        if(context.getStringValue("db_destino_ServiceName") == null) {
                            context.db_destino_ServiceName = null;
                        } else {
                            context.db_destino_ServiceName=(String) context.getProperty("db_destino_ServiceName");
                        }
                        context.setContextType("db_origen_AdditionalParams", "id_String");
                        if(context.getStringValue("db_origen_AdditionalParams") == null) {
                            context.db_origen_AdditionalParams = null;
                        } else {
                            context.db_origen_AdditionalParams=(String) context.getProperty("db_origen_AdditionalParams");
                        }
                        context.setContextType("db_origen_Login", "id_String");
                        if(context.getStringValue("db_origen_Login") == null) {
                            context.db_origen_Login = null;
                        } else {
                            context.db_origen_Login=(String) context.getProperty("db_origen_Login");
                        }
                        context.setContextType("db_origen_Password", "id_Password");
                        if(context.getStringValue("db_origen_Password") == null) {
                            context.db_origen_Password = null;
                        } else {
                            String pwd_db_origen_Password_value = context.getProperty("db_origen_Password");
                            context.db_origen_Password = null;
                            if(pwd_db_origen_Password_value!=null) {
                                if(context_param.containsKey("db_origen_Password")) {//no need to decrypt if it come from program argument or parent job runtime
                                    context.db_origen_Password = pwd_db_origen_Password_value;
                                } else if (!pwd_db_origen_Password_value.isEmpty()) {
                                    try {
                                        context.db_origen_Password = routines.system.PasswordEncryptUtil.decryptPassword(pwd_db_origen_Password_value);
                                        context.put("db_origen_Password",context.db_origen_Password);
                                    } catch (java.lang.RuntimeException e) {
                                        //do nothing
                                    }
                                }
                            }
                        }
                        context.setContextType("db_origen_Port", "id_String");
                        if(context.getStringValue("db_origen_Port") == null) {
                            context.db_origen_Port = null;
                        } else {
                            context.db_origen_Port=(String) context.getProperty("db_origen_Port");
                        }
                        context.setContextType("db_origen_Schema", "id_String");
                        if(context.getStringValue("db_origen_Schema") == null) {
                            context.db_origen_Schema = null;
                        } else {
                            context.db_origen_Schema=(String) context.getProperty("db_origen_Schema");
                        }
                        context.setContextType("db_origen_Server", "id_String");
                        if(context.getStringValue("db_origen_Server") == null) {
                            context.db_origen_Server = null;
                        } else {
                            context.db_origen_Server=(String) context.getProperty("db_origen_Server");
                        }
                        context.setContextType("db_origen_ServiceName", "id_String");
                        if(context.getStringValue("db_origen_ServiceName") == null) {
                            context.db_origen_ServiceName = null;
                        } else {
                            context.db_origen_ServiceName=(String) context.getProperty("db_origen_ServiceName");
                        }
                        context.setContextType("DPTO_COD", "id_String");
                        if(context.getStringValue("DPTO_COD") == null) {
                            context.DPTO_COD = null;
                        } else {
                            context.DPTO_COD=(String) context.getProperty("DPTO_COD");
                        }
                        context.setContextType("DPTO_NOMBRE", "id_String");
                        if(context.getStringValue("DPTO_NOMBRE") == null) {
                            context.DPTO_NOMBRE = null;
                        } else {
                            context.DPTO_NOMBRE=(String) context.getProperty("DPTO_NOMBRE");
                        }
                        context.setContextType("FUERZA_ID", "id_String");
                        if(context.getStringValue("FUERZA_ID") == null) {
                            context.FUERZA_ID = null;
                        } else {
                            context.FUERZA_ID=(String) context.getProperty("FUERZA_ID");
                        }
                        context.setContextType("FUERZA_NOMBRE", "id_String");
                        if(context.getStringValue("FUERZA_NOMBRE") == null) {
                            context.FUERZA_NOMBRE = null;
                        } else {
                            context.FUERZA_NOMBRE=(String) context.getProperty("FUERZA_NOMBRE");
                        }
                        context.setContextType("MCPIO_COD", "id_String");
                        if(context.getStringValue("MCPIO_COD") == null) {
                            context.MCPIO_COD = null;
                        } else {
                            context.MCPIO_COD=(String) context.getProperty("MCPIO_COD");
                        }
                        context.setContextType("MCPIO_NOMBRE", "id_String");
                        if(context.getStringValue("MCPIO_NOMBRE") == null) {
                            context.MCPIO_NOMBRE = null;
                        } else {
                            context.MCPIO_NOMBRE=(String) context.getProperty("MCPIO_NOMBRE");
                        }
                        context.setContextType("PERIODO", "id_String");
                        if(context.getStringValue("PERIODO") == null) {
                            context.PERIODO = null;
                        } else {
                            context.PERIODO=(String) context.getProperty("PERIODO");
                        }
                        context.setContextType("TESQUEMA", "id_String");
                        if(context.getStringValue("TESQUEMA") == null) {
                            context.TESQUEMA = null;
                        } else {
                            context.TESQUEMA=(String) context.getProperty("TESQUEMA");
                        }
                        context.setContextType("UORG_ID", "id_String");
                        if(context.getStringValue("UORG_ID") == null) {
                            context.UORG_ID = null;
                        } else {
                            context.UORG_ID=(String) context.getProperty("UORG_ID");
                        }
                        context.setContextType("UORG_NOMBRE", "id_String");
                        if(context.getStringValue("UORG_NOMBRE") == null) {
                            context.UORG_NOMBRE = null;
                        } else {
                            context.UORG_NOMBRE=(String) context.getProperty("UORG_NOMBRE");
                        }
                        context.setContextType("BODEGA", "id_String");
                        if(context.getStringValue("BODEGA") == null) {
                            context.BODEGA = null;
                        } else {
                            context.BODEGA=(String) context.getProperty("BODEGA");
                        }
                        context.setContextType("ESTADO_EXEC", "id_String");
                        if(context.getStringValue("ESTADO_EXEC") == null) {
                            context.ESTADO_EXEC = null;
                        } else {
                            context.ESTADO_EXEC=(String) context.getProperty("ESTADO_EXEC");
                        }
                        context.setContextType("FECHA_EJECUCION", "id_String");
                        if(context.getStringValue("FECHA_EJECUCION") == null) {
                            context.FECHA_EJECUCION = null;
                        } else {
                            context.FECHA_EJECUCION=(String) context.getProperty("FECHA_EJECUCION");
                        }
                        context.setContextType("HORA_FINAL", "id_String");
                        if(context.getStringValue("HORA_FINAL") == null) {
                            context.HORA_FINAL = null;
                        } else {
                            context.HORA_FINAL=(String) context.getProperty("HORA_FINAL");
                        }
                        context.setContextType("HORA_INICIO", "id_String");
                        if(context.getStringValue("HORA_INICIO") == null) {
                            context.HORA_INICIO = null;
                        } else {
                            context.HORA_INICIO=(String) context.getProperty("HORA_INICIO");
                        }
                        context.setContextType("JOB", "id_String");
                        if(context.getStringValue("JOB") == null) {
                            context.JOB = null;
                        } else {
                            context.JOB=(String) context.getProperty("JOB");
                        }
                        context.setContextType("LOGS_ERROR", "id_String");
                        if(context.getStringValue("LOGS_ERROR") == null) {
                            context.LOGS_ERROR = null;
                        } else {
                            context.LOGS_ERROR=(String) context.getProperty("LOGS_ERROR");
                        }
                        context.setContextType("LOGS_EXECUTION", "id_String");
                        if(context.getStringValue("LOGS_EXECUTION") == null) {
                            context.LOGS_EXECUTION = null;
                        } else {
                            context.LOGS_EXECUTION=(String) context.getProperty("LOGS_EXECUTION");
                        }
                        context.setContextType("ORIGEN", "id_String");
                        if(context.getStringValue("ORIGEN") == null) {
                            context.ORIGEN = null;
                        } else {
                            context.ORIGEN=(String) context.getProperty("ORIGEN");
                        }
                        context.setContextType("STORAGE", "id_String");
                        if(context.getStringValue("STORAGE") == null) {
                            context.STORAGE = null;
                        } else {
                            context.STORAGE=(String) context.getProperty("STORAGE");
                        }
                        context.setContextType("MODULO", "id_String");
                        if(context.getStringValue("MODULO") == null) {
                            context.MODULO = null;
                        } else {
                            context.MODULO=(String) context.getProperty("MODULO");
                        }
                        context.setContextType("SARCHIVO_ID", "id_BigDecimal");
                        if(context.getStringValue("SARCHIVO_ID") == null) {
                            context.SARCHIVO_ID = null;
                        } else {
                            try{
                                context.SARCHIVO_ID=routines.system.ParserUtils.parseTo_BigDecimal (context.getProperty("SARCHIVO_ID"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "SARCHIVO_ID", e.getMessage()));
                                context.SARCHIVO_ID=null;
                            }
                        }
                        context.setContextType("SIGLA", "id_String");
                        if(context.getStringValue("SIGLA") == null) {
                            context.SIGLA = null;
                        } else {
                            context.SIGLA=(String) context.getProperty("SIGLA");
                        }
                } 
                public void processAllContext() {
                        processContext_0();
                }
            }

            new ContextProcessing().processAllContext();
        } catch (java.io.IOException ie) {
            System.err.println("Could not load context "+contextStr);
            ie.printStackTrace();
        }

        // get context value from parent directly
        if (parentContextMap != null && !parentContextMap.isEmpty()) {if (parentContextMap.containsKey("CARPETA_SALIDA")) {
                context.CARPETA_SALIDA = (String) parentContextMap.get("CARPETA_SALIDA");
            }if (parentContextMap.containsKey("NOMBRE_ARCHIVO")) {
                context.NOMBRE_ARCHIVO = (String) parentContextMap.get("NOMBRE_ARCHIVO");
            }if (parentContextMap.containsKey("NOMBRE_ZIP")) {
                context.NOMBRE_ZIP = (String) parentContextMap.get("NOMBRE_ZIP");
            }if (parentContextMap.containsKey("CONTADOR")) {
                context.CONTADOR = (Integer) parentContextMap.get("CONTADOR");
            }if (parentContextMap.containsKey("NIVEL1")) {
                context.NIVEL1 = (String) parentContextMap.get("NIVEL1");
            }if (parentContextMap.containsKey("DATOS")) {
                context.DATOS = (Object) parentContextMap.get("DATOS");
            }if (parentContextMap.containsKey("db_destino_AdditionalParams")) {
                context.db_destino_AdditionalParams = (String) parentContextMap.get("db_destino_AdditionalParams");
            }if (parentContextMap.containsKey("db_destino_Login")) {
                context.db_destino_Login = (String) parentContextMap.get("db_destino_Login");
            }if (parentContextMap.containsKey("db_destino_Password")) {
                context.db_destino_Password = (java.lang.String) parentContextMap.get("db_destino_Password");
            }if (parentContextMap.containsKey("db_destino_Port")) {
                context.db_destino_Port = (String) parentContextMap.get("db_destino_Port");
            }if (parentContextMap.containsKey("db_destino_Schema")) {
                context.db_destino_Schema = (String) parentContextMap.get("db_destino_Schema");
            }if (parentContextMap.containsKey("db_destino_Server")) {
                context.db_destino_Server = (String) parentContextMap.get("db_destino_Server");
            }if (parentContextMap.containsKey("db_destino_ServiceName")) {
                context.db_destino_ServiceName = (String) parentContextMap.get("db_destino_ServiceName");
            }if (parentContextMap.containsKey("db_origen_AdditionalParams")) {
                context.db_origen_AdditionalParams = (String) parentContextMap.get("db_origen_AdditionalParams");
            }if (parentContextMap.containsKey("db_origen_Login")) {
                context.db_origen_Login = (String) parentContextMap.get("db_origen_Login");
            }if (parentContextMap.containsKey("db_origen_Password")) {
                context.db_origen_Password = (java.lang.String) parentContextMap.get("db_origen_Password");
            }if (parentContextMap.containsKey("db_origen_Port")) {
                context.db_origen_Port = (String) parentContextMap.get("db_origen_Port");
            }if (parentContextMap.containsKey("db_origen_Schema")) {
                context.db_origen_Schema = (String) parentContextMap.get("db_origen_Schema");
            }if (parentContextMap.containsKey("db_origen_Server")) {
                context.db_origen_Server = (String) parentContextMap.get("db_origen_Server");
            }if (parentContextMap.containsKey("db_origen_ServiceName")) {
                context.db_origen_ServiceName = (String) parentContextMap.get("db_origen_ServiceName");
            }if (parentContextMap.containsKey("DPTO_COD")) {
                context.DPTO_COD = (String) parentContextMap.get("DPTO_COD");
            }if (parentContextMap.containsKey("DPTO_NOMBRE")) {
                context.DPTO_NOMBRE = (String) parentContextMap.get("DPTO_NOMBRE");
            }if (parentContextMap.containsKey("FUERZA_ID")) {
                context.FUERZA_ID = (String) parentContextMap.get("FUERZA_ID");
            }if (parentContextMap.containsKey("FUERZA_NOMBRE")) {
                context.FUERZA_NOMBRE = (String) parentContextMap.get("FUERZA_NOMBRE");
            }if (parentContextMap.containsKey("MCPIO_COD")) {
                context.MCPIO_COD = (String) parentContextMap.get("MCPIO_COD");
            }if (parentContextMap.containsKey("MCPIO_NOMBRE")) {
                context.MCPIO_NOMBRE = (String) parentContextMap.get("MCPIO_NOMBRE");
            }if (parentContextMap.containsKey("PERIODO")) {
                context.PERIODO = (String) parentContextMap.get("PERIODO");
            }if (parentContextMap.containsKey("TESQUEMA")) {
                context.TESQUEMA = (String) parentContextMap.get("TESQUEMA");
            }if (parentContextMap.containsKey("UORG_ID")) {
                context.UORG_ID = (String) parentContextMap.get("UORG_ID");
            }if (parentContextMap.containsKey("UORG_NOMBRE")) {
                context.UORG_NOMBRE = (String) parentContextMap.get("UORG_NOMBRE");
            }if (parentContextMap.containsKey("BODEGA")) {
                context.BODEGA = (String) parentContextMap.get("BODEGA");
            }if (parentContextMap.containsKey("ESTADO_EXEC")) {
                context.ESTADO_EXEC = (String) parentContextMap.get("ESTADO_EXEC");
            }if (parentContextMap.containsKey("FECHA_EJECUCION")) {
                context.FECHA_EJECUCION = (String) parentContextMap.get("FECHA_EJECUCION");
            }if (parentContextMap.containsKey("HORA_FINAL")) {
                context.HORA_FINAL = (String) parentContextMap.get("HORA_FINAL");
            }if (parentContextMap.containsKey("HORA_INICIO")) {
                context.HORA_INICIO = (String) parentContextMap.get("HORA_INICIO");
            }if (parentContextMap.containsKey("JOB")) {
                context.JOB = (String) parentContextMap.get("JOB");
            }if (parentContextMap.containsKey("LOGS_ERROR")) {
                context.LOGS_ERROR = (String) parentContextMap.get("LOGS_ERROR");
            }if (parentContextMap.containsKey("LOGS_EXECUTION")) {
                context.LOGS_EXECUTION = (String) parentContextMap.get("LOGS_EXECUTION");
            }if (parentContextMap.containsKey("ORIGEN")) {
                context.ORIGEN = (String) parentContextMap.get("ORIGEN");
            }if (parentContextMap.containsKey("STORAGE")) {
                context.STORAGE = (String) parentContextMap.get("STORAGE");
            }if (parentContextMap.containsKey("MODULO")) {
                context.MODULO = (String) parentContextMap.get("MODULO");
            }if (parentContextMap.containsKey("SARCHIVO_ID")) {
                context.SARCHIVO_ID = (BigDecimal) parentContextMap.get("SARCHIVO_ID");
            }if (parentContextMap.containsKey("SIGLA")) {
                context.SIGLA = (String) parentContextMap.get("SIGLA");
            }
        }

        //Resume: init the resumeUtil
        resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
        resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
        resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
			parametersToEncrypt.add("db_destino_Password");
			parametersToEncrypt.add("db_origen_Password");
        //Resume: jobStart
        resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","","","",resumeUtil.convertToJsonText(context,ContextProperties.class,parametersToEncrypt));


if(execStat) {
    try {
        runStat.openSocket(!isChildJob);
        runStat.setAllPID(rootPid, fatherPid, pid, jobName);
        runStat.startThreadStat(clientHost, portStats);
        runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
    } catch (java.io.IOException ioException) {
        ioException.printStackTrace();
    }
}



	
	    java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
	    globalMap.put("concurrentHashMap", concurrentHashMap);
	

    long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
    long endUsedMemory = 0;
    long end = 0;

    startTime = System.currentTimeMillis();


this.globalResumeTicket = true;//to run tPreJob

try {
errorCode = null;tPrejob_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tPrejob_1) {
globalMap.put("tPrejob_1_SUBPROCESS_STATE", -1);

e_tPrejob_1.printStackTrace();

}




this.globalResumeTicket = false;//to run others jobs
final Thread launchingThread = Thread.currentThread();
        runningThreadCount.add(1);
        new Thread(){
            public void run() {

                java.util.Map threadRunResultMap = new java.util.HashMap();
                threadRunResultMap.put("errorCode", null);
                threadRunResultMap.put("status", "");
                threadLocal.set(threadRunResultMap);

                try {
((java.util.Map) threadLocal.get()).put("errorCode", null);tJava_1Process(globalMap);
if ( !"failure".equals(((java.util.Map)threadLocal.get()).get("status")) ) {
((java.util.Map) threadLocal.get()).put("status", "end");
}
}catch (TalendException e_tJava_1) {
globalMap.put("tJava_1_SUBPROCESS_STATE", -1);

e_tJava_1.printStackTrace();

}catch (java.lang.Error e_tJava_1) {
globalMap.put("tJava_1_SUBPROCESS_STATE", -1);
((java.util.Map) threadLocal.get()).put("status", "failure");throw e_tJava_1;

}
                finally {
                    Integer localErrorCode = (Integer)(((java.util.Map)threadLocal.get()).get("errorCode"));
                    String localStatus = (String)(((java.util.Map)threadLocal.get()).get("status"));
                    if (localErrorCode != null) {
                        if (errorCode == null || localErrorCode.compareTo(errorCode) > 0) {
                           errorCode = localErrorCode;
                        }
                    }
                    if (!status.equals("failure")){
                        status = localStatus;
                    }

                    if ("true".equals(((java.util.Map) threadLocal.get()).get("JobInterrupted"))) {
                        launchingThread.interrupt();
                    }

                    runningThreadCount.add(-1);
                }
            }
        }.start();

    boolean interrupted = false;
    while (runningThreadCount.getCount() > 0) {
        try {
            Thread.sleep(10);
        } catch (java.lang.InterruptedException e) {
            interrupted = true;
        } catch (java.lang.Exception e) {
            e.printStackTrace();
        }
    }

    if (interrupted) {
        Thread.currentThread().interrupt();
    }



this.globalResumeTicket = true;//to run tPostJob

try {
errorCode = null;tPostjob_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tPostjob_1) {
globalMap.put("tPostjob_1_SUBPROCESS_STATE", -1);

e_tPostjob_1.printStackTrace();

}



        end = System.currentTimeMillis();

        if (watch) {
            System.out.println((end-startTime)+" milliseconds");
        }

        endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
        if (false) {
            System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : SIS151");
        }



if (execStat) {
    runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
    runStat.stopThreadStat();
}
    int returnCode = 0;

        Integer localErrorCode = (Integer)(((java.util.Map)threadLocal.get()).get("errorCode"));
        String localStatus = (String)(((java.util.Map)threadLocal.get()).get("status"));
        if (localErrorCode != null) {
            if (errorCode == null || localErrorCode.compareTo(errorCode) > 0) {
                   errorCode = localErrorCode;
            }
        }
        if (localStatus != null && !status.equals("failure")){
            status = localStatus;
        }

    if(errorCode == null) {
         returnCode = status != null && status.equals("failure") ? 1 : 0;
    } else {
         returnCode = errorCode.intValue();
    }
    resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","" + returnCode,"","","");
    resumeUtil.flush();


    return returnCode;

  }

    // only for OSGi env
    public void destroy() {
    closeSqlDbConnections();


    }



    private void closeSqlDbConnections() {
        try {
            Object obj_conn;
            obj_conn = globalMap.remove("conn_tOracleConnection_1");
            if (null != obj_conn) {
                ((java.sql.Connection) obj_conn).close();
            }
            obj_conn = globalMap.remove("conn_tOracleConnection_3");
            if (null != obj_conn) {
                ((java.sql.Connection) obj_conn).close();
            }
        } catch (java.lang.Exception e) {
        }
    }











    private java.util.Map<String, Object> getSharedConnections4REST() {
        java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();
            connections.put("conn_tOracleConnection_1", globalMap.get("conn_tOracleConnection_1"));
            connections.put("conn_tOracleConnection_3", globalMap.get("conn_tOracleConnection_3"));






        return connections;
    }

    private void evalParam(String arg) {
        if (arg.startsWith("--resuming_logs_dir_path")) {
            resuming_logs_dir_path = arg.substring(25);
        } else if (arg.startsWith("--resuming_checkpoint_path")) {
            resuming_checkpoint_path = arg.substring(27);
        } else if (arg.startsWith("--parent_part_launcher")) {
            parent_part_launcher = arg.substring(23);
        } else if (arg.startsWith("--watch")) {
            watch = true;
        } else if (arg.startsWith("--stat_port=")) {
            String portStatsStr = arg.substring(12);
            if (portStatsStr != null && !portStatsStr.equals("null")) {
                portStats = Integer.parseInt(portStatsStr);
            }
        } else if (arg.startsWith("--trace_port=")) {
            portTraces = Integer.parseInt(arg.substring(13));
        } else if (arg.startsWith("--client_host=")) {
            clientHost = arg.substring(14);
        } else if (arg.startsWith("--context=")) {
            contextStr = arg.substring(10);
            isDefaultContext = false;
        } else if (arg.startsWith("--father_pid=")) {
            fatherPid = arg.substring(13);
        } else if (arg.startsWith("--root_pid=")) {
            rootPid = arg.substring(11);
        } else if (arg.startsWith("--father_node=")) {
            fatherNode = arg.substring(14);
        } else if (arg.startsWith("--pid=")) {
            pid = arg.substring(6);
        } else if (arg.startsWith("--context_type")) {
            String keyValue = arg.substring(15);
			int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.setContextType(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }

            }

		} else if (arg.startsWith("--context_param")) {
            String keyValue = arg.substring(16);
            int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }
            }
        } else if (arg.startsWith("--context_file")) {
        	String keyValue = arg.substring(15);
        	String filePath = new String(java.util.Base64.getDecoder().decode(keyValue));
        	java.nio.file.Path contextFile = java.nio.file.Paths.get(filePath);
            try (java.io.BufferedReader reader = java.nio.file.Files.newBufferedReader(contextFile)) {
                String line;
                while ((line = reader.readLine()) != null) {
                    int index = -1;
                    if ( (index = line.indexOf('=')) > -1) {
							if (line.startsWith("--context_param")) {
								if ("id_Password".equals(context_param.getContextType(line.substring(16, index)))) {
									context_param.put(line.substring(16, index), routines.system.PasswordEncryptUtil.decryptPassword(
											line.substring(index + 1)));
								} else {
									context_param.put(line.substring(16, index), line.substring(index + 1));
								}
							}else {//--context_type
								context_param.setContextType(line.substring(15, index), line.substring(index + 1));
							}
                    }
                }
            } catch (java.io.IOException e) {
            	System.err.println("Could not load the context file: " + filePath);
                e.printStackTrace();
            }
        } else if (arg.startsWith("--log4jLevel=")) {
            log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--audit.enabled") && arg.contains("=")) {//for trunjob call
		    final int equal = arg.indexOf('=');
			final String key = arg.substring("--".length(), equal);
			System.setProperty(key, arg.substring(equal + 1));
		}
    }
    
    private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

    private final String[][] escapeChars = {
        {"\\\\","\\"},{"\\n","\n"},{"\\'","\'"},{"\\r","\r"},
        {"\\f","\f"},{"\\b","\b"},{"\\t","\t"}
        };
    private String replaceEscapeChars (String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0],currIndex);
				if (index>=0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0], strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
    }

    public Integer getErrorCode() {
        return errorCode;
    }


    public String getStatus() {
        return status;
    }

    ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 *     491267 characters generated by Talend Open Studio for ESB 
 *     on the November 1, 2024, 12:41:34 AM COT
 ************************************************************************************************/