// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for ESB
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


package vac_consolidados_vac.vacunasaplicadasmsps_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.Utils;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.GenerarUUID;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;
 




	//the import part of tJavaRow_1
	//import java.util.List;

	//the import part of tJava_2
	import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.io.FileOutputStream;
import java.io.ObjectOutputStream;
import java.io.OutputStreamWriter;

	//the import part of tJavaRow_2
	//import java.util.List;

	//the import part of tJava_1
	//import java.util.List;


@SuppressWarnings("unused")

/**
 * Job: VacunasAplicadasMSPS Purpose: <br>
 * Description:  <br>
 * @author jorgejlhc@gmail.com
 * @version 8.8.8.20240722_1936-SNAPSHOT
 * @status 
 */
public class VacunasAplicadasMSPS implements TalendJob {

protected static void logIgnoredError(String message, Throwable cause) {
       System.err.println(message);
       if (cause != null) {
               cause.printStackTrace();
       }

}


	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}
	
	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	
	private final static String utf8Charset = "UTF-8";
	

	//contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String,String> propertyTypes = new java.util.HashMap<>();
		
		public PropertiesWithType(java.util.Properties properties){
			super(properties);
		}
		public PropertiesWithType(){
			super();
		}
		
		public void setContextType(String key, String type) {
			propertyTypes.put(key,type);
		}
	
		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}	
	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();
		

	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties){
			super(properties);
		}
		public ContextProperties(){
			super();
		}

		public void synchronizeContext(){
			
			if(CARPETA_SALIDA != null){
				
					this.setProperty("CARPETA_SALIDA", CARPETA_SALIDA.toString());
				
			}
			
			if(NOMBRE_PERSONAS != null){
				
					this.setProperty("NOMBRE_PERSONAS", NOMBRE_PERSONAS.toString());
				
			}
			
			if(NOMBRE_VACUNAS != null){
				
					this.setProperty("NOMBRE_VACUNAS", NOMBRE_VACUNAS.toString());
				
			}
			
			if(NOMBRE_ZIP != null){
				
					this.setProperty("NOMBRE_ZIP", NOMBRE_ZIP.toString());
				
			}
			
			if(ENCABEZADOS != null){
				
					this.setProperty("ENCABEZADOS", ENCABEZADOS.toString());
				
			}
			
			if(MSPS != null){
				
					this.setProperty("MSPS", MSPS.toString());
				
			}
			
			if(QUERY != null){
				
					this.setProperty("QUERY", QUERY.toString());
				
			}
			
			if(SP_ESTADO != null){
				
					this.setProperty("SP_ESTADO", SP_ESTADO.toString());
				
			}
			
			if(SP_MENSAJE != null){
				
					this.setProperty("SP_MENSAJE", SP_MENSAJE.toString());
				
			}
			
			if(db_destino_AdditionalParams != null){
				
					this.setProperty("db_destino_AdditionalParams", db_destino_AdditionalParams.toString());
				
			}
			
			if(db_destino_Login != null){
				
					this.setProperty("db_destino_Login", db_destino_Login.toString());
				
			}
			
			if(db_destino_Password != null){
				
					this.setProperty("db_destino_Password", db_destino_Password.toString());
				
			}
			
			if(db_destino_Port != null){
				
					this.setProperty("db_destino_Port", db_destino_Port.toString());
				
			}
			
			if(db_destino_Schema != null){
				
					this.setProperty("db_destino_Schema", db_destino_Schema.toString());
				
			}
			
			if(db_destino_Server != null){
				
					this.setProperty("db_destino_Server", db_destino_Server.toString());
				
			}
			
			if(db_destino_ServiceName != null){
				
					this.setProperty("db_destino_ServiceName", db_destino_ServiceName.toString());
				
			}
			
			if(db_origen_AdditionalParams != null){
				
					this.setProperty("db_origen_AdditionalParams", db_origen_AdditionalParams.toString());
				
			}
			
			if(db_origen_Login != null){
				
					this.setProperty("db_origen_Login", db_origen_Login.toString());
				
			}
			
			if(db_origen_Password != null){
				
					this.setProperty("db_origen_Password", db_origen_Password.toString());
				
			}
			
			if(db_origen_Port != null){
				
					this.setProperty("db_origen_Port", db_origen_Port.toString());
				
			}
			
			if(db_origen_Schema != null){
				
					this.setProperty("db_origen_Schema", db_origen_Schema.toString());
				
			}
			
			if(db_origen_Server != null){
				
					this.setProperty("db_origen_Server", db_origen_Server.toString());
				
			}
			
			if(db_origen_ServiceName != null){
				
					this.setProperty("db_origen_ServiceName", db_origen_ServiceName.toString());
				
			}
			
			if(BIOLOGICO_ID != null){
				
					this.setProperty("BIOLOGICO_ID", BIOLOGICO_ID.toString());
				
			}
			
			if(FECHA_FINAL != null){
				
					this.setProperty("FECHA_FINAL", FECHA_FINAL.toString());
				
			}
			
			if(FECHA_INICIAL != null){
				
					this.setProperty("FECHA_INICIAL", FECHA_INICIAL.toString());
				
			}
			
			if(FUERZA_ID != null){
				
					this.setProperty("FUERZA_ID", FUERZA_ID.toString());
				
			}
			
			if(TDOSIS_ID != null){
				
					this.setProperty("TDOSIS_ID", TDOSIS_ID.toString());
				
			}
			
			if(UORG_ID != null){
				
					this.setProperty("UORG_ID", UORG_ID.toString());
				
			}
			
			if(BODEGA != null){
				
					this.setProperty("BODEGA", BODEGA.toString());
				
			}
			
			if(ESTADO_EXEC != null){
				
					this.setProperty("ESTADO_EXEC", ESTADO_EXEC.toString());
				
			}
			
			if(FECHA_EJECUCION != null){
				
					this.setProperty("FECHA_EJECUCION", FECHA_EJECUCION.toString());
				
			}
			
			if(HORA_FINAL != null){
				
					this.setProperty("HORA_FINAL", HORA_FINAL.toString());
				
			}
			
			if(HORA_INICIO != null){
				
					this.setProperty("HORA_INICIO", HORA_INICIO.toString());
				
			}
			
			if(JOB != null){
				
					this.setProperty("JOB", JOB.toString());
				
			}
			
			if(LOGS_ERROR != null){
				
					this.setProperty("LOGS_ERROR", LOGS_ERROR.toString());
				
			}
			
			if(LOGS_EXECUTION != null){
				
					this.setProperty("LOGS_EXECUTION", LOGS_EXECUTION.toString());
				
			}
			
			if(ORIGEN != null){
				
					this.setProperty("ORIGEN", ORIGEN.toString());
				
			}
			
			if(STORAGE != null){
				
					this.setProperty("STORAGE", STORAGE.toString());
				
			}
			
			if(MODULO != null){
				
					this.setProperty("MODULO", MODULO.toString());
				
			}
			
			if(SARCHIVO_ID != null){
				
					this.setProperty("SARCHIVO_ID", SARCHIVO_ID.toString());
				
			}
			
			if(SIGLA != null){
				
					this.setProperty("SIGLA", SIGLA.toString());
				
			}
			
		}
		
		//if the stored or passed value is "<TALEND_NULL>" string, it mean null
		public String getStringValue(String key) {
			String origin_value = this.getProperty(key);
			if(NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY.equals(origin_value)) {
				return null;
			}
			return origin_value;
		}

public String CARPETA_SALIDA;
public String getCARPETA_SALIDA(){
	return this.CARPETA_SALIDA;
}
public String NOMBRE_PERSONAS;
public String getNOMBRE_PERSONAS(){
	return this.NOMBRE_PERSONAS;
}
public String NOMBRE_VACUNAS;
public String getNOMBRE_VACUNAS(){
	return this.NOMBRE_VACUNAS;
}
public String NOMBRE_ZIP;
public String getNOMBRE_ZIP(){
	return this.NOMBRE_ZIP;
}
public String ENCABEZADOS;
public String getENCABEZADOS(){
	return this.ENCABEZADOS;
}
public String MSPS;
public String getMSPS(){
	return this.MSPS;
}
public String QUERY;
public String getQUERY(){
	return this.QUERY;
}
public Integer SP_ESTADO;
public Integer getSP_ESTADO(){
	return this.SP_ESTADO;
}
public String SP_MENSAJE;
public String getSP_MENSAJE(){
	return this.SP_MENSAJE;
}
public String db_destino_AdditionalParams;
public String getDb_destino_AdditionalParams(){
	return this.db_destino_AdditionalParams;
}
public String db_destino_Login;
public String getDb_destino_Login(){
	return this.db_destino_Login;
}
public java.lang.String db_destino_Password;
public java.lang.String getDb_destino_Password(){
	return this.db_destino_Password;
}
public String db_destino_Port;
public String getDb_destino_Port(){
	return this.db_destino_Port;
}
public String db_destino_Schema;
public String getDb_destino_Schema(){
	return this.db_destino_Schema;
}
public String db_destino_Server;
public String getDb_destino_Server(){
	return this.db_destino_Server;
}
public String db_destino_ServiceName;
public String getDb_destino_ServiceName(){
	return this.db_destino_ServiceName;
}
public String db_origen_AdditionalParams;
public String getDb_origen_AdditionalParams(){
	return this.db_origen_AdditionalParams;
}
public String db_origen_Login;
public String getDb_origen_Login(){
	return this.db_origen_Login;
}
public java.lang.String db_origen_Password;
public java.lang.String getDb_origen_Password(){
	return this.db_origen_Password;
}
public String db_origen_Port;
public String getDb_origen_Port(){
	return this.db_origen_Port;
}
public String db_origen_Schema;
public String getDb_origen_Schema(){
	return this.db_origen_Schema;
}
public String db_origen_Server;
public String getDb_origen_Server(){
	return this.db_origen_Server;
}
public String db_origen_ServiceName;
public String getDb_origen_ServiceName(){
	return this.db_origen_ServiceName;
}
public String BIOLOGICO_ID;
public String getBIOLOGICO_ID(){
	return this.BIOLOGICO_ID;
}
public String FECHA_FINAL;
public String getFECHA_FINAL(){
	return this.FECHA_FINAL;
}
public String FECHA_INICIAL;
public String getFECHA_INICIAL(){
	return this.FECHA_INICIAL;
}
public String FUERZA_ID;
public String getFUERZA_ID(){
	return this.FUERZA_ID;
}
public String TDOSIS_ID;
public String getTDOSIS_ID(){
	return this.TDOSIS_ID;
}
public String UORG_ID;
public String getUORG_ID(){
	return this.UORG_ID;
}
public String BODEGA;
public String getBODEGA(){
	return this.BODEGA;
}
public String ESTADO_EXEC;
public String getESTADO_EXEC(){
	return this.ESTADO_EXEC;
}
public String FECHA_EJECUCION;
public String getFECHA_EJECUCION(){
	return this.FECHA_EJECUCION;
}
public String HORA_FINAL;
public String getHORA_FINAL(){
	return this.HORA_FINAL;
}
public String HORA_INICIO;
public String getHORA_INICIO(){
	return this.HORA_INICIO;
}
public String JOB;
public String getJOB(){
	return this.JOB;
}
public String LOGS_ERROR;
public String getLOGS_ERROR(){
	return this.LOGS_ERROR;
}
public String LOGS_EXECUTION;
public String getLOGS_EXECUTION(){
	return this.LOGS_EXECUTION;
}
public String ORIGEN;
public String getORIGEN(){
	return this.ORIGEN;
}
public String STORAGE;
public String getSTORAGE(){
	return this.STORAGE;
}
public String MODULO;
public String getMODULO(){
	return this.MODULO;
}
public BigDecimal SARCHIVO_ID;
public BigDecimal getSARCHIVO_ID(){
	return this.SARCHIVO_ID;
}
public String SIGLA;
public String getSIGLA(){
	return this.SIGLA;
}
	}
			
	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.
	public ContextProperties getContext() {
		return this.context;
	}
	private final String jobVersion = "0.1";
	private final String jobName = "VacunasAplicadasMSPS";
	private final String projectName = "VAC_CONSOLIDADOS_VAC";
	public Integer errorCode = null;
	private String currentComponent = "";
	
	private String cLabel =  null;
	
		private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
        private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();
	
		private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
		public  final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();
	

private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";
	
	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(), new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}
	
	public void setDataSourceReferences(List serviceReferences) throws Exception{
		
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		java.util.Map<String, javax.sql.DataSource> dataSources = new java.util.HashMap<String, javax.sql.DataSource>();
		
		for (java.util.Map.Entry<String, javax.sql.DataSource> entry : BundleUtils.getServices(serviceReferences,  javax.sql.DataSource.class).entrySet()) {
                    dataSources.put(entry.getKey(), entry.getValue());
                    talendDataSources.put(entry.getKey(), new routines.system.TalendDataSource(entry.getValue()));
		}

		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}

	LogCatcherUtils tLogCatcher_1 = new LogCatcherUtils();

private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

public String getExceptionStackTrace() {
	if ("failure".equals(this.getStatus())) {
		errorMessagePS.flush();
		return baos.toString();
	}
	return null;
}

private Exception exception;

public Exception getException() {
	if ("failure".equals(this.getStatus())) {
		return this.exception;
	}
	return null;
}

private class TalendException extends Exception {

	private static final long serialVersionUID = 1L;

	private java.util.Map<String, Object> globalMap = null;
	private Exception e = null;
	
	private String currentComponent = null;
	private String cLabel =  null;
	
	private String virtualComponentName = null;
	
	public void setVirtualComponentName (String virtualComponentName){
		this.virtualComponentName = virtualComponentName;
	}

	private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
		this.currentComponent= errorComponent;
		this.globalMap = globalMap;
		this.e = e;
	}
	
	private TalendException(Exception e, String errorComponent, String errorComponentLabel, final java.util.Map<String, Object> globalMap) {
		this(e, errorComponent, globalMap);
		this.cLabel = errorComponentLabel;
	}

	public Exception getException() {
		return this.e;
	}

	public String getCurrentComponent() {
		return this.currentComponent;
	}

	
    public String getExceptionCauseMessage(Exception e){
        Throwable cause = e;
        String message = null;
        int i = 10;
        while (null != cause && 0 < i--) {
            message = cause.getMessage();
            if (null == message) {
                cause = cause.getCause();
            } else {
                break;          
            }
        }
        if (null == message) {
            message = e.getClass().getName();
        }   
        return message;
    }

	@Override
	public void printStackTrace() {
		if (!(e instanceof TalendException || e instanceof TDieException)) {
			if(virtualComponentName!=null && currentComponent.indexOf(virtualComponentName+"_")==0){
				globalMap.put(virtualComponentName+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			}
			globalMap.put(currentComponent+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
		}
		if (!(e instanceof TDieException)) {
			if(e instanceof TalendException){
				e.printStackTrace();
			} else {
				e.printStackTrace();
				e.printStackTrace(errorMessagePS);
				VacunasAplicadasMSPS.this.exception = e;
			}
		}
		if (!(e instanceof TalendException)) {
		try {
			for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
				if (m.getName().compareTo(currentComponent + "_error") == 0) {
					m.invoke(VacunasAplicadasMSPS.this, new Object[] { e , currentComponent, globalMap});
					break;
				}
			}

			if(!(e instanceof TDieException)){
				tLogCatcher_1.addMessage("Java Exception", currentComponent, 6, e.getClass().getName() + ":" + e.getMessage(), 1);
				tLogCatcher_1Process(globalMap);
			}
			} catch (TalendException e) {
				// do nothing
			
		} catch (Exception e) {
			this.e.printStackTrace();
		}
		}
	}
}

			public void tPrejob_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPrejob_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputXML_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputXML_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaRow_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputXML_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleConnection_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleConnection_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogCatcher_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tLogCatcher_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputDelimited_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tLogCatcher_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRunJob_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tLogCatcher_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tJava_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaRow_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tUniqRow_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputDelimited_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputDelimited_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileArchive_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileArchive_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileDelete_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileDelete_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileDelete_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileDelete_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFixedFlowInput_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFixedFlowInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tBufferOutput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFixedFlowInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostjob_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostjob_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tJava_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleClose_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleClose_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFixedFlowInput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFixedFlowInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputDelimited_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFixedFlowInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPrejob_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileInputXML_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleConnection_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tLogCatcher_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleInput_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleInput_3_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileArchive_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileDelete_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileDelete_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFixedFlowInput_3_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tPostjob_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleClose_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFixedFlowInput_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
	









public void tPrejob_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPrejob_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tPrejob_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tPrejob_1", false);
		start_Hash.put("tPrejob_1", System.currentTimeMillis());
		
	
	currentComponent="tPrejob_1";
	
	
		int tos_count_tPrejob_1 = 0;
		

 



/**
 * [tPrejob_1 begin ] stop
 */
	
	/**
	 * [tPrejob_1 main ] start
	 */

	

	
	
	currentComponent="tPrejob_1";
	
	

 


	tos_count_tPrejob_1++;

/**
 * [tPrejob_1 main ] stop
 */
	
	/**
	 * [tPrejob_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tPrejob_1";
	
	

 



/**
 * [tPrejob_1 process_data_begin ] stop
 */
	
	/**
	 * [tPrejob_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tPrejob_1";
	
	

 



/**
 * [tPrejob_1 process_data_end ] stop
 */
	
	/**
	 * [tPrejob_1 end ] start
	 */

	

	
	
	currentComponent="tPrejob_1";
	
	

 

ok_Hash.put("tPrejob_1", true);
end_Hash.put("tPrejob_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk1", 0, "ok");
				}
				tFileInputXML_1Process(globalMap);



/**
 * [tPrejob_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPrejob_1 finally ] start
	 */

	

	
	
	currentComponent="tPrejob_1";
	
	

 



/**
 * [tPrejob_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPrejob_1_SUBPROCESS_STATE", 1);
	}
	


public static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
    final static byte[] commonByteArrayLock_VAC_CONSOLIDADOS_VAC_VacunasAplicadasMSPS = new byte[0];
    static byte[] commonByteArray_VAC_CONSOLIDADOS_VAC_VacunasAplicadasMSPS = new byte[0];

	
			    public String Host;

				public String getHost () {
					return this.Host;
				}

				public Boolean HostIsNullable(){
				    return true;
				}
				public Boolean HostIsKey(){
				    return false;
				}
				public Integer HostLength(){
				    return 15;
				}
				public Integer HostPrecision(){
				    return 0;
				}
				public String HostDefault(){
				
					return null;
				
				}
				public String HostComment(){
				
				    return "";
				
				}
				public String HostPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String HostOriginalDbColumnName(){
				
					return "Host";
				
				}

				
			    public String Port;

				public String getPort () {
					return this.Port;
				}

				public Boolean PortIsNullable(){
				    return true;
				}
				public Boolean PortIsKey(){
				    return false;
				}
				public Integer PortLength(){
				    return 4;
				}
				public Integer PortPrecision(){
				    return 0;
				}
				public String PortDefault(){
				
					return null;
				
				}
				public String PortComment(){
				
				    return "";
				
				}
				public String PortPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String PortOriginalDbColumnName(){
				
					return "Port";
				
				}

				
			    public String Sid;

				public String getSid () {
					return this.Sid;
				}

				public Boolean SidIsNullable(){
				    return true;
				}
				public Boolean SidIsKey(){
				    return false;
				}
				public Integer SidLength(){
				    return 4;
				}
				public Integer SidPrecision(){
				    return 0;
				}
				public String SidDefault(){
				
					return null;
				
				}
				public String SidComment(){
				
				    return "";
				
				}
				public String SidPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String SidOriginalDbColumnName(){
				
					return "Sid";
				
				}

				
			    public String ServiceName;

				public String getServiceName () {
					return this.ServiceName;
				}

				public Boolean ServiceNameIsNullable(){
				    return true;
				}
				public Boolean ServiceNameIsKey(){
				    return false;
				}
				public Integer ServiceNameLength(){
				    return 7;
				}
				public Integer ServiceNamePrecision(){
				    return 0;
				}
				public String ServiceNameDefault(){
				
					return null;
				
				}
				public String ServiceNameComment(){
				
				    return "";
				
				}
				public String ServiceNamePattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String ServiceNameOriginalDbColumnName(){
				
					return "ServiceName";
				
				}

				
			    public String Schema;

				public String getSchema () {
					return this.Schema;
				}

				public Boolean SchemaIsNullable(){
				    return true;
				}
				public Boolean SchemaIsKey(){
				    return false;
				}
				public Integer SchemaLength(){
				    return 8;
				}
				public Integer SchemaPrecision(){
				    return 0;
				}
				public String SchemaDefault(){
				
					return null;
				
				}
				public String SchemaComment(){
				
				    return "";
				
				}
				public String SchemaPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String SchemaOriginalDbColumnName(){
				
					return "Schema";
				
				}

				
			    public String User;

				public String getUser () {
					return this.User;
				}

				public Boolean UserIsNullable(){
				    return true;
				}
				public Boolean UserIsKey(){
				    return false;
				}
				public Integer UserLength(){
				    return 8;
				}
				public Integer UserPrecision(){
				    return 0;
				}
				public String UserDefault(){
				
					return null;
				
				}
				public String UserComment(){
				
				    return "";
				
				}
				public String UserPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String UserOriginalDbColumnName(){
				
					return "User";
				
				}

				
			    public String Password;

				public String getPassword () {
					return this.Password;
				}

				public Boolean PasswordIsNullable(){
				    return true;
				}
				public Boolean PasswordIsKey(){
				    return false;
				}
				public Integer PasswordLength(){
				    return 15;
				}
				public Integer PasswordPrecision(){
				    return 0;
				}
				public String PasswordDefault(){
				
					return null;
				
				}
				public String PasswordComment(){
				
				    return "";
				
				}
				public String PasswordPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String PasswordOriginalDbColumnName(){
				
					return "Password";
				
				}

				
			    public String PathStorage;

				public String getPathStorage () {
					return this.PathStorage;
				}

				public Boolean PathStorageIsNullable(){
				    return true;
				}
				public Boolean PathStorageIsKey(){
				    return false;
				}
				public Integer PathStorageLength(){
				    return 44;
				}
				public Integer PathStoragePrecision(){
				    return 0;
				}
				public String PathStorageDefault(){
				
					return null;
				
				}
				public String PathStorageComment(){
				
				    return "";
				
				}
				public String PathStoragePattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String PathStorageOriginalDbColumnName(){
				
					return "PathStorage";
				
				}

				
			    public String SMTPHost;

				public String getSMTPHost () {
					return this.SMTPHost;
				}

				public Boolean SMTPHostIsNullable(){
				    return true;
				}
				public Boolean SMTPHostIsKey(){
				    return false;
				}
				public Integer SMTPHostLength(){
				    return 14;
				}
				public Integer SMTPHostPrecision(){
				    return 0;
				}
				public String SMTPHostDefault(){
				
					return null;
				
				}
				public String SMTPHostComment(){
				
				    return "";
				
				}
				public String SMTPHostPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String SMTPHostOriginalDbColumnName(){
				
					return "SMTPHost";
				
				}

				
			    public String SMTPPort;

				public String getSMTPPort () {
					return this.SMTPPort;
				}

				public Boolean SMTPPortIsNullable(){
				    return true;
				}
				public Boolean SMTPPortIsKey(){
				    return false;
				}
				public Integer SMTPPortLength(){
				    return 3;
				}
				public Integer SMTPPortPrecision(){
				    return 0;
				}
				public String SMTPPortDefault(){
				
					return null;
				
				}
				public String SMTPPortComment(){
				
				    return "";
				
				}
				public String SMTPPortPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String SMTPPortOriginalDbColumnName(){
				
					return "SMTPPort";
				
				}

				
			    public String UsernameMail;

				public String getUsernameMail () {
					return this.UsernameMail;
				}

				public Boolean UsernameMailIsNullable(){
				    return true;
				}
				public Boolean UsernameMailIsKey(){
				    return false;
				}
				public Integer UsernameMailLength(){
				    return 34;
				}
				public Integer UsernameMailPrecision(){
				    return 0;
				}
				public String UsernameMailDefault(){
				
					return null;
				
				}
				public String UsernameMailComment(){
				
				    return "";
				
				}
				public String UsernameMailPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String UsernameMailOriginalDbColumnName(){
				
					return "UsernameMail";
				
				}

				
			    public String PasswordMail;

				public String getPasswordMail () {
					return this.PasswordMail;
				}

				public Boolean PasswordMailIsNullable(){
				    return true;
				}
				public Boolean PasswordMailIsKey(){
				    return false;
				}
				public Integer PasswordMailLength(){
				    return 13;
				}
				public Integer PasswordMailPrecision(){
				    return 0;
				}
				public String PasswordMailDefault(){
				
					return null;
				
				}
				public String PasswordMailComment(){
				
				    return "";
				
				}
				public String PasswordMailPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String PasswordMailOriginalDbColumnName(){
				
					return "PasswordMail";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_VAC_CONSOLIDADOS_VAC_VacunasAplicadasMSPS.length) {
				if(length < 1024 && commonByteArray_VAC_CONSOLIDADOS_VAC_VacunasAplicadasMSPS.length == 0) {
   					commonByteArray_VAC_CONSOLIDADOS_VAC_VacunasAplicadasMSPS = new byte[1024];
				} else {
   					commonByteArray_VAC_CONSOLIDADOS_VAC_VacunasAplicadasMSPS = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_VAC_CONSOLIDADOS_VAC_VacunasAplicadasMSPS, 0, length);
			strReturn = new String(commonByteArray_VAC_CONSOLIDADOS_VAC_VacunasAplicadasMSPS, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_VAC_CONSOLIDADOS_VAC_VacunasAplicadasMSPS.length) {
				if(length < 1024 && commonByteArray_VAC_CONSOLIDADOS_VAC_VacunasAplicadasMSPS.length == 0) {
   					commonByteArray_VAC_CONSOLIDADOS_VAC_VacunasAplicadasMSPS = new byte[1024];
				} else {
   					commonByteArray_VAC_CONSOLIDADOS_VAC_VacunasAplicadasMSPS = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_VAC_CONSOLIDADOS_VAC_VacunasAplicadasMSPS, 0, length);
			strReturn = new String(commonByteArray_VAC_CONSOLIDADOS_VAC_VacunasAplicadasMSPS, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_VAC_CONSOLIDADOS_VAC_VacunasAplicadasMSPS) {

        	try {

        		int length = 0;
		
					this.Host = readString(dis);
					
					this.Port = readString(dis);
					
					this.Sid = readString(dis);
					
					this.ServiceName = readString(dis);
					
					this.Schema = readString(dis);
					
					this.User = readString(dis);
					
					this.Password = readString(dis);
					
					this.PathStorage = readString(dis);
					
					this.SMTPHost = readString(dis);
					
					this.SMTPPort = readString(dis);
					
					this.UsernameMail = readString(dis);
					
					this.PasswordMail = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_VAC_CONSOLIDADOS_VAC_VacunasAplicadasMSPS) {

        	try {

        		int length = 0;
		
					this.Host = readString(dis);
					
					this.Port = readString(dis);
					
					this.Sid = readString(dis);
					
					this.ServiceName = readString(dis);
					
					this.Schema = readString(dis);
					
					this.User = readString(dis);
					
					this.Password = readString(dis);
					
					this.PathStorage = readString(dis);
					
					this.SMTPHost = readString(dis);
					
					this.SMTPPort = readString(dis);
					
					this.UsernameMail = readString(dis);
					
					this.PasswordMail = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.Host,dos);
					
					// String
				
						writeString(this.Port,dos);
					
					// String
				
						writeString(this.Sid,dos);
					
					// String
				
						writeString(this.ServiceName,dos);
					
					// String
				
						writeString(this.Schema,dos);
					
					// String
				
						writeString(this.User,dos);
					
					// String
				
						writeString(this.Password,dos);
					
					// String
				
						writeString(this.PathStorage,dos);
					
					// String
				
						writeString(this.SMTPHost,dos);
					
					// String
				
						writeString(this.SMTPPort,dos);
					
					// String
				
						writeString(this.UsernameMail,dos);
					
					// String
				
						writeString(this.PasswordMail,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.Host,dos);
					
					// String
				
						writeString(this.Port,dos);
					
					// String
				
						writeString(this.Sid,dos);
					
					// String
				
						writeString(this.ServiceName,dos);
					
					// String
				
						writeString(this.Schema,dos);
					
					// String
				
						writeString(this.User,dos);
					
					// String
				
						writeString(this.Password,dos);
					
					// String
				
						writeString(this.PathStorage,dos);
					
					// String
				
						writeString(this.SMTPHost,dos);
					
					// String
				
						writeString(this.SMTPPort,dos);
					
					// String
				
						writeString(this.UsernameMail,dos);
					
					// String
				
						writeString(this.PasswordMail,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Host="+Host);
		sb.append(",Port="+Port);
		sb.append(",Sid="+Sid);
		sb.append(",ServiceName="+ServiceName);
		sb.append(",Schema="+Schema);
		sb.append(",User="+User);
		sb.append(",Password="+Password);
		sb.append(",PathStorage="+PathStorage);
		sb.append(",SMTPHost="+SMTPHost);
		sb.append(",SMTPPort="+SMTPPort);
		sb.append(",UsernameMail="+UsernameMail);
		sb.append(",PasswordMail="+PasswordMail);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tFileInputXML_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileInputXML_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row1Struct row1 = new row1Struct();




	
	/**
	 * [tJavaRow_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaRow_1", false);
		start_Hash.put("tJavaRow_1", System.currentTimeMillis());
		
	
	currentComponent="tJavaRow_1";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row1");
					}
				
		int tos_count_tJavaRow_1 = 0;
		

int nb_line_tJavaRow_1 = 0;

 



/**
 * [tJavaRow_1 begin ] stop
 */



	
	/**
	 * [tFileInputXML_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputXML_1", false);
		start_Hash.put("tFileInputXML_1", System.currentTimeMillis());
		
	
	currentComponent="tFileInputXML_1";
	
	
		int tos_count_tFileInputXML_1 = 0;
		

	

int nb_line_tFileInputXML_1 = 0;

	String os_tFileInputXML_1 = System.getProperty("os.name").toLowerCase();
	boolean isWindows_tFileInputXML_1=false;
	if(os_tFileInputXML_1.indexOf("windows") > -1 || os_tFileInputXML_1.indexOf("nt") > -1){
		isWindows_tFileInputXML_1=true;
	}
class XML_API_tFileInputXML_1{
	public boolean isDefNull(String[] node) throws javax.xml.transform.TransformerException {
        if(node[0] != null && node[1]!=null && ("true").equals(node[1])){
        	return true;
        }
        return false;
    }

    public boolean isMissing(String[] node) throws javax.xml.transform.TransformerException {
        return node[0] == null ? true : false;
    }

    public boolean isEmpty(String[] node) throws javax.xml.transform.TransformerException {
        if(node[0]!=null ){
        	return node[0].length() == 0;
        }
        return false;
    }
}
XML_API_tFileInputXML_1 xml_api_tFileInputXML_1 = new XML_API_tFileInputXML_1();

String[] queryPaths_tFileInputXML_1 = new String[]{	
	"Host"		
	,"Host"+"/@xsi:nil"	
	,"Port"		
	,"Port"+"/@xsi:nil"	
	,"Sid"		
	,"Sid"+"/@xsi:nil"	
	,"ServiceName"		
	,"ServiceName"+"/@xsi:nil"	
	,"Schema"		
	,"Schema"+"/@xsi:nil"	
	,"User"		
	,"User"+"/@xsi:nil"	
	,"Password"		
	,"Password"+"/@xsi:nil"	
	,"PathStorage"		
	,"PathStorage"+"/@xsi:nil"	
	,"SMTPHost"		
	,"SMTPHost"+"/@xsi:nil"	
	,"SMTPPort"		
	,"SMTPPort"+"/@xsi:nil"	
	,"UsernameMail"		
	,"UsernameMail"+"/@xsi:nil"	
	,"PasswordMail"		
	,"PasswordMail"+"/@xsi:nil"
};

boolean[] asXMLs_tFileInputXML_1 = new boolean[]{	
	false		
	,false	
	,false		
	,false	
	,false		
	,false	
	,false		
	,false	
	,false		
	,false	
	,false		
	,false	
	,false		
	,false	
	,false		
	,false	
	,false		
	,false	
	,false		
	,false	
	,false		
	,false	
	,false		
	,false
};

String str_tFileInputXML_1 = "";
String[] node_tFileInputXML_1 = null;
org.talend.xml.sax.SAXLooper looper_tFileInputXML_1 = new org.talend.xml.sax.SAXLooper("/connectionStrings",queryPaths_tFileInputXML_1,asXMLs_tFileInputXML_1);
looper_tFileInputXML_1.setEncoding("UTF-8");
Object filename_tFileInputXML_1 = null;
try {
	filename_tFileInputXML_1 = context.ORIGEN;
} catch(java.lang.Exception e) {
globalMap.put("tFileInputXML_1_ERROR_MESSAGE",e.getMessage());
	
	System.err.println(e.getMessage());
	
}
if(filename_tFileInputXML_1 != null && filename_tFileInputXML_1 instanceof String && filename_tFileInputXML_1.toString().startsWith("//")){
	if (!isWindows_tFileInputXML_1){
		filename_tFileInputXML_1 = filename_tFileInputXML_1.toString().replaceFirst("//","/");
	}
}
if(filename_tFileInputXML_1 instanceof java.io.InputStream){
	looper_tFileInputXML_1.parse((java.io.InputStream)filename_tFileInputXML_1);
}else{
	looper_tFileInputXML_1.parse(String.valueOf(filename_tFileInputXML_1));
}
java.util.Iterator<java.util.Map<String, String>> it_tFileInputXML_1  = looper_tFileInputXML_1.iterator();
while (it_tFileInputXML_1.hasNext()) {
	java.util.Map<String, String> row_tFileInputXML_1 = it_tFileInputXML_1.next();
	if (nb_line_tFileInputXML_1>=50) {
	
			looper_tFileInputXML_1.stopRead();
	
		break;
	}
		nb_line_tFileInputXML_1++;
		
	row1 = null;			
	boolean whetherReject_tFileInputXML_1 = false;
	row1 = new row1Struct();
	try{
	str_tFileInputXML_1 = row_tFileInputXML_1.get("Host");
	node_tFileInputXML_1 = new String[]{str_tFileInputXML_1,row_tFileInputXML_1.get("Host"+"/@xsi:nil")};
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row1.Host =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row1.Host ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row1.Host =null;
									}else{
		row1.Host = str_tFileInputXML_1;
	}
	str_tFileInputXML_1 = row_tFileInputXML_1.get("Port");
	node_tFileInputXML_1 = new String[]{str_tFileInputXML_1,row_tFileInputXML_1.get("Port"+"/@xsi:nil")};
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row1.Port =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row1.Port ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row1.Port =null;
									}else{
		row1.Port = str_tFileInputXML_1;
	}
	str_tFileInputXML_1 = row_tFileInputXML_1.get("Sid");
	node_tFileInputXML_1 = new String[]{str_tFileInputXML_1,row_tFileInputXML_1.get("Sid"+"/@xsi:nil")};
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row1.Sid =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row1.Sid ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row1.Sid =null;
									}else{
		row1.Sid = str_tFileInputXML_1;
	}
	str_tFileInputXML_1 = row_tFileInputXML_1.get("ServiceName");
	node_tFileInputXML_1 = new String[]{str_tFileInputXML_1,row_tFileInputXML_1.get("ServiceName"+"/@xsi:nil")};
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row1.ServiceName =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row1.ServiceName ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row1.ServiceName =null;
									}else{
		row1.ServiceName = str_tFileInputXML_1;
	}
	str_tFileInputXML_1 = row_tFileInputXML_1.get("Schema");
	node_tFileInputXML_1 = new String[]{str_tFileInputXML_1,row_tFileInputXML_1.get("Schema"+"/@xsi:nil")};
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row1.Schema =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row1.Schema ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row1.Schema =null;
									}else{
		row1.Schema = str_tFileInputXML_1;
	}
	str_tFileInputXML_1 = row_tFileInputXML_1.get("User");
	node_tFileInputXML_1 = new String[]{str_tFileInputXML_1,row_tFileInputXML_1.get("User"+"/@xsi:nil")};
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row1.User =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row1.User ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row1.User =null;
									}else{
		row1.User = str_tFileInputXML_1;
	}
	str_tFileInputXML_1 = row_tFileInputXML_1.get("Password");
	node_tFileInputXML_1 = new String[]{str_tFileInputXML_1,row_tFileInputXML_1.get("Password"+"/@xsi:nil")};
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row1.Password =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row1.Password ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row1.Password =null;
									}else{
		row1.Password = str_tFileInputXML_1;
	}
	str_tFileInputXML_1 = row_tFileInputXML_1.get("PathStorage");
	node_tFileInputXML_1 = new String[]{str_tFileInputXML_1,row_tFileInputXML_1.get("PathStorage"+"/@xsi:nil")};
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row1.PathStorage =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row1.PathStorage ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row1.PathStorage =null;
									}else{
		row1.PathStorage = str_tFileInputXML_1;
	}
	str_tFileInputXML_1 = row_tFileInputXML_1.get("SMTPHost");
	node_tFileInputXML_1 = new String[]{str_tFileInputXML_1,row_tFileInputXML_1.get("SMTPHost"+"/@xsi:nil")};
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row1.SMTPHost =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row1.SMTPHost ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row1.SMTPHost =null;
									}else{
		row1.SMTPHost = str_tFileInputXML_1;
	}
	str_tFileInputXML_1 = row_tFileInputXML_1.get("SMTPPort");
	node_tFileInputXML_1 = new String[]{str_tFileInputXML_1,row_tFileInputXML_1.get("SMTPPort"+"/@xsi:nil")};
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row1.SMTPPort =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row1.SMTPPort ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row1.SMTPPort =null;
									}else{
		row1.SMTPPort = str_tFileInputXML_1;
	}
	str_tFileInputXML_1 = row_tFileInputXML_1.get("UsernameMail");
	node_tFileInputXML_1 = new String[]{str_tFileInputXML_1,row_tFileInputXML_1.get("UsernameMail"+"/@xsi:nil")};
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row1.UsernameMail =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row1.UsernameMail ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row1.UsernameMail =null;
									}else{
		row1.UsernameMail = str_tFileInputXML_1;
	}
	str_tFileInputXML_1 = row_tFileInputXML_1.get("PasswordMail");
	node_tFileInputXML_1 = new String[]{str_tFileInputXML_1,row_tFileInputXML_1.get("PasswordMail"+"/@xsi:nil")};
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row1.PasswordMail =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row1.PasswordMail ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row1.PasswordMail =null;
									}else{
		row1.PasswordMail = str_tFileInputXML_1;
	} 
			
    } catch (java.lang.Exception e) {
globalMap.put("tFileInputXML_1_ERROR_MESSAGE",e.getMessage());
        whetherReject_tFileInputXML_1 = true;
                System.err.println(e.getMessage());
                row1 = null;
    }
			
			

 



/**
 * [tFileInputXML_1 begin ] stop
 */
	
	/**
	 * [tFileInputXML_1 main ] start
	 */

	

	
	
	currentComponent="tFileInputXML_1";
	
	

 


	tos_count_tFileInputXML_1++;

/**
 * [tFileInputXML_1 main ] stop
 */
	
	/**
	 * [tFileInputXML_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileInputXML_1";
	
	

 



/**
 * [tFileInputXML_1 process_data_begin ] stop
 */
// Start of branch "row1"
if(row1 != null) { 



	
	/**
	 * [tJavaRow_1 main ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row1"
						
						);
					}
					

    //Guarda en variables de contexto los parametros de conexión a la bd saludsis
context.db_origen_Server = row1.Host;
context.db_origen_Port = row1.Port;
context.db_origen_ServiceName = row1.ServiceName;
context.db_origen_Schema = row1.Schema;
context.db_origen_Login = row1.User;
context.db_origen_Password = row1.Password;
context.STORAGE = row1.PathStorage;

//Guarda en variables de contexto la fecha de ejecución y la hora de inicio
context.FECHA_EJECUCION = TalendDate.getDate("DD/MM/YYYY");
context.HORA_INICIO = TalendDate.getDate("HH:mm:ss");
context.JOB = "MSPS";

//Imprime en consola el job, la fecha de ejecución y la hora de inicio
System.out.println(context.JOB+" :-Start: "+context.FECHA_EJECUCION+" "+context.HORA_INICIO);


    nb_line_tJavaRow_1++;   

 


	tos_count_tJavaRow_1++;

/**
 * [tJavaRow_1 main ] stop
 */
	
	/**
	 * [tJavaRow_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";
	
	

 



/**
 * [tJavaRow_1 process_data_begin ] stop
 */
	
	/**
	 * [tJavaRow_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";
	
	

 



/**
 * [tJavaRow_1 process_data_end ] stop
 */

} // End of branch "row1"




	
	/**
	 * [tFileInputXML_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileInputXML_1";
	
	

 



/**
 * [tFileInputXML_1 process_data_end ] stop
 */
	
	/**
	 * [tFileInputXML_1 end ] start
	 */

	

	
	
	currentComponent="tFileInputXML_1";
	
	


	}
	try {
		looper_tFileInputXML_1.handleTaskResponse();
	} catch(java.lang.Exception e) {
globalMap.put("tFileInputXML_1_ERROR_MESSAGE",e.getMessage());
		if(!(e.getCause() instanceof org.talend.xml.sax.exception.EnoughDataException))
	
		
		System.err.println(e.getMessage());	
	
	}
	globalMap.put("tFileInputXML_1_NB_LINE",nb_line_tFileInputXML_1);

	

 

ok_Hash.put("tFileInputXML_1", true);
end_Hash.put("tFileInputXML_1", System.currentTimeMillis());




/**
 * [tFileInputXML_1 end ] stop
 */

	
	/**
	 * [tJavaRow_1 end ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";
	
	

globalMap.put("tJavaRow_1_NB_LINE",nb_line_tJavaRow_1);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row1");
			  	}
			  	
 

ok_Hash.put("tJavaRow_1", true);
end_Hash.put("tJavaRow_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk2", 0, "ok");
				}
				tOracleConnection_1Process(globalMap);



/**
 * [tJavaRow_1 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileInputXML_1 finally ] start
	 */

	

	
	
	currentComponent="tFileInputXML_1";
	
	

 



/**
 * [tFileInputXML_1 finally ] stop
 */

	
	/**
	 * [tJavaRow_1 finally ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";
	
	

 



/**
 * [tJavaRow_1 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileInputXML_1_SUBPROCESS_STATE", 1);
	}
	


public void tOracleConnection_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleConnection_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tOracleConnection_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleConnection_1", false);
		start_Hash.put("tOracleConnection_1", System.currentTimeMillis());
		
	
	currentComponent="tOracleConnection_1";
	
	
		int tos_count_tOracleConnection_1 = 0;
		
	

	
        String url_tOracleConnection_1 = "jdbc:oracle:thin:@(description=(address=(protocol=tcp)(host=" + context.db_origen_Server + ")(port=" + context.db_origen_Port + "))(connect_data=(service_name=" + context.db_origen_ServiceName + ")))";
    	globalMap.put("connectionType_" + "tOracleConnection_1", "ORACLE_SERVICE_NAME");
	String dbUser_tOracleConnection_1 = context.db_origen_Login;
	
	
		
	final String decryptedPassword_tOracleConnection_1 = context.db_origen_Password; 
		String dbPwd_tOracleConnection_1 = decryptedPassword_tOracleConnection_1;
	
	
	java.sql.Connection conn_tOracleConnection_1 = null;
	
		
			String driverClass_tOracleConnection_1 = "oracle.jdbc.OracleDriver";
			java.lang.Class jdbcclazz_tOracleConnection_1 = java.lang.Class.forName(driverClass_tOracleConnection_1);
			globalMap.put("driverClass_tOracleConnection_1", driverClass_tOracleConnection_1);
		
			java.util.Properties atnParamsPrope_tOracleConnection_1 = new java.util.Properties();
			    atnParamsPrope_tOracleConnection_1.put("user",dbUser_tOracleConnection_1);
			    atnParamsPrope_tOracleConnection_1.put("password",dbPwd_tOracleConnection_1);
			if(context.db_origen_AdditionalParams != null && !"\"\"".equals(context.db_origen_AdditionalParams) && !"".equals(context.db_origen_AdditionalParams)){
                atnParamsPrope_tOracleConnection_1.load(new java.io.ByteArrayInputStream(context.db_origen_AdditionalParams.replace("&", "\n").getBytes()));
            }
         
			conn_tOracleConnection_1 = java.sql.DriverManager.getConnection(url_tOracleConnection_1, atnParamsPrope_tOracleConnection_1);

		globalMap.put("conn_tOracleConnection_1", conn_tOracleConnection_1);
	if (null != conn_tOracleConnection_1) {
		
			conn_tOracleConnection_1.setAutoCommit(false);
	}
        globalMap.put("host_" + "tOracleConnection_1",context.db_origen_Server);
        globalMap.put("port_" + "tOracleConnection_1",context.db_origen_Port);
        globalMap.put("dbname_" + "tOracleConnection_1",context.db_origen_ServiceName);

	globalMap.put("dbschema_" + "tOracleConnection_1", context.db_origen_Schema);
	globalMap.put("username_" + "tOracleConnection_1",context.db_origen_Login);
	globalMap.put("password_" + "tOracleConnection_1",dbPwd_tOracleConnection_1);

 



/**
 * [tOracleConnection_1 begin ] stop
 */
	
	/**
	 * [tOracleConnection_1 main ] start
	 */

	

	
	
	currentComponent="tOracleConnection_1";
	
	

 


	tos_count_tOracleConnection_1++;

/**
 * [tOracleConnection_1 main ] stop
 */
	
	/**
	 * [tOracleConnection_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleConnection_1";
	
	

 



/**
 * [tOracleConnection_1 process_data_begin ] stop
 */
	
	/**
	 * [tOracleConnection_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleConnection_1";
	
	

 



/**
 * [tOracleConnection_1 process_data_end ] stop
 */
	
	/**
	 * [tOracleConnection_1 end ] start
	 */

	

	
	
	currentComponent="tOracleConnection_1";
	
	

 

ok_Hash.put("tOracleConnection_1", true);
end_Hash.put("tOracleConnection_1", System.currentTimeMillis());




/**
 * [tOracleConnection_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleConnection_1 finally ] start
	 */

	

	
	
	currentComponent="tOracleConnection_1";
	
	

 



/**
 * [tOracleConnection_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleConnection_1_SUBPROCESS_STATE", 1);
	}
	


public static class row5Struct implements routines.system.IPersistableRow<row5Struct> {
    final static byte[] commonByteArrayLock_VAC_CONSOLIDADOS_VAC_VacunasAplicadasMSPS = new byte[0];
    static byte[] commonByteArray_VAC_CONSOLIDADOS_VAC_VacunasAplicadasMSPS = new byte[0];

	
			    public java.util.Date moment;

				public java.util.Date getMoment () {
					return this.moment;
				}

				public Boolean momentIsNullable(){
				    return true;
				}
				public Boolean momentIsKey(){
				    return false;
				}
				public Integer momentLength(){
				    return 0;
				}
				public Integer momentPrecision(){
				    return 0;
				}
				public String momentDefault(){
				
					return null;
				
				}
				public String momentComment(){
				
				    return null;
				
				}
				public String momentPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String momentOriginalDbColumnName(){
				
					return "moment";
				
				}

				
			    public String pid;

				public String getPid () {
					return this.pid;
				}

				public Boolean pidIsNullable(){
				    return true;
				}
				public Boolean pidIsKey(){
				    return false;
				}
				public Integer pidLength(){
				    return 20;
				}
				public Integer pidPrecision(){
				    return 0;
				}
				public String pidDefault(){
				
					return null;
				
				}
				public String pidComment(){
				
				    return null;
				
				}
				public String pidPattern(){
				
				    return null;
				
				}
				public String pidOriginalDbColumnName(){
				
					return "pid";
				
				}

				
			    public String root_pid;

				public String getRoot_pid () {
					return this.root_pid;
				}

				public Boolean root_pidIsNullable(){
				    return true;
				}
				public Boolean root_pidIsKey(){
				    return false;
				}
				public Integer root_pidLength(){
				    return 20;
				}
				public Integer root_pidPrecision(){
				    return 0;
				}
				public String root_pidDefault(){
				
					return null;
				
				}
				public String root_pidComment(){
				
				    return null;
				
				}
				public String root_pidPattern(){
				
				    return null;
				
				}
				public String root_pidOriginalDbColumnName(){
				
					return "root_pid";
				
				}

				
			    public String father_pid;

				public String getFather_pid () {
					return this.father_pid;
				}

				public Boolean father_pidIsNullable(){
				    return true;
				}
				public Boolean father_pidIsKey(){
				    return false;
				}
				public Integer father_pidLength(){
				    return 20;
				}
				public Integer father_pidPrecision(){
				    return 0;
				}
				public String father_pidDefault(){
				
					return null;
				
				}
				public String father_pidComment(){
				
				    return null;
				
				}
				public String father_pidPattern(){
				
				    return null;
				
				}
				public String father_pidOriginalDbColumnName(){
				
					return "father_pid";
				
				}

				
			    public String project;

				public String getProject () {
					return this.project;
				}

				public Boolean projectIsNullable(){
				    return true;
				}
				public Boolean projectIsKey(){
				    return false;
				}
				public Integer projectLength(){
				    return 50;
				}
				public Integer projectPrecision(){
				    return 0;
				}
				public String projectDefault(){
				
					return null;
				
				}
				public String projectComment(){
				
				    return null;
				
				}
				public String projectPattern(){
				
				    return null;
				
				}
				public String projectOriginalDbColumnName(){
				
					return "project";
				
				}

				
			    public String job;

				public String getJob () {
					return this.job;
				}

				public Boolean jobIsNullable(){
				    return true;
				}
				public Boolean jobIsKey(){
				    return false;
				}
				public Integer jobLength(){
				    return 255;
				}
				public Integer jobPrecision(){
				    return 0;
				}
				public String jobDefault(){
				
					return null;
				
				}
				public String jobComment(){
				
				    return null;
				
				}
				public String jobPattern(){
				
				    return null;
				
				}
				public String jobOriginalDbColumnName(){
				
					return "job";
				
				}

				
			    public String context;

				public String getContext () {
					return this.context;
				}

				public Boolean contextIsNullable(){
				    return true;
				}
				public Boolean contextIsKey(){
				    return false;
				}
				public Integer contextLength(){
				    return 50;
				}
				public Integer contextPrecision(){
				    return 0;
				}
				public String contextDefault(){
				
					return null;
				
				}
				public String contextComment(){
				
				    return null;
				
				}
				public String contextPattern(){
				
				    return null;
				
				}
				public String contextOriginalDbColumnName(){
				
					return "context";
				
				}

				
			    public Integer priority;

				public Integer getPriority () {
					return this.priority;
				}

				public Boolean priorityIsNullable(){
				    return true;
				}
				public Boolean priorityIsKey(){
				    return false;
				}
				public Integer priorityLength(){
				    return 3;
				}
				public Integer priorityPrecision(){
				    return 0;
				}
				public String priorityDefault(){
				
					return "";
				
				}
				public String priorityComment(){
				
				    return null;
				
				}
				public String priorityPattern(){
				
				    return null;
				
				}
				public String priorityOriginalDbColumnName(){
				
					return "priority";
				
				}

				
			    public String type;

				public String getType () {
					return this.type;
				}

				public Boolean typeIsNullable(){
				    return true;
				}
				public Boolean typeIsKey(){
				    return false;
				}
				public Integer typeLength(){
				    return 255;
				}
				public Integer typePrecision(){
				    return 0;
				}
				public String typeDefault(){
				
					return null;
				
				}
				public String typeComment(){
				
				    return null;
				
				}
				public String typePattern(){
				
				    return null;
				
				}
				public String typeOriginalDbColumnName(){
				
					return "type";
				
				}

				
			    public String origin;

				public String getOrigin () {
					return this.origin;
				}

				public Boolean originIsNullable(){
				    return true;
				}
				public Boolean originIsKey(){
				    return false;
				}
				public Integer originLength(){
				    return 255;
				}
				public Integer originPrecision(){
				    return 0;
				}
				public String originDefault(){
				
					return null;
				
				}
				public String originComment(){
				
				    return null;
				
				}
				public String originPattern(){
				
				    return null;
				
				}
				public String originOriginalDbColumnName(){
				
					return "origin";
				
				}

				
			    public String message;

				public String getMessage () {
					return this.message;
				}

				public Boolean messageIsNullable(){
				    return true;
				}
				public Boolean messageIsKey(){
				    return false;
				}
				public Integer messageLength(){
				    return 255;
				}
				public Integer messagePrecision(){
				    return 0;
				}
				public String messageDefault(){
				
					return null;
				
				}
				public String messageComment(){
				
				    return null;
				
				}
				public String messagePattern(){
				
				    return null;
				
				}
				public String messageOriginalDbColumnName(){
				
					return "message";
				
				}

				
			    public Integer code;

				public Integer getCode () {
					return this.code;
				}

				public Boolean codeIsNullable(){
				    return true;
				}
				public Boolean codeIsKey(){
				    return false;
				}
				public Integer codeLength(){
				    return 3;
				}
				public Integer codePrecision(){
				    return 0;
				}
				public String codeDefault(){
				
					return "";
				
				}
				public String codeComment(){
				
				    return null;
				
				}
				public String codePattern(){
				
				    return null;
				
				}
				public String codeOriginalDbColumnName(){
				
					return "code";
				
				}

				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_VAC_CONSOLIDADOS_VAC_VacunasAplicadasMSPS.length) {
				if(length < 1024 && commonByteArray_VAC_CONSOLIDADOS_VAC_VacunasAplicadasMSPS.length == 0) {
   					commonByteArray_VAC_CONSOLIDADOS_VAC_VacunasAplicadasMSPS = new byte[1024];
				} else {
   					commonByteArray_VAC_CONSOLIDADOS_VAC_VacunasAplicadasMSPS = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_VAC_CONSOLIDADOS_VAC_VacunasAplicadasMSPS, 0, length);
			strReturn = new String(commonByteArray_VAC_CONSOLIDADOS_VAC_VacunasAplicadasMSPS, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_VAC_CONSOLIDADOS_VAC_VacunasAplicadasMSPS.length) {
				if(length < 1024 && commonByteArray_VAC_CONSOLIDADOS_VAC_VacunasAplicadasMSPS.length == 0) {
   					commonByteArray_VAC_CONSOLIDADOS_VAC_VacunasAplicadasMSPS = new byte[1024];
				} else {
   					commonByteArray_VAC_CONSOLIDADOS_VAC_VacunasAplicadasMSPS = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_VAC_CONSOLIDADOS_VAC_VacunasAplicadasMSPS, 0, length);
			strReturn = new String(commonByteArray_VAC_CONSOLIDADOS_VAC_VacunasAplicadasMSPS, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_VAC_CONSOLIDADOS_VAC_VacunasAplicadasMSPS) {

        	try {

        		int length = 0;
		
					this.moment = readDate(dis);
					
					this.pid = readString(dis);
					
					this.root_pid = readString(dis);
					
					this.father_pid = readString(dis);
					
					this.project = readString(dis);
					
					this.job = readString(dis);
					
					this.context = readString(dis);
					
						this.priority = readInteger(dis);
					
					this.type = readString(dis);
					
					this.origin = readString(dis);
					
					this.message = readString(dis);
					
						this.code = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_VAC_CONSOLIDADOS_VAC_VacunasAplicadasMSPS) {

        	try {

        		int length = 0;
		
					this.moment = readDate(dis);
					
					this.pid = readString(dis);
					
					this.root_pid = readString(dis);
					
					this.father_pid = readString(dis);
					
					this.project = readString(dis);
					
					this.job = readString(dis);
					
					this.context = readString(dis);
					
						this.priority = readInteger(dis);
					
					this.type = readString(dis);
					
					this.origin = readString(dis);
					
					this.message = readString(dis);
					
						this.code = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.pid,dos);
					
					// String
				
						writeString(this.root_pid,dos);
					
					// String
				
						writeString(this.father_pid,dos);
					
					// String
				
						writeString(this.project,dos);
					
					// String
				
						writeString(this.job,dos);
					
					// String
				
						writeString(this.context,dos);
					
					// Integer
				
						writeInteger(this.priority,dos);
					
					// String
				
						writeString(this.type,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.message,dos);
					
					// Integer
				
						writeInteger(this.code,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.pid,dos);
					
					// String
				
						writeString(this.root_pid,dos);
					
					// String
				
						writeString(this.father_pid,dos);
					
					// String
				
						writeString(this.project,dos);
					
					// String
				
						writeString(this.job,dos);
					
					// String
				
						writeString(this.context,dos);
					
					// Integer
				
						writeInteger(this.priority,dos);
					
					// String
				
						writeString(this.type,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.message,dos);
					
					// Integer
				
						writeInteger(this.code,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("moment="+String.valueOf(moment));
		sb.append(",pid="+pid);
		sb.append(",root_pid="+root_pid);
		sb.append(",father_pid="+father_pid);
		sb.append(",project="+project);
		sb.append(",job="+job);
		sb.append(",context="+context);
		sb.append(",priority="+String.valueOf(priority));
		sb.append(",type="+type);
		sb.append(",origin="+origin);
		sb.append(",message="+message);
		sb.append(",code="+String.valueOf(code));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row5Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row3Struct implements routines.system.IPersistableRow<row3Struct> {
    final static byte[] commonByteArrayLock_VAC_CONSOLIDADOS_VAC_VacunasAplicadasMSPS = new byte[0];
    static byte[] commonByteArray_VAC_CONSOLIDADOS_VAC_VacunasAplicadasMSPS = new byte[0];

	
			    public java.util.Date moment;

				public java.util.Date getMoment () {
					return this.moment;
				}

				public Boolean momentIsNullable(){
				    return true;
				}
				public Boolean momentIsKey(){
				    return false;
				}
				public Integer momentLength(){
				    return 0;
				}
				public Integer momentPrecision(){
				    return 0;
				}
				public String momentDefault(){
				
					return null;
				
				}
				public String momentComment(){
				
				    return null;
				
				}
				public String momentPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String momentOriginalDbColumnName(){
				
					return "moment";
				
				}

				
			    public String pid;

				public String getPid () {
					return this.pid;
				}

				public Boolean pidIsNullable(){
				    return true;
				}
				public Boolean pidIsKey(){
				    return false;
				}
				public Integer pidLength(){
				    return 20;
				}
				public Integer pidPrecision(){
				    return 0;
				}
				public String pidDefault(){
				
					return null;
				
				}
				public String pidComment(){
				
				    return null;
				
				}
				public String pidPattern(){
				
				    return null;
				
				}
				public String pidOriginalDbColumnName(){
				
					return "pid";
				
				}

				
			    public String root_pid;

				public String getRoot_pid () {
					return this.root_pid;
				}

				public Boolean root_pidIsNullable(){
				    return true;
				}
				public Boolean root_pidIsKey(){
				    return false;
				}
				public Integer root_pidLength(){
				    return 20;
				}
				public Integer root_pidPrecision(){
				    return 0;
				}
				public String root_pidDefault(){
				
					return null;
				
				}
				public String root_pidComment(){
				
				    return null;
				
				}
				public String root_pidPattern(){
				
				    return null;
				
				}
				public String root_pidOriginalDbColumnName(){
				
					return "root_pid";
				
				}

				
			    public String father_pid;

				public String getFather_pid () {
					return this.father_pid;
				}

				public Boolean father_pidIsNullable(){
				    return true;
				}
				public Boolean father_pidIsKey(){
				    return false;
				}
				public Integer father_pidLength(){
				    return 20;
				}
				public Integer father_pidPrecision(){
				    return 0;
				}
				public String father_pidDefault(){
				
					return null;
				
				}
				public String father_pidComment(){
				
				    return null;
				
				}
				public String father_pidPattern(){
				
				    return null;
				
				}
				public String father_pidOriginalDbColumnName(){
				
					return "father_pid";
				
				}

				
			    public String project;

				public String getProject () {
					return this.project;
				}

				public Boolean projectIsNullable(){
				    return true;
				}
				public Boolean projectIsKey(){
				    return false;
				}
				public Integer projectLength(){
				    return 50;
				}
				public Integer projectPrecision(){
				    return 0;
				}
				public String projectDefault(){
				
					return null;
				
				}
				public String projectComment(){
				
				    return null;
				
				}
				public String projectPattern(){
				
				    return null;
				
				}
				public String projectOriginalDbColumnName(){
				
					return "project";
				
				}

				
			    public String job;

				public String getJob () {
					return this.job;
				}

				public Boolean jobIsNullable(){
				    return true;
				}
				public Boolean jobIsKey(){
				    return false;
				}
				public Integer jobLength(){
				    return 255;
				}
				public Integer jobPrecision(){
				    return 0;
				}
				public String jobDefault(){
				
					return null;
				
				}
				public String jobComment(){
				
				    return null;
				
				}
				public String jobPattern(){
				
				    return null;
				
				}
				public String jobOriginalDbColumnName(){
				
					return "job";
				
				}

				
			    public String context;

				public String getContext () {
					return this.context;
				}

				public Boolean contextIsNullable(){
				    return true;
				}
				public Boolean contextIsKey(){
				    return false;
				}
				public Integer contextLength(){
				    return 50;
				}
				public Integer contextPrecision(){
				    return 0;
				}
				public String contextDefault(){
				
					return null;
				
				}
				public String contextComment(){
				
				    return null;
				
				}
				public String contextPattern(){
				
				    return null;
				
				}
				public String contextOriginalDbColumnName(){
				
					return "context";
				
				}

				
			    public Integer priority;

				public Integer getPriority () {
					return this.priority;
				}

				public Boolean priorityIsNullable(){
				    return true;
				}
				public Boolean priorityIsKey(){
				    return false;
				}
				public Integer priorityLength(){
				    return 3;
				}
				public Integer priorityPrecision(){
				    return 0;
				}
				public String priorityDefault(){
				
					return "";
				
				}
				public String priorityComment(){
				
				    return null;
				
				}
				public String priorityPattern(){
				
				    return null;
				
				}
				public String priorityOriginalDbColumnName(){
				
					return "priority";
				
				}

				
			    public String type;

				public String getType () {
					return this.type;
				}

				public Boolean typeIsNullable(){
				    return true;
				}
				public Boolean typeIsKey(){
				    return false;
				}
				public Integer typeLength(){
				    return 255;
				}
				public Integer typePrecision(){
				    return 0;
				}
				public String typeDefault(){
				
					return null;
				
				}
				public String typeComment(){
				
				    return null;
				
				}
				public String typePattern(){
				
				    return null;
				
				}
				public String typeOriginalDbColumnName(){
				
					return "type";
				
				}

				
			    public String origin;

				public String getOrigin () {
					return this.origin;
				}

				public Boolean originIsNullable(){
				    return true;
				}
				public Boolean originIsKey(){
				    return false;
				}
				public Integer originLength(){
				    return 255;
				}
				public Integer originPrecision(){
				    return 0;
				}
				public String originDefault(){
				
					return null;
				
				}
				public String originComment(){
				
				    return null;
				
				}
				public String originPattern(){
				
				    return null;
				
				}
				public String originOriginalDbColumnName(){
				
					return "origin";
				
				}

				
			    public String message;

				public String getMessage () {
					return this.message;
				}

				public Boolean messageIsNullable(){
				    return true;
				}
				public Boolean messageIsKey(){
				    return false;
				}
				public Integer messageLength(){
				    return 255;
				}
				public Integer messagePrecision(){
				    return 0;
				}
				public String messageDefault(){
				
					return null;
				
				}
				public String messageComment(){
				
				    return null;
				
				}
				public String messagePattern(){
				
				    return null;
				
				}
				public String messageOriginalDbColumnName(){
				
					return "message";
				
				}

				
			    public Integer code;

				public Integer getCode () {
					return this.code;
				}

				public Boolean codeIsNullable(){
				    return true;
				}
				public Boolean codeIsKey(){
				    return false;
				}
				public Integer codeLength(){
				    return 3;
				}
				public Integer codePrecision(){
				    return 0;
				}
				public String codeDefault(){
				
					return "";
				
				}
				public String codeComment(){
				
				    return null;
				
				}
				public String codePattern(){
				
				    return null;
				
				}
				public String codeOriginalDbColumnName(){
				
					return "code";
				
				}

				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_VAC_CONSOLIDADOS_VAC_VacunasAplicadasMSPS.length) {
				if(length < 1024 && commonByteArray_VAC_CONSOLIDADOS_VAC_VacunasAplicadasMSPS.length == 0) {
   					commonByteArray_VAC_CONSOLIDADOS_VAC_VacunasAplicadasMSPS = new byte[1024];
				} else {
   					commonByteArray_VAC_CONSOLIDADOS_VAC_VacunasAplicadasMSPS = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_VAC_CONSOLIDADOS_VAC_VacunasAplicadasMSPS, 0, length);
			strReturn = new String(commonByteArray_VAC_CONSOLIDADOS_VAC_VacunasAplicadasMSPS, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_VAC_CONSOLIDADOS_VAC_VacunasAplicadasMSPS.length) {
				if(length < 1024 && commonByteArray_VAC_CONSOLIDADOS_VAC_VacunasAplicadasMSPS.length == 0) {
   					commonByteArray_VAC_CONSOLIDADOS_VAC_VacunasAplicadasMSPS = new byte[1024];
				} else {
   					commonByteArray_VAC_CONSOLIDADOS_VAC_VacunasAplicadasMSPS = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_VAC_CONSOLIDADOS_VAC_VacunasAplicadasMSPS, 0, length);
			strReturn = new String(commonByteArray_VAC_CONSOLIDADOS_VAC_VacunasAplicadasMSPS, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_VAC_CONSOLIDADOS_VAC_VacunasAplicadasMSPS) {

        	try {

        		int length = 0;
		
					this.moment = readDate(dis);
					
					this.pid = readString(dis);
					
					this.root_pid = readString(dis);
					
					this.father_pid = readString(dis);
					
					this.project = readString(dis);
					
					this.job = readString(dis);
					
					this.context = readString(dis);
					
						this.priority = readInteger(dis);
					
					this.type = readString(dis);
					
					this.origin = readString(dis);
					
					this.message = readString(dis);
					
						this.code = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_VAC_CONSOLIDADOS_VAC_VacunasAplicadasMSPS) {

        	try {

        		int length = 0;
		
					this.moment = readDate(dis);
					
					this.pid = readString(dis);
					
					this.root_pid = readString(dis);
					
					this.father_pid = readString(dis);
					
					this.project = readString(dis);
					
					this.job = readString(dis);
					
					this.context = readString(dis);
					
						this.priority = readInteger(dis);
					
					this.type = readString(dis);
					
					this.origin = readString(dis);
					
					this.message = readString(dis);
					
						this.code = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.pid,dos);
					
					// String
				
						writeString(this.root_pid,dos);
					
					// String
				
						writeString(this.father_pid,dos);
					
					// String
				
						writeString(this.project,dos);
					
					// String
				
						writeString(this.job,dos);
					
					// String
				
						writeString(this.context,dos);
					
					// Integer
				
						writeInteger(this.priority,dos);
					
					// String
				
						writeString(this.type,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.message,dos);
					
					// Integer
				
						writeInteger(this.code,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.pid,dos);
					
					// String
				
						writeString(this.root_pid,dos);
					
					// String
				
						writeString(this.father_pid,dos);
					
					// String
				
						writeString(this.project,dos);
					
					// String
				
						writeString(this.job,dos);
					
					// String
				
						writeString(this.context,dos);
					
					// Integer
				
						writeInteger(this.priority,dos);
					
					// String
				
						writeString(this.type,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.message,dos);
					
					// Integer
				
						writeInteger(this.code,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("moment="+String.valueOf(moment));
		sb.append(",pid="+pid);
		sb.append(",root_pid="+root_pid);
		sb.append(",father_pid="+father_pid);
		sb.append(",project="+project);
		sb.append(",job="+job);
		sb.append(",context="+context);
		sb.append(",priority="+String.valueOf(priority));
		sb.append(",type="+type);
		sb.append(",origin="+origin);
		sb.append(",message="+message);
		sb.append(",code="+String.valueOf(code));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row3Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tLogCatcher_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tLogCatcher_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row3Struct row3 = new row3Struct();
row3Struct row5 = row3;





	
	/**
	 * [tRunJob_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tRunJob_1", false);
		start_Hash.put("tRunJob_1", System.currentTimeMillis());
		
	
	currentComponent="tRunJob_1";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row5");
					}
				
		int tos_count_tRunJob_1 = 0;
		
class DealChildJobLibrary_tRunJob_1 {

	public String replaceJarPathsFromCrcMap(String originalClassPathLine) throws java.lang.Exception {
		String classPathLine = "";
		String crcMapPath = new java.io.File("../crcMap").getCanonicalPath();
		if (isNeedAddLibsPath( crcMapPath)) {
			java.util.Map<String, String> crcMap = null;
			java.io.ObjectInputStream ois = new java.io.ObjectInputStream(new java.io.FileInputStream(crcMapPath)) {
				@Override
				public Class<?> resolveClass(java.io.ObjectStreamClass desc) throws java.io.IOException, ClassNotFoundException {
					if(!"java.util.HashMap".equals(desc.getName())) {
						throw new java.io.InvalidClassException("Unauthorized deserialization attempt : " + desc.getName());
					}
					return super.resolveClass(desc);
				}
			};
			crcMap = (java.util.Map<String, String>) ois.readObject();
			ois.close();
			classPathLine = addLibsPath(originalClassPathLine, crcMap);
		} else {
			classPathLine = originalClassPathLine;
		}
		return classPathLine;
	}
	
	private boolean isNeedAddLibsPath(String crcMapPath) {
		if (!(new java.io.File(crcMapPath).exists())) {// when not use cache
			return false;
		}
		return true;
	}
	
	
	private String addLibsPath(String line, java.util.Map<String, String> crcMap) {
		for (java.util.Map.Entry<String, String> entry : crcMap.entrySet()) {
			line = adaptLibPaths(line, entry);
		}
		return line;
	}
	
	private String adaptLibPaths(String line, java.util.Map.Entry<String, String> entry) {
		String jarName = entry.getValue();
		String crc = entry.getKey();
		String libStringFinder = "../lib/" + jarName;
		if (line.contains(libStringFinder)) {
			line = line.replace(libStringFinder, "../../../cache/lib/" + crc + "/" + jarName);
		} else if (line.contains(":$ROOT_PATH/" + jarName + ":")) {
			line = line.replace(":$ROOT_PATH/" + jarName + ":", ":$ROOT_PATH/../../../cache/lib/" + crc + "/" + jarName + ":");
		} else if (line.contains(";" + jarName + ";")) {
			line = line.replace(";" + jarName + ";", ";../../../cache/lib/" + crc + "/" + jarName + ";");
		}
		return line;
	}
	
}
	DealChildJobLibrary_tRunJob_1 dealChildJobLibrary_tRunJob_1 = new DealChildJobLibrary_tRunJob_1();

	class JVMArgumentHelper_tRunJob_1 {
		
		
		
		private void addClasspath(java.util.List<String> target_argument_list, String job_origin_classpath) {
			
			String extra_classpath = null;
			String path_separator = System.getProperty("path.separator");
			if (path_separator != null && path_separator.length() > 1) {
				throw new RuntimeException("path separator should be single character");
			}
			
			if(extra_classpath!=null && !extra_classpath.isEmpty()) {
				if(extra_classpath.endsWith(path_separator)) {
					target_argument_list.add(extra_classpath+job_origin_classpath);
				} else if(extra_classpath.contains(path_separator)) {
					target_argument_list.add(concatStr(extra_classpath, path_separator, job_origin_classpath));
				} else if(extra_classpath.endsWith(":")) {
					target_argument_list.add(extra_classpath.replace(":", path_separator)+job_origin_classpath);
				} else if(extra_classpath.endsWith(";")) {
					target_argument_list.add(extra_classpath.replace(";", path_separator)+job_origin_classpath);
				} else if(extra_classpath.contains(":")) {
					target_argument_list.add(concatStr(extra_classpath.replace(":", path_separator), path_separator, job_origin_classpath));
				} else if(extra_classpath.contains(";")) {
					target_argument_list.add(concatStr(extra_classpath.replace(";", path_separator), path_separator, job_origin_classpath));
				} else {
					target_argument_list.add(concatStr(extra_classpath, path_separator, job_origin_classpath));
				}
				return;
			}
			
			target_argument_list.add(job_origin_classpath);
		}
		
		private String concatStr(String s1, String s2, String s3) {
			java.lang.StringBuilder strB = new java.lang.StringBuilder();
			strB.append(s1).append(s2).append(s3);
			return strB.toString();
		}
		
		public void addArgumentsTo(java.util.List<String> target_argument_list, String argument_from_child) {
			addArgumentsTo(target_argument_list, argument_from_child, false);
		}
		
		public void addArgumentsTo(java.util.List<String> target_argument_list, String argument_from_child, boolean isCP) {
			if(isCP) {
				addClasspath(target_argument_list, argument_from_child);
				return;
			}
		
			
			
			
			target_argument_list.add(argument_from_child);
			
		}
		
		
	}
	
	JVMArgumentHelper_tRunJob_1 jvm_argument_helper_tRunJob_1 = new JVMArgumentHelper_tRunJob_1();
	
	String audit_jar_path_tRunJob_1 = System.getProperty("classpath.extended");
	

 



/**
 * [tRunJob_1 begin ] stop
 */



	
	/**
	 * [tFileOutputDelimited_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputDelimited_1", false);
		start_Hash.put("tFileOutputDelimited_1", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputDelimited_1";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row3");
					}
				
		int tos_count_tFileOutputDelimited_1 = 0;
		

String fileName_tFileOutputDelimited_1 = "";
    fileName_tFileOutputDelimited_1 = (new java.io.File(context.LOGS_ERROR)).getAbsolutePath().replace("\\","/");
    String fullName_tFileOutputDelimited_1 = null;
    String extension_tFileOutputDelimited_1 = null;
    String directory_tFileOutputDelimited_1 = null;
    if((fileName_tFileOutputDelimited_1.indexOf("/") != -1)) {
        if(fileName_tFileOutputDelimited_1.lastIndexOf(".") < fileName_tFileOutputDelimited_1.lastIndexOf("/")) {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
            extension_tFileOutputDelimited_1 = "";
        } else {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0, fileName_tFileOutputDelimited_1.lastIndexOf("."));
            extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(fileName_tFileOutputDelimited_1.lastIndexOf("."));
        }
        directory_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0, fileName_tFileOutputDelimited_1.lastIndexOf("/"));
    } else {
        if(fileName_tFileOutputDelimited_1.lastIndexOf(".") != -1) {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0, fileName_tFileOutputDelimited_1.lastIndexOf("."));
            extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(fileName_tFileOutputDelimited_1.lastIndexOf("."));
        } else {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
            extension_tFileOutputDelimited_1 = "";
        }
        directory_tFileOutputDelimited_1 = "";
    }
    boolean isFileGenerated_tFileOutputDelimited_1 = true;
    java.io.File filetFileOutputDelimited_1 = new java.io.File(fileName_tFileOutputDelimited_1);
    globalMap.put("tFileOutputDelimited_1_FILE_NAME",fileName_tFileOutputDelimited_1);
        if(filetFileOutputDelimited_1.exists()){
            isFileGenerated_tFileOutputDelimited_1 = false;
        }
            int nb_line_tFileOutputDelimited_1 = 0;
            int splitedFileNo_tFileOutputDelimited_1 = 0;
            int currentRow_tFileOutputDelimited_1 = 0;

            final String OUT_DELIM_tFileOutputDelimited_1 = /** Start field tFileOutputDelimited_1:FIELDSEPARATOR */";"/** End field tFileOutputDelimited_1:FIELDSEPARATOR */;

            final String OUT_DELIM_ROWSEP_tFileOutputDelimited_1 = /** Start field tFileOutputDelimited_1:ROWSEPARATOR */"\n"/** End field tFileOutputDelimited_1:ROWSEPARATOR */;

                    //create directory only if not exists
                    if(directory_tFileOutputDelimited_1 != null && directory_tFileOutputDelimited_1.trim().length() != 0) {
                        java.io.File dir_tFileOutputDelimited_1 = new java.io.File(directory_tFileOutputDelimited_1);
                        if(!dir_tFileOutputDelimited_1.exists()) {
                            dir_tFileOutputDelimited_1.mkdirs();
                        }
                    }

                        //routines.system.Row
                        java.io.Writer outtFileOutputDelimited_1 = null;

                        outtFileOutputDelimited_1 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
                        new java.io.FileOutputStream(fileName_tFileOutputDelimited_1, true),"ISO-8859-15"));
                resourceMap.put("out_tFileOutputDelimited_1", outtFileOutputDelimited_1);
                                    if(filetFileOutputDelimited_1.length()==0){
                                        outtFileOutputDelimited_1.write("moment");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("pid");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("root_pid");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("father_pid");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("project");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("job");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("context");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("priority");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("type");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("origin");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("message");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("code");
                                        outtFileOutputDelimited_1.write(OUT_DELIM_ROWSEP_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.flush();
                                    }


resourceMap.put("nb_line_tFileOutputDelimited_1", nb_line_tFileOutputDelimited_1);

 



/**
 * [tFileOutputDelimited_1 begin ] stop
 */



	
	/**
	 * [tLogCatcher_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogCatcher_1", false);
		start_Hash.put("tLogCatcher_1", System.currentTimeMillis());
		
	
	currentComponent="tLogCatcher_1";
	
	
		int tos_count_tLogCatcher_1 = 0;
		

try {
	for (LogCatcherUtils.LogCatcherMessage lcm : tLogCatcher_1.getMessages()) {
		row3.type = lcm.getType();
		row3.origin = (lcm.getOrigin()==null || lcm.getOrigin().length()<1 ? null : lcm.getOrigin());
		row3.priority = lcm.getPriority();
		row3.message = lcm.getMessage();
		row3.code = lcm.getCode();
		
		row3.moment = java.util.Calendar.getInstance().getTime();
	
    	row3.pid = pid;
		row3.root_pid = rootPid;
		row3.father_pid = fatherPid;
	
    	row3.project = projectName;
    	row3.job = jobName;
    	row3.context = contextStr;
    		
 



/**
 * [tLogCatcher_1 begin ] stop
 */
	
	/**
	 * [tLogCatcher_1 main ] start
	 */

	

	
	
	currentComponent="tLogCatcher_1";
	
	

 


	tos_count_tLogCatcher_1++;

/**
 * [tLogCatcher_1 main ] stop
 */
	
	/**
	 * [tLogCatcher_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogCatcher_1";
	
	

 



/**
 * [tLogCatcher_1 process_data_begin ] stop
 */

	
	/**
	 * [tFileOutputDelimited_1 main ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row3"
						
						);
					}
					


                    StringBuilder sb_tFileOutputDelimited_1 = new StringBuilder();
                            if(row3.moment != null) {
                        sb_tFileOutputDelimited_1.append(
                            FormatterUtils.format_Date(row3.moment, "yyyy-MM-dd HH:mm:ss")
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row3.pid != null) {
                        sb_tFileOutputDelimited_1.append(
                            row3.pid
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row3.root_pid != null) {
                        sb_tFileOutputDelimited_1.append(
                            row3.root_pid
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row3.father_pid != null) {
                        sb_tFileOutputDelimited_1.append(
                            row3.father_pid
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row3.project != null) {
                        sb_tFileOutputDelimited_1.append(
                            row3.project
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row3.job != null) {
                        sb_tFileOutputDelimited_1.append(
                            row3.job
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row3.context != null) {
                        sb_tFileOutputDelimited_1.append(
                            row3.context
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row3.priority != null) {
                        sb_tFileOutputDelimited_1.append(
                            row3.priority
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row3.type != null) {
                        sb_tFileOutputDelimited_1.append(
                            row3.type
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row3.origin != null) {
                        sb_tFileOutputDelimited_1.append(
                            row3.origin
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row3.message != null) {
                        sb_tFileOutputDelimited_1.append(
                            row3.message
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row3.code != null) {
                        sb_tFileOutputDelimited_1.append(
                            row3.code
                        );
                            }
                    sb_tFileOutputDelimited_1.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_1);


                    nb_line_tFileOutputDelimited_1++;
                    resourceMap.put("nb_line_tFileOutputDelimited_1", nb_line_tFileOutputDelimited_1);

                        outtFileOutputDelimited_1.write(sb_tFileOutputDelimited_1.toString());




 
     row5 = row3;


	tos_count_tFileOutputDelimited_1++;

/**
 * [tFileOutputDelimited_1 main ] stop
 */
	
	/**
	 * [tFileOutputDelimited_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";
	
	

 



/**
 * [tFileOutputDelimited_1 process_data_begin ] stop
 */

	
	/**
	 * [tRunJob_1 main ] start
	 */

	

	
	
	currentComponent="tRunJob_1";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row5"
						
						);
					}
					
	java.util.List<String> paraList_tRunJob_1 = new java.util.ArrayList<String>();
	
			
			String osName_tRunJob_1 = System.getProperty("os.name");
			if (osName_tRunJob_1 != null && osName_tRunJob_1.toLowerCase(java.util.Locale.US).startsWith("win")){
				
						paraList_tRunJob_1.add("java");
						String m2 = System.getProperty("talend.component.manager.m2.repository");
						if (m2 != null){
							paraList_tRunJob_1.add("-Dtalend.component.manager.m2.repository=" + m2);
						}
						
						if (Boolean.getBoolean("propagateLoggingConfiguration")) {
							String log4j1_config_tRunJob_1 = System.getProperty("log4j.configuration");
							if (log4j1_config_tRunJob_1 != null){
								paraList_tRunJob_1.add("-Dlog4j.configuration=" + log4j1_config_tRunJob_1);
							}
							String log4j2_config_tRunJob_1 = System.getProperty("log4j.configurationFile");
							if (log4j2_config_tRunJob_1 != null){
								paraList_tRunJob_1.add("-Dlog4j.configurationFile=" + log4j2_config_tRunJob_1);
							}
							if (log4j1_config_tRunJob_1 != null || log4j2_config_tRunJob_1 != null) {
								paraList_tRunJob_1.add("-DpropagateLoggingConfiguration=true");
							}
						}
						
						if(enableLogStash){
							System.getProperties().stringPropertyNames().stream()
								.filter(it -> it.startsWith("audit."))
								.forEach(key -> paraList_tRunJob_1.add("-D" + key + "=" + System.getProperty(key)));
						}
							
						System.getProperties().stringPropertyNames().stream()
							.filter(it -> it.startsWith("runtime.lineage.") || "classpath.extended".equals(it))
							.forEach(key -> paraList_tRunJob_1.add("-D" + key + "=" + System.getProperty(key)));
					
		      					jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "-Dtalend.component.manager.m2.repository=../lib");
		      				
		      					jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "-Xms256M");
		      				
		      					jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "-Xmx1024M");
		      				
		      					jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "-cp");
		      				
              					String classpath_tRunJob_1_5 = ".;../lib/routines.jar;../lib/log4j-slf4j-impl-2.17.1.jar;../lib/log4j-api-2.17.1.jar;../lib/log4j-core-2.17.1.jar;../lib/activation-1.1.jar;../lib/jakarta.mail-1.6.7.jar;../lib/xercesImpl-2.12.2.jar;../lib/xml-apis-1.4.01.jar;../lib/slf4j-api-1.7.34.jar;../lib/crypto-utils-7.1.16.jar;../lib/TalendSAX.jar;../lib/jboss-marshalling-2.0.12.Final.jar;../lib/dom4j-2.1.3.jar;mail_0_1.jar;";
              					
              					if(audit_jar_path_tRunJob_1!=null && !audit_jar_path_tRunJob_1.isEmpty()) {
		      						classpath_tRunJob_1_5 += audit_jar_path_tRunJob_1;
		      					}
		      					
	        					jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, dealChildJobLibrary_tRunJob_1.replaceJarPathsFromCrcMap(classpath_tRunJob_1_5), true);
		      				
		      					jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "vac_consolidados_vac.mail_0_1.Mail");
		      				
		      					jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "--father_pid="+pid);
		      				
		      					jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "--root_pid="+rootPid);
		      				
		      					jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "--father_node=tRunJob_1");
		      				
		      					jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "--context=Default");
		      				
		      					jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "%*");
		      				
			} else {
	      		
						paraList_tRunJob_1.add("java");
						String m2 = System.getProperty("talend.component.manager.m2.repository");
						if (m2 != null){
							paraList_tRunJob_1.add("-Dtalend.component.manager.m2.repository=" + m2);
						}
						
						if (Boolean.getBoolean("propagateLoggingConfiguration")) {
							String log4j1_config_tRunJob_1 = System.getProperty("log4j.configuration");
							if (log4j1_config_tRunJob_1 != null){
								paraList_tRunJob_1.add("-Dlog4j.configuration=" + log4j1_config_tRunJob_1);
							}
							String log4j2_config_tRunJob_1 = System.getProperty("log4j.configurationFile");
							if (log4j2_config_tRunJob_1 != null){
								paraList_tRunJob_1.add("-Dlog4j.configurationFile=" + log4j2_config_tRunJob_1);
							}
							if (log4j1_config_tRunJob_1 != null || log4j2_config_tRunJob_1 != null) {
								paraList_tRunJob_1.add("-DpropagateLoggingConfiguration=true");
							}
						}
						
						if(enableLogStash){
							System.getProperties().stringPropertyNames().stream()
								.filter(it -> it.startsWith("audit."))
								.forEach(key -> paraList_tRunJob_1.add("-D" + key + "=" + System.getProperty(key)));
						}
							
						System.getProperties().stringPropertyNames().stream()
							.filter(it -> it.startsWith("runtime.lineage.") || "classpath.extended".equals(it))
							.forEach(key -> paraList_tRunJob_1.add("-D" + key + "=" + System.getProperty(key)));
					
								jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "-Dtalend.component.manager.m2.repository=../lib");
		      				
								jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "-Xms256M");
		      				
								jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "-Xmx1024M");
		      				
								jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "-cp");
		      				
		      					String classpath_tRunJob_1_5 = ".:$ROOT_PATH:$ROOT_PATH/../lib/routines.jar:$ROOT_PATH/../lib/log4j-slf4j-impl-2.17.1.jar:$ROOT_PATH/../lib/log4j-api-2.17.1.jar:$ROOT_PATH/../lib/log4j-core-2.17.1.jar:$ROOT_PATH/../lib/activation-1.1.jar:$ROOT_PATH/../lib/jakarta.mail-1.6.7.jar:$ROOT_PATH/../lib/xercesImpl-2.12.2.jar:$ROOT_PATH/../lib/xml-apis-1.4.01.jar:$ROOT_PATH/../lib/slf4j-api-1.7.34.jar:$ROOT_PATH/../lib/crypto-utils-7.1.16.jar:$ROOT_PATH/../lib/TalendSAX.jar:$ROOT_PATH/../lib/jboss-marshalling-2.0.12.Final.jar:$ROOT_PATH/../lib/dom4j-2.1.3.jar:$ROOT_PATH/mail_0_1.jar:";
		      					
		      					if(audit_jar_path_tRunJob_1!=null && !audit_jar_path_tRunJob_1.isEmpty()) {
		      						classpath_tRunJob_1_5 += audit_jar_path_tRunJob_1;
		      					}
		      					
								jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, dealChildJobLibrary_tRunJob_1.replaceJarPathsFromCrcMap(classpath_tRunJob_1_5).replace("$ROOT_PATH",System.getProperty("user.dir")), true);
		      				
								jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "vac_consolidados_vac.mail_0_1.Mail");
		      				
								jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "--father_pid="+pid);
		      				
								jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "--root_pid="+rootPid);
		      				
								jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "--father_node=tRunJob_1");
		      				
								jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "--context=Default");
		      				
								jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "$@");
		      				
			}

			
			
	  	
		if(enableLogStash){
			paraList_tRunJob_1.add("--audit.enabled="+enableLogStash);
		}
		
	//for feature:10589
	
		paraList_tRunJob_1.add("--stat_port=" + null);
	

	if(resuming_logs_dir_path != null){
		paraList_tRunJob_1.add("--resuming_logs_dir_path=" + resuming_logs_dir_path);
	}
	String childResumePath_tRunJob_1 = ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path);
	String tRunJobName_tRunJob_1 = ResumeUtil.getRighttRunJob(resuming_checkpoint_path);
	if("tRunJob_1".equals(tRunJobName_tRunJob_1) && childResumePath_tRunJob_1 != null){
		paraList_tRunJob_1.add("--resuming_checkpoint_path=" + ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path));
	}
	paraList_tRunJob_1.add("--parent_part_launcher=JOB:" + jobName + "/NODE:tRunJob_1");
	
	java.util.Map<String, Object> parentContextMap_tRunJob_1 = new java.util.HashMap<String, Object>();

	
		
		context.synchronizeContext();
            class ContextProcessor_tRunJob_1 {
                    private void transmitContext_0() {
                    parentContextMap_tRunJob_1.put("CARPETA_SALIDA", context.CARPETA_SALIDA);
                    paraList_tRunJob_1.add("--context_type " + "CARPETA_SALIDA" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("NOMBRE_PERSONAS", context.NOMBRE_PERSONAS);
                    paraList_tRunJob_1.add("--context_type " + "NOMBRE_PERSONAS" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("NOMBRE_VACUNAS", context.NOMBRE_VACUNAS);
                    paraList_tRunJob_1.add("--context_type " + "NOMBRE_VACUNAS" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("NOMBRE_ZIP", context.NOMBRE_ZIP);
                    paraList_tRunJob_1.add("--context_type " + "NOMBRE_ZIP" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("ENCABEZADOS", context.ENCABEZADOS);
                    paraList_tRunJob_1.add("--context_type " + "ENCABEZADOS" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("MSPS", context.MSPS);
                    paraList_tRunJob_1.add("--context_type " + "MSPS" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("QUERY", context.QUERY);
                    paraList_tRunJob_1.add("--context_type " + "QUERY" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("SP_ESTADO", context.SP_ESTADO);
                    paraList_tRunJob_1.add("--context_type " + "SP_ESTADO" + "=" + "id_Integer");
                    parentContextMap_tRunJob_1.put("SP_MENSAJE", context.SP_MENSAJE);
                    paraList_tRunJob_1.add("--context_type " + "SP_MENSAJE" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("db_destino_AdditionalParams", context.db_destino_AdditionalParams);
                    paraList_tRunJob_1.add("--context_type " + "db_destino_AdditionalParams" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("db_destino_Login", context.db_destino_Login);
                    paraList_tRunJob_1.add("--context_type " + "db_destino_Login" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("db_destino_Password", context.db_destino_Password);
                    paraList_tRunJob_1.add("--context_type " + "db_destino_Password" + "=" + "id_Password");
                    parentContextMap_tRunJob_1.put("db_destino_Port", context.db_destino_Port);
                    paraList_tRunJob_1.add("--context_type " + "db_destino_Port" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("db_destino_Schema", context.db_destino_Schema);
                    paraList_tRunJob_1.add("--context_type " + "db_destino_Schema" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("db_destino_Server", context.db_destino_Server);
                    paraList_tRunJob_1.add("--context_type " + "db_destino_Server" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("db_destino_ServiceName", context.db_destino_ServiceName);
                    paraList_tRunJob_1.add("--context_type " + "db_destino_ServiceName" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("db_origen_AdditionalParams", context.db_origen_AdditionalParams);
                    paraList_tRunJob_1.add("--context_type " + "db_origen_AdditionalParams" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("db_origen_Login", context.db_origen_Login);
                    paraList_tRunJob_1.add("--context_type " + "db_origen_Login" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("db_origen_Password", context.db_origen_Password);
                    paraList_tRunJob_1.add("--context_type " + "db_origen_Password" + "=" + "id_Password");
                    parentContextMap_tRunJob_1.put("db_origen_Port", context.db_origen_Port);
                    paraList_tRunJob_1.add("--context_type " + "db_origen_Port" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("db_origen_Schema", context.db_origen_Schema);
                    paraList_tRunJob_1.add("--context_type " + "db_origen_Schema" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("db_origen_Server", context.db_origen_Server);
                    paraList_tRunJob_1.add("--context_type " + "db_origen_Server" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("db_origen_ServiceName", context.db_origen_ServiceName);
                    paraList_tRunJob_1.add("--context_type " + "db_origen_ServiceName" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("BIOLOGICO_ID", context.BIOLOGICO_ID);
                    paraList_tRunJob_1.add("--context_type " + "BIOLOGICO_ID" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("FECHA_FINAL", context.FECHA_FINAL);
                    paraList_tRunJob_1.add("--context_type " + "FECHA_FINAL" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("FECHA_INICIAL", context.FECHA_INICIAL);
                    paraList_tRunJob_1.add("--context_type " + "FECHA_INICIAL" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("FUERZA_ID", context.FUERZA_ID);
                    paraList_tRunJob_1.add("--context_type " + "FUERZA_ID" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("TDOSIS_ID", context.TDOSIS_ID);
                    paraList_tRunJob_1.add("--context_type " + "TDOSIS_ID" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("UORG_ID", context.UORG_ID);
                    paraList_tRunJob_1.add("--context_type " + "UORG_ID" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("BODEGA", context.BODEGA);
                    paraList_tRunJob_1.add("--context_type " + "BODEGA" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("ESTADO_EXEC", context.ESTADO_EXEC);
                    paraList_tRunJob_1.add("--context_type " + "ESTADO_EXEC" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("FECHA_EJECUCION", context.FECHA_EJECUCION);
                    paraList_tRunJob_1.add("--context_type " + "FECHA_EJECUCION" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("HORA_FINAL", context.HORA_FINAL);
                    paraList_tRunJob_1.add("--context_type " + "HORA_FINAL" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("HORA_INICIO", context.HORA_INICIO);
                    paraList_tRunJob_1.add("--context_type " + "HORA_INICIO" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("JOB", context.JOB);
                    paraList_tRunJob_1.add("--context_type " + "JOB" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("LOGS_ERROR", context.LOGS_ERROR);
                    paraList_tRunJob_1.add("--context_type " + "LOGS_ERROR" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("LOGS_EXECUTION", context.LOGS_EXECUTION);
                    paraList_tRunJob_1.add("--context_type " + "LOGS_EXECUTION" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("ORIGEN", context.ORIGEN);
                    paraList_tRunJob_1.add("--context_type " + "ORIGEN" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("STORAGE", context.STORAGE);
                    paraList_tRunJob_1.add("--context_type " + "STORAGE" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("MODULO", context.MODULO);
                    paraList_tRunJob_1.add("--context_type " + "MODULO" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("SARCHIVO_ID", context.SARCHIVO_ID);
                    paraList_tRunJob_1.add("--context_type " + "SARCHIVO_ID" + "=" + "id_BigDecimal");
                    parentContextMap_tRunJob_1.put("SIGLA", context.SIGLA);
                    paraList_tRunJob_1.add("--context_type " + "SIGLA" + "=" + "id_String");
                        }
                    public void transmitAllContext() {
                        transmitContext_0();
                    }
            }
            new ContextProcessor_tRunJob_1().transmitAllContext();
		java.util.Enumeration<?> propertyNames_tRunJob_1 = context.propertyNames();
		while (propertyNames_tRunJob_1.hasMoreElements()) {
			String key_tRunJob_1 = (String) propertyNames_tRunJob_1.nextElement();
			Object value_tRunJob_1 = (Object) context.get(key_tRunJob_1);
			if(value_tRunJob_1!=null) {  
				
					paraList_tRunJob_1.add("--context_param " + key_tRunJob_1 + "=" + value_tRunJob_1);
					
			} else {
				paraList_tRunJob_1.add("--context_param " + key_tRunJob_1 + "=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
			}
			
		}
		

	Object obj_tRunJob_1 = null;

	
		obj_tRunJob_1 = row5.moment;
		if(obj_tRunJob_1!=null) {
			if (obj_tRunJob_1.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_1.add("--context_param moment=" + ((java.util.Date) obj_tRunJob_1).getTime());
			} else {
				
					paraList_tRunJob_1.add("--context_param moment=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_1));
					
				
			}
		} else {
			paraList_tRunJob_1.add("--context_param moment=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_1.put("moment", obj_tRunJob_1);
	
		obj_tRunJob_1 = row5.project;
		if(obj_tRunJob_1!=null) {
			if (obj_tRunJob_1.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_1.add("--context_param Project=" + ((java.util.Date) obj_tRunJob_1).getTime());
			} else {
				
					paraList_tRunJob_1.add("--context_param Project=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_1));
					
				
			}
		} else {
			paraList_tRunJob_1.add("--context_param Project=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_1.put("Project", obj_tRunJob_1);
	
		obj_tRunJob_1 = row5.job;
		if(obj_tRunJob_1!=null) {
			if (obj_tRunJob_1.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_1.add("--context_param job=" + ((java.util.Date) obj_tRunJob_1).getTime());
			} else {
				
					paraList_tRunJob_1.add("--context_param job=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_1));
					
				
			}
		} else {
			paraList_tRunJob_1.add("--context_param job=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_1.put("job", obj_tRunJob_1);
	
		obj_tRunJob_1 = row5.context;
		if(obj_tRunJob_1!=null) {
			if (obj_tRunJob_1.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_1.add("--context_param context=" + ((java.util.Date) obj_tRunJob_1).getTime());
			} else {
				
					paraList_tRunJob_1.add("--context_param context=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_1));
					
				
			}
		} else {
			paraList_tRunJob_1.add("--context_param context=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_1.put("context", obj_tRunJob_1);
	
		obj_tRunJob_1 = row5.origin;
		if(obj_tRunJob_1!=null) {
			if (obj_tRunJob_1.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_1.add("--context_param origen=" + ((java.util.Date) obj_tRunJob_1).getTime());
			} else {
				
					paraList_tRunJob_1.add("--context_param origen=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_1));
					
				
			}
		} else {
			paraList_tRunJob_1.add("--context_param origen=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_1.put("origen", obj_tRunJob_1);
	
		obj_tRunJob_1 = row5.message;
		if(obj_tRunJob_1!=null) {
			if (obj_tRunJob_1.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_1.add("--context_param message=" + ((java.util.Date) obj_tRunJob_1).getTime());
			} else {
				
					paraList_tRunJob_1.add("--context_param message=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_1));
					
				
			}
		} else {
			paraList_tRunJob_1.add("--context_param message=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_1.put("message", obj_tRunJob_1);
	
		obj_tRunJob_1 = context.db_origen_Server;
		if(obj_tRunJob_1!=null) {
			if (obj_tRunJob_1.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_1.add("--context_param server_origen=" + ((java.util.Date) obj_tRunJob_1).getTime());
			} else {
				
					paraList_tRunJob_1.add("--context_param server_origen=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_1));
					
				
			}
		} else {
			paraList_tRunJob_1.add("--context_param server_origen=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_1.put("server_origen", obj_tRunJob_1);
	
		obj_tRunJob_1 = context.db_origen_ServiceName;
		if(obj_tRunJob_1!=null) {
			if (obj_tRunJob_1.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_1.add("--context_param service_name_origen=" + ((java.util.Date) obj_tRunJob_1).getTime());
			} else {
				
					paraList_tRunJob_1.add("--context_param service_name_origen=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_1));
					
				
			}
		} else {
			paraList_tRunJob_1.add("--context_param service_name_origen=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_1.put("service_name_origen", obj_tRunJob_1);
	
		obj_tRunJob_1 = context.db_origen_Login;
		if(obj_tRunJob_1!=null) {
			if (obj_tRunJob_1.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_1.add("--context_param user_origen=" + ((java.util.Date) obj_tRunJob_1).getTime());
			} else {
				
					paraList_tRunJob_1.add("--context_param user_origen=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_1));
					
				
			}
		} else {
			paraList_tRunJob_1.add("--context_param user_origen=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_1.put("user_origen", obj_tRunJob_1);
	
		obj_tRunJob_1 = context.db_destino_Server;
		if(obj_tRunJob_1!=null) {
			if (obj_tRunJob_1.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_1.add("--context_param server_destino=" + ((java.util.Date) obj_tRunJob_1).getTime());
			} else {
				
					paraList_tRunJob_1.add("--context_param server_destino=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_1));
					
				
			}
		} else {
			paraList_tRunJob_1.add("--context_param server_destino=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_1.put("server_destino", obj_tRunJob_1);
	
		obj_tRunJob_1 = context.db_destino_ServiceName;
		if(obj_tRunJob_1!=null) {
			if (obj_tRunJob_1.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_1.add("--context_param service_name_destino=" + ((java.util.Date) obj_tRunJob_1).getTime());
			} else {
				
					paraList_tRunJob_1.add("--context_param service_name_destino=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_1));
					
				
			}
		} else {
			paraList_tRunJob_1.add("--context_param service_name_destino=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_1.put("service_name_destino", obj_tRunJob_1);
	
		obj_tRunJob_1 = context.db_destino_Login;
		if(obj_tRunJob_1!=null) {
			if (obj_tRunJob_1.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_1.add("--context_param user_destino=" + ((java.util.Date) obj_tRunJob_1).getTime());
			} else {
				
					paraList_tRunJob_1.add("--context_param user_destino=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_1));
					
				
			}
		} else {
			paraList_tRunJob_1.add("--context_param user_destino=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_1.put("user_destino", obj_tRunJob_1);
	
	
				class ConsoleHelper_tRunJob_1 {
					private Thread getNormalThread(Process process) {
						return new Thread() {
							public void run() {
								try {
									java.io.BufferedReader reader = new java.io.BufferedReader(
											new java.io.InputStreamReader(
													process.getInputStream()));
									String line = "";
									try {
										while ((line = reader.readLine()) != null) {
											System.out.println(line);
										}
									} finally {
										reader.close();
									}
								} catch (java.io.IOException ioe) {
globalMap.put("tRunJob_1_ERROR_MESSAGE",ioe.getMessage());
						            
									ioe.printStackTrace();
								}
							}
						};
					}

					private Thread getErrorThread(Process process, StringBuffer sb) {
						return new Thread() {
							public void run() {
								try {
									java.io.BufferedReader reader = new java.io.BufferedReader(
											new java.io.InputStreamReader(
													process.getErrorStream()));
									String line = "";
									try {
										while ((line = reader.readLine()) != null) {
											sb.append(line)
													.append("\n");
										}
									} finally {
										reader.close();
									}
								} catch (java.io.IOException ioe) {
globalMap.put("tRunJob_1_ERROR_MESSAGE",ioe.getMessage());
						            
									ioe.printStackTrace();
								}
							}
						};
					}
				}
				ConsoleHelper_tRunJob_1 consoleHelper_tRunJob_1 = new ConsoleHelper_tRunJob_1();

		Runtime runtime_tRunJob_1 = Runtime.getRuntime();
		Process ps_tRunJob_1 = null;
		
		//0 indicates normal termination
        int result_tRunJob_1;
        StringBuffer errorMsg_tRunJob_1 = new StringBuffer();
        try {
            ps_tRunJob_1 = runtime_tRunJob_1.exec((String[])paraList_tRunJob_1.toArray(new String[paraList_tRunJob_1.size()]));

            Thread normal_tRunJob_1 = consoleHelper_tRunJob_1.getNormalThread(ps_tRunJob_1);
            normal_tRunJob_1.start();

            Thread error_tRunJob_1 = consoleHelper_tRunJob_1.getErrorThread(ps_tRunJob_1, errorMsg_tRunJob_1);
            error_tRunJob_1.start();

            result_tRunJob_1 = ps_tRunJob_1.waitFor();
            normal_tRunJob_1.join();
            error_tRunJob_1.join();
        } catch (ThreadDeath tde) {
globalMap.put("tRunJob_1_ERROR_MESSAGE",tde.getMessage());
            ps_tRunJob_1.destroy();
            throw tde;
        }

		globalMap.put("tRunJob_1_CHILD_RETURN_CODE",result_tRunJob_1);
		if(result_tRunJob_1 != 0){
   			globalMap.put("tRunJob_1_CHILD_EXCEPTION_STACKTRACE",errorMsg_tRunJob_1.toString());
			  
	    		throw new RuntimeException("Child job returns " + result_tRunJob_1 + ". It doesn't terminate normally.\n" + errorMsg_tRunJob_1.toString());
			
  		}

		

 


	tos_count_tRunJob_1++;

/**
 * [tRunJob_1 main ] stop
 */
	
	/**
	 * [tRunJob_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tRunJob_1";
	
	

 



/**
 * [tRunJob_1 process_data_begin ] stop
 */
	
	/**
	 * [tRunJob_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tRunJob_1";
	
	

 



/**
 * [tRunJob_1 process_data_end ] stop
 */



	
	/**
	 * [tFileOutputDelimited_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";
	
	

 



/**
 * [tFileOutputDelimited_1 process_data_end ] stop
 */



	
	/**
	 * [tLogCatcher_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogCatcher_1";
	
	

 



/**
 * [tLogCatcher_1 process_data_end ] stop
 */
	
	/**
	 * [tLogCatcher_1 end ] start
	 */

	

	
	
	currentComponent="tLogCatcher_1";
	
	
	}
} catch (Exception e_tLogCatcher_1) {
globalMap.put("tLogCatcher_1_ERROR_MESSAGE",e_tLogCatcher_1.getMessage());
	logIgnoredError(String.format("tLogCatcher_1 - tLogCatcher failed to process log message(s) due to internal error: %s", e_tLogCatcher_1), e_tLogCatcher_1);
}

 

ok_Hash.put("tLogCatcher_1", true);
end_Hash.put("tLogCatcher_1", System.currentTimeMillis());




/**
 * [tLogCatcher_1 end ] stop
 */

	
	/**
	 * [tFileOutputDelimited_1 end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";
	
	



		
			
					if(outtFileOutputDelimited_1!=null) {
						outtFileOutputDelimited_1.flush();
						outtFileOutputDelimited_1.close();
					}
				
				globalMap.put("tFileOutputDelimited_1_NB_LINE",nb_line_tFileOutputDelimited_1);
				globalMap.put("tFileOutputDelimited_1_FILE_NAME",fileName_tFileOutputDelimited_1);
			
		
		
		resourceMap.put("finish_tFileOutputDelimited_1", true);
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row3");
			  	}
			  	
 

ok_Hash.put("tFileOutputDelimited_1", true);
end_Hash.put("tFileOutputDelimited_1", System.currentTimeMillis());




/**
 * [tFileOutputDelimited_1 end ] stop
 */

	
	/**
	 * [tRunJob_1 end ] start
	 */

	

	
	
	currentComponent="tRunJob_1";
	
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row5");
			  	}
			  	
 

ok_Hash.put("tRunJob_1", true);
end_Hash.put("tRunJob_1", System.currentTimeMillis());




/**
 * [tRunJob_1 end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tLogCatcher_1 finally ] start
	 */

	

	
	
	currentComponent="tLogCatcher_1";
	
	

 



/**
 * [tLogCatcher_1 finally ] stop
 */

	
	/**
	 * [tFileOutputDelimited_1 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";
	
	


		if(resourceMap.get("finish_tFileOutputDelimited_1") == null){ 
			
				
						java.io.Writer outtFileOutputDelimited_1 = (java.io.Writer)resourceMap.get("out_tFileOutputDelimited_1");
						if(outtFileOutputDelimited_1!=null) {
							outtFileOutputDelimited_1.flush();
							outtFileOutputDelimited_1.close();
						}
					
				
			
		}
	

 



/**
 * [tFileOutputDelimited_1 finally ] stop
 */

	
	/**
	 * [tRunJob_1 finally ] start
	 */

	

	
	
	currentComponent="tRunJob_1";
	
	
	
 



/**
 * [tRunJob_1 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tLogCatcher_1_SUBPROCESS_STATE", 1);
	}
	


public void tJava_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tJava_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_2", false);
		start_Hash.put("tJava_2", System.currentTimeMillis());
		
	
	currentComponent="tJava_2";
	
	
		int tos_count_tJava_2 = 0;
		


/* para pruebas */
// context.FUERZA_ID = "";
// context.UORG_ID = "200";
// context.BIOLOGICO_ID = "";
// context.TDOSIS_ID = "";
// context.FECHA_INICIAL = "2019-08-01";
// context.FECHA_FINAL = "2019-09-30";		

System.out.println("- Información del consolidado: ");
System.out.println("-- SARCHIVO_ID: " + context.SARCHIVO_ID);
System.out.println("-- MODULO: " + context.MODULO);
System.out.println("-- SIGLA: " + context.SIGLA);
System.out.println("- Filtros del reporte: ");
System.out.println("-- FUERZA_ID: " + context.FUERZA_ID);
System.out.println("-- UORG_ID: " + context.UORG_ID);
System.out.println("-- BIOLOGICO_ID: " + context.BIOLOGICO_ID);
System.out.println("-- TDOSIS_ID: " + context.TDOSIS_ID);
System.out.println("-- FECHA_INICIAL: " + context.FECHA_INICIAL);
System.out.println("-- FECHA_FINAL: " + context.FECHA_FINAL);

// Concatena la ruta donde se guardara el consolidado y la guarda en la variable de contexto carpeta_salida
context.CARPETA_SALIDA = context.STORAGE + "/" + context.MODULO +"/" + context.SIGLA;

// Crea la carpeta donde se guardaran los consolidados
new File(context.CARPETA_SALIDA).mkdirs();







 



/**
 * [tJava_2 begin ] stop
 */
	
	/**
	 * [tJava_2 main ] start
	 */

	

	
	
	currentComponent="tJava_2";
	
	

 


	tos_count_tJava_2++;

/**
 * [tJava_2 main ] stop
 */
	
	/**
	 * [tJava_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_2";
	
	

 



/**
 * [tJava_2 process_data_begin ] stop
 */
	
	/**
	 * [tJava_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_2";
	
	

 



/**
 * [tJava_2 process_data_end ] stop
 */
	
	/**
	 * [tJava_2 end ] start
	 */

	

	
	
	currentComponent="tJava_2";
	
	

 

ok_Hash.put("tJava_2", true);
end_Hash.put("tJava_2", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk10", 0, "ok");
				}
				tOracleInput_1Process(globalMap);



/**
 * [tJava_2 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_2 finally ] start
	 */

	

	
	
	currentComponent="tJava_2";
	
	

 



/**
 * [tJava_2 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_2_SUBPROCESS_STATE", 1);
	}
	


public static class row2Struct implements routines.system.IPersistableRow<row2Struct> {
    final static byte[] commonByteArrayLock_VAC_CONSOLIDADOS_VAC_VacunasAplicadasMSPS = new byte[0];
    static byte[] commonByteArray_VAC_CONSOLIDADOS_VAC_VacunasAplicadasMSPS = new byte[0];

	
			    public String NIT;

				public String getNIT () {
					return this.NIT;
				}

				public Boolean NITIsNullable(){
				    return true;
				}
				public Boolean NITIsKey(){
				    return false;
				}
				public Integer NITLength(){
				    return 12;
				}
				public Integer NITPrecision(){
				    return 0;
				}
				public String NITDefault(){
				
					return null;
				
				}
				public String NITComment(){
				
				    return "";
				
				}
				public String NITPattern(){
				
					return "";
				
				}
				public String NITOriginalDbColumnName(){
				
					return "NIT";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_VAC_CONSOLIDADOS_VAC_VacunasAplicadasMSPS.length) {
				if(length < 1024 && commonByteArray_VAC_CONSOLIDADOS_VAC_VacunasAplicadasMSPS.length == 0) {
   					commonByteArray_VAC_CONSOLIDADOS_VAC_VacunasAplicadasMSPS = new byte[1024];
				} else {
   					commonByteArray_VAC_CONSOLIDADOS_VAC_VacunasAplicadasMSPS = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_VAC_CONSOLIDADOS_VAC_VacunasAplicadasMSPS, 0, length);
			strReturn = new String(commonByteArray_VAC_CONSOLIDADOS_VAC_VacunasAplicadasMSPS, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_VAC_CONSOLIDADOS_VAC_VacunasAplicadasMSPS.length) {
				if(length < 1024 && commonByteArray_VAC_CONSOLIDADOS_VAC_VacunasAplicadasMSPS.length == 0) {
   					commonByteArray_VAC_CONSOLIDADOS_VAC_VacunasAplicadasMSPS = new byte[1024];
				} else {
   					commonByteArray_VAC_CONSOLIDADOS_VAC_VacunasAplicadasMSPS = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_VAC_CONSOLIDADOS_VAC_VacunasAplicadasMSPS, 0, length);
			strReturn = new String(commonByteArray_VAC_CONSOLIDADOS_VAC_VacunasAplicadasMSPS, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_VAC_CONSOLIDADOS_VAC_VacunasAplicadasMSPS) {

        	try {

        		int length = 0;
		
					this.NIT = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_VAC_CONSOLIDADOS_VAC_VacunasAplicadasMSPS) {

        	try {

        		int length = 0;
		
					this.NIT = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.NIT,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.NIT,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("NIT="+NIT);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row2Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row2Struct row2 = new row2Struct();




	
	/**
	 * [tJavaRow_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaRow_2", false);
		start_Hash.put("tJavaRow_2", System.currentTimeMillis());
		
	
	currentComponent="tJavaRow_2";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row2");
					}
				
		int tos_count_tJavaRow_2 = 0;
		

int nb_line_tJavaRow_2 = 0;

 



/**
 * [tJavaRow_2 begin ] stop
 */



	
	/**
	 * [tOracleInput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_1", false);
		start_Hash.put("tOracleInput_1", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_1";
	
	
		int tos_count_tOracleInput_1 = 0;
		
	


	
		    int nb_line_tOracleInput_1 = 0;
		    java.sql.Connection conn_tOracleInput_1 = null;
				String driverClass_tOracleInput_1 = "oracle.jdbc.OracleDriver";
				java.lang.Class.forName(driverClass_tOracleInput_1);
				
			String url_tOracleInput_1 = null;
				url_tOracleInput_1 = "jdbc:oracle:thin:@(description=(address=(protocol=tcp)(host=" + context.db_origen_Server + ")(port=" + context.db_origen_Port + "))(connect_data=(service_name=" + context.db_origen_ServiceName + ")))";

				String dbUser_tOracleInput_1 = context.db_origen_Login;

				

				
	final String decryptedPassword_tOracleInput_1 = context.db_origen_Password; 

				String dbPwd_tOracleInput_1 = decryptedPassword_tOracleInput_1;

				
					java.util.Properties atnParamsPrope_tOracleInput_1 = new java.util.Properties();
					atnParamsPrope_tOracleInput_1.put("user",dbUser_tOracleInput_1);
					atnParamsPrope_tOracleInput_1.put("password",dbPwd_tOracleInput_1);
                    if(context.db_origen_AdditionalParams != null && !"\"\"".equals(context.db_origen_AdditionalParams) && !"".equals(context.db_origen_AdditionalParams)){
                        atnParamsPrope_tOracleInput_1.load(new java.io.ByteArrayInputStream(context.db_origen_AdditionalParams.replace("&", "\n").getBytes()));
                    }
					conn_tOracleInput_1 = java.sql.DriverManager.getConnection(url_tOracleInput_1, atnParamsPrope_tOracleInput_1);
				java.sql.Statement stmtGetTZ_tOracleInput_1 = conn_tOracleInput_1.createStatement();
				java.sql.ResultSet rsGetTZ_tOracleInput_1 = stmtGetTZ_tOracleInput_1.executeQuery("select sessiontimezone from dual");
				String sessionTimezone_tOracleInput_1 = java.util.TimeZone.getDefault().getID();
				while (rsGetTZ_tOracleInput_1.next()) {
					sessionTimezone_tOracleInput_1 = rsGetTZ_tOracleInput_1.getString(1);
				}
                                if (!(conn_tOracleInput_1 instanceof oracle.jdbc.OracleConnection) &&
                                        conn_tOracleInput_1.isWrapperFor(oracle.jdbc.OracleConnection.class)) {
                                    if (conn_tOracleInput_1.unwrap(oracle.jdbc.OracleConnection.class) != null) {
                                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_1.unwrap(oracle.jdbc.OracleConnection.class)).setSessionTimeZone(sessionTimezone_tOracleInput_1);
                                    }
                                } else {
                                    ((oracle.jdbc.OracleConnection)conn_tOracleInput_1).setSessionTimeZone(sessionTimezone_tOracleInput_1);
                                }
		    
			java.sql.Statement stmt_tOracleInput_1 = conn_tOracleInput_1.createStatement();

		    String dbquery_tOracleInput_1 = "\nSELECT LPAD(NIT,12,'0') AS NIT FROM GEN_UORG WHERE SIGLA = 'DGSM' AND ESTREGISTRO_ID = 1 AND ESTADO = 'Activo' AND RO"
+"WNUM < 2\n";
		    

		    globalMap.put("tOracleInput_1_QUERY",dbquery_tOracleInput_1);

		    java.sql.ResultSet rs_tOracleInput_1 = null;

		    try {
		    	rs_tOracleInput_1 = stmt_tOracleInput_1.executeQuery(dbquery_tOracleInput_1);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_1 = rs_tOracleInput_1.getMetaData();
		    	int colQtyInRs_tOracleInput_1 = rsmd_tOracleInput_1.getColumnCount();

		    String tmpContent_tOracleInput_1 = null;
		    
		    
		    while (rs_tOracleInput_1.next()) {
		        nb_line_tOracleInput_1++;
		        
							if(colQtyInRs_tOracleInput_1 < 1) {
								row2.NIT = null;
							} else {
	                         		
        	row2.NIT = routines.system.JDBCUtil.getString(rs_tOracleInput_1, 1, false);
		                    }
					




 



/**
 * [tOracleInput_1 begin ] stop
 */
	
	/**
	 * [tOracleInput_1 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_1";
	
	

 


	tos_count_tOracleInput_1++;

/**
 * [tOracleInput_1 main ] stop
 */
	
	/**
	 * [tOracleInput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_1";
	
	

 



/**
 * [tOracleInput_1 process_data_begin ] stop
 */

	
	/**
	 * [tJavaRow_2 main ] start
	 */

	

	
	
	currentComponent="tJavaRow_2";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row2"
						
						);
					}
					

    String fechaCorte = TalendDate.formatDate("yyyyMMdd", TalendDate.getLastDayOfMonth(TalendDate.parseDate("dd/MM/yyyy", context.FECHA_FINAL)));

context.NOMBRE_PERSONAS = "PER"+ "EPS" + fechaCorte + "NI" + row2.NIT + ".txt";
context.NOMBRE_VACUNAS  = "VAC"+ "EPS" + fechaCorte + "NI" + row2.NIT + ".txt";
context.NOMBRE_ZIP = GenerarUUID.createUUID() + ".zip";
    nb_line_tJavaRow_2++;   

 


	tos_count_tJavaRow_2++;

/**
 * [tJavaRow_2 main ] stop
 */
	
	/**
	 * [tJavaRow_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJavaRow_2";
	
	

 



/**
 * [tJavaRow_2 process_data_begin ] stop
 */
	
	/**
	 * [tJavaRow_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tJavaRow_2";
	
	

 



/**
 * [tJavaRow_2 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_1";
	
	

 



/**
 * [tOracleInput_1 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_1 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_1";
	
	

}
}finally{
	if (rs_tOracleInput_1 != null) {
		rs_tOracleInput_1.close();
	}
	if (stmt_tOracleInput_1 != null) {
		stmt_tOracleInput_1.close();
	}
	if(conn_tOracleInput_1 != null && !conn_tOracleInput_1.isClosed()) {
	
			conn_tOracleInput_1.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
	}
	
}

globalMap.put("tOracleInput_1_NB_LINE",nb_line_tOracleInput_1);
 

ok_Hash.put("tOracleInput_1", true);
end_Hash.put("tOracleInput_1", System.currentTimeMillis());




/**
 * [tOracleInput_1 end ] stop
 */

	
	/**
	 * [tJavaRow_2 end ] start
	 */

	

	
	
	currentComponent="tJavaRow_2";
	
	

globalMap.put("tJavaRow_2_NB_LINE",nb_line_tJavaRow_2);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row2");
			  	}
			  	
 

ok_Hash.put("tJavaRow_2", true);
end_Hash.put("tJavaRow_2", System.currentTimeMillis());




/**
 * [tJavaRow_2 end ] stop
 */



				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tOracleInput_1:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk3", 0, "ok");
								} 
							
							tOracleInput_3Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleInput_1 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_1";
	
	

 



/**
 * [tOracleInput_1 finally ] stop
 */

	
	/**
	 * [tJavaRow_2 finally ] start
	 */

	

	
	
	currentComponent="tJavaRow_2";
	
	

 



/**
 * [tJavaRow_2 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_1_SUBPROCESS_STATE", 1);
	}
	


public static class copyOfout1Struct implements routines.system.IPersistableRow<copyOfout1Struct> {
    final static byte[] commonByteArrayLock_VAC_CONSOLIDADOS_VAC_VacunasAplicadasMSPS = new byte[0];
    static byte[] commonByteArray_VAC_CONSOLIDADOS_VAC_VacunasAplicadasMSPS = new byte[0];

	
			    public String TIPODOCVACUNADO;

				public String getTIPODOCVACUNADO () {
					return this.TIPODOCVACUNADO;
				}

				public Boolean TIPODOCVACUNADOIsNullable(){
				    return false;
				}
				public Boolean TIPODOCVACUNADOIsKey(){
				    return false;
				}
				public Integer TIPODOCVACUNADOLength(){
				    return null;
				}
				public Integer TIPODOCVACUNADOPrecision(){
				    return null;
				}
				public String TIPODOCVACUNADODefault(){
				
					return null;
				
				}
				public String TIPODOCVACUNADOComment(){
				
				    return "";
				
				}
				public String TIPODOCVACUNADOPattern(){
				
					return "";
				
				}
				public String TIPODOCVACUNADOOriginalDbColumnName(){
				
					return "TIPODOCVACUNADO";
				
				}

				
			    public String NUMDOCVACUNADO;

				public String getNUMDOCVACUNADO () {
					return this.NUMDOCVACUNADO;
				}

				public Boolean NUMDOCVACUNADOIsNullable(){
				    return false;
				}
				public Boolean NUMDOCVACUNADOIsKey(){
				    return false;
				}
				public Integer NUMDOCVACUNADOLength(){
				    return null;
				}
				public Integer NUMDOCVACUNADOPrecision(){
				    return null;
				}
				public String NUMDOCVACUNADODefault(){
				
					return null;
				
				}
				public String NUMDOCVACUNADOComment(){
				
				    return "";
				
				}
				public String NUMDOCVACUNADOPattern(){
				
					return "";
				
				}
				public String NUMDOCVACUNADOOriginalDbColumnName(){
				
					return "NUMDOCVACUNADO";
				
				}

				
			    public String NOMBRE1VACUNADO;

				public String getNOMBRE1VACUNADO () {
					return this.NOMBRE1VACUNADO;
				}

				public Boolean NOMBRE1VACUNADOIsNullable(){
				    return true;
				}
				public Boolean NOMBRE1VACUNADOIsKey(){
				    return false;
				}
				public Integer NOMBRE1VACUNADOLength(){
				    return null;
				}
				public Integer NOMBRE1VACUNADOPrecision(){
				    return null;
				}
				public String NOMBRE1VACUNADODefault(){
				
					return null;
				
				}
				public String NOMBRE1VACUNADOComment(){
				
				    return "";
				
				}
				public String NOMBRE1VACUNADOPattern(){
				
					return "";
				
				}
				public String NOMBRE1VACUNADOOriginalDbColumnName(){
				
					return "NOMBRE1VACUNADO";
				
				}

				
			    public String NOMBRE2VACUNADO;

				public String getNOMBRE2VACUNADO () {
					return this.NOMBRE2VACUNADO;
				}

				public Boolean NOMBRE2VACUNADOIsNullable(){
				    return true;
				}
				public Boolean NOMBRE2VACUNADOIsKey(){
				    return false;
				}
				public Integer NOMBRE2VACUNADOLength(){
				    return null;
				}
				public Integer NOMBRE2VACUNADOPrecision(){
				    return null;
				}
				public String NOMBRE2VACUNADODefault(){
				
					return null;
				
				}
				public String NOMBRE2VACUNADOComment(){
				
				    return "";
				
				}
				public String NOMBRE2VACUNADOPattern(){
				
					return "";
				
				}
				public String NOMBRE2VACUNADOOriginalDbColumnName(){
				
					return "NOMBRE2VACUNADO";
				
				}

				
			    public String APELLIDO1VACUNADO;

				public String getAPELLIDO1VACUNADO () {
					return this.APELLIDO1VACUNADO;
				}

				public Boolean APELLIDO1VACUNADOIsNullable(){
				    return true;
				}
				public Boolean APELLIDO1VACUNADOIsKey(){
				    return false;
				}
				public Integer APELLIDO1VACUNADOLength(){
				    return null;
				}
				public Integer APELLIDO1VACUNADOPrecision(){
				    return null;
				}
				public String APELLIDO1VACUNADODefault(){
				
					return null;
				
				}
				public String APELLIDO1VACUNADOComment(){
				
				    return "";
				
				}
				public String APELLIDO1VACUNADOPattern(){
				
					return "";
				
				}
				public String APELLIDO1VACUNADOOriginalDbColumnName(){
				
					return "APELLIDO1VACUNADO";
				
				}

				
			    public String APELLIDO2VACUNADO;

				public String getAPELLIDO2VACUNADO () {
					return this.APELLIDO2VACUNADO;
				}

				public Boolean APELLIDO2VACUNADOIsNullable(){
				    return true;
				}
				public Boolean APELLIDO2VACUNADOIsKey(){
				    return false;
				}
				public Integer APELLIDO2VACUNADOLength(){
				    return null;
				}
				public Integer APELLIDO2VACUNADOPrecision(){
				    return null;
				}
				public String APELLIDO2VACUNADODefault(){
				
					return null;
				
				}
				public String APELLIDO2VACUNADOComment(){
				
				    return "";
				
				}
				public String APELLIDO2VACUNADOPattern(){
				
					return "";
				
				}
				public String APELLIDO2VACUNADOOriginalDbColumnName(){
				
					return "APELLIDO2VACUNADO";
				
				}

				
			    public String SEXOVACUNADO;

				public String getSEXOVACUNADO () {
					return this.SEXOVACUNADO;
				}

				public Boolean SEXOVACUNADOIsNullable(){
				    return false;
				}
				public Boolean SEXOVACUNADOIsKey(){
				    return false;
				}
				public Integer SEXOVACUNADOLength(){
				    return null;
				}
				public Integer SEXOVACUNADOPrecision(){
				    return null;
				}
				public String SEXOVACUNADODefault(){
				
					return null;
				
				}
				public String SEXOVACUNADOComment(){
				
				    return "";
				
				}
				public String SEXOVACUNADOPattern(){
				
					return "";
				
				}
				public String SEXOVACUNADOOriginalDbColumnName(){
				
					return "SEXOVACUNADO";
				
				}

				
			    public String FECHANACVACUNADO;

				public String getFECHANACVACUNADO () {
					return this.FECHANACVACUNADO;
				}

				public Boolean FECHANACVACUNADOIsNullable(){
				    return true;
				}
				public Boolean FECHANACVACUNADOIsKey(){
				    return false;
				}
				public Integer FECHANACVACUNADOLength(){
				    return null;
				}
				public Integer FECHANACVACUNADOPrecision(){
				    return null;
				}
				public String FECHANACVACUNADODefault(){
				
					return null;
				
				}
				public String FECHANACVACUNADOComment(){
				
				    return "";
				
				}
				public String FECHANACVACUNADOPattern(){
				
					return "";
				
				}
				public String FECHANACVACUNADOOriginalDbColumnName(){
				
					return "FECHANACVACUNADO";
				
				}

				
			    public String REGIMENVACUNADO;

				public String getREGIMENVACUNADO () {
					return this.REGIMENVACUNADO;
				}

				public Boolean REGIMENVACUNADOIsNullable(){
				    return true;
				}
				public Boolean REGIMENVACUNADOIsKey(){
				    return false;
				}
				public Integer REGIMENVACUNADOLength(){
				    return null;
				}
				public Integer REGIMENVACUNADOPrecision(){
				    return null;
				}
				public String REGIMENVACUNADODefault(){
				
					return null;
				
				}
				public String REGIMENVACUNADOComment(){
				
				    return "";
				
				}
				public String REGIMENVACUNADOPattern(){
				
					return "";
				
				}
				public String REGIMENVACUNADOOriginalDbColumnName(){
				
					return "REGIMENVACUNADO";
				
				}

				
			    public String CODADMINVACUNADO;

				public String getCODADMINVACUNADO () {
					return this.CODADMINVACUNADO;
				}

				public Boolean CODADMINVACUNADOIsNullable(){
				    return true;
				}
				public Boolean CODADMINVACUNADOIsKey(){
				    return false;
				}
				public Integer CODADMINVACUNADOLength(){
				    return null;
				}
				public Integer CODADMINVACUNADOPrecision(){
				    return null;
				}
				public String CODADMINVACUNADODefault(){
				
					return null;
				
				}
				public String CODADMINVACUNADOComment(){
				
				    return "";
				
				}
				public String CODADMINVACUNADOPattern(){
				
					return "";
				
				}
				public String CODADMINVACUNADOOriginalDbColumnName(){
				
					return "CODADMINVACUNADO";
				
				}

				
			    public String ETNIAVACUNADO;

				public String getETNIAVACUNADO () {
					return this.ETNIAVACUNADO;
				}

				public Boolean ETNIAVACUNADOIsNullable(){
				    return true;
				}
				public Boolean ETNIAVACUNADOIsKey(){
				    return false;
				}
				public Integer ETNIAVACUNADOLength(){
				    return null;
				}
				public Integer ETNIAVACUNADOPrecision(){
				    return null;
				}
				public String ETNIAVACUNADODefault(){
				
					return null;
				
				}
				public String ETNIAVACUNADOComment(){
				
				    return "";
				
				}
				public String ETNIAVACUNADOPattern(){
				
					return "";
				
				}
				public String ETNIAVACUNADOOriginalDbColumnName(){
				
					return "ETNIAVACUNADO";
				
				}

				
			    public BigDecimal PESO_NACIMIENTO;

				public BigDecimal getPESO_NACIMIENTO () {
					return this.PESO_NACIMIENTO;
				}

				public Boolean PESO_NACIMIENTOIsNullable(){
				    return true;
				}
				public Boolean PESO_NACIMIENTOIsKey(){
				    return false;
				}
				public Integer PESO_NACIMIENTOLength(){
				    return 0;
				}
				public Integer PESO_NACIMIENTOPrecision(){
				    return 0;
				}
				public String PESO_NACIMIENTODefault(){
				
					return "";
				
				}
				public String PESO_NACIMIENTOComment(){
				
				    return "";
				
				}
				public String PESO_NACIMIENTOPattern(){
				
					return "";
				
				}
				public String PESO_NACIMIENTOOriginalDbColumnName(){
				
					return "PESO_NACIMIENTO";
				
				}

				
			    public BigDecimal EDAD_GESTACIONAL;

				public BigDecimal getEDAD_GESTACIONAL () {
					return this.EDAD_GESTACIONAL;
				}

				public Boolean EDAD_GESTACIONALIsNullable(){
				    return true;
				}
				public Boolean EDAD_GESTACIONALIsKey(){
				    return false;
				}
				public Integer EDAD_GESTACIONALLength(){
				    return 1024;
				}
				public Integer EDAD_GESTACIONALPrecision(){
				    return 0;
				}
				public String EDAD_GESTACIONALDefault(){
				
					return null;
				
				}
				public String EDAD_GESTACIONALComment(){
				
				    return "";
				
				}
				public String EDAD_GESTACIONALPattern(){
				
					return "";
				
				}
				public String EDAD_GESTACIONALOriginalDbColumnName(){
				
					return "EDAD_GESTACIONAL";
				
				}

				
			    public String PAIS_NACIMIENTO;

				public String getPAIS_NACIMIENTO () {
					return this.PAIS_NACIMIENTO;
				}

				public Boolean PAIS_NACIMIENTOIsNullable(){
				    return true;
				}
				public Boolean PAIS_NACIMIENTOIsKey(){
				    return false;
				}
				public Integer PAIS_NACIMIENTOLength(){
				    return 2;
				}
				public Integer PAIS_NACIMIENTOPrecision(){
				    return 0;
				}
				public String PAIS_NACIMIENTODefault(){
				
					return null;
				
				}
				public String PAIS_NACIMIENTOComment(){
				
				    return "";
				
				}
				public String PAIS_NACIMIENTOPattern(){
				
					return "";
				
				}
				public String PAIS_NACIMIENTOOriginalDbColumnName(){
				
					return "PAIS_NACIMIENTO";
				
				}

				
			    public String DEPTO_NACIMIENTO;

				public String getDEPTO_NACIMIENTO () {
					return this.DEPTO_NACIMIENTO;
				}

				public Boolean DEPTO_NACIMIENTOIsNullable(){
				    return true;
				}
				public Boolean DEPTO_NACIMIENTOIsKey(){
				    return false;
				}
				public Integer DEPTO_NACIMIENTOLength(){
				    return 5;
				}
				public Integer DEPTO_NACIMIENTOPrecision(){
				    return 0;
				}
				public String DEPTO_NACIMIENTODefault(){
				
					return null;
				
				}
				public String DEPTO_NACIMIENTOComment(){
				
				    return "";
				
				}
				public String DEPTO_NACIMIENTOPattern(){
				
					return "";
				
				}
				public String DEPTO_NACIMIENTOOriginalDbColumnName(){
				
					return "DEPTO_NACIMIENTO";
				
				}

				
			    public String MCPIO_NACIMIENTO;

				public String getMCPIO_NACIMIENTO () {
					return this.MCPIO_NACIMIENTO;
				}

				public Boolean MCPIO_NACIMIENTOIsNullable(){
				    return true;
				}
				public Boolean MCPIO_NACIMIENTOIsKey(){
				    return false;
				}
				public Integer MCPIO_NACIMIENTOLength(){
				    return 10;
				}
				public Integer MCPIO_NACIMIENTOPrecision(){
				    return 0;
				}
				public String MCPIO_NACIMIENTODefault(){
				
					return null;
				
				}
				public String MCPIO_NACIMIENTOComment(){
				
				    return "";
				
				}
				public String MCPIO_NACIMIENTOPattern(){
				
					return "";
				
				}
				public String MCPIO_NACIMIENTOOriginalDbColumnName(){
				
					return "MCPIO_NACIMIENTO";
				
				}

				
			    public BigDecimal DESPLAZADO;

				public BigDecimal getDESPLAZADO () {
					return this.DESPLAZADO;
				}

				public Boolean DESPLAZADOIsNullable(){
				    return true;
				}
				public Boolean DESPLAZADOIsKey(){
				    return false;
				}
				public Integer DESPLAZADOLength(){
				    return null;
				}
				public Integer DESPLAZADOPrecision(){
				    return null;
				}
				public String DESPLAZADODefault(){
				
					return null;
				
				}
				public String DESPLAZADOComment(){
				
				    return "";
				
				}
				public String DESPLAZADOPattern(){
				
					return "";
				
				}
				public String DESPLAZADOOriginalDbColumnName(){
				
					return "DESPLAZADO";
				
				}

				
			    public BigDecimal DISCAPACITADO;

				public BigDecimal getDISCAPACITADO () {
					return this.DISCAPACITADO;
				}

				public Boolean DISCAPACITADOIsNullable(){
				    return true;
				}
				public Boolean DISCAPACITADOIsKey(){
				    return false;
				}
				public Integer DISCAPACITADOLength(){
				    return 0;
				}
				public Integer DISCAPACITADOPrecision(){
				    return 0;
				}
				public String DISCAPACITADODefault(){
				
					return "";
				
				}
				public String DISCAPACITADOComment(){
				
				    return "";
				
				}
				public String DISCAPACITADOPattern(){
				
					return "";
				
				}
				public String DISCAPACITADOOriginalDbColumnName(){
				
					return "DISCAPACITADO";
				
				}

				
			    public BigDecimal FALLECIDO;

				public BigDecimal getFALLECIDO () {
					return this.FALLECIDO;
				}

				public Boolean FALLECIDOIsNullable(){
				    return true;
				}
				public Boolean FALLECIDOIsKey(){
				    return false;
				}
				public Integer FALLECIDOLength(){
				    return 0;
				}
				public Integer FALLECIDOPrecision(){
				    return 0;
				}
				public String FALLECIDODefault(){
				
					return "";
				
				}
				public String FALLECIDOComment(){
				
				    return "";
				
				}
				public String FALLECIDOPattern(){
				
					return "";
				
				}
				public String FALLECIDOOriginalDbColumnName(){
				
					return "FALLECIDO";
				
				}

				
			    public BigDecimal ESTUIDA_ACTUAL;

				public BigDecimal getESTUIDA_ACTUAL () {
					return this.ESTUIDA_ACTUAL;
				}

				public Boolean ESTUIDA_ACTUALIsNullable(){
				    return true;
				}
				public Boolean ESTUIDA_ACTUALIsKey(){
				    return false;
				}
				public Integer ESTUIDA_ACTUALLength(){
				    return 0;
				}
				public Integer ESTUIDA_ACTUALPrecision(){
				    return null;
				}
				public String ESTUIDA_ACTUALDefault(){
				
					return "";
				
				}
				public String ESTUIDA_ACTUALComment(){
				
				    return "";
				
				}
				public String ESTUIDA_ACTUALPattern(){
				
					return "";
				
				}
				public String ESTUIDA_ACTUALOriginalDbColumnName(){
				
					return "ESTUIDA_ACTUAL";
				
				}

				
			    public String MADRE_TDOCUMENTO;

				public String getMADRE_TDOCUMENTO () {
					return this.MADRE_TDOCUMENTO;
				}

				public Boolean MADRE_TDOCUMENTOIsNullable(){
				    return true;
				}
				public Boolean MADRE_TDOCUMENTOIsKey(){
				    return false;
				}
				public Integer MADRE_TDOCUMENTOLength(){
				    return null;
				}
				public Integer MADRE_TDOCUMENTOPrecision(){
				    return null;
				}
				public String MADRE_TDOCUMENTODefault(){
				
					return null;
				
				}
				public String MADRE_TDOCUMENTOComment(){
				
				    return "";
				
				}
				public String MADRE_TDOCUMENTOPattern(){
				
					return "";
				
				}
				public String MADRE_TDOCUMENTOOriginalDbColumnName(){
				
					return "MADRE_TDOCUMENTO";
				
				}

				
			    public String MADRE_DOCUMENTO;

				public String getMADRE_DOCUMENTO () {
					return this.MADRE_DOCUMENTO;
				}

				public Boolean MADRE_DOCUMENTOIsNullable(){
				    return true;
				}
				public Boolean MADRE_DOCUMENTOIsKey(){
				    return false;
				}
				public Integer MADRE_DOCUMENTOLength(){
				    return null;
				}
				public Integer MADRE_DOCUMENTOPrecision(){
				    return null;
				}
				public String MADRE_DOCUMENTODefault(){
				
					return null;
				
				}
				public String MADRE_DOCUMENTOComment(){
				
				    return "";
				
				}
				public String MADRE_DOCUMENTOPattern(){
				
					return "";
				
				}
				public String MADRE_DOCUMENTOOriginalDbColumnName(){
				
					return "MADRE_DOCUMENTO";
				
				}

				
			    public String MADRE_NOMBRE1;

				public String getMADRE_NOMBRE1 () {
					return this.MADRE_NOMBRE1;
				}

				public Boolean MADRE_NOMBRE1IsNullable(){
				    return true;
				}
				public Boolean MADRE_NOMBRE1IsKey(){
				    return false;
				}
				public Integer MADRE_NOMBRE1Length(){
				    return null;
				}
				public Integer MADRE_NOMBRE1Precision(){
				    return null;
				}
				public String MADRE_NOMBRE1Default(){
				
					return null;
				
				}
				public String MADRE_NOMBRE1Comment(){
				
				    return "";
				
				}
				public String MADRE_NOMBRE1Pattern(){
				
					return "";
				
				}
				public String MADRE_NOMBRE1OriginalDbColumnName(){
				
					return "MADRE_NOMBRE1";
				
				}

				
			    public String MADRE_NOMBRE2;

				public String getMADRE_NOMBRE2 () {
					return this.MADRE_NOMBRE2;
				}

				public Boolean MADRE_NOMBRE2IsNullable(){
				    return true;
				}
				public Boolean MADRE_NOMBRE2IsKey(){
				    return false;
				}
				public Integer MADRE_NOMBRE2Length(){
				    return null;
				}
				public Integer MADRE_NOMBRE2Precision(){
				    return null;
				}
				public String MADRE_NOMBRE2Default(){
				
					return null;
				
				}
				public String MADRE_NOMBRE2Comment(){
				
				    return "";
				
				}
				public String MADRE_NOMBRE2Pattern(){
				
					return "";
				
				}
				public String MADRE_NOMBRE2OriginalDbColumnName(){
				
					return "MADRE_NOMBRE2";
				
				}

				
			    public String MADRE_APELLIDO1;

				public String getMADRE_APELLIDO1 () {
					return this.MADRE_APELLIDO1;
				}

				public Boolean MADRE_APELLIDO1IsNullable(){
				    return true;
				}
				public Boolean MADRE_APELLIDO1IsKey(){
				    return false;
				}
				public Integer MADRE_APELLIDO1Length(){
				    return null;
				}
				public Integer MADRE_APELLIDO1Precision(){
				    return null;
				}
				public String MADRE_APELLIDO1Default(){
				
					return null;
				
				}
				public String MADRE_APELLIDO1Comment(){
				
				    return "";
				
				}
				public String MADRE_APELLIDO1Pattern(){
				
					return "";
				
				}
				public String MADRE_APELLIDO1OriginalDbColumnName(){
				
					return "MADRE_APELLIDO1";
				
				}

				
			    public String MADRE_APELLIDO2;

				public String getMADRE_APELLIDO2 () {
					return this.MADRE_APELLIDO2;
				}

				public Boolean MADRE_APELLIDO2IsNullable(){
				    return true;
				}
				public Boolean MADRE_APELLIDO2IsKey(){
				    return false;
				}
				public Integer MADRE_APELLIDO2Length(){
				    return null;
				}
				public Integer MADRE_APELLIDO2Precision(){
				    return null;
				}
				public String MADRE_APELLIDO2Default(){
				
					return null;
				
				}
				public String MADRE_APELLIDO2Comment(){
				
				    return "";
				
				}
				public String MADRE_APELLIDO2Pattern(){
				
					return "";
				
				}
				public String MADRE_APELLIDO2OriginalDbColumnName(){
				
					return "MADRE_APELLIDO2";
				
				}

				
			    public String PAIS_RESIDENCIA;

				public String getPAIS_RESIDENCIA () {
					return this.PAIS_RESIDENCIA;
				}

				public Boolean PAIS_RESIDENCIAIsNullable(){
				    return true;
				}
				public Boolean PAIS_RESIDENCIAIsKey(){
				    return false;
				}
				public Integer PAIS_RESIDENCIALength(){
				    return 2;
				}
				public Integer PAIS_RESIDENCIAPrecision(){
				    return 0;
				}
				public String PAIS_RESIDENCIADefault(){
				
					return null;
				
				}
				public String PAIS_RESIDENCIAComment(){
				
				    return "";
				
				}
				public String PAIS_RESIDENCIAPattern(){
				
					return "";
				
				}
				public String PAIS_RESIDENCIAOriginalDbColumnName(){
				
					return "PAIS_RESIDENCIA";
				
				}

				
			    public String DEPTO_RESIDENCIA;

				public String getDEPTO_RESIDENCIA () {
					return this.DEPTO_RESIDENCIA;
				}

				public Boolean DEPTO_RESIDENCIAIsNullable(){
				    return true;
				}
				public Boolean DEPTO_RESIDENCIAIsKey(){
				    return false;
				}
				public Integer DEPTO_RESIDENCIALength(){
				    return 5;
				}
				public Integer DEPTO_RESIDENCIAPrecision(){
				    return 0;
				}
				public String DEPTO_RESIDENCIADefault(){
				
					return null;
				
				}
				public String DEPTO_RESIDENCIAComment(){
				
				    return "";
				
				}
				public String DEPTO_RESIDENCIAPattern(){
				
					return "";
				
				}
				public String DEPTO_RESIDENCIAOriginalDbColumnName(){
				
					return "DEPTO_RESIDENCIA";
				
				}

				
			    public String MCPIO_RESIDENCIA;

				public String getMCPIO_RESIDENCIA () {
					return this.MCPIO_RESIDENCIA;
				}

				public Boolean MCPIO_RESIDENCIAIsNullable(){
				    return true;
				}
				public Boolean MCPIO_RESIDENCIAIsKey(){
				    return false;
				}
				public Integer MCPIO_RESIDENCIALength(){
				    return 10;
				}
				public Integer MCPIO_RESIDENCIAPrecision(){
				    return 0;
				}
				public String MCPIO_RESIDENCIADefault(){
				
					return null;
				
				}
				public String MCPIO_RESIDENCIAComment(){
				
				    return "";
				
				}
				public String MCPIO_RESIDENCIAPattern(){
				
					return "";
				
				}
				public String MCPIO_RESIDENCIAOriginalDbColumnName(){
				
					return "MCPIO_RESIDENCIA";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_VAC_CONSOLIDADOS_VAC_VacunasAplicadasMSPS.length) {
				if(length < 1024 && commonByteArray_VAC_CONSOLIDADOS_VAC_VacunasAplicadasMSPS.length == 0) {
   					commonByteArray_VAC_CONSOLIDADOS_VAC_VacunasAplicadasMSPS = new byte[1024];
				} else {
   					commonByteArray_VAC_CONSOLIDADOS_VAC_VacunasAplicadasMSPS = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_VAC_CONSOLIDADOS_VAC_VacunasAplicadasMSPS, 0, length);
			strReturn = new String(commonByteArray_VAC_CONSOLIDADOS_VAC_VacunasAplicadasMSPS, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_VAC_CONSOLIDADOS_VAC_VacunasAplicadasMSPS.length) {
				if(length < 1024 && commonByteArray_VAC_CONSOLIDADOS_VAC_VacunasAplicadasMSPS.length == 0) {
   					commonByteArray_VAC_CONSOLIDADOS_VAC_VacunasAplicadasMSPS = new byte[1024];
				} else {
   					commonByteArray_VAC_CONSOLIDADOS_VAC_VacunasAplicadasMSPS = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_VAC_CONSOLIDADOS_VAC_VacunasAplicadasMSPS, 0, length);
			strReturn = new String(commonByteArray_VAC_CONSOLIDADOS_VAC_VacunasAplicadasMSPS, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_VAC_CONSOLIDADOS_VAC_VacunasAplicadasMSPS) {

        	try {

        		int length = 0;
		
					this.TIPODOCVACUNADO = readString(dis);
					
					this.NUMDOCVACUNADO = readString(dis);
					
					this.NOMBRE1VACUNADO = readString(dis);
					
					this.NOMBRE2VACUNADO = readString(dis);
					
					this.APELLIDO1VACUNADO = readString(dis);
					
					this.APELLIDO2VACUNADO = readString(dis);
					
					this.SEXOVACUNADO = readString(dis);
					
					this.FECHANACVACUNADO = readString(dis);
					
					this.REGIMENVACUNADO = readString(dis);
					
					this.CODADMINVACUNADO = readString(dis);
					
					this.ETNIAVACUNADO = readString(dis);
					
						this.PESO_NACIMIENTO = (BigDecimal) dis.readObject();
					
						this.EDAD_GESTACIONAL = (BigDecimal) dis.readObject();
					
					this.PAIS_NACIMIENTO = readString(dis);
					
					this.DEPTO_NACIMIENTO = readString(dis);
					
					this.MCPIO_NACIMIENTO = readString(dis);
					
						this.DESPLAZADO = (BigDecimal) dis.readObject();
					
						this.DISCAPACITADO = (BigDecimal) dis.readObject();
					
						this.FALLECIDO = (BigDecimal) dis.readObject();
					
						this.ESTUIDA_ACTUAL = (BigDecimal) dis.readObject();
					
					this.MADRE_TDOCUMENTO = readString(dis);
					
					this.MADRE_DOCUMENTO = readString(dis);
					
					this.MADRE_NOMBRE1 = readString(dis);
					
					this.MADRE_NOMBRE2 = readString(dis);
					
					this.MADRE_APELLIDO1 = readString(dis);
					
					this.MADRE_APELLIDO2 = readString(dis);
					
					this.PAIS_RESIDENCIA = readString(dis);
					
					this.DEPTO_RESIDENCIA = readString(dis);
					
					this.MCPIO_RESIDENCIA = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_VAC_CONSOLIDADOS_VAC_VacunasAplicadasMSPS) {

        	try {

        		int length = 0;
		
					this.TIPODOCVACUNADO = readString(dis);
					
					this.NUMDOCVACUNADO = readString(dis);
					
					this.NOMBRE1VACUNADO = readString(dis);
					
					this.NOMBRE2VACUNADO = readString(dis);
					
					this.APELLIDO1VACUNADO = readString(dis);
					
					this.APELLIDO2VACUNADO = readString(dis);
					
					this.SEXOVACUNADO = readString(dis);
					
					this.FECHANACVACUNADO = readString(dis);
					
					this.REGIMENVACUNADO = readString(dis);
					
					this.CODADMINVACUNADO = readString(dis);
					
					this.ETNIAVACUNADO = readString(dis);
					
						this.PESO_NACIMIENTO = (BigDecimal) dis.readObject();
					
						this.EDAD_GESTACIONAL = (BigDecimal) dis.readObject();
					
					this.PAIS_NACIMIENTO = readString(dis);
					
					this.DEPTO_NACIMIENTO = readString(dis);
					
					this.MCPIO_NACIMIENTO = readString(dis);
					
						this.DESPLAZADO = (BigDecimal) dis.readObject();
					
						this.DISCAPACITADO = (BigDecimal) dis.readObject();
					
						this.FALLECIDO = (BigDecimal) dis.readObject();
					
						this.ESTUIDA_ACTUAL = (BigDecimal) dis.readObject();
					
					this.MADRE_TDOCUMENTO = readString(dis);
					
					this.MADRE_DOCUMENTO = readString(dis);
					
					this.MADRE_NOMBRE1 = readString(dis);
					
					this.MADRE_NOMBRE2 = readString(dis);
					
					this.MADRE_APELLIDO1 = readString(dis);
					
					this.MADRE_APELLIDO2 = readString(dis);
					
					this.PAIS_RESIDENCIA = readString(dis);
					
					this.DEPTO_RESIDENCIA = readString(dis);
					
					this.MCPIO_RESIDENCIA = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.TIPODOCVACUNADO,dos);
					
					// String
				
						writeString(this.NUMDOCVACUNADO,dos);
					
					// String
				
						writeString(this.NOMBRE1VACUNADO,dos);
					
					// String
				
						writeString(this.NOMBRE2VACUNADO,dos);
					
					// String
				
						writeString(this.APELLIDO1VACUNADO,dos);
					
					// String
				
						writeString(this.APELLIDO2VACUNADO,dos);
					
					// String
				
						writeString(this.SEXOVACUNADO,dos);
					
					// String
				
						writeString(this.FECHANACVACUNADO,dos);
					
					// String
				
						writeString(this.REGIMENVACUNADO,dos);
					
					// String
				
						writeString(this.CODADMINVACUNADO,dos);
					
					// String
				
						writeString(this.ETNIAVACUNADO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PESO_NACIMIENTO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.EDAD_GESTACIONAL);
					
					// String
				
						writeString(this.PAIS_NACIMIENTO,dos);
					
					// String
				
						writeString(this.DEPTO_NACIMIENTO,dos);
					
					// String
				
						writeString(this.MCPIO_NACIMIENTO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.DESPLAZADO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.DISCAPACITADO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FALLECIDO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ESTUIDA_ACTUAL);
					
					// String
				
						writeString(this.MADRE_TDOCUMENTO,dos);
					
					// String
				
						writeString(this.MADRE_DOCUMENTO,dos);
					
					// String
				
						writeString(this.MADRE_NOMBRE1,dos);
					
					// String
				
						writeString(this.MADRE_NOMBRE2,dos);
					
					// String
				
						writeString(this.MADRE_APELLIDO1,dos);
					
					// String
				
						writeString(this.MADRE_APELLIDO2,dos);
					
					// String
				
						writeString(this.PAIS_RESIDENCIA,dos);
					
					// String
				
						writeString(this.DEPTO_RESIDENCIA,dos);
					
					// String
				
						writeString(this.MCPIO_RESIDENCIA,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.TIPODOCVACUNADO,dos);
					
					// String
				
						writeString(this.NUMDOCVACUNADO,dos);
					
					// String
				
						writeString(this.NOMBRE1VACUNADO,dos);
					
					// String
				
						writeString(this.NOMBRE2VACUNADO,dos);
					
					// String
				
						writeString(this.APELLIDO1VACUNADO,dos);
					
					// String
				
						writeString(this.APELLIDO2VACUNADO,dos);
					
					// String
				
						writeString(this.SEXOVACUNADO,dos);
					
					// String
				
						writeString(this.FECHANACVACUNADO,dos);
					
					// String
				
						writeString(this.REGIMENVACUNADO,dos);
					
					// String
				
						writeString(this.CODADMINVACUNADO,dos);
					
					// String
				
						writeString(this.ETNIAVACUNADO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PESO_NACIMIENTO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.EDAD_GESTACIONAL);
					
					// String
				
						writeString(this.PAIS_NACIMIENTO,dos);
					
					// String
				
						writeString(this.DEPTO_NACIMIENTO,dos);
					
					// String
				
						writeString(this.MCPIO_NACIMIENTO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.DESPLAZADO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.DISCAPACITADO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.FALLECIDO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ESTUIDA_ACTUAL);
					
					// String
				
						writeString(this.MADRE_TDOCUMENTO,dos);
					
					// String
				
						writeString(this.MADRE_DOCUMENTO,dos);
					
					// String
				
						writeString(this.MADRE_NOMBRE1,dos);
					
					// String
				
						writeString(this.MADRE_NOMBRE2,dos);
					
					// String
				
						writeString(this.MADRE_APELLIDO1,dos);
					
					// String
				
						writeString(this.MADRE_APELLIDO2,dos);
					
					// String
				
						writeString(this.PAIS_RESIDENCIA,dos);
					
					// String
				
						writeString(this.DEPTO_RESIDENCIA,dos);
					
					// String
				
						writeString(this.MCPIO_RESIDENCIA,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("TIPODOCVACUNADO="+TIPODOCVACUNADO);
		sb.append(",NUMDOCVACUNADO="+NUMDOCVACUNADO);
		sb.append(",NOMBRE1VACUNADO="+NOMBRE1VACUNADO);
		sb.append(",NOMBRE2VACUNADO="+NOMBRE2VACUNADO);
		sb.append(",APELLIDO1VACUNADO="+APELLIDO1VACUNADO);
		sb.append(",APELLIDO2VACUNADO="+APELLIDO2VACUNADO);
		sb.append(",SEXOVACUNADO="+SEXOVACUNADO);
		sb.append(",FECHANACVACUNADO="+FECHANACVACUNADO);
		sb.append(",REGIMENVACUNADO="+REGIMENVACUNADO);
		sb.append(",CODADMINVACUNADO="+CODADMINVACUNADO);
		sb.append(",ETNIAVACUNADO="+ETNIAVACUNADO);
		sb.append(",PESO_NACIMIENTO="+String.valueOf(PESO_NACIMIENTO));
		sb.append(",EDAD_GESTACIONAL="+String.valueOf(EDAD_GESTACIONAL));
		sb.append(",PAIS_NACIMIENTO="+PAIS_NACIMIENTO);
		sb.append(",DEPTO_NACIMIENTO="+DEPTO_NACIMIENTO);
		sb.append(",MCPIO_NACIMIENTO="+MCPIO_NACIMIENTO);
		sb.append(",DESPLAZADO="+String.valueOf(DESPLAZADO));
		sb.append(",DISCAPACITADO="+String.valueOf(DISCAPACITADO));
		sb.append(",FALLECIDO="+String.valueOf(FALLECIDO));
		sb.append(",ESTUIDA_ACTUAL="+String.valueOf(ESTUIDA_ACTUAL));
		sb.append(",MADRE_TDOCUMENTO="+MADRE_TDOCUMENTO);
		sb.append(",MADRE_DOCUMENTO="+MADRE_DOCUMENTO);
		sb.append(",MADRE_NOMBRE1="+MADRE_NOMBRE1);
		sb.append(",MADRE_NOMBRE2="+MADRE_NOMBRE2);
		sb.append(",MADRE_APELLIDO1="+MADRE_APELLIDO1);
		sb.append(",MADRE_APELLIDO2="+MADRE_APELLIDO2);
		sb.append(",PAIS_RESIDENCIA="+PAIS_RESIDENCIA);
		sb.append(",DEPTO_RESIDENCIA="+DEPTO_RESIDENCIA);
		sb.append(",MCPIO_RESIDENCIA="+MCPIO_RESIDENCIA);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(copyOfout1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row7Struct implements routines.system.IPersistableRow<row7Struct> {
    final static byte[] commonByteArrayLock_VAC_CONSOLIDADOS_VAC_VacunasAplicadasMSPS = new byte[0];
    static byte[] commonByteArray_VAC_CONSOLIDADOS_VAC_VacunasAplicadasMSPS = new byte[0];

	
			    public BigDecimal ID;

				public BigDecimal getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return false;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return 0;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return "";
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public String TDOCUMENTO;

				public String getTDOCUMENTO () {
					return this.TDOCUMENTO;
				}

				public Boolean TDOCUMENTOIsNullable(){
				    return false;
				}
				public Boolean TDOCUMENTOIsKey(){
				    return false;
				}
				public Integer TDOCUMENTOLength(){
				    return 5;
				}
				public Integer TDOCUMENTOPrecision(){
				    return 0;
				}
				public String TDOCUMENTODefault(){
				
					return null;
				
				}
				public String TDOCUMENTOComment(){
				
				    return "";
				
				}
				public String TDOCUMENTOPattern(){
				
					return "";
				
				}
				public String TDOCUMENTOOriginalDbColumnName(){
				
					return "TDOCUMENTO";
				
				}

				
			    public String DOCUMENTO;

				public String getDOCUMENTO () {
					return this.DOCUMENTO;
				}

				public Boolean DOCUMENTOIsNullable(){
				    return false;
				}
				public Boolean DOCUMENTOIsKey(){
				    return false;
				}
				public Integer DOCUMENTOLength(){
				    return 40;
				}
				public Integer DOCUMENTOPrecision(){
				    return 0;
				}
				public String DOCUMENTODefault(){
				
					return null;
				
				}
				public String DOCUMENTOComment(){
				
				    return "";
				
				}
				public String DOCUMENTOPattern(){
				
					return "";
				
				}
				public String DOCUMENTOOriginalDbColumnName(){
				
					return "DOCUMENTO";
				
				}

				
			    public String NOMBRE1;

				public String getNOMBRE1 () {
					return this.NOMBRE1;
				}

				public Boolean NOMBRE1IsNullable(){
				    return true;
				}
				public Boolean NOMBRE1IsKey(){
				    return false;
				}
				public Integer NOMBRE1Length(){
				    return 100;
				}
				public Integer NOMBRE1Precision(){
				    return 0;
				}
				public String NOMBRE1Default(){
				
					return null;
				
				}
				public String NOMBRE1Comment(){
				
				    return "";
				
				}
				public String NOMBRE1Pattern(){
				
					return "";
				
				}
				public String NOMBRE1OriginalDbColumnName(){
				
					return "NOMBRE1";
				
				}

				
			    public String NOMBRE2;

				public String getNOMBRE2 () {
					return this.NOMBRE2;
				}

				public Boolean NOMBRE2IsNullable(){
				    return true;
				}
				public Boolean NOMBRE2IsKey(){
				    return false;
				}
				public Integer NOMBRE2Length(){
				    return 100;
				}
				public Integer NOMBRE2Precision(){
				    return 0;
				}
				public String NOMBRE2Default(){
				
					return null;
				
				}
				public String NOMBRE2Comment(){
				
				    return "";
				
				}
				public String NOMBRE2Pattern(){
				
					return "";
				
				}
				public String NOMBRE2OriginalDbColumnName(){
				
					return "NOMBRE2";
				
				}

				
			    public String APELLIDO1;

				public String getAPELLIDO1 () {
					return this.APELLIDO1;
				}

				public Boolean APELLIDO1IsNullable(){
				    return true;
				}
				public Boolean APELLIDO1IsKey(){
				    return false;
				}
				public Integer APELLIDO1Length(){
				    return 100;
				}
				public Integer APELLIDO1Precision(){
				    return 0;
				}
				public String APELLIDO1Default(){
				
					return null;
				
				}
				public String APELLIDO1Comment(){
				
				    return "";
				
				}
				public String APELLIDO1Pattern(){
				
					return "";
				
				}
				public String APELLIDO1OriginalDbColumnName(){
				
					return "APELLIDO1";
				
				}

				
			    public String APELLIDO2;

				public String getAPELLIDO2 () {
					return this.APELLIDO2;
				}

				public Boolean APELLIDO2IsNullable(){
				    return true;
				}
				public Boolean APELLIDO2IsKey(){
				    return false;
				}
				public Integer APELLIDO2Length(){
				    return 100;
				}
				public Integer APELLIDO2Precision(){
				    return 0;
				}
				public String APELLIDO2Default(){
				
					return null;
				
				}
				public String APELLIDO2Comment(){
				
				    return "";
				
				}
				public String APELLIDO2Pattern(){
				
					return "";
				
				}
				public String APELLIDO2OriginalDbColumnName(){
				
					return "APELLIDO2";
				
				}

				
			    public String SEXO;

				public String getSEXO () {
					return this.SEXO;
				}

				public Boolean SEXOIsNullable(){
				    return false;
				}
				public Boolean SEXOIsKey(){
				    return false;
				}
				public Integer SEXOLength(){
				    return 1;
				}
				public Integer SEXOPrecision(){
				    return 0;
				}
				public String SEXODefault(){
				
					return null;
				
				}
				public String SEXOComment(){
				
				    return "";
				
				}
				public String SEXOPattern(){
				
					return "";
				
				}
				public String SEXOOriginalDbColumnName(){
				
					return "SEXO";
				
				}

				
			    public String FNACIMIENTO;

				public String getFNACIMIENTO () {
					return this.FNACIMIENTO;
				}

				public Boolean FNACIMIENTOIsNullable(){
				    return true;
				}
				public Boolean FNACIMIENTOIsKey(){
				    return false;
				}
				public Integer FNACIMIENTOLength(){
				    return 10;
				}
				public Integer FNACIMIENTOPrecision(){
				    return 0;
				}
				public String FNACIMIENTODefault(){
				
					return null;
				
				}
				public String FNACIMIENTOComment(){
				
				    return "";
				
				}
				public String FNACIMIENTOPattern(){
				
					return "";
				
				}
				public String FNACIMIENTOOriginalDbColumnName(){
				
					return "FNACIMIENTO";
				
				}

				
			    public String CODREGIMEN;

				public String getCODREGIMEN () {
					return this.CODREGIMEN;
				}

				public Boolean CODREGIMENIsNullable(){
				    return true;
				}
				public Boolean CODREGIMENIsKey(){
				    return false;
				}
				public Integer CODREGIMENLength(){
				    return 1;
				}
				public Integer CODREGIMENPrecision(){
				    return 0;
				}
				public String CODREGIMENDefault(){
				
					return null;
				
				}
				public String CODREGIMENComment(){
				
				    return "";
				
				}
				public String CODREGIMENPattern(){
				
					return "";
				
				}
				public String CODREGIMENOriginalDbColumnName(){
				
					return "CODREGIMEN";
				
				}

				
			    public String CODASEGURADORA;

				public String getCODASEGURADORA () {
					return this.CODASEGURADORA;
				}

				public Boolean CODASEGURADORAIsNullable(){
				    return true;
				}
				public Boolean CODASEGURADORAIsKey(){
				    return false;
				}
				public Integer CODASEGURADORALength(){
				    return 6;
				}
				public Integer CODASEGURADORAPrecision(){
				    return 0;
				}
				public String CODASEGURADORADefault(){
				
					return null;
				
				}
				public String CODASEGURADORAComment(){
				
				    return "";
				
				}
				public String CODASEGURADORAPattern(){
				
					return "";
				
				}
				public String CODASEGURADORAOriginalDbColumnName(){
				
					return "CODASEGURADORA";
				
				}

				
			    public String ETNIA;

				public String getETNIA () {
					return this.ETNIA;
				}

				public Boolean ETNIAIsNullable(){
				    return true;
				}
				public Boolean ETNIAIsKey(){
				    return false;
				}
				public Integer ETNIALength(){
				    return 2;
				}
				public Integer ETNIAPrecision(){
				    return 0;
				}
				public String ETNIADefault(){
				
					return null;
				
				}
				public String ETNIAComment(){
				
				    return "";
				
				}
				public String ETNIAPattern(){
				
					return "";
				
				}
				public String ETNIAOriginalDbColumnName(){
				
					return "ETNIA";
				
				}

				
			    public BigDecimal PESO_NACIMIENTO;

				public BigDecimal getPESO_NACIMIENTO () {
					return this.PESO_NACIMIENTO;
				}

				public Boolean PESO_NACIMIENTOIsNullable(){
				    return true;
				}
				public Boolean PESO_NACIMIENTOIsKey(){
				    return false;
				}
				public Integer PESO_NACIMIENTOLength(){
				    return 0;
				}
				public Integer PESO_NACIMIENTOPrecision(){
				    return 0;
				}
				public String PESO_NACIMIENTODefault(){
				
					return "";
				
				}
				public String PESO_NACIMIENTOComment(){
				
				    return "";
				
				}
				public String PESO_NACIMIENTOPattern(){
				
					return "";
				
				}
				public String PESO_NACIMIENTOOriginalDbColumnName(){
				
					return "PESO_NACIMIENTO";
				
				}

				
			    public BigDecimal EDAD_GESTACIONAL;

				public BigDecimal getEDAD_GESTACIONAL () {
					return this.EDAD_GESTACIONAL;
				}

				public Boolean EDAD_GESTACIONALIsNullable(){
				    return true;
				}
				public Boolean EDAD_GESTACIONALIsKey(){
				    return false;
				}
				public Integer EDAD_GESTACIONALLength(){
				    return 1024;
				}
				public Integer EDAD_GESTACIONALPrecision(){
				    return 0;
				}
				public String EDAD_GESTACIONALDefault(){
				
					return null;
				
				}
				public String EDAD_GESTACIONALComment(){
				
				    return "";
				
				}
				public String EDAD_GESTACIONALPattern(){
				
					return "";
				
				}
				public String EDAD_GESTACIONALOriginalDbColumnName(){
				
					return "EDAD_GESTACIONAL";
				
				}

				
			    public String PAIS_NACIMIENTO;

				public String getPAIS_NACIMIENTO () {
					return this.PAIS_NACIMIENTO;
				}

				public Boolean PAIS_NACIMIENTOIsNullable(){
				    return true;
				}
				public Boolean PAIS_NACIMIENTOIsKey(){
				    return false;
				}
				public Integer PAIS_NACIMIENTOLength(){
				    return 2;
				}
				public Integer PAIS_NACIMIENTOPrecision(){
				    return 0;
				}
				public String PAIS_NACIMIENTODefault(){
				
					return null;
				
				}
				public String PAIS_NACIMIENTOComment(){
				
				    return "";
				
				}
				public String PAIS_NACIMIENTOPattern(){
				
					return "";
				
				}
				public String PAIS_NACIMIENTOOriginalDbColumnName(){
				
					return "PAIS_NACIMIENTO";
				
				}

				
			    public String DEPTO_NACIMIENTO;

				public String getDEPTO_NACIMIENTO () {
					return this.DEPTO_NACIMIENTO;
				}

				public Boolean DEPTO_NACIMIENTOIsNullable(){
				    return true;
				}
				public Boolean DEPTO_NACIMIENTOIsKey(){
				    return false;
				}
				public Integer DEPTO_NACIMIENTOLength(){
				    return 5;
				}
				public Integer DEPTO_NACIMIENTOPrecision(){
				    return 0;
				}
				public String DEPTO_NACIMIENTODefault(){
				
					return null;
				
				}
				public String DEPTO_NACIMIENTOComment(){
				
				    return "";
				
				}
				public String DEPTO_NACIMIENTOPattern(){
				
					return "";
				
				}
				public String DEPTO_NACIMIENTOOriginalDbColumnName(){
				
					return "DEPTO_NACIMIENTO";
				
				}

				
			    public String MCPIO_NACIMIENTO;

				public String getMCPIO_NACIMIENTO () {
					return this.MCPIO_NACIMIENTO;
				}

				public Boolean MCPIO_NACIMIENTOIsNullable(){
				    return true;
				}
				public Boolean MCPIO_NACIMIENTOIsKey(){
				    return false;
				}
				public Integer MCPIO_NACIMIENTOLength(){
				    return 10;
				}
				public Integer MCPIO_NACIMIENTOPrecision(){
				    return 0;
				}
				public String MCPIO_NACIMIENTODefault(){
				
					return null;
				
				}
				public String MCPIO_NACIMIENTOComment(){
				
				    return "";
				
				}
				public String MCPIO_NACIMIENTOPattern(){
				
					return "";
				
				}
				public String MCPIO_NACIMIENTOOriginalDbColumnName(){
				
					return "MCPIO_NACIMIENTO";
				
				}

				
			    public BigDecimal DESPLAZADO;

				public BigDecimal getDESPLAZADO () {
					return this.DESPLAZADO;
				}

				public Boolean DESPLAZADOIsNullable(){
				    return true;
				}
				public Boolean DESPLAZADOIsKey(){
				    return false;
				}
				public Integer DESPLAZADOLength(){
				    return 0;
				}
				public Integer DESPLAZADOPrecision(){
				    return 0;
				}
				public String DESPLAZADODefault(){
				
					return "";
				
				}
				public String DESPLAZADOComment(){
				
				    return "";
				
				}
				public String DESPLAZADOPattern(){
				
					return "";
				
				}
				public String DESPLAZADOOriginalDbColumnName(){
				
					return "DESPLAZADO";
				
				}

				
			    public BigDecimal DISCAPACITADO;

				public BigDecimal getDISCAPACITADO () {
					return this.DISCAPACITADO;
				}

				public Boolean DISCAPACITADOIsNullable(){
				    return true;
				}
				public Boolean DISCAPACITADOIsKey(){
				    return false;
				}
				public Integer DISCAPACITADOLength(){
				    return 0;
				}
				public Integer DISCAPACITADOPrecision(){
				    return 0;
				}
				public String DISCAPACITADODefault(){
				
					return "";
				
				}
				public String DISCAPACITADOComment(){
				
				    return "";
				
				}
				public String DISCAPACITADOPattern(){
				
					return "";
				
				}
				public String DISCAPACITADOOriginalDbColumnName(){
				
					return "DISCAPACITADO";
				
				}

				
			    public BigDecimal FALLECIDO;

				public BigDecimal getFALLECIDO () {
					return this.FALLECIDO;
				}

				public Boolean FALLECIDOIsNullable(){
				    return true;
				}
				public Boolean FALLECIDOIsKey(){
				    return false;
				}
				public Integer FALLECIDOLength(){
				    return 0;
				}
				public Integer FALLECIDOPrecision(){
				    return 0;
				}
				public String FALLECIDODefault(){
				
					return "";
				
				}
				public String FALLECIDOComment(){
				
				    return "";
				
				}
				public String FALLECIDOPattern(){
				
					return "";
				
				}
				public String FALLECIDOOriginalDbColumnName(){
				
					return "FALLECIDO";
				
				}

				
			    public BigDecimal ESTUDIA_ACTUAL;

				public BigDecimal getESTUDIA_ACTUAL () {
					return this.ESTUDIA_ACTUAL;
				}

				public Boolean ESTUDIA_ACTUALIsNullable(){
				    return true;
				}
				public Boolean ESTUDIA_ACTUALIsKey(){
				    return false;
				}
				public Integer ESTUDIA_ACTUALLength(){
				    return 0;
				}
				public Integer ESTUDIA_ACTUALPrecision(){
				    return null;
				}
				public String ESTUDIA_ACTUALDefault(){
				
					return "";
				
				}
				public String ESTUDIA_ACTUALComment(){
				
				    return "";
				
				}
				public String ESTUDIA_ACTUALPattern(){
				
					return "";
				
				}
				public String ESTUDIA_ACTUALOriginalDbColumnName(){
				
					return "ESTUDIA_ACTUAL";
				
				}

				
			    public String MADRE_TDOCUMENTO;

				public String getMADRE_TDOCUMENTO () {
					return this.MADRE_TDOCUMENTO;
				}

				public Boolean MADRE_TDOCUMENTOIsNullable(){
				    return true;
				}
				public Boolean MADRE_TDOCUMENTOIsKey(){
				    return false;
				}
				public Integer MADRE_TDOCUMENTOLength(){
				    return null;
				}
				public Integer MADRE_TDOCUMENTOPrecision(){
				    return null;
				}
				public String MADRE_TDOCUMENTODefault(){
				
					return null;
				
				}
				public String MADRE_TDOCUMENTOComment(){
				
				    return "";
				
				}
				public String MADRE_TDOCUMENTOPattern(){
				
					return "";
				
				}
				public String MADRE_TDOCUMENTOOriginalDbColumnName(){
				
					return "MADRE_TDOCUMENTO";
				
				}

				
			    public String MADRE_DOCUMENTO;

				public String getMADRE_DOCUMENTO () {
					return this.MADRE_DOCUMENTO;
				}

				public Boolean MADRE_DOCUMENTOIsNullable(){
				    return true;
				}
				public Boolean MADRE_DOCUMENTOIsKey(){
				    return false;
				}
				public Integer MADRE_DOCUMENTOLength(){
				    return null;
				}
				public Integer MADRE_DOCUMENTOPrecision(){
				    return null;
				}
				public String MADRE_DOCUMENTODefault(){
				
					return null;
				
				}
				public String MADRE_DOCUMENTOComment(){
				
				    return "";
				
				}
				public String MADRE_DOCUMENTOPattern(){
				
					return "";
				
				}
				public String MADRE_DOCUMENTOOriginalDbColumnName(){
				
					return "MADRE_DOCUMENTO";
				
				}

				
			    public String MADRE_NOMBRE1;

				public String getMADRE_NOMBRE1 () {
					return this.MADRE_NOMBRE1;
				}

				public Boolean MADRE_NOMBRE1IsNullable(){
				    return true;
				}
				public Boolean MADRE_NOMBRE1IsKey(){
				    return false;
				}
				public Integer MADRE_NOMBRE1Length(){
				    return null;
				}
				public Integer MADRE_NOMBRE1Precision(){
				    return null;
				}
				public String MADRE_NOMBRE1Default(){
				
					return null;
				
				}
				public String MADRE_NOMBRE1Comment(){
				
				    return "";
				
				}
				public String MADRE_NOMBRE1Pattern(){
				
					return "";
				
				}
				public String MADRE_NOMBRE1OriginalDbColumnName(){
				
					return "MADRE_NOMBRE1";
				
				}

				
			    public String MADRE_NOMBRE2;

				public String getMADRE_NOMBRE2 () {
					return this.MADRE_NOMBRE2;
				}

				public Boolean MADRE_NOMBRE2IsNullable(){
				    return true;
				}
				public Boolean MADRE_NOMBRE2IsKey(){
				    return false;
				}
				public Integer MADRE_NOMBRE2Length(){
				    return null;
				}
				public Integer MADRE_NOMBRE2Precision(){
				    return null;
				}
				public String MADRE_NOMBRE2Default(){
				
					return null;
				
				}
				public String MADRE_NOMBRE2Comment(){
				
				    return "";
				
				}
				public String MADRE_NOMBRE2Pattern(){
				
					return "";
				
				}
				public String MADRE_NOMBRE2OriginalDbColumnName(){
				
					return "MADRE_NOMBRE2";
				
				}

				
			    public String MADRE_APELLIDO1;

				public String getMADRE_APELLIDO1 () {
					return this.MADRE_APELLIDO1;
				}

				public Boolean MADRE_APELLIDO1IsNullable(){
				    return true;
				}
				public Boolean MADRE_APELLIDO1IsKey(){
				    return false;
				}
				public Integer MADRE_APELLIDO1Length(){
				    return null;
				}
				public Integer MADRE_APELLIDO1Precision(){
				    return null;
				}
				public String MADRE_APELLIDO1Default(){
				
					return null;
				
				}
				public String MADRE_APELLIDO1Comment(){
				
				    return "";
				
				}
				public String MADRE_APELLIDO1Pattern(){
				
					return "";
				
				}
				public String MADRE_APELLIDO1OriginalDbColumnName(){
				
					return "MADRE_APELLIDO1";
				
				}

				
			    public String MADRE_APELLIDO2;

				public String getMADRE_APELLIDO2 () {
					return this.MADRE_APELLIDO2;
				}

				public Boolean MADRE_APELLIDO2IsNullable(){
				    return true;
				}
				public Boolean MADRE_APELLIDO2IsKey(){
				    return false;
				}
				public Integer MADRE_APELLIDO2Length(){
				    return null;
				}
				public Integer MADRE_APELLIDO2Precision(){
				    return null;
				}
				public String MADRE_APELLIDO2Default(){
				
					return null;
				
				}
				public String MADRE_APELLIDO2Comment(){
				
				    return "";
				
				}
				public String MADRE_APELLIDO2Pattern(){
				
					return "";
				
				}
				public String MADRE_APELLIDO2OriginalDbColumnName(){
				
					return "MADRE_APELLIDO2";
				
				}

				
			    public String PAIS_RESIDENCIA;

				public String getPAIS_RESIDENCIA () {
					return this.PAIS_RESIDENCIA;
				}

				public Boolean PAIS_RESIDENCIAIsNullable(){
				    return true;
				}
				public Boolean PAIS_RESIDENCIAIsKey(){
				    return false;
				}
				public Integer PAIS_RESIDENCIALength(){
				    return 2;
				}
				public Integer PAIS_RESIDENCIAPrecision(){
				    return 0;
				}
				public String PAIS_RESIDENCIADefault(){
				
					return null;
				
				}
				public String PAIS_RESIDENCIAComment(){
				
				    return "";
				
				}
				public String PAIS_RESIDENCIAPattern(){
				
					return "";
				
				}
				public String PAIS_RESIDENCIAOriginalDbColumnName(){
				
					return "PAIS_RESIDENCIA";
				
				}

				
			    public String DEPTO_RESIDENCIA;

				public String getDEPTO_RESIDENCIA () {
					return this.DEPTO_RESIDENCIA;
				}

				public Boolean DEPTO_RESIDENCIAIsNullable(){
				    return true;
				}
				public Boolean DEPTO_RESIDENCIAIsKey(){
				    return false;
				}
				public Integer DEPTO_RESIDENCIALength(){
				    return 5;
				}
				public Integer DEPTO_RESIDENCIAPrecision(){
				    return 0;
				}
				public String DEPTO_RESIDENCIADefault(){
				
					return null;
				
				}
				public String DEPTO_RESIDENCIAComment(){
				
				    return "";
				
				}
				public String DEPTO_RESIDENCIAPattern(){
				
					return "";
				
				}
				public String DEPTO_RESIDENCIAOriginalDbColumnName(){
				
					return "DEPTO_RESIDENCIA";
				
				}

				
			    public String MCPIO_RESIDENCIA;

				public String getMCPIO_RESIDENCIA () {
					return this.MCPIO_RESIDENCIA;
				}

				public Boolean MCPIO_RESIDENCIAIsNullable(){
				    return true;
				}
				public Boolean MCPIO_RESIDENCIAIsKey(){
				    return false;
				}
				public Integer MCPIO_RESIDENCIALength(){
				    return 10;
				}
				public Integer MCPIO_RESIDENCIAPrecision(){
				    return 0;
				}
				public String MCPIO_RESIDENCIADefault(){
				
					return null;
				
				}
				public String MCPIO_RESIDENCIAComment(){
				
				    return "";
				
				}
				public String MCPIO_RESIDENCIAPattern(){
				
					return "";
				
				}
				public String MCPIO_RESIDENCIAOriginalDbColumnName(){
				
					return "MCPIO_RESIDENCIA";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_VAC_CONSOLIDADOS_VAC_VacunasAplicadasMSPS.length) {
				if(length < 1024 && commonByteArray_VAC_CONSOLIDADOS_VAC_VacunasAplicadasMSPS.length == 0) {
   					commonByteArray_VAC_CONSOLIDADOS_VAC_VacunasAplicadasMSPS = new byte[1024];
				} else {
   					commonByteArray_VAC_CONSOLIDADOS_VAC_VacunasAplicadasMSPS = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_VAC_CONSOLIDADOS_VAC_VacunasAplicadasMSPS, 0, length);
			strReturn = new String(commonByteArray_VAC_CONSOLIDADOS_VAC_VacunasAplicadasMSPS, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_VAC_CONSOLIDADOS_VAC_VacunasAplicadasMSPS.length) {
				if(length < 1024 && commonByteArray_VAC_CONSOLIDADOS_VAC_VacunasAplicadasMSPS.length == 0) {
   					commonByteArray_VAC_CONSOLIDADOS_VAC_VacunasAplicadasMSPS = new byte[1024];
				} else {
   					commonByteArray_VAC_CONSOLIDADOS_VAC_VacunasAplicadasMSPS = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_VAC_CONSOLIDADOS_VAC_VacunasAplicadasMSPS, 0, length);
			strReturn = new String(commonByteArray_VAC_CONSOLIDADOS_VAC_VacunasAplicadasMSPS, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_VAC_CONSOLIDADOS_VAC_VacunasAplicadasMSPS) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
					this.TDOCUMENTO = readString(dis);
					
					this.DOCUMENTO = readString(dis);
					
					this.NOMBRE1 = readString(dis);
					
					this.NOMBRE2 = readString(dis);
					
					this.APELLIDO1 = readString(dis);
					
					this.APELLIDO2 = readString(dis);
					
					this.SEXO = readString(dis);
					
					this.FNACIMIENTO = readString(dis);
					
					this.CODREGIMEN = readString(dis);
					
					this.CODASEGURADORA = readString(dis);
					
					this.ETNIA = readString(dis);
					
						this.PESO_NACIMIENTO = (BigDecimal) dis.readObject();
					
						this.EDAD_GESTACIONAL = (BigDecimal) dis.readObject();
					
					this.PAIS_NACIMIENTO = readString(dis);
					
					this.DEPTO_NACIMIENTO = readString(dis);
					
					this.MCPIO_NACIMIENTO = readString(dis);
					
						this.DESPLAZADO = (BigDecimal) dis.readObject();
					
						this.DISCAPACITADO = (BigDecimal) dis.readObject();
					
						this.FALLECIDO = (BigDecimal) dis.readObject();
					
						this.ESTUDIA_ACTUAL = (BigDecimal) dis.readObject();
					
					this.MADRE_TDOCUMENTO = readString(dis);
					
					this.MADRE_DOCUMENTO = readString(dis);
					
					this.MADRE_NOMBRE1 = readString(dis);
					
					this.MADRE_NOMBRE2 = readString(dis);
					
					this.MADRE_APELLIDO1 = readString(dis);
					
					this.MADRE_APELLIDO2 = readString(dis);
					
					this.PAIS_RESIDENCIA = readString(dis);
					
					this.DEPTO_RESIDENCIA = readString(dis);
					
					this.MCPIO_RESIDENCIA = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_VAC_CONSOLIDADOS_VAC_VacunasAplicadasMSPS) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
					this.TDOCUMENTO = readString(dis);
					
					this.DOCUMENTO = readString(dis);
					
					this.NOMBRE1 = readString(dis);
					
					this.NOMBRE2 = readString(dis);
					
					this.APELLIDO1 = readString(dis);
					
					this.APELLIDO2 = readString(dis);
					
					this.SEXO = readString(dis);
					
					this.FNACIMIENTO = readString(dis);
					
					this.CODREGIMEN = readString(dis);
					
					this.CODASEGURADORA = readString(dis);
					
					this.ETNIA = readString(dis);
					
						this.PESO_NACIMIENTO = (BigDecimal) dis.readObject();
					
						this.EDAD_GESTACIONAL = (BigDecimal) dis.readObject();
					
					this.PAIS_NACIMIENTO = readString(dis);
					
					this.DEPTO_NACIMIENTO = readString(dis);
					
					this.MCPIO_NACIMIENTO = readString(dis);
					
						this.DESPLAZADO = (BigDecimal) dis.readObject();
					
						this.DISCAPACITADO = (BigDecimal) dis.readObject();
					
						this.FALLECIDO = (BigDecimal) dis.readObject();
					
						this.ESTUDIA_ACTUAL = (BigDecimal) dis.readObject();
					
					this.MADRE_TDOCUMENTO = readString(dis);
					
					this.MADRE_DOCUMENTO = readString(dis);
					
					this.MADRE_NOMBRE1 = readString(dis);
					
					this.MADRE_NOMBRE2 = readString(dis);
					
					this.MADRE_APELLIDO1 = readString(dis);
					
					this.MADRE_APELLIDO2 = readString(dis);
					
					this.PAIS_RESIDENCIA = readString(dis);
					
					this.DEPTO_RESIDENCIA = readString(dis);
					
					this.MCPIO_RESIDENCIA = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.ID);
					
					// String
				
						writeString(this.TDOCUMENTO,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// String
				
						writeString(this.NOMBRE1,dos);
					
					// String
				
						writeString(this.NOMBRE2,dos);
					
					// String
				
						writeString(this.APELLIDO1,dos);
					
					// String
				
						writeString(this.APELLIDO2,dos);
					
					// String
				
						writeString(this.SEXO,dos);
					
					// String
				
						writeString(this.FNACIMIENTO,dos);
					
					// String
				
						writeString(this.CODREGIMEN,dos);
					
					// String
				
						writeString(this.CODASEGURADORA,dos);
					
					// String
				
						writeString(this.ETNIA,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PESO_NACIMIENTO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.EDAD_GESTACIONAL);
					
					// String
				
						writeString(this.PAIS_NACIMIENTO,dos);
					
					// String
				
						writeString(this.DEPTO_NACIMIENTO,dos);
					
					// String
				
						writeString(this.MCPIO_NACIMIENTO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.DESPLAZADO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.DISCAPACITADO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FALLECIDO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ESTUDIA_ACTUAL);
					
					// String
				
						writeString(this.MADRE_TDOCUMENTO,dos);
					
					// String
				
						writeString(this.MADRE_DOCUMENTO,dos);
					
					// String
				
						writeString(this.MADRE_NOMBRE1,dos);
					
					// String
				
						writeString(this.MADRE_NOMBRE2,dos);
					
					// String
				
						writeString(this.MADRE_APELLIDO1,dos);
					
					// String
				
						writeString(this.MADRE_APELLIDO2,dos);
					
					// String
				
						writeString(this.PAIS_RESIDENCIA,dos);
					
					// String
				
						writeString(this.DEPTO_RESIDENCIA,dos);
					
					// String
				
						writeString(this.MCPIO_RESIDENCIA,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ID);
					
					// String
				
						writeString(this.TDOCUMENTO,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// String
				
						writeString(this.NOMBRE1,dos);
					
					// String
				
						writeString(this.NOMBRE2,dos);
					
					// String
				
						writeString(this.APELLIDO1,dos);
					
					// String
				
						writeString(this.APELLIDO2,dos);
					
					// String
				
						writeString(this.SEXO,dos);
					
					// String
				
						writeString(this.FNACIMIENTO,dos);
					
					// String
				
						writeString(this.CODREGIMEN,dos);
					
					// String
				
						writeString(this.CODASEGURADORA,dos);
					
					// String
				
						writeString(this.ETNIA,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PESO_NACIMIENTO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.EDAD_GESTACIONAL);
					
					// String
				
						writeString(this.PAIS_NACIMIENTO,dos);
					
					// String
				
						writeString(this.DEPTO_NACIMIENTO,dos);
					
					// String
				
						writeString(this.MCPIO_NACIMIENTO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.DESPLAZADO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.DISCAPACITADO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.FALLECIDO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ESTUDIA_ACTUAL);
					
					// String
				
						writeString(this.MADRE_TDOCUMENTO,dos);
					
					// String
				
						writeString(this.MADRE_DOCUMENTO,dos);
					
					// String
				
						writeString(this.MADRE_NOMBRE1,dos);
					
					// String
				
						writeString(this.MADRE_NOMBRE2,dos);
					
					// String
				
						writeString(this.MADRE_APELLIDO1,dos);
					
					// String
				
						writeString(this.MADRE_APELLIDO2,dos);
					
					// String
				
						writeString(this.PAIS_RESIDENCIA,dos);
					
					// String
				
						writeString(this.DEPTO_RESIDENCIA,dos);
					
					// String
				
						writeString(this.MCPIO_RESIDENCIA,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",TDOCUMENTO="+TDOCUMENTO);
		sb.append(",DOCUMENTO="+DOCUMENTO);
		sb.append(",NOMBRE1="+NOMBRE1);
		sb.append(",NOMBRE2="+NOMBRE2);
		sb.append(",APELLIDO1="+APELLIDO1);
		sb.append(",APELLIDO2="+APELLIDO2);
		sb.append(",SEXO="+SEXO);
		sb.append(",FNACIMIENTO="+FNACIMIENTO);
		sb.append(",CODREGIMEN="+CODREGIMEN);
		sb.append(",CODASEGURADORA="+CODASEGURADORA);
		sb.append(",ETNIA="+ETNIA);
		sb.append(",PESO_NACIMIENTO="+String.valueOf(PESO_NACIMIENTO));
		sb.append(",EDAD_GESTACIONAL="+String.valueOf(EDAD_GESTACIONAL));
		sb.append(",PAIS_NACIMIENTO="+PAIS_NACIMIENTO);
		sb.append(",DEPTO_NACIMIENTO="+DEPTO_NACIMIENTO);
		sb.append(",MCPIO_NACIMIENTO="+MCPIO_NACIMIENTO);
		sb.append(",DESPLAZADO="+String.valueOf(DESPLAZADO));
		sb.append(",DISCAPACITADO="+String.valueOf(DISCAPACITADO));
		sb.append(",FALLECIDO="+String.valueOf(FALLECIDO));
		sb.append(",ESTUDIA_ACTUAL="+String.valueOf(ESTUDIA_ACTUAL));
		sb.append(",MADRE_TDOCUMENTO="+MADRE_TDOCUMENTO);
		sb.append(",MADRE_DOCUMENTO="+MADRE_DOCUMENTO);
		sb.append(",MADRE_NOMBRE1="+MADRE_NOMBRE1);
		sb.append(",MADRE_NOMBRE2="+MADRE_NOMBRE2);
		sb.append(",MADRE_APELLIDO1="+MADRE_APELLIDO1);
		sb.append(",MADRE_APELLIDO2="+MADRE_APELLIDO2);
		sb.append(",PAIS_RESIDENCIA="+PAIS_RESIDENCIA);
		sb.append(",DEPTO_RESIDENCIA="+DEPTO_RESIDENCIA);
		sb.append(",MCPIO_RESIDENCIA="+MCPIO_RESIDENCIA);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row7Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class personasStruct implements routines.system.IPersistableRow<personasStruct> {
    final static byte[] commonByteArrayLock_VAC_CONSOLIDADOS_VAC_VacunasAplicadasMSPS = new byte[0];
    static byte[] commonByteArray_VAC_CONSOLIDADOS_VAC_VacunasAplicadasMSPS = new byte[0];

	
			    public BigDecimal ID;

				public BigDecimal getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return false;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return 0;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return "";
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public String TDOCUMENTO;

				public String getTDOCUMENTO () {
					return this.TDOCUMENTO;
				}

				public Boolean TDOCUMENTOIsNullable(){
				    return false;
				}
				public Boolean TDOCUMENTOIsKey(){
				    return false;
				}
				public Integer TDOCUMENTOLength(){
				    return 5;
				}
				public Integer TDOCUMENTOPrecision(){
				    return 0;
				}
				public String TDOCUMENTODefault(){
				
					return null;
				
				}
				public String TDOCUMENTOComment(){
				
				    return "";
				
				}
				public String TDOCUMENTOPattern(){
				
					return "";
				
				}
				public String TDOCUMENTOOriginalDbColumnName(){
				
					return "TDOCUMENTO";
				
				}

				
			    public String DOCUMENTO;

				public String getDOCUMENTO () {
					return this.DOCUMENTO;
				}

				public Boolean DOCUMENTOIsNullable(){
				    return false;
				}
				public Boolean DOCUMENTOIsKey(){
				    return false;
				}
				public Integer DOCUMENTOLength(){
				    return 40;
				}
				public Integer DOCUMENTOPrecision(){
				    return 0;
				}
				public String DOCUMENTODefault(){
				
					return null;
				
				}
				public String DOCUMENTOComment(){
				
				    return "";
				
				}
				public String DOCUMENTOPattern(){
				
					return "";
				
				}
				public String DOCUMENTOOriginalDbColumnName(){
				
					return "DOCUMENTO";
				
				}

				
			    public String NOMBRE1;

				public String getNOMBRE1 () {
					return this.NOMBRE1;
				}

				public Boolean NOMBRE1IsNullable(){
				    return true;
				}
				public Boolean NOMBRE1IsKey(){
				    return false;
				}
				public Integer NOMBRE1Length(){
				    return 100;
				}
				public Integer NOMBRE1Precision(){
				    return 0;
				}
				public String NOMBRE1Default(){
				
					return null;
				
				}
				public String NOMBRE1Comment(){
				
				    return "";
				
				}
				public String NOMBRE1Pattern(){
				
					return "";
				
				}
				public String NOMBRE1OriginalDbColumnName(){
				
					return "NOMBRE1";
				
				}

				
			    public String NOMBRE2;

				public String getNOMBRE2 () {
					return this.NOMBRE2;
				}

				public Boolean NOMBRE2IsNullable(){
				    return true;
				}
				public Boolean NOMBRE2IsKey(){
				    return false;
				}
				public Integer NOMBRE2Length(){
				    return 100;
				}
				public Integer NOMBRE2Precision(){
				    return 0;
				}
				public String NOMBRE2Default(){
				
					return null;
				
				}
				public String NOMBRE2Comment(){
				
				    return "";
				
				}
				public String NOMBRE2Pattern(){
				
					return "";
				
				}
				public String NOMBRE2OriginalDbColumnName(){
				
					return "NOMBRE2";
				
				}

				
			    public String APELLIDO1;

				public String getAPELLIDO1 () {
					return this.APELLIDO1;
				}

				public Boolean APELLIDO1IsNullable(){
				    return true;
				}
				public Boolean APELLIDO1IsKey(){
				    return false;
				}
				public Integer APELLIDO1Length(){
				    return 100;
				}
				public Integer APELLIDO1Precision(){
				    return 0;
				}
				public String APELLIDO1Default(){
				
					return null;
				
				}
				public String APELLIDO1Comment(){
				
				    return "";
				
				}
				public String APELLIDO1Pattern(){
				
					return "";
				
				}
				public String APELLIDO1OriginalDbColumnName(){
				
					return "APELLIDO1";
				
				}

				
			    public String APELLIDO2;

				public String getAPELLIDO2 () {
					return this.APELLIDO2;
				}

				public Boolean APELLIDO2IsNullable(){
				    return true;
				}
				public Boolean APELLIDO2IsKey(){
				    return false;
				}
				public Integer APELLIDO2Length(){
				    return 100;
				}
				public Integer APELLIDO2Precision(){
				    return 0;
				}
				public String APELLIDO2Default(){
				
					return null;
				
				}
				public String APELLIDO2Comment(){
				
				    return "";
				
				}
				public String APELLIDO2Pattern(){
				
					return "";
				
				}
				public String APELLIDO2OriginalDbColumnName(){
				
					return "APELLIDO2";
				
				}

				
			    public String SEXO;

				public String getSEXO () {
					return this.SEXO;
				}

				public Boolean SEXOIsNullable(){
				    return false;
				}
				public Boolean SEXOIsKey(){
				    return false;
				}
				public Integer SEXOLength(){
				    return 1;
				}
				public Integer SEXOPrecision(){
				    return 0;
				}
				public String SEXODefault(){
				
					return null;
				
				}
				public String SEXOComment(){
				
				    return "";
				
				}
				public String SEXOPattern(){
				
					return "";
				
				}
				public String SEXOOriginalDbColumnName(){
				
					return "SEXO";
				
				}

				
			    public String FNACIMIENTO;

				public String getFNACIMIENTO () {
					return this.FNACIMIENTO;
				}

				public Boolean FNACIMIENTOIsNullable(){
				    return true;
				}
				public Boolean FNACIMIENTOIsKey(){
				    return false;
				}
				public Integer FNACIMIENTOLength(){
				    return 10;
				}
				public Integer FNACIMIENTOPrecision(){
				    return 0;
				}
				public String FNACIMIENTODefault(){
				
					return null;
				
				}
				public String FNACIMIENTOComment(){
				
				    return "";
				
				}
				public String FNACIMIENTOPattern(){
				
					return "";
				
				}
				public String FNACIMIENTOOriginalDbColumnName(){
				
					return "FNACIMIENTO";
				
				}

				
			    public String CODREGIMEN;

				public String getCODREGIMEN () {
					return this.CODREGIMEN;
				}

				public Boolean CODREGIMENIsNullable(){
				    return true;
				}
				public Boolean CODREGIMENIsKey(){
				    return false;
				}
				public Integer CODREGIMENLength(){
				    return 1;
				}
				public Integer CODREGIMENPrecision(){
				    return 0;
				}
				public String CODREGIMENDefault(){
				
					return null;
				
				}
				public String CODREGIMENComment(){
				
				    return "";
				
				}
				public String CODREGIMENPattern(){
				
					return "";
				
				}
				public String CODREGIMENOriginalDbColumnName(){
				
					return "CODREGIMEN";
				
				}

				
			    public String CODASEGURADORA;

				public String getCODASEGURADORA () {
					return this.CODASEGURADORA;
				}

				public Boolean CODASEGURADORAIsNullable(){
				    return true;
				}
				public Boolean CODASEGURADORAIsKey(){
				    return false;
				}
				public Integer CODASEGURADORALength(){
				    return 6;
				}
				public Integer CODASEGURADORAPrecision(){
				    return 0;
				}
				public String CODASEGURADORADefault(){
				
					return null;
				
				}
				public String CODASEGURADORAComment(){
				
				    return "";
				
				}
				public String CODASEGURADORAPattern(){
				
					return "";
				
				}
				public String CODASEGURADORAOriginalDbColumnName(){
				
					return "CODASEGURADORA";
				
				}

				
			    public String ETNIA;

				public String getETNIA () {
					return this.ETNIA;
				}

				public Boolean ETNIAIsNullable(){
				    return true;
				}
				public Boolean ETNIAIsKey(){
				    return false;
				}
				public Integer ETNIALength(){
				    return 2;
				}
				public Integer ETNIAPrecision(){
				    return 0;
				}
				public String ETNIADefault(){
				
					return null;
				
				}
				public String ETNIAComment(){
				
				    return "";
				
				}
				public String ETNIAPattern(){
				
					return "";
				
				}
				public String ETNIAOriginalDbColumnName(){
				
					return "ETNIA";
				
				}

				
			    public BigDecimal PESO_NACIMIENTO;

				public BigDecimal getPESO_NACIMIENTO () {
					return this.PESO_NACIMIENTO;
				}

				public Boolean PESO_NACIMIENTOIsNullable(){
				    return true;
				}
				public Boolean PESO_NACIMIENTOIsKey(){
				    return false;
				}
				public Integer PESO_NACIMIENTOLength(){
				    return 0;
				}
				public Integer PESO_NACIMIENTOPrecision(){
				    return 0;
				}
				public String PESO_NACIMIENTODefault(){
				
					return "";
				
				}
				public String PESO_NACIMIENTOComment(){
				
				    return "";
				
				}
				public String PESO_NACIMIENTOPattern(){
				
					return "";
				
				}
				public String PESO_NACIMIENTOOriginalDbColumnName(){
				
					return "PESO_NACIMIENTO";
				
				}

				
			    public BigDecimal EDAD_GESTACIONAL;

				public BigDecimal getEDAD_GESTACIONAL () {
					return this.EDAD_GESTACIONAL;
				}

				public Boolean EDAD_GESTACIONALIsNullable(){
				    return true;
				}
				public Boolean EDAD_GESTACIONALIsKey(){
				    return false;
				}
				public Integer EDAD_GESTACIONALLength(){
				    return 1024;
				}
				public Integer EDAD_GESTACIONALPrecision(){
				    return 0;
				}
				public String EDAD_GESTACIONALDefault(){
				
					return null;
				
				}
				public String EDAD_GESTACIONALComment(){
				
				    return "";
				
				}
				public String EDAD_GESTACIONALPattern(){
				
					return "";
				
				}
				public String EDAD_GESTACIONALOriginalDbColumnName(){
				
					return "EDAD_GESTACIONAL";
				
				}

				
			    public String PAIS_NACIMIENTO;

				public String getPAIS_NACIMIENTO () {
					return this.PAIS_NACIMIENTO;
				}

				public Boolean PAIS_NACIMIENTOIsNullable(){
				    return true;
				}
				public Boolean PAIS_NACIMIENTOIsKey(){
				    return false;
				}
				public Integer PAIS_NACIMIENTOLength(){
				    return 2;
				}
				public Integer PAIS_NACIMIENTOPrecision(){
				    return 0;
				}
				public String PAIS_NACIMIENTODefault(){
				
					return null;
				
				}
				public String PAIS_NACIMIENTOComment(){
				
				    return "";
				
				}
				public String PAIS_NACIMIENTOPattern(){
				
					return "";
				
				}
				public String PAIS_NACIMIENTOOriginalDbColumnName(){
				
					return "PAIS_NACIMIENTO";
				
				}

				
			    public String DEPTO_NACIMIENTO;

				public String getDEPTO_NACIMIENTO () {
					return this.DEPTO_NACIMIENTO;
				}

				public Boolean DEPTO_NACIMIENTOIsNullable(){
				    return true;
				}
				public Boolean DEPTO_NACIMIENTOIsKey(){
				    return false;
				}
				public Integer DEPTO_NACIMIENTOLength(){
				    return 5;
				}
				public Integer DEPTO_NACIMIENTOPrecision(){
				    return 0;
				}
				public String DEPTO_NACIMIENTODefault(){
				
					return null;
				
				}
				public String DEPTO_NACIMIENTOComment(){
				
				    return "";
				
				}
				public String DEPTO_NACIMIENTOPattern(){
				
					return "";
				
				}
				public String DEPTO_NACIMIENTOOriginalDbColumnName(){
				
					return "DEPTO_NACIMIENTO";
				
				}

				
			    public String MCPIO_NACIMIENTO;

				public String getMCPIO_NACIMIENTO () {
					return this.MCPIO_NACIMIENTO;
				}

				public Boolean MCPIO_NACIMIENTOIsNullable(){
				    return true;
				}
				public Boolean MCPIO_NACIMIENTOIsKey(){
				    return false;
				}
				public Integer MCPIO_NACIMIENTOLength(){
				    return 10;
				}
				public Integer MCPIO_NACIMIENTOPrecision(){
				    return 0;
				}
				public String MCPIO_NACIMIENTODefault(){
				
					return null;
				
				}
				public String MCPIO_NACIMIENTOComment(){
				
				    return "";
				
				}
				public String MCPIO_NACIMIENTOPattern(){
				
					return "";
				
				}
				public String MCPIO_NACIMIENTOOriginalDbColumnName(){
				
					return "MCPIO_NACIMIENTO";
				
				}

				
			    public BigDecimal DESPLAZADO;

				public BigDecimal getDESPLAZADO () {
					return this.DESPLAZADO;
				}

				public Boolean DESPLAZADOIsNullable(){
				    return true;
				}
				public Boolean DESPLAZADOIsKey(){
				    return false;
				}
				public Integer DESPLAZADOLength(){
				    return 0;
				}
				public Integer DESPLAZADOPrecision(){
				    return 0;
				}
				public String DESPLAZADODefault(){
				
					return "";
				
				}
				public String DESPLAZADOComment(){
				
				    return "";
				
				}
				public String DESPLAZADOPattern(){
				
					return "";
				
				}
				public String DESPLAZADOOriginalDbColumnName(){
				
					return "DESPLAZADO";
				
				}

				
			    public BigDecimal DISCAPACITADO;

				public BigDecimal getDISCAPACITADO () {
					return this.DISCAPACITADO;
				}

				public Boolean DISCAPACITADOIsNullable(){
				    return true;
				}
				public Boolean DISCAPACITADOIsKey(){
				    return false;
				}
				public Integer DISCAPACITADOLength(){
				    return 0;
				}
				public Integer DISCAPACITADOPrecision(){
				    return 0;
				}
				public String DISCAPACITADODefault(){
				
					return "";
				
				}
				public String DISCAPACITADOComment(){
				
				    return "";
				
				}
				public String DISCAPACITADOPattern(){
				
					return "";
				
				}
				public String DISCAPACITADOOriginalDbColumnName(){
				
					return "DISCAPACITADO";
				
				}

				
			    public BigDecimal FALLECIDO;

				public BigDecimal getFALLECIDO () {
					return this.FALLECIDO;
				}

				public Boolean FALLECIDOIsNullable(){
				    return true;
				}
				public Boolean FALLECIDOIsKey(){
				    return false;
				}
				public Integer FALLECIDOLength(){
				    return 0;
				}
				public Integer FALLECIDOPrecision(){
				    return 0;
				}
				public String FALLECIDODefault(){
				
					return "";
				
				}
				public String FALLECIDOComment(){
				
				    return "";
				
				}
				public String FALLECIDOPattern(){
				
					return "";
				
				}
				public String FALLECIDOOriginalDbColumnName(){
				
					return "FALLECIDO";
				
				}

				
			    public BigDecimal ESTUDIA_ACTUAL;

				public BigDecimal getESTUDIA_ACTUAL () {
					return this.ESTUDIA_ACTUAL;
				}

				public Boolean ESTUDIA_ACTUALIsNullable(){
				    return true;
				}
				public Boolean ESTUDIA_ACTUALIsKey(){
				    return false;
				}
				public Integer ESTUDIA_ACTUALLength(){
				    return 0;
				}
				public Integer ESTUDIA_ACTUALPrecision(){
				    return null;
				}
				public String ESTUDIA_ACTUALDefault(){
				
					return "";
				
				}
				public String ESTUDIA_ACTUALComment(){
				
				    return "";
				
				}
				public String ESTUDIA_ACTUALPattern(){
				
					return "";
				
				}
				public String ESTUDIA_ACTUALOriginalDbColumnName(){
				
					return "ESTUDIA_ACTUAL";
				
				}

				
			    public String MADRE_TDOCUMENTO;

				public String getMADRE_TDOCUMENTO () {
					return this.MADRE_TDOCUMENTO;
				}

				public Boolean MADRE_TDOCUMENTOIsNullable(){
				    return true;
				}
				public Boolean MADRE_TDOCUMENTOIsKey(){
				    return false;
				}
				public Integer MADRE_TDOCUMENTOLength(){
				    return null;
				}
				public Integer MADRE_TDOCUMENTOPrecision(){
				    return null;
				}
				public String MADRE_TDOCUMENTODefault(){
				
					return null;
				
				}
				public String MADRE_TDOCUMENTOComment(){
				
				    return "";
				
				}
				public String MADRE_TDOCUMENTOPattern(){
				
					return "";
				
				}
				public String MADRE_TDOCUMENTOOriginalDbColumnName(){
				
					return "MADRE_TDOCUMENTO";
				
				}

				
			    public String MADRE_DOCUMENTO;

				public String getMADRE_DOCUMENTO () {
					return this.MADRE_DOCUMENTO;
				}

				public Boolean MADRE_DOCUMENTOIsNullable(){
				    return true;
				}
				public Boolean MADRE_DOCUMENTOIsKey(){
				    return false;
				}
				public Integer MADRE_DOCUMENTOLength(){
				    return null;
				}
				public Integer MADRE_DOCUMENTOPrecision(){
				    return null;
				}
				public String MADRE_DOCUMENTODefault(){
				
					return null;
				
				}
				public String MADRE_DOCUMENTOComment(){
				
				    return "";
				
				}
				public String MADRE_DOCUMENTOPattern(){
				
					return "";
				
				}
				public String MADRE_DOCUMENTOOriginalDbColumnName(){
				
					return "MADRE_DOCUMENTO";
				
				}

				
			    public String MADRE_NOMBRE1;

				public String getMADRE_NOMBRE1 () {
					return this.MADRE_NOMBRE1;
				}

				public Boolean MADRE_NOMBRE1IsNullable(){
				    return true;
				}
				public Boolean MADRE_NOMBRE1IsKey(){
				    return false;
				}
				public Integer MADRE_NOMBRE1Length(){
				    return null;
				}
				public Integer MADRE_NOMBRE1Precision(){
				    return null;
				}
				public String MADRE_NOMBRE1Default(){
				
					return null;
				
				}
				public String MADRE_NOMBRE1Comment(){
				
				    return "";
				
				}
				public String MADRE_NOMBRE1Pattern(){
				
					return "";
				
				}
				public String MADRE_NOMBRE1OriginalDbColumnName(){
				
					return "MADRE_NOMBRE1";
				
				}

				
			    public String MADRE_NOMBRE2;

				public String getMADRE_NOMBRE2 () {
					return this.MADRE_NOMBRE2;
				}

				public Boolean MADRE_NOMBRE2IsNullable(){
				    return true;
				}
				public Boolean MADRE_NOMBRE2IsKey(){
				    return false;
				}
				public Integer MADRE_NOMBRE2Length(){
				    return null;
				}
				public Integer MADRE_NOMBRE2Precision(){
				    return null;
				}
				public String MADRE_NOMBRE2Default(){
				
					return null;
				
				}
				public String MADRE_NOMBRE2Comment(){
				
				    return "";
				
				}
				public String MADRE_NOMBRE2Pattern(){
				
					return "";
				
				}
				public String MADRE_NOMBRE2OriginalDbColumnName(){
				
					return "MADRE_NOMBRE2";
				
				}

				
			    public String MADRE_APELLIDO1;

				public String getMADRE_APELLIDO1 () {
					return this.MADRE_APELLIDO1;
				}

				public Boolean MADRE_APELLIDO1IsNullable(){
				    return true;
				}
				public Boolean MADRE_APELLIDO1IsKey(){
				    return false;
				}
				public Integer MADRE_APELLIDO1Length(){
				    return null;
				}
				public Integer MADRE_APELLIDO1Precision(){
				    return null;
				}
				public String MADRE_APELLIDO1Default(){
				
					return null;
				
				}
				public String MADRE_APELLIDO1Comment(){
				
				    return "";
				
				}
				public String MADRE_APELLIDO1Pattern(){
				
					return "";
				
				}
				public String MADRE_APELLIDO1OriginalDbColumnName(){
				
					return "MADRE_APELLIDO1";
				
				}

				
			    public String MADRE_APELLIDO2;

				public String getMADRE_APELLIDO2 () {
					return this.MADRE_APELLIDO2;
				}

				public Boolean MADRE_APELLIDO2IsNullable(){
				    return true;
				}
				public Boolean MADRE_APELLIDO2IsKey(){
				    return false;
				}
				public Integer MADRE_APELLIDO2Length(){
				    return null;
				}
				public Integer MADRE_APELLIDO2Precision(){
				    return null;
				}
				public String MADRE_APELLIDO2Default(){
				
					return null;
				
				}
				public String MADRE_APELLIDO2Comment(){
				
				    return "";
				
				}
				public String MADRE_APELLIDO2Pattern(){
				
					return "";
				
				}
				public String MADRE_APELLIDO2OriginalDbColumnName(){
				
					return "MADRE_APELLIDO2";
				
				}

				
			    public String PAIS_RESIDENCIA;

				public String getPAIS_RESIDENCIA () {
					return this.PAIS_RESIDENCIA;
				}

				public Boolean PAIS_RESIDENCIAIsNullable(){
				    return true;
				}
				public Boolean PAIS_RESIDENCIAIsKey(){
				    return false;
				}
				public Integer PAIS_RESIDENCIALength(){
				    return 2;
				}
				public Integer PAIS_RESIDENCIAPrecision(){
				    return 0;
				}
				public String PAIS_RESIDENCIADefault(){
				
					return null;
				
				}
				public String PAIS_RESIDENCIAComment(){
				
				    return "";
				
				}
				public String PAIS_RESIDENCIAPattern(){
				
					return "";
				
				}
				public String PAIS_RESIDENCIAOriginalDbColumnName(){
				
					return "PAIS_RESIDENCIA";
				
				}

				
			    public String DEPTO_RESIDENCIA;

				public String getDEPTO_RESIDENCIA () {
					return this.DEPTO_RESIDENCIA;
				}

				public Boolean DEPTO_RESIDENCIAIsNullable(){
				    return true;
				}
				public Boolean DEPTO_RESIDENCIAIsKey(){
				    return false;
				}
				public Integer DEPTO_RESIDENCIALength(){
				    return 5;
				}
				public Integer DEPTO_RESIDENCIAPrecision(){
				    return 0;
				}
				public String DEPTO_RESIDENCIADefault(){
				
					return null;
				
				}
				public String DEPTO_RESIDENCIAComment(){
				
				    return "";
				
				}
				public String DEPTO_RESIDENCIAPattern(){
				
					return "";
				
				}
				public String DEPTO_RESIDENCIAOriginalDbColumnName(){
				
					return "DEPTO_RESIDENCIA";
				
				}

				
			    public String MCPIO_RESIDENCIA;

				public String getMCPIO_RESIDENCIA () {
					return this.MCPIO_RESIDENCIA;
				}

				public Boolean MCPIO_RESIDENCIAIsNullable(){
				    return true;
				}
				public Boolean MCPIO_RESIDENCIAIsKey(){
				    return false;
				}
				public Integer MCPIO_RESIDENCIALength(){
				    return 10;
				}
				public Integer MCPIO_RESIDENCIAPrecision(){
				    return 0;
				}
				public String MCPIO_RESIDENCIADefault(){
				
					return null;
				
				}
				public String MCPIO_RESIDENCIAComment(){
				
				    return "";
				
				}
				public String MCPIO_RESIDENCIAPattern(){
				
					return "";
				
				}
				public String MCPIO_RESIDENCIAOriginalDbColumnName(){
				
					return "MCPIO_RESIDENCIA";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_VAC_CONSOLIDADOS_VAC_VacunasAplicadasMSPS.length) {
				if(length < 1024 && commonByteArray_VAC_CONSOLIDADOS_VAC_VacunasAplicadasMSPS.length == 0) {
   					commonByteArray_VAC_CONSOLIDADOS_VAC_VacunasAplicadasMSPS = new byte[1024];
				} else {
   					commonByteArray_VAC_CONSOLIDADOS_VAC_VacunasAplicadasMSPS = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_VAC_CONSOLIDADOS_VAC_VacunasAplicadasMSPS, 0, length);
			strReturn = new String(commonByteArray_VAC_CONSOLIDADOS_VAC_VacunasAplicadasMSPS, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_VAC_CONSOLIDADOS_VAC_VacunasAplicadasMSPS.length) {
				if(length < 1024 && commonByteArray_VAC_CONSOLIDADOS_VAC_VacunasAplicadasMSPS.length == 0) {
   					commonByteArray_VAC_CONSOLIDADOS_VAC_VacunasAplicadasMSPS = new byte[1024];
				} else {
   					commonByteArray_VAC_CONSOLIDADOS_VAC_VacunasAplicadasMSPS = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_VAC_CONSOLIDADOS_VAC_VacunasAplicadasMSPS, 0, length);
			strReturn = new String(commonByteArray_VAC_CONSOLIDADOS_VAC_VacunasAplicadasMSPS, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_VAC_CONSOLIDADOS_VAC_VacunasAplicadasMSPS) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
					this.TDOCUMENTO = readString(dis);
					
					this.DOCUMENTO = readString(dis);
					
					this.NOMBRE1 = readString(dis);
					
					this.NOMBRE2 = readString(dis);
					
					this.APELLIDO1 = readString(dis);
					
					this.APELLIDO2 = readString(dis);
					
					this.SEXO = readString(dis);
					
					this.FNACIMIENTO = readString(dis);
					
					this.CODREGIMEN = readString(dis);
					
					this.CODASEGURADORA = readString(dis);
					
					this.ETNIA = readString(dis);
					
						this.PESO_NACIMIENTO = (BigDecimal) dis.readObject();
					
						this.EDAD_GESTACIONAL = (BigDecimal) dis.readObject();
					
					this.PAIS_NACIMIENTO = readString(dis);
					
					this.DEPTO_NACIMIENTO = readString(dis);
					
					this.MCPIO_NACIMIENTO = readString(dis);
					
						this.DESPLAZADO = (BigDecimal) dis.readObject();
					
						this.DISCAPACITADO = (BigDecimal) dis.readObject();
					
						this.FALLECIDO = (BigDecimal) dis.readObject();
					
						this.ESTUDIA_ACTUAL = (BigDecimal) dis.readObject();
					
					this.MADRE_TDOCUMENTO = readString(dis);
					
					this.MADRE_DOCUMENTO = readString(dis);
					
					this.MADRE_NOMBRE1 = readString(dis);
					
					this.MADRE_NOMBRE2 = readString(dis);
					
					this.MADRE_APELLIDO1 = readString(dis);
					
					this.MADRE_APELLIDO2 = readString(dis);
					
					this.PAIS_RESIDENCIA = readString(dis);
					
					this.DEPTO_RESIDENCIA = readString(dis);
					
					this.MCPIO_RESIDENCIA = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_VAC_CONSOLIDADOS_VAC_VacunasAplicadasMSPS) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
					this.TDOCUMENTO = readString(dis);
					
					this.DOCUMENTO = readString(dis);
					
					this.NOMBRE1 = readString(dis);
					
					this.NOMBRE2 = readString(dis);
					
					this.APELLIDO1 = readString(dis);
					
					this.APELLIDO2 = readString(dis);
					
					this.SEXO = readString(dis);
					
					this.FNACIMIENTO = readString(dis);
					
					this.CODREGIMEN = readString(dis);
					
					this.CODASEGURADORA = readString(dis);
					
					this.ETNIA = readString(dis);
					
						this.PESO_NACIMIENTO = (BigDecimal) dis.readObject();
					
						this.EDAD_GESTACIONAL = (BigDecimal) dis.readObject();
					
					this.PAIS_NACIMIENTO = readString(dis);
					
					this.DEPTO_NACIMIENTO = readString(dis);
					
					this.MCPIO_NACIMIENTO = readString(dis);
					
						this.DESPLAZADO = (BigDecimal) dis.readObject();
					
						this.DISCAPACITADO = (BigDecimal) dis.readObject();
					
						this.FALLECIDO = (BigDecimal) dis.readObject();
					
						this.ESTUDIA_ACTUAL = (BigDecimal) dis.readObject();
					
					this.MADRE_TDOCUMENTO = readString(dis);
					
					this.MADRE_DOCUMENTO = readString(dis);
					
					this.MADRE_NOMBRE1 = readString(dis);
					
					this.MADRE_NOMBRE2 = readString(dis);
					
					this.MADRE_APELLIDO1 = readString(dis);
					
					this.MADRE_APELLIDO2 = readString(dis);
					
					this.PAIS_RESIDENCIA = readString(dis);
					
					this.DEPTO_RESIDENCIA = readString(dis);
					
					this.MCPIO_RESIDENCIA = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.ID);
					
					// String
				
						writeString(this.TDOCUMENTO,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// String
				
						writeString(this.NOMBRE1,dos);
					
					// String
				
						writeString(this.NOMBRE2,dos);
					
					// String
				
						writeString(this.APELLIDO1,dos);
					
					// String
				
						writeString(this.APELLIDO2,dos);
					
					// String
				
						writeString(this.SEXO,dos);
					
					// String
				
						writeString(this.FNACIMIENTO,dos);
					
					// String
				
						writeString(this.CODREGIMEN,dos);
					
					// String
				
						writeString(this.CODASEGURADORA,dos);
					
					// String
				
						writeString(this.ETNIA,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PESO_NACIMIENTO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.EDAD_GESTACIONAL);
					
					// String
				
						writeString(this.PAIS_NACIMIENTO,dos);
					
					// String
				
						writeString(this.DEPTO_NACIMIENTO,dos);
					
					// String
				
						writeString(this.MCPIO_NACIMIENTO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.DESPLAZADO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.DISCAPACITADO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FALLECIDO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ESTUDIA_ACTUAL);
					
					// String
				
						writeString(this.MADRE_TDOCUMENTO,dos);
					
					// String
				
						writeString(this.MADRE_DOCUMENTO,dos);
					
					// String
				
						writeString(this.MADRE_NOMBRE1,dos);
					
					// String
				
						writeString(this.MADRE_NOMBRE2,dos);
					
					// String
				
						writeString(this.MADRE_APELLIDO1,dos);
					
					// String
				
						writeString(this.MADRE_APELLIDO2,dos);
					
					// String
				
						writeString(this.PAIS_RESIDENCIA,dos);
					
					// String
				
						writeString(this.DEPTO_RESIDENCIA,dos);
					
					// String
				
						writeString(this.MCPIO_RESIDENCIA,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ID);
					
					// String
				
						writeString(this.TDOCUMENTO,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// String
				
						writeString(this.NOMBRE1,dos);
					
					// String
				
						writeString(this.NOMBRE2,dos);
					
					// String
				
						writeString(this.APELLIDO1,dos);
					
					// String
				
						writeString(this.APELLIDO2,dos);
					
					// String
				
						writeString(this.SEXO,dos);
					
					// String
				
						writeString(this.FNACIMIENTO,dos);
					
					// String
				
						writeString(this.CODREGIMEN,dos);
					
					// String
				
						writeString(this.CODASEGURADORA,dos);
					
					// String
				
						writeString(this.ETNIA,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PESO_NACIMIENTO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.EDAD_GESTACIONAL);
					
					// String
				
						writeString(this.PAIS_NACIMIENTO,dos);
					
					// String
				
						writeString(this.DEPTO_NACIMIENTO,dos);
					
					// String
				
						writeString(this.MCPIO_NACIMIENTO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.DESPLAZADO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.DISCAPACITADO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.FALLECIDO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ESTUDIA_ACTUAL);
					
					// String
				
						writeString(this.MADRE_TDOCUMENTO,dos);
					
					// String
				
						writeString(this.MADRE_DOCUMENTO,dos);
					
					// String
				
						writeString(this.MADRE_NOMBRE1,dos);
					
					// String
				
						writeString(this.MADRE_NOMBRE2,dos);
					
					// String
				
						writeString(this.MADRE_APELLIDO1,dos);
					
					// String
				
						writeString(this.MADRE_APELLIDO2,dos);
					
					// String
				
						writeString(this.PAIS_RESIDENCIA,dos);
					
					// String
				
						writeString(this.DEPTO_RESIDENCIA,dos);
					
					// String
				
						writeString(this.MCPIO_RESIDENCIA,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",TDOCUMENTO="+TDOCUMENTO);
		sb.append(",DOCUMENTO="+DOCUMENTO);
		sb.append(",NOMBRE1="+NOMBRE1);
		sb.append(",NOMBRE2="+NOMBRE2);
		sb.append(",APELLIDO1="+APELLIDO1);
		sb.append(",APELLIDO2="+APELLIDO2);
		sb.append(",SEXO="+SEXO);
		sb.append(",FNACIMIENTO="+FNACIMIENTO);
		sb.append(",CODREGIMEN="+CODREGIMEN);
		sb.append(",CODASEGURADORA="+CODASEGURADORA);
		sb.append(",ETNIA="+ETNIA);
		sb.append(",PESO_NACIMIENTO="+String.valueOf(PESO_NACIMIENTO));
		sb.append(",EDAD_GESTACIONAL="+String.valueOf(EDAD_GESTACIONAL));
		sb.append(",PAIS_NACIMIENTO="+PAIS_NACIMIENTO);
		sb.append(",DEPTO_NACIMIENTO="+DEPTO_NACIMIENTO);
		sb.append(",MCPIO_NACIMIENTO="+MCPIO_NACIMIENTO);
		sb.append(",DESPLAZADO="+String.valueOf(DESPLAZADO));
		sb.append(",DISCAPACITADO="+String.valueOf(DISCAPACITADO));
		sb.append(",FALLECIDO="+String.valueOf(FALLECIDO));
		sb.append(",ESTUDIA_ACTUAL="+String.valueOf(ESTUDIA_ACTUAL));
		sb.append(",MADRE_TDOCUMENTO="+MADRE_TDOCUMENTO);
		sb.append(",MADRE_DOCUMENTO="+MADRE_DOCUMENTO);
		sb.append(",MADRE_NOMBRE1="+MADRE_NOMBRE1);
		sb.append(",MADRE_NOMBRE2="+MADRE_NOMBRE2);
		sb.append(",MADRE_APELLIDO1="+MADRE_APELLIDO1);
		sb.append(",MADRE_APELLIDO2="+MADRE_APELLIDO2);
		sb.append(",PAIS_RESIDENCIA="+PAIS_RESIDENCIA);
		sb.append(",DEPTO_RESIDENCIA="+DEPTO_RESIDENCIA);
		sb.append(",MCPIO_RESIDENCIA="+MCPIO_RESIDENCIA);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(personasStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class vacunacionStruct implements routines.system.IPersistableRow<vacunacionStruct> {
    final static byte[] commonByteArrayLock_VAC_CONSOLIDADOS_VAC_VacunasAplicadasMSPS = new byte[0];
    static byte[] commonByteArray_VAC_CONSOLIDADOS_VAC_VacunasAplicadasMSPS = new byte[0];

	
			    public String TDOCUMENTO;

				public String getTDOCUMENTO () {
					return this.TDOCUMENTO;
				}

				public Boolean TDOCUMENTOIsNullable(){
				    return false;
				}
				public Boolean TDOCUMENTOIsKey(){
				    return false;
				}
				public Integer TDOCUMENTOLength(){
				    return 5;
				}
				public Integer TDOCUMENTOPrecision(){
				    return 0;
				}
				public String TDOCUMENTODefault(){
				
					return null;
				
				}
				public String TDOCUMENTOComment(){
				
				    return "";
				
				}
				public String TDOCUMENTOPattern(){
				
					return "";
				
				}
				public String TDOCUMENTOOriginalDbColumnName(){
				
					return "TDOCUMENTO";
				
				}

				
			    public String DOCUMENTO;

				public String getDOCUMENTO () {
					return this.DOCUMENTO;
				}

				public Boolean DOCUMENTOIsNullable(){
				    return false;
				}
				public Boolean DOCUMENTOIsKey(){
				    return false;
				}
				public Integer DOCUMENTOLength(){
				    return 40;
				}
				public Integer DOCUMENTOPrecision(){
				    return 0;
				}
				public String DOCUMENTODefault(){
				
					return null;
				
				}
				public String DOCUMENTOComment(){
				
				    return "";
				
				}
				public String DOCUMENTOPattern(){
				
					return "";
				
				}
				public String DOCUMENTOOriginalDbColumnName(){
				
					return "DOCUMENTO";
				
				}

				
			    public String CODIGO_VACUNA;

				public String getCODIGO_VACUNA () {
					return this.CODIGO_VACUNA;
				}

				public Boolean CODIGO_VACUNAIsNullable(){
				    return true;
				}
				public Boolean CODIGO_VACUNAIsKey(){
				    return false;
				}
				public Integer CODIGO_VACUNALength(){
				    return 20;
				}
				public Integer CODIGO_VACUNAPrecision(){
				    return 0;
				}
				public String CODIGO_VACUNADefault(){
				
					return null;
				
				}
				public String CODIGO_VACUNAComment(){
				
				    return "";
				
				}
				public String CODIGO_VACUNAPattern(){
				
					return "";
				
				}
				public String CODIGO_VACUNAOriginalDbColumnName(){
				
					return "CODIGO_VACUNA";
				
				}

				
			    public String ENTIDAD_VACUNADORA;

				public String getENTIDAD_VACUNADORA () {
					return this.ENTIDAD_VACUNADORA;
				}

				public Boolean ENTIDAD_VACUNADORAIsNullable(){
				    return false;
				}
				public Boolean ENTIDAD_VACUNADORAIsKey(){
				    return false;
				}
				public Integer ENTIDAD_VACUNADORALength(){
				    return 2000;
				}
				public Integer ENTIDAD_VACUNADORAPrecision(){
				    return 0;
				}
				public String ENTIDAD_VACUNADORADefault(){
				
					return null;
				
				}
				public String ENTIDAD_VACUNADORAComment(){
				
				    return "";
				
				}
				public String ENTIDAD_VACUNADORAPattern(){
				
					return "";
				
				}
				public String ENTIDAD_VACUNADORAOriginalDbColumnName(){
				
					return "ENTIDAD_VACUNADORA";
				
				}

				
			    public String LOTE_VACUNA;

				public String getLOTE_VACUNA () {
					return this.LOTE_VACUNA;
				}

				public Boolean LOTE_VACUNAIsNullable(){
				    return false;
				}
				public Boolean LOTE_VACUNAIsKey(){
				    return false;
				}
				public Integer LOTE_VACUNALength(){
				    return 1024;
				}
				public Integer LOTE_VACUNAPrecision(){
				    return 0;
				}
				public String LOTE_VACUNADefault(){
				
					return null;
				
				}
				public String LOTE_VACUNAComment(){
				
				    return "";
				
				}
				public String LOTE_VACUNAPattern(){
				
					return "";
				
				}
				public String LOTE_VACUNAOriginalDbColumnName(){
				
					return "LOTE_VACUNA";
				
				}

				
			    public String FVACUNACION;

				public String getFVACUNACION () {
					return this.FVACUNACION;
				}

				public Boolean FVACUNACIONIsNullable(){
				    return true;
				}
				public Boolean FVACUNACIONIsKey(){
				    return false;
				}
				public Integer FVACUNACIONLength(){
				    return 10;
				}
				public Integer FVACUNACIONPrecision(){
				    return 0;
				}
				public String FVACUNACIONDefault(){
				
					return null;
				
				}
				public String FVACUNACIONComment(){
				
				    return "";
				
				}
				public String FVACUNACIONPattern(){
				
					return "";
				
				}
				public String FVACUNACIONOriginalDbColumnName(){
				
					return "FVACUNACION";
				
				}

				
			    public String VACUNADOR;

				public String getVACUNADOR () {
					return this.VACUNADOR;
				}

				public Boolean VACUNADORIsNullable(){
				    return true;
				}
				public Boolean VACUNADORIsKey(){
				    return false;
				}
				public Integer VACUNADORLength(){
				    return 403;
				}
				public Integer VACUNADORPrecision(){
				    return 0;
				}
				public String VACUNADORDefault(){
				
					return null;
				
				}
				public String VACUNADORComment(){
				
				    return "";
				
				}
				public String VACUNADORPattern(){
				
					return "";
				
				}
				public String VACUNADOROriginalDbColumnName(){
				
					return "VACUNADOR";
				
				}

				
			    public BigDecimal TESQUEMA;

				public BigDecimal getTESQUEMA () {
					return this.TESQUEMA;
				}

				public Boolean TESQUEMAIsNullable(){
				    return true;
				}
				public Boolean TESQUEMAIsKey(){
				    return false;
				}
				public Integer TESQUEMALength(){
				    return 0;
				}
				public Integer TESQUEMAPrecision(){
				    return 0;
				}
				public String TESQUEMADefault(){
				
					return "";
				
				}
				public String TESQUEMAComment(){
				
				    return "";
				
				}
				public String TESQUEMAPattern(){
				
					return "";
				
				}
				public String TESQUEMAOriginalDbColumnName(){
				
					return "TESQUEMA";
				
				}

				
			    public String TIPO_DOSIS;

				public String getTIPO_DOSIS () {
					return this.TIPO_DOSIS;
				}

				public Boolean TIPO_DOSISIsNullable(){
				    return true;
				}
				public Boolean TIPO_DOSISIsKey(){
				    return false;
				}
				public Integer TIPO_DOSISLength(){
				    return 20;
				}
				public Integer TIPO_DOSISPrecision(){
				    return 0;
				}
				public String TIPO_DOSISDefault(){
				
					return null;
				
				}
				public String TIPO_DOSISComment(){
				
				    return "";
				
				}
				public String TIPO_DOSISPattern(){
				
					return "";
				
				}
				public String TIPO_DOSISOriginalDbColumnName(){
				
					return "TIPO_DOSIS";
				
				}

				
			    public BigDecimal NUMERO_DOSIS;

				public BigDecimal getNUMERO_DOSIS () {
					return this.NUMERO_DOSIS;
				}

				public Boolean NUMERO_DOSISIsNullable(){
				    return true;
				}
				public Boolean NUMERO_DOSISIsKey(){
				    return false;
				}
				public Integer NUMERO_DOSISLength(){
				    return 0;
				}
				public Integer NUMERO_DOSISPrecision(){
				    return 0;
				}
				public String NUMERO_DOSISDefault(){
				
					return "";
				
				}
				public String NUMERO_DOSISComment(){
				
				    return "";
				
				}
				public String NUMERO_DOSISPattern(){
				
					return "";
				
				}
				public String NUMERO_DOSISOriginalDbColumnName(){
				
					return "NUMERO_DOSIS";
				
				}

				
			    public String ACTUALIZACION;

				public String getACTUALIZACION () {
					return this.ACTUALIZACION;
				}

				public Boolean ACTUALIZACIONIsNullable(){
				    return true;
				}
				public Boolean ACTUALIZACIONIsKey(){
				    return false;
				}
				public Integer ACTUALIZACIONLength(){
				    return 1;
				}
				public Integer ACTUALIZACIONPrecision(){
				    return 0;
				}
				public String ACTUALIZACIONDefault(){
				
					return null;
				
				}
				public String ACTUALIZACIONComment(){
				
				    return "";
				
				}
				public String ACTUALIZACIONPattern(){
				
					return "";
				
				}
				public String ACTUALIZACIONOriginalDbColumnName(){
				
					return "ACTUALIZACION";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_VAC_CONSOLIDADOS_VAC_VacunasAplicadasMSPS.length) {
				if(length < 1024 && commonByteArray_VAC_CONSOLIDADOS_VAC_VacunasAplicadasMSPS.length == 0) {
   					commonByteArray_VAC_CONSOLIDADOS_VAC_VacunasAplicadasMSPS = new byte[1024];
				} else {
   					commonByteArray_VAC_CONSOLIDADOS_VAC_VacunasAplicadasMSPS = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_VAC_CONSOLIDADOS_VAC_VacunasAplicadasMSPS, 0, length);
			strReturn = new String(commonByteArray_VAC_CONSOLIDADOS_VAC_VacunasAplicadasMSPS, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_VAC_CONSOLIDADOS_VAC_VacunasAplicadasMSPS.length) {
				if(length < 1024 && commonByteArray_VAC_CONSOLIDADOS_VAC_VacunasAplicadasMSPS.length == 0) {
   					commonByteArray_VAC_CONSOLIDADOS_VAC_VacunasAplicadasMSPS = new byte[1024];
				} else {
   					commonByteArray_VAC_CONSOLIDADOS_VAC_VacunasAplicadasMSPS = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_VAC_CONSOLIDADOS_VAC_VacunasAplicadasMSPS, 0, length);
			strReturn = new String(commonByteArray_VAC_CONSOLIDADOS_VAC_VacunasAplicadasMSPS, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_VAC_CONSOLIDADOS_VAC_VacunasAplicadasMSPS) {

        	try {

        		int length = 0;
		
					this.TDOCUMENTO = readString(dis);
					
					this.DOCUMENTO = readString(dis);
					
					this.CODIGO_VACUNA = readString(dis);
					
					this.ENTIDAD_VACUNADORA = readString(dis);
					
					this.LOTE_VACUNA = readString(dis);
					
					this.FVACUNACION = readString(dis);
					
					this.VACUNADOR = readString(dis);
					
						this.TESQUEMA = (BigDecimal) dis.readObject();
					
					this.TIPO_DOSIS = readString(dis);
					
						this.NUMERO_DOSIS = (BigDecimal) dis.readObject();
					
					this.ACTUALIZACION = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_VAC_CONSOLIDADOS_VAC_VacunasAplicadasMSPS) {

        	try {

        		int length = 0;
		
					this.TDOCUMENTO = readString(dis);
					
					this.DOCUMENTO = readString(dis);
					
					this.CODIGO_VACUNA = readString(dis);
					
					this.ENTIDAD_VACUNADORA = readString(dis);
					
					this.LOTE_VACUNA = readString(dis);
					
					this.FVACUNACION = readString(dis);
					
					this.VACUNADOR = readString(dis);
					
						this.TESQUEMA = (BigDecimal) dis.readObject();
					
					this.TIPO_DOSIS = readString(dis);
					
						this.NUMERO_DOSIS = (BigDecimal) dis.readObject();
					
					this.ACTUALIZACION = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.TDOCUMENTO,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// String
				
						writeString(this.CODIGO_VACUNA,dos);
					
					// String
				
						writeString(this.ENTIDAD_VACUNADORA,dos);
					
					// String
				
						writeString(this.LOTE_VACUNA,dos);
					
					// String
				
						writeString(this.FVACUNACION,dos);
					
					// String
				
						writeString(this.VACUNADOR,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TESQUEMA);
					
					// String
				
						writeString(this.TIPO_DOSIS,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.NUMERO_DOSIS);
					
					// String
				
						writeString(this.ACTUALIZACION,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.TDOCUMENTO,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// String
				
						writeString(this.CODIGO_VACUNA,dos);
					
					// String
				
						writeString(this.ENTIDAD_VACUNADORA,dos);
					
					// String
				
						writeString(this.LOTE_VACUNA,dos);
					
					// String
				
						writeString(this.FVACUNACION,dos);
					
					// String
				
						writeString(this.VACUNADOR,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TESQUEMA);
					
					// String
				
						writeString(this.TIPO_DOSIS,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.NUMERO_DOSIS);
					
					// String
				
						writeString(this.ACTUALIZACION,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("TDOCUMENTO="+TDOCUMENTO);
		sb.append(",DOCUMENTO="+DOCUMENTO);
		sb.append(",CODIGO_VACUNA="+CODIGO_VACUNA);
		sb.append(",ENTIDAD_VACUNADORA="+ENTIDAD_VACUNADORA);
		sb.append(",LOTE_VACUNA="+LOTE_VACUNA);
		sb.append(",FVACUNACION="+FVACUNACION);
		sb.append(",VACUNADOR="+VACUNADOR);
		sb.append(",TESQUEMA="+String.valueOf(TESQUEMA));
		sb.append(",TIPO_DOSIS="+TIPO_DOSIS);
		sb.append(",NUMERO_DOSIS="+String.valueOf(NUMERO_DOSIS));
		sb.append(",ACTUALIZACION="+ACTUALIZACION);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(vacunacionStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row6Struct implements routines.system.IPersistableRow<row6Struct> {
    final static byte[] commonByteArrayLock_VAC_CONSOLIDADOS_VAC_VacunasAplicadasMSPS = new byte[0];
    static byte[] commonByteArray_VAC_CONSOLIDADOS_VAC_VacunasAplicadasMSPS = new byte[0];

	
			    public BigDecimal ID;

				public BigDecimal getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return false;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return null;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return "";
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public String TDOCUMENTO;

				public String getTDOCUMENTO () {
					return this.TDOCUMENTO;
				}

				public Boolean TDOCUMENTOIsNullable(){
				    return false;
				}
				public Boolean TDOCUMENTOIsKey(){
				    return false;
				}
				public Integer TDOCUMENTOLength(){
				    return null;
				}
				public Integer TDOCUMENTOPrecision(){
				    return null;
				}
				public String TDOCUMENTODefault(){
				
					return null;
				
				}
				public String TDOCUMENTOComment(){
				
				    return "";
				
				}
				public String TDOCUMENTOPattern(){
				
					return "";
				
				}
				public String TDOCUMENTOOriginalDbColumnName(){
				
					return "TDOCUMENTO";
				
				}

				
			    public String DOCUMENTO;

				public String getDOCUMENTO () {
					return this.DOCUMENTO;
				}

				public Boolean DOCUMENTOIsNullable(){
				    return false;
				}
				public Boolean DOCUMENTOIsKey(){
				    return false;
				}
				public Integer DOCUMENTOLength(){
				    return null;
				}
				public Integer DOCUMENTOPrecision(){
				    return null;
				}
				public String DOCUMENTODefault(){
				
					return null;
				
				}
				public String DOCUMENTOComment(){
				
				    return "";
				
				}
				public String DOCUMENTOPattern(){
				
					return "";
				
				}
				public String DOCUMENTOOriginalDbColumnName(){
				
					return "DOCUMENTO";
				
				}

				
			    public String NOMBRE1;

				public String getNOMBRE1 () {
					return this.NOMBRE1;
				}

				public Boolean NOMBRE1IsNullable(){
				    return true;
				}
				public Boolean NOMBRE1IsKey(){
				    return false;
				}
				public Integer NOMBRE1Length(){
				    return null;
				}
				public Integer NOMBRE1Precision(){
				    return null;
				}
				public String NOMBRE1Default(){
				
					return null;
				
				}
				public String NOMBRE1Comment(){
				
				    return "";
				
				}
				public String NOMBRE1Pattern(){
				
					return "";
				
				}
				public String NOMBRE1OriginalDbColumnName(){
				
					return "NOMBRE1";
				
				}

				
			    public String NOMBRE2;

				public String getNOMBRE2 () {
					return this.NOMBRE2;
				}

				public Boolean NOMBRE2IsNullable(){
				    return true;
				}
				public Boolean NOMBRE2IsKey(){
				    return false;
				}
				public Integer NOMBRE2Length(){
				    return null;
				}
				public Integer NOMBRE2Precision(){
				    return null;
				}
				public String NOMBRE2Default(){
				
					return null;
				
				}
				public String NOMBRE2Comment(){
				
				    return "";
				
				}
				public String NOMBRE2Pattern(){
				
					return "";
				
				}
				public String NOMBRE2OriginalDbColumnName(){
				
					return "NOMBRE2";
				
				}

				
			    public String APELLIDO1;

				public String getAPELLIDO1 () {
					return this.APELLIDO1;
				}

				public Boolean APELLIDO1IsNullable(){
				    return true;
				}
				public Boolean APELLIDO1IsKey(){
				    return false;
				}
				public Integer APELLIDO1Length(){
				    return null;
				}
				public Integer APELLIDO1Precision(){
				    return null;
				}
				public String APELLIDO1Default(){
				
					return null;
				
				}
				public String APELLIDO1Comment(){
				
				    return "";
				
				}
				public String APELLIDO1Pattern(){
				
					return "";
				
				}
				public String APELLIDO1OriginalDbColumnName(){
				
					return "APELLIDO1";
				
				}

				
			    public String APELLIDO2;

				public String getAPELLIDO2 () {
					return this.APELLIDO2;
				}

				public Boolean APELLIDO2IsNullable(){
				    return true;
				}
				public Boolean APELLIDO2IsKey(){
				    return false;
				}
				public Integer APELLIDO2Length(){
				    return null;
				}
				public Integer APELLIDO2Precision(){
				    return null;
				}
				public String APELLIDO2Default(){
				
					return null;
				
				}
				public String APELLIDO2Comment(){
				
				    return "";
				
				}
				public String APELLIDO2Pattern(){
				
					return "";
				
				}
				public String APELLIDO2OriginalDbColumnName(){
				
					return "APELLIDO2";
				
				}

				
			    public String SEXO;

				public String getSEXO () {
					return this.SEXO;
				}

				public Boolean SEXOIsNullable(){
				    return false;
				}
				public Boolean SEXOIsKey(){
				    return false;
				}
				public Integer SEXOLength(){
				    return null;
				}
				public Integer SEXOPrecision(){
				    return null;
				}
				public String SEXODefault(){
				
					return null;
				
				}
				public String SEXOComment(){
				
				    return "";
				
				}
				public String SEXOPattern(){
				
					return "";
				
				}
				public String SEXOOriginalDbColumnName(){
				
					return "SEXO";
				
				}

				
			    public String FNACIMIENTO;

				public String getFNACIMIENTO () {
					return this.FNACIMIENTO;
				}

				public Boolean FNACIMIENTOIsNullable(){
				    return true;
				}
				public Boolean FNACIMIENTOIsKey(){
				    return false;
				}
				public Integer FNACIMIENTOLength(){
				    return null;
				}
				public Integer FNACIMIENTOPrecision(){
				    return null;
				}
				public String FNACIMIENTODefault(){
				
					return null;
				
				}
				public String FNACIMIENTOComment(){
				
				    return "";
				
				}
				public String FNACIMIENTOPattern(){
				
					return "";
				
				}
				public String FNACIMIENTOOriginalDbColumnName(){
				
					return "FNACIMIENTO";
				
				}

				
			    public String CODREGIMEN;

				public String getCODREGIMEN () {
					return this.CODREGIMEN;
				}

				public Boolean CODREGIMENIsNullable(){
				    return true;
				}
				public Boolean CODREGIMENIsKey(){
				    return false;
				}
				public Integer CODREGIMENLength(){
				    return null;
				}
				public Integer CODREGIMENPrecision(){
				    return null;
				}
				public String CODREGIMENDefault(){
				
					return null;
				
				}
				public String CODREGIMENComment(){
				
				    return "";
				
				}
				public String CODREGIMENPattern(){
				
					return "";
				
				}
				public String CODREGIMENOriginalDbColumnName(){
				
					return "CODREGIMEN";
				
				}

				
			    public String CODASEGURADORA;

				public String getCODASEGURADORA () {
					return this.CODASEGURADORA;
				}

				public Boolean CODASEGURADORAIsNullable(){
				    return true;
				}
				public Boolean CODASEGURADORAIsKey(){
				    return false;
				}
				public Integer CODASEGURADORALength(){
				    return null;
				}
				public Integer CODASEGURADORAPrecision(){
				    return null;
				}
				public String CODASEGURADORADefault(){
				
					return null;
				
				}
				public String CODASEGURADORAComment(){
				
				    return "";
				
				}
				public String CODASEGURADORAPattern(){
				
					return "";
				
				}
				public String CODASEGURADORAOriginalDbColumnName(){
				
					return "CODASEGURADORA";
				
				}

				
			    public String ETNIA;

				public String getETNIA () {
					return this.ETNIA;
				}

				public Boolean ETNIAIsNullable(){
				    return true;
				}
				public Boolean ETNIAIsKey(){
				    return false;
				}
				public Integer ETNIALength(){
				    return null;
				}
				public Integer ETNIAPrecision(){
				    return null;
				}
				public String ETNIADefault(){
				
					return null;
				
				}
				public String ETNIAComment(){
				
				    return "";
				
				}
				public String ETNIAPattern(){
				
					return "";
				
				}
				public String ETNIAOriginalDbColumnName(){
				
					return "ETNIA";
				
				}

				
			    public BigDecimal PESO_NACIMIENTO;

				public BigDecimal getPESO_NACIMIENTO () {
					return this.PESO_NACIMIENTO;
				}

				public Boolean PESO_NACIMIENTOIsNullable(){
				    return true;
				}
				public Boolean PESO_NACIMIENTOIsKey(){
				    return false;
				}
				public Integer PESO_NACIMIENTOLength(){
				    return null;
				}
				public Integer PESO_NACIMIENTOPrecision(){
				    return null;
				}
				public String PESO_NACIMIENTODefault(){
				
					return "";
				
				}
				public String PESO_NACIMIENTOComment(){
				
				    return "";
				
				}
				public String PESO_NACIMIENTOPattern(){
				
					return "";
				
				}
				public String PESO_NACIMIENTOOriginalDbColumnName(){
				
					return "PESO_NACIMIENTO";
				
				}

				
			    public BigDecimal EDAD_GESTACIONAL;

				public BigDecimal getEDAD_GESTACIONAL () {
					return this.EDAD_GESTACIONAL;
				}

				public Boolean EDAD_GESTACIONALIsNullable(){
				    return true;
				}
				public Boolean EDAD_GESTACIONALIsKey(){
				    return false;
				}
				public Integer EDAD_GESTACIONALLength(){
				    return null;
				}
				public Integer EDAD_GESTACIONALPrecision(){
				    return null;
				}
				public String EDAD_GESTACIONALDefault(){
				
					return "";
				
				}
				public String EDAD_GESTACIONALComment(){
				
				    return "";
				
				}
				public String EDAD_GESTACIONALPattern(){
				
					return "";
				
				}
				public String EDAD_GESTACIONALOriginalDbColumnName(){
				
					return "EDAD_GESTACIONAL";
				
				}

				
			    public String PAIS_NACIMIENTO;

				public String getPAIS_NACIMIENTO () {
					return this.PAIS_NACIMIENTO;
				}

				public Boolean PAIS_NACIMIENTOIsNullable(){
				    return true;
				}
				public Boolean PAIS_NACIMIENTOIsKey(){
				    return false;
				}
				public Integer PAIS_NACIMIENTOLength(){
				    return null;
				}
				public Integer PAIS_NACIMIENTOPrecision(){
				    return null;
				}
				public String PAIS_NACIMIENTODefault(){
				
					return null;
				
				}
				public String PAIS_NACIMIENTOComment(){
				
				    return "";
				
				}
				public String PAIS_NACIMIENTOPattern(){
				
					return "";
				
				}
				public String PAIS_NACIMIENTOOriginalDbColumnName(){
				
					return "PAIS_NACIMIENTO";
				
				}

				
			    public String DEPTO_NACIMIENTO;

				public String getDEPTO_NACIMIENTO () {
					return this.DEPTO_NACIMIENTO;
				}

				public Boolean DEPTO_NACIMIENTOIsNullable(){
				    return true;
				}
				public Boolean DEPTO_NACIMIENTOIsKey(){
				    return false;
				}
				public Integer DEPTO_NACIMIENTOLength(){
				    return null;
				}
				public Integer DEPTO_NACIMIENTOPrecision(){
				    return null;
				}
				public String DEPTO_NACIMIENTODefault(){
				
					return null;
				
				}
				public String DEPTO_NACIMIENTOComment(){
				
				    return "";
				
				}
				public String DEPTO_NACIMIENTOPattern(){
				
					return "";
				
				}
				public String DEPTO_NACIMIENTOOriginalDbColumnName(){
				
					return "DEPTO_NACIMIENTO";
				
				}

				
			    public String MCPIO_NACIMIENTO;

				public String getMCPIO_NACIMIENTO () {
					return this.MCPIO_NACIMIENTO;
				}

				public Boolean MCPIO_NACIMIENTOIsNullable(){
				    return true;
				}
				public Boolean MCPIO_NACIMIENTOIsKey(){
				    return false;
				}
				public Integer MCPIO_NACIMIENTOLength(){
				    return null;
				}
				public Integer MCPIO_NACIMIENTOPrecision(){
				    return null;
				}
				public String MCPIO_NACIMIENTODefault(){
				
					return null;
				
				}
				public String MCPIO_NACIMIENTOComment(){
				
				    return "";
				
				}
				public String MCPIO_NACIMIENTOPattern(){
				
					return "";
				
				}
				public String MCPIO_NACIMIENTOOriginalDbColumnName(){
				
					return "MCPIO_NACIMIENTO";
				
				}

				
			    public BigDecimal DESPLAZADO;

				public BigDecimal getDESPLAZADO () {
					return this.DESPLAZADO;
				}

				public Boolean DESPLAZADOIsNullable(){
				    return true;
				}
				public Boolean DESPLAZADOIsKey(){
				    return false;
				}
				public Integer DESPLAZADOLength(){
				    return null;
				}
				public Integer DESPLAZADOPrecision(){
				    return null;
				}
				public String DESPLAZADODefault(){
				
					return "";
				
				}
				public String DESPLAZADOComment(){
				
				    return "";
				
				}
				public String DESPLAZADOPattern(){
				
					return "";
				
				}
				public String DESPLAZADOOriginalDbColumnName(){
				
					return "DESPLAZADO";
				
				}

				
			    public BigDecimal DISCAPACITADO;

				public BigDecimal getDISCAPACITADO () {
					return this.DISCAPACITADO;
				}

				public Boolean DISCAPACITADOIsNullable(){
				    return true;
				}
				public Boolean DISCAPACITADOIsKey(){
				    return false;
				}
				public Integer DISCAPACITADOLength(){
				    return null;
				}
				public Integer DISCAPACITADOPrecision(){
				    return null;
				}
				public String DISCAPACITADODefault(){
				
					return "";
				
				}
				public String DISCAPACITADOComment(){
				
				    return "";
				
				}
				public String DISCAPACITADOPattern(){
				
					return "";
				
				}
				public String DISCAPACITADOOriginalDbColumnName(){
				
					return "DISCAPACITADO";
				
				}

				
			    public BigDecimal FALLECIDO;

				public BigDecimal getFALLECIDO () {
					return this.FALLECIDO;
				}

				public Boolean FALLECIDOIsNullable(){
				    return true;
				}
				public Boolean FALLECIDOIsKey(){
				    return false;
				}
				public Integer FALLECIDOLength(){
				    return null;
				}
				public Integer FALLECIDOPrecision(){
				    return null;
				}
				public String FALLECIDODefault(){
				
					return "";
				
				}
				public String FALLECIDOComment(){
				
				    return "";
				
				}
				public String FALLECIDOPattern(){
				
					return "";
				
				}
				public String FALLECIDOOriginalDbColumnName(){
				
					return "FALLECIDO";
				
				}

				
			    public BigDecimal ESTUDIA_ACTUAL;

				public BigDecimal getESTUDIA_ACTUAL () {
					return this.ESTUDIA_ACTUAL;
				}

				public Boolean ESTUDIA_ACTUALIsNullable(){
				    return true;
				}
				public Boolean ESTUDIA_ACTUALIsKey(){
				    return false;
				}
				public Integer ESTUDIA_ACTUALLength(){
				    return null;
				}
				public Integer ESTUDIA_ACTUALPrecision(){
				    return null;
				}
				public String ESTUDIA_ACTUALDefault(){
				
					return "";
				
				}
				public String ESTUDIA_ACTUALComment(){
				
				    return "";
				
				}
				public String ESTUDIA_ACTUALPattern(){
				
					return "";
				
				}
				public String ESTUDIA_ACTUALOriginalDbColumnName(){
				
					return "ESTUDIA_ACTUAL";
				
				}

				
			    public String MADRE_TDOCUMENTO;

				public String getMADRE_TDOCUMENTO () {
					return this.MADRE_TDOCUMENTO;
				}

				public Boolean MADRE_TDOCUMENTOIsNullable(){
				    return true;
				}
				public Boolean MADRE_TDOCUMENTOIsKey(){
				    return false;
				}
				public Integer MADRE_TDOCUMENTOLength(){
				    return null;
				}
				public Integer MADRE_TDOCUMENTOPrecision(){
				    return null;
				}
				public String MADRE_TDOCUMENTODefault(){
				
					return null;
				
				}
				public String MADRE_TDOCUMENTOComment(){
				
				    return "";
				
				}
				public String MADRE_TDOCUMENTOPattern(){
				
					return "";
				
				}
				public String MADRE_TDOCUMENTOOriginalDbColumnName(){
				
					return "MADRE_TDOCUMENTO";
				
				}

				
			    public String MADRE_DOCUMENTO;

				public String getMADRE_DOCUMENTO () {
					return this.MADRE_DOCUMENTO;
				}

				public Boolean MADRE_DOCUMENTOIsNullable(){
				    return true;
				}
				public Boolean MADRE_DOCUMENTOIsKey(){
				    return false;
				}
				public Integer MADRE_DOCUMENTOLength(){
				    return null;
				}
				public Integer MADRE_DOCUMENTOPrecision(){
				    return null;
				}
				public String MADRE_DOCUMENTODefault(){
				
					return null;
				
				}
				public String MADRE_DOCUMENTOComment(){
				
				    return "";
				
				}
				public String MADRE_DOCUMENTOPattern(){
				
					return "";
				
				}
				public String MADRE_DOCUMENTOOriginalDbColumnName(){
				
					return "MADRE_DOCUMENTO";
				
				}

				
			    public String MADRE_NOMBRE1;

				public String getMADRE_NOMBRE1 () {
					return this.MADRE_NOMBRE1;
				}

				public Boolean MADRE_NOMBRE1IsNullable(){
				    return true;
				}
				public Boolean MADRE_NOMBRE1IsKey(){
				    return false;
				}
				public Integer MADRE_NOMBRE1Length(){
				    return null;
				}
				public Integer MADRE_NOMBRE1Precision(){
				    return null;
				}
				public String MADRE_NOMBRE1Default(){
				
					return null;
				
				}
				public String MADRE_NOMBRE1Comment(){
				
				    return "";
				
				}
				public String MADRE_NOMBRE1Pattern(){
				
					return "";
				
				}
				public String MADRE_NOMBRE1OriginalDbColumnName(){
				
					return "MADRE_NOMBRE1";
				
				}

				
			    public String MADRE_NOMBRE2;

				public String getMADRE_NOMBRE2 () {
					return this.MADRE_NOMBRE2;
				}

				public Boolean MADRE_NOMBRE2IsNullable(){
				    return true;
				}
				public Boolean MADRE_NOMBRE2IsKey(){
				    return false;
				}
				public Integer MADRE_NOMBRE2Length(){
				    return null;
				}
				public Integer MADRE_NOMBRE2Precision(){
				    return null;
				}
				public String MADRE_NOMBRE2Default(){
				
					return null;
				
				}
				public String MADRE_NOMBRE2Comment(){
				
				    return "";
				
				}
				public String MADRE_NOMBRE2Pattern(){
				
					return "";
				
				}
				public String MADRE_NOMBRE2OriginalDbColumnName(){
				
					return "MADRE_NOMBRE2";
				
				}

				
			    public String MADRE_APELLIDO1;

				public String getMADRE_APELLIDO1 () {
					return this.MADRE_APELLIDO1;
				}

				public Boolean MADRE_APELLIDO1IsNullable(){
				    return true;
				}
				public Boolean MADRE_APELLIDO1IsKey(){
				    return false;
				}
				public Integer MADRE_APELLIDO1Length(){
				    return null;
				}
				public Integer MADRE_APELLIDO1Precision(){
				    return null;
				}
				public String MADRE_APELLIDO1Default(){
				
					return null;
				
				}
				public String MADRE_APELLIDO1Comment(){
				
				    return "";
				
				}
				public String MADRE_APELLIDO1Pattern(){
				
					return "";
				
				}
				public String MADRE_APELLIDO1OriginalDbColumnName(){
				
					return "MADRE_APELLIDO1";
				
				}

				
			    public String MADRE_APELLIDO2;

				public String getMADRE_APELLIDO2 () {
					return this.MADRE_APELLIDO2;
				}

				public Boolean MADRE_APELLIDO2IsNullable(){
				    return true;
				}
				public Boolean MADRE_APELLIDO2IsKey(){
				    return false;
				}
				public Integer MADRE_APELLIDO2Length(){
				    return null;
				}
				public Integer MADRE_APELLIDO2Precision(){
				    return null;
				}
				public String MADRE_APELLIDO2Default(){
				
					return null;
				
				}
				public String MADRE_APELLIDO2Comment(){
				
				    return "";
				
				}
				public String MADRE_APELLIDO2Pattern(){
				
					return "";
				
				}
				public String MADRE_APELLIDO2OriginalDbColumnName(){
				
					return "MADRE_APELLIDO2";
				
				}

				
			    public String PAIS_RESIDENCIA;

				public String getPAIS_RESIDENCIA () {
					return this.PAIS_RESIDENCIA;
				}

				public Boolean PAIS_RESIDENCIAIsNullable(){
				    return true;
				}
				public Boolean PAIS_RESIDENCIAIsKey(){
				    return false;
				}
				public Integer PAIS_RESIDENCIALength(){
				    return null;
				}
				public Integer PAIS_RESIDENCIAPrecision(){
				    return null;
				}
				public String PAIS_RESIDENCIADefault(){
				
					return null;
				
				}
				public String PAIS_RESIDENCIAComment(){
				
				    return "";
				
				}
				public String PAIS_RESIDENCIAPattern(){
				
					return "";
				
				}
				public String PAIS_RESIDENCIAOriginalDbColumnName(){
				
					return "PAIS_RESIDENCIA";
				
				}

				
			    public String DEPTO_RESIDENCIA;

				public String getDEPTO_RESIDENCIA () {
					return this.DEPTO_RESIDENCIA;
				}

				public Boolean DEPTO_RESIDENCIAIsNullable(){
				    return true;
				}
				public Boolean DEPTO_RESIDENCIAIsKey(){
				    return false;
				}
				public Integer DEPTO_RESIDENCIALength(){
				    return null;
				}
				public Integer DEPTO_RESIDENCIAPrecision(){
				    return null;
				}
				public String DEPTO_RESIDENCIADefault(){
				
					return null;
				
				}
				public String DEPTO_RESIDENCIAComment(){
				
				    return "";
				
				}
				public String DEPTO_RESIDENCIAPattern(){
				
					return "";
				
				}
				public String DEPTO_RESIDENCIAOriginalDbColumnName(){
				
					return "DEPTO_RESIDENCIA";
				
				}

				
			    public String MCPIO_RESIDENCIA;

				public String getMCPIO_RESIDENCIA () {
					return this.MCPIO_RESIDENCIA;
				}

				public Boolean MCPIO_RESIDENCIAIsNullable(){
				    return true;
				}
				public Boolean MCPIO_RESIDENCIAIsKey(){
				    return false;
				}
				public Integer MCPIO_RESIDENCIALength(){
				    return null;
				}
				public Integer MCPIO_RESIDENCIAPrecision(){
				    return null;
				}
				public String MCPIO_RESIDENCIADefault(){
				
					return null;
				
				}
				public String MCPIO_RESIDENCIAComment(){
				
				    return "";
				
				}
				public String MCPIO_RESIDENCIAPattern(){
				
					return "";
				
				}
				public String MCPIO_RESIDENCIAOriginalDbColumnName(){
				
					return "MCPIO_RESIDENCIA";
				
				}

				
			    public String CODIGO_VACUNA;

				public String getCODIGO_VACUNA () {
					return this.CODIGO_VACUNA;
				}

				public Boolean CODIGO_VACUNAIsNullable(){
				    return true;
				}
				public Boolean CODIGO_VACUNAIsKey(){
				    return false;
				}
				public Integer CODIGO_VACUNALength(){
				    return null;
				}
				public Integer CODIGO_VACUNAPrecision(){
				    return null;
				}
				public String CODIGO_VACUNADefault(){
				
					return null;
				
				}
				public String CODIGO_VACUNAComment(){
				
				    return "";
				
				}
				public String CODIGO_VACUNAPattern(){
				
					return "";
				
				}
				public String CODIGO_VACUNAOriginalDbColumnName(){
				
					return "CODIGO_VACUNA";
				
				}

				
			    public String ENTIDAD_VACUNADORA;

				public String getENTIDAD_VACUNADORA () {
					return this.ENTIDAD_VACUNADORA;
				}

				public Boolean ENTIDAD_VACUNADORAIsNullable(){
				    return false;
				}
				public Boolean ENTIDAD_VACUNADORAIsKey(){
				    return false;
				}
				public Integer ENTIDAD_VACUNADORALength(){
				    return null;
				}
				public Integer ENTIDAD_VACUNADORAPrecision(){
				    return null;
				}
				public String ENTIDAD_VACUNADORADefault(){
				
					return null;
				
				}
				public String ENTIDAD_VACUNADORAComment(){
				
				    return "";
				
				}
				public String ENTIDAD_VACUNADORAPattern(){
				
					return "";
				
				}
				public String ENTIDAD_VACUNADORAOriginalDbColumnName(){
				
					return "ENTIDAD_VACUNADORA";
				
				}

				
			    public String LOTE_VACUNA;

				public String getLOTE_VACUNA () {
					return this.LOTE_VACUNA;
				}

				public Boolean LOTE_VACUNAIsNullable(){
				    return false;
				}
				public Boolean LOTE_VACUNAIsKey(){
				    return false;
				}
				public Integer LOTE_VACUNALength(){
				    return null;
				}
				public Integer LOTE_VACUNAPrecision(){
				    return null;
				}
				public String LOTE_VACUNADefault(){
				
					return null;
				
				}
				public String LOTE_VACUNAComment(){
				
				    return "";
				
				}
				public String LOTE_VACUNAPattern(){
				
					return "";
				
				}
				public String LOTE_VACUNAOriginalDbColumnName(){
				
					return "LOTE_VACUNA";
				
				}

				
			    public String FVACUNACION;

				public String getFVACUNACION () {
					return this.FVACUNACION;
				}

				public Boolean FVACUNACIONIsNullable(){
				    return true;
				}
				public Boolean FVACUNACIONIsKey(){
				    return false;
				}
				public Integer FVACUNACIONLength(){
				    return null;
				}
				public Integer FVACUNACIONPrecision(){
				    return null;
				}
				public String FVACUNACIONDefault(){
				
					return null;
				
				}
				public String FVACUNACIONComment(){
				
				    return "";
				
				}
				public String FVACUNACIONPattern(){
				
					return "";
				
				}
				public String FVACUNACIONOriginalDbColumnName(){
				
					return "FVACUNACION";
				
				}

				
			    public String VACUNADOR;

				public String getVACUNADOR () {
					return this.VACUNADOR;
				}

				public Boolean VACUNADORIsNullable(){
				    return true;
				}
				public Boolean VACUNADORIsKey(){
				    return false;
				}
				public Integer VACUNADORLength(){
				    return null;
				}
				public Integer VACUNADORPrecision(){
				    return null;
				}
				public String VACUNADORDefault(){
				
					return null;
				
				}
				public String VACUNADORComment(){
				
				    return "";
				
				}
				public String VACUNADORPattern(){
				
					return "";
				
				}
				public String VACUNADOROriginalDbColumnName(){
				
					return "VACUNADOR";
				
				}

				
			    public BigDecimal TESQUEMA;

				public BigDecimal getTESQUEMA () {
					return this.TESQUEMA;
				}

				public Boolean TESQUEMAIsNullable(){
				    return true;
				}
				public Boolean TESQUEMAIsKey(){
				    return false;
				}
				public Integer TESQUEMALength(){
				    return null;
				}
				public Integer TESQUEMAPrecision(){
				    return null;
				}
				public String TESQUEMADefault(){
				
					return "";
				
				}
				public String TESQUEMAComment(){
				
				    return "";
				
				}
				public String TESQUEMAPattern(){
				
					return "";
				
				}
				public String TESQUEMAOriginalDbColumnName(){
				
					return "TESQUEMA";
				
				}

				
			    public String TIPO_DOSIS;

				public String getTIPO_DOSIS () {
					return this.TIPO_DOSIS;
				}

				public Boolean TIPO_DOSISIsNullable(){
				    return true;
				}
				public Boolean TIPO_DOSISIsKey(){
				    return false;
				}
				public Integer TIPO_DOSISLength(){
				    return null;
				}
				public Integer TIPO_DOSISPrecision(){
				    return null;
				}
				public String TIPO_DOSISDefault(){
				
					return null;
				
				}
				public String TIPO_DOSISComment(){
				
				    return "";
				
				}
				public String TIPO_DOSISPattern(){
				
					return "";
				
				}
				public String TIPO_DOSISOriginalDbColumnName(){
				
					return "TIPO_DOSIS";
				
				}

				
			    public BigDecimal NUMERO_DOSIS;

				public BigDecimal getNUMERO_DOSIS () {
					return this.NUMERO_DOSIS;
				}

				public Boolean NUMERO_DOSISIsNullable(){
				    return true;
				}
				public Boolean NUMERO_DOSISIsKey(){
				    return false;
				}
				public Integer NUMERO_DOSISLength(){
				    return null;
				}
				public Integer NUMERO_DOSISPrecision(){
				    return null;
				}
				public String NUMERO_DOSISDefault(){
				
					return "";
				
				}
				public String NUMERO_DOSISComment(){
				
				    return "";
				
				}
				public String NUMERO_DOSISPattern(){
				
					return "";
				
				}
				public String NUMERO_DOSISOriginalDbColumnName(){
				
					return "NUMERO_DOSIS";
				
				}

				
			    public String ACTUALIZACION;

				public String getACTUALIZACION () {
					return this.ACTUALIZACION;
				}

				public Boolean ACTUALIZACIONIsNullable(){
				    return true;
				}
				public Boolean ACTUALIZACIONIsKey(){
				    return false;
				}
				public Integer ACTUALIZACIONLength(){
				    return null;
				}
				public Integer ACTUALIZACIONPrecision(){
				    return null;
				}
				public String ACTUALIZACIONDefault(){
				
					return null;
				
				}
				public String ACTUALIZACIONComment(){
				
				    return "";
				
				}
				public String ACTUALIZACIONPattern(){
				
					return "";
				
				}
				public String ACTUALIZACIONOriginalDbColumnName(){
				
					return "ACTUALIZACION";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_VAC_CONSOLIDADOS_VAC_VacunasAplicadasMSPS.length) {
				if(length < 1024 && commonByteArray_VAC_CONSOLIDADOS_VAC_VacunasAplicadasMSPS.length == 0) {
   					commonByteArray_VAC_CONSOLIDADOS_VAC_VacunasAplicadasMSPS = new byte[1024];
				} else {
   					commonByteArray_VAC_CONSOLIDADOS_VAC_VacunasAplicadasMSPS = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_VAC_CONSOLIDADOS_VAC_VacunasAplicadasMSPS, 0, length);
			strReturn = new String(commonByteArray_VAC_CONSOLIDADOS_VAC_VacunasAplicadasMSPS, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_VAC_CONSOLIDADOS_VAC_VacunasAplicadasMSPS.length) {
				if(length < 1024 && commonByteArray_VAC_CONSOLIDADOS_VAC_VacunasAplicadasMSPS.length == 0) {
   					commonByteArray_VAC_CONSOLIDADOS_VAC_VacunasAplicadasMSPS = new byte[1024];
				} else {
   					commonByteArray_VAC_CONSOLIDADOS_VAC_VacunasAplicadasMSPS = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_VAC_CONSOLIDADOS_VAC_VacunasAplicadasMSPS, 0, length);
			strReturn = new String(commonByteArray_VAC_CONSOLIDADOS_VAC_VacunasAplicadasMSPS, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_VAC_CONSOLIDADOS_VAC_VacunasAplicadasMSPS) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
					this.TDOCUMENTO = readString(dis);
					
					this.DOCUMENTO = readString(dis);
					
					this.NOMBRE1 = readString(dis);
					
					this.NOMBRE2 = readString(dis);
					
					this.APELLIDO1 = readString(dis);
					
					this.APELLIDO2 = readString(dis);
					
					this.SEXO = readString(dis);
					
					this.FNACIMIENTO = readString(dis);
					
					this.CODREGIMEN = readString(dis);
					
					this.CODASEGURADORA = readString(dis);
					
					this.ETNIA = readString(dis);
					
						this.PESO_NACIMIENTO = (BigDecimal) dis.readObject();
					
						this.EDAD_GESTACIONAL = (BigDecimal) dis.readObject();
					
					this.PAIS_NACIMIENTO = readString(dis);
					
					this.DEPTO_NACIMIENTO = readString(dis);
					
					this.MCPIO_NACIMIENTO = readString(dis);
					
						this.DESPLAZADO = (BigDecimal) dis.readObject();
					
						this.DISCAPACITADO = (BigDecimal) dis.readObject();
					
						this.FALLECIDO = (BigDecimal) dis.readObject();
					
						this.ESTUDIA_ACTUAL = (BigDecimal) dis.readObject();
					
					this.MADRE_TDOCUMENTO = readString(dis);
					
					this.MADRE_DOCUMENTO = readString(dis);
					
					this.MADRE_NOMBRE1 = readString(dis);
					
					this.MADRE_NOMBRE2 = readString(dis);
					
					this.MADRE_APELLIDO1 = readString(dis);
					
					this.MADRE_APELLIDO2 = readString(dis);
					
					this.PAIS_RESIDENCIA = readString(dis);
					
					this.DEPTO_RESIDENCIA = readString(dis);
					
					this.MCPIO_RESIDENCIA = readString(dis);
					
					this.CODIGO_VACUNA = readString(dis);
					
					this.ENTIDAD_VACUNADORA = readString(dis);
					
					this.LOTE_VACUNA = readString(dis);
					
					this.FVACUNACION = readString(dis);
					
					this.VACUNADOR = readString(dis);
					
						this.TESQUEMA = (BigDecimal) dis.readObject();
					
					this.TIPO_DOSIS = readString(dis);
					
						this.NUMERO_DOSIS = (BigDecimal) dis.readObject();
					
					this.ACTUALIZACION = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_VAC_CONSOLIDADOS_VAC_VacunasAplicadasMSPS) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
					this.TDOCUMENTO = readString(dis);
					
					this.DOCUMENTO = readString(dis);
					
					this.NOMBRE1 = readString(dis);
					
					this.NOMBRE2 = readString(dis);
					
					this.APELLIDO1 = readString(dis);
					
					this.APELLIDO2 = readString(dis);
					
					this.SEXO = readString(dis);
					
					this.FNACIMIENTO = readString(dis);
					
					this.CODREGIMEN = readString(dis);
					
					this.CODASEGURADORA = readString(dis);
					
					this.ETNIA = readString(dis);
					
						this.PESO_NACIMIENTO = (BigDecimal) dis.readObject();
					
						this.EDAD_GESTACIONAL = (BigDecimal) dis.readObject();
					
					this.PAIS_NACIMIENTO = readString(dis);
					
					this.DEPTO_NACIMIENTO = readString(dis);
					
					this.MCPIO_NACIMIENTO = readString(dis);
					
						this.DESPLAZADO = (BigDecimal) dis.readObject();
					
						this.DISCAPACITADO = (BigDecimal) dis.readObject();
					
						this.FALLECIDO = (BigDecimal) dis.readObject();
					
						this.ESTUDIA_ACTUAL = (BigDecimal) dis.readObject();
					
					this.MADRE_TDOCUMENTO = readString(dis);
					
					this.MADRE_DOCUMENTO = readString(dis);
					
					this.MADRE_NOMBRE1 = readString(dis);
					
					this.MADRE_NOMBRE2 = readString(dis);
					
					this.MADRE_APELLIDO1 = readString(dis);
					
					this.MADRE_APELLIDO2 = readString(dis);
					
					this.PAIS_RESIDENCIA = readString(dis);
					
					this.DEPTO_RESIDENCIA = readString(dis);
					
					this.MCPIO_RESIDENCIA = readString(dis);
					
					this.CODIGO_VACUNA = readString(dis);
					
					this.ENTIDAD_VACUNADORA = readString(dis);
					
					this.LOTE_VACUNA = readString(dis);
					
					this.FVACUNACION = readString(dis);
					
					this.VACUNADOR = readString(dis);
					
						this.TESQUEMA = (BigDecimal) dis.readObject();
					
					this.TIPO_DOSIS = readString(dis);
					
						this.NUMERO_DOSIS = (BigDecimal) dis.readObject();
					
					this.ACTUALIZACION = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.ID);
					
					// String
				
						writeString(this.TDOCUMENTO,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// String
				
						writeString(this.NOMBRE1,dos);
					
					// String
				
						writeString(this.NOMBRE2,dos);
					
					// String
				
						writeString(this.APELLIDO1,dos);
					
					// String
				
						writeString(this.APELLIDO2,dos);
					
					// String
				
						writeString(this.SEXO,dos);
					
					// String
				
						writeString(this.FNACIMIENTO,dos);
					
					// String
				
						writeString(this.CODREGIMEN,dos);
					
					// String
				
						writeString(this.CODASEGURADORA,dos);
					
					// String
				
						writeString(this.ETNIA,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PESO_NACIMIENTO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.EDAD_GESTACIONAL);
					
					// String
				
						writeString(this.PAIS_NACIMIENTO,dos);
					
					// String
				
						writeString(this.DEPTO_NACIMIENTO,dos);
					
					// String
				
						writeString(this.MCPIO_NACIMIENTO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.DESPLAZADO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.DISCAPACITADO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FALLECIDO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ESTUDIA_ACTUAL);
					
					// String
				
						writeString(this.MADRE_TDOCUMENTO,dos);
					
					// String
				
						writeString(this.MADRE_DOCUMENTO,dos);
					
					// String
				
						writeString(this.MADRE_NOMBRE1,dos);
					
					// String
				
						writeString(this.MADRE_NOMBRE2,dos);
					
					// String
				
						writeString(this.MADRE_APELLIDO1,dos);
					
					// String
				
						writeString(this.MADRE_APELLIDO2,dos);
					
					// String
				
						writeString(this.PAIS_RESIDENCIA,dos);
					
					// String
				
						writeString(this.DEPTO_RESIDENCIA,dos);
					
					// String
				
						writeString(this.MCPIO_RESIDENCIA,dos);
					
					// String
				
						writeString(this.CODIGO_VACUNA,dos);
					
					// String
				
						writeString(this.ENTIDAD_VACUNADORA,dos);
					
					// String
				
						writeString(this.LOTE_VACUNA,dos);
					
					// String
				
						writeString(this.FVACUNACION,dos);
					
					// String
				
						writeString(this.VACUNADOR,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TESQUEMA);
					
					// String
				
						writeString(this.TIPO_DOSIS,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.NUMERO_DOSIS);
					
					// String
				
						writeString(this.ACTUALIZACION,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ID);
					
					// String
				
						writeString(this.TDOCUMENTO,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// String
				
						writeString(this.NOMBRE1,dos);
					
					// String
				
						writeString(this.NOMBRE2,dos);
					
					// String
				
						writeString(this.APELLIDO1,dos);
					
					// String
				
						writeString(this.APELLIDO2,dos);
					
					// String
				
						writeString(this.SEXO,dos);
					
					// String
				
						writeString(this.FNACIMIENTO,dos);
					
					// String
				
						writeString(this.CODREGIMEN,dos);
					
					// String
				
						writeString(this.CODASEGURADORA,dos);
					
					// String
				
						writeString(this.ETNIA,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PESO_NACIMIENTO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.EDAD_GESTACIONAL);
					
					// String
				
						writeString(this.PAIS_NACIMIENTO,dos);
					
					// String
				
						writeString(this.DEPTO_NACIMIENTO,dos);
					
					// String
				
						writeString(this.MCPIO_NACIMIENTO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.DESPLAZADO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.DISCAPACITADO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.FALLECIDO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ESTUDIA_ACTUAL);
					
					// String
				
						writeString(this.MADRE_TDOCUMENTO,dos);
					
					// String
				
						writeString(this.MADRE_DOCUMENTO,dos);
					
					// String
				
						writeString(this.MADRE_NOMBRE1,dos);
					
					// String
				
						writeString(this.MADRE_NOMBRE2,dos);
					
					// String
				
						writeString(this.MADRE_APELLIDO1,dos);
					
					// String
				
						writeString(this.MADRE_APELLIDO2,dos);
					
					// String
				
						writeString(this.PAIS_RESIDENCIA,dos);
					
					// String
				
						writeString(this.DEPTO_RESIDENCIA,dos);
					
					// String
				
						writeString(this.MCPIO_RESIDENCIA,dos);
					
					// String
				
						writeString(this.CODIGO_VACUNA,dos);
					
					// String
				
						writeString(this.ENTIDAD_VACUNADORA,dos);
					
					// String
				
						writeString(this.LOTE_VACUNA,dos);
					
					// String
				
						writeString(this.FVACUNACION,dos);
					
					// String
				
						writeString(this.VACUNADOR,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TESQUEMA);
					
					// String
				
						writeString(this.TIPO_DOSIS,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.NUMERO_DOSIS);
					
					// String
				
						writeString(this.ACTUALIZACION,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",TDOCUMENTO="+TDOCUMENTO);
		sb.append(",DOCUMENTO="+DOCUMENTO);
		sb.append(",NOMBRE1="+NOMBRE1);
		sb.append(",NOMBRE2="+NOMBRE2);
		sb.append(",APELLIDO1="+APELLIDO1);
		sb.append(",APELLIDO2="+APELLIDO2);
		sb.append(",SEXO="+SEXO);
		sb.append(",FNACIMIENTO="+FNACIMIENTO);
		sb.append(",CODREGIMEN="+CODREGIMEN);
		sb.append(",CODASEGURADORA="+CODASEGURADORA);
		sb.append(",ETNIA="+ETNIA);
		sb.append(",PESO_NACIMIENTO="+String.valueOf(PESO_NACIMIENTO));
		sb.append(",EDAD_GESTACIONAL="+String.valueOf(EDAD_GESTACIONAL));
		sb.append(",PAIS_NACIMIENTO="+PAIS_NACIMIENTO);
		sb.append(",DEPTO_NACIMIENTO="+DEPTO_NACIMIENTO);
		sb.append(",MCPIO_NACIMIENTO="+MCPIO_NACIMIENTO);
		sb.append(",DESPLAZADO="+String.valueOf(DESPLAZADO));
		sb.append(",DISCAPACITADO="+String.valueOf(DISCAPACITADO));
		sb.append(",FALLECIDO="+String.valueOf(FALLECIDO));
		sb.append(",ESTUDIA_ACTUAL="+String.valueOf(ESTUDIA_ACTUAL));
		sb.append(",MADRE_TDOCUMENTO="+MADRE_TDOCUMENTO);
		sb.append(",MADRE_DOCUMENTO="+MADRE_DOCUMENTO);
		sb.append(",MADRE_NOMBRE1="+MADRE_NOMBRE1);
		sb.append(",MADRE_NOMBRE2="+MADRE_NOMBRE2);
		sb.append(",MADRE_APELLIDO1="+MADRE_APELLIDO1);
		sb.append(",MADRE_APELLIDO2="+MADRE_APELLIDO2);
		sb.append(",PAIS_RESIDENCIA="+PAIS_RESIDENCIA);
		sb.append(",DEPTO_RESIDENCIA="+DEPTO_RESIDENCIA);
		sb.append(",MCPIO_RESIDENCIA="+MCPIO_RESIDENCIA);
		sb.append(",CODIGO_VACUNA="+CODIGO_VACUNA);
		sb.append(",ENTIDAD_VACUNADORA="+ENTIDAD_VACUNADORA);
		sb.append(",LOTE_VACUNA="+LOTE_VACUNA);
		sb.append(",FVACUNACION="+FVACUNACION);
		sb.append(",VACUNADOR="+VACUNADOR);
		sb.append(",TESQUEMA="+String.valueOf(TESQUEMA));
		sb.append(",TIPO_DOSIS="+TIPO_DOSIS);
		sb.append(",NUMERO_DOSIS="+String.valueOf(NUMERO_DOSIS));
		sb.append(",ACTUALIZACION="+ACTUALIZACION);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row6Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_3_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row6Struct row6 = new row6Struct();
personasStruct personas = new personasStruct();
row7Struct row7 = new row7Struct();
copyOfout1Struct copyOfout1 = new copyOfout1Struct();
vacunacionStruct vacunacion = new vacunacionStruct();







	
	/**
	 * [tFileOutputDelimited_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputDelimited_4", false);
		start_Hash.put("tFileOutputDelimited_4", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputDelimited_4";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"copyOfout1");
					}
				
		int tos_count_tFileOutputDelimited_4 = 0;
		

String fileName_tFileOutputDelimited_4 = "";
    fileName_tFileOutputDelimited_4 = (new java.io.File(context.CARPETA_SALIDA+"/"+context.NOMBRE_PERSONAS)).getAbsolutePath().replace("\\","/");
    String fullName_tFileOutputDelimited_4 = null;
    String extension_tFileOutputDelimited_4 = null;
    String directory_tFileOutputDelimited_4 = null;
    if((fileName_tFileOutputDelimited_4.indexOf("/") != -1)) {
        if(fileName_tFileOutputDelimited_4.lastIndexOf(".") < fileName_tFileOutputDelimited_4.lastIndexOf("/")) {
            fullName_tFileOutputDelimited_4 = fileName_tFileOutputDelimited_4;
            extension_tFileOutputDelimited_4 = "";
        } else {
            fullName_tFileOutputDelimited_4 = fileName_tFileOutputDelimited_4.substring(0, fileName_tFileOutputDelimited_4.lastIndexOf("."));
            extension_tFileOutputDelimited_4 = fileName_tFileOutputDelimited_4.substring(fileName_tFileOutputDelimited_4.lastIndexOf("."));
        }
        directory_tFileOutputDelimited_4 = fileName_tFileOutputDelimited_4.substring(0, fileName_tFileOutputDelimited_4.lastIndexOf("/"));
    } else {
        if(fileName_tFileOutputDelimited_4.lastIndexOf(".") != -1) {
            fullName_tFileOutputDelimited_4 = fileName_tFileOutputDelimited_4.substring(0, fileName_tFileOutputDelimited_4.lastIndexOf("."));
            extension_tFileOutputDelimited_4 = fileName_tFileOutputDelimited_4.substring(fileName_tFileOutputDelimited_4.lastIndexOf("."));
        } else {
            fullName_tFileOutputDelimited_4 = fileName_tFileOutputDelimited_4;
            extension_tFileOutputDelimited_4 = "";
        }
        directory_tFileOutputDelimited_4 = "";
    }
    boolean isFileGenerated_tFileOutputDelimited_4 = true;
    java.io.File filetFileOutputDelimited_4 = new java.io.File(fileName_tFileOutputDelimited_4);
    globalMap.put("tFileOutputDelimited_4_FILE_NAME",fileName_tFileOutputDelimited_4);
            int nb_line_tFileOutputDelimited_4 = 0;
            int splitedFileNo_tFileOutputDelimited_4 = 0;
            int currentRow_tFileOutputDelimited_4 = 0;

            final String OUT_DELIM_tFileOutputDelimited_4 = /** Start field tFileOutputDelimited_4:FIELDSEPARATOR */"|"/** End field tFileOutputDelimited_4:FIELDSEPARATOR */;

            final String OUT_DELIM_ROWSEP_tFileOutputDelimited_4 = /** Start field tFileOutputDelimited_4:ROWSEPARATOR */"\r\n"/** End field tFileOutputDelimited_4:ROWSEPARATOR */;

                    //create directory only if not exists
                    if(directory_tFileOutputDelimited_4 != null && directory_tFileOutputDelimited_4.trim().length() != 0) {
                        java.io.File dir_tFileOutputDelimited_4 = new java.io.File(directory_tFileOutputDelimited_4);
                        if(!dir_tFileOutputDelimited_4.exists()) {
                            dir_tFileOutputDelimited_4.mkdirs();
                        }
                    }

                        //routines.system.Row
                        java.io.Writer outtFileOutputDelimited_4 = null;

                        java.io.File fileToDelete_tFileOutputDelimited_4 = new java.io.File(fileName_tFileOutputDelimited_4);
                        if(fileToDelete_tFileOutputDelimited_4.exists()) {
                            fileToDelete_tFileOutputDelimited_4.delete();
                        }
                        outtFileOutputDelimited_4 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
                        new java.io.FileOutputStream(fileName_tFileOutputDelimited_4, false),"ISO-8859-15"));
                resourceMap.put("out_tFileOutputDelimited_4", outtFileOutputDelimited_4);


resourceMap.put("nb_line_tFileOutputDelimited_4", nb_line_tFileOutputDelimited_4);

 



/**
 * [tFileOutputDelimited_4 begin ] stop
 */



	
	/**
	 * [tMap_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_3", false);
		start_Hash.put("tMap_3", System.currentTimeMillis());
		
	
	currentComponent="tMap_3";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row7");
					}
				
		int tos_count_tMap_3 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_3__Struct  {
	BigDecimal PESO_NACIMIENTO;
	BigDecimal EDAD_GESTACIONAL;
}
Var__tMap_3__Struct Var__tMap_3 = new Var__tMap_3__Struct();
// ###############################

// ###############################
// # Outputs initialization
copyOfout1Struct copyOfout1_tmp = new copyOfout1Struct();
// ###############################

        
        



        









 



/**
 * [tMap_3 begin ] stop
 */



	
	/**
	 * [tUniqRow_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tUniqRow_1", false);
		start_Hash.put("tUniqRow_1", System.currentTimeMillis());
		
	
	currentComponent="tUniqRow_1";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"personas");
					}
				
		int tos_count_tUniqRow_1 = 0;
		

	
		class KeyStruct_tUniqRow_1 {
	
			private static final int DEFAULT_HASHCODE = 1;
		    private static final int PRIME = 31;
		    private int hashCode = DEFAULT_HASHCODE;
		    public boolean hashCodeDirty = true;
	
	        
					BigDecimal ID;        
	        
		    @Override
			public int hashCode() {
				if (this.hashCodeDirty) {
					final int prime = PRIME;
					int result = DEFAULT_HASHCODE;
			
								result = prime * result + ((this.ID == null) ? 0 : this.ID.hashCode());
								
		    		this.hashCode = result;
		    		this.hashCodeDirty = false;		
				}
				return this.hashCode;
			}
			
			@Override
			public boolean equals(Object obj) {
				if (this == obj) return true;
				if (obj == null) return false;
				if (getClass() != obj.getClass()) return false;
				final KeyStruct_tUniqRow_1 other = (KeyStruct_tUniqRow_1) obj;
				
									if (this.ID == null) {
										if (other.ID != null) 
											return false;
								
									} else if (!this.ID.equals(other.ID))
								 
										return false;
								
				
				return true;
			}
	  
	        
		}

	
int nb_uniques_tUniqRow_1 = 0;
int nb_duplicates_tUniqRow_1 = 0;
KeyStruct_tUniqRow_1 finder_tUniqRow_1 = new KeyStruct_tUniqRow_1();
java.util.Set<KeyStruct_tUniqRow_1> keystUniqRow_1 = new java.util.HashSet<KeyStruct_tUniqRow_1>(); 

 



/**
 * [tUniqRow_1 begin ] stop
 */




	
	/**
	 * [tFileOutputDelimited_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputDelimited_5", false);
		start_Hash.put("tFileOutputDelimited_5", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputDelimited_5";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"vacunacion");
					}
				
		int tos_count_tFileOutputDelimited_5 = 0;
		

String fileName_tFileOutputDelimited_5 = "";
    fileName_tFileOutputDelimited_5 = (new java.io.File(context.CARPETA_SALIDA+"/"+context.NOMBRE_VACUNAS)).getAbsolutePath().replace("\\","/");
    String fullName_tFileOutputDelimited_5 = null;
    String extension_tFileOutputDelimited_5 = null;
    String directory_tFileOutputDelimited_5 = null;
    if((fileName_tFileOutputDelimited_5.indexOf("/") != -1)) {
        if(fileName_tFileOutputDelimited_5.lastIndexOf(".") < fileName_tFileOutputDelimited_5.lastIndexOf("/")) {
            fullName_tFileOutputDelimited_5 = fileName_tFileOutputDelimited_5;
            extension_tFileOutputDelimited_5 = "";
        } else {
            fullName_tFileOutputDelimited_5 = fileName_tFileOutputDelimited_5.substring(0, fileName_tFileOutputDelimited_5.lastIndexOf("."));
            extension_tFileOutputDelimited_5 = fileName_tFileOutputDelimited_5.substring(fileName_tFileOutputDelimited_5.lastIndexOf("."));
        }
        directory_tFileOutputDelimited_5 = fileName_tFileOutputDelimited_5.substring(0, fileName_tFileOutputDelimited_5.lastIndexOf("/"));
    } else {
        if(fileName_tFileOutputDelimited_5.lastIndexOf(".") != -1) {
            fullName_tFileOutputDelimited_5 = fileName_tFileOutputDelimited_5.substring(0, fileName_tFileOutputDelimited_5.lastIndexOf("."));
            extension_tFileOutputDelimited_5 = fileName_tFileOutputDelimited_5.substring(fileName_tFileOutputDelimited_5.lastIndexOf("."));
        } else {
            fullName_tFileOutputDelimited_5 = fileName_tFileOutputDelimited_5;
            extension_tFileOutputDelimited_5 = "";
        }
        directory_tFileOutputDelimited_5 = "";
    }
    boolean isFileGenerated_tFileOutputDelimited_5 = true;
    java.io.File filetFileOutputDelimited_5 = new java.io.File(fileName_tFileOutputDelimited_5);
    globalMap.put("tFileOutputDelimited_5_FILE_NAME",fileName_tFileOutputDelimited_5);
            int nb_line_tFileOutputDelimited_5 = 0;
            int splitedFileNo_tFileOutputDelimited_5 = 0;
            int currentRow_tFileOutputDelimited_5 = 0;

            final String OUT_DELIM_tFileOutputDelimited_5 = /** Start field tFileOutputDelimited_5:FIELDSEPARATOR */"|"/** End field tFileOutputDelimited_5:FIELDSEPARATOR */;

            final String OUT_DELIM_ROWSEP_tFileOutputDelimited_5 = /** Start field tFileOutputDelimited_5:ROWSEPARATOR */"\r\n"/** End field tFileOutputDelimited_5:ROWSEPARATOR */;

                    //create directory only if not exists
                    if(directory_tFileOutputDelimited_5 != null && directory_tFileOutputDelimited_5.trim().length() != 0) {
                        java.io.File dir_tFileOutputDelimited_5 = new java.io.File(directory_tFileOutputDelimited_5);
                        if(!dir_tFileOutputDelimited_5.exists()) {
                            dir_tFileOutputDelimited_5.mkdirs();
                        }
                    }

                        //routines.system.Row
                        java.io.Writer outtFileOutputDelimited_5 = null;

                        java.io.File fileToDelete_tFileOutputDelimited_5 = new java.io.File(fileName_tFileOutputDelimited_5);
                        if(fileToDelete_tFileOutputDelimited_5.exists()) {
                            fileToDelete_tFileOutputDelimited_5.delete();
                        }
                        outtFileOutputDelimited_5 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
                        new java.io.FileOutputStream(fileName_tFileOutputDelimited_5, false),"ISO-8859-15"));
                resourceMap.put("out_tFileOutputDelimited_5", outtFileOutputDelimited_5);


resourceMap.put("nb_line_tFileOutputDelimited_5", nb_line_tFileOutputDelimited_5);

 



/**
 * [tFileOutputDelimited_5 begin ] stop
 */



	
	/**
	 * [tMap_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_1", false);
		start_Hash.put("tMap_1", System.currentTimeMillis());
		
	
	currentComponent="tMap_1";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row6");
					}
				
		int tos_count_tMap_1 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_1__Struct  {
	String TDOCUMENTO;
	String DOCUMENTO;
}
Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
// ###############################

// ###############################
// # Outputs initialization
personasStruct personas_tmp = new personasStruct();
vacunacionStruct vacunacion_tmp = new vacunacionStruct();
// ###############################

        
        



        









 



/**
 * [tMap_1 begin ] stop
 */



	
	/**
	 * [tOracleInput_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_3", false);
		start_Hash.put("tOracleInput_3", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_3";
	
	
		int tos_count_tOracleInput_3 = 0;
		
	


	
		    int nb_line_tOracleInput_3 = 0;
		    java.sql.Connection conn_tOracleInput_3 = null;
				conn_tOracleInput_3 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");
				
                boolean isTimeZoneNull_tOracleInput_3 = false;
				boolean isConnectionWrapped_tOracleInput_3 = !(conn_tOracleInput_3 instanceof oracle.jdbc.OracleConnection) && conn_tOracleInput_3.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tOracleInput_3 = null;
                if (isConnectionWrapped_tOracleInput_3) {
					unwrappedOraConn_tOracleInput_3 = conn_tOracleInput_3.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tOracleInput_3 != null) {
                        isTimeZoneNull_tOracleInput_3 = (unwrappedOraConn_tOracleInput_3.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tOracleInput_3 = (((oracle.jdbc.OracleConnection)conn_tOracleInput_3).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tOracleInput_3) {
					java.sql.Statement stmtGetTZ_tOracleInput_3 = conn_tOracleInput_3.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_3 = stmtGetTZ_tOracleInput_3.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_3 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tOracleInput_3.next()) {
						sessionTimezone_tOracleInput_3 = rsGetTZ_tOracleInput_3.getString(1);
					}
					if (isConnectionWrapped_tOracleInput_3 && unwrappedOraConn_tOracleInput_3 != null) {
                        unwrappedOraConn_tOracleInput_3.setSessionTimeZone(sessionTimezone_tOracleInput_3);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_3).setSessionTimeZone(sessionTimezone_tOracleInput_3);
                    }
				}
			
		    
			java.sql.Statement stmt_tOracleInput_3 = conn_tOracleInput_3.createStatement();

		    String dbquery_tOracleInput_3 = "\nSELECT \n    GP.ID,\n    GTD.SIGLA       AS TDOCUMENTO,\n    GP.DOCUMENTO    AS DOCUMENTO,\n    GP.PRIMER_NOMBRE AS N"
+"OMBRE1,\n    GP.SEGUNDO_NOMBRE AS NOMBRE2,\n    GP.PRIMER_APELLIDO AS APELLIDO1,\n    GP.SEGUNDO_APELLIDO AS APELLIDO2,"
+"\n    GS.SIGLA        AS SEXO,\n    TO_CHAR(GP.FECHA_NACIMIENTO, 'YYYY-MM-DD') AS FNACIMIENTO,\n    CASE\n        WHEN GA"
+".ID IS NOT NULL OR RS.SIGLA = 'RE' THEN 'E'\n        WHEN RS.SIGLA = 'RC'   THEN 'C'\n        WHEN RS.SIGLA = 'RS'   THE"
+"N 'S'\n        WHEN RS.SIGLA = 'RINA' THEN 'V'\n    END AS CODREGIMEN,\n    CASE \n        WHEN GA.ID IS NOT NULL THEN '"
+"FMS001'\n        WHEN EPS.ID IS NULL    THEN '00000'\n        ELSE EPS.CODIGO \n    END AS CODASEGURADORA,\n    CASE\n  "
+"      WHEN GE.ID IS NOT NULL THEN\n            DECODE(GE.CODIGO, 1, 'IN', 2, 'RO', 3, 'RZ', 4, 'PA', 5, 'NE', 'NA')\n   "
+"     ELSE\n            DECODE(ORIGEN.CODIGO_ETNICO, 1, 'IN', 2, 'RO', 3, 'RZ', 4, 'PA', 5, 'NE', 'NA')\n    END AS ETNIA"
+",\n    NVL(NEO.PESO, 0) AS PESO_NACIMIENTO,    \n    NVL(TO_NUMBER(REGEXP_SUBSTR(NEO.TIEMPO, '\\d')), 0) AS EDAD_GESTACI"
+"ONAL,\n    LN.CODIGO_ISO AS PAIS_NACIMIENTO,\n    LN.CODDEPTO     AS DEPTO_NACIMIENTO,\n    LN.CODMCPIO     AS MCPIO_NAC"
+"IMIENTO,\n    DECODE(GP.DESPLAZADA, 'Si', 1, 0) AS DESPLAZADO,\n    CASE WHEN DC.SIGLA IS NOT NULL AND DC.SIGLA <> 'TD00"
+"0' THEN 1 ELSE 0 END AS DISCAPACITADO,\n    CASE WHEN GP.FECHA_DEFUNCION IS NOT NULL THEN 1 ELSE 0 END AS FALLECIDO,\n  "
+"  0 AS ESTUDIA_ACTUAL,    \n    CASE WHEN GPA.CODIGO = 6 AND GSP.SIGLA = 'F' THEN TDP.SIGLA ELSE ORIGEN.MADRE_TDOCUMENTO"
+" END AS MADRE_TDOCUMENTO,\n    CASE WHEN GPA.CODIGO = 6 AND GSP.SIGLA = 'F' THEN GPP.DOCUMENTO ELSE ORIGEN.MADRE_DOCUMEN"
+"TO END  AS MADRE_DOCUMENTO,\n    CASE WHEN GPA.CODIGO = 6 AND GSP.SIGLA = 'F' THEN GPP.PRIMER_NOMBRE ELSE ORIGEN.MADRE_N"
+"OMBRE1 END    AS MADRE_NOMBRE1,\n    CASE WHEN GPA.CODIGO = 6 AND GSP.SIGLA = 'F' THEN GPP.SEGUNDO_NOMBRE ELSE ORIGEN.MA"
+"DRE_NOMBRE2 END    AS MADRE_NOMBRE2,\n    CASE WHEN GPA.CODIGO = 6 AND GSP.SIGLA = 'F' THEN GPP.PRIMER_APELLIDO ELSE ORI"
+"GEN.MADRE_APELLIDO1 END  AS MADRE_APELLIDO1,\n    CASE WHEN GPA.CODIGO = 6 AND GSP.SIGLA = 'F' THEN GPP.SEGUNDO_APELLIDO"
+" ELSE ORIGEN.MADRE_APELLIDO2 END  AS MADRE_APELLIDO2,   \n	GDIV.CODIGO_ISO AS PAIS_RESIDENCIA,\n    GDIV.CODDEPTO     AS"
+" DEPTO_RESIDENCIA,\n    GDIV.CODMCPIO     AS MCPIO_RESIDENCIA,       \n    ORIGEN.CODIGO_VACUNA,\n    ORIGEN.ENTIDAD_VAC"
+"UNADORA,\n    ORIGEN.LOTE_VACUNA,\n    ORIGEN.FVACUNACION,\n    ORIGEN.VACUNADOR,\n    ORIGEN.TESQUEMA,\n    ORIGEN.TIPO"
+"_DOSIS,\n    ORIGEN.NUMERO_DOSIS,\n    ORIGEN.ACTUALIZACION    \nFROM\n    (\n        SELECT\n            VA.UORG_ID,\n "
+"           VA.PERSONAS_ID,    \n            CASE WHEN GPR.CODIGO = 9 AND VA.CUIDADOR IS NULL     THEN REGEXP_SUBSTR(REPL"
+"ACE(VA.ACOMPANANTE, '||', '| |'),'[^|]+', 1, 1) \n                    WHEN GPR.CODIGO = 9 AND VA.CUIDADOR IS NOT NULL TH"
+"EN TDC.SIGLA END AS MADRE_TDOCUMENTO,\n            CASE WHEN GPR.CODIGO = 9 AND VA.CUIDADOR IS NULL     THEN REGEXP_SUBS"
+"TR(REPLACE(VA.ACOMPANANTE, '||', '| |'),'[^|]+', 1, 2) \n                    WHEN GPR.CODIGO = 9 AND VA.CUIDADOR IS NOT "
+"NULL THEN CUI.DOCUMENTO END AS MADRE_DOCUMENTO,\n            CASE WHEN GPR.CODIGO = 9 AND VA.CUIDADOR IS NULL     THEN R"
+"EGEXP_SUBSTR(REPLACE(VA.ACOMPANANTE, '||', '| |'),'[^|]+', 1, 3) \n                    WHEN GPR.CODIGO = 9 AND VA.CUIDAD"
+"OR IS NOT NULL THEN CUI.PRIMER_NOMBRE END AS MADRE_NOMBRE1,\n            CASE WHEN GPR.CODIGO = 9 AND VA.CUIDADOR IS NUL"
+"L     THEN REGEXP_SUBSTR(REPLACE(VA.ACOMPANANTE, '||', '| |'),'[^|]+', 1, 4) \n                    WHEN GPR.CODIGO = 9 A"
+"ND VA.CUIDADOR IS NOT NULL THEN CUI.SEGUNDO_NOMBRE END AS MADRE_NOMBRE2,\n            CASE WHEN GPR.CODIGO = 9 AND VA.CU"
+"IDADOR IS NULL     THEN REGEXP_SUBSTR(REPLACE(VA.ACOMPANANTE, '||', '| |'),'[^|]+', 1, 5) \n                    WHEN GPR"
+".CODIGO = 9 AND VA.CUIDADOR IS NOT NULL THEN CUI.PRIMER_APELLIDO END AS MADRE_APELLIDO1,\n            CASE WHEN GPR.CODI"
+"GO = 9 AND VA.CUIDADOR IS NULL     THEN REGEXP_SUBSTR(REPLACE(VA.ACOMPANANTE, '||', '| |'),'[^|]+', 1, 6) \n            "
+"        WHEN GPR.CODIGO = 9 AND VA.CUIDADOR IS NOT NULL THEN CUI.SEGUNDO_APELLIDO END AS MADRE_APELLIDO2,\n            T"
+"O_CHAR(VA.FAPLICACION, 'YYYY-MM-DD') AS FVACUNACION,\n            CASE VA.TVACUNA WHEN 'PAI'    THEN 1\n                "
+"            WHEN 'NO PAI' THEN 2                    \n            END AS TESQUEMA,           \n            GET.CODIGO  A"
+"S CODIGO_ETNICO,\n            MSPS.CODIGO      AS CODIGO_VACUNA,\n            GUO.NOMBRE       AS ENTIDAD_VACUNADORA,\n "
+"           LBIO.LOTE        AS LOTE_VACUNA,            \n            PUS.PRIMER_NOMBRE || ' ' || PUS.SEGUNDO_NOMBRE || '"
+" ' || PUS.PRIMER_APELLIDO || ' ' || PUS.SEGUNDO_APELLIDO AS VACUNADOR,            \n            TDO.TESQUEMA AS TIPO_DOS"
+"IS,\n            DECODE(TDO.SIGLA, 'P', 1, 'S', 2, 'T', 3, 'C', 4, 'Q', 5) AS NUMERO_DOSIS,\n             'A' AS ACTUALI"
+"ZACION \n        FROM\n            VAC_APLICADAS VA\n            INNER JOIN VAC_DAPLICADAS       VDA ON VDA.APLICADAS_ID"
+" = VA.ID\n            INNER JOIN ( \n                SELECT ID, NOMBRE                        \n                FROM GEN"
+"_UORG\n                WHERE ( FUERZA_ID = '"+context.FUERZA_ID+"' OR '"+context.FUERZA_ID+"' IS NULL ) \n                START WITH ID = '"+context.UORG_ID+"'\n                CONNECT BY PRIOR ID = PADRE_ID\n            )GUO ON GUO.ID = VA.UORG_ID\n            INNER JOIN VAC_"
+"BIOLOGICOS_MSPS  VBM ON VDA.ESQUEMAS_TDOSIS_ID = VBM.ESQUEMAS_TDOSIS_ID\n            INNER JOIN VAC_MSPS             MSP"
+"S ON VBM.MSPS_ID = MSPS.ID\n            INNER JOIN VAC_INVENTARIOS      LBIO ON VDA.INVENTARIOS_ID = LBIO.ID\n          "
+"  INNER JOIN GEN_USUARIOS         GUS ON VA.USUARIOS_ID = GUS.ID\n            INNER JOIN GEN_PERSONAS         PUS ON GUS"
+".PERSONAS_ID = PUS.ID\n            INNER JOIN VAC_TDOSIS           TDO ON VDA.TDOSIS_ID = TDO.ID            \n          "
+"  LEFT JOIN GEN_PARENTESCOS       GPR ON VA.PARENTESCO_ID = GPR.ID\n            LEFT JOIN GEN_PERSONAS          CUI ON V"
+"A.CUIDADOR = CUI.ID\n            LEFT JOIN GEN_TDOCUMENTOS       TDC ON CUI.TDOCUMENTOS_ID = TDC.ID\n            LEFT JO"
+"IN GEN_ETNICAS           GET ON VA.ETNICA_ID = GET.ID            \n        WHERE\n            VA.ESTREGISTRO_ID = 1\n   "
+"         AND VDA.ESTREGISTRO_ID = 1\n            AND VDA.APLICADA = 'Si'\n            AND VDA.ACTUALIZACION = 2\n       "
+"     AND VDA.ESQUEMAS_TDOSIS_ID IS NOT NULL\n			AND ( VDA.BIOLOGICOS_ID = '"+context.BIOLOGICO_ID+"' OR '"+context.BIOLOGICO_ID+"' IS NULL )\n            AND VDA.TDOSIS_ID = NVL('"+context.TDOSIS_ID+"', VDA.TDOSIS_ID)\n            AND VA.FAPLICACION BETWEEN TO_DATE('"+context.FECHA_INICIAL+"', 'DD/MM/YYYY') AND TO_DATE('"+context.FECHA_FINAL+"', 'DD/MM/YYYY') + 1          \n    ) ORIGEN\n    INNER JOIN GEN_PERSONAS       GP    ON ORIGEN.PERSONAS_ID = GP.ID\n  "
+"  INNER JOIN GEN_SEXOS          GS    ON GP.SEXO_ID = GS.ID\n    INNER JOIN GEN_TDOCUMENTOS    GTD   ON GP.TDOCUMENTOS_I"
+"D = GTD.ID\n    LEFT JOIN GEN_DIVIPOLA        GDIV  ON GP.LUGAR_RESIDENCIA = GDIV.ID\n    LEFT JOIN GEN_ETNICAS         "
+"GE    ON GP.ETNICAS_ID = GE.ID\n    LEFT JOIN GEN_AFILIADOS       GA    ON GA.PERSONAS_ID = GP.ID AND GA.ESTREGISTRO_ID "
+"= 1 AND GA.ESTAFILIACION IN ('Activo', 'Provisional')\n    LEFT JOIN GEN_PARENTESCOS     GPA   ON GA.PARENTESCOS_ID = GP"
+"A.ID \n    LEFT JOIN GEN_AFILIADOS       GAP   ON GAP.ID = GA.PADRE_ID AND GAP.ESTREGISTRO_ID = 1\n    LEFT JOIN GEN_PER"
+"SONAS        GPP   ON GAP.PERSONAS_ID = GPP.ID\n    LEFT JOIN GEN_TDOCUMENTOS     TDP   ON GPP.TDOCUMENTOS_ID = TDP.ID\n"
+"    LEFT JOIN GEN_SEXOS           GSP   ON GPP.SEXO_ID = GSP.ID\n    LEFT JOIN GEN_PERSONAS_EPS    EP    ON EP.PERSONAS_"
+"ID = GP.ID AND EP.ESTREGISTRO_ID = 1 AND EP.ESTADO = 'Activo' AND GA.ID IS NULL\n    LEFT JOIN AFI_EPS             EPS  "
+" ON EP.EPS_ID = EPS.ID\n    LEFT JOIN GEN_TREGIMENSALUD   RS    ON EP.TREGIMENSALUD_ID = RS.ID\n    LEFT JOIN GEN_DIVIPO"
+"LA        LN    ON GP.LUGAR_NACIMIENTO = LN.ID\n    LEFT JOIN GEN_TDISCAPACIDADES DC    ON GP.TDISCAPACIDADES_ID = DC.ID"
+" AND DC.ESTREGISTRO_ID = 1\n    LEFT JOIN CYD_NEONATAL        NEO   ON NEO.PERSONAS_ID = GP.ID\n";
		    

		    globalMap.put("tOracleInput_3_QUERY",dbquery_tOracleInput_3);

		    java.sql.ResultSet rs_tOracleInput_3 = null;

		    try {
		    	rs_tOracleInput_3 = stmt_tOracleInput_3.executeQuery(dbquery_tOracleInput_3);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_3 = rs_tOracleInput_3.getMetaData();
		    	int colQtyInRs_tOracleInput_3 = rsmd_tOracleInput_3.getColumnCount();

		    String tmpContent_tOracleInput_3 = null;
		    
		    
		    while (rs_tOracleInput_3.next()) {
		        nb_line_tOracleInput_3++;
		        
							if(colQtyInRs_tOracleInput_3 < 1) {
								row6.ID = null;
							} else {
		                          
					if(rs_tOracleInput_3.getObject(1) != null) {
						row6.ID = rs_tOracleInput_3.getBigDecimal(1);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_3 < 2) {
								row6.TDOCUMENTO = null;
							} else {
	                         		
        	row6.TDOCUMENTO = routines.system.JDBCUtil.getString(rs_tOracleInput_3, 2, false);
		                    }
							if(colQtyInRs_tOracleInput_3 < 3) {
								row6.DOCUMENTO = null;
							} else {
	                         		
        	row6.DOCUMENTO = routines.system.JDBCUtil.getString(rs_tOracleInput_3, 3, false);
		                    }
							if(colQtyInRs_tOracleInput_3 < 4) {
								row6.NOMBRE1 = null;
							} else {
	                         		
        	row6.NOMBRE1 = routines.system.JDBCUtil.getString(rs_tOracleInput_3, 4, false);
		                    }
							if(colQtyInRs_tOracleInput_3 < 5) {
								row6.NOMBRE2 = null;
							} else {
	                         		
        	row6.NOMBRE2 = routines.system.JDBCUtil.getString(rs_tOracleInput_3, 5, false);
		                    }
							if(colQtyInRs_tOracleInput_3 < 6) {
								row6.APELLIDO1 = null;
							} else {
	                         		
        	row6.APELLIDO1 = routines.system.JDBCUtil.getString(rs_tOracleInput_3, 6, false);
		                    }
							if(colQtyInRs_tOracleInput_3 < 7) {
								row6.APELLIDO2 = null;
							} else {
	                         		
        	row6.APELLIDO2 = routines.system.JDBCUtil.getString(rs_tOracleInput_3, 7, false);
		                    }
							if(colQtyInRs_tOracleInput_3 < 8) {
								row6.SEXO = null;
							} else {
	                         		
        	row6.SEXO = routines.system.JDBCUtil.getString(rs_tOracleInput_3, 8, false);
		                    }
							if(colQtyInRs_tOracleInput_3 < 9) {
								row6.FNACIMIENTO = null;
							} else {
	                         		
        	row6.FNACIMIENTO = routines.system.JDBCUtil.getString(rs_tOracleInput_3, 9, false);
		                    }
							if(colQtyInRs_tOracleInput_3 < 10) {
								row6.CODREGIMEN = null;
							} else {
	                         		
        	row6.CODREGIMEN = routines.system.JDBCUtil.getString(rs_tOracleInput_3, 10, false);
		                    }
							if(colQtyInRs_tOracleInput_3 < 11) {
								row6.CODASEGURADORA = null;
							} else {
	                         		
        	row6.CODASEGURADORA = routines.system.JDBCUtil.getString(rs_tOracleInput_3, 11, false);
		                    }
							if(colQtyInRs_tOracleInput_3 < 12) {
								row6.ETNIA = null;
							} else {
	                         		
        	row6.ETNIA = routines.system.JDBCUtil.getString(rs_tOracleInput_3, 12, false);
		                    }
							if(colQtyInRs_tOracleInput_3 < 13) {
								row6.PESO_NACIMIENTO = null;
							} else {
		                          
					if(rs_tOracleInput_3.getObject(13) != null) {
						row6.PESO_NACIMIENTO = rs_tOracleInput_3.getBigDecimal(13);
					} else {
				
						row6.PESO_NACIMIENTO = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_3 < 14) {
								row6.EDAD_GESTACIONAL = null;
							} else {
		                          
					if(rs_tOracleInput_3.getObject(14) != null) {
						row6.EDAD_GESTACIONAL = rs_tOracleInput_3.getBigDecimal(14);
					} else {
				
						row6.EDAD_GESTACIONAL = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_3 < 15) {
								row6.PAIS_NACIMIENTO = null;
							} else {
	                         		
        	row6.PAIS_NACIMIENTO = routines.system.JDBCUtil.getString(rs_tOracleInput_3, 15, false);
		                    }
							if(colQtyInRs_tOracleInput_3 < 16) {
								row6.DEPTO_NACIMIENTO = null;
							} else {
	                         		
        	row6.DEPTO_NACIMIENTO = routines.system.JDBCUtil.getString(rs_tOracleInput_3, 16, false);
		                    }
							if(colQtyInRs_tOracleInput_3 < 17) {
								row6.MCPIO_NACIMIENTO = null;
							} else {
	                         		
        	row6.MCPIO_NACIMIENTO = routines.system.JDBCUtil.getString(rs_tOracleInput_3, 17, false);
		                    }
							if(colQtyInRs_tOracleInput_3 < 18) {
								row6.DESPLAZADO = null;
							} else {
		                          
					if(rs_tOracleInput_3.getObject(18) != null) {
						row6.DESPLAZADO = rs_tOracleInput_3.getBigDecimal(18);
					} else {
				
						row6.DESPLAZADO = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_3 < 19) {
								row6.DISCAPACITADO = null;
							} else {
		                          
					if(rs_tOracleInput_3.getObject(19) != null) {
						row6.DISCAPACITADO = rs_tOracleInput_3.getBigDecimal(19);
					} else {
				
						row6.DISCAPACITADO = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_3 < 20) {
								row6.FALLECIDO = null;
							} else {
		                          
					if(rs_tOracleInput_3.getObject(20) != null) {
						row6.FALLECIDO = rs_tOracleInput_3.getBigDecimal(20);
					} else {
				
						row6.FALLECIDO = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_3 < 21) {
								row6.ESTUDIA_ACTUAL = null;
							} else {
		                          
					if(rs_tOracleInput_3.getObject(21) != null) {
						row6.ESTUDIA_ACTUAL = rs_tOracleInput_3.getBigDecimal(21);
					} else {
				
						row6.ESTUDIA_ACTUAL = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_3 < 22) {
								row6.MADRE_TDOCUMENTO = null;
							} else {
	                         		
        	row6.MADRE_TDOCUMENTO = routines.system.JDBCUtil.getString(rs_tOracleInput_3, 22, false);
		                    }
							if(colQtyInRs_tOracleInput_3 < 23) {
								row6.MADRE_DOCUMENTO = null;
							} else {
	                         		
        	row6.MADRE_DOCUMENTO = routines.system.JDBCUtil.getString(rs_tOracleInput_3, 23, false);
		                    }
							if(colQtyInRs_tOracleInput_3 < 24) {
								row6.MADRE_NOMBRE1 = null;
							} else {
	                         		
        	row6.MADRE_NOMBRE1 = routines.system.JDBCUtil.getString(rs_tOracleInput_3, 24, false);
		                    }
							if(colQtyInRs_tOracleInput_3 < 25) {
								row6.MADRE_NOMBRE2 = null;
							} else {
	                         		
        	row6.MADRE_NOMBRE2 = routines.system.JDBCUtil.getString(rs_tOracleInput_3, 25, false);
		                    }
							if(colQtyInRs_tOracleInput_3 < 26) {
								row6.MADRE_APELLIDO1 = null;
							} else {
	                         		
        	row6.MADRE_APELLIDO1 = routines.system.JDBCUtil.getString(rs_tOracleInput_3, 26, false);
		                    }
							if(colQtyInRs_tOracleInput_3 < 27) {
								row6.MADRE_APELLIDO2 = null;
							} else {
	                         		
        	row6.MADRE_APELLIDO2 = routines.system.JDBCUtil.getString(rs_tOracleInput_3, 27, false);
		                    }
							if(colQtyInRs_tOracleInput_3 < 28) {
								row6.PAIS_RESIDENCIA = null;
							} else {
	                         		
        	row6.PAIS_RESIDENCIA = routines.system.JDBCUtil.getString(rs_tOracleInput_3, 28, false);
		                    }
							if(colQtyInRs_tOracleInput_3 < 29) {
								row6.DEPTO_RESIDENCIA = null;
							} else {
	                         		
        	row6.DEPTO_RESIDENCIA = routines.system.JDBCUtil.getString(rs_tOracleInput_3, 29, false);
		                    }
							if(colQtyInRs_tOracleInput_3 < 30) {
								row6.MCPIO_RESIDENCIA = null;
							} else {
	                         		
        	row6.MCPIO_RESIDENCIA = routines.system.JDBCUtil.getString(rs_tOracleInput_3, 30, false);
		                    }
							if(colQtyInRs_tOracleInput_3 < 31) {
								row6.CODIGO_VACUNA = null;
							} else {
	                         		
        	row6.CODIGO_VACUNA = routines.system.JDBCUtil.getString(rs_tOracleInput_3, 31, false);
		                    }
							if(colQtyInRs_tOracleInput_3 < 32) {
								row6.ENTIDAD_VACUNADORA = null;
							} else {
	                         		
        	row6.ENTIDAD_VACUNADORA = routines.system.JDBCUtil.getString(rs_tOracleInput_3, 32, false);
		                    }
							if(colQtyInRs_tOracleInput_3 < 33) {
								row6.LOTE_VACUNA = null;
							} else {
	                         		
        	row6.LOTE_VACUNA = routines.system.JDBCUtil.getString(rs_tOracleInput_3, 33, false);
		                    }
							if(colQtyInRs_tOracleInput_3 < 34) {
								row6.FVACUNACION = null;
							} else {
	                         		
        	row6.FVACUNACION = routines.system.JDBCUtil.getString(rs_tOracleInput_3, 34, false);
		                    }
							if(colQtyInRs_tOracleInput_3 < 35) {
								row6.VACUNADOR = null;
							} else {
	                         		
        	row6.VACUNADOR = routines.system.JDBCUtil.getString(rs_tOracleInput_3, 35, false);
		                    }
							if(colQtyInRs_tOracleInput_3 < 36) {
								row6.TESQUEMA = null;
							} else {
		                          
					if(rs_tOracleInput_3.getObject(36) != null) {
						row6.TESQUEMA = rs_tOracleInput_3.getBigDecimal(36);
					} else {
				
						row6.TESQUEMA = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_3 < 37) {
								row6.TIPO_DOSIS = null;
							} else {
	                         		
        	row6.TIPO_DOSIS = routines.system.JDBCUtil.getString(rs_tOracleInput_3, 37, false);
		                    }
							if(colQtyInRs_tOracleInput_3 < 38) {
								row6.NUMERO_DOSIS = null;
							} else {
		                          
					if(rs_tOracleInput_3.getObject(38) != null) {
						row6.NUMERO_DOSIS = rs_tOracleInput_3.getBigDecimal(38);
					} else {
				
						row6.NUMERO_DOSIS = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_3 < 39) {
								row6.ACTUALIZACION = null;
							} else {
	                         		
        	row6.ACTUALIZACION = routines.system.JDBCUtil.getString(rs_tOracleInput_3, 39, false);
		                    }
					




 



/**
 * [tOracleInput_3 begin ] stop
 */
	
	/**
	 * [tOracleInput_3 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_3";
	
	

 


	tos_count_tOracleInput_3++;

/**
 * [tOracleInput_3 main ] stop
 */
	
	/**
	 * [tOracleInput_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_3";
	
	

 



/**
 * [tOracleInput_3 process_data_begin ] stop
 */

	
	/**
	 * [tMap_1 main ] start
	 */

	

	
	
	currentComponent="tMap_1";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row6"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;
		
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_1 = false;
		boolean mainRowRejected_tMap_1 = false;
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_1__Struct Var = Var__tMap_1;
Var.TDOCUMENTO = StringHandling.TRIM(row6.TDOCUMENTO);
Var.DOCUMENTO = Utils.changeStr(row6.DOCUMENTO,"\\W","") ;// ###############################
        // ###############################
        // # Output tables

personas = null;
vacunacion = null;


// # Output table : 'personas'
personas_tmp.ID = row6.ID ;
personas_tmp.TDOCUMENTO = Var.TDOCUMENTO ;
personas_tmp.DOCUMENTO = Var.DOCUMENTO ;
personas_tmp.NOMBRE1 = row6.NOMBRE1 ;
personas_tmp.NOMBRE2 = row6.NOMBRE2 ;
personas_tmp.APELLIDO1 = row6.APELLIDO1 ;
personas_tmp.APELLIDO2 = row6.APELLIDO2 ;
personas_tmp.SEXO = row6.SEXO ;
personas_tmp.FNACIMIENTO = row6.FNACIMIENTO ;
personas_tmp.CODREGIMEN = row6.CODREGIMEN ;
personas_tmp.CODASEGURADORA = row6.CODASEGURADORA ;
personas_tmp.ETNIA = row6.ETNIA ;
personas_tmp.PESO_NACIMIENTO = row6.PESO_NACIMIENTO ;
personas_tmp.EDAD_GESTACIONAL = row6.EDAD_GESTACIONAL ;
personas_tmp.PAIS_NACIMIENTO = row6.PAIS_NACIMIENTO ;
personas_tmp.DEPTO_NACIMIENTO = row6.DEPTO_NACIMIENTO ;
personas_tmp.MCPIO_NACIMIENTO = row6.MCPIO_NACIMIENTO ;
personas_tmp.DESPLAZADO = row6.DESPLAZADO ;
personas_tmp.DISCAPACITADO = row6.DISCAPACITADO ;
personas_tmp.FALLECIDO = row6.FALLECIDO ;
personas_tmp.ESTUDIA_ACTUAL = row6.ESTUDIA_ACTUAL;
personas_tmp.MADRE_TDOCUMENTO = row6.MADRE_TDOCUMENTO ;
personas_tmp.MADRE_DOCUMENTO = row6.MADRE_DOCUMENTO ;
personas_tmp.MADRE_NOMBRE1 = row6.MADRE_NOMBRE1 ;
personas_tmp.MADRE_NOMBRE2 = row6.MADRE_NOMBRE2 ;
personas_tmp.MADRE_APELLIDO1 = row6.MADRE_APELLIDO1 ;
personas_tmp.MADRE_APELLIDO2 = row6.MADRE_APELLIDO2 ;
personas_tmp.PAIS_RESIDENCIA = row6.PAIS_RESIDENCIA ;
personas_tmp.DEPTO_RESIDENCIA = row6.DEPTO_RESIDENCIA ;
personas_tmp.MCPIO_RESIDENCIA = row6.MCPIO_RESIDENCIA ;
personas = personas_tmp;

// # Output table : 'vacunacion'
vacunacion_tmp.TDOCUMENTO = Var.TDOCUMENTO ;
vacunacion_tmp.DOCUMENTO = Var.DOCUMENTO ;
vacunacion_tmp.CODIGO_VACUNA = StringHandling.TRIM(row6.CODIGO_VACUNA);
vacunacion_tmp.ENTIDAD_VACUNADORA = Utils.changeStr(row6.ENTIDAD_VACUNADORA , "[\\W&&\\S]+", "", 100) ;
vacunacion_tmp.LOTE_VACUNA = Utils.changeStr(row6.LOTE_VACUNA , "\\W", "", 65) ;
vacunacion_tmp.FVACUNACION = row6.FVACUNACION ;
vacunacion_tmp.VACUNADOR = Utils.changeStr(row6.VACUNADOR , "[\\W&&\\S]+", "", 100) 
;
vacunacion_tmp.TESQUEMA = row6.TESQUEMA;
vacunacion_tmp.TIPO_DOSIS = Utils.changeStr(row6.TIPO_DOSIS , "\\W", "") ;
vacunacion_tmp.NUMERO_DOSIS = row6.NUMERO_DOSIS;
vacunacion_tmp.ACTUALIZACION = row6.ACTUALIZACION ;
vacunacion = vacunacion_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_1 = false;










 


	tos_count_tMap_1++;

/**
 * [tMap_1 main ] stop
 */
	
	/**
	 * [tMap_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_1";
	
	

 



/**
 * [tMap_1 process_data_begin ] stop
 */
// Start of branch "personas"
if(personas != null) { 



	
	/**
	 * [tUniqRow_1 main ] start
	 */

	

	
	
	currentComponent="tUniqRow_1";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"personas"
						
						);
					}
					
row7 = null;			
finder_tUniqRow_1.ID = personas.ID;	
finder_tUniqRow_1.hashCodeDirty = true;
if (!keystUniqRow_1.contains(finder_tUniqRow_1)) {
		KeyStruct_tUniqRow_1 new_tUniqRow_1 = new KeyStruct_tUniqRow_1();

		
new_tUniqRow_1.ID = personas.ID;
		
		keystUniqRow_1.add(new_tUniqRow_1);if(row7 == null){ 
	
	row7 = new row7Struct();
}row7.ID = personas.ID;			row7.TDOCUMENTO = personas.TDOCUMENTO;			row7.DOCUMENTO = personas.DOCUMENTO;			row7.NOMBRE1 = personas.NOMBRE1;			row7.NOMBRE2 = personas.NOMBRE2;			row7.APELLIDO1 = personas.APELLIDO1;			row7.APELLIDO2 = personas.APELLIDO2;			row7.SEXO = personas.SEXO;			row7.FNACIMIENTO = personas.FNACIMIENTO;			row7.CODREGIMEN = personas.CODREGIMEN;			row7.CODASEGURADORA = personas.CODASEGURADORA;			row7.ETNIA = personas.ETNIA;			row7.PESO_NACIMIENTO = personas.PESO_NACIMIENTO;			row7.EDAD_GESTACIONAL = personas.EDAD_GESTACIONAL;			row7.PAIS_NACIMIENTO = personas.PAIS_NACIMIENTO;			row7.DEPTO_NACIMIENTO = personas.DEPTO_NACIMIENTO;			row7.MCPIO_NACIMIENTO = personas.MCPIO_NACIMIENTO;			row7.DESPLAZADO = personas.DESPLAZADO;			row7.DISCAPACITADO = personas.DISCAPACITADO;			row7.FALLECIDO = personas.FALLECIDO;			row7.ESTUDIA_ACTUAL = personas.ESTUDIA_ACTUAL;			row7.MADRE_TDOCUMENTO = personas.MADRE_TDOCUMENTO;			row7.MADRE_DOCUMENTO = personas.MADRE_DOCUMENTO;			row7.MADRE_NOMBRE1 = personas.MADRE_NOMBRE1;			row7.MADRE_NOMBRE2 = personas.MADRE_NOMBRE2;			row7.MADRE_APELLIDO1 = personas.MADRE_APELLIDO1;			row7.MADRE_APELLIDO2 = personas.MADRE_APELLIDO2;			row7.PAIS_RESIDENCIA = personas.PAIS_RESIDENCIA;			row7.DEPTO_RESIDENCIA = personas.DEPTO_RESIDENCIA;			row7.MCPIO_RESIDENCIA = personas.MCPIO_RESIDENCIA;					
		nb_uniques_tUniqRow_1++;
	} else {
	  nb_duplicates_tUniqRow_1++;
	}

 


	tos_count_tUniqRow_1++;

/**
 * [tUniqRow_1 main ] stop
 */
	
	/**
	 * [tUniqRow_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tUniqRow_1";
	
	

 



/**
 * [tUniqRow_1 process_data_begin ] stop
 */
// Start of branch "row7"
if(row7 != null) { 



	
	/**
	 * [tMap_3 main ] start
	 */

	

	
	
	currentComponent="tMap_3";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row7"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_3 = false;
		
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_3 = false;
		boolean mainRowRejected_tMap_3 = false;
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_3__Struct Var = Var__tMap_3;
Var.PESO_NACIMIENTO = row7.PESO_NACIMIENTO == null ? new BigDecimal(0) : row7.PESO_NACIMIENTO ;
Var.EDAD_GESTACIONAL = row7.EDAD_GESTACIONAL == null ? new BigDecimal(0): row7.EDAD_GESTACIONAL ;// ###############################
        // ###############################
        // # Output tables

copyOfout1 = null;


// # Output table : 'copyOfout1'
copyOfout1_tmp.TIPODOCVACUNADO = row7.TDOCUMENTO;
copyOfout1_tmp.NUMDOCVACUNADO = row7.DOCUMENTO;
copyOfout1_tmp.NOMBRE1VACUNADO = Utils.changeStr(row7.NOMBRE1,"\\W","", 30) ;
copyOfout1_tmp.NOMBRE2VACUNADO = Utils.changeStr(row7.NOMBRE2,"[\\W&&\\S]+","", 30) ;
copyOfout1_tmp.APELLIDO1VACUNADO = Utils.changeStr(row7.APELLIDO1,"\\W","", 30) ;
copyOfout1_tmp.APELLIDO2VACUNADO = Utils.changeStr(row7.APELLIDO2,"[\\W&&\\S]+","", 30) ;
copyOfout1_tmp.SEXOVACUNADO = StringHandling.TRIM(row7.SEXO) ;
copyOfout1_tmp.FECHANACVACUNADO = StringHandling.TRIM(row7.FNACIMIENTO) ;
copyOfout1_tmp.REGIMENVACUNADO = StringHandling.TRIM(row7.CODREGIMEN ) ;
copyOfout1_tmp.CODADMINVACUNADO = Utils.changeStr(row7.CODASEGURADORA , "\\W", "") ;
copyOfout1_tmp.ETNIAVACUNADO = StringHandling.TRIM(row7.ETNIA) ;
copyOfout1_tmp.PESO_NACIMIENTO = (Var.PESO_NACIMIENTO.compareTo(new BigDecimal(9999)) == 1) || (Var.PESO_NACIMIENTO.compareTo(new BigDecimal(0)) == -1) ? new BigDecimal(0) : Var.PESO_NACIMIENTO ;
copyOfout1_tmp.EDAD_GESTACIONAL = (Var.EDAD_GESTACIONAL.compareTo(new BigDecimal(99)) == 1) || (Var.EDAD_GESTACIONAL.compareTo(new BigDecimal(0)) == -1) ? new BigDecimal(0) : Var.EDAD_GESTACIONAL ;
copyOfout1_tmp.PAIS_NACIMIENTO = Utils.changeStr(row7.PAIS_NACIMIENTO, "\\W", "") ;
copyOfout1_tmp.DEPTO_NACIMIENTO = Utils.changeStr(row7.DEPTO_NACIMIENTO , "\\W", "") 

;
copyOfout1_tmp.MCPIO_NACIMIENTO = Utils.changeStr(row7.MCPIO_NACIMIENTO , "\\W", "") 

;
copyOfout1_tmp.DESPLAZADO = row7.DESPLAZADO;
copyOfout1_tmp.DISCAPACITADO = row7.DISCAPACITADO ;
copyOfout1_tmp.FALLECIDO = row7.FALLECIDO ;
copyOfout1_tmp.ESTUIDA_ACTUAL = row7.ESTUDIA_ACTUAL ;
copyOfout1_tmp.MADRE_TDOCUMENTO = StringHandling.TRIM(row7.MADRE_TDOCUMENTO )
;
copyOfout1_tmp.MADRE_DOCUMENTO = Utils.changeStr(row7.MADRE_DOCUMENTO,"\\W","") ;
copyOfout1_tmp.MADRE_NOMBRE1 = Utils.changeStr(row7.MADRE_NOMBRE1 ,"\\W","", 30) ;
copyOfout1_tmp.MADRE_NOMBRE2 = Utils.changeStr(row7.MADRE_NOMBRE2 ,"[\\W&&\\S]+","", 30) ;
copyOfout1_tmp.MADRE_APELLIDO1 = Utils.changeStr(row7.MADRE_APELLIDO1 ,"\\W","", 30) 
;
copyOfout1_tmp.MADRE_APELLIDO2 = Utils.changeStr(row7.MADRE_APELLIDO2 ,"[\\W&&\\S]+","", 30) ;
copyOfout1_tmp.PAIS_RESIDENCIA = StringHandling.TRIM(row7.PAIS_RESIDENCIA);
copyOfout1_tmp.DEPTO_RESIDENCIA = Utils.changeStr(row7.DEPTO_RESIDENCIA , "\\W", "") 

;
copyOfout1_tmp.MCPIO_RESIDENCIA = Utils.changeStr(row7.MCPIO_RESIDENCIA , "\\W", "") 

;
copyOfout1 = copyOfout1_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_3 = false;










 


	tos_count_tMap_3++;

/**
 * [tMap_3 main ] stop
 */
	
	/**
	 * [tMap_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_3";
	
	

 



/**
 * [tMap_3 process_data_begin ] stop
 */
// Start of branch "copyOfout1"
if(copyOfout1 != null) { 



	
	/**
	 * [tFileOutputDelimited_4 main ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_4";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"copyOfout1"
						
						);
					}
					


                    StringBuilder sb_tFileOutputDelimited_4 = new StringBuilder();
                            if(copyOfout1.TIPODOCVACUNADO != null) {
                        sb_tFileOutputDelimited_4.append(
                            copyOfout1.TIPODOCVACUNADO
                        );
                            }
                            sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                            if(copyOfout1.NUMDOCVACUNADO != null) {
                        sb_tFileOutputDelimited_4.append(
                            copyOfout1.NUMDOCVACUNADO
                        );
                            }
                            sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                            if(copyOfout1.NOMBRE1VACUNADO != null) {
                        sb_tFileOutputDelimited_4.append(
                            copyOfout1.NOMBRE1VACUNADO
                        );
                            }
                            sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                            if(copyOfout1.NOMBRE2VACUNADO != null) {
                        sb_tFileOutputDelimited_4.append(
                            copyOfout1.NOMBRE2VACUNADO
                        );
                            }
                            sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                            if(copyOfout1.APELLIDO1VACUNADO != null) {
                        sb_tFileOutputDelimited_4.append(
                            copyOfout1.APELLIDO1VACUNADO
                        );
                            }
                            sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                            if(copyOfout1.APELLIDO2VACUNADO != null) {
                        sb_tFileOutputDelimited_4.append(
                            copyOfout1.APELLIDO2VACUNADO
                        );
                            }
                            sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                            if(copyOfout1.SEXOVACUNADO != null) {
                        sb_tFileOutputDelimited_4.append(
                            copyOfout1.SEXOVACUNADO
                        );
                            }
                            sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                            if(copyOfout1.FECHANACVACUNADO != null) {
                        sb_tFileOutputDelimited_4.append(
                            copyOfout1.FECHANACVACUNADO
                        );
                            }
                            sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                            if(copyOfout1.REGIMENVACUNADO != null) {
                        sb_tFileOutputDelimited_4.append(
                            copyOfout1.REGIMENVACUNADO
                        );
                            }
                            sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                            if(copyOfout1.CODADMINVACUNADO != null) {
                        sb_tFileOutputDelimited_4.append(
                            copyOfout1.CODADMINVACUNADO
                        );
                            }
                            sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                            if(copyOfout1.ETNIAVACUNADO != null) {
                        sb_tFileOutputDelimited_4.append(
                            copyOfout1.ETNIAVACUNADO
                        );
                            }
                            sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                            if(copyOfout1.PESO_NACIMIENTO != null) {
                        sb_tFileOutputDelimited_4.append(
                            copyOfout1.PESO_NACIMIENTO.setScale(0, java.math.RoundingMode.HALF_UP).toPlainString()
                        );
                            }
                            sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                            if(copyOfout1.EDAD_GESTACIONAL != null) {
                        sb_tFileOutputDelimited_4.append(
                            copyOfout1.EDAD_GESTACIONAL.setScale(0, java.math.RoundingMode.HALF_UP).toPlainString()
                        );
                            }
                            sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                            if(copyOfout1.PAIS_NACIMIENTO != null) {
                        sb_tFileOutputDelimited_4.append(
                            copyOfout1.PAIS_NACIMIENTO
                        );
                            }
                            sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                            if(copyOfout1.DEPTO_NACIMIENTO != null) {
                        sb_tFileOutputDelimited_4.append(
                            copyOfout1.DEPTO_NACIMIENTO
                        );
                            }
                            sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                            if(copyOfout1.MCPIO_NACIMIENTO != null) {
                        sb_tFileOutputDelimited_4.append(
                            copyOfout1.MCPIO_NACIMIENTO
                        );
                            }
                            sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                            if(copyOfout1.DESPLAZADO != null) {
                        sb_tFileOutputDelimited_4.append(
                            copyOfout1.DESPLAZADO.toPlainString()
                        );
                            }
                            sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                            if(copyOfout1.DISCAPACITADO != null) {
                        sb_tFileOutputDelimited_4.append(
                            copyOfout1.DISCAPACITADO.setScale(0, java.math.RoundingMode.HALF_UP).toPlainString()
                        );
                            }
                            sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                            if(copyOfout1.FALLECIDO != null) {
                        sb_tFileOutputDelimited_4.append(
                            copyOfout1.FALLECIDO.setScale(0, java.math.RoundingMode.HALF_UP).toPlainString()
                        );
                            }
                            sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                            if(copyOfout1.ESTUIDA_ACTUAL != null) {
                        sb_tFileOutputDelimited_4.append(
                            copyOfout1.ESTUIDA_ACTUAL.toPlainString()
                        );
                            }
                            sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                            if(copyOfout1.MADRE_TDOCUMENTO != null) {
                        sb_tFileOutputDelimited_4.append(
                            copyOfout1.MADRE_TDOCUMENTO
                        );
                            }
                            sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                            if(copyOfout1.MADRE_DOCUMENTO != null) {
                        sb_tFileOutputDelimited_4.append(
                            copyOfout1.MADRE_DOCUMENTO
                        );
                            }
                            sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                            if(copyOfout1.MADRE_NOMBRE1 != null) {
                        sb_tFileOutputDelimited_4.append(
                            copyOfout1.MADRE_NOMBRE1
                        );
                            }
                            sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                            if(copyOfout1.MADRE_NOMBRE2 != null) {
                        sb_tFileOutputDelimited_4.append(
                            copyOfout1.MADRE_NOMBRE2
                        );
                            }
                            sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                            if(copyOfout1.MADRE_APELLIDO1 != null) {
                        sb_tFileOutputDelimited_4.append(
                            copyOfout1.MADRE_APELLIDO1
                        );
                            }
                            sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                            if(copyOfout1.MADRE_APELLIDO2 != null) {
                        sb_tFileOutputDelimited_4.append(
                            copyOfout1.MADRE_APELLIDO2
                        );
                            }
                            sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                            if(copyOfout1.PAIS_RESIDENCIA != null) {
                        sb_tFileOutputDelimited_4.append(
                            copyOfout1.PAIS_RESIDENCIA
                        );
                            }
                            sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                            if(copyOfout1.DEPTO_RESIDENCIA != null) {
                        sb_tFileOutputDelimited_4.append(
                            copyOfout1.DEPTO_RESIDENCIA
                        );
                            }
                            sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                            if(copyOfout1.MCPIO_RESIDENCIA != null) {
                        sb_tFileOutputDelimited_4.append(
                            copyOfout1.MCPIO_RESIDENCIA
                        );
                            }
                    sb_tFileOutputDelimited_4.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_4);


                    nb_line_tFileOutputDelimited_4++;
                    resourceMap.put("nb_line_tFileOutputDelimited_4", nb_line_tFileOutputDelimited_4);

                        outtFileOutputDelimited_4.write(sb_tFileOutputDelimited_4.toString());




 


	tos_count_tFileOutputDelimited_4++;

/**
 * [tFileOutputDelimited_4 main ] stop
 */
	
	/**
	 * [tFileOutputDelimited_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_4";
	
	

 



/**
 * [tFileOutputDelimited_4 process_data_begin ] stop
 */
	
	/**
	 * [tFileOutputDelimited_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_4";
	
	

 



/**
 * [tFileOutputDelimited_4 process_data_end ] stop
 */

} // End of branch "copyOfout1"




	
	/**
	 * [tMap_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_3";
	
	

 



/**
 * [tMap_3 process_data_end ] stop
 */

} // End of branch "row7"




	
	/**
	 * [tUniqRow_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tUniqRow_1";
	
	

 



/**
 * [tUniqRow_1 process_data_end ] stop
 */

} // End of branch "personas"




// Start of branch "vacunacion"
if(vacunacion != null) { 



	
	/**
	 * [tFileOutputDelimited_5 main ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_5";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"vacunacion"
						
						);
					}
					


                    StringBuilder sb_tFileOutputDelimited_5 = new StringBuilder();
                            if(vacunacion.TDOCUMENTO != null) {
                        sb_tFileOutputDelimited_5.append(
                            vacunacion.TDOCUMENTO
                        );
                            }
                            sb_tFileOutputDelimited_5.append(OUT_DELIM_tFileOutputDelimited_5);
                            if(vacunacion.DOCUMENTO != null) {
                        sb_tFileOutputDelimited_5.append(
                            vacunacion.DOCUMENTO
                        );
                            }
                            sb_tFileOutputDelimited_5.append(OUT_DELIM_tFileOutputDelimited_5);
                            if(vacunacion.CODIGO_VACUNA != null) {
                        sb_tFileOutputDelimited_5.append(
                            vacunacion.CODIGO_VACUNA
                        );
                            }
                            sb_tFileOutputDelimited_5.append(OUT_DELIM_tFileOutputDelimited_5);
                            if(vacunacion.ENTIDAD_VACUNADORA != null) {
                        sb_tFileOutputDelimited_5.append(
                            vacunacion.ENTIDAD_VACUNADORA
                        );
                            }
                            sb_tFileOutputDelimited_5.append(OUT_DELIM_tFileOutputDelimited_5);
                            if(vacunacion.LOTE_VACUNA != null) {
                        sb_tFileOutputDelimited_5.append(
                            vacunacion.LOTE_VACUNA
                        );
                            }
                            sb_tFileOutputDelimited_5.append(OUT_DELIM_tFileOutputDelimited_5);
                            if(vacunacion.FVACUNACION != null) {
                        sb_tFileOutputDelimited_5.append(
                            vacunacion.FVACUNACION
                        );
                            }
                            sb_tFileOutputDelimited_5.append(OUT_DELIM_tFileOutputDelimited_5);
                            if(vacunacion.VACUNADOR != null) {
                        sb_tFileOutputDelimited_5.append(
                            vacunacion.VACUNADOR
                        );
                            }
                            sb_tFileOutputDelimited_5.append(OUT_DELIM_tFileOutputDelimited_5);
                            if(vacunacion.TESQUEMA != null) {
                        sb_tFileOutputDelimited_5.append(
                            vacunacion.TESQUEMA.setScale(0, java.math.RoundingMode.HALF_UP).toPlainString()
                        );
                            }
                            sb_tFileOutputDelimited_5.append(OUT_DELIM_tFileOutputDelimited_5);
                            if(vacunacion.TIPO_DOSIS != null) {
                        sb_tFileOutputDelimited_5.append(
                            vacunacion.TIPO_DOSIS
                        );
                            }
                            sb_tFileOutputDelimited_5.append(OUT_DELIM_tFileOutputDelimited_5);
                            if(vacunacion.NUMERO_DOSIS != null) {
                        sb_tFileOutputDelimited_5.append(
                            vacunacion.NUMERO_DOSIS.setScale(0, java.math.RoundingMode.HALF_UP).toPlainString()
                        );
                            }
                            sb_tFileOutputDelimited_5.append(OUT_DELIM_tFileOutputDelimited_5);
                            if(vacunacion.ACTUALIZACION != null) {
                        sb_tFileOutputDelimited_5.append(
                            vacunacion.ACTUALIZACION
                        );
                            }
                    sb_tFileOutputDelimited_5.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_5);


                    nb_line_tFileOutputDelimited_5++;
                    resourceMap.put("nb_line_tFileOutputDelimited_5", nb_line_tFileOutputDelimited_5);

                        outtFileOutputDelimited_5.write(sb_tFileOutputDelimited_5.toString());




 


	tos_count_tFileOutputDelimited_5++;

/**
 * [tFileOutputDelimited_5 main ] stop
 */
	
	/**
	 * [tFileOutputDelimited_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_5";
	
	

 



/**
 * [tFileOutputDelimited_5 process_data_begin ] stop
 */
	
	/**
	 * [tFileOutputDelimited_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_5";
	
	

 



/**
 * [tFileOutputDelimited_5 process_data_end ] stop
 */

} // End of branch "vacunacion"




	
	/**
	 * [tMap_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_1";
	
	

 



/**
 * [tMap_1 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_3";
	
	

 



/**
 * [tOracleInput_3 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_3 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_3";
	
	

}
}finally{
	if (rs_tOracleInput_3 != null) {
		rs_tOracleInput_3.close();
	}
	if (stmt_tOracleInput_3 != null) {
		stmt_tOracleInput_3.close();
	}
}

globalMap.put("tOracleInput_3_NB_LINE",nb_line_tOracleInput_3);
 

ok_Hash.put("tOracleInput_3", true);
end_Hash.put("tOracleInput_3", System.currentTimeMillis());




/**
 * [tOracleInput_3 end ] stop
 */

	
	/**
	 * [tMap_1 end ] start
	 */

	

	
	
	currentComponent="tMap_1";
	
	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row6");
			  	}
			  	
 

ok_Hash.put("tMap_1", true);
end_Hash.put("tMap_1", System.currentTimeMillis());




/**
 * [tMap_1 end ] stop
 */

	
	/**
	 * [tUniqRow_1 end ] start
	 */

	

	
	
	currentComponent="tUniqRow_1";
	
	

globalMap.put("tUniqRow_1_NB_UNIQUES",nb_uniques_tUniqRow_1);
globalMap.put("tUniqRow_1_NB_DUPLICATES",nb_duplicates_tUniqRow_1);

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"personas");
			  	}
			  	
 

ok_Hash.put("tUniqRow_1", true);
end_Hash.put("tUniqRow_1", System.currentTimeMillis());




/**
 * [tUniqRow_1 end ] stop
 */

	
	/**
	 * [tMap_3 end ] start
	 */

	

	
	
	currentComponent="tMap_3";
	
	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row7");
			  	}
			  	
 

ok_Hash.put("tMap_3", true);
end_Hash.put("tMap_3", System.currentTimeMillis());




/**
 * [tMap_3 end ] stop
 */

	
	/**
	 * [tFileOutputDelimited_4 end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_4";
	
	



		
			
					if(outtFileOutputDelimited_4!=null) {
						outtFileOutputDelimited_4.flush();
						outtFileOutputDelimited_4.close();
					}
				
				globalMap.put("tFileOutputDelimited_4_NB_LINE",nb_line_tFileOutputDelimited_4);
				globalMap.put("tFileOutputDelimited_4_FILE_NAME",fileName_tFileOutputDelimited_4);
			
		
		
		resourceMap.put("finish_tFileOutputDelimited_4", true);
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"copyOfout1");
			  	}
			  	
 

ok_Hash.put("tFileOutputDelimited_4", true);
end_Hash.put("tFileOutputDelimited_4", System.currentTimeMillis());




/**
 * [tFileOutputDelimited_4 end ] stop
 */










	
	/**
	 * [tFileOutputDelimited_5 end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_5";
	
	



		
			
					if(outtFileOutputDelimited_5!=null) {
						outtFileOutputDelimited_5.flush();
						outtFileOutputDelimited_5.close();
					}
				
				globalMap.put("tFileOutputDelimited_5_NB_LINE",nb_line_tFileOutputDelimited_5);
				globalMap.put("tFileOutputDelimited_5_FILE_NAME",fileName_tFileOutputDelimited_5);
			
		
		
		resourceMap.put("finish_tFileOutputDelimited_5", true);
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"vacunacion");
			  	}
			  	
 

ok_Hash.put("tFileOutputDelimited_5", true);
end_Hash.put("tFileOutputDelimited_5", System.currentTimeMillis());




/**
 * [tFileOutputDelimited_5 end ] stop
 */






				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tOracleInput_3:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk2", 0, "ok");
								} 
							
							tFileArchive_1Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleInput_3 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_3";
	
	

 



/**
 * [tOracleInput_3 finally ] stop
 */

	
	/**
	 * [tMap_1 finally ] start
	 */

	

	
	
	currentComponent="tMap_1";
	
	

 



/**
 * [tMap_1 finally ] stop
 */

	
	/**
	 * [tUniqRow_1 finally ] start
	 */

	

	
	
	currentComponent="tUniqRow_1";
	
	

 



/**
 * [tUniqRow_1 finally ] stop
 */

	
	/**
	 * [tMap_3 finally ] start
	 */

	

	
	
	currentComponent="tMap_3";
	
	

 



/**
 * [tMap_3 finally ] stop
 */

	
	/**
	 * [tFileOutputDelimited_4 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_4";
	
	


		if(resourceMap.get("finish_tFileOutputDelimited_4") == null){ 
			
				
						java.io.Writer outtFileOutputDelimited_4 = (java.io.Writer)resourceMap.get("out_tFileOutputDelimited_4");
						if(outtFileOutputDelimited_4!=null) {
							outtFileOutputDelimited_4.flush();
							outtFileOutputDelimited_4.close();
						}
					
				
			
		}
	

 



/**
 * [tFileOutputDelimited_4 finally ] stop
 */










	
	/**
	 * [tFileOutputDelimited_5 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_5";
	
	


		if(resourceMap.get("finish_tFileOutputDelimited_5") == null){ 
			
				
						java.io.Writer outtFileOutputDelimited_5 = (java.io.Writer)resourceMap.get("out_tFileOutputDelimited_5");
						if(outtFileOutputDelimited_5!=null) {
							outtFileOutputDelimited_5.flush();
							outtFileOutputDelimited_5.close();
						}
					
				
			
		}
	

 



/**
 * [tFileOutputDelimited_5 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_3_SUBPROCESS_STATE", 1);
	}
	


public void tFileArchive_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileArchive_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tFileArchive_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileArchive_1", false);
		start_Hash.put("tFileArchive_1", System.currentTimeMillis());
		
	
	currentComponent="tFileArchive_1";
	
	
		int tos_count_tFileArchive_1 = 0;
		

 



/**
 * [tFileArchive_1 begin ] stop
 */
	
	/**
	 * [tFileArchive_1 main ] start
	 */

	

	
	
	currentComponent="tFileArchive_1";
	
	

	

		String sourceFile_tFileArchive_1 = context.CARPETA_SALIDA;
	

    if (java.nio.file.Files.notExists(java.nio.file.Paths.get(sourceFile_tFileArchive_1), java.nio.file.LinkOption.NOFOLLOW_LINKS)){
        throw new java.io.FileNotFoundException(sourceFile_tFileArchive_1 + " (The system cannot find the path specified)");
    }

    String zipFile_tFileArchive_1 = context.CARPETA_SALIDA+"/"+context.NOMBRE_ZIP;
    
    com.talend.compress.zip.Zip zip_tFileArchive_1 = new com.talend.compress.zip.Zip(sourceFile_tFileArchive_1, zipFile_tFileArchive_1);
    zip_tFileArchive_1.setOverwriteExistTargetZip(true);
	zip_tFileArchive_1.setMakeTargetDir(false);
	zip_tFileArchive_1.setCompressLevel(4);
	zip_tFileArchive_1.setArchiveFormat("zip");
	zip_tFileArchive_1.setAllFiles(false);
	
	  
    	//build filename pattern filter
	    String[] patterns_tFileArchive_1 = new String[2];
    	
	        patterns_tFileArchive_1[0] = context.NOMBRE_PERSONAS;
	        patterns_tFileArchive_1[1] = context.NOMBRE_VACUNAS;
  		StringBuilder sbf_tFileArchive_1 = new StringBuilder(); 
        sbf_tFileArchive_1.append("(");
        for (int i_tFileArchive_1 = 0 ; i_tFileArchive_1 < patterns_tFileArchive_1.length ; i_tFileArchive_1++) {
            sbf_tFileArchive_1.append(patterns_tFileArchive_1[i_tFileArchive_1].replaceAll("\\.", "\\\\.").replaceAll("\\*", ".*"));
            if(i_tFileArchive_1 != patterns_tFileArchive_1.length-1) sbf_tFileArchive_1.append("|");
        }        
        sbf_tFileArchive_1.append(")");
        final String maskStr_tFileArchive_1 = new String(sbf_tFileArchive_1.toString());
        
        //apply the filter
       	zip_tFileArchive_1.setNamePatternFilter(maskStr_tFileArchive_1);
	
	   zip_tFileArchive_1.setContainSubDir(false);
	   zip_tFileArchive_1.setEncoding("ISO-8859-15");
	   zip_tFileArchive_1.setZip64Mode("ASNEEDED");
	   zip_tFileArchive_1.setEncrypted(false);
		        
	   
	    
	    
	final String decryptedPassword_tFileArchive_1 = routines.system.PasswordEncryptUtil.decryptPassword("enc:routine.encryption.key.v1:Pgj2rRgHGr4oMh8bHSEeT1B6HpUvS12Zs1i1Ew==");
	    
	   zip_tFileArchive_1.setPassword(decryptedPassword_tFileArchive_1);
	   
	      zip_tFileArchive_1.setUseZip4jEncryption(true);

	      
	   	  zip_tFileArchive_1.setEncryptionMethod("ZIP_STANDARD");
	   	  
  
  
   globalMap.put("tFileArchive_1_ARCHIVE_FILEPATH",zipFile_tFileArchive_1);
   
   globalMap.put("tFileArchive_1_ARCHIVE_FILENAME", new java.io.File(zipFile_tFileArchive_1).getName());

   zip_tFileArchive_1.doZip();


 


	tos_count_tFileArchive_1++;

/**
 * [tFileArchive_1 main ] stop
 */
	
	/**
	 * [tFileArchive_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileArchive_1";
	
	

 



/**
 * [tFileArchive_1 process_data_begin ] stop
 */
	
	/**
	 * [tFileArchive_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileArchive_1";
	
	

 



/**
 * [tFileArchive_1 process_data_end ] stop
 */
	
	/**
	 * [tFileArchive_1 end ] start
	 */

	

	
	
	currentComponent="tFileArchive_1";
	
	

 

ok_Hash.put("tFileArchive_1", true);
end_Hash.put("tFileArchive_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk11", 0, "ok");
				}
				tFileDelete_1Process(globalMap);
				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk9", 0, "ok");
				}
				tFileDelete_2Process(globalMap);



/**
 * [tFileArchive_1 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tFileArchive_1:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk4", 0, "ok");
								} 
							
							tFixedFlowInput_3Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileArchive_1 finally ] start
	 */

	

	
	
	currentComponent="tFileArchive_1";
	
	

 



/**
 * [tFileArchive_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileArchive_1_SUBPROCESS_STATE", 1);
	}
	


public void tFileDelete_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileDelete_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tFileDelete_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileDelete_1", false);
		start_Hash.put("tFileDelete_1", System.currentTimeMillis());
		
	
	currentComponent="tFileDelete_1";
	
	
		int tos_count_tFileDelete_1 = 0;
		

 



/**
 * [tFileDelete_1 begin ] stop
 */
	
	/**
	 * [tFileDelete_1 main ] start
	 */

	

	
	
	currentComponent="tFileDelete_1";
	
	

 

class DeleteFoldertFileDelete_1{
	 /**
     * delete all the sub-files in 'file'
     * 
     * @param file
     */
	public boolean delete(java.io.File file) {
        java.io.File[] files = file.listFiles();
        for (int i = 0; i < files.length; i++) {
            if (files[i].isFile()) {
                files[i].delete();
            } else if (files[i].isDirectory()) {
                if (!files[i].delete()) {
                    delete(files[i]);
                }
            }
        }
        deleteDirectory(file);
        return file.delete();
    }

    /**
     * delete all the sub-folders in 'file'
     * 
     * @param file
     */
    private void deleteDirectory(java.io.File file) {
        java.io.File[] filed = file.listFiles();
        for (int i = 0; i < filed.length; i++) {
        	if(filed[i].isDirectory()) {
            	deleteDirectory(filed[i]);
            }
            filed[i].delete();
        }
    }

}
    java.io.File file_tFileDelete_1=new java.io.File(context.CARPETA_SALIDA+"/"+context.NOMBRE_PERSONAS);
    if(file_tFileDelete_1.exists()&& file_tFileDelete_1.isFile()){
    	if(file_tFileDelete_1.delete()){
    		globalMap.put("tFileDelete_1_CURRENT_STATUS", "File deleted.");
		}else{
			globalMap.put("tFileDelete_1_CURRENT_STATUS", "No file deleted.");
				throw new RuntimeException("File " + file_tFileDelete_1.getAbsolutePath() + " can not be deleted.");
		}
	}else{
		globalMap.put("tFileDelete_1_CURRENT_STATUS", "File does not exist or is invalid.");
			throw new RuntimeException("File " + file_tFileDelete_1.getAbsolutePath() + " does not exist or is invalid or is not a file.");
	}
	globalMap.put("tFileDelete_1_DELETE_PATH",context.CARPETA_SALIDA+"/"+context.NOMBRE_PERSONAS);
 


	tos_count_tFileDelete_1++;

/**
 * [tFileDelete_1 main ] stop
 */
	
	/**
	 * [tFileDelete_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileDelete_1";
	
	

 



/**
 * [tFileDelete_1 process_data_begin ] stop
 */
	
	/**
	 * [tFileDelete_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileDelete_1";
	
	

 



/**
 * [tFileDelete_1 process_data_end ] stop
 */
	
	/**
	 * [tFileDelete_1 end ] start
	 */

	

	
	
	currentComponent="tFileDelete_1";
	
	

 

ok_Hash.put("tFileDelete_1", true);
end_Hash.put("tFileDelete_1", System.currentTimeMillis());




/**
 * [tFileDelete_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileDelete_1 finally ] start
	 */

	

	
	
	currentComponent="tFileDelete_1";
	
	

 



/**
 * [tFileDelete_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileDelete_1_SUBPROCESS_STATE", 1);
	}
	


public void tFileDelete_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileDelete_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tFileDelete_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileDelete_2", false);
		start_Hash.put("tFileDelete_2", System.currentTimeMillis());
		
	
	currentComponent="tFileDelete_2";
	
	
		int tos_count_tFileDelete_2 = 0;
		

 



/**
 * [tFileDelete_2 begin ] stop
 */
	
	/**
	 * [tFileDelete_2 main ] start
	 */

	

	
	
	currentComponent="tFileDelete_2";
	
	

 

class DeleteFoldertFileDelete_2{
	 /**
     * delete all the sub-files in 'file'
     * 
     * @param file
     */
	public boolean delete(java.io.File file) {
        java.io.File[] files = file.listFiles();
        for (int i = 0; i < files.length; i++) {
            if (files[i].isFile()) {
                files[i].delete();
            } else if (files[i].isDirectory()) {
                if (!files[i].delete()) {
                    delete(files[i]);
                }
            }
        }
        deleteDirectory(file);
        return file.delete();
    }

    /**
     * delete all the sub-folders in 'file'
     * 
     * @param file
     */
    private void deleteDirectory(java.io.File file) {
        java.io.File[] filed = file.listFiles();
        for (int i = 0; i < filed.length; i++) {
        	if(filed[i].isDirectory()) {
            	deleteDirectory(filed[i]);
            }
            filed[i].delete();
        }
    }

}
    java.io.File file_tFileDelete_2=new java.io.File(context.CARPETA_SALIDA+"/"+context.NOMBRE_VACUNAS);
    if(file_tFileDelete_2.exists()&& file_tFileDelete_2.isFile()){
    	if(file_tFileDelete_2.delete()){
    		globalMap.put("tFileDelete_2_CURRENT_STATUS", "File deleted.");
		}else{
			globalMap.put("tFileDelete_2_CURRENT_STATUS", "No file deleted.");
				throw new RuntimeException("File " + file_tFileDelete_2.getAbsolutePath() + " can not be deleted.");
		}
	}else{
		globalMap.put("tFileDelete_2_CURRENT_STATUS", "File does not exist or is invalid.");
			throw new RuntimeException("File " + file_tFileDelete_2.getAbsolutePath() + " does not exist or is invalid or is not a file.");
	}
	globalMap.put("tFileDelete_2_DELETE_PATH",context.CARPETA_SALIDA+"/"+context.NOMBRE_VACUNAS);
 


	tos_count_tFileDelete_2++;

/**
 * [tFileDelete_2 main ] stop
 */
	
	/**
	 * [tFileDelete_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileDelete_2";
	
	

 



/**
 * [tFileDelete_2 process_data_begin ] stop
 */
	
	/**
	 * [tFileDelete_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileDelete_2";
	
	

 



/**
 * [tFileDelete_2 process_data_end ] stop
 */
	
	/**
	 * [tFileDelete_2 end ] start
	 */

	

	
	
	currentComponent="tFileDelete_2";
	
	

 

ok_Hash.put("tFileDelete_2", true);
end_Hash.put("tFileDelete_2", System.currentTimeMillis());




/**
 * [tFileDelete_2 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileDelete_2 finally ] start
	 */

	

	
	
	currentComponent="tFileDelete_2";
	
	

 



/**
 * [tFileDelete_2 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileDelete_2_SUBPROCESS_STATE", 1);
	}
	


public static class row19Struct implements routines.system.IPersistableRow<row19Struct> {
    final static byte[] commonByteArrayLock_VAC_CONSOLIDADOS_VAC_VacunasAplicadasMSPS = new byte[0];
    static byte[] commonByteArray_VAC_CONSOLIDADOS_VAC_VacunasAplicadasMSPS = new byte[0];

	
			    public String CARPETA_SALIDA;

				public String getCARPETA_SALIDA () {
					return this.CARPETA_SALIDA;
				}

				public Boolean CARPETA_SALIDAIsNullable(){
				    return true;
				}
				public Boolean CARPETA_SALIDAIsKey(){
				    return false;
				}
				public Integer CARPETA_SALIDALength(){
				    return null;
				}
				public Integer CARPETA_SALIDAPrecision(){
				    return null;
				}
				public String CARPETA_SALIDADefault(){
				
					return null;
				
				}
				public String CARPETA_SALIDAComment(){
				
				    return "";
				
				}
				public String CARPETA_SALIDAPattern(){
				
					return "";
				
				}
				public String CARPETA_SALIDAOriginalDbColumnName(){
				
					return "CARPETA_SALIDA";
				
				}

				
			    public String NOMBRE_ZIP;

				public String getNOMBRE_ZIP () {
					return this.NOMBRE_ZIP;
				}

				public Boolean NOMBRE_ZIPIsNullable(){
				    return true;
				}
				public Boolean NOMBRE_ZIPIsKey(){
				    return false;
				}
				public Integer NOMBRE_ZIPLength(){
				    return null;
				}
				public Integer NOMBRE_ZIPPrecision(){
				    return null;
				}
				public String NOMBRE_ZIPDefault(){
				
					return null;
				
				}
				public String NOMBRE_ZIPComment(){
				
				    return "";
				
				}
				public String NOMBRE_ZIPPattern(){
				
					return "";
				
				}
				public String NOMBRE_ZIPOriginalDbColumnName(){
				
					return "NOMBRE_ZIP";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_VAC_CONSOLIDADOS_VAC_VacunasAplicadasMSPS.length) {
				if(length < 1024 && commonByteArray_VAC_CONSOLIDADOS_VAC_VacunasAplicadasMSPS.length == 0) {
   					commonByteArray_VAC_CONSOLIDADOS_VAC_VacunasAplicadasMSPS = new byte[1024];
				} else {
   					commonByteArray_VAC_CONSOLIDADOS_VAC_VacunasAplicadasMSPS = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_VAC_CONSOLIDADOS_VAC_VacunasAplicadasMSPS, 0, length);
			strReturn = new String(commonByteArray_VAC_CONSOLIDADOS_VAC_VacunasAplicadasMSPS, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_VAC_CONSOLIDADOS_VAC_VacunasAplicadasMSPS.length) {
				if(length < 1024 && commonByteArray_VAC_CONSOLIDADOS_VAC_VacunasAplicadasMSPS.length == 0) {
   					commonByteArray_VAC_CONSOLIDADOS_VAC_VacunasAplicadasMSPS = new byte[1024];
				} else {
   					commonByteArray_VAC_CONSOLIDADOS_VAC_VacunasAplicadasMSPS = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_VAC_CONSOLIDADOS_VAC_VacunasAplicadasMSPS, 0, length);
			strReturn = new String(commonByteArray_VAC_CONSOLIDADOS_VAC_VacunasAplicadasMSPS, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_VAC_CONSOLIDADOS_VAC_VacunasAplicadasMSPS) {

        	try {

        		int length = 0;
		
					this.CARPETA_SALIDA = readString(dis);
					
					this.NOMBRE_ZIP = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_VAC_CONSOLIDADOS_VAC_VacunasAplicadasMSPS) {

        	try {

        		int length = 0;
		
					this.CARPETA_SALIDA = readString(dis);
					
					this.NOMBRE_ZIP = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.CARPETA_SALIDA,dos);
					
					// String
				
						writeString(this.NOMBRE_ZIP,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.CARPETA_SALIDA,dos);
					
					// String
				
						writeString(this.NOMBRE_ZIP,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("CARPETA_SALIDA="+CARPETA_SALIDA);
		sb.append(",NOMBRE_ZIP="+NOMBRE_ZIP);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row19Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tFixedFlowInput_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFixedFlowInput_3_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row19Struct row19 = new row19Struct();




	
	/**
	 * [tBufferOutput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tBufferOutput_1", false);
		start_Hash.put("tBufferOutput_1", System.currentTimeMillis());
		
	
	currentComponent="tBufferOutput_1";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row19");
					}
				
		int tos_count_tBufferOutput_1 = 0;
		

 



/**
 * [tBufferOutput_1 begin ] stop
 */



	
	/**
	 * [tFixedFlowInput_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tFixedFlowInput_3", false);
		start_Hash.put("tFixedFlowInput_3", System.currentTimeMillis());
		
	
	currentComponent="tFixedFlowInput_3";
	
	
		int tos_count_tFixedFlowInput_3 = 0;
		

	    for (int i_tFixedFlowInput_3 = 0 ; i_tFixedFlowInput_3 < 1 ; i_tFixedFlowInput_3++) {
	                	            	
    	            		row19.CARPETA_SALIDA = context.CARPETA_SALIDA;
    	            	        	            	
    	            		row19.NOMBRE_ZIP = context.NOMBRE_ZIP;
    	            	

 



/**
 * [tFixedFlowInput_3 begin ] stop
 */
	
	/**
	 * [tFixedFlowInput_3 main ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_3";
	
	

 


	tos_count_tFixedFlowInput_3++;

/**
 * [tFixedFlowInput_3 main ] stop
 */
	
	/**
	 * [tFixedFlowInput_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_3";
	
	

 



/**
 * [tFixedFlowInput_3 process_data_begin ] stop
 */

	
	/**
	 * [tBufferOutput_1 main ] start
	 */

	

	
	
	currentComponent="tBufferOutput_1";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row19"
						
						);
					}
					



String[] row_tBufferOutput_1=new String[]{"","",};		
	    if(row19.CARPETA_SALIDA != null){
	        
	            row_tBufferOutput_1[0] = row19.CARPETA_SALIDA;
	                        			    
	    }else{
	    	row_tBufferOutput_1[0] = null;
	    }
	    if(row19.NOMBRE_ZIP != null){
	        
	            row_tBufferOutput_1[1] = row19.NOMBRE_ZIP;
	                        			    
	    }else{
	    	row_tBufferOutput_1[1] = null;
	    }
	globalBuffer.add(row_tBufferOutput_1);	
	
 


	tos_count_tBufferOutput_1++;

/**
 * [tBufferOutput_1 main ] stop
 */
	
	/**
	 * [tBufferOutput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tBufferOutput_1";
	
	

 



/**
 * [tBufferOutput_1 process_data_begin ] stop
 */
	
	/**
	 * [tBufferOutput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tBufferOutput_1";
	
	

 



/**
 * [tBufferOutput_1 process_data_end ] stop
 */



	
	/**
	 * [tFixedFlowInput_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_3";
	
	

 



/**
 * [tFixedFlowInput_3 process_data_end ] stop
 */
	
	/**
	 * [tFixedFlowInput_3 end ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_3";
	
	

        }
        globalMap.put("tFixedFlowInput_3_NB_LINE", 1);        

 

ok_Hash.put("tFixedFlowInput_3", true);
end_Hash.put("tFixedFlowInput_3", System.currentTimeMillis());




/**
 * [tFixedFlowInput_3 end ] stop
 */

	
	/**
	 * [tBufferOutput_1 end ] start
	 */

	

	
	
	currentComponent="tBufferOutput_1";
	
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row19");
			  	}
			  	
 

ok_Hash.put("tBufferOutput_1", true);
end_Hash.put("tBufferOutput_1", System.currentTimeMillis());




/**
 * [tBufferOutput_1 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFixedFlowInput_3 finally ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_3";
	
	

 



/**
 * [tFixedFlowInput_3 finally ] stop
 */

	
	/**
	 * [tBufferOutput_1 finally ] start
	 */

	

	
	
	currentComponent="tBufferOutput_1";
	
	

 



/**
 * [tBufferOutput_1 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFixedFlowInput_3_SUBPROCESS_STATE", 1);
	}
	


public void tPostjob_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPostjob_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tPostjob_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostjob_1", false);
		start_Hash.put("tPostjob_1", System.currentTimeMillis());
		
	
	currentComponent="tPostjob_1";
	
	
		int tos_count_tPostjob_1 = 0;
		

 



/**
 * [tPostjob_1 begin ] stop
 */
	
	/**
	 * [tPostjob_1 main ] start
	 */

	

	
	
	currentComponent="tPostjob_1";
	
	

 


	tos_count_tPostjob_1++;

/**
 * [tPostjob_1 main ] stop
 */
	
	/**
	 * [tPostjob_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tPostjob_1";
	
	

 



/**
 * [tPostjob_1 process_data_begin ] stop
 */
	
	/**
	 * [tPostjob_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tPostjob_1";
	
	

 



/**
 * [tPostjob_1 process_data_end ] stop
 */
	
	/**
	 * [tPostjob_1 end ] start
	 */

	

	
	
	currentComponent="tPostjob_1";
	
	

 

ok_Hash.put("tPostjob_1", true);
end_Hash.put("tPostjob_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk5", 0, "ok");
				}
				tJava_1Process(globalMap);



/**
 * [tPostjob_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPostjob_1 finally ] start
	 */

	

	
	
	currentComponent="tPostjob_1";
	
	

 



/**
 * [tPostjob_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPostjob_1_SUBPROCESS_STATE", 1);
	}
	


public void tJava_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tJava_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_1", false);
		start_Hash.put("tJava_1", System.currentTimeMillis());
		
	
	currentComponent="tJava_1";
	
	
		int tos_count_tJava_1 = 0;
		


//Guarda en variables de contexto la hora final de ejecución del etl, actualiza el estado a success y los imprime en consola

context.HORA_FINAL = TalendDate.getDate("HH:mm:ss");
context.ESTADO_EXEC = "Success";

System.out.println("- End: "+context.HORA_FINAL );
System.out.println("- Estado: "+context.ESTADO_EXEC );
 



/**
 * [tJava_1 begin ] stop
 */
	
	/**
	 * [tJava_1 main ] start
	 */

	

	
	
	currentComponent="tJava_1";
	
	

 


	tos_count_tJava_1++;

/**
 * [tJava_1 main ] stop
 */
	
	/**
	 * [tJava_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_1";
	
	

 



/**
 * [tJava_1 process_data_begin ] stop
 */
	
	/**
	 * [tJava_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_1";
	
	

 



/**
 * [tJava_1 process_data_end ] stop
 */
	
	/**
	 * [tJava_1 end ] start
	 */

	

	
	
	currentComponent="tJava_1";
	
	

 

ok_Hash.put("tJava_1", true);
end_Hash.put("tJava_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk6", 0, "ok");
				}
				tOracleClose_1Process(globalMap);
				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk8", 0, "ok");
				}
				tFixedFlowInput_1Process(globalMap);



/**
 * [tJava_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_1 finally ] start
	 */

	

	
	
	currentComponent="tJava_1";
	
	

 



/**
 * [tJava_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_1_SUBPROCESS_STATE", 1);
	}
	


public void tOracleClose_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleClose_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tOracleClose_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleClose_1", false);
		start_Hash.put("tOracleClose_1", System.currentTimeMillis());
		
	
	currentComponent="tOracleClose_1";
	
	
		int tos_count_tOracleClose_1 = 0;
		

 



/**
 * [tOracleClose_1 begin ] stop
 */
	
	/**
	 * [tOracleClose_1 main ] start
	 */

	

	
	
	currentComponent="tOracleClose_1";
	
	

	java.sql.Connection conn_tOracleClose_1 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");
	
	if(conn_tOracleClose_1 != null && !conn_tOracleClose_1.isClosed())
	{
		
			conn_tOracleClose_1.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_tOracleConnection_1"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
	}

 


	tos_count_tOracleClose_1++;

/**
 * [tOracleClose_1 main ] stop
 */
	
	/**
	 * [tOracleClose_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleClose_1";
	
	

 



/**
 * [tOracleClose_1 process_data_begin ] stop
 */
	
	/**
	 * [tOracleClose_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleClose_1";
	
	

 



/**
 * [tOracleClose_1 process_data_end ] stop
 */
	
	/**
	 * [tOracleClose_1 end ] start
	 */

	

	
	
	currentComponent="tOracleClose_1";
	
	

 

ok_Hash.put("tOracleClose_1", true);
end_Hash.put("tOracleClose_1", System.currentTimeMillis());




/**
 * [tOracleClose_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleClose_1 finally ] start
	 */

	

	
	
	currentComponent="tOracleClose_1";
	
	

 



/**
 * [tOracleClose_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleClose_1_SUBPROCESS_STATE", 1);
	}
	


public static class row4Struct implements routines.system.IPersistableRow<row4Struct> {
    final static byte[] commonByteArrayLock_VAC_CONSOLIDADOS_VAC_VacunasAplicadasMSPS = new byte[0];
    static byte[] commonByteArray_VAC_CONSOLIDADOS_VAC_VacunasAplicadasMSPS = new byte[0];

	
			    public String FECHA_EJECUCION;

				public String getFECHA_EJECUCION () {
					return this.FECHA_EJECUCION;
				}

				public Boolean FECHA_EJECUCIONIsNullable(){
				    return true;
				}
				public Boolean FECHA_EJECUCIONIsKey(){
				    return false;
				}
				public Integer FECHA_EJECUCIONLength(){
				    return null;
				}
				public Integer FECHA_EJECUCIONPrecision(){
				    return null;
				}
				public String FECHA_EJECUCIONDefault(){
				
					return null;
				
				}
				public String FECHA_EJECUCIONComment(){
				
				    return "";
				
				}
				public String FECHA_EJECUCIONPattern(){
				
					return "";
				
				}
				public String FECHA_EJECUCIONOriginalDbColumnName(){
				
					return "FECHA_EJECUCION";
				
				}

				
			    public String HORA_INICIO;

				public String getHORA_INICIO () {
					return this.HORA_INICIO;
				}

				public Boolean HORA_INICIOIsNullable(){
				    return true;
				}
				public Boolean HORA_INICIOIsKey(){
				    return false;
				}
				public Integer HORA_INICIOLength(){
				    return null;
				}
				public Integer HORA_INICIOPrecision(){
				    return null;
				}
				public String HORA_INICIODefault(){
				
					return null;
				
				}
				public String HORA_INICIOComment(){
				
				    return "";
				
				}
				public String HORA_INICIOPattern(){
				
					return "";
				
				}
				public String HORA_INICIOOriginalDbColumnName(){
				
					return "HORA_INICIO";
				
				}

				
			    public String HORA_FINAL;

				public String getHORA_FINAL () {
					return this.HORA_FINAL;
				}

				public Boolean HORA_FINALIsNullable(){
				    return true;
				}
				public Boolean HORA_FINALIsKey(){
				    return false;
				}
				public Integer HORA_FINALLength(){
				    return null;
				}
				public Integer HORA_FINALPrecision(){
				    return null;
				}
				public String HORA_FINALDefault(){
				
					return null;
				
				}
				public String HORA_FINALComment(){
				
				    return "";
				
				}
				public String HORA_FINALPattern(){
				
					return "";
				
				}
				public String HORA_FINALOriginalDbColumnName(){
				
					return "HORA_FINAL";
				
				}

				
			    public String ESTADO;

				public String getESTADO () {
					return this.ESTADO;
				}

				public Boolean ESTADOIsNullable(){
				    return true;
				}
				public Boolean ESTADOIsKey(){
				    return false;
				}
				public Integer ESTADOLength(){
				    return null;
				}
				public Integer ESTADOPrecision(){
				    return null;
				}
				public String ESTADODefault(){
				
					return null;
				
				}
				public String ESTADOComment(){
				
				    return "";
				
				}
				public String ESTADOPattern(){
				
					return "";
				
				}
				public String ESTADOOriginalDbColumnName(){
				
					return "ESTADO";
				
				}

				
			    public String JOBS;

				public String getJOBS () {
					return this.JOBS;
				}

				public Boolean JOBSIsNullable(){
				    return true;
				}
				public Boolean JOBSIsKey(){
				    return false;
				}
				public Integer JOBSLength(){
				    return null;
				}
				public Integer JOBSPrecision(){
				    return null;
				}
				public String JOBSDefault(){
				
					return null;
				
				}
				public String JOBSComment(){
				
				    return "";
				
				}
				public String JOBSPattern(){
				
					return "";
				
				}
				public String JOBSOriginalDbColumnName(){
				
					return "JOBS";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_VAC_CONSOLIDADOS_VAC_VacunasAplicadasMSPS.length) {
				if(length < 1024 && commonByteArray_VAC_CONSOLIDADOS_VAC_VacunasAplicadasMSPS.length == 0) {
   					commonByteArray_VAC_CONSOLIDADOS_VAC_VacunasAplicadasMSPS = new byte[1024];
				} else {
   					commonByteArray_VAC_CONSOLIDADOS_VAC_VacunasAplicadasMSPS = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_VAC_CONSOLIDADOS_VAC_VacunasAplicadasMSPS, 0, length);
			strReturn = new String(commonByteArray_VAC_CONSOLIDADOS_VAC_VacunasAplicadasMSPS, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_VAC_CONSOLIDADOS_VAC_VacunasAplicadasMSPS.length) {
				if(length < 1024 && commonByteArray_VAC_CONSOLIDADOS_VAC_VacunasAplicadasMSPS.length == 0) {
   					commonByteArray_VAC_CONSOLIDADOS_VAC_VacunasAplicadasMSPS = new byte[1024];
				} else {
   					commonByteArray_VAC_CONSOLIDADOS_VAC_VacunasAplicadasMSPS = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_VAC_CONSOLIDADOS_VAC_VacunasAplicadasMSPS, 0, length);
			strReturn = new String(commonByteArray_VAC_CONSOLIDADOS_VAC_VacunasAplicadasMSPS, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_VAC_CONSOLIDADOS_VAC_VacunasAplicadasMSPS) {

        	try {

        		int length = 0;
		
					this.FECHA_EJECUCION = readString(dis);
					
					this.HORA_INICIO = readString(dis);
					
					this.HORA_FINAL = readString(dis);
					
					this.ESTADO = readString(dis);
					
					this.JOBS = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_VAC_CONSOLIDADOS_VAC_VacunasAplicadasMSPS) {

        	try {

        		int length = 0;
		
					this.FECHA_EJECUCION = readString(dis);
					
					this.HORA_INICIO = readString(dis);
					
					this.HORA_FINAL = readString(dis);
					
					this.ESTADO = readString(dis);
					
					this.JOBS = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.FECHA_EJECUCION,dos);
					
					// String
				
						writeString(this.HORA_INICIO,dos);
					
					// String
				
						writeString(this.HORA_FINAL,dos);
					
					// String
				
						writeString(this.ESTADO,dos);
					
					// String
				
						writeString(this.JOBS,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.FECHA_EJECUCION,dos);
					
					// String
				
						writeString(this.HORA_INICIO,dos);
					
					// String
				
						writeString(this.HORA_FINAL,dos);
					
					// String
				
						writeString(this.ESTADO,dos);
					
					// String
				
						writeString(this.JOBS,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("FECHA_EJECUCION="+FECHA_EJECUCION);
		sb.append(",HORA_INICIO="+HORA_INICIO);
		sb.append(",HORA_FINAL="+HORA_FINAL);
		sb.append(",ESTADO="+ESTADO);
		sb.append(",JOBS="+JOBS);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row4Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tFixedFlowInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFixedFlowInput_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row4Struct row4 = new row4Struct();




	
	/**
	 * [tFileOutputDelimited_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputDelimited_2", false);
		start_Hash.put("tFileOutputDelimited_2", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputDelimited_2";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row4");
					}
				
		int tos_count_tFileOutputDelimited_2 = 0;
		

String fileName_tFileOutputDelimited_2 = "";
    fileName_tFileOutputDelimited_2 = (new java.io.File(context.LOGS_EXECUTION)).getAbsolutePath().replace("\\","/");
    String fullName_tFileOutputDelimited_2 = null;
    String extension_tFileOutputDelimited_2 = null;
    String directory_tFileOutputDelimited_2 = null;
    if((fileName_tFileOutputDelimited_2.indexOf("/") != -1)) {
        if(fileName_tFileOutputDelimited_2.lastIndexOf(".") < fileName_tFileOutputDelimited_2.lastIndexOf("/")) {
            fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2;
            extension_tFileOutputDelimited_2 = "";
        } else {
            fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(0, fileName_tFileOutputDelimited_2.lastIndexOf("."));
            extension_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(fileName_tFileOutputDelimited_2.lastIndexOf("."));
        }
        directory_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(0, fileName_tFileOutputDelimited_2.lastIndexOf("/"));
    } else {
        if(fileName_tFileOutputDelimited_2.lastIndexOf(".") != -1) {
            fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(0, fileName_tFileOutputDelimited_2.lastIndexOf("."));
            extension_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(fileName_tFileOutputDelimited_2.lastIndexOf("."));
        } else {
            fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2;
            extension_tFileOutputDelimited_2 = "";
        }
        directory_tFileOutputDelimited_2 = "";
    }
    boolean isFileGenerated_tFileOutputDelimited_2 = true;
    java.io.File filetFileOutputDelimited_2 = new java.io.File(fileName_tFileOutputDelimited_2);
    globalMap.put("tFileOutputDelimited_2_FILE_NAME",fileName_tFileOutputDelimited_2);
        if(filetFileOutputDelimited_2.exists()){
            isFileGenerated_tFileOutputDelimited_2 = false;
        }
            int nb_line_tFileOutputDelimited_2 = 0;
            int splitedFileNo_tFileOutputDelimited_2 = 0;
            int currentRow_tFileOutputDelimited_2 = 0;

            final String OUT_DELIM_tFileOutputDelimited_2 = /** Start field tFileOutputDelimited_2:FIELDSEPARATOR */";"/** End field tFileOutputDelimited_2:FIELDSEPARATOR */;

            final String OUT_DELIM_ROWSEP_tFileOutputDelimited_2 = /** Start field tFileOutputDelimited_2:ROWSEPARATOR */"\n"/** End field tFileOutputDelimited_2:ROWSEPARATOR */;

                    //create directory only if not exists
                    if(directory_tFileOutputDelimited_2 != null && directory_tFileOutputDelimited_2.trim().length() != 0) {
                        java.io.File dir_tFileOutputDelimited_2 = new java.io.File(directory_tFileOutputDelimited_2);
                        if(!dir_tFileOutputDelimited_2.exists()) {
                            dir_tFileOutputDelimited_2.mkdirs();
                        }
                    }

                        //routines.system.Row
                        java.io.Writer outtFileOutputDelimited_2 = null;

                        outtFileOutputDelimited_2 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
                        new java.io.FileOutputStream(fileName_tFileOutputDelimited_2, true),"ISO-8859-15"));
                resourceMap.put("out_tFileOutputDelimited_2", outtFileOutputDelimited_2);
                                    if(filetFileOutputDelimited_2.length()==0){
                                        outtFileOutputDelimited_2.write("FECHA_EJECUCION");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("HORA_INICIO");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("HORA_FINAL");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("ESTADO");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("JOBS");
                                        outtFileOutputDelimited_2.write(OUT_DELIM_ROWSEP_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.flush();
                                    }


resourceMap.put("nb_line_tFileOutputDelimited_2", nb_line_tFileOutputDelimited_2);

 



/**
 * [tFileOutputDelimited_2 begin ] stop
 */



	
	/**
	 * [tFixedFlowInput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFixedFlowInput_1", false);
		start_Hash.put("tFixedFlowInput_1", System.currentTimeMillis());
		
	
	currentComponent="tFixedFlowInput_1";
	
	
		int tos_count_tFixedFlowInput_1 = 0;
		

	    for (int i_tFixedFlowInput_1 = 0 ; i_tFixedFlowInput_1 < 1 ; i_tFixedFlowInput_1++) {
	                	            	
    	            		row4.FECHA_EJECUCION = context.FECHA_EJECUCION;
    	            	        	            	
    	            		row4.HORA_INICIO = context.HORA_INICIO;
    	            	        	            	
    	            		row4.HORA_FINAL = context.HORA_FINAL;
    	            	        	            	
    	            		row4.ESTADO = context.ESTADO_EXEC;
    	            	        	            	
    	            		row4.JOBS = context.JOB;
    	            	

 



/**
 * [tFixedFlowInput_1 begin ] stop
 */
	
	/**
	 * [tFixedFlowInput_1 main ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_1";
	
	

 


	tos_count_tFixedFlowInput_1++;

/**
 * [tFixedFlowInput_1 main ] stop
 */
	
	/**
	 * [tFixedFlowInput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_1";
	
	

 



/**
 * [tFixedFlowInput_1 process_data_begin ] stop
 */

	
	/**
	 * [tFileOutputDelimited_2 main ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_2";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row4"
						
						);
					}
					


                    StringBuilder sb_tFileOutputDelimited_2 = new StringBuilder();
                            if(row4.FECHA_EJECUCION != null) {
                        sb_tFileOutputDelimited_2.append(
                            row4.FECHA_EJECUCION
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(row4.HORA_INICIO != null) {
                        sb_tFileOutputDelimited_2.append(
                            row4.HORA_INICIO
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(row4.HORA_FINAL != null) {
                        sb_tFileOutputDelimited_2.append(
                            row4.HORA_FINAL
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(row4.ESTADO != null) {
                        sb_tFileOutputDelimited_2.append(
                            row4.ESTADO
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(row4.JOBS != null) {
                        sb_tFileOutputDelimited_2.append(
                            row4.JOBS
                        );
                            }
                    sb_tFileOutputDelimited_2.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_2);


                    nb_line_tFileOutputDelimited_2++;
                    resourceMap.put("nb_line_tFileOutputDelimited_2", nb_line_tFileOutputDelimited_2);

                        outtFileOutputDelimited_2.write(sb_tFileOutputDelimited_2.toString());




 


	tos_count_tFileOutputDelimited_2++;

/**
 * [tFileOutputDelimited_2 main ] stop
 */
	
	/**
	 * [tFileOutputDelimited_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_2";
	
	

 



/**
 * [tFileOutputDelimited_2 process_data_begin ] stop
 */
	
	/**
	 * [tFileOutputDelimited_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_2";
	
	

 



/**
 * [tFileOutputDelimited_2 process_data_end ] stop
 */



	
	/**
	 * [tFixedFlowInput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_1";
	
	

 



/**
 * [tFixedFlowInput_1 process_data_end ] stop
 */
	
	/**
	 * [tFixedFlowInput_1 end ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_1";
	
	

        }
        globalMap.put("tFixedFlowInput_1_NB_LINE", 1);        

 

ok_Hash.put("tFixedFlowInput_1", true);
end_Hash.put("tFixedFlowInput_1", System.currentTimeMillis());




/**
 * [tFixedFlowInput_1 end ] stop
 */

	
	/**
	 * [tFileOutputDelimited_2 end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_2";
	
	



		
			
					if(outtFileOutputDelimited_2!=null) {
						outtFileOutputDelimited_2.flush();
						outtFileOutputDelimited_2.close();
					}
				
				globalMap.put("tFileOutputDelimited_2_NB_LINE",nb_line_tFileOutputDelimited_2);
				globalMap.put("tFileOutputDelimited_2_FILE_NAME",fileName_tFileOutputDelimited_2);
			
		
		
		resourceMap.put("finish_tFileOutputDelimited_2", true);
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row4");
			  	}
			  	
 

ok_Hash.put("tFileOutputDelimited_2", true);
end_Hash.put("tFileOutputDelimited_2", System.currentTimeMillis());




/**
 * [tFileOutputDelimited_2 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFixedFlowInput_1 finally ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_1";
	
	

 



/**
 * [tFixedFlowInput_1 finally ] stop
 */

	
	/**
	 * [tFileOutputDelimited_2 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_2";
	
	


		if(resourceMap.get("finish_tFileOutputDelimited_2") == null){ 
			
				
						java.io.Writer outtFileOutputDelimited_2 = (java.io.Writer)resourceMap.get("out_tFileOutputDelimited_2");
						if(outtFileOutputDelimited_2!=null) {
							outtFileOutputDelimited_2.flush();
							outtFileOutputDelimited_2.close();
						}
					
				
			
		}
	

 



/**
 * [tFileOutputDelimited_2 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFixedFlowInput_1_SUBPROCESS_STATE", 1);
	}
	
    public String resuming_logs_dir_path = null;
    public String resuming_checkpoint_path = null;
    public String parent_part_launcher = null;
    private String resumeEntryMethodName = null;
    private boolean globalResumeTicket = false;

    public boolean watch = false;
    // portStats is null, it means don't execute the statistics
    public Integer portStats = null;
    public int portTraces = 4334;
    public String clientHost;
    public String defaultClientHost = "localhost";
    public String contextStr = "Default";
    public boolean isDefaultContext = true;
    public String pid = "0";
    public String rootPid = null;
    public String fatherPid = null;
    public String fatherNode = null;
    public long startTime = 0;
    public boolean isChildJob = false;
    public String log4jLevel = "";
    
    private boolean enableLogStash;

    private boolean execStat = true;

    private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
        protected java.util.Map<String, String> initialValue() {
            java.util.Map<String,String> threadRunResultMap = new java.util.HashMap<String, String>();
            threadRunResultMap.put("errorCode", null);
            threadRunResultMap.put("status", "");
            return threadRunResultMap;
        };
    };


    protected PropertiesWithType context_param = new PropertiesWithType();
    public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

    public String status= "";
    
    
    private final static java.util.Properties jobInfo = new java.util.Properties();
    private final static java.util.Map<String,String> mdcInfo = new java.util.HashMap<>();
    private final static java.util.concurrent.atomic.AtomicLong subJobPidCounter = new java.util.concurrent.atomic.AtomicLong();


    public static void main(String[] args){
        final VacunasAplicadasMSPS VacunasAplicadasMSPSClass = new VacunasAplicadasMSPS();

        int exitCode = VacunasAplicadasMSPSClass.runJobInTOS(args);

        System.exit(exitCode);
    }
	

	
	
	private void getjobInfo() {
		final String TEMPLATE_PATH = "src/main/templates/jobInfo_template.properties";
		final String BUILD_PATH = "../jobInfo.properties";
		final String path = this.getClass().getResource("").getPath();
		if(path.lastIndexOf("target") > 0) {
			final java.io.File templateFile = new java.io.File(
					path.substring(0, path.lastIndexOf("target")).concat(TEMPLATE_PATH));
			if (templateFile.exists()) {
				readJobInfo(templateFile);
				return;
			}
		}
			readJobInfo(new java.io.File(BUILD_PATH));
	}

    private void readJobInfo(java.io.File jobInfoFile){
	
        if(jobInfoFile.exists()) {
            try (java.io.InputStream is = new java.io.FileInputStream(jobInfoFile)) {
            	jobInfo.load(is);
            } catch (IOException e) {
            	 
                
            }
        }
    }


    public String[][] runJob(String[] args) {

        int exitCode = runJobInTOS(args);
        String[][] bufferValue = (String[][])globalBuffer.toArray(new String[globalBuffer.size()][]);

        return bufferValue;
    }

    public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;
    	
        		hastBufferOutput = true;
    	
        return hastBufferOutput;
    }

    public int runJobInTOS(String[] args) {
	   	// reset status
	   	status = "";
	   	
        String lastStr = "";
        for (String arg : args) {
            if (arg.equalsIgnoreCase("--context_param")) {
                lastStr = arg;
            } else if (lastStr.equals("")) {
                evalParam(arg);
            } else {
                evalParam(lastStr + " " + arg);
                lastStr = "";
            }
        }
        enableLogStash = "true".equalsIgnoreCase(System.getProperty("audit.enabled"));


		
		

        if(clientHost == null) {
            clientHost = defaultClientHost;
        }

        if(pid == null || "0".equals(pid)) {
            pid = TalendString.getAsciiRandomString(6);
        }


        if (rootPid==null) {
            rootPid = pid;
        }


        if (fatherPid==null) {
            fatherPid = pid;
        }else{
            isChildJob = true;
        }

        if (portStats != null) {
            // portStats = -1; //for testing
            if (portStats < 0 || portStats > 65535) {
                // issue:10869, the portStats is invalid, so this client socket can't open
                System.err.println("The statistics socket port " + portStats + " is invalid.");
                execStat = false;
            }
        } else {
            execStat = false;
        }
        boolean inOSGi = routines.system.BundleUtils.inOSGi();

        try {
            java.util.Dictionary<String, Object> jobProperties = null;
            if (inOSGi) {
                jobProperties = routines.system.BundleUtils.getJobProperties(jobName);
    
                if (jobProperties != null && jobProperties.get("context") != null) {
                    contextStr = (String)jobProperties.get("context");
                }
            }
            //call job/subjob with an existing context, like: --context=production. if without this parameter, there will use the default context instead.
            java.io.InputStream inContext = VacunasAplicadasMSPS.class.getClassLoader().getResourceAsStream("vac_consolidados_vac/vacunasaplicadasmsps_0_1/contexts/" + contextStr + ".properties");
            if (inContext == null) {
                inContext = VacunasAplicadasMSPS.class.getClassLoader().getResourceAsStream("config/contexts/" + contextStr + ".properties");
            }
            if (inContext != null) {
                try {
                    //defaultProps is in order to keep the original context value
                    if(context != null && context.isEmpty()) {
    	                defaultProps.load(inContext);
    	                if (inOSGi && jobProperties != null) {
                             java.util.Enumeration<String> keys = jobProperties.keys();
                             while (keys.hasMoreElements()) {
                                 String propKey = keys.nextElement();
                                 if (defaultProps.containsKey(propKey)) {
                                     defaultProps.put(propKey, (String) jobProperties.get(propKey));
                                 }
                             }
    	                }
    	                context = new ContextProperties(defaultProps);
                    }
                } finally {
                    inContext.close();
                }
            } else if (!isDefaultContext) {
                //print info and job continue to run, for case: context_param is not empty.
                System.err.println("Could not find the context " + contextStr);
            }
            
            if(!context_param.isEmpty()) {
                context.putAll(context_param);
				//set types for params from parentJobs
				for (Object key: context_param.keySet()){
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
            }
            class ContextProcessing {
                private void processContext_0() {
                        context.setContextType("CARPETA_SALIDA", "id_String");
                        if(context.getStringValue("CARPETA_SALIDA") == null) {
                            context.CARPETA_SALIDA = null;
                        } else {
                            context.CARPETA_SALIDA=(String) context.getProperty("CARPETA_SALIDA");
                        }
                        context.setContextType("NOMBRE_PERSONAS", "id_String");
                        if(context.getStringValue("NOMBRE_PERSONAS") == null) {
                            context.NOMBRE_PERSONAS = null;
                        } else {
                            context.NOMBRE_PERSONAS=(String) context.getProperty("NOMBRE_PERSONAS");
                        }
                        context.setContextType("NOMBRE_VACUNAS", "id_String");
                        if(context.getStringValue("NOMBRE_VACUNAS") == null) {
                            context.NOMBRE_VACUNAS = null;
                        } else {
                            context.NOMBRE_VACUNAS=(String) context.getProperty("NOMBRE_VACUNAS");
                        }
                        context.setContextType("NOMBRE_ZIP", "id_String");
                        if(context.getStringValue("NOMBRE_ZIP") == null) {
                            context.NOMBRE_ZIP = null;
                        } else {
                            context.NOMBRE_ZIP=(String) context.getProperty("NOMBRE_ZIP");
                        }
                        context.setContextType("ENCABEZADOS", "id_String");
                        if(context.getStringValue("ENCABEZADOS") == null) {
                            context.ENCABEZADOS = null;
                        } else {
                            context.ENCABEZADOS=(String) context.getProperty("ENCABEZADOS");
                        }
                        context.setContextType("MSPS", "id_String");
                        if(context.getStringValue("MSPS") == null) {
                            context.MSPS = null;
                        } else {
                            context.MSPS=(String) context.getProperty("MSPS");
                        }
                        context.setContextType("QUERY", "id_String");
                        if(context.getStringValue("QUERY") == null) {
                            context.QUERY = null;
                        } else {
                            context.QUERY=(String) context.getProperty("QUERY");
                        }
                        context.setContextType("SP_ESTADO", "id_Integer");
                        if(context.getStringValue("SP_ESTADO") == null) {
                            context.SP_ESTADO = null;
                        } else {
                            try{
                                context.SP_ESTADO=routines.system.ParserUtils.parseTo_Integer (context.getProperty("SP_ESTADO"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "SP_ESTADO", e.getMessage()));
                                context.SP_ESTADO=null;
                            }
                        }
                        context.setContextType("SP_MENSAJE", "id_String");
                        if(context.getStringValue("SP_MENSAJE") == null) {
                            context.SP_MENSAJE = null;
                        } else {
                            context.SP_MENSAJE=(String) context.getProperty("SP_MENSAJE");
                        }
                        context.setContextType("db_destino_AdditionalParams", "id_String");
                        if(context.getStringValue("db_destino_AdditionalParams") == null) {
                            context.db_destino_AdditionalParams = null;
                        } else {
                            context.db_destino_AdditionalParams=(String) context.getProperty("db_destino_AdditionalParams");
                        }
                        context.setContextType("db_destino_Login", "id_String");
                        if(context.getStringValue("db_destino_Login") == null) {
                            context.db_destino_Login = null;
                        } else {
                            context.db_destino_Login=(String) context.getProperty("db_destino_Login");
                        }
                        context.setContextType("db_destino_Password", "id_Password");
                        if(context.getStringValue("db_destino_Password") == null) {
                            context.db_destino_Password = null;
                        } else {
                            String pwd_db_destino_Password_value = context.getProperty("db_destino_Password");
                            context.db_destino_Password = null;
                            if(pwd_db_destino_Password_value!=null) {
                                if(context_param.containsKey("db_destino_Password")) {//no need to decrypt if it come from program argument or parent job runtime
                                    context.db_destino_Password = pwd_db_destino_Password_value;
                                } else if (!pwd_db_destino_Password_value.isEmpty()) {
                                    try {
                                        context.db_destino_Password = routines.system.PasswordEncryptUtil.decryptPassword(pwd_db_destino_Password_value);
                                        context.put("db_destino_Password",context.db_destino_Password);
                                    } catch (java.lang.RuntimeException e) {
                                        //do nothing
                                    }
                                }
                            }
                        }
                        context.setContextType("db_destino_Port", "id_String");
                        if(context.getStringValue("db_destino_Port") == null) {
                            context.db_destino_Port = null;
                        } else {
                            context.db_destino_Port=(String) context.getProperty("db_destino_Port");
                        }
                        context.setContextType("db_destino_Schema", "id_String");
                        if(context.getStringValue("db_destino_Schema") == null) {
                            context.db_destino_Schema = null;
                        } else {
                            context.db_destino_Schema=(String) context.getProperty("db_destino_Schema");
                        }
                        context.setContextType("db_destino_Server", "id_String");
                        if(context.getStringValue("db_destino_Server") == null) {
                            context.db_destino_Server = null;
                        } else {
                            context.db_destino_Server=(String) context.getProperty("db_destino_Server");
                        }
                        context.setContextType("db_destino_ServiceName", "id_String");
                        if(context.getStringValue("db_destino_ServiceName") == null) {
                            context.db_destino_ServiceName = null;
                        } else {
                            context.db_destino_ServiceName=(String) context.getProperty("db_destino_ServiceName");
                        }
                        context.setContextType("db_origen_AdditionalParams", "id_String");
                        if(context.getStringValue("db_origen_AdditionalParams") == null) {
                            context.db_origen_AdditionalParams = null;
                        } else {
                            context.db_origen_AdditionalParams=(String) context.getProperty("db_origen_AdditionalParams");
                        }
                        context.setContextType("db_origen_Login", "id_String");
                        if(context.getStringValue("db_origen_Login") == null) {
                            context.db_origen_Login = null;
                        } else {
                            context.db_origen_Login=(String) context.getProperty("db_origen_Login");
                        }
                        context.setContextType("db_origen_Password", "id_Password");
                        if(context.getStringValue("db_origen_Password") == null) {
                            context.db_origen_Password = null;
                        } else {
                            String pwd_db_origen_Password_value = context.getProperty("db_origen_Password");
                            context.db_origen_Password = null;
                            if(pwd_db_origen_Password_value!=null) {
                                if(context_param.containsKey("db_origen_Password")) {//no need to decrypt if it come from program argument or parent job runtime
                                    context.db_origen_Password = pwd_db_origen_Password_value;
                                } else if (!pwd_db_origen_Password_value.isEmpty()) {
                                    try {
                                        context.db_origen_Password = routines.system.PasswordEncryptUtil.decryptPassword(pwd_db_origen_Password_value);
                                        context.put("db_origen_Password",context.db_origen_Password);
                                    } catch (java.lang.RuntimeException e) {
                                        //do nothing
                                    }
                                }
                            }
                        }
                        context.setContextType("db_origen_Port", "id_String");
                        if(context.getStringValue("db_origen_Port") == null) {
                            context.db_origen_Port = null;
                        } else {
                            context.db_origen_Port=(String) context.getProperty("db_origen_Port");
                        }
                        context.setContextType("db_origen_Schema", "id_String");
                        if(context.getStringValue("db_origen_Schema") == null) {
                            context.db_origen_Schema = null;
                        } else {
                            context.db_origen_Schema=(String) context.getProperty("db_origen_Schema");
                        }
                        context.setContextType("db_origen_Server", "id_String");
                        if(context.getStringValue("db_origen_Server") == null) {
                            context.db_origen_Server = null;
                        } else {
                            context.db_origen_Server=(String) context.getProperty("db_origen_Server");
                        }
                        context.setContextType("db_origen_ServiceName", "id_String");
                        if(context.getStringValue("db_origen_ServiceName") == null) {
                            context.db_origen_ServiceName = null;
                        } else {
                            context.db_origen_ServiceName=(String) context.getProperty("db_origen_ServiceName");
                        }
                        context.setContextType("BIOLOGICO_ID", "id_String");
                        if(context.getStringValue("BIOLOGICO_ID") == null) {
                            context.BIOLOGICO_ID = null;
                        } else {
                            context.BIOLOGICO_ID=(String) context.getProperty("BIOLOGICO_ID");
                        }
                        context.setContextType("FECHA_FINAL", "id_String");
                        if(context.getStringValue("FECHA_FINAL") == null) {
                            context.FECHA_FINAL = null;
                        } else {
                            context.FECHA_FINAL=(String) context.getProperty("FECHA_FINAL");
                        }
                        context.setContextType("FECHA_INICIAL", "id_String");
                        if(context.getStringValue("FECHA_INICIAL") == null) {
                            context.FECHA_INICIAL = null;
                        } else {
                            context.FECHA_INICIAL=(String) context.getProperty("FECHA_INICIAL");
                        }
                        context.setContextType("FUERZA_ID", "id_String");
                        if(context.getStringValue("FUERZA_ID") == null) {
                            context.FUERZA_ID = null;
                        } else {
                            context.FUERZA_ID=(String) context.getProperty("FUERZA_ID");
                        }
                        context.setContextType("TDOSIS_ID", "id_String");
                        if(context.getStringValue("TDOSIS_ID") == null) {
                            context.TDOSIS_ID = null;
                        } else {
                            context.TDOSIS_ID=(String) context.getProperty("TDOSIS_ID");
                        }
                        context.setContextType("UORG_ID", "id_String");
                        if(context.getStringValue("UORG_ID") == null) {
                            context.UORG_ID = null;
                        } else {
                            context.UORG_ID=(String) context.getProperty("UORG_ID");
                        }
                        context.setContextType("BODEGA", "id_String");
                        if(context.getStringValue("BODEGA") == null) {
                            context.BODEGA = null;
                        } else {
                            context.BODEGA=(String) context.getProperty("BODEGA");
                        }
                        context.setContextType("ESTADO_EXEC", "id_String");
                        if(context.getStringValue("ESTADO_EXEC") == null) {
                            context.ESTADO_EXEC = null;
                        } else {
                            context.ESTADO_EXEC=(String) context.getProperty("ESTADO_EXEC");
                        }
                        context.setContextType("FECHA_EJECUCION", "id_String");
                        if(context.getStringValue("FECHA_EJECUCION") == null) {
                            context.FECHA_EJECUCION = null;
                        } else {
                            context.FECHA_EJECUCION=(String) context.getProperty("FECHA_EJECUCION");
                        }
                        context.setContextType("HORA_FINAL", "id_String");
                        if(context.getStringValue("HORA_FINAL") == null) {
                            context.HORA_FINAL = null;
                        } else {
                            context.HORA_FINAL=(String) context.getProperty("HORA_FINAL");
                        }
                        context.setContextType("HORA_INICIO", "id_String");
                        if(context.getStringValue("HORA_INICIO") == null) {
                            context.HORA_INICIO = null;
                        } else {
                            context.HORA_INICIO=(String) context.getProperty("HORA_INICIO");
                        }
                        context.setContextType("JOB", "id_String");
                        if(context.getStringValue("JOB") == null) {
                            context.JOB = null;
                        } else {
                            context.JOB=(String) context.getProperty("JOB");
                        }
                        context.setContextType("LOGS_ERROR", "id_String");
                        if(context.getStringValue("LOGS_ERROR") == null) {
                            context.LOGS_ERROR = null;
                        } else {
                            context.LOGS_ERROR=(String) context.getProperty("LOGS_ERROR");
                        }
                        context.setContextType("LOGS_EXECUTION", "id_String");
                        if(context.getStringValue("LOGS_EXECUTION") == null) {
                            context.LOGS_EXECUTION = null;
                        } else {
                            context.LOGS_EXECUTION=(String) context.getProperty("LOGS_EXECUTION");
                        }
                        context.setContextType("ORIGEN", "id_String");
                        if(context.getStringValue("ORIGEN") == null) {
                            context.ORIGEN = null;
                        } else {
                            context.ORIGEN=(String) context.getProperty("ORIGEN");
                        }
                        context.setContextType("STORAGE", "id_String");
                        if(context.getStringValue("STORAGE") == null) {
                            context.STORAGE = null;
                        } else {
                            context.STORAGE=(String) context.getProperty("STORAGE");
                        }
                        context.setContextType("MODULO", "id_String");
                        if(context.getStringValue("MODULO") == null) {
                            context.MODULO = null;
                        } else {
                            context.MODULO=(String) context.getProperty("MODULO");
                        }
                        context.setContextType("SARCHIVO_ID", "id_BigDecimal");
                        if(context.getStringValue("SARCHIVO_ID") == null) {
                            context.SARCHIVO_ID = null;
                        } else {
                            try{
                                context.SARCHIVO_ID=routines.system.ParserUtils.parseTo_BigDecimal (context.getProperty("SARCHIVO_ID"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "SARCHIVO_ID", e.getMessage()));
                                context.SARCHIVO_ID=null;
                            }
                        }
                        context.setContextType("SIGLA", "id_String");
                        if(context.getStringValue("SIGLA") == null) {
                            context.SIGLA = null;
                        } else {
                            context.SIGLA=(String) context.getProperty("SIGLA");
                        }
                } 
                public void processAllContext() {
                        processContext_0();
                }
            }

            new ContextProcessing().processAllContext();
        } catch (java.io.IOException ie) {
            System.err.println("Could not load context "+contextStr);
            ie.printStackTrace();
        }

        // get context value from parent directly
        if (parentContextMap != null && !parentContextMap.isEmpty()) {if (parentContextMap.containsKey("CARPETA_SALIDA")) {
                context.CARPETA_SALIDA = (String) parentContextMap.get("CARPETA_SALIDA");
            }if (parentContextMap.containsKey("NOMBRE_PERSONAS")) {
                context.NOMBRE_PERSONAS = (String) parentContextMap.get("NOMBRE_PERSONAS");
            }if (parentContextMap.containsKey("NOMBRE_VACUNAS")) {
                context.NOMBRE_VACUNAS = (String) parentContextMap.get("NOMBRE_VACUNAS");
            }if (parentContextMap.containsKey("NOMBRE_ZIP")) {
                context.NOMBRE_ZIP = (String) parentContextMap.get("NOMBRE_ZIP");
            }if (parentContextMap.containsKey("ENCABEZADOS")) {
                context.ENCABEZADOS = (String) parentContextMap.get("ENCABEZADOS");
            }if (parentContextMap.containsKey("MSPS")) {
                context.MSPS = (String) parentContextMap.get("MSPS");
            }if (parentContextMap.containsKey("QUERY")) {
                context.QUERY = (String) parentContextMap.get("QUERY");
            }if (parentContextMap.containsKey("SP_ESTADO")) {
                context.SP_ESTADO = (Integer) parentContextMap.get("SP_ESTADO");
            }if (parentContextMap.containsKey("SP_MENSAJE")) {
                context.SP_MENSAJE = (String) parentContextMap.get("SP_MENSAJE");
            }if (parentContextMap.containsKey("db_destino_AdditionalParams")) {
                context.db_destino_AdditionalParams = (String) parentContextMap.get("db_destino_AdditionalParams");
            }if (parentContextMap.containsKey("db_destino_Login")) {
                context.db_destino_Login = (String) parentContextMap.get("db_destino_Login");
            }if (parentContextMap.containsKey("db_destino_Password")) {
                context.db_destino_Password = (java.lang.String) parentContextMap.get("db_destino_Password");
            }if (parentContextMap.containsKey("db_destino_Port")) {
                context.db_destino_Port = (String) parentContextMap.get("db_destino_Port");
            }if (parentContextMap.containsKey("db_destino_Schema")) {
                context.db_destino_Schema = (String) parentContextMap.get("db_destino_Schema");
            }if (parentContextMap.containsKey("db_destino_Server")) {
                context.db_destino_Server = (String) parentContextMap.get("db_destino_Server");
            }if (parentContextMap.containsKey("db_destino_ServiceName")) {
                context.db_destino_ServiceName = (String) parentContextMap.get("db_destino_ServiceName");
            }if (parentContextMap.containsKey("db_origen_AdditionalParams")) {
                context.db_origen_AdditionalParams = (String) parentContextMap.get("db_origen_AdditionalParams");
            }if (parentContextMap.containsKey("db_origen_Login")) {
                context.db_origen_Login = (String) parentContextMap.get("db_origen_Login");
            }if (parentContextMap.containsKey("db_origen_Password")) {
                context.db_origen_Password = (java.lang.String) parentContextMap.get("db_origen_Password");
            }if (parentContextMap.containsKey("db_origen_Port")) {
                context.db_origen_Port = (String) parentContextMap.get("db_origen_Port");
            }if (parentContextMap.containsKey("db_origen_Schema")) {
                context.db_origen_Schema = (String) parentContextMap.get("db_origen_Schema");
            }if (parentContextMap.containsKey("db_origen_Server")) {
                context.db_origen_Server = (String) parentContextMap.get("db_origen_Server");
            }if (parentContextMap.containsKey("db_origen_ServiceName")) {
                context.db_origen_ServiceName = (String) parentContextMap.get("db_origen_ServiceName");
            }if (parentContextMap.containsKey("BIOLOGICO_ID")) {
                context.BIOLOGICO_ID = (String) parentContextMap.get("BIOLOGICO_ID");
            }if (parentContextMap.containsKey("FECHA_FINAL")) {
                context.FECHA_FINAL = (String) parentContextMap.get("FECHA_FINAL");
            }if (parentContextMap.containsKey("FECHA_INICIAL")) {
                context.FECHA_INICIAL = (String) parentContextMap.get("FECHA_INICIAL");
            }if (parentContextMap.containsKey("FUERZA_ID")) {
                context.FUERZA_ID = (String) parentContextMap.get("FUERZA_ID");
            }if (parentContextMap.containsKey("TDOSIS_ID")) {
                context.TDOSIS_ID = (String) parentContextMap.get("TDOSIS_ID");
            }if (parentContextMap.containsKey("UORG_ID")) {
                context.UORG_ID = (String) parentContextMap.get("UORG_ID");
            }if (parentContextMap.containsKey("BODEGA")) {
                context.BODEGA = (String) parentContextMap.get("BODEGA");
            }if (parentContextMap.containsKey("ESTADO_EXEC")) {
                context.ESTADO_EXEC = (String) parentContextMap.get("ESTADO_EXEC");
            }if (parentContextMap.containsKey("FECHA_EJECUCION")) {
                context.FECHA_EJECUCION = (String) parentContextMap.get("FECHA_EJECUCION");
            }if (parentContextMap.containsKey("HORA_FINAL")) {
                context.HORA_FINAL = (String) parentContextMap.get("HORA_FINAL");
            }if (parentContextMap.containsKey("HORA_INICIO")) {
                context.HORA_INICIO = (String) parentContextMap.get("HORA_INICIO");
            }if (parentContextMap.containsKey("JOB")) {
                context.JOB = (String) parentContextMap.get("JOB");
            }if (parentContextMap.containsKey("LOGS_ERROR")) {
                context.LOGS_ERROR = (String) parentContextMap.get("LOGS_ERROR");
            }if (parentContextMap.containsKey("LOGS_EXECUTION")) {
                context.LOGS_EXECUTION = (String) parentContextMap.get("LOGS_EXECUTION");
            }if (parentContextMap.containsKey("ORIGEN")) {
                context.ORIGEN = (String) parentContextMap.get("ORIGEN");
            }if (parentContextMap.containsKey("STORAGE")) {
                context.STORAGE = (String) parentContextMap.get("STORAGE");
            }if (parentContextMap.containsKey("MODULO")) {
                context.MODULO = (String) parentContextMap.get("MODULO");
            }if (parentContextMap.containsKey("SARCHIVO_ID")) {
                context.SARCHIVO_ID = (BigDecimal) parentContextMap.get("SARCHIVO_ID");
            }if (parentContextMap.containsKey("SIGLA")) {
                context.SIGLA = (String) parentContextMap.get("SIGLA");
            }
        }

        //Resume: init the resumeUtil
        resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
        resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
        resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
			parametersToEncrypt.add("db_destino_Password");
			parametersToEncrypt.add("db_origen_Password");
        //Resume: jobStart
        resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","","","",resumeUtil.convertToJsonText(context,ContextProperties.class,parametersToEncrypt));


if(execStat) {
    try {
        runStat.openSocket(!isChildJob);
        runStat.setAllPID(rootPid, fatherPid, pid, jobName);
        runStat.startThreadStat(clientHost, portStats);
        runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
    } catch (java.io.IOException ioException) {
        ioException.printStackTrace();
    }
}



	
	    java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
	    globalMap.put("concurrentHashMap", concurrentHashMap);
	

    long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
    long endUsedMemory = 0;
    long end = 0;

    startTime = System.currentTimeMillis();


this.globalResumeTicket = true;//to run tPreJob

try {
errorCode = null;tPrejob_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tPrejob_1) {
globalMap.put("tPrejob_1_SUBPROCESS_STATE", -1);

e_tPrejob_1.printStackTrace();

}




this.globalResumeTicket = false;//to run others jobs

try {
errorCode = null;tJava_2Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tJava_2) {
globalMap.put("tJava_2_SUBPROCESS_STATE", -1);

e_tJava_2.printStackTrace();

}

this.globalResumeTicket = true;//to run tPostJob

try {
errorCode = null;tPostjob_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tPostjob_1) {
globalMap.put("tPostjob_1_SUBPROCESS_STATE", -1);

e_tPostjob_1.printStackTrace();

}



        end = System.currentTimeMillis();

        if (watch) {
            System.out.println((end-startTime)+" milliseconds");
        }

        endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
        if (false) {
            System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : VacunasAplicadasMSPS");
        }



if (execStat) {
    runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
    runStat.stopThreadStat();
}
    int returnCode = 0;


    if(errorCode == null) {
         returnCode = status != null && status.equals("failure") ? 1 : 0;
    } else {
         returnCode = errorCode.intValue();
    }
    resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","" + returnCode,"","","");
    resumeUtil.flush();


    return returnCode;

  }

    // only for OSGi env
    public void destroy() {
    closeSqlDbConnections();


    }



    private void closeSqlDbConnections() {
        try {
            Object obj_conn;
            obj_conn = globalMap.remove("conn_tOracleConnection_1");
            if (null != obj_conn) {
                ((java.sql.Connection) obj_conn).close();
            }
        } catch (java.lang.Exception e) {
        }
    }











    private java.util.Map<String, Object> getSharedConnections4REST() {
        java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();
            connections.put("conn_tOracleConnection_1", globalMap.get("conn_tOracleConnection_1"));






        return connections;
    }

    private void evalParam(String arg) {
        if (arg.startsWith("--resuming_logs_dir_path")) {
            resuming_logs_dir_path = arg.substring(25);
        } else if (arg.startsWith("--resuming_checkpoint_path")) {
            resuming_checkpoint_path = arg.substring(27);
        } else if (arg.startsWith("--parent_part_launcher")) {
            parent_part_launcher = arg.substring(23);
        } else if (arg.startsWith("--watch")) {
            watch = true;
        } else if (arg.startsWith("--stat_port=")) {
            String portStatsStr = arg.substring(12);
            if (portStatsStr != null && !portStatsStr.equals("null")) {
                portStats = Integer.parseInt(portStatsStr);
            }
        } else if (arg.startsWith("--trace_port=")) {
            portTraces = Integer.parseInt(arg.substring(13));
        } else if (arg.startsWith("--client_host=")) {
            clientHost = arg.substring(14);
        } else if (arg.startsWith("--context=")) {
            contextStr = arg.substring(10);
            isDefaultContext = false;
        } else if (arg.startsWith("--father_pid=")) {
            fatherPid = arg.substring(13);
        } else if (arg.startsWith("--root_pid=")) {
            rootPid = arg.substring(11);
        } else if (arg.startsWith("--father_node=")) {
            fatherNode = arg.substring(14);
        } else if (arg.startsWith("--pid=")) {
            pid = arg.substring(6);
        } else if (arg.startsWith("--context_type")) {
            String keyValue = arg.substring(15);
			int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.setContextType(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }

            }

		} else if (arg.startsWith("--context_param")) {
            String keyValue = arg.substring(16);
            int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }
            }
        } else if (arg.startsWith("--context_file")) {
        	String keyValue = arg.substring(15);
        	String filePath = new String(java.util.Base64.getDecoder().decode(keyValue));
        	java.nio.file.Path contextFile = java.nio.file.Paths.get(filePath);
            try (java.io.BufferedReader reader = java.nio.file.Files.newBufferedReader(contextFile)) {
                String line;
                while ((line = reader.readLine()) != null) {
                    int index = -1;
                    if ( (index = line.indexOf('=')) > -1) {
							if (line.startsWith("--context_param")) {
								if ("id_Password".equals(context_param.getContextType(line.substring(16, index)))) {
									context_param.put(line.substring(16, index), routines.system.PasswordEncryptUtil.decryptPassword(
											line.substring(index + 1)));
								} else {
									context_param.put(line.substring(16, index), line.substring(index + 1));
								}
							}else {//--context_type
								context_param.setContextType(line.substring(15, index), line.substring(index + 1));
							}
                    }
                }
            } catch (java.io.IOException e) {
            	System.err.println("Could not load the context file: " + filePath);
                e.printStackTrace();
            }
        } else if (arg.startsWith("--log4jLevel=")) {
            log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--audit.enabled") && arg.contains("=")) {//for trunjob call
		    final int equal = arg.indexOf('=');
			final String key = arg.substring("--".length(), equal);
			System.setProperty(key, arg.substring(equal + 1));
		}
    }
    
    private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

    private final String[][] escapeChars = {
        {"\\\\","\\"},{"\\n","\n"},{"\\'","\'"},{"\\r","\r"},
        {"\\f","\f"},{"\\b","\b"},{"\\t","\t"}
        };
    private String replaceEscapeChars (String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0],currIndex);
				if (index>=0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0], strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
    }

    public Integer getErrorCode() {
        return errorCode;
    }


    public String getStatus() {
        return status;
    }

    ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 *     524780 characters generated by Talend Open Studio for ESB 
 *     on the November 1, 2024, 12:41:34 AM COT
 ************************************************************************************************/